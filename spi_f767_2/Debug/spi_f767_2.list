
spi_f767_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003864  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003a5c  08003a5c  00004a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a78  08003a78  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a78  08003a78  00004a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a80  08003a80  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a80  08003a80  00004a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a84  08003a84  00004a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a88  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08003a94  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003a94  00005118  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd1c  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad2  00000000  00000000  00010d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00012828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000722  00000000  00000000  00013160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002655a  00000000  00000000  00013882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c662  00000000  00000000  00039ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efb73  00000000  00000000  0004643e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135fb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002588  00000000  00000000  00135ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0013857c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003a44 	.word	0x08003a44

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003a44 	.word	0x08003a44

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <print_to_uart>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define TRANSFER_SIZE 32

void print_to_uart(uint8_t* str){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, str, strlen(str), 500);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff fe79 	bl	8000238 <strlen>
 8000546:	4603      	mov	r3, r0
 8000548:	b29a      	uxth	r2, r3
 800054a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4806      	ldr	r0, [pc, #24]	@ (800056c <print_to_uart+0x34>)
 8000552:	f002 fdad 	bl	80030b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, "\r\n", 2, 500);
 8000556:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800055a:	2202      	movs	r2, #2
 800055c:	4904      	ldr	r1, [pc, #16]	@ (8000570 <print_to_uart+0x38>)
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <print_to_uart+0x34>)
 8000560:	f002 fda6 	bl	80030b0 <HAL_UART_Transmit>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000008c 	.word	0x2000008c
 8000570:	08003a5c 	.word	0x08003a5c

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b092      	sub	sp, #72	@ 0x48
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fbfd 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f85b 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f923 	bl	80007cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000586:	f000 f8b3 	bl	80006f0 <MX_SPI1_Init>
  MX_UART4_Init();
 800058a:	f000 f8ef 	bl	800076c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t transfer_bytes[TRANSFER_SIZE];
  char funny_bytes[TRANSFER_SIZE];

  for (int8_t i = 0; i < TRANSFER_SIZE; i++){
 800058e:	2300      	movs	r3, #0
 8000590:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000594:	e00e      	b.n	80005b4 <main+0x40>
	  //transfer_bytes[i] = 67;

	  transfer_bytes[i] = i;
 8000596:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800059a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800059e:	3348      	adds	r3, #72	@ 0x48
 80005a0:	443b      	add	r3, r7
 80005a2:	f803 2c24 	strb.w	r2, [r3, #-36]
  for (int8_t i = 0; i < TRANSFER_SIZE; i++){
 80005a6:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	3301      	adds	r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80005b4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80005b8:	2b1f      	cmp	r3, #31
 80005ba:	ddec      	ble.n	8000596 <main+0x22>

  }
  //transfer_bytes[62] = 255;
  //transfer_bytes[63] = 255;

  for (int8_t i = 0; i < TRANSFER_SIZE; i++){
 80005bc:	2300      	movs	r3, #0
 80005be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80005c2:	e00e      	b.n	80005e2 <main+0x6e>
	  funny_bytes[i] = (i);
 80005c4:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 80005c8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80005cc:	3348      	adds	r3, #72	@ 0x48
 80005ce:	443b      	add	r3, r7
 80005d0:	f803 2c44 	strb.w	r2, [r3, #-68]
  for (int8_t i = 0; i < TRANSFER_SIZE; i++){
 80005d4:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	3301      	adds	r3, #1
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80005e2:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 80005e6:	2b1f      	cmp	r3, #31
 80005e8:	ddec      	ble.n	80005c4 <main+0x50>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005ea:	2180      	movs	r1, #128	@ 0x80
 80005ec:	480f      	ldr	r0, [pc, #60]	@ (800062c <main+0xb8>)
 80005ee:	f000 ff46 	bl	800147e <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f6:	f000 fc25 	bl	8000e44 <HAL_Delay>
	print_to_uart(funny_bytes);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff9b 	bl	8000538 <print_to_uart>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2110      	movs	r1, #16
 8000606:	480a      	ldr	r0, [pc, #40]	@ (8000630 <main+0xbc>)
 8000608:	f000 ff20 	bl	800144c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, transfer_bytes, TRANSFER_SIZE, 500);
 800060c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000610:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000614:	2220      	movs	r2, #32
 8000616:	4807      	ldr	r0, [pc, #28]	@ (8000634 <main+0xc0>)
 8000618:	f002 f8f1 	bl	80027fe <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_IT(&hspi1, transfer_bytes, TRANSFER_SIZE);


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2110      	movs	r1, #16
 8000620:	4803      	ldr	r0, [pc, #12]	@ (8000630 <main+0xbc>)
 8000622:	f000 ff13 	bl	800144c <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000626:	bf00      	nop
 8000628:	e7df      	b.n	80005ea <main+0x76>
 800062a:	bf00      	nop
 800062c:	40020400 	.word	0x40020400
 8000630:	40020000 	.word	0x40020000
 8000634:	20000028 	.word	0x20000028

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2234      	movs	r2, #52	@ 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f003 f9cf 	bl	80039ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <SystemClock_Config+0xb0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a21      	ldr	r2, [pc, #132]	@ (80006e8 <SystemClock_Config+0xb0>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <SystemClock_Config+0xb0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	4b1d      	ldr	r3, [pc, #116]	@ (80006ec <SystemClock_Config+0xb4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800067c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <SystemClock_Config+0xb4>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <SystemClock_Config+0xb4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 ff05 	bl	80014b4 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006b0:	f000 f9b8 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 f99d 	bl	8001a10 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006dc:	f000 f9a2 	bl	8000a24 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	@ 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_SPI1_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000768 <MX_SPI1_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_SPI1_Init+0x74>)
 80006fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_SPI1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <MX_SPI1_Init+0x74>)
 800070a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800070e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000710:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_SPI1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000716:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <MX_SPI1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_SPI1_Init+0x74>)
 800071e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000722:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_SPI1_Init+0x74>)
 8000726:	2220      	movs	r2, #32
 8000728:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <MX_SPI1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	@ (8000764 <MX_SPI1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_SPI1_Init+0x74>)
 800073e:	2207      	movs	r2, #7
 8000740:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_SPI1_Init+0x74>)
 800074a:	2208      	movs	r2, #8
 800074c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <MX_SPI1_Init+0x74>)
 8000750:	f001 ffaa 	bl	80026a8 <HAL_SPI_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 f963 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000028 	.word	0x20000028
 8000768:	40013000 	.word	0x40013000

0800076c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_UART4_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <MX_UART4_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_UART4_Init+0x58>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_UART4_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_UART4_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_UART4_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_UART4_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_UART4_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_UART4_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_UART4_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_UART4_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_UART4_Init+0x58>)
 80007b0:	f002 fc30 	bl	8003014 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f933 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000008c 	.word	0x2000008c
 80007c8:	40004c00 	.word	0x40004c00

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b8a      	ldr	r3, [pc, #552]	@ (8000a0c <MX_GPIO_Init+0x240>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a89      	ldr	r2, [pc, #548]	@ (8000a0c <MX_GPIO_Init+0x240>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b87      	ldr	r3, [pc, #540]	@ (8000a0c <MX_GPIO_Init+0x240>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b84      	ldr	r3, [pc, #528]	@ (8000a0c <MX_GPIO_Init+0x240>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a83      	ldr	r2, [pc, #524]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b81      	ldr	r3, [pc, #516]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b7e      	ldr	r3, [pc, #504]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a7d      	ldr	r2, [pc, #500]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b7b      	ldr	r3, [pc, #492]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b78      	ldr	r3, [pc, #480]	@ (8000a0c <MX_GPIO_Init+0x240>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a77      	ldr	r2, [pc, #476]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b75      	ldr	r3, [pc, #468]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	4b72      	ldr	r3, [pc, #456]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a71      	ldr	r2, [pc, #452]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b6f      	ldr	r3, [pc, #444]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085a:	4b6c      	ldr	r3, [pc, #432]	@ (8000a0c <MX_GPIO_Init+0x240>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a6b      	ldr	r2, [pc, #428]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b69      	ldr	r3, [pc, #420]	@ (8000a0c <MX_GPIO_Init+0x240>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f248 0110 	movw	r1, #32784	@ 0x8010
 8000878:	4865      	ldr	r0, [pc, #404]	@ (8000a10 <MX_GPIO_Init+0x244>)
 800087a:	f000 fde7 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f244 0191 	movw	r1, #16529	@ 0x4091
 8000884:	4863      	ldr	r0, [pc, #396]	@ (8000a14 <MX_GPIO_Init+0x248>)
 8000886:	f000 fde1 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2140      	movs	r1, #64	@ 0x40
 800088e:	4862      	ldr	r0, [pc, #392]	@ (8000a18 <MX_GPIO_Init+0x24c>)
 8000890:	f000 fddc 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000894:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	485c      	ldr	r0, [pc, #368]	@ (8000a1c <MX_GPIO_Init+0x250>)
 80008ac:	f000 fc22 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008b0:	2332      	movs	r3, #50	@ 0x32
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c0:	230b      	movs	r3, #11
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4854      	ldr	r0, [pc, #336]	@ (8000a1c <MX_GPIO_Init+0x250>)
 80008cc:	f000 fc12 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008d0:	2386      	movs	r3, #134	@ 0x86
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e0:	230b      	movs	r3, #11
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4849      	ldr	r0, [pc, #292]	@ (8000a10 <MX_GPIO_Init+0x244>)
 80008ec:	f000 fc02 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 80008f0:	f248 0310 	movw	r3, #32784	@ 0x8010
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4841      	ldr	r0, [pc, #260]	@ (8000a10 <MX_GPIO_Init+0x244>)
 800090a:	f000 fbf3 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4|LD2_Pin;
 800090e:	f244 0391 	movw	r3, #16529	@ 0x4091
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	483b      	ldr	r0, [pc, #236]	@ (8000a14 <MX_GPIO_Init+0x248>)
 8000928:	f000 fbe4 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800092c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800093e:	230b      	movs	r3, #11
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4832      	ldr	r0, [pc, #200]	@ (8000a14 <MX_GPIO_Init+0x248>)
 800094a:	f000 fbd3 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800094e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000960:	2307      	movs	r3, #7
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	482d      	ldr	r0, [pc, #180]	@ (8000a20 <MX_GPIO_Init+0x254>)
 800096c:	f000 fbc2 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000970:	2340      	movs	r3, #64	@ 0x40
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4824      	ldr	r0, [pc, #144]	@ (8000a18 <MX_GPIO_Init+0x24c>)
 8000988:	f000 fbb4 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800098c:	2380      	movs	r3, #128	@ 0x80
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	481e      	ldr	r0, [pc, #120]	@ (8000a18 <MX_GPIO_Init+0x24c>)
 80009a0:	f000 fba8 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009a4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b6:	230a      	movs	r3, #10
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <MX_GPIO_Init+0x244>)
 80009c2:	f000 fb97 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <MX_GPIO_Init+0x244>)
 80009dc:	f000 fb8a 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009e0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f2:	230b      	movs	r3, #11
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <MX_GPIO_Init+0x24c>)
 80009fe:	f000 fb79 	bl	80010f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a02:	bf00      	nop
 8000a04:	3730      	adds	r7, #48	@ 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <Error_Handler+0x8>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_MspInit+0x44>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	@ 0x30
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a37      	ldr	r2, [pc, #220]	@ (8000b74 <HAL_SPI_MspInit+0xfc>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d168      	bne.n	8000b6c <HAL_SPI_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9a:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	4a36      	ldr	r2, [pc, #216]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000aa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa6:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a30      	ldr	r2, [pc, #192]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a2a      	ldr	r2, [pc, #168]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b28      	ldr	r3, [pc, #160]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a24      	ldr	r2, [pc, #144]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <HAL_SPI_MspInit+0x100>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000afa:	2360      	movs	r3, #96	@ 0x60
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4819      	ldr	r0, [pc, #100]	@ (8000b7c <HAL_SPI_MspInit+0x104>)
 8000b16:	f000 faed 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b1a:	2380      	movs	r3, #128	@ 0x80
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4812      	ldr	r0, [pc, #72]	@ (8000b80 <HAL_SPI_MspInit+0x108>)
 8000b36:	f000 fadd 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	480b      	ldr	r0, [pc, #44]	@ (8000b84 <HAL_SPI_MspInit+0x10c>)
 8000b58:	f000 facc 	bl	80010f4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2023      	movs	r0, #35	@ 0x23
 8000b62:	f000 fa6e 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b66:	2023      	movs	r0, #35	@ 0x23
 8000b68:	f000 fa87 	bl	800107a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3730      	adds	r7, #48	@ 0x30
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40013000 	.word	0x40013000
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020c00 	.word	0x40020c00
 8000b84:	40021800 	.word	0x40021800

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2290      	movs	r2, #144	@ 0x90
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 ff1e 	bl	80039ea <memset>
  if(huart->Instance==UART4)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a32      	ldr	r2, [pc, #200]	@ (8000c7c <HAL_UART_MspInit+0xf4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d15d      	bne.n	8000c74 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000bb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 f946 	bl	8001e58 <HAL_RCCEx_PeriphCLKConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bd2:	f7ff ff27 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c80 <HAL_UART_MspInit+0xf8>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a29      	ldr	r2, [pc, #164]	@ (8000c80 <HAL_UART_MspInit+0xf8>)
 8000bdc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b27      	ldr	r3, [pc, #156]	@ (8000c80 <HAL_UART_MspInit+0xf8>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b24      	ldr	r3, [pc, #144]	@ (8000c80 <HAL_UART_MspInit+0xf8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a23      	ldr	r2, [pc, #140]	@ (8000c80 <HAL_UART_MspInit+0xf8>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <HAL_UART_MspInit+0xf8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <HAL_UART_MspInit+0xf8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c80 <HAL_UART_MspInit+0xf8>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <HAL_UART_MspInit+0xf8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c36:	2308      	movs	r3, #8
 8000c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c40:	4619      	mov	r1, r3
 8000c42:	4810      	ldr	r0, [pc, #64]	@ (8000c84 <HAL_UART_MspInit+0xfc>)
 8000c44:	f000 fa56 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c62:	2308      	movs	r3, #8
 8000c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	@ (8000c88 <HAL_UART_MspInit+0x100>)
 8000c70:	f000 fa40 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	37b8      	adds	r7, #184	@ 0xb8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40004c00 	.word	0x40004c00
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020800 	.word	0x40020800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <NMI_Handler+0x4>

08000c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce2:	f000 f88f 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <SPI1_IRQHandler+0x10>)
 8000cf2:	f001 fef3 	bl	8002adc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000028 	.word	0x20000028

08000d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480d      	ldr	r0, [pc, #52]	@ (8000d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2a:	490e      	ldr	r1, [pc, #56]	@ (8000d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d40:	4c0b      	ldr	r4, [pc, #44]	@ (8000d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff ffd7 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f002 fe53 	bl	80039fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f7ff fc0d 	bl	8000574 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d68:	08003a88 	.word	0x08003a88
  ldr r2, =_sbss
 8000d6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d70:	20000118 	.word	0x20000118

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x28>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f94f 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe4c 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f967 	bl	8001096 <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f92f 	bl	8001042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000114 	.word	0x20000114

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000114 	.word	0x20000114

08000e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e4c:	f7ff ffee 	bl	8000e2c <HAL_GetTick>
 8000e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5c:	d005      	beq.n	8000e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <HAL_Delay+0x44>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffde 	bl	8000e2c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d8f7      	bhi.n	8000e6c <HAL_Delay+0x28>
  {
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x40>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x40>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	05fa0000 	.word	0x05fa0000

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	@ (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	@ 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff8:	d301      	bcc.n	8000ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00f      	b.n	800101e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <SysTick_Config+0x40>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001006:	210f      	movs	r1, #15
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f7ff ff8e 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <SysTick_Config+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <SysTick_Config+0x40>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff29 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff3e 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff8e 	bl	8000f80 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5d 	bl	8000f2c <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff31 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffa2 	bl	8000fe8 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d004      	beq.n	80010cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2280      	movs	r2, #128	@ 0x80
 80010c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e00c      	b.n	80010e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2205      	movs	r2, #5
 80010d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0201 	bic.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e175      	b.n	8001400 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8164 	bne.w	80013fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x56>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80be 	beq.w	80013fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b66      	ldr	r3, [pc, #408]	@ (8001418 <HAL_GPIO_Init+0x324>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a65      	ldr	r2, [pc, #404]	@ (8001418 <HAL_GPIO_Init+0x324>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b63      	ldr	r3, [pc, #396]	@ (8001418 <HAL_GPIO_Init+0x324>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001296:	4a61      	ldr	r2, [pc, #388]	@ (800141c <HAL_GPIO_Init+0x328>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a58      	ldr	r2, [pc, #352]	@ (8001420 <HAL_GPIO_Init+0x32c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d037      	beq.n	8001332 <HAL_GPIO_Init+0x23e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a57      	ldr	r2, [pc, #348]	@ (8001424 <HAL_GPIO_Init+0x330>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d031      	beq.n	800132e <HAL_GPIO_Init+0x23a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a56      	ldr	r2, [pc, #344]	@ (8001428 <HAL_GPIO_Init+0x334>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d02b      	beq.n	800132a <HAL_GPIO_Init+0x236>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a55      	ldr	r2, [pc, #340]	@ (800142c <HAL_GPIO_Init+0x338>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x232>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a54      	ldr	r2, [pc, #336]	@ (8001430 <HAL_GPIO_Init+0x33c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x22e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a53      	ldr	r2, [pc, #332]	@ (8001434 <HAL_GPIO_Init+0x340>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x22a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	@ (8001438 <HAL_GPIO_Init+0x344>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x226>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a51      	ldr	r2, [pc, #324]	@ (800143c <HAL_GPIO_Init+0x348>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x222>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a50      	ldr	r2, [pc, #320]	@ (8001440 <HAL_GPIO_Init+0x34c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x21e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	@ (8001444 <HAL_GPIO_Init+0x350>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x21a>
 800130a:	2309      	movs	r3, #9
 800130c:	e012      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800130e:	230a      	movs	r3, #10
 8001310:	e010      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001312:	2308      	movs	r3, #8
 8001314:	e00e      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001316:	2307      	movs	r3, #7
 8001318:	e00c      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800131a:	2306      	movs	r3, #6
 800131c:	e00a      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800131e:	2305      	movs	r3, #5
 8001320:	e008      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001322:	2304      	movs	r3, #4
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001326:	2303      	movs	r3, #3
 8001328:	e004      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800132a:	2302      	movs	r3, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001332:	2300      	movs	r3, #0
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f002 0203 	and.w	r2, r2, #3
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4093      	lsls	r3, r2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001344:	4935      	ldr	r1, [pc, #212]	@ (800141c <HAL_GPIO_Init+0x328>)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <HAL_GPIO_Init+0x354>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a34      	ldr	r2, [pc, #208]	@ (8001448 <HAL_GPIO_Init+0x354>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b32      	ldr	r3, [pc, #200]	@ (8001448 <HAL_GPIO_Init+0x354>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a29      	ldr	r2, [pc, #164]	@ (8001448 <HAL_GPIO_Init+0x354>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a6:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <HAL_GPIO_Init+0x354>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001448 <HAL_GPIO_Init+0x354>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <HAL_GPIO_Init+0x354>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f4:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <HAL_GPIO_Init+0x354>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	f67f ae86 	bls.w	8001114 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40013800 	.word	0x40013800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40020800 	.word	0x40020800
 800142c:	40020c00 	.word	0x40020c00
 8001430:	40021000 	.word	0x40021000
 8001434:	40021400 	.word	0x40021400
 8001438:	40021800 	.word	0x40021800
 800143c:	40021c00 	.word	0x40021c00
 8001440:	40022000 	.word	0x40022000
 8001444:	40022400 	.word	0x40022400
 8001448:	40013c00 	.word	0x40013c00

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001468:	e003      	b.n	8001472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001490:	887a      	ldrh	r2, [r7, #2]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	041a      	lsls	r2, r3, #16
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43d9      	mvns	r1, r3
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	400b      	ands	r3, r1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e29b      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8087 	beq.w	80015e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d8:	4b96      	ldr	r3, [pc, #600]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d00c      	beq.n	80014fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e4:	4b93      	ldr	r3, [pc, #588]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d112      	bne.n	8001516 <HAL_RCC_OscConfig+0x62>
 80014f0:	4b90      	ldr	r3, [pc, #576]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014fc:	d10b      	bne.n	8001516 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fe:	4b8d      	ldr	r3, [pc, #564]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d06c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x130>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d168      	bne.n	80015e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e275      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x7a>
 8001520:	4b84      	ldr	r3, [pc, #528]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a83      	ldr	r2, [pc, #524]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e02e      	b.n	800158c <HAL_RCC_OscConfig+0xd8>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x9c>
 8001536:	4b7f      	ldr	r3, [pc, #508]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a7e      	ldr	r2, [pc, #504]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800153c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b7c      	ldr	r3, [pc, #496]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a7b      	ldr	r2, [pc, #492]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001548:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e01d      	b.n	800158c <HAL_RCC_OscConfig+0xd8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0xc0>
 800155a:	4b76      	ldr	r3, [pc, #472]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a75      	ldr	r2, [pc, #468]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b73      	ldr	r3, [pc, #460]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a72      	ldr	r2, [pc, #456]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0xd8>
 8001574:	4b6f      	ldr	r3, [pc, #444]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a6e      	ldr	r2, [pc, #440]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800157a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b6c      	ldr	r3, [pc, #432]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a6b      	ldr	r2, [pc, #428]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800158a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff fc4a 	bl	8000e2c <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fc46 	bl	8000e2c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	@ 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e229      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ae:	4b61      	ldr	r3, [pc, #388]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e014      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc36 	bl	8000e2c <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fc32 	bl	8000e2c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e215      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d6:	4b57      	ldr	r3, [pc, #348]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x110>
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d069      	beq.n	80016c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015f2:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b08      	cmp	r3, #8
 8001608:	d11c      	bne.n	8001644 <HAL_RCC_OscConfig+0x190>
 800160a:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	4b47      	ldr	r3, [pc, #284]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x17a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e1e9      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b41      	ldr	r3, [pc, #260]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	493d      	ldr	r1, [pc, #244]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	e040      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d023      	beq.n	8001694 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a38      	ldr	r2, [pc, #224]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fbe8 	bl	8000e2c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fbe4 	bl	8000e2c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1c7      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b30      	ldr	r3, [pc, #192]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4929      	ldr	r1, [pc, #164]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
 8001692:	e018      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a26      	ldr	r2, [pc, #152]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fbc4 	bl	8000e2c <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fbc0 	bl	8000e2c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1a3      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d038      	beq.n	8001744 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d019      	beq.n	800170e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016de:	4a15      	ldr	r2, [pc, #84]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff fba1 	bl	8000e2c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fb9d 	bl	8000e2c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e180      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x23a>
 800170c:	e01a      	b.n	8001744 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001712:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_RCC_OscConfig+0x280>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff fb87 	bl	8000e2c <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fb83 	bl	8000e2c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d903      	bls.n	8001738 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e166      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
 8001734:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	4b92      	ldr	r3, [pc, #584]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800173a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a4 	beq.w	800189a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001752:	4b8c      	ldr	r3, [pc, #560]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10d      	bne.n	800177a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b89      	ldr	r3, [pc, #548]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	4a88      	ldr	r2, [pc, #544]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
 800176a:	4b86      	ldr	r3, [pc, #536]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177a:	4b83      	ldr	r3, [pc, #524]	@ (8001988 <HAL_RCC_OscConfig+0x4d4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001786:	4b80      	ldr	r3, [pc, #512]	@ (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7f      	ldr	r2, [pc, #508]	@ (8001988 <HAL_RCC_OscConfig+0x4d4>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001792:	f7ff fb4b 	bl	8000e2c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff fb47 	bl	8000e2c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b64      	cmp	r3, #100	@ 0x64
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e12a      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b76      	ldr	r3, [pc, #472]	@ (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x31a>
 80017c0:	4b70      	ldr	r3, [pc, #448]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c4:	4a6f      	ldr	r2, [pc, #444]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80017cc:	e02d      	b.n	800182a <HAL_RCC_OscConfig+0x376>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x33c>
 80017d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017da:	4a6a      	ldr	r2, [pc, #424]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e2:	4b68      	ldr	r3, [pc, #416]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e6:	4a67      	ldr	r2, [pc, #412]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017e8:	f023 0304 	bic.w	r3, r3, #4
 80017ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ee:	e01c      	b.n	800182a <HAL_RCC_OscConfig+0x376>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x35e>
 80017f8:	4b62      	ldr	r3, [pc, #392]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fc:	4a61      	ldr	r2, [pc, #388]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6713      	str	r3, [r2, #112]	@ 0x70
 8001804:	4b5f      	ldr	r3, [pc, #380]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001808:	4a5e      	ldr	r2, [pc, #376]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001810:	e00b      	b.n	800182a <HAL_RCC_OscConfig+0x376>
 8001812:	4b5c      	ldr	r3, [pc, #368]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001816:	4a5b      	ldr	r2, [pc, #364]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6713      	str	r3, [r2, #112]	@ 0x70
 800181e:	4b59      	ldr	r3, [pc, #356]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	4a58      	ldr	r2, [pc, #352]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d015      	beq.n	800185e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fafb 	bl	8000e2c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff faf7 	bl	8000e2c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0d8      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ee      	beq.n	800183a <HAL_RCC_OscConfig+0x386>
 800185c:	e014      	b.n	8001888 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fae5 	bl	8000e2c <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff fae1 	bl	8000e2c <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0c2      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ee      	bne.n	8001866 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	4a3c      	ldr	r2, [pc, #240]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80ae 	beq.w	8001a00 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018a4:	4b37      	ldr	r3, [pc, #220]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d06d      	beq.n	800198c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d14b      	bne.n	8001950 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a31      	ldr	r2, [pc, #196]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80018be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fab2 	bl	8000e2c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff faae 	bl	8000e2c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e091      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	071b      	lsls	r3, r3, #28
 8001916:	491b      	ldr	r1, [pc, #108]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a18      	ldr	r2, [pc, #96]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fa80 	bl	8000e2c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff fa7c 	bl	8000e2c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e05f      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001942:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x47c>
 800194e:	e057      	b.n	8001a00 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0b      	ldr	r2, [pc, #44]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800195a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fa66 	bl	8000e2c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff fa62 	bl	8000e2c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e045      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_RCC_OscConfig+0x4d0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x4b0>
 8001982:	e03d      	b.n	8001a00 <HAL_RCC_OscConfig+0x54c>
 8001984:	40023800 	.word	0x40023800
 8001988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <HAL_RCC_OscConfig+0x558>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d030      	beq.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d129      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d122      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d119      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	3b01      	subs	r3, #1
 80019d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d10f      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0d0      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d910      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b67      	ldr	r3, [pc, #412]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 020f 	bic.w	r2, r3, #15
 8001a3e:	4965      	ldr	r1, [pc, #404]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b63      	ldr	r3, [pc, #396]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0b8      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a70:	4b59      	ldr	r3, [pc, #356]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a58      	ldr	r2, [pc, #352]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a88:	4b53      	ldr	r3, [pc, #332]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a52      	ldr	r2, [pc, #328]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b50      	ldr	r3, [pc, #320]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	494d      	ldr	r1, [pc, #308]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d040      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b47      	ldr	r3, [pc, #284]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d115      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e07f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad2:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e073      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e06b      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af2:	4b39      	ldr	r3, [pc, #228]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 0203 	bic.w	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4936      	ldr	r1, [pc, #216]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b04:	f7ff f992 	bl	8000e2c <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7ff f98e 	bl	8000e2c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e053      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 020c 	and.w	r2, r3, #12
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d1eb      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b34:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d210      	bcs.n	8001b64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 020f 	bic.w	r2, r3, #15
 8001b4a:	4922      	ldr	r1, [pc, #136]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e032      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4916      	ldr	r1, [pc, #88]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b8e:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	490e      	ldr	r1, [pc, #56]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ba2:	f000 f821 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	490a      	ldr	r1, [pc, #40]	@ (8001bdc <HAL_RCC_ClockConfig+0x1cc>)
 8001bb4:	5ccb      	ldrb	r3, [r1, r3]
 8001bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <HAL_RCC_ClockConfig+0x1d0>)
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bbe:	4b09      	ldr	r3, [pc, #36]	@ (8001be4 <HAL_RCC_ClockConfig+0x1d4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8ee 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023c00 	.word	0x40023c00
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	08003a60 	.word	0x08003a60
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bec:	b094      	sub	sp, #80	@ 0x50
 8001bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c00:	4b79      	ldr	r3, [pc, #484]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d00d      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x40>
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	f200 80e1 	bhi.w	8001dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x34>
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c1a:	e0db      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b73      	ldr	r3, [pc, #460]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c20:	e0db      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c22:	4b72      	ldr	r3, [pc, #456]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x204>)
 8001c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c26:	e0d8      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c28:	4b6f      	ldr	r3, [pc, #444]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c32:	4b6d      	ldr	r3, [pc, #436]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d063      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	2200      	movs	r2, #0
 8001c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c5a:	4622      	mov	r2, r4
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	f04f 0000 	mov.w	r0, #0
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	0159      	lsls	r1, r3, #5
 8001c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6c:	0150      	lsls	r0, r2, #5
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4621      	mov	r1, r4
 8001c74:	1a51      	subs	r1, r2, r1
 8001c76:	6139      	str	r1, [r7, #16]
 8001c78:	4629      	mov	r1, r5
 8001c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	018b      	lsls	r3, r1, #6
 8001c90:	4651      	mov	r1, sl
 8001c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c96:	4651      	mov	r1, sl
 8001c98:	018a      	lsls	r2, r1, #6
 8001c9a:	4651      	mov	r1, sl
 8001c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001ca0:	4659      	mov	r1, fp
 8001ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cba:	4690      	mov	r8, r2
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	eb18 0303 	adds.w	r3, r8, r3
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	462b      	mov	r3, r5
 8001cc8:	eb49 0303 	adc.w	r3, r9, r3
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cda:	4629      	mov	r1, r5
 8001cdc:	028b      	lsls	r3, r1, #10
 8001cde:	4621      	mov	r1, r4
 8001ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	028a      	lsls	r2, r1, #10
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cee:	2200      	movs	r2, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cf8:	f7fe faa6 	bl	8000248 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d04:	e058      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b38      	ldr	r3, [pc, #224]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4611      	mov	r1, r2
 8001d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d16:	623b      	str	r3, [r7, #32]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d20:	4642      	mov	r2, r8
 8001d22:	464b      	mov	r3, r9
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0159      	lsls	r1, r3, #5
 8001d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d32:	0150      	lsls	r0, r2, #5
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4641      	mov	r1, r8
 8001d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d3e:	4649      	mov	r1, r9
 8001d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d58:	ebb2 040a 	subs.w	r4, r2, sl
 8001d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	00eb      	lsls	r3, r5, #3
 8001d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d6e:	00e2      	lsls	r2, r4, #3
 8001d70:	4614      	mov	r4, r2
 8001d72:	461d      	mov	r5, r3
 8001d74:	4643      	mov	r3, r8
 8001d76:	18e3      	adds	r3, r4, r3
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	eb45 0303 	adc.w	r3, r5, r3
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d8e:	4629      	mov	r1, r5
 8001d90:	028b      	lsls	r3, r1, #10
 8001d92:	4621      	mov	r1, r4
 8001d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d98:	4621      	mov	r1, r4
 8001d9a:	028a      	lsls	r2, r1, #10
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001da2:	2200      	movs	r2, #0
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	61fa      	str	r2, [r7, #28]
 8001da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dac:	f7fe fa4c 	bl	8000248 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4613      	mov	r3, r2
 8001db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dd2:	e002      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_RCC_GetSysClockFreq+0x204>)
 8001dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3750      	adds	r7, #80	@ 0x50
 8001de0:	46bd      	mov	sp, r7
 8001de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	00f42400 	.word	0x00f42400

08001df0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000

08001e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e0c:	f7ff fff0 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	0a9b      	lsrs	r3, r3, #10
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4903      	ldr	r1, [pc, #12]	@ (8001e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	08003a70 	.word	0x08003a70

08001e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e34:	f7ff ffdc 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0b5b      	lsrs	r3, r3, #13
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4903      	ldr	r1, [pc, #12]	@ (8001e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08003a70 	.word	0x08003a70

08001e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d012      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e80:	4b69      	ldr	r3, [pc, #420]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	4a68      	ldr	r2, [pc, #416]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e86:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e8a:	6093      	str	r3, [r2, #8]
 8001e8c:	4b66      	ldr	r3, [pc, #408]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e94:	4964      	ldr	r1, [pc, #400]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d017      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec0:	4959      	ldr	r1, [pc, #356]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ecc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d017      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eee:	4b4e      	ldr	r3, [pc, #312]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	494a      	ldr	r1, [pc, #296]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 808b 	beq.w	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	4a39      	ldr	r2, [pc, #228]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f48:	4b37      	ldr	r3, [pc, #220]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f54:	4b35      	ldr	r3, [pc, #212]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a34      	ldr	r2, [pc, #208]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f60:	f7fe ff64 	bl	8000e2c <HAL_GetTick>
 8001f64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f68:	f7fe ff60 	bl	8000e2c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e38f      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f86:	4b28      	ldr	r3, [pc, #160]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d035      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d02e      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa4:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fba:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001fc6:	4a18      	ldr	r2, [pc, #96]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fcc:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d114      	bne.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe ff28 	bl	8000e2c <HAL_GetTick>
 8001fdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7fe ff24 	bl	8000e2c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e351      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0ee      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800200a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800200e:	d111      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800201e:	400b      	ands	r3, r1
 8002020:	4901      	ldr	r1, [pc, #4]	@ (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
 8002026:	e00b      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002028:	40023800 	.word	0x40023800
 800202c:	40007000 	.word	0x40007000
 8002030:	0ffffcff 	.word	0x0ffffcff
 8002034:	4bac      	ldr	r3, [pc, #688]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4aab      	ldr	r2, [pc, #684]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800203e:	6093      	str	r3, [r2, #8]
 8002040:	4ba9      	ldr	r3, [pc, #676]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002042:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204c:	49a6      	ldr	r1, [pc, #664]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204e:	4313      	orrs	r3, r2
 8002050:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800205e:	4ba2      	ldr	r3, [pc, #648]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002064:	4aa0      	ldr	r2, [pc, #640]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800206a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800206e:	4b9e      	ldr	r3, [pc, #632]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002070:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	499b      	ldr	r1, [pc, #620]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800208c:	4b96      	ldr	r3, [pc, #600]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800209a:	4993      	ldr	r1, [pc, #588]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ae:	4b8e      	ldr	r3, [pc, #568]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020bc:	498a      	ldr	r1, [pc, #552]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020d0:	4b85      	ldr	r3, [pc, #532]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020de:	4982      	ldr	r1, [pc, #520]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020f2:	4b7d      	ldr	r3, [pc, #500]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002100:	4979      	ldr	r1, [pc, #484]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002114:	4b74      	ldr	r3, [pc, #464]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	f023 0203 	bic.w	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	4971      	ldr	r1, [pc, #452]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002136:	4b6c      	ldr	r3, [pc, #432]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213c:	f023 020c 	bic.w	r2, r3, #12
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002144:	4968      	ldr	r1, [pc, #416]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002158:	4b63      	ldr	r3, [pc, #396]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	4960      	ldr	r1, [pc, #384]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800217a:	4b5b      	ldr	r3, [pc, #364]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002180:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002188:	4957      	ldr	r1, [pc, #348]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800219c:	4b52      	ldr	r3, [pc, #328]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	494f      	ldr	r1, [pc, #316]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80021be:	4b4a      	ldr	r3, [pc, #296]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	4946      	ldr	r1, [pc, #280]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021e0:	4b41      	ldr	r3, [pc, #260]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ee:	493e      	ldr	r1, [pc, #248]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002202:	4b39      	ldr	r3, [pc, #228]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002208:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002210:	4935      	ldr	r1, [pc, #212]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002224:	4b30      	ldr	r3, [pc, #192]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002232:	492d      	ldr	r1, [pc, #180]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d011      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002246:	4b28      	ldr	r3, [pc, #160]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800224c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002254:	4924      	ldr	r1, [pc, #144]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002264:	d101      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002266:	2301      	movs	r3, #1
 8002268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002276:	2301      	movs	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002286:	4b18      	ldr	r3, [pc, #96]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002294:	4914      	ldr	r1, [pc, #80]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022a8:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022b8:	490b      	ldr	r1, [pc, #44]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00f      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022dc:	4902      	ldr	r1, [pc, #8]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022e4:	e002      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x494>
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00b      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022f8:	4b8a      	ldr	r3, [pc, #552]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002308:	4986      	ldr	r1, [pc, #536]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800231c:	4b81      	ldr	r3, [pc, #516]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800231e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002322:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800232c:	497d      	ldr	r1, [pc, #500]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d006      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80d6 	beq.w	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002348:	4b76      	ldr	r3, [pc, #472]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a75      	ldr	r2, [pc, #468]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800234e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002354:	f7fe fd6a 	bl	8000e2c <HAL_GetTick>
 8002358:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800235c:	f7fe fd66 	bl	8000e2c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e195      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800236e:	4b6d      	ldr	r3, [pc, #436]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d021      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11d      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800238e:	4b65      	ldr	r3, [pc, #404]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800239c:	4b61      	ldr	r3, [pc, #388]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023a2:	0e1b      	lsrs	r3, r3, #24
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	019a      	lsls	r2, r3, #6
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	071b      	lsls	r3, r3, #28
 80023c2:	4958      	ldr	r1, [pc, #352]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02e      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f4:	d129      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023fc:	0c1b      	lsrs	r3, r3, #16
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002404:	4b47      	ldr	r3, [pc, #284]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800240a:	0f1b      	lsrs	r3, r3, #28
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	019a      	lsls	r2, r3, #6
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	431a      	orrs	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	071b      	lsls	r3, r3, #28
 800242a:	493e      	ldr	r1, [pc, #248]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002432:	4b3c      	ldr	r3, [pc, #240]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002438:	f023 021f 	bic.w	r2, r3, #31
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	3b01      	subs	r3, #1
 8002442:	4938      	ldr	r1, [pc, #224]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d01d      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002456:	4b33      	ldr	r3, [pc, #204]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800245c:	0e1b      	lsrs	r3, r3, #24
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002464:	4b2f      	ldr	r3, [pc, #188]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800246a:	0f1b      	lsrs	r3, r3, #28
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	019a      	lsls	r2, r3, #6
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	061b      	lsls	r3, r3, #24
 8002484:	431a      	orrs	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	071b      	lsls	r3, r3, #28
 800248a:	4926      	ldr	r1, [pc, #152]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d011      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	019a      	lsls	r2, r3, #6
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	071b      	lsls	r3, r3, #28
 80024ba:	491a      	ldr	r1, [pc, #104]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ce:	f7fe fcad 	bl	8000e2c <HAL_GetTick>
 80024d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024d6:	f7fe fca9 	bl	8000e2c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	@ 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0d8      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	f040 80ce 	bne.w	8002698 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002508:	f7fe fc90 	bl	8000e2c <HAL_GetTick>
 800250c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800250e:	e00b      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002510:	f7fe fc8c 	bl	8000e2c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d904      	bls.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0bb      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002528:	4b5e      	ldr	r3, [pc, #376]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002534:	d0ec      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002552:	2b00      	cmp	r3, #0
 8002554:	d02e      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d12a      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800255e:	4b51      	ldr	r3, [pc, #324]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800256c:	4b4d      	ldr	r3, [pc, #308]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002572:	0f1b      	lsrs	r3, r3, #28
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	019a      	lsls	r2, r3, #6
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	061b      	lsls	r3, r3, #24
 800258c:	431a      	orrs	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	071b      	lsls	r3, r3, #28
 8002592:	4944      	ldr	r1, [pc, #272]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800259a:	4b42      	ldr	r3, [pc, #264]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	3b01      	subs	r3, #1
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	493d      	ldr	r1, [pc, #244]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d022      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025c8:	d11d      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025ca:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d0:	0e1b      	lsrs	r3, r3, #24
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025d8:	4b32      	ldr	r3, [pc, #200]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	0f1b      	lsrs	r3, r3, #28
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	019a      	lsls	r2, r3, #6
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	431a      	orrs	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	061b      	lsls	r3, r3, #24
 80025f8:	431a      	orrs	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	071b      	lsls	r3, r3, #28
 80025fe:	4929      	ldr	r1, [pc, #164]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d028      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002612:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002618:	0e1b      	lsrs	r3, r3, #24
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002620:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	0c1b      	lsrs	r3, r3, #16
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	019a      	lsls	r2, r3, #6
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	431a      	orrs	r2, r3
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	071b      	lsls	r3, r3, #28
 8002646:	4917      	ldr	r1, [pc, #92]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002654:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	4911      	ldr	r1, [pc, #68]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002664:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0e      	ldr	r2, [pc, #56]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002670:	f7fe fbdc 	bl	8000e2c <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002678:	f7fe fbd8 	bl	8000e2c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	@ 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e007      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002696:	d1ef      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800

080026a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e09d      	b.n	80027f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026ca:	d009      	beq.n	80026e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
 80026d2:	e005      	b.n	80026e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe f9bc 	bl	8000a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002716:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002720:	d902      	bls.n	8002728 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e002      	b.n	800272e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800272c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002736:	d007      	beq.n	8002748 <HAL_SPI_Init+0xa0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002740:	d002      	beq.n	8002748 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278a:	ea42 0103 	orr.w	r1, r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	f003 0204 	and.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80027c4:	ea42 0103 	orr.w	r1, r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b088      	sub	sp, #32
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_SPI_Transmit+0x22>
 800281c:	2302      	movs	r3, #2
 800281e:	e158      	b.n	8002ad2 <HAL_SPI_Transmit+0x2d4>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002828:	f7fe fb00 	bl	8000e2c <HAL_GetTick>
 800282c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d002      	beq.n	8002844 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002842:	e13d      	b.n	8002ac0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_SPI_Transmit+0x52>
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002854:	e134      	b.n	8002ac0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	88fa      	ldrh	r2, [r7, #6]
 800286e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028a0:	d10f      	bne.n	80028c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028cc:	2b40      	cmp	r3, #64	@ 0x40
 80028ce:	d007      	beq.n	80028e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80028e8:	d94b      	bls.n	8002982 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_SPI_Transmit+0xfa>
 80028f2:	8afb      	ldrh	r3, [r7, #22]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d13e      	bne.n	8002976 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fc:	881a      	ldrh	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002908:	1c9a      	adds	r2, r3, #2
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800291c:	e02b      	b.n	8002976 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b02      	cmp	r3, #2
 800292a:	d112      	bne.n	8002952 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	1c9a      	adds	r2, r3, #2
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002950:	e011      	b.n	8002976 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002952:	f7fe fa6b 	bl	8000e2c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d803      	bhi.n	800296a <HAL_SPI_Transmit+0x16c>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d102      	bne.n	8002970 <HAL_SPI_Transmit+0x172>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002974:	e0a4      	b.n	8002ac0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ce      	bne.n	800291e <HAL_SPI_Transmit+0x120>
 8002980:	e07c      	b.n	8002a7c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_SPI_Transmit+0x192>
 800298a:	8afb      	ldrh	r3, [r7, #22]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d170      	bne.n	8002a72 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d912      	bls.n	80029c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299e:	881a      	ldrh	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029aa:	1c9a      	adds	r2, r3, #2
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b02      	subs	r3, #2
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029be:	e058      	b.n	8002a72 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80029e6:	e044      	b.n	8002a72 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d12b      	bne.n	8002a4e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d912      	bls.n	8002a26 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a10:	1c9a      	adds	r2, r3, #2
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b02      	subs	r3, #2
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a24:	e025      	b.n	8002a72 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	7812      	ldrb	r2, [r2, #0]
 8002a32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a4c:	e011      	b.n	8002a72 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a4e:	f7fe f9ed 	bl	8000e2c <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d803      	bhi.n	8002a66 <HAL_SPI_Transmit+0x268>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d102      	bne.n	8002a6c <HAL_SPI_Transmit+0x26e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a70:	e026      	b.n	8002ac0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1b5      	bne.n	80029e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	6839      	ldr	r1, [r7, #0]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 fa5d 	bl	8002f40 <SPI_EndRxTxTransaction>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77fb      	strb	r3, [r7, #31]
 8002abc:	e000      	b.n	8002ac0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002ad0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10e      	bne.n	8002b1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
    return;
 8002b1a:	e0ce      	b.n	8002cba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_SPI_IRQHandler+0x5e>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
    return;
 8002b38:	e0bf      	b.n	8002cba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <HAL_SPI_IRQHandler+0x7e>
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80b0 	beq.w	8002cba <HAL_SPI_IRQHandler+0x1de>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80aa 	beq.w	8002cba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d023      	beq.n	8002bb8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d011      	beq.n	8002ba0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b80:	f043 0204 	orr.w	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	e00b      	b.n	8002bb8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
        return;
 8002bb6:	e080      	b.n	8002cba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d014      	beq.n	8002bec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfa:	f043 0208 	orr.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d04f      	beq.n	8002cb8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c26:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d104      	bne.n	8002c44 <HAL_SPI_IRQHandler+0x168>
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d034      	beq.n	8002cae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0203 	bic.w	r2, r2, #3
 8002c52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d011      	beq.n	8002c80 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	4a17      	ldr	r2, [pc, #92]	@ (8002cc0 <HAL_SPI_IRQHandler+0x1e4>)
 8002c62:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fa20 	bl	80010ae <HAL_DMA_Abort_IT>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <HAL_SPI_IRQHandler+0x1e4>)
 8002c8e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe fa0a 	bl	80010ae <HAL_DMA_Abort_IT>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002cac:	e003      	b.n	8002cb6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f808 	bl	8002cc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cb4:	e000      	b.n	8002cb8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002cb6:	bf00      	nop
    return;
 8002cb8:	bf00      	nop
  }
}
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	08002cd9 	.word	0x08002cd9

08002cc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff ffe5 	bl	8002cc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d14:	f7fe f88a 	bl	8000e2c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	4413      	add	r3, r2
 8002d22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d24:	f7fe f882 	bl	8000e2c <HAL_GetTick>
 8002d28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d2a:	4b39      	ldr	r3, [pc, #228]	@ (8002e10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	015b      	lsls	r3, r3, #5
 8002d30:	0d1b      	lsrs	r3, r3, #20
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d3a:	e054      	b.n	8002de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d42:	d050      	beq.n	8002de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d44:	f7fe f872 	bl	8000e2c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d902      	bls.n	8002d5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d13d      	bne.n	8002dd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d72:	d111      	bne.n	8002d98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d7c:	d004      	beq.n	8002d88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d86:	d107      	bne.n	8002d98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da0:	d10f      	bne.n	8002dc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e017      	b.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d19b      	bne.n	8002d3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000000 	.word	0x20000000

08002e14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	@ 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e26:	f7fe f801 	bl	8000e2c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002e36:	f7fd fff9 	bl	8000e2c <HAL_GetTick>
 8002e3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e44:	4b3d      	ldr	r3, [pc, #244]	@ (8002f3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00da      	lsls	r2, r3, #3
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	0d1b      	lsrs	r3, r3, #20
 8002e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002e5c:	e060      	b.n	8002f20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002e64:	d107      	bne.n	8002e76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d050      	beq.n	8002f20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e7e:	f7fd ffd5 	bl	8000e2c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d902      	bls.n	8002e94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d13d      	bne.n	8002f10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ea2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eac:	d111      	bne.n	8002ed2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb6:	d004      	beq.n	8002ec2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec0:	d107      	bne.n	8002ed2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ed0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eda:	d10f      	bne.n	8002efc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002efa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e010      	b.n	8002f32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d196      	bne.n	8002e5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3728      	adds	r7, #40	@ 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000

08002f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff ff5b 	bl	8002e14 <SPI_WaitFifoStateUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e046      	b.n	8003002 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <SPI_EndRxTxTransaction+0xcc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a25      	ldr	r2, [pc, #148]	@ (8003010 <SPI_EndRxTxTransaction+0xd0>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0d5b      	lsrs	r3, r3, #21
 8002f80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f84:	fb02 f303 	mul.w	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f92:	d112      	bne.n	8002fba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2180      	movs	r1, #128	@ 0x80
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff feb0 	bl	8002d04 <SPI_WaitFlagStateUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fae:	f043 0220 	orr.w	r2, r3, #32
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e023      	b.n	8003002 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd0:	2b80      	cmp	r3, #128	@ 0x80
 8002fd2:	d0f2      	beq.n	8002fba <SPI_EndRxTxTransaction+0x7a>
 8002fd4:	e000      	b.n	8002fd8 <SPI_EndRxTxTransaction+0x98>
        break;
 8002fd6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff ff15 	bl	8002e14 <SPI_WaitFifoStateUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e000      	b.n	8003002 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000
 8003010:	165e9f81 	.word	0x165e9f81

08003014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e040      	b.n	80030a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fda6 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	@ 0x24
 8003040:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8b0 	bl	80031b8 <UART_SetConfig>
 8003058:	4603      	mov	r3, r0
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e022      	b.n	80030a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fb08 	bl	8003680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800307e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800308e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fb8f 	bl	80037c4 <UART_CheckIdleState>
 80030a6:	4603      	mov	r3, r0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d171      	bne.n	80031ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Transmit+0x24>
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e06a      	b.n	80031ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2221      	movs	r2, #33	@ 0x21
 80030e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fd fea1 	bl	8000e2c <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003104:	d108      	bne.n	8003118 <HAL_UART_Transmit+0x68>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	e003      	b.n	8003120 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003120:	e02c      	b.n	800317c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fb96 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e038      	b.n	80031ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3302      	adds	r3, #2
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e007      	b.n	800316a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3301      	adds	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1cc      	bne.n	8003122 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2200      	movs	r2, #0
 8003190:	2140      	movs	r1, #64	@ 0x40
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fb63 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e005      	b.n	80031ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4ba6      	ldr	r3, [pc, #664]	@ (800347c <UART_SetConfig+0x2c4>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a94      	ldr	r2, [pc, #592]	@ (8003480 <UART_SetConfig+0x2c8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d120      	bne.n	8003276 <UART_SetConfig+0xbe>
 8003234:	4b93      	ldr	r3, [pc, #588]	@ (8003484 <UART_SetConfig+0x2cc>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b03      	cmp	r3, #3
 8003240:	d816      	bhi.n	8003270 <UART_SetConfig+0xb8>
 8003242:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <UART_SetConfig+0x90>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	08003259 	.word	0x08003259
 800324c:	08003265 	.word	0x08003265
 8003250:	0800325f 	.word	0x0800325f
 8003254:	0800326b 	.word	0x0800326b
 8003258:	2301      	movs	r3, #1
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e150      	b.n	8003500 <UART_SetConfig+0x348>
 800325e:	2302      	movs	r3, #2
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e14d      	b.n	8003500 <UART_SetConfig+0x348>
 8003264:	2304      	movs	r3, #4
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e14a      	b.n	8003500 <UART_SetConfig+0x348>
 800326a:	2308      	movs	r3, #8
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e147      	b.n	8003500 <UART_SetConfig+0x348>
 8003270:	2310      	movs	r3, #16
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e144      	b.n	8003500 <UART_SetConfig+0x348>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a83      	ldr	r2, [pc, #524]	@ (8003488 <UART_SetConfig+0x2d0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d132      	bne.n	80032e6 <UART_SetConfig+0x12e>
 8003280:	4b80      	ldr	r3, [pc, #512]	@ (8003484 <UART_SetConfig+0x2cc>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d828      	bhi.n	80032e0 <UART_SetConfig+0x128>
 800328e:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <UART_SetConfig+0xdc>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032c9 	.word	0x080032c9
 8003298:	080032e1 	.word	0x080032e1
 800329c:	080032e1 	.word	0x080032e1
 80032a0:	080032e1 	.word	0x080032e1
 80032a4:	080032d5 	.word	0x080032d5
 80032a8:	080032e1 	.word	0x080032e1
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	080032e1 	.word	0x080032e1
 80032b4:	080032cf 	.word	0x080032cf
 80032b8:	080032e1 	.word	0x080032e1
 80032bc:	080032e1 	.word	0x080032e1
 80032c0:	080032e1 	.word	0x080032e1
 80032c4:	080032db 	.word	0x080032db
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e118      	b.n	8003500 <UART_SetConfig+0x348>
 80032ce:	2302      	movs	r3, #2
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e115      	b.n	8003500 <UART_SetConfig+0x348>
 80032d4:	2304      	movs	r3, #4
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e112      	b.n	8003500 <UART_SetConfig+0x348>
 80032da:	2308      	movs	r3, #8
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e10f      	b.n	8003500 <UART_SetConfig+0x348>
 80032e0:	2310      	movs	r3, #16
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e10c      	b.n	8003500 <UART_SetConfig+0x348>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a68      	ldr	r2, [pc, #416]	@ (800348c <UART_SetConfig+0x2d4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d120      	bne.n	8003332 <UART_SetConfig+0x17a>
 80032f0:	4b64      	ldr	r3, [pc, #400]	@ (8003484 <UART_SetConfig+0x2cc>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032fa:	2b30      	cmp	r3, #48	@ 0x30
 80032fc:	d013      	beq.n	8003326 <UART_SetConfig+0x16e>
 80032fe:	2b30      	cmp	r3, #48	@ 0x30
 8003300:	d814      	bhi.n	800332c <UART_SetConfig+0x174>
 8003302:	2b20      	cmp	r3, #32
 8003304:	d009      	beq.n	800331a <UART_SetConfig+0x162>
 8003306:	2b20      	cmp	r3, #32
 8003308:	d810      	bhi.n	800332c <UART_SetConfig+0x174>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <UART_SetConfig+0x15c>
 800330e:	2b10      	cmp	r3, #16
 8003310:	d006      	beq.n	8003320 <UART_SetConfig+0x168>
 8003312:	e00b      	b.n	800332c <UART_SetConfig+0x174>
 8003314:	2300      	movs	r3, #0
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e0f2      	b.n	8003500 <UART_SetConfig+0x348>
 800331a:	2302      	movs	r3, #2
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e0ef      	b.n	8003500 <UART_SetConfig+0x348>
 8003320:	2304      	movs	r3, #4
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e0ec      	b.n	8003500 <UART_SetConfig+0x348>
 8003326:	2308      	movs	r3, #8
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e0e9      	b.n	8003500 <UART_SetConfig+0x348>
 800332c:	2310      	movs	r3, #16
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e0e6      	b.n	8003500 <UART_SetConfig+0x348>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a56      	ldr	r2, [pc, #344]	@ (8003490 <UART_SetConfig+0x2d8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d120      	bne.n	800337e <UART_SetConfig+0x1c6>
 800333c:	4b51      	ldr	r3, [pc, #324]	@ (8003484 <UART_SetConfig+0x2cc>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003342:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003346:	2bc0      	cmp	r3, #192	@ 0xc0
 8003348:	d013      	beq.n	8003372 <UART_SetConfig+0x1ba>
 800334a:	2bc0      	cmp	r3, #192	@ 0xc0
 800334c:	d814      	bhi.n	8003378 <UART_SetConfig+0x1c0>
 800334e:	2b80      	cmp	r3, #128	@ 0x80
 8003350:	d009      	beq.n	8003366 <UART_SetConfig+0x1ae>
 8003352:	2b80      	cmp	r3, #128	@ 0x80
 8003354:	d810      	bhi.n	8003378 <UART_SetConfig+0x1c0>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <UART_SetConfig+0x1a8>
 800335a:	2b40      	cmp	r3, #64	@ 0x40
 800335c:	d006      	beq.n	800336c <UART_SetConfig+0x1b4>
 800335e:	e00b      	b.n	8003378 <UART_SetConfig+0x1c0>
 8003360:	2300      	movs	r3, #0
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e0cc      	b.n	8003500 <UART_SetConfig+0x348>
 8003366:	2302      	movs	r3, #2
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e0c9      	b.n	8003500 <UART_SetConfig+0x348>
 800336c:	2304      	movs	r3, #4
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e0c6      	b.n	8003500 <UART_SetConfig+0x348>
 8003372:	2308      	movs	r3, #8
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e0c3      	b.n	8003500 <UART_SetConfig+0x348>
 8003378:	2310      	movs	r3, #16
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e0c0      	b.n	8003500 <UART_SetConfig+0x348>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a44      	ldr	r2, [pc, #272]	@ (8003494 <UART_SetConfig+0x2dc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d125      	bne.n	80033d4 <UART_SetConfig+0x21c>
 8003388:	4b3e      	ldr	r3, [pc, #248]	@ (8003484 <UART_SetConfig+0x2cc>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003396:	d017      	beq.n	80033c8 <UART_SetConfig+0x210>
 8003398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800339c:	d817      	bhi.n	80033ce <UART_SetConfig+0x216>
 800339e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a2:	d00b      	beq.n	80033bc <UART_SetConfig+0x204>
 80033a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a8:	d811      	bhi.n	80033ce <UART_SetConfig+0x216>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <UART_SetConfig+0x1fe>
 80033ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033b2:	d006      	beq.n	80033c2 <UART_SetConfig+0x20a>
 80033b4:	e00b      	b.n	80033ce <UART_SetConfig+0x216>
 80033b6:	2300      	movs	r3, #0
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e0a1      	b.n	8003500 <UART_SetConfig+0x348>
 80033bc:	2302      	movs	r3, #2
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e09e      	b.n	8003500 <UART_SetConfig+0x348>
 80033c2:	2304      	movs	r3, #4
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e09b      	b.n	8003500 <UART_SetConfig+0x348>
 80033c8:	2308      	movs	r3, #8
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e098      	b.n	8003500 <UART_SetConfig+0x348>
 80033ce:	2310      	movs	r3, #16
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e095      	b.n	8003500 <UART_SetConfig+0x348>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003498 <UART_SetConfig+0x2e0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d125      	bne.n	800342a <UART_SetConfig+0x272>
 80033de:	4b29      	ldr	r3, [pc, #164]	@ (8003484 <UART_SetConfig+0x2cc>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033ec:	d017      	beq.n	800341e <UART_SetConfig+0x266>
 80033ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033f2:	d817      	bhi.n	8003424 <UART_SetConfig+0x26c>
 80033f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033f8:	d00b      	beq.n	8003412 <UART_SetConfig+0x25a>
 80033fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033fe:	d811      	bhi.n	8003424 <UART_SetConfig+0x26c>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <UART_SetConfig+0x254>
 8003404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003408:	d006      	beq.n	8003418 <UART_SetConfig+0x260>
 800340a:	e00b      	b.n	8003424 <UART_SetConfig+0x26c>
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e076      	b.n	8003500 <UART_SetConfig+0x348>
 8003412:	2302      	movs	r3, #2
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e073      	b.n	8003500 <UART_SetConfig+0x348>
 8003418:	2304      	movs	r3, #4
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e070      	b.n	8003500 <UART_SetConfig+0x348>
 800341e:	2308      	movs	r3, #8
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e06d      	b.n	8003500 <UART_SetConfig+0x348>
 8003424:	2310      	movs	r3, #16
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e06a      	b.n	8003500 <UART_SetConfig+0x348>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1b      	ldr	r2, [pc, #108]	@ (800349c <UART_SetConfig+0x2e4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d138      	bne.n	80034a6 <UART_SetConfig+0x2ee>
 8003434:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <UART_SetConfig+0x2cc>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800343e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003442:	d017      	beq.n	8003474 <UART_SetConfig+0x2bc>
 8003444:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003448:	d82a      	bhi.n	80034a0 <UART_SetConfig+0x2e8>
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344e:	d00b      	beq.n	8003468 <UART_SetConfig+0x2b0>
 8003450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003454:	d824      	bhi.n	80034a0 <UART_SetConfig+0x2e8>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <UART_SetConfig+0x2aa>
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800345e:	d006      	beq.n	800346e <UART_SetConfig+0x2b6>
 8003460:	e01e      	b.n	80034a0 <UART_SetConfig+0x2e8>
 8003462:	2300      	movs	r3, #0
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e04b      	b.n	8003500 <UART_SetConfig+0x348>
 8003468:	2302      	movs	r3, #2
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e048      	b.n	8003500 <UART_SetConfig+0x348>
 800346e:	2304      	movs	r3, #4
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e045      	b.n	8003500 <UART_SetConfig+0x348>
 8003474:	2308      	movs	r3, #8
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e042      	b.n	8003500 <UART_SetConfig+0x348>
 800347a:	bf00      	nop
 800347c:	efff69f3 	.word	0xefff69f3
 8003480:	40011000 	.word	0x40011000
 8003484:	40023800 	.word	0x40023800
 8003488:	40004400 	.word	0x40004400
 800348c:	40004800 	.word	0x40004800
 8003490:	40004c00 	.word	0x40004c00
 8003494:	40005000 	.word	0x40005000
 8003498:	40011400 	.word	0x40011400
 800349c:	40007800 	.word	0x40007800
 80034a0:	2310      	movs	r3, #16
 80034a2:	77fb      	strb	r3, [r7, #31]
 80034a4:	e02c      	b.n	8003500 <UART_SetConfig+0x348>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a72      	ldr	r2, [pc, #456]	@ (8003674 <UART_SetConfig+0x4bc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d125      	bne.n	80034fc <UART_SetConfig+0x344>
 80034b0:	4b71      	ldr	r3, [pc, #452]	@ (8003678 <UART_SetConfig+0x4c0>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80034ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80034be:	d017      	beq.n	80034f0 <UART_SetConfig+0x338>
 80034c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80034c4:	d817      	bhi.n	80034f6 <UART_SetConfig+0x33e>
 80034c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ca:	d00b      	beq.n	80034e4 <UART_SetConfig+0x32c>
 80034cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d0:	d811      	bhi.n	80034f6 <UART_SetConfig+0x33e>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <UART_SetConfig+0x326>
 80034d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034da:	d006      	beq.n	80034ea <UART_SetConfig+0x332>
 80034dc:	e00b      	b.n	80034f6 <UART_SetConfig+0x33e>
 80034de:	2300      	movs	r3, #0
 80034e0:	77fb      	strb	r3, [r7, #31]
 80034e2:	e00d      	b.n	8003500 <UART_SetConfig+0x348>
 80034e4:	2302      	movs	r3, #2
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e00a      	b.n	8003500 <UART_SetConfig+0x348>
 80034ea:	2304      	movs	r3, #4
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e007      	b.n	8003500 <UART_SetConfig+0x348>
 80034f0:	2308      	movs	r3, #8
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e004      	b.n	8003500 <UART_SetConfig+0x348>
 80034f6:	2310      	movs	r3, #16
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e001      	b.n	8003500 <UART_SetConfig+0x348>
 80034fc:	2310      	movs	r3, #16
 80034fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003508:	d15b      	bne.n	80035c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800350a:	7ffb      	ldrb	r3, [r7, #31]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d828      	bhi.n	8003562 <UART_SetConfig+0x3aa>
 8003510:	a201      	add	r2, pc, #4	@ (adr r2, 8003518 <UART_SetConfig+0x360>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	0800353d 	.word	0x0800353d
 800351c:	08003545 	.word	0x08003545
 8003520:	0800354d 	.word	0x0800354d
 8003524:	08003563 	.word	0x08003563
 8003528:	08003553 	.word	0x08003553
 800352c:	08003563 	.word	0x08003563
 8003530:	08003563 	.word	0x08003563
 8003534:	08003563 	.word	0x08003563
 8003538:	0800355b 	.word	0x0800355b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800353c:	f7fe fc64 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 8003540:	61b8      	str	r0, [r7, #24]
        break;
 8003542:	e013      	b.n	800356c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003544:	f7fe fc74 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 8003548:	61b8      	str	r0, [r7, #24]
        break;
 800354a:	e00f      	b.n	800356c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800354c:	4b4b      	ldr	r3, [pc, #300]	@ (800367c <UART_SetConfig+0x4c4>)
 800354e:	61bb      	str	r3, [r7, #24]
        break;
 8003550:	e00c      	b.n	800356c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003552:	f7fe fb49 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8003556:	61b8      	str	r0, [r7, #24]
        break;
 8003558:	e008      	b.n	800356c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800355e:	61bb      	str	r3, [r7, #24]
        break;
 8003560:	e004      	b.n	800356c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	77bb      	strb	r3, [r7, #30]
        break;
 800356a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d074      	beq.n	800365c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	005a      	lsls	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	441a      	add	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	d916      	bls.n	80035bc <UART_SetConfig+0x404>
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003594:	d212      	bcs.n	80035bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	b29b      	uxth	r3, r3
 800359a:	f023 030f 	bic.w	r3, r3, #15
 800359e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	89fb      	ldrh	r3, [r7, #14]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	89fa      	ldrh	r2, [r7, #14]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	e04f      	b.n	800365c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	77bb      	strb	r3, [r7, #30]
 80035c0:	e04c      	b.n	800365c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d828      	bhi.n	800361a <UART_SetConfig+0x462>
 80035c8:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <UART_SetConfig+0x418>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	080035fd 	.word	0x080035fd
 80035d8:	08003605 	.word	0x08003605
 80035dc:	0800361b 	.word	0x0800361b
 80035e0:	0800360b 	.word	0x0800360b
 80035e4:	0800361b 	.word	0x0800361b
 80035e8:	0800361b 	.word	0x0800361b
 80035ec:	0800361b 	.word	0x0800361b
 80035f0:	08003613 	.word	0x08003613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7fe fc08 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 80035f8:	61b8      	str	r0, [r7, #24]
        break;
 80035fa:	e013      	b.n	8003624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035fc:	f7fe fc18 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 8003600:	61b8      	str	r0, [r7, #24]
        break;
 8003602:	e00f      	b.n	8003624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003604:	4b1d      	ldr	r3, [pc, #116]	@ (800367c <UART_SetConfig+0x4c4>)
 8003606:	61bb      	str	r3, [r7, #24]
        break;
 8003608:	e00c      	b.n	8003624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360a:	f7fe faed 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 800360e:	61b8      	str	r0, [r7, #24]
        break;
 8003610:	e008      	b.n	8003624 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003616:	61bb      	str	r3, [r7, #24]
        break;
 8003618:	e004      	b.n	8003624 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	77bb      	strb	r3, [r7, #30]
        break;
 8003622:	bf00      	nop
    }

    if (pclk != 0U)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d018      	beq.n	800365c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	085a      	lsrs	r2, r3, #1
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	441a      	add	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b0f      	cmp	r3, #15
 8003642:	d909      	bls.n	8003658 <UART_SetConfig+0x4a0>
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364a:	d205      	bcs.n	8003658 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	b29a      	uxth	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60da      	str	r2, [r3, #12]
 8003656:	e001      	b.n	800365c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003668:	7fbb      	ldrb	r3, [r7, #30]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40007c00 	.word	0x40007c00
 8003678:	40023800 	.word	0x40023800
 800367c:	00f42400 	.word	0x00f42400

08003680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01a      	beq.n	8003796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800377e:	d10a      	bne.n	8003796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037d4:	f7fd fb2a 	bl	8000e2c <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d10e      	bne.n	8003806 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f831 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e027      	b.n	8003856 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b04      	cmp	r3, #4
 8003812:	d10e      	bne.n	8003832 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f81b 	bl	800385e <UART_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e011      	b.n	8003856 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b09c      	sub	sp, #112	@ 0x70
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386e:	e0a7      	b.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	f000 80a3 	beq.w	80039c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fd fad7 	bl	8000e2c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <UART_WaitOnFlagUntilTimeout+0x32>
 800388a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800388c:	2b00      	cmp	r3, #0
 800388e:	d13f      	bne.n	8003910 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800389e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038a0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80038a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80038b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80038bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e6      	bne.n	8003890 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3308      	adds	r3, #8
 80038e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038e2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80038e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80038e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80038f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e5      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e068      	b.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d050      	beq.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800392c:	d148      	bne.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003936:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800394c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003956:	637b      	str	r3, [r7, #52]	@ 0x34
 8003958:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800395c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e6      	bne.n	8003938 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3308      	adds	r3, #8
 8003970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	613b      	str	r3, [r7, #16]
   return(result);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3308      	adds	r3, #8
 8003988:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800398a:	623a      	str	r2, [r7, #32]
 800398c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	69f9      	ldr	r1, [r7, #28]
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	61bb      	str	r3, [r7, #24]
   return(result);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e5      	bne.n	800396a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e010      	b.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4013      	ands	r3, r2
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	429a      	cmp	r2, r3
 80039dc:	f43f af48 	beq.w	8003870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3770      	adds	r7, #112	@ 0x70
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <memset>:
 80039ea:	4402      	add	r2, r0
 80039ec:	4603      	mov	r3, r0
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d100      	bne.n	80039f4 <memset+0xa>
 80039f2:	4770      	bx	lr
 80039f4:	f803 1b01 	strb.w	r1, [r3], #1
 80039f8:	e7f9      	b.n	80039ee <memset+0x4>
	...

080039fc <__libc_init_array>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003a34 <__libc_init_array+0x38>)
 8003a00:	4c0d      	ldr	r4, [pc, #52]	@ (8003a38 <__libc_init_array+0x3c>)
 8003a02:	1b64      	subs	r4, r4, r5
 8003a04:	10a4      	asrs	r4, r4, #2
 8003a06:	2600      	movs	r6, #0
 8003a08:	42a6      	cmp	r6, r4
 8003a0a:	d109      	bne.n	8003a20 <__libc_init_array+0x24>
 8003a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a3c <__libc_init_array+0x40>)
 8003a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a40 <__libc_init_array+0x44>)
 8003a10:	f000 f818 	bl	8003a44 <_init>
 8003a14:	1b64      	subs	r4, r4, r5
 8003a16:	10a4      	asrs	r4, r4, #2
 8003a18:	2600      	movs	r6, #0
 8003a1a:	42a6      	cmp	r6, r4
 8003a1c:	d105      	bne.n	8003a2a <__libc_init_array+0x2e>
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a24:	4798      	blx	r3
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7ee      	b.n	8003a08 <__libc_init_array+0xc>
 8003a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2e:	4798      	blx	r3
 8003a30:	3601      	adds	r6, #1
 8003a32:	e7f2      	b.n	8003a1a <__libc_init_array+0x1e>
 8003a34:	08003a80 	.word	0x08003a80
 8003a38:	08003a80 	.word	0x08003a80
 8003a3c:	08003a80 	.word	0x08003a80
 8003a40:	08003a84 	.word	0x08003a84

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr
