
spi_f767_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f74  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800516c  0800516c  0000616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005190  08005190  0000702c  2**0
                  CONTENTS
  4 .ARM          00000008  08005190  08005190  00006190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005198  08005198  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00006198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800519c  0800519c  0000619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080051a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000002c  080051cc  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080051cc  000072d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c209  00000000  00000000  0000705a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6c  00000000  00000000  00013263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00014dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000746  00000000  00000000  00015738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002655a  00000000  00000000  00015e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c72c  00000000  00000000  0003c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efbf7  00000000  00000000  00048b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001386fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000264c  00000000  00000000  00138740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0013ad8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000002c 	.word	0x2000002c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005154 	.word	0x08005154

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000030 	.word	0x20000030
 8000234:	08005154 	.word	0x08005154

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96a 	b.w	8000534 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f f68c 	uxth.w	r6, ip
 80002ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb07 1114 	mls	r1, r7, r4, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8112 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810f 	bls.w	80004f6 <__udivmoddi4+0x27e>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fa1f f38e 	uxth.w	r3, lr
 80002e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ee:	fb00 f606 	mul.w	r6, r0, r6
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fc 	bcs.w	80004fa <__udivmoddi4+0x282>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f9 	bls.w	80004fa <__udivmoddi4+0x282>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	1b9b      	subs	r3, r3, r6
 800030e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000312:	2100      	movs	r1, #0
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80f0 	bcc.w	8000524 <__udivmoddi4+0x2ac>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x204>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000364:	fa1f f78c 	uxth.w	r7, ip
 8000368:	2101      	movs	r1, #1
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000372:	fb08 4416 	mls	r4, r8, r6, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb07 f006 	mul.w	r0, r7, r6
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2b4>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fa1f f38e 	uxth.w	r3, lr
 800039a:	fbb4 f0f8 	udiv	r0, r4, r8
 800039e:	fb08 4410 	mls	r4, r8, r0, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80b0 	bhi.w	800051e <__udivmoddi4+0x2a6>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	431f      	orrs	r7, r3
 80003d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d8:	fa04 f301 	lsl.w	r3, r4, r1
 80003dc:	ea43 030c 	orr.w	r3, r3, ip
 80003e0:	40f4      	lsrs	r4, r6
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	0c38      	lsrs	r0, r7, #16
 80003e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ec:	fbb4 fef0 	udiv	lr, r4, r0
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fb00 441e 	mls	r4, r0, lr, r4
 80003f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000400:	45a1      	cmp	r9, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800040e:	f080 8084 	bcs.w	800051a <__udivmoddi4+0x2a2>
 8000412:	45a1      	cmp	r9, r4
 8000414:	f240 8081 	bls.w	800051a <__udivmoddi4+0x2a2>
 8000418:	f1ae 0e02 	sub.w	lr, lr, #2
 800041c:	443c      	add	r4, r7
 800041e:	eba4 0409 	sub.w	r4, r4, r9
 8000422:	fa1f f983 	uxth.w	r9, r3
 8000426:	fbb4 f3f0 	udiv	r3, r4, r0
 800042a:	fb00 4413 	mls	r4, r0, r3, r4
 800042e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000432:	fb03 fc0c 	mul.w	ip, r3, ip
 8000436:	45a4      	cmp	ip, r4
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x1d2>
 800043a:	193c      	adds	r4, r7, r4
 800043c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000440:	d267      	bcs.n	8000512 <__udivmoddi4+0x29a>
 8000442:	45a4      	cmp	ip, r4
 8000444:	d965      	bls.n	8000512 <__udivmoddi4+0x29a>
 8000446:	3b02      	subs	r3, #2
 8000448:	443c      	add	r4, r7
 800044a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800044e:	fba0 9302 	umull	r9, r3, r0, r2
 8000452:	eba4 040c 	sub.w	r4, r4, ip
 8000456:	429c      	cmp	r4, r3
 8000458:	46ce      	mov	lr, r9
 800045a:	469c      	mov	ip, r3
 800045c:	d351      	bcc.n	8000502 <__udivmoddi4+0x28a>
 800045e:	d04e      	beq.n	80004fe <__udivmoddi4+0x286>
 8000460:	b155      	cbz	r5, 8000478 <__udivmoddi4+0x200>
 8000462:	ebb8 030e 	subs.w	r3, r8, lr
 8000466:	eb64 040c 	sbc.w	r4, r4, ip
 800046a:	fa04 f606 	lsl.w	r6, r4, r6
 800046e:	40cb      	lsrs	r3, r1
 8000470:	431e      	orrs	r6, r3
 8000472:	40cc      	lsrs	r4, r1
 8000474:	e9c5 6400 	strd	r6, r4, [r5]
 8000478:	2100      	movs	r1, #0
 800047a:	e750      	b.n	800031e <__udivmoddi4+0xa6>
 800047c:	f1c2 0320 	rsb	r3, r2, #32
 8000480:	fa20 f103 	lsr.w	r1, r0, r3
 8000484:	fa0c fc02 	lsl.w	ip, ip, r2
 8000488:	fa24 f303 	lsr.w	r3, r4, r3
 800048c:	4094      	lsls	r4, r2
 800048e:	430c      	orrs	r4, r1
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa00 fe02 	lsl.w	lr, r0, r2
 8000498:	fa1f f78c 	uxth.w	r7, ip
 800049c:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a0:	fb08 3110 	mls	r1, r8, r0, r3
 80004a4:	0c23      	lsrs	r3, r4, #16
 80004a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004aa:	fb00 f107 	mul.w	r1, r0, r7
 80004ae:	4299      	cmp	r1, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x24c>
 80004b2:	eb1c 0303 	adds.w	r3, ip, r3
 80004b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ba:	d22c      	bcs.n	8000516 <__udivmoddi4+0x29e>
 80004bc:	4299      	cmp	r1, r3
 80004be:	d92a      	bls.n	8000516 <__udivmoddi4+0x29e>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004cc:	fb08 3311 	mls	r3, r8, r1, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb01 f307 	mul.w	r3, r1, r7
 80004d8:	42a3      	cmp	r3, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x276>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e4:	d213      	bcs.n	800050e <__udivmoddi4+0x296>
 80004e6:	42a3      	cmp	r3, r4
 80004e8:	d911      	bls.n	800050e <__udivmoddi4+0x296>
 80004ea:	3902      	subs	r1, #2
 80004ec:	4464      	add	r4, ip
 80004ee:	1ae4      	subs	r4, r4, r3
 80004f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f4:	e739      	b.n	800036a <__udivmoddi4+0xf2>
 80004f6:	4604      	mov	r4, r0
 80004f8:	e6f0      	b.n	80002dc <__udivmoddi4+0x64>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e706      	b.n	800030c <__udivmoddi4+0x94>
 80004fe:	45c8      	cmp	r8, r9
 8000500:	d2ae      	bcs.n	8000460 <__udivmoddi4+0x1e8>
 8000502:	ebb9 0e02 	subs.w	lr, r9, r2
 8000506:	eb63 0c07 	sbc.w	ip, r3, r7
 800050a:	3801      	subs	r0, #1
 800050c:	e7a8      	b.n	8000460 <__udivmoddi4+0x1e8>
 800050e:	4631      	mov	r1, r6
 8000510:	e7ed      	b.n	80004ee <__udivmoddi4+0x276>
 8000512:	4603      	mov	r3, r0
 8000514:	e799      	b.n	800044a <__udivmoddi4+0x1d2>
 8000516:	4630      	mov	r0, r6
 8000518:	e7d4      	b.n	80004c4 <__udivmoddi4+0x24c>
 800051a:	46d6      	mov	lr, sl
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1a6>
 800051e:	4463      	add	r3, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e74d      	b.n	80003c0 <__udivmoddi4+0x148>
 8000524:	4606      	mov	r6, r0
 8000526:	4623      	mov	r3, r4
 8000528:	4608      	mov	r0, r1
 800052a:	e70f      	b.n	800034c <__udivmoddi4+0xd4>
 800052c:	3e02      	subs	r6, #2
 800052e:	4463      	add	r3, ip
 8000530:	e730      	b.n	8000394 <__udivmoddi4+0x11c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <print_to_uart>:
#define TRANSFER_SIZE 64

uint8_t transfer_bytes[TRANSFER_SIZE];
uint8_t receive_bytes[TRANSFER_SIZE] = {0};

void print_to_uart(uint8_t* str){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, str, strlen(str), 500);
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff fe79 	bl	8000238 <strlen>
 8000546:	4603      	mov	r3, r0
 8000548:	b29a      	uxth	r2, r3
 800054a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4806      	ldr	r0, [pc, #24]	@ (800056c <print_to_uart+0x34>)
 8000552:	f003 fd7f 	bl	8004054 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, "\r\n", 2, 500);
 8000556:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800055a:	2202      	movs	r2, #2
 800055c:	4904      	ldr	r1, [pc, #16]	@ (8000570 <print_to_uart+0x38>)
 800055e:	4803      	ldr	r0, [pc, #12]	@ (800056c <print_to_uart+0x34>)
 8000560:	f003 fd78 	bl	8004054 <HAL_UART_Transmit>
	//HAL_UART_Transmit_DMA(&huart4, str, strlen(str));
	//HAL_UART_Transmit_DMA(&huart4, "\r\n", 2);



}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000016c 	.word	0x2000016c
 8000570:	0800516c 	.word	0x0800516c

08000574 <HAL_SPI_TxCpltCallback>:

uint8_t test_str[30] = "my test str";
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000590:	2101      	movs	r1, #1
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <HAL_SPI_RxCpltCallback+0x18>)
 8000594:	f001 fc39 	bl	8001e0a <HAL_GPIO_TogglePin>
	//HAL_SPI_Receive_DMA(&hspi2, receive_bytes, TRANSFER_SIZE);

}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40020400 	.word	0x40020400

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fcc3 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f859 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f94f 	bl	8000854 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b6:	f000 f91f 	bl	80007f8 <MX_DMA_Init>
  MX_UART4_Init();
 80005ba:	f000 f8ed 	bl	8000798 <MX_UART4_Init>
  MX_SPI2_Init();
 80005be:	f000 f8ad 	bl	800071c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  for (int8_t i = 0; i < TRANSFER_SIZE; i++){
 80005c2:	2300      	movs	r3, #0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e00a      	b.n	80005de <main+0x3a>
	  transfer_bytes[i] = i;
 80005c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005cc:	79f9      	ldrb	r1, [r7, #7]
 80005ce:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <main+0xa8>)
 80005d0:	54d1      	strb	r1, [r2, r3]
  for (int8_t i = 0; i < TRANSFER_SIZE; i++){
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	3301      	adds	r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80005e4:	ddf0      	ble.n	80005c8 <main+0x24>
  }

  //HAL_StatusTypeDef here = HAL_SPI_Transmit_DMA(&hspi1, transfer_bytes, TRANSFER_SIZE);
  HAL_SPI_Receive_DMA(&hspi2, receive_bytes, TRANSFER_SIZE);
 80005e6:	2240      	movs	r2, #64	@ 0x40
 80005e8:	4919      	ldr	r1, [pc, #100]	@ (8000650 <main+0xac>)
 80005ea:	481a      	ldr	r0, [pc, #104]	@ (8000654 <main+0xb0>)
 80005ec:	f002 fec2 	bl	8003374 <HAL_SPI_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005f0:	2180      	movs	r1, #128	@ 0x80
 80005f2:	4819      	ldr	r0, [pc, #100]	@ (8000658 <main+0xb4>)
 80005f4:	f001 fc09 	bl	8001e0a <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fc:	f000 fd00 	bl	8001000 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	4815      	ldr	r0, [pc, #84]	@ (800065c <main+0xb8>)
 8000606:	f001 fbe7 	bl	8001dd8 <HAL_GPIO_WritePin>
	//HAL_StatusTypeDef here = HAL_SPI_Transmit(&hspi1, transfer_bytes, TRANSFER_SIZE, 500);
	//HAL_StatusTypeDef here =  HAL_SPI_Transmit_IT(&hspi1, transfer_bytes, TRANSFER_SIZE);
	//HAL_StatusTypeDef here = HAL_SPI_Transmit_DMA(&hspi1, transfer_bytes, TRANSFER_SIZE);
	HAL_StatusTypeDef here = HAL_SPI_Transmit_DMA(&hspi2, transfer_bytes, TRANSFER_SIZE);
 800060a:	2240      	movs	r2, #64	@ 0x40
 800060c:	490f      	ldr	r1, [pc, #60]	@ (800064c <main+0xa8>)
 800060e:	4811      	ldr	r0, [pc, #68]	@ (8000654 <main+0xb0>)
 8000610:	f002 fdbc 	bl	800318c <HAL_SPI_Transmit_DMA>
 8000614:	4603      	mov	r3, r0
 8000616:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(10);
 8000618:	200a      	movs	r0, #10
 800061a:	f000 fcf1 	bl	8001000 <HAL_Delay>
	//HAL_SPI_Receive(&hspi2, receive_bytes, TRANSFER_SIZE, 100);
	here = HAL_SPI_Receive_DMA(&hspi2, receive_bytes, TRANSFER_SIZE);
 800061e:	2240      	movs	r2, #64	@ 0x40
 8000620:	490b      	ldr	r1, [pc, #44]	@ (8000650 <main+0xac>)
 8000622:	480c      	ldr	r0, [pc, #48]	@ (8000654 <main+0xb0>)
 8000624:	f002 fea6 	bl	8003374 <HAL_SPI_Receive_DMA>
 8000628:	4603      	mov	r3, r0
 800062a:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(10);
 800062c:	200a      	movs	r0, #10
 800062e:	f000 fce7 	bl	8001000 <HAL_Delay>
	if (here == HAL_ERROR) {
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d104      	bne.n	8000642 <main+0x9e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000638:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063c:	4806      	ldr	r0, [pc, #24]	@ (8000658 <main+0xb4>)
 800063e:	f001 fbe4 	bl	8001e0a <HAL_GPIO_TogglePin>
	}

	print_to_uart(test_str);
 8000642:	4807      	ldr	r0, [pc, #28]	@ (8000660 <main+0xbc>)
 8000644:	f7ff ff78 	bl	8000538 <print_to_uart>
  {
 8000648:	e7d2      	b.n	80005f0 <main+0x4c>
 800064a:	bf00      	nop
 800064c:	20000254 	.word	0x20000254
 8000650:	20000294 	.word	0x20000294
 8000654:	20000048 	.word	0x20000048
 8000658:	40020400 	.word	0x40020400
 800065c:	40020000 	.word	0x40020000
 8000660:	20000000 	.word	0x20000000

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2234      	movs	r2, #52	@ 0x34
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fd41 	bl	80050fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <SystemClock_Config+0xb0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <SystemClock_Config+0xb0>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	@ 0x40
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <SystemClock_Config+0xb0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <SystemClock_Config+0xb4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <SystemClock_Config+0xb4>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <SystemClock_Config+0xb4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fbb5 	bl	8001e40 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006dc:	f000 f9e6 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fe4d 	bl	800239c <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000708:	f000 f9d0 	bl	8000aac <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	@ 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <MX_SPI2_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000728:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000736:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800073a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_SPI2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_SPI2_Init+0x74>)
 800074a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000752:	2220      	movs	r2, #32
 8000754:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_SPI2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_SPI2_Init+0x74>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_SPI2_Init+0x74>)
 8000776:	2208      	movs	r2, #8
 8000778:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_SPI2_Init+0x74>)
 800077c:	f002 fc5a 	bl	8003034 <HAL_SPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f991 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000048 	.word	0x20000048
 8000794:	40003800 	.word	0x40003800

08000798 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_UART4_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <MX_UART4_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007a2:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_UART4_Init+0x58>)
 80007dc:	f003 fbec 	bl	8003fb8 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f961 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000016c 	.word	0x2000016c
 80007f4:	40004c00 	.word	0x40004c00

080007f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <MX_DMA_Init+0x58>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a13      	ldr	r2, [pc, #76]	@ (8000850 <MX_DMA_Init+0x58>)
 8000804:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <MX_DMA_Init+0x58>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	200c      	movs	r0, #12
 800081c:	f000 fcef 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000820:	200c      	movs	r0, #12
 8000822:	f000 fd08 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	200f      	movs	r0, #15
 800082c:	f000 fce7 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000830:	200f      	movs	r0, #15
 8000832:	f000 fd00 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2011      	movs	r0, #17
 800083c:	f000 fcdf 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000840:	2011      	movs	r0, #17
 8000842:	f000 fcf8 	bl	8001236 <HAL_NVIC_EnableIRQ>

}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	@ 0x30
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b8a      	ldr	r3, [pc, #552]	@ (8000a94 <MX_GPIO_Init+0x240>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a89      	ldr	r2, [pc, #548]	@ (8000a94 <MX_GPIO_Init+0x240>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b87      	ldr	r3, [pc, #540]	@ (8000a94 <MX_GPIO_Init+0x240>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b84      	ldr	r3, [pc, #528]	@ (8000a94 <MX_GPIO_Init+0x240>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a83      	ldr	r2, [pc, #524]	@ (8000a94 <MX_GPIO_Init+0x240>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b81      	ldr	r3, [pc, #516]	@ (8000a94 <MX_GPIO_Init+0x240>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a94 <MX_GPIO_Init+0x240>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b7b      	ldr	r3, [pc, #492]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b78      	ldr	r3, [pc, #480]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a77      	ldr	r2, [pc, #476]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b75      	ldr	r3, [pc, #468]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	4b72      	ldr	r3, [pc, #456]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a71      	ldr	r2, [pc, #452]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	4b6c      	ldr	r3, [pc, #432]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a6b      	ldr	r2, [pc, #428]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b69      	ldr	r3, [pc, #420]	@ (8000a94 <MX_GPIO_Init+0x240>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f248 0110 	movw	r1, #32784	@ 0x8010
 8000900:	4865      	ldr	r0, [pc, #404]	@ (8000a98 <MX_GPIO_Init+0x244>)
 8000902:	f001 fa69 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f244 0191 	movw	r1, #16529	@ 0x4091
 800090c:	4863      	ldr	r0, [pc, #396]	@ (8000a9c <MX_GPIO_Init+0x248>)
 800090e:	f001 fa63 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2140      	movs	r1, #64	@ 0x40
 8000916:	4862      	ldr	r0, [pc, #392]	@ (8000aa0 <MX_GPIO_Init+0x24c>)
 8000918:	f001 fa5e 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	485c      	ldr	r0, [pc, #368]	@ (8000aa4 <MX_GPIO_Init+0x250>)
 8000934:	f001 f8a4 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000938:	2332      	movs	r3, #50	@ 0x32
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000948:	230b      	movs	r3, #11
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4854      	ldr	r0, [pc, #336]	@ (8000aa4 <MX_GPIO_Init+0x250>)
 8000954:	f001 f894 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000958:	2386      	movs	r3, #134	@ 0x86
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000968:	230b      	movs	r3, #11
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4849      	ldr	r0, [pc, #292]	@ (8000a98 <MX_GPIO_Init+0x244>)
 8000974:	f001 f884 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8000978:	f248 0310 	movw	r3, #32784	@ 0x8010
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4841      	ldr	r0, [pc, #260]	@ (8000a98 <MX_GPIO_Init+0x244>)
 8000992:	f001 f875 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4|LD2_Pin;
 8000996:	f244 0391 	movw	r3, #16529	@ 0x4091
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	483b      	ldr	r0, [pc, #236]	@ (8000a9c <MX_GPIO_Init+0x248>)
 80009b0:	f001 f866 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c6:	230b      	movs	r3, #11
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4832      	ldr	r0, [pc, #200]	@ (8000a9c <MX_GPIO_Init+0x248>)
 80009d2:	f001 f855 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e8:	2307      	movs	r3, #7
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	482d      	ldr	r0, [pc, #180]	@ (8000aa8 <MX_GPIO_Init+0x254>)
 80009f4:	f001 f844 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009f8:	2340      	movs	r3, #64	@ 0x40
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4824      	ldr	r0, [pc, #144]	@ (8000aa0 <MX_GPIO_Init+0x24c>)
 8000a10:	f001 f836 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481e      	ldr	r0, [pc, #120]	@ (8000aa0 <MX_GPIO_Init+0x24c>)
 8000a28:	f001 f82a 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a2c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a3e:	230a      	movs	r3, #10
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4813      	ldr	r0, [pc, #76]	@ (8000a98 <MX_GPIO_Init+0x244>)
 8000a4a:	f001 f819 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_GPIO_Init+0x244>)
 8000a64:	f001 f80c 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a68:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <MX_GPIO_Init+0x24c>)
 8000a86:	f000 fffb 	bl	8001a80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	@ 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x44>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x44>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x44>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x44>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a54      	ldr	r2, [pc, #336]	@ (8000c70 <HAL_SPI_MspInit+0x170>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	f040 80a1 	bne.w	8000c66 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b24:	4b53      	ldr	r3, [pc, #332]	@ (8000c74 <HAL_SPI_MspInit+0x174>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	4a52      	ldr	r2, [pc, #328]	@ (8000c74 <HAL_SPI_MspInit+0x174>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b30:	4b50      	ldr	r3, [pc, #320]	@ (8000c74 <HAL_SPI_MspInit+0x174>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c74 <HAL_SPI_MspInit+0x174>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b40:	4a4c      	ldr	r2, [pc, #304]	@ (8000c74 <HAL_SPI_MspInit+0x174>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b48:	4b4a      	ldr	r3, [pc, #296]	@ (8000c74 <HAL_SPI_MspInit+0x174>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b54:	4b47      	ldr	r3, [pc, #284]	@ (8000c74 <HAL_SPI_MspInit+0x174>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	4a46      	ldr	r2, [pc, #280]	@ (8000c74 <HAL_SPI_MspInit+0x174>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b60:	4b44      	ldr	r3, [pc, #272]	@ (8000c74 <HAL_SPI_MspInit+0x174>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	483c      	ldr	r0, [pc, #240]	@ (8000c78 <HAL_SPI_MspInit+0x178>)
 8000b88:	f000 ff7a 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4834      	ldr	r0, [pc, #208]	@ (8000c7c <HAL_SPI_MspInit+0x17c>)
 8000baa:	f000 ff69 	bl	8001a80 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream6;
 8000bae:	4b34      	ldr	r3, [pc, #208]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bb0:	4a34      	ldr	r2, [pc, #208]	@ (8000c84 <HAL_SPI_MspInit+0x184>)
 8000bb2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_9;
 8000bb4:	4b32      	ldr	r3, [pc, #200]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bb6:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8000bba:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bbc:	4b30      	ldr	r3, [pc, #192]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bbe:	2240      	movs	r2, #64	@ 0x40
 8000bc0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bce:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000bdc:	4b28      	ldr	r3, [pc, #160]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000be2:	4b27      	ldr	r3, [pc, #156]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000be8:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bee:	4824      	ldr	r0, [pc, #144]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000bf0:	f000 fb3c 	bl	800126c <HAL_DMA_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_SPI_MspInit+0xfe>
    {
      Error_Handler();
 8000bfa:	f7ff ff57 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a1f      	ldr	r2, [pc, #124]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000c02:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c04:	4a1e      	ldr	r2, [pc, #120]	@ (8000c80 <HAL_SPI_MspInit+0x180>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c8c <HAL_SPI_MspInit+0x18c>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c12:	f04f 5290 	mov.w	r2, #301989888	@ 0x12000000
 8000c16:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c2a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000c4a:	480f      	ldr	r0, [pc, #60]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c4c:	f000 fb0e 	bl	800126c <HAL_DMA_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 8000c56:	f7ff ff29 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c60:	4a09      	ldr	r2, [pc, #36]	@ (8000c88 <HAL_SPI_MspInit+0x188>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	@ 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40003800 	.word	0x40003800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	200000ac 	.word	0x200000ac
 8000c84:	400260a0 	.word	0x400260a0
 8000c88:	2000010c 	.word	0x2000010c
 8000c8c:	40026028 	.word	0x40026028

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b0ae      	sub	sp, #184	@ 0xb8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2290      	movs	r2, #144	@ 0x90
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 fa22 	bl	80050fa <memset>
  if(huart->Instance==UART4)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a4e      	ldr	r2, [pc, #312]	@ (8000df4 <HAL_UART_MspInit+0x164>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	f040 8094 	bne.w	8000dea <HAL_UART_MspInit+0x15a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000cc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fd87 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000cdc:	f7ff fee6 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ce0:	4b45      	ldr	r3, [pc, #276]	@ (8000df8 <HAL_UART_MspInit+0x168>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	4a44      	ldr	r2, [pc, #272]	@ (8000df8 <HAL_UART_MspInit+0x168>)
 8000ce6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cec:	4b42      	ldr	r3, [pc, #264]	@ (8000df8 <HAL_UART_MspInit+0x168>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8000df8 <HAL_UART_MspInit+0x168>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8000df8 <HAL_UART_MspInit+0x168>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d04:	4b3c      	ldr	r3, [pc, #240]	@ (8000df8 <HAL_UART_MspInit+0x168>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	4b39      	ldr	r3, [pc, #228]	@ (8000df8 <HAL_UART_MspInit+0x168>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d14:	4a38      	ldr	r2, [pc, #224]	@ (8000df8 <HAL_UART_MspInit+0x168>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1c:	4b36      	ldr	r3, [pc, #216]	@ (8000df8 <HAL_UART_MspInit+0x168>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d40:	2308      	movs	r3, #8
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482b      	ldr	r0, [pc, #172]	@ (8000dfc <HAL_UART_MspInit+0x16c>)
 8000d4e:	f000 fe97 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4821      	ldr	r0, [pc, #132]	@ (8000e00 <HAL_UART_MspInit+0x170>)
 8000d7a:	f000 fe81 	bl	8001a80 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000d80:	4a21      	ldr	r2, [pc, #132]	@ (8000e08 <HAL_UART_MspInit+0x178>)
 8000d82:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000d86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d8a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000d8e:	2240      	movs	r2, #64	@ 0x40
 8000d90:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000d9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d9e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da0:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000dac:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000dbe:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000dc0:	f000 fa54 	bl	800126c <HAL_DMA_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8000dca:	f7ff fe6f 	bl	8000aac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000dd2:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e04 <HAL_UART_MspInit+0x174>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2034      	movs	r0, #52	@ 0x34
 8000de0:	f000 fa0d 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000de4:	2034      	movs	r0, #52	@ 0x34
 8000de6:	f000 fa26 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	37b8      	adds	r7, #184	@ 0xb8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40004c00 	.word	0x40004c00
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020800 	.word	0x40020800
 8000e04:	200001f4 	.word	0x200001f4
 8000e08:	40026070 	.word	0x40026070

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <NMI_Handler+0x4>

08000e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 f8ad 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <DMA1_Stream1_IRQHandler+0x10>)
 8000e72:	f000 fb9b 	bl	80015ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000010c 	.word	0x2000010c

08000e80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000e84:	4802      	ldr	r0, [pc, #8]	@ (8000e90 <DMA1_Stream4_IRQHandler+0x10>)
 8000e86:	f000 fb91 	bl	80015ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001f4 	.word	0x200001f4

08000e94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000e98:	4802      	ldr	r0, [pc, #8]	@ (8000ea4 <DMA1_Stream6_IRQHandler+0x10>)
 8000e9a:	f000 fb87 	bl	80015ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000ac 	.word	0x200000ac

08000ea8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000eac:	4802      	ldr	r0, [pc, #8]	@ (8000eb8 <UART4_IRQHandler+0x10>)
 8000eae:	f003 f955 	bl	800415c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000016c 	.word	0x2000016c

08000ebc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee4:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ee6:	490e      	ldr	r1, [pc, #56]	@ (8000f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	@ (8000f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000efc:	4c0b      	ldr	r4, [pc, #44]	@ (8000f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f0a:	f7ff ffd7 	bl	8000ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f004 f8fd 	bl	800510c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fb47 	bl	80005a4 <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000f24:	080051a0 	.word	0x080051a0
  ldr r2, =_sbss
 8000f28:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000f2c:	200002d8 	.word	0x200002d8

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_Init+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_Init+0x28>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f94f 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fdb2 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f967 	bl	8001252 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 f92f 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000020 	.word	0x20000020
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	20000024 	.word	0x20000024

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000028 	.word	0x20000028
 8000fe4:	200002d4 	.word	0x200002d4

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200002d4 	.word	0x200002d4

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000028 	.word	0x20000028

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__NVIC_SetPriorityGrouping+0x40>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	4313      	orrs	r3, r2
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <__NVIC_SetPriorityGrouping+0x40>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	05fa0000 	.word	0x05fa0000

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	@ (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	@ (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	@ (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff feb6 	bl	8000fe8 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e099      	b.n	80013bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a8:	e00f      	b.n	80012ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012aa:	f7ff fe9d 	bl	8000fe8 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d908      	bls.n	80012ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2220      	movs	r2, #32
 80012bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2203      	movs	r2, #3
 80012c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e078      	b.n	80013bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1e8      	bne.n	80012aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <HAL_DMA_Init+0x158>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001320:	2b04      	cmp	r3, #4
 8001322:	d107      	bne.n	8001334 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	4313      	orrs	r3, r2
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4313      	orrs	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f023 0307 	bic.w	r3, r3, #7
 800134a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	4313      	orrs	r3, r2
 8001354:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	2b04      	cmp	r3, #4
 800135c:	d117      	bne.n	800138e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00e      	beq.n	800138e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 fb09 	bl	8001988 <DMA_CheckFifoParam>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2240      	movs	r2, #64	@ 0x40
 8001380:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800138a:	2301      	movs	r3, #1
 800138c:	e016      	b.n	80013bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fac0 	bl	800191c <DMA_CalcBaseAndBitshift>
 800139c:	4603      	mov	r3, r0
 800139e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a4:	223f      	movs	r2, #63	@ 0x3f
 80013a6:	409a      	lsls	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	e010803f 	.word	0xe010803f

080013c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_DMA_Start_IT+0x26>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e048      	b.n	8001480 <HAL_DMA_Start_IT+0xb8>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d137      	bne.n	8001472 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2202      	movs	r2, #2
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 fa52 	bl	80018c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001420:	223f      	movs	r2, #63	@ 0x3f
 8001422:	409a      	lsls	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0216 	orr.w	r2, r2, #22
 8001436:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001446:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0208 	orr.w	r2, r2, #8
 800145e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0201 	orr.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e005      	b.n	800147e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800147a:	2302      	movs	r3, #2
 800147c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800147e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001494:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001496:	f7ff fda7 	bl	8000fe8 <HAL_GetTick>
 800149a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d008      	beq.n	80014ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2280      	movs	r2, #128	@ 0x80
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e052      	b.n	8001560 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0216 	bic.w	r2, r2, #22
 80014c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d103      	bne.n	80014ea <HAL_DMA_Abort+0x62>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0208 	bic.w	r2, r2, #8
 80014f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800150a:	e013      	b.n	8001534 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800150c:	f7ff fd6c 	bl	8000fe8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b05      	cmp	r3, #5
 8001518:	d90c      	bls.n	8001534 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2220      	movs	r2, #32
 800151e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2203      	movs	r2, #3
 8001524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e015      	b.n	8001560 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e4      	bne.n	800150c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001546:	223f      	movs	r2, #63	@ 0x3f
 8001548:	409a      	lsls	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d004      	beq.n	8001586 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2280      	movs	r2, #128	@ 0x80
 8001580:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00c      	b.n	80015a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2205      	movs	r2, #5
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0201 	bic.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80015b8:	4b8e      	ldr	r3, [pc, #568]	@ (80017f4 <HAL_DMA_IRQHandler+0x248>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a8e      	ldr	r2, [pc, #568]	@ (80017f8 <HAL_DMA_IRQHandler+0x24c>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0a9b      	lsrs	r3, r3, #10
 80015c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d6:	2208      	movs	r2, #8
 80015d8:	409a      	lsls	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01a      	beq.n	8001618 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0204 	bic.w	r2, r2, #4
 80015fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001604:	2208      	movs	r2, #8
 8001606:	409a      	lsls	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	f043 0201 	orr.w	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161c:	2201      	movs	r2, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d012      	beq.n	800164e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800163a:	2201      	movs	r2, #1
 800163c:	409a      	lsls	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001646:	f043 0202 	orr.w	r2, r3, #2
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001652:	2204      	movs	r2, #4
 8001654:	409a      	lsls	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d012      	beq.n	8001684 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00b      	beq.n	8001684 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001670:	2204      	movs	r2, #4
 8001672:	409a      	lsls	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167c:	f043 0204 	orr.w	r2, r3, #4
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001688:	2210      	movs	r2, #16
 800168a:	409a      	lsls	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d043      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d03c      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a6:	2210      	movs	r2, #16
 80016a8:	409a      	lsls	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d018      	beq.n	80016ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d108      	bne.n	80016dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d024      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	4798      	blx	r3
 80016da:	e01f      	b.n	800171c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01b      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
 80016ec:	e016      	b.n	800171c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d107      	bne.n	800170c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0208 	bic.w	r2, r2, #8
 800170a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001720:	2220      	movs	r2, #32
 8001722:	409a      	lsls	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 808f 	beq.w	800184c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8087 	beq.w	800184c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001742:	2220      	movs	r2, #32
 8001744:	409a      	lsls	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b05      	cmp	r3, #5
 8001754:	d136      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0216 	bic.w	r2, r2, #22
 8001764:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001774:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <HAL_DMA_IRQHandler+0x1da>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0208 	bic.w	r2, r2, #8
 8001794:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179a:	223f      	movs	r2, #63	@ 0x3f
 800179c:	409a      	lsls	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d07e      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
        }
        return;
 80017c2:	e079      	b.n	80018b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d01d      	beq.n	800180e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10d      	bne.n	80017fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d031      	beq.n	800184c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	4798      	blx	r3
 80017f0:	e02c      	b.n	800184c <HAL_DMA_IRQHandler+0x2a0>
 80017f2:	bf00      	nop
 80017f4:	20000020 	.word	0x20000020
 80017f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d023      	beq.n	800184c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
 800180c:	e01e      	b.n	800184c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10f      	bne.n	800183c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0210 	bic.w	r2, r2, #16
 800182a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001850:	2b00      	cmp	r3, #0
 8001852:	d032      	beq.n	80018ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d022      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2205      	movs	r2, #5
 8001864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	3301      	adds	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	429a      	cmp	r2, r3
 8001882:	d307      	bcc.n	8001894 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f2      	bne.n	8001878 <HAL_DMA_IRQHandler+0x2cc>
 8001892:	e000      	b.n	8001896 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001894:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	4798      	blx	r3
 80018b6:	e000      	b.n	80018ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80018b8:	bf00      	nop
    }
  }
}
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b40      	cmp	r3, #64	@ 0x40
 80018ec:	d108      	bne.n	8001900 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018fe:	e007      	b.n	8001910 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	60da      	str	r2, [r3, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	3b10      	subs	r3, #16
 800192c:	4a13      	ldr	r2, [pc, #76]	@ (800197c <DMA_CalcBaseAndBitshift+0x60>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <DMA_CalcBaseAndBitshift+0x64>)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d908      	bls.n	800195c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <DMA_CalcBaseAndBitshift+0x68>)
 8001952:	4013      	ands	r3, r2
 8001954:	1d1a      	adds	r2, r3, #4
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	659a      	str	r2, [r3, #88]	@ 0x58
 800195a:	e006      	b.n	800196a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <DMA_CalcBaseAndBitshift+0x68>)
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	aaaaaaab 	.word	0xaaaaaaab
 8001980:	08005188 	.word	0x08005188
 8001984:	fffffc00 	.word	0xfffffc00

08001988 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11f      	bne.n	80019e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d856      	bhi.n	8001a56 <DMA_CheckFifoParam+0xce>
 80019a8:	a201      	add	r2, pc, #4	@ (adr r2, 80019b0 <DMA_CheckFifoParam+0x28>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	080019c1 	.word	0x080019c1
 80019b4:	080019d3 	.word	0x080019d3
 80019b8:	080019c1 	.word	0x080019c1
 80019bc:	08001a57 	.word	0x08001a57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d046      	beq.n	8001a5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d0:	e043      	b.n	8001a5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019da:	d140      	bne.n	8001a5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e0:	e03d      	b.n	8001a5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ea:	d121      	bne.n	8001a30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d837      	bhi.n	8001a62 <DMA_CheckFifoParam+0xda>
 80019f2:	a201      	add	r2, pc, #4	@ (adr r2, 80019f8 <DMA_CheckFifoParam+0x70>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a09 	.word	0x08001a09
 80019fc:	08001a0f 	.word	0x08001a0f
 8001a00:	08001a09 	.word	0x08001a09
 8001a04:	08001a21 	.word	0x08001a21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0c:	e030      	b.n	8001a70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d025      	beq.n	8001a66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a1e:	e022      	b.n	8001a66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a28:	d11f      	bne.n	8001a6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a2e:	e01c      	b.n	8001a6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d903      	bls.n	8001a3e <DMA_CheckFifoParam+0xb6>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d003      	beq.n	8001a44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a3c:	e018      	b.n	8001a70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
      break;
 8001a42:	e015      	b.n	8001a70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00e      	beq.n	8001a6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
      break;
 8001a54:	e00b      	b.n	8001a6e <DMA_CheckFifoParam+0xe6>
      break;
 8001a56:	bf00      	nop
 8001a58:	e00a      	b.n	8001a70 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e008      	b.n	8001a70 <DMA_CheckFifoParam+0xe8>
      break;
 8001a5e:	bf00      	nop
 8001a60:	e006      	b.n	8001a70 <DMA_CheckFifoParam+0xe8>
      break;
 8001a62:	bf00      	nop
 8001a64:	e004      	b.n	8001a70 <DMA_CheckFifoParam+0xe8>
      break;
 8001a66:	bf00      	nop
 8001a68:	e002      	b.n	8001a70 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a6a:	bf00      	nop
 8001a6c:	e000      	b.n	8001a70 <DMA_CheckFifoParam+0xe8>
      break;
 8001a6e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	@ 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e175      	b.n	8001d8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8164 	bne.w	8001d86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_GPIO_Init+0x56>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d017      	beq.n	8001b74 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80be 	beq.w	8001d86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <HAL_GPIO_Init+0x324>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a65      	ldr	r2, [pc, #404]	@ (8001da4 <HAL_GPIO_Init+0x324>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b63      	ldr	r3, [pc, #396]	@ (8001da4 <HAL_GPIO_Init+0x324>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c22:	4a61      	ldr	r2, [pc, #388]	@ (8001da8 <HAL_GPIO_Init+0x328>)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a58      	ldr	r2, [pc, #352]	@ (8001dac <HAL_GPIO_Init+0x32c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d037      	beq.n	8001cbe <HAL_GPIO_Init+0x23e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a57      	ldr	r2, [pc, #348]	@ (8001db0 <HAL_GPIO_Init+0x330>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d031      	beq.n	8001cba <HAL_GPIO_Init+0x23a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a56      	ldr	r2, [pc, #344]	@ (8001db4 <HAL_GPIO_Init+0x334>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d02b      	beq.n	8001cb6 <HAL_GPIO_Init+0x236>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a55      	ldr	r2, [pc, #340]	@ (8001db8 <HAL_GPIO_Init+0x338>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d025      	beq.n	8001cb2 <HAL_GPIO_Init+0x232>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a54      	ldr	r2, [pc, #336]	@ (8001dbc <HAL_GPIO_Init+0x33c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01f      	beq.n	8001cae <HAL_GPIO_Init+0x22e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a53      	ldr	r2, [pc, #332]	@ (8001dc0 <HAL_GPIO_Init+0x340>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0x22a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a52      	ldr	r2, [pc, #328]	@ (8001dc4 <HAL_GPIO_Init+0x344>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x226>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a51      	ldr	r2, [pc, #324]	@ (8001dc8 <HAL_GPIO_Init+0x348>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x222>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a50      	ldr	r2, [pc, #320]	@ (8001dcc <HAL_GPIO_Init+0x34c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x21e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4f      	ldr	r2, [pc, #316]	@ (8001dd0 <HAL_GPIO_Init+0x350>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x21a>
 8001c96:	2309      	movs	r3, #9
 8001c98:	e012      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	e010      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	e00e      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	e00c      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	e00a      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e008      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cae:	2304      	movs	r3, #4
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e004      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f002 0203 	and.w	r2, r2, #3
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	4093      	lsls	r3, r2
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cd0:	4935      	ldr	r1, [pc, #212]	@ (8001da8 <HAL_GPIO_Init+0x328>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cde:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <HAL_GPIO_Init+0x354>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d02:	4a34      	ldr	r2, [pc, #208]	@ (8001dd4 <HAL_GPIO_Init+0x354>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d08:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <HAL_GPIO_Init+0x354>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d2c:	4a29      	ldr	r2, [pc, #164]	@ (8001dd4 <HAL_GPIO_Init+0x354>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <HAL_GPIO_Init+0x354>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d56:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <HAL_GPIO_Init+0x354>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_GPIO_Init+0x354>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <HAL_GPIO_Init+0x354>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	f67f ae86 	bls.w	8001aa0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3724      	adds	r7, #36	@ 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40021400 	.word	0x40021400
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	40021c00 	.word	0x40021c00
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	40022400 	.word	0x40022400
 8001dd4:	40013c00 	.word	0x40013c00

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e1c:	887a      	ldrh	r2, [r7, #2]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e29b      	b.n	800238e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8087 	beq.w	8001f72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e64:	4b96      	ldr	r3, [pc, #600]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d00c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e70:	4b93      	ldr	r3, [pc, #588]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d112      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62>
 8001e7c:	4b90      	ldr	r3, [pc, #576]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e88:	d10b      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d06c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x130>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d168      	bne.n	8001f70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e275      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x7a>
 8001eac:	4b84      	ldr	r3, [pc, #528]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a83      	ldr	r2, [pc, #524]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e02e      	b.n	8001f18 <HAL_RCC_OscConfig+0xd8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x9c>
 8001ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b7c      	ldr	r3, [pc, #496]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7b      	ldr	r2, [pc, #492]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xd8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0xc0>
 8001ee6:	4b76      	ldr	r3, [pc, #472]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a75      	ldr	r2, [pc, #468]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b73      	ldr	r3, [pc, #460]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a72      	ldr	r2, [pc, #456]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xd8>
 8001f00:	4b6f      	ldr	r3, [pc, #444]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a6e      	ldr	r2, [pc, #440]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b6c      	ldr	r3, [pc, #432]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6b      	ldr	r2, [pc, #428]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff f862 	bl	8000fe8 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f85e 	bl	8000fe8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	@ 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e229      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b61      	ldr	r3, [pc, #388]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe8>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f84e 	bl	8000fe8 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff f84a 	bl	8000fe8 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	@ 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e215      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	4b57      	ldr	r3, [pc, #348]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x110>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d069      	beq.n	8002052 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f7e:	4b50      	ldr	r3, [pc, #320]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x190>
 8001f96:	4b4a      	ldr	r3, [pc, #296]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	4b47      	ldr	r3, [pc, #284]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x17a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1e9      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b41      	ldr	r3, [pc, #260]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	493d      	ldr	r1, [pc, #244]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	e040      	b.n	8002052 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d023      	beq.n	8002020 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd8:	4b39      	ldr	r3, [pc, #228]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a38      	ldr	r2, [pc, #224]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f800 	bl	8000fe8 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fec:	f7fe fffc 	bl	8000fe8 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e1c7      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	4b30      	ldr	r3, [pc, #192]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b2d      	ldr	r3, [pc, #180]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4929      	ldr	r1, [pc, #164]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
 800201e:	e018      	b.n	8002052 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002020:	4b27      	ldr	r3, [pc, #156]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a26      	ldr	r2, [pc, #152]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe ffdc 	bl	8000fe8 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002034:	f7fe ffd8 	bl	8000fe8 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1a3      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1e      	ldr	r3, [pc, #120]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d038      	beq.n	80020d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d019      	beq.n	800209a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206a:	4a15      	ldr	r2, [pc, #84]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe ffb9 	bl	8000fe8 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207a:	f7fe ffb5 	bl	8000fe8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e180      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 800208e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x23a>
 8002098:	e01a      	b.n	80020d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800209e:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <HAL_RCC_OscConfig+0x280>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7fe ff9f 	bl	8000fe8 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ae:	f7fe ff9b 	bl	8000fe8 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d903      	bls.n	80020c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e166      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
 80020c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b92      	ldr	r3, [pc, #584]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80020c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ee      	bne.n	80020ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a4 	beq.w	8002226 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b8c      	ldr	r3, [pc, #560]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10d      	bne.n	8002106 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	4b89      	ldr	r3, [pc, #548]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	4a88      	ldr	r2, [pc, #544]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	4b86      	ldr	r3, [pc, #536]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002106:	4b83      	ldr	r3, [pc, #524]	@ (8002314 <HAL_RCC_OscConfig+0x4d4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002112:	4b80      	ldr	r3, [pc, #512]	@ (8002314 <HAL_RCC_OscConfig+0x4d4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7f      	ldr	r2, [pc, #508]	@ (8002314 <HAL_RCC_OscConfig+0x4d4>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe ff63 	bl	8000fe8 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002126:	f7fe ff5f 	bl	8000fe8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b64      	cmp	r3, #100	@ 0x64
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e12a      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002138:	4b76      	ldr	r3, [pc, #472]	@ (8002314 <HAL_RCC_OscConfig+0x4d4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x31a>
 800214c:	4b70      	ldr	r3, [pc, #448]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002150:	4a6f      	ldr	r2, [pc, #444]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6713      	str	r3, [r2, #112]	@ 0x70
 8002158:	e02d      	b.n	80021b6 <HAL_RCC_OscConfig+0x376>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x33c>
 8002162:	4b6b      	ldr	r3, [pc, #428]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002166:	4a6a      	ldr	r2, [pc, #424]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	@ 0x70
 800216e:	4b68      	ldr	r3, [pc, #416]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002172:	4a67      	ldr	r2, [pc, #412]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6713      	str	r3, [r2, #112]	@ 0x70
 800217a:	e01c      	b.n	80021b6 <HAL_RCC_OscConfig+0x376>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d10c      	bne.n	800219e <HAL_RCC_OscConfig+0x35e>
 8002184:	4b62      	ldr	r3, [pc, #392]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002188:	4a61      	ldr	r2, [pc, #388]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002190:	4b5f      	ldr	r3, [pc, #380]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002194:	4a5e      	ldr	r2, [pc, #376]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6713      	str	r3, [r2, #112]	@ 0x70
 800219c:	e00b      	b.n	80021b6 <HAL_RCC_OscConfig+0x376>
 800219e:	4b5c      	ldr	r3, [pc, #368]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021aa:	4b59      	ldr	r3, [pc, #356]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ae:	4a58      	ldr	r2, [pc, #352]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d015      	beq.n	80021ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021be:	f7fe ff13 	bl	8000fe8 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c6:	f7fe ff0f 	bl	8000fe8 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0d8      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ee      	beq.n	80021c6 <HAL_RCC_OscConfig+0x386>
 80021e8:	e014      	b.n	8002214 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7fe fefd 	bl	8000fe8 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fef9 	bl	8000fe8 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0c2      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	4b41      	ldr	r3, [pc, #260]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ee      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002214:	7dfb      	ldrb	r3, [r7, #23]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d105      	bne.n	8002226 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221a:	4b3d      	ldr	r3, [pc, #244]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80ae 	beq.w	800238c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002230:	4b37      	ldr	r3, [pc, #220]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d06d      	beq.n	8002318 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d14b      	bne.n	80022dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002244:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a31      	ldr	r2, [pc, #196]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 800224a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe feca 	bl	8000fe8 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fec6 	bl	8000fe8 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e091      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	019b      	lsls	r3, r3, #6
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	085b      	lsrs	r3, r3, #1
 800228e:	3b01      	subs	r3, #1
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	071b      	lsls	r3, r3, #28
 80022a2:	491b      	ldr	r1, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a18      	ldr	r2, [pc, #96]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fe98 	bl	8000fe8 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe fe94 	bl	8000fe8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e05f      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x47c>
 80022da:	e057      	b.n	800238c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fe7e 	bl	8000fe8 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fe7a 	bl	8000fe8 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e045      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_RCC_OscConfig+0x4d0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4b0>
 800230e:	e03d      	b.n	800238c <HAL_RCC_OscConfig+0x54c>
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002318:	4b1f      	ldr	r3, [pc, #124]	@ (8002398 <HAL_RCC_OscConfig+0x558>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d030      	beq.n	8002388 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d129      	bne.n	8002388 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d122      	bne.n	8002388 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800234e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002350:	4293      	cmp	r3, r2
 8002352:	d119      	bne.n	8002388 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	3b01      	subs	r3, #1
 8002362:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d10f      	bne.n	8002388 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002372:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d107      	bne.n	8002388 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800

0800239c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0d0      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d910      	bls.n	80023e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c2:	4b67      	ldr	r3, [pc, #412]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 020f 	bic.w	r2, r3, #15
 80023ca:	4965      	ldr	r1, [pc, #404]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d2:	4b63      	ldr	r3, [pc, #396]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0b8      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d020      	beq.n	8002432 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b59      	ldr	r3, [pc, #356]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a58      	ldr	r2, [pc, #352]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002402:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002406:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002414:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a52      	ldr	r2, [pc, #328]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800241a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800241e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b50      	ldr	r3, [pc, #320]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	494d      	ldr	r1, [pc, #308]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d040      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d115      	bne.n	800247e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e07f      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e073      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b3d      	ldr	r3, [pc, #244]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06b      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4936      	ldr	r1, [pc, #216]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002490:	f7fe fdaa 	bl	8000fe8 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fda6 	bl	8000fe8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e053      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d210      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 020f 	bic.w	r2, r3, #15
 80024d6:	4922      	ldr	r1, [pc, #136]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e032      	b.n	8002556 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4916      	ldr	r1, [pc, #88]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800251a:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	490e      	ldr	r1, [pc, #56]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800252e:	f000 f821 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490a      	ldr	r1, [pc, #40]	@ (8002568 <HAL_RCC_ClockConfig+0x1cc>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	fa22 f303 	lsr.w	r3, r2, r3
 8002546:	4a09      	ldr	r2, [pc, #36]	@ (800256c <HAL_RCC_ClockConfig+0x1d0>)
 8002548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <HAL_RCC_ClockConfig+0x1d4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fd06 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023c00 	.word	0x40023c00
 8002564:	40023800 	.word	0x40023800
 8002568:	08005170 	.word	0x08005170
 800256c:	20000020 	.word	0x20000020
 8002570:	20000024 	.word	0x20000024

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002578:	b094      	sub	sp, #80	@ 0x50
 800257a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002580:	2300      	movs	r3, #0
 8002582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002584:	2300      	movs	r3, #0
 8002586:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258c:	4b79      	ldr	r3, [pc, #484]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d00d      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002598:	2b08      	cmp	r3, #8
 800259a:	f200 80e1 	bhi.w	8002760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x34>
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0x3a>
 80025a6:	e0db      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b73      	ldr	r3, [pc, #460]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x204>)
 80025aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025ac:	e0db      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ae:	4b72      	ldr	r3, [pc, #456]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x204>)
 80025b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025b2:	e0d8      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025be:	4b6d      	ldr	r3, [pc, #436]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d063      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	2200      	movs	r2, #0
 80025d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025e6:	4622      	mov	r2, r4
 80025e8:	462b      	mov	r3, r5
 80025ea:	f04f 0000 	mov.w	r0, #0
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	0159      	lsls	r1, r3, #5
 80025f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f8:	0150      	lsls	r0, r2, #5
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4621      	mov	r1, r4
 8002600:	1a51      	subs	r1, r2, r1
 8002602:	6139      	str	r1, [r7, #16]
 8002604:	4629      	mov	r1, r5
 8002606:	eb63 0301 	sbc.w	r3, r3, r1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002618:	4659      	mov	r1, fp
 800261a:	018b      	lsls	r3, r1, #6
 800261c:	4651      	mov	r1, sl
 800261e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002622:	4651      	mov	r1, sl
 8002624:	018a      	lsls	r2, r1, #6
 8002626:	4651      	mov	r1, sl
 8002628:	ebb2 0801 	subs.w	r8, r2, r1
 800262c:	4659      	mov	r1, fp
 800262e:	eb63 0901 	sbc.w	r9, r3, r1
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800263e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002646:	4690      	mov	r8, r2
 8002648:	4699      	mov	r9, r3
 800264a:	4623      	mov	r3, r4
 800264c:	eb18 0303 	adds.w	r3, r8, r3
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	462b      	mov	r3, r5
 8002654:	eb49 0303 	adc.w	r3, r9, r3
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002666:	4629      	mov	r1, r5
 8002668:	028b      	lsls	r3, r1, #10
 800266a:	4621      	mov	r1, r4
 800266c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002670:	4621      	mov	r1, r4
 8002672:	028a      	lsls	r2, r1, #10
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800267a:	2200      	movs	r2, #0
 800267c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800267e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002684:	f7fd fde0 	bl	8000248 <__aeabi_uldivmod>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4613      	mov	r3, r2
 800268e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002690:	e058      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002692:	4b38      	ldr	r3, [pc, #224]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	2200      	movs	r2, #0
 800269a:	4618      	mov	r0, r3
 800269c:	4611      	mov	r1, r2
 800269e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026a2:	623b      	str	r3, [r7, #32]
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026ac:	4642      	mov	r2, r8
 80026ae:	464b      	mov	r3, r9
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	0159      	lsls	r1, r3, #5
 80026ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026be:	0150      	lsls	r0, r2, #5
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4641      	mov	r1, r8
 80026c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ca:	4649      	mov	r1, r9
 80026cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026e4:	ebb2 040a 	subs.w	r4, r2, sl
 80026e8:	eb63 050b 	sbc.w	r5, r3, fp
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	00eb      	lsls	r3, r5, #3
 80026f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fa:	00e2      	lsls	r2, r4, #3
 80026fc:	4614      	mov	r4, r2
 80026fe:	461d      	mov	r5, r3
 8002700:	4643      	mov	r3, r8
 8002702:	18e3      	adds	r3, r4, r3
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	464b      	mov	r3, r9
 8002708:	eb45 0303 	adc.w	r3, r5, r3
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800271a:	4629      	mov	r1, r5
 800271c:	028b      	lsls	r3, r1, #10
 800271e:	4621      	mov	r1, r4
 8002720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002724:	4621      	mov	r1, r4
 8002726:	028a      	lsls	r2, r1, #10
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800272e:	2200      	movs	r2, #0
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	61fa      	str	r2, [r7, #28]
 8002734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002738:	f7fd fd86 	bl	8000248 <__aeabi_uldivmod>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4613      	mov	r3, r2
 8002742:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002744:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x200>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002754:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800275e:	e002      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x204>)
 8002762:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002768:	4618      	mov	r0, r3
 800276a:	3750      	adds	r7, #80	@ 0x50
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	00f42400 	.word	0x00f42400

0800277c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <HAL_RCC_GetHCLKFreq+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000020 	.word	0x20000020

08002794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002798:	f7ff fff0 	bl	800277c <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0a9b      	lsrs	r3, r3, #10
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4903      	ldr	r1, [pc, #12]	@ (80027b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08005180 	.word	0x08005180

080027bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c0:	f7ff ffdc 	bl	800277c <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0b5b      	lsrs	r3, r3, #13
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4903      	ldr	r1, [pc, #12]	@ (80027e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	08005180 	.word	0x08005180

080027e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800280c:	4b69      	ldr	r3, [pc, #420]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	4a68      	ldr	r2, [pc, #416]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002812:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002816:	6093      	str	r3, [r2, #8]
 8002818:	4b66      	ldr	r3, [pc, #408]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002820:	4964      	ldr	r1, [pc, #400]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800282e:	2301      	movs	r3, #1
 8002830:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d017      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800283e:	4b5d      	ldr	r3, [pc, #372]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002844:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284c:	4959      	ldr	r1, [pc, #356]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d017      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800287a:	4b4e      	ldr	r3, [pc, #312]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002880:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	494a      	ldr	r1, [pc, #296]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002898:	d101      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 808b 	beq.w	80029de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	4b3a      	ldr	r3, [pc, #232]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	4a39      	ldr	r2, [pc, #228]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d4:	4b37      	ldr	r3, [pc, #220]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028e0:	4b35      	ldr	r3, [pc, #212]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a34      	ldr	r2, [pc, #208]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe fb7c 	bl	8000fe8 <HAL_GetTick>
 80028f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f4:	f7fe fb78 	bl	8000fe8 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e38f      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002906:	4b2c      	ldr	r3, [pc, #176]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002912:	4b28      	ldr	r3, [pc, #160]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800291a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d035      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	429a      	cmp	r2, r3
 800292e:	d02e      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002930:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002938:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800293a:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	4a1d      	ldr	r2, [pc, #116]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002944:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002946:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294a:	4a1a      	ldr	r2, [pc, #104]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002950:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002952:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002958:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d114      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7fe fb40 	bl	8000fe8 <HAL_GetTick>
 8002968:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296a:	e00a      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe fb3c 	bl	8000fe8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e351      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0ee      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800299a:	d111      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029a8:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029aa:	400b      	ands	r3, r1
 80029ac:	4901      	ldr	r1, [pc, #4]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
 80029b2:	e00b      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40007000 	.word	0x40007000
 80029bc:	0ffffcff 	.word	0x0ffffcff
 80029c0:	4bac      	ldr	r3, [pc, #688]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4aab      	ldr	r2, [pc, #684]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80029ca:	6093      	str	r3, [r2, #8]
 80029cc:	4ba9      	ldr	r3, [pc, #676]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	49a6      	ldr	r1, [pc, #664]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029ea:	4ba2      	ldr	r3, [pc, #648]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029f0:	4aa0      	ldr	r2, [pc, #640]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029fa:	4b9e      	ldr	r3, [pc, #632]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a04:	499b      	ldr	r1, [pc, #620]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a18:	4b96      	ldr	r3, [pc, #600]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a26:	4993      	ldr	r1, [pc, #588]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a3a:	4b8e      	ldr	r3, [pc, #568]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a48:	498a      	ldr	r1, [pc, #552]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a5c:	4b85      	ldr	r3, [pc, #532]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a6a:	4982      	ldr	r1, [pc, #520]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a7e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4979      	ldr	r1, [pc, #484]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa0:	4b74      	ldr	r3, [pc, #464]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	4971      	ldr	r1, [pc, #452]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac2:	4b6c      	ldr	r3, [pc, #432]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac8:	f023 020c 	bic.w	r2, r3, #12
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad0:	4968      	ldr	r1, [pc, #416]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ae4:	4b63      	ldr	r3, [pc, #396]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af2:	4960      	ldr	r1, [pc, #384]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b06:	4b5b      	ldr	r3, [pc, #364]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b14:	4957      	ldr	r1, [pc, #348]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b28:	4b52      	ldr	r3, [pc, #328]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b36:	494f      	ldr	r1, [pc, #316]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b50:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b58:	4946      	ldr	r1, [pc, #280]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b6c:	4b41      	ldr	r3, [pc, #260]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b72:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	493e      	ldr	r1, [pc, #248]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b8e:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9c:	4935      	ldr	r1, [pc, #212]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bb0:	4b30      	ldr	r3, [pc, #192]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bbe:	492d      	ldr	r1, [pc, #180]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d011      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bd2:	4b28      	ldr	r3, [pc, #160]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be0:	4924      	ldr	r1, [pc, #144]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c12:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c18:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c20:	4914      	ldr	r1, [pc, #80]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c34:	4b0f      	ldr	r3, [pc, #60]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c44:	490b      	ldr	r1, [pc, #44]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00f      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c68:	4902      	ldr	r1, [pc, #8]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c70:	e002      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c84:	4b8a      	ldr	r3, [pc, #552]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	4986      	ldr	r1, [pc, #536]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ca8:	4b81      	ldr	r3, [pc, #516]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb8:	497d      	ldr	r1, [pc, #500]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d006      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80d6 	beq.w	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002cd4:	4b76      	ldr	r3, [pc, #472]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a75      	ldr	r2, [pc, #468]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce0:	f7fe f982 	bl	8000fe8 <HAL_GetTick>
 8002ce4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ce8:	f7fe f97e 	bl	8000fe8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	@ 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e195      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d021      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11d      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d1a:	4b65      	ldr	r3, [pc, #404]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d28:	4b61      	ldr	r3, [pc, #388]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d2e:	0e1b      	lsrs	r3, r3, #24
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	019a      	lsls	r2, r3, #6
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	431a      	orrs	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	071b      	lsls	r3, r3, #28
 8002d4e:	4958      	ldr	r1, [pc, #352]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d02e      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d80:	d129      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d82:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d90:	4b47      	ldr	r3, [pc, #284]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d96:	0f1b      	lsrs	r3, r3, #28
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	019a      	lsls	r2, r3, #6
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	431a      	orrs	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	071b      	lsls	r3, r3, #28
 8002db6:	493e      	ldr	r1, [pc, #248]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dc4:	f023 021f 	bic.w	r2, r3, #31
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	4938      	ldr	r1, [pc, #224]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01d      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002de2:	4b33      	ldr	r3, [pc, #204]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de8:	0e1b      	lsrs	r3, r3, #24
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002df0:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002df6:	0f1b      	lsrs	r3, r3, #28
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	019a      	lsls	r2, r3, #6
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	061b      	lsls	r3, r3, #24
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	4926      	ldr	r1, [pc, #152]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d011      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	019a      	lsls	r2, r3, #6
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	071b      	lsls	r3, r3, #28
 8002e46:	491a      	ldr	r1, [pc, #104]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e4e:	4b18      	ldr	r3, [pc, #96]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a17      	ldr	r2, [pc, #92]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5a:	f7fe f8c5 	bl	8000fe8 <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e62:	f7fe f8c1 	bl	8000fe8 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b64      	cmp	r3, #100	@ 0x64
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0d8      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e74:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	f040 80ce 	bne.w	8003024 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e88:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a08      	ldr	r2, [pc, #32]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e94:	f7fe f8a8 	bl	8000fe8 <HAL_GetTick>
 8002e98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e9c:	f7fe f8a4 	bl	8000fe8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	@ 0x64
 8002ea8:	d904      	bls.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0bb      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ec0:	d0ec      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d02e      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d12a      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eea:	4b51      	ldr	r3, [pc, #324]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	0f1b      	lsrs	r3, r3, #28
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	019a      	lsls	r2, r3, #6
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	061b      	lsls	r3, r3, #24
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	071b      	lsls	r3, r3, #28
 8002f1e:	4944      	ldr	r1, [pc, #272]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f26:	4b42      	ldr	r3, [pc, #264]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f2c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	493d      	ldr	r1, [pc, #244]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d022      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f54:	d11d      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f56:	4b36      	ldr	r3, [pc, #216]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5c:	0e1b      	lsrs	r3, r3, #24
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f64:	4b32      	ldr	r3, [pc, #200]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6a:	0f1b      	lsrs	r3, r3, #28
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	019a      	lsls	r2, r3, #6
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	061b      	lsls	r3, r3, #24
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	071b      	lsls	r3, r3, #28
 8002f8a:	4929      	ldr	r1, [pc, #164]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d028      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f9e:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	0e1b      	lsrs	r3, r3, #24
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fac:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	019a      	lsls	r2, r3, #6
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	061b      	lsls	r3, r3, #24
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	071b      	lsls	r3, r3, #28
 8002fd2:	4917      	ldr	r1, [pc, #92]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fda:	4b15      	ldr	r3, [pc, #84]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fe0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	4911      	ldr	r1, [pc, #68]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffc:	f7fd fff4 	bl	8000fe8 <HAL_GetTick>
 8003000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003004:	f7fd fff0 	bl	8000fe8 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	@ 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e007      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003016:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800301e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003022:	d1ef      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800

08003034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e09d      	b.n	8003182 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d108      	bne.n	8003060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003056:	d009      	beq.n	800306c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
 800305e:	e005      	b.n	800306c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fd3a 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030ac:	d902      	bls.n	80030b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	e002      	b.n	80030ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80030c2:	d007      	beq.n	80030d4 <HAL_SPI_Init+0xa0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030cc:	d002      	beq.n	80030d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003116:	ea42 0103 	orr.w	r1, r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	0c1b      	lsrs	r3, r3, #16
 8003130:	f003 0204 	and.w	r2, r3, #4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003150:	ea42 0103 	orr.w	r1, r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003170:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_SPI_Transmit_DMA+0x20>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0d8      	b.n	800335e <HAL_SPI_Transmit_DMA+0x1d2>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d002      	beq.n	80031c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
 80031c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031c4:	e0c6      	b.n	8003354 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_SPI_Transmit_DMA+0x46>
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031d6:	e0bd      	b.n	8003354 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2203      	movs	r2, #3
 80031dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003222:	d10f      	bne.n	8003244 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003232:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003242:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003248:	4a47      	ldr	r2, [pc, #284]	@ (8003368 <HAL_SPI_Transmit_DMA+0x1dc>)
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003250:	4a46      	ldr	r2, [pc, #280]	@ (800336c <HAL_SPI_Transmit_DMA+0x1e0>)
 8003252:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	4a45      	ldr	r2, [pc, #276]	@ (8003370 <HAL_SPI_Transmit_DMA+0x1e4>)
 800325a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003260:	2200      	movs	r2, #0
 8003262:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003272:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800327c:	d82d      	bhi.n	80032da <HAL_SPI_Transmit_DMA+0x14e>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003288:	d127      	bne.n	80032da <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10f      	bne.n	80032b8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032b6:	e010      	b.n	80032da <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032c6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e2:	4619      	mov	r1, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032f2:	f7fe f869 	bl	80013c8 <HAL_DMA_Start_IT>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00c      	beq.n	8003316 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003300:	f043 0210 	orr.w	r2, r3, #16
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 8003314:	e01e      	b.n	8003354 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003320:	2b40      	cmp	r3, #64	@ 0x40
 8003322:	d007      	beq.n	8003334 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0220 	orr.w	r2, r2, #32
 8003342:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0202 	orr.w	r2, r2, #2
 8003352:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800335c:	7dfb      	ldrb	r3, [r7, #23]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	08003b1d 	.word	0x08003b1d
 800336c:	08003939 	.word	0x08003939
 8003370:	08003b71 	.word	0x08003b71

08003374 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d110      	bne.n	80033b0 <HAL_SPI_Receive_DMA+0x3c>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003396:	d10b      	bne.n	80033b0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2204      	movs	r2, #4
 800339c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f908 	bl	80035bc <HAL_SPI_TransmitReceive_DMA>
 80033ac:	4603      	mov	r3, r0
 80033ae:	e0fb      	b.n	80035a8 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_SPI_Receive_DMA+0x4a>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0f4      	b.n	80035a8 <HAL_SPI_Receive_DMA+0x234>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d002      	beq.n	80033d8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033d6:	e0e2      	b.n	800359e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_SPI_Receive_DMA+0x70>
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033e8:	e0d9      	b.n	800359e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2204      	movs	r2, #4
 80033ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800342e:	d10f      	bne.n	8003450 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800343e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800344e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800345e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003468:	d908      	bls.n	800347c <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	e042      	b.n	8003502 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800348a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003496:	d134      	bne.n	8003502 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034a6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034c6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80034da:	e012      	b.n	8003502 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034ea:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3301      	adds	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003506:	4a2a      	ldr	r2, [pc, #168]	@ (80035b0 <HAL_SPI_Receive_DMA+0x23c>)
 8003508:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	4a29      	ldr	r2, [pc, #164]	@ (80035b4 <HAL_SPI_Receive_DMA+0x240>)
 8003510:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	4a28      	ldr	r2, [pc, #160]	@ (80035b8 <HAL_SPI_Receive_DMA+0x244>)
 8003518:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351e:	2200      	movs	r2, #0
 8003520:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	4619      	mov	r1, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800353a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800353c:	f7fd ff44 	bl	80013c8 <HAL_DMA_Start_IT>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	f043 0210 	orr.w	r2, r3, #16
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 800355e:	e01e      	b.n	800359e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356a:	2b40      	cmp	r3, #64	@ 0x40
 800356c:	d007      	beq.n	800357e <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800357c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0220 	orr.w	r2, r2, #32
 800358c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	08003b39 	.word	0x08003b39
 80035b4:	080039e1 	.word	0x080039e1
 80035b8:	08003b71 	.word	0x08003b71

080035bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_SPI_TransmitReceive_DMA+0x20>
 80035d8:	2302      	movs	r3, #2
 80035da:	e16c      	b.n	80038b6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035ea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80035f2:	7dbb      	ldrb	r3, [r7, #22]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d00d      	beq.n	8003614 <HAL_SPI_TransmitReceive_DMA+0x58>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035fe:	d106      	bne.n	800360e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003608:	7dbb      	ldrb	r3, [r7, #22]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d002      	beq.n	8003614 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800360e:	2302      	movs	r3, #2
 8003610:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003612:	e14b      	b.n	80038ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003620:	887b      	ldrh	r3, [r7, #2]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
    goto error;
 800362a:	e13f      	b.n	80038ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b04      	cmp	r3, #4
 8003636:	d003      	beq.n	8003640 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2205      	movs	r2, #5
 800363c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	887a      	ldrh	r2, [r7, #2]
 8003650:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	887a      	ldrh	r2, [r7, #2]
 8003656:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	887a      	ldrh	r2, [r7, #2]
 800366a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8003688:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003692:	d908      	bls.n	80036a6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	e06f      	b.n	8003786 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036b4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c0:	d126      	bne.n	8003710 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10f      	bne.n	80036ee <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036dc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036ec:	e010      	b.n	8003710 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036fc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003702:	b29b      	uxth	r3, r3
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	b29b      	uxth	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371a:	d134      	bne.n	8003786 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800372a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003732:	b29b      	uxth	r3, r3
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d111      	bne.n	8003760 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800374a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003752:	b29b      	uxth	r3, r3
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800375e:	e012      	b.n	8003786 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800376e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003776:	b29b      	uxth	r3, r3
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	b29b      	uxth	r3, r3
 800377c:	3301      	adds	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b04      	cmp	r3, #4
 8003790:	d108      	bne.n	80037a4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003796:	4a4a      	ldr	r2, [pc, #296]	@ (80038c0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003798:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	4a49      	ldr	r2, [pc, #292]	@ (80038c4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80037a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037a2:	e007      	b.n	80037b4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a8:	4a47      	ldr	r2, [pc, #284]	@ (80038c8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80037aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b0:	4a46      	ldr	r2, [pc, #280]	@ (80038cc <HAL_SPI_TransmitReceive_DMA+0x310>)
 80037b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	4a45      	ldr	r2, [pc, #276]	@ (80038d0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80037ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c0:	2200      	movs	r2, #0
 80037c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	4619      	mov	r1, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037dc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037de:	f7fd fdf3 	bl	80013c8 <HAL_DMA_Start_IT>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ec:	f043 0210 	orr.w	r2, r3, #16
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 8003800:	e054      	b.n	80038ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003816:	2200      	movs	r2, #0
 8003818:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381e:	2200      	movs	r2, #0
 8003820:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	2200      	movs	r2, #0
 8003828:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	2200      	movs	r2, #0
 8003830:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383a:	4619      	mov	r1, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003848:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800384a:	f7fd fdbd 	bl	80013c8 <HAL_DMA_Start_IT>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00c      	beq.n	800386e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	f043 0210 	orr.w	r2, r3, #16
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    goto error;
 800386c:	e01e      	b.n	80038ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d007      	beq.n	800388c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800388a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0220 	orr.w	r2, r2, #32
 800389a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0202 	orr.w	r2, r2, #2
 80038aa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	08003b39 	.word	0x08003b39
 80038c4:	080039e1 	.word	0x080039e1
 80038c8:	08003b55 	.word	0x08003b55
 80038cc:	08003a8b 	.word	0x08003a8b
 80038d0:	08003b71 	.word	0x08003b71

080038d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003944:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003946:	f7fd fb4f 	bl	8000fe8 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800395a:	d03b      	beq.n	80039d4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0220 	bic.w	r2, r2, #32
 800396a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0202 	bic.w	r2, r2, #2
 800397a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	2164      	movs	r1, #100	@ 0x64
 8003980:	6978      	ldr	r0, [r7, #20]
 8003982:	f000 faaf 	bl	8003ee4 <SPI_EndRxTxTransaction>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80039cc:	6978      	ldr	r0, [r7, #20]
 80039ce:	f7ff ffa9 	bl	8003924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80039d2:	e002      	b.n	80039da <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80039d4:	6978      	ldr	r0, [r7, #20]
 80039d6:	f7fc fdcd 	bl	8000574 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ec:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ee:	f7fd fafb 	bl	8000fe8 <HAL_GetTick>
 80039f2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a02:	d03c      	beq.n	8003a7e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0220 	bic.w	r2, r2, #32
 8003a12:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10d      	bne.n	8003a38 <SPI_DMAReceiveCplt+0x58>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a24:	d108      	bne.n	8003a38 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0203 	bic.w	r2, r2, #3
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	e007      	b.n	8003a48 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	2164      	movs	r1, #100	@ 0x64
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f9cd 	bl	8003dec <SPI_EndRxTransaction>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f7ff ff54 	bl	8003924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003a7c:	e002      	b.n	8003a84 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7fc fd82 	bl	8000588 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a98:	f7fd faa6 	bl	8000fe8 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aac:	d030      	beq.n	8003b10 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0220 	bic.w	r2, r2, #32
 8003abc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	2164      	movs	r1, #100	@ 0x64
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fa0e 	bl	8003ee4 <SPI_EndRxTxTransaction>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0203 	bic.w	r2, r2, #3
 8003ae8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff ff0b 	bl	8003924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b0e:	e002      	b.n	8003b16 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff fedf 	bl	80038d4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff fedc 	bl	80038e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff fed8 	bl	80038fc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff fed4 	bl	8003910 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0203 	bic.w	r2, r2, #3
 8003b8c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b92:	f043 0210 	orr.w	r2, r3, #16
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff febe 	bl	8003924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bc0:	f7fd fa12 	bl	8000fe8 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	4413      	add	r3, r2
 8003bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bd0:	f7fd fa0a 	bl	8000fe8 <HAL_GetTick>
 8003bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bd6:	4b39      	ldr	r3, [pc, #228]	@ (8003cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	015b      	lsls	r3, r3, #5
 8003bdc:	0d1b      	lsrs	r3, r3, #20
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003be6:	e054      	b.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d050      	beq.n	8003c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bf0:	f7fd f9fa 	bl	8000fe8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d902      	bls.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d13d      	bne.n	8003c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c1e:	d111      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c28:	d004      	beq.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c32:	d107      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4c:	d10f      	bne.n	8003c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e017      	b.n	8003cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d19b      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000020 	.word	0x20000020

08003cc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	@ 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cd2:	f7fd f989 	bl	8000fe8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003ce2:	f7fd f981 	bl	8000fe8 <HAL_GetTick>
 8003ce6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8003de8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00da      	lsls	r2, r3, #3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	0d1b      	lsrs	r3, r3, #20
 8003d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d08:	e060      	b.n	8003dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003d10:	d107      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d104      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d050      	beq.n	8003dcc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d2a:	f7fd f95d 	bl	8000fe8 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d902      	bls.n	8003d40 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d13d      	bne.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d58:	d111      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d62:	d004      	beq.n	8003d6e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6c:	d107      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d86:	d10f      	bne.n	8003da8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e010      	b.n	8003dde <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d196      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3728      	adds	r7, #40	@ 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000020 	.word	0x20000020

08003dec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e00:	d111      	bne.n	8003e26 <SPI_EndRxTransaction+0x3a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0a:	d004      	beq.n	8003e16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e14:	d107      	bne.n	8003e26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e2e:	d112      	bne.n	8003e56 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	2180      	movs	r1, #128	@ 0x80
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff feb8 	bl	8003bb0 <SPI_WaitFlagStateUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d021      	beq.n	8003e8a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e03d      	b.n	8003ed2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e56:	4b21      	ldr	r3, [pc, #132]	@ (8003edc <SPI_EndRxTransaction+0xf0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ee0 <SPI_EndRxTransaction+0xf4>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	0d5b      	lsrs	r3, r3, #21
 8003e62:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e82:	2b80      	cmp	r3, #128	@ 0x80
 8003e84:	d0f2      	beq.n	8003e6c <SPI_EndRxTransaction+0x80>
 8003e86:	e000      	b.n	8003e8a <SPI_EndRxTransaction+0x9e>
        break;
 8003e88:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e92:	d11d      	bne.n	8003ed0 <SPI_EndRxTransaction+0xe4>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9c:	d004      	beq.n	8003ea8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea6:	d113      	bne.n	8003ed0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff ff03 	bl	8003cc0 <SPI_WaitFifoStateUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e000      	b.n	8003ed2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000020 	.word	0x20000020
 8003ee0:	165e9f81 	.word	0x165e9f81

08003ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff fedf 	bl	8003cc0 <SPI_WaitFifoStateUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e046      	b.n	8003fa6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f18:	4b25      	ldr	r3, [pc, #148]	@ (8003fb0 <SPI_EndRxTxTransaction+0xcc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	@ (8003fb4 <SPI_EndRxTxTransaction+0xd0>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0d5b      	lsrs	r3, r3, #21
 8003f24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f28:	fb02 f303 	mul.w	r3, r2, r3
 8003f2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f36:	d112      	bne.n	8003f5e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2180      	movs	r1, #128	@ 0x80
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff fe34 	bl	8003bb0 <SPI_WaitFlagStateUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e023      	b.n	8003fa6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f74:	2b80      	cmp	r3, #128	@ 0x80
 8003f76:	d0f2      	beq.n	8003f5e <SPI_EndRxTxTransaction+0x7a>
 8003f78:	e000      	b.n	8003f7c <SPI_EndRxTxTransaction+0x98>
        break;
 8003f7a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff fe99 	bl	8003cc0 <SPI_WaitFifoStateUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000020 	.word	0x20000020
 8003fb4:	165e9f81 	.word	0x165e9f81

08003fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e040      	b.n	800404c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fc fe58 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2224      	movs	r2, #36	@ 0x24
 8003fe4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fbc2 	bl	8004780 <UART_SetConfig>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e022      	b.n	800404c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fe1a 	bl	8004c48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fea1 	bl	8004d8c <UART_CheckIdleState>
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004068:	2b20      	cmp	r3, #32
 800406a:	d171      	bne.n	8004150 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_UART_Transmit+0x24>
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e06a      	b.n	8004152 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2221      	movs	r2, #33	@ 0x21
 8004088:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800408a:	f7fc ffad 	bl	8000fe8 <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a8:	d108      	bne.n	80040bc <HAL_UART_Transmit+0x68>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d104      	bne.n	80040bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e003      	b.n	80040c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040c4:	e02c      	b.n	8004120 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2180      	movs	r1, #128	@ 0x80
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fea8 	bl	8004e26 <UART_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e038      	b.n	8004152 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10b      	bne.n	80040fe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	3302      	adds	r3, #2
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	e007      	b.n	800410e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	3301      	adds	r3, #1
 800410c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1cc      	bne.n	80040c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2200      	movs	r2, #0
 8004134:	2140      	movs	r1, #64	@ 0x40
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fe75 	bl	8004e26 <UART_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e005      	b.n	8004152 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b0ba      	sub	sp, #232	@ 0xe8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004182:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004186:	f640 030f 	movw	r3, #2063	@ 0x80f
 800418a:	4013      	ands	r3, r2
 800418c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d115      	bne.n	80041c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00f      	beq.n	80041c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 82ac 	beq.w	8004712 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
      }
      return;
 80041c2:	e2a6      	b.n	8004712 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8117 	beq.w	80043fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80041de:	4b85      	ldr	r3, [pc, #532]	@ (80043f4 <HAL_UART_IRQHandler+0x298>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 810a 	beq.w	80043fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d011      	beq.n	8004218 <HAL_UART_IRQHandler+0xbc>
 80041f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2201      	movs	r2, #1
 8004206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800420e:	f043 0201 	orr.w	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d011      	beq.n	8004248 <HAL_UART_IRQHandler+0xec>
 8004224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00b      	beq.n	8004248 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2202      	movs	r2, #2
 8004236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800423e:	f043 0204 	orr.w	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d011      	beq.n	8004278 <HAL_UART_IRQHandler+0x11c>
 8004254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2204      	movs	r2, #4
 8004266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800426e:	f043 0202 	orr.w	r2, r3, #2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d017      	beq.n	80042b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004294:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2208      	movs	r2, #8
 80042a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042aa:	f043 0208 	orr.w	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <HAL_UART_IRQHandler+0x18a>
 80042c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042dc:	f043 0220 	orr.w	r2, r3, #32
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8212 	beq.w	8004716 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004320:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432e:	2b40      	cmp	r3, #64	@ 0x40
 8004330:	d005      	beq.n	800433e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004336:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800433a:	2b00      	cmp	r3, #0
 800433c:	d04f      	beq.n	80043de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fe37 	bl	8004fb2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434e:	2b40      	cmp	r3, #64	@ 0x40
 8004350:	d141      	bne.n	80043d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3308      	adds	r3, #8
 8004358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800436c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3308      	adds	r3, #8
 800437a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800437e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004382:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800438a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1d9      	bne.n	8004352 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d013      	beq.n	80043ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043aa:	4a13      	ldr	r2, [pc, #76]	@ (80043f8 <HAL_UART_IRQHandler+0x29c>)
 80043ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd f8d8 	bl	8001568 <HAL_DMA_Abort_IT>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d017      	beq.n	80043ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043c8:	4610      	mov	r0, r2
 80043ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043cc:	e00f      	b.n	80043ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f9b6 	bl	8004740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e00b      	b.n	80043ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9b2 	bl	8004740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e007      	b.n	80043ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9ae 	bl	8004740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80043ec:	e193      	b.n	8004716 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ee:	bf00      	nop
    return;
 80043f0:	e191      	b.n	8004716 <HAL_UART_IRQHandler+0x5ba>
 80043f2:	bf00      	nop
 80043f4:	04000120 	.word	0x04000120
 80043f8:	0800507b 	.word	0x0800507b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 814c 	bne.w	800469e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8145 	beq.w	800469e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 813e 	beq.w	800469e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2210      	movs	r2, #16
 8004428:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004434:	2b40      	cmp	r3, #64	@ 0x40
 8004436:	f040 80b6 	bne.w	80045a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004446:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8165 	beq.w	800471a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800445a:	429a      	cmp	r2, r3
 800445c:	f080 815d 	bcs.w	800471a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004466:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004474:	f000 8086 	beq.w	8004584 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800448c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80044a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1da      	bne.n	8004478 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3308      	adds	r3, #8
 80044c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e1      	bne.n	80044c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3308      	adds	r3, #8
 8004504:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800450e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3308      	adds	r3, #8
 800451e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004522:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004524:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004528:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e3      	bne.n	80044fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004566:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004568:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800456c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e4      	bne.n	8004544 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc ff82 	bl	8001488 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004596:	b29b      	uxth	r3, r3
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	b29b      	uxth	r3, r3
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f8d8 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045a4:	e0b9      	b.n	800471a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80ab 	beq.w	800471e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80045c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a6 	beq.w	800471e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e4      	bne.n	80045d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3308      	adds	r3, #8
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	623b      	str	r3, [r7, #32]
   return(result);
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3308      	adds	r3, #8
 8004628:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800462c:	633a      	str	r2, [r7, #48]	@ 0x30
 800462e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800463a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e3      	bne.n	8004608 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	60fb      	str	r3, [r7, #12]
   return(result);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f023 0310 	bic.w	r3, r3, #16
 8004668:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	69b9      	ldr	r1, [r7, #24]
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	617b      	str	r3, [r7, #20]
   return(result);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e4      	bne.n	8004654 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f85c 	bl	8004754 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800469c:	e03f      	b.n	800471e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <HAL_UART_IRQHandler+0x56c>
 80046aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80046be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f853 	bl	800476c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046c6:	e02d      	b.n	8004724 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00e      	beq.n	80046f2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01c      	beq.n	8004722 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
    }
    return;
 80046f0:	e017      	b.n	8004722 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d012      	beq.n	8004724 <HAL_UART_IRQHandler+0x5c8>
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fccb 	bl	80050a6 <UART_EndTransmit_IT>
    return;
 8004710:	e008      	b.n	8004724 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004712:	bf00      	nop
 8004714:	e006      	b.n	8004724 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004716:	bf00      	nop
 8004718:	e004      	b.n	8004724 <HAL_UART_IRQHandler+0x5c8>
      return;
 800471a:	bf00      	nop
 800471c:	e002      	b.n	8004724 <HAL_UART_IRQHandler+0x5c8>
      return;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004722:	bf00      	nop
  }

}
 8004724:	37e8      	adds	r7, #232	@ 0xe8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop

0800472c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4ba6      	ldr	r3, [pc, #664]	@ (8004a44 <UART_SetConfig+0x2c4>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	6979      	ldr	r1, [r7, #20]
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a94      	ldr	r2, [pc, #592]	@ (8004a48 <UART_SetConfig+0x2c8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d120      	bne.n	800483e <UART_SetConfig+0xbe>
 80047fc:	4b93      	ldr	r3, [pc, #588]	@ (8004a4c <UART_SetConfig+0x2cc>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b03      	cmp	r3, #3
 8004808:	d816      	bhi.n	8004838 <UART_SetConfig+0xb8>
 800480a:	a201      	add	r2, pc, #4	@ (adr r2, 8004810 <UART_SetConfig+0x90>)
 800480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004810:	08004821 	.word	0x08004821
 8004814:	0800482d 	.word	0x0800482d
 8004818:	08004827 	.word	0x08004827
 800481c:	08004833 	.word	0x08004833
 8004820:	2301      	movs	r3, #1
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e150      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004826:	2302      	movs	r3, #2
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e14d      	b.n	8004ac8 <UART_SetConfig+0x348>
 800482c:	2304      	movs	r3, #4
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e14a      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004832:	2308      	movs	r3, #8
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e147      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004838:	2310      	movs	r3, #16
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e144      	b.n	8004ac8 <UART_SetConfig+0x348>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a83      	ldr	r2, [pc, #524]	@ (8004a50 <UART_SetConfig+0x2d0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d132      	bne.n	80048ae <UART_SetConfig+0x12e>
 8004848:	4b80      	ldr	r3, [pc, #512]	@ (8004a4c <UART_SetConfig+0x2cc>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d828      	bhi.n	80048a8 <UART_SetConfig+0x128>
 8004856:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <UART_SetConfig+0xdc>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	08004891 	.word	0x08004891
 8004860:	080048a9 	.word	0x080048a9
 8004864:	080048a9 	.word	0x080048a9
 8004868:	080048a9 	.word	0x080048a9
 800486c:	0800489d 	.word	0x0800489d
 8004870:	080048a9 	.word	0x080048a9
 8004874:	080048a9 	.word	0x080048a9
 8004878:	080048a9 	.word	0x080048a9
 800487c:	08004897 	.word	0x08004897
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048a9 	.word	0x080048a9
 8004888:	080048a9 	.word	0x080048a9
 800488c:	080048a3 	.word	0x080048a3
 8004890:	2300      	movs	r3, #0
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e118      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004896:	2302      	movs	r3, #2
 8004898:	77fb      	strb	r3, [r7, #31]
 800489a:	e115      	b.n	8004ac8 <UART_SetConfig+0x348>
 800489c:	2304      	movs	r3, #4
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e112      	b.n	8004ac8 <UART_SetConfig+0x348>
 80048a2:	2308      	movs	r3, #8
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e10f      	b.n	8004ac8 <UART_SetConfig+0x348>
 80048a8:	2310      	movs	r3, #16
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e10c      	b.n	8004ac8 <UART_SetConfig+0x348>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a68      	ldr	r2, [pc, #416]	@ (8004a54 <UART_SetConfig+0x2d4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d120      	bne.n	80048fa <UART_SetConfig+0x17a>
 80048b8:	4b64      	ldr	r3, [pc, #400]	@ (8004a4c <UART_SetConfig+0x2cc>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048c2:	2b30      	cmp	r3, #48	@ 0x30
 80048c4:	d013      	beq.n	80048ee <UART_SetConfig+0x16e>
 80048c6:	2b30      	cmp	r3, #48	@ 0x30
 80048c8:	d814      	bhi.n	80048f4 <UART_SetConfig+0x174>
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d009      	beq.n	80048e2 <UART_SetConfig+0x162>
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d810      	bhi.n	80048f4 <UART_SetConfig+0x174>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <UART_SetConfig+0x15c>
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d006      	beq.n	80048e8 <UART_SetConfig+0x168>
 80048da:	e00b      	b.n	80048f4 <UART_SetConfig+0x174>
 80048dc:	2300      	movs	r3, #0
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e0f2      	b.n	8004ac8 <UART_SetConfig+0x348>
 80048e2:	2302      	movs	r3, #2
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e0ef      	b.n	8004ac8 <UART_SetConfig+0x348>
 80048e8:	2304      	movs	r3, #4
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e0ec      	b.n	8004ac8 <UART_SetConfig+0x348>
 80048ee:	2308      	movs	r3, #8
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e0e9      	b.n	8004ac8 <UART_SetConfig+0x348>
 80048f4:	2310      	movs	r3, #16
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e0e6      	b.n	8004ac8 <UART_SetConfig+0x348>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a56      	ldr	r2, [pc, #344]	@ (8004a58 <UART_SetConfig+0x2d8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d120      	bne.n	8004946 <UART_SetConfig+0x1c6>
 8004904:	4b51      	ldr	r3, [pc, #324]	@ (8004a4c <UART_SetConfig+0x2cc>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800490e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004910:	d013      	beq.n	800493a <UART_SetConfig+0x1ba>
 8004912:	2bc0      	cmp	r3, #192	@ 0xc0
 8004914:	d814      	bhi.n	8004940 <UART_SetConfig+0x1c0>
 8004916:	2b80      	cmp	r3, #128	@ 0x80
 8004918:	d009      	beq.n	800492e <UART_SetConfig+0x1ae>
 800491a:	2b80      	cmp	r3, #128	@ 0x80
 800491c:	d810      	bhi.n	8004940 <UART_SetConfig+0x1c0>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <UART_SetConfig+0x1a8>
 8004922:	2b40      	cmp	r3, #64	@ 0x40
 8004924:	d006      	beq.n	8004934 <UART_SetConfig+0x1b4>
 8004926:	e00b      	b.n	8004940 <UART_SetConfig+0x1c0>
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e0cc      	b.n	8004ac8 <UART_SetConfig+0x348>
 800492e:	2302      	movs	r3, #2
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e0c9      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004934:	2304      	movs	r3, #4
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e0c6      	b.n	8004ac8 <UART_SetConfig+0x348>
 800493a:	2308      	movs	r3, #8
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e0c3      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004940:	2310      	movs	r3, #16
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e0c0      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a44      	ldr	r2, [pc, #272]	@ (8004a5c <UART_SetConfig+0x2dc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d125      	bne.n	800499c <UART_SetConfig+0x21c>
 8004950:	4b3e      	ldr	r3, [pc, #248]	@ (8004a4c <UART_SetConfig+0x2cc>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800495e:	d017      	beq.n	8004990 <UART_SetConfig+0x210>
 8004960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004964:	d817      	bhi.n	8004996 <UART_SetConfig+0x216>
 8004966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800496a:	d00b      	beq.n	8004984 <UART_SetConfig+0x204>
 800496c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004970:	d811      	bhi.n	8004996 <UART_SetConfig+0x216>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <UART_SetConfig+0x1fe>
 8004976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800497a:	d006      	beq.n	800498a <UART_SetConfig+0x20a>
 800497c:	e00b      	b.n	8004996 <UART_SetConfig+0x216>
 800497e:	2300      	movs	r3, #0
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e0a1      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004984:	2302      	movs	r3, #2
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e09e      	b.n	8004ac8 <UART_SetConfig+0x348>
 800498a:	2304      	movs	r3, #4
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e09b      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004990:	2308      	movs	r3, #8
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e098      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004996:	2310      	movs	r3, #16
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e095      	b.n	8004ac8 <UART_SetConfig+0x348>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004a60 <UART_SetConfig+0x2e0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d125      	bne.n	80049f2 <UART_SetConfig+0x272>
 80049a6:	4b29      	ldr	r3, [pc, #164]	@ (8004a4c <UART_SetConfig+0x2cc>)
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049b4:	d017      	beq.n	80049e6 <UART_SetConfig+0x266>
 80049b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049ba:	d817      	bhi.n	80049ec <UART_SetConfig+0x26c>
 80049bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c0:	d00b      	beq.n	80049da <UART_SetConfig+0x25a>
 80049c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c6:	d811      	bhi.n	80049ec <UART_SetConfig+0x26c>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <UART_SetConfig+0x254>
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d0:	d006      	beq.n	80049e0 <UART_SetConfig+0x260>
 80049d2:	e00b      	b.n	80049ec <UART_SetConfig+0x26c>
 80049d4:	2301      	movs	r3, #1
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e076      	b.n	8004ac8 <UART_SetConfig+0x348>
 80049da:	2302      	movs	r3, #2
 80049dc:	77fb      	strb	r3, [r7, #31]
 80049de:	e073      	b.n	8004ac8 <UART_SetConfig+0x348>
 80049e0:	2304      	movs	r3, #4
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e070      	b.n	8004ac8 <UART_SetConfig+0x348>
 80049e6:	2308      	movs	r3, #8
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e06d      	b.n	8004ac8 <UART_SetConfig+0x348>
 80049ec:	2310      	movs	r3, #16
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e06a      	b.n	8004ac8 <UART_SetConfig+0x348>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a64 <UART_SetConfig+0x2e4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d138      	bne.n	8004a6e <UART_SetConfig+0x2ee>
 80049fc:	4b13      	ldr	r3, [pc, #76]	@ (8004a4c <UART_SetConfig+0x2cc>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a0a:	d017      	beq.n	8004a3c <UART_SetConfig+0x2bc>
 8004a0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a10:	d82a      	bhi.n	8004a68 <UART_SetConfig+0x2e8>
 8004a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a16:	d00b      	beq.n	8004a30 <UART_SetConfig+0x2b0>
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a1c:	d824      	bhi.n	8004a68 <UART_SetConfig+0x2e8>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <UART_SetConfig+0x2aa>
 8004a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a26:	d006      	beq.n	8004a36 <UART_SetConfig+0x2b6>
 8004a28:	e01e      	b.n	8004a68 <UART_SetConfig+0x2e8>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e04b      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004a30:	2302      	movs	r3, #2
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e048      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004a36:	2304      	movs	r3, #4
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e045      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e042      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004a42:	bf00      	nop
 8004a44:	efff69f3 	.word	0xefff69f3
 8004a48:	40011000 	.word	0x40011000
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	40004400 	.word	0x40004400
 8004a54:	40004800 	.word	0x40004800
 8004a58:	40004c00 	.word	0x40004c00
 8004a5c:	40005000 	.word	0x40005000
 8004a60:	40011400 	.word	0x40011400
 8004a64:	40007800 	.word	0x40007800
 8004a68:	2310      	movs	r3, #16
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e02c      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a72      	ldr	r2, [pc, #456]	@ (8004c3c <UART_SetConfig+0x4bc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d125      	bne.n	8004ac4 <UART_SetConfig+0x344>
 8004a78:	4b71      	ldr	r3, [pc, #452]	@ (8004c40 <UART_SetConfig+0x4c0>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a82:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a86:	d017      	beq.n	8004ab8 <UART_SetConfig+0x338>
 8004a88:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a8c:	d817      	bhi.n	8004abe <UART_SetConfig+0x33e>
 8004a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a92:	d00b      	beq.n	8004aac <UART_SetConfig+0x32c>
 8004a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a98:	d811      	bhi.n	8004abe <UART_SetConfig+0x33e>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <UART_SetConfig+0x326>
 8004a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004aa2:	d006      	beq.n	8004ab2 <UART_SetConfig+0x332>
 8004aa4:	e00b      	b.n	8004abe <UART_SetConfig+0x33e>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e00d      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004aac:	2302      	movs	r3, #2
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e00a      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e007      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e004      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004abe:	2310      	movs	r3, #16
 8004ac0:	77fb      	strb	r3, [r7, #31]
 8004ac2:	e001      	b.n	8004ac8 <UART_SetConfig+0x348>
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ad0:	d15b      	bne.n	8004b8a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004ad2:	7ffb      	ldrb	r3, [r7, #31]
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d828      	bhi.n	8004b2a <UART_SetConfig+0x3aa>
 8004ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <UART_SetConfig+0x360>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b05 	.word	0x08004b05
 8004ae4:	08004b0d 	.word	0x08004b0d
 8004ae8:	08004b15 	.word	0x08004b15
 8004aec:	08004b2b 	.word	0x08004b2b
 8004af0:	08004b1b 	.word	0x08004b1b
 8004af4:	08004b2b 	.word	0x08004b2b
 8004af8:	08004b2b 	.word	0x08004b2b
 8004afc:	08004b2b 	.word	0x08004b2b
 8004b00:	08004b23 	.word	0x08004b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b04:	f7fd fe46 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8004b08:	61b8      	str	r0, [r7, #24]
        break;
 8004b0a:	e013      	b.n	8004b34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b0c:	f7fd fe56 	bl	80027bc <HAL_RCC_GetPCLK2Freq>
 8004b10:	61b8      	str	r0, [r7, #24]
        break;
 8004b12:	e00f      	b.n	8004b34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b14:	4b4b      	ldr	r3, [pc, #300]	@ (8004c44 <UART_SetConfig+0x4c4>)
 8004b16:	61bb      	str	r3, [r7, #24]
        break;
 8004b18:	e00c      	b.n	8004b34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1a:	f7fd fd2b 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8004b1e:	61b8      	str	r0, [r7, #24]
        break;
 8004b20:	e008      	b.n	8004b34 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b26:	61bb      	str	r3, [r7, #24]
        break;
 8004b28:	e004      	b.n	8004b34 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	77bb      	strb	r3, [r7, #30]
        break;
 8004b32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d074      	beq.n	8004c24 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	005a      	lsls	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b0f      	cmp	r3, #15
 8004b54:	d916      	bls.n	8004b84 <UART_SetConfig+0x404>
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b5c:	d212      	bcs.n	8004b84 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f023 030f 	bic.w	r3, r3, #15
 8004b66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	89fb      	ldrh	r3, [r7, #14]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	89fa      	ldrh	r2, [r7, #14]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	e04f      	b.n	8004c24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	77bb      	strb	r3, [r7, #30]
 8004b88:	e04c      	b.n	8004c24 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b8a:	7ffb      	ldrb	r3, [r7, #31]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d828      	bhi.n	8004be2 <UART_SetConfig+0x462>
 8004b90:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <UART_SetConfig+0x418>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004bbd 	.word	0x08004bbd
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	08004bcd 	.word	0x08004bcd
 8004ba4:	08004be3 	.word	0x08004be3
 8004ba8:	08004bd3 	.word	0x08004bd3
 8004bac:	08004be3 	.word	0x08004be3
 8004bb0:	08004be3 	.word	0x08004be3
 8004bb4:	08004be3 	.word	0x08004be3
 8004bb8:	08004bdb 	.word	0x08004bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bbc:	f7fd fdea 	bl	8002794 <HAL_RCC_GetPCLK1Freq>
 8004bc0:	61b8      	str	r0, [r7, #24]
        break;
 8004bc2:	e013      	b.n	8004bec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bc4:	f7fd fdfa 	bl	80027bc <HAL_RCC_GetPCLK2Freq>
 8004bc8:	61b8      	str	r0, [r7, #24]
        break;
 8004bca:	e00f      	b.n	8004bec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c44 <UART_SetConfig+0x4c4>)
 8004bce:	61bb      	str	r3, [r7, #24]
        break;
 8004bd0:	e00c      	b.n	8004bec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd2:	f7fd fccf 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8004bd6:	61b8      	str	r0, [r7, #24]
        break;
 8004bd8:	e008      	b.n	8004bec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bde:	61bb      	str	r3, [r7, #24]
        break;
 8004be0:	e004      	b.n	8004bec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	77bb      	strb	r3, [r7, #30]
        break;
 8004bea:	bf00      	nop
    }

    if (pclk != 0U)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d018      	beq.n	8004c24 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	085a      	lsrs	r2, r3, #1
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	441a      	add	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b0f      	cmp	r3, #15
 8004c0a:	d909      	bls.n	8004c20 <UART_SetConfig+0x4a0>
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c12:	d205      	bcs.n	8004c20 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60da      	str	r2, [r3, #12]
 8004c1e:	e001      	b.n	8004c24 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c30:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40007c00 	.word	0x40007c00
 8004c40:	40023800 	.word	0x40023800
 8004c44:	00f42400 	.word	0x00f42400

08004c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01a      	beq.n	8004d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d46:	d10a      	bne.n	8004d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d9c:	f7fc f924 	bl	8000fe8 <HAL_GetTick>
 8004da0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d10e      	bne.n	8004dce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f831 	bl	8004e26 <UART_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e027      	b.n	8004e1e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d10e      	bne.n	8004dfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ddc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f81b 	bl	8004e26 <UART_WaitOnFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e011      	b.n	8004e1e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b09c      	sub	sp, #112	@ 0x70
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	4613      	mov	r3, r2
 8004e34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e36:	e0a7      	b.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	f000 80a3 	beq.w	8004f88 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fc f8d1 	bl	8000fe8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d13f      	bne.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e68:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e78:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e6      	bne.n	8004e58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004eaa:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004eac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e068      	b.n	8004faa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d050      	beq.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ef4:	d148      	bne.n	8004f88 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004efe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f20:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e6      	bne.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	613b      	str	r3, [r7, #16]
   return(result);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3308      	adds	r3, #8
 8004f50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004f52:	623a      	str	r2, [r7, #32]
 8004f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	69f9      	ldr	r1, [r7, #28]
 8004f58:	6a3a      	ldr	r2, [r7, #32]
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e5      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e010      	b.n	8004faa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	f43f af48 	beq.w	8004e38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3770      	adds	r7, #112	@ 0x70
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b095      	sub	sp, #84	@ 0x54
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e6      	bne.n	8004fba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3308      	adds	r3, #8
 800500a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800500c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005024:	2b01      	cmp	r3, #1
 8005026:	d118      	bne.n	800505a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	60bb      	str	r3, [r7, #8]
   return(result);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f023 0310 	bic.w	r3, r3, #16
 800503c:	647b      	str	r3, [r7, #68]	@ 0x44
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005046:	61bb      	str	r3, [r7, #24]
 8005048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6979      	ldr	r1, [r7, #20]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	613b      	str	r3, [r7, #16]
   return(result);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e6      	bne.n	8005028 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800506e:	bf00      	nop
 8005070:	3754      	adds	r7, #84	@ 0x54
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005086:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff fb51 	bl	8004740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b088      	sub	sp, #32
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	61bb      	str	r3, [r7, #24]
 80050ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6979      	ldr	r1, [r7, #20]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	613b      	str	r3, [r7, #16]
   return(result);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e6      	bne.n	80050ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fb1d 	bl	800472c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f2:	bf00      	nop
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <memset>:
 80050fa:	4402      	add	r2, r0
 80050fc:	4603      	mov	r3, r0
 80050fe:	4293      	cmp	r3, r2
 8005100:	d100      	bne.n	8005104 <memset+0xa>
 8005102:	4770      	bx	lr
 8005104:	f803 1b01 	strb.w	r1, [r3], #1
 8005108:	e7f9      	b.n	80050fe <memset+0x4>
	...

0800510c <__libc_init_array>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	4d0d      	ldr	r5, [pc, #52]	@ (8005144 <__libc_init_array+0x38>)
 8005110:	4c0d      	ldr	r4, [pc, #52]	@ (8005148 <__libc_init_array+0x3c>)
 8005112:	1b64      	subs	r4, r4, r5
 8005114:	10a4      	asrs	r4, r4, #2
 8005116:	2600      	movs	r6, #0
 8005118:	42a6      	cmp	r6, r4
 800511a:	d109      	bne.n	8005130 <__libc_init_array+0x24>
 800511c:	4d0b      	ldr	r5, [pc, #44]	@ (800514c <__libc_init_array+0x40>)
 800511e:	4c0c      	ldr	r4, [pc, #48]	@ (8005150 <__libc_init_array+0x44>)
 8005120:	f000 f818 	bl	8005154 <_init>
 8005124:	1b64      	subs	r4, r4, r5
 8005126:	10a4      	asrs	r4, r4, #2
 8005128:	2600      	movs	r6, #0
 800512a:	42a6      	cmp	r6, r4
 800512c:	d105      	bne.n	800513a <__libc_init_array+0x2e>
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	f855 3b04 	ldr.w	r3, [r5], #4
 8005134:	4798      	blx	r3
 8005136:	3601      	adds	r6, #1
 8005138:	e7ee      	b.n	8005118 <__libc_init_array+0xc>
 800513a:	f855 3b04 	ldr.w	r3, [r5], #4
 800513e:	4798      	blx	r3
 8005140:	3601      	adds	r6, #1
 8005142:	e7f2      	b.n	800512a <__libc_init_array+0x1e>
 8005144:	08005198 	.word	0x08005198
 8005148:	08005198 	.word	0x08005198
 800514c:	08005198 	.word	0x08005198
 8005150:	0800519c 	.word	0x0800519c

08005154 <_init>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr

08005160 <_fini>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	bf00      	nop
 8005164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005166:	bc08      	pop	{r3}
 8005168:	469e      	mov	lr, r3
 800516a:	4770      	bx	lr
