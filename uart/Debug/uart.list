
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a54  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08008c54  08008c54  00009c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd8  08008dd8  0000a1a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008dd8  08008dd8  00009dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de0  08008de0  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de0  08008de0  00009de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de4  08008de4  00009de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008de8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08008e48  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008ee8  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005d30  200001a0  08008f88  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005ed0  08008f88  0000aed0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022067  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000041be  00000000  00000000  0002c235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001950  00000000  00000000  000303f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001384  00000000  00000000  00031d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000072db  00000000  00000000  000330cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d00f  00000000  00000000  0003a3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00109f2c  00000000  00000000  000573b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000086  00000000  00000000  001612e2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d5c  00000000  00000000  00161368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007a  00000000  00000000  001680c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008c3c 	.word	0x08008c3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008c3c 	.word	0x08008c3c

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001bc 	.word	0x200001bc

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005ca:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <_DoInit+0xa0>)
 80005cc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005ce:	22a8      	movs	r2, #168	@ 0xa8
 80005d0:	2100      	movs	r1, #0
 80005d2:	6838      	ldr	r0, [r7, #0]
 80005d4:	f008 fa4a 	bl	8008a6c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2203      	movs	r2, #3
 80005dc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2203      	movs	r2, #3
 80005e2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <_DoInit+0xa4>)
 80005e8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	4a1f      	ldr	r2, [pc, #124]	@ (800066c <_DoInit+0xa8>)
 80005ee:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005f6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	4a16      	ldr	r2, [pc, #88]	@ (8000668 <_DoInit+0xa4>)
 800060e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <_DoInit+0xac>)
 8000614:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2210      	movs	r2, #16
 800061a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800062e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	e00c      	b.n	8000652 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f1c3 030f 	rsb	r3, r3, #15
 800063e:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <_DoInit+0xb0>)
 8000640:	5cd1      	ldrb	r1, [r2, r3]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	460a      	mov	r2, r1
 800064a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d9ef      	bls.n	8000638 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000658:	f3bf 8f5f 	dmb	sy
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200001bc 	.word	0x200001bc
 8000668:	08008c54 	.word	0x08008c54
 800066c:	20000264 	.word	0x20000264
 8000670:	20000664 	.word	0x20000664
 8000674:	08008d18 	.word	0x08008d18

08000678 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	@ 0x30
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000684:	4b3e      	ldr	r3, [pc, #248]	@ (8000780 <SEGGER_RTT_ReadNoLock+0x108>)
 8000686:	623b      	str	r3, [r7, #32]
 8000688:	6a3b      	ldr	r3, [r7, #32]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <SEGGER_RTT_ReadNoLock+0x1e>
 8000692:	f7ff ff97 	bl	80005c4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	3360      	adds	r3, #96	@ 0x60
 80006a2:	4a37      	ldr	r2, [pc, #220]	@ (8000780 <SEGGER_RTT_ReadNoLock+0x108>)
 80006a4:	4413      	add	r3, r2
 80006a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d92b      	bls.n	800071c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4293      	cmp	r3, r2
 80006d4:	bf28      	it	cs
 80006d6:	4613      	movcs	r3, r2
 80006d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	685a      	ldr	r2, [r3, #4]
 80006de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006e0:	4413      	add	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	6939      	ldr	r1, [r7, #16]
 80006e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80006ea:	f008 fa43 	bl	8008b74 <memcpy>
    NumBytesRead += NumBytesRem;
 80006ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	4413      	add	r3, r2
 80006f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80006f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	4413      	add	r3, r2
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	4413      	add	r3, r2
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000714:	429a      	cmp	r2, r3
 8000716:	d101      	bne.n	800071c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4293      	cmp	r3, r2
 800072a:	bf28      	it	cs
 800072c:	4613      	movcs	r3, r2
 800072e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d019      	beq.n	800076a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800073c:	4413      	add	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	6939      	ldr	r1, [r7, #16]
 8000744:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000746:	f008 fa15 	bl	8008b74 <memcpy>
    NumBytesRead += NumBytesRem;
 800074a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	4413      	add	r3, r2
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8000752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	4413      	add	r3, r2
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	4413      	add	r3, r2
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800076a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000774:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000778:	4618      	mov	r0, r3
 800077a:	3730      	adds	r7, #48	@ 0x30
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200001bc 	.word	0x200001bc

08000784 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8000792:	4b3d      	ldr	r3, [pc, #244]	@ (8000888 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8000794:	61bb      	str	r3, [r7, #24]
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d101      	bne.n	80007a4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007a0:	f7ff ff10 	bl	80005c4 <_DoInit>
  SEGGER_RTT_LOCK();
 80007a4:	f3ef 8311 	mrs	r3, BASEPRI
 80007a8:	f04f 0120 	mov.w	r1, #32
 80007ac:	f381 8811 	msr	BASEPRI, r1
 80007b0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007b2:	4b35      	ldr	r3, [pc, #212]	@ (8000888 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007b4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ba:	6939      	ldr	r1, [r7, #16]
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	440b      	add	r3, r1
 80007ca:	3304      	adds	r3, #4
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d008      	beq.n	80007e4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3301      	adds	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	69fa      	ldr	r2, [r7, #28]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dbeb      	blt.n	80007ba <SEGGER_RTT_AllocUpBuffer+0x36>
 80007e2:	e000      	b.n	80007e6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007e4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	da3f      	bge.n	8000870 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80007f0:	6939      	ldr	r1, [r7, #16]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3304      	adds	r3, #4
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800081a:	6939      	ldr	r1, [r7, #16]
 800081c:	69fa      	ldr	r2, [r7, #28]
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3320      	adds	r3, #32
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3328      	adds	r3, #40	@ 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3324      	adds	r3, #36	@ 0x24
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	332c      	adds	r3, #44	@ 0x2c
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800086a:	f3bf 8f5f 	dmb	sy
 800086e:	e002      	b.n	8000876 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800087c:	69fb      	ldr	r3, [r7, #28]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200001bc 	.word	0x200001bc

0800088c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008a8:	f7ff fe8c 	bl	80005c4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008ae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d82c      	bhi.n	8000910 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008b6:	f3ef 8311 	mrs	r3, BASEPRI
 80008ba:	f04f 0120 	mov.w	r1, #32
 80008be:	f381 8811 	msr	BASEPRI, r1
 80008c2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	3360      	adds	r3, #96	@ 0x60
 80008d0:	69fa      	ldr	r2, [r7, #28]
 80008d2:	4413      	add	r3, r2
 80008d4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00e      	beq.n	80008fa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008fe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000900:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
 800090e:	e002      	b.n	8000916 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8000916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000918:	4618      	mov	r0, r3
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200001bc 	.word	0x200001bc

08000924 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60fa      	str	r2, [r7, #12]
 800093a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b80      	cmp	r3, #128	@ 0x80
 8000940:	d90a      	bls.n	8000958 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000942:	2380      	movs	r3, #128	@ 0x80
 8000944:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000946:	e007      	b.n	8000958 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	1c53      	adds	r3, r2, #1
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	1c59      	adds	r1, r3, #1
 8000952:	60f9      	str	r1, [r7, #12]
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <_EncodeStr+0x46>
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1ee      	bne.n	8000948 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	b2da      	uxtb	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	371c      	adds	r7, #28
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3307      	adds	r3, #7
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009a2:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <_HandleIncomingPacket+0xd8>)
 80009a4:	7e1b      	ldrb	r3, [r3, #24]
 80009a6:	4618      	mov	r0, r3
 80009a8:	1cfb      	adds	r3, r7, #3
 80009aa:	2201      	movs	r2, #1
 80009ac:	4619      	mov	r1, r3
 80009ae:	f7ff fe63 	bl	8000678 <SEGGER_RTT_ReadNoLock>
 80009b2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d057      	beq.n	8000a6a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	2b80      	cmp	r3, #128	@ 0x80
 80009be:	d031      	beq.n	8000a24 <_HandleIncomingPacket+0x88>
 80009c0:	2b80      	cmp	r3, #128	@ 0x80
 80009c2:	dc40      	bgt.n	8000a46 <_HandleIncomingPacket+0xaa>
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	dc15      	bgt.n	80009f4 <_HandleIncomingPacket+0x58>
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dd3c      	ble.n	8000a46 <_HandleIncomingPacket+0xaa>
 80009cc:	3b01      	subs	r3, #1
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d839      	bhi.n	8000a46 <_HandleIncomingPacket+0xaa>
 80009d2:	a201      	add	r2, pc, #4	@ (adr r2, 80009d8 <_HandleIncomingPacket+0x3c>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	080009fb 	.word	0x080009fb
 80009dc:	08000a01 	.word	0x08000a01
 80009e0:	08000a07 	.word	0x08000a07
 80009e4:	08000a0d 	.word	0x08000a0d
 80009e8:	08000a13 	.word	0x08000a13
 80009ec:	08000a19 	.word	0x08000a19
 80009f0:	08000a1f 	.word	0x08000a1f
 80009f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80009f6:	d033      	beq.n	8000a60 <_HandleIncomingPacket+0xc4>
 80009f8:	e025      	b.n	8000a46 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80009fa:	f000 fbe3 	bl	80011c4 <SEGGER_SYSVIEW_Start>
      break;
 80009fe:	e034      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a00:	f000 fc9a 	bl	8001338 <SEGGER_SYSVIEW_Stop>
      break;
 8000a04:	e031      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a06:	f000 fe73 	bl	80016f0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a0a:	e02e      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a0c:	f000 fe38 	bl	8001680 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a10:	e02b      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a12:	f000 fcb7 	bl	8001384 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a16:	e028      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a18:	f000 ff44 	bl	80018a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a1c:	e025      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a1e:	f000 ff23 	bl	8001868 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a22:	e022      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <_HandleIncomingPacket+0xd8>)
 8000a26:	7e1b      	ldrb	r3, [r3, #24]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	1cfb      	adds	r3, r7, #3
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f7ff fe22 	bl	8000678 <SEGGER_RTT_ReadNoLock>
 8000a34:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d013      	beq.n	8000a64 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fe88 	bl	8001754 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a44:	e00e      	b.n	8000a64 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a46:	78fb      	ldrb	r3, [r7, #3]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da0c      	bge.n	8000a68 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <_HandleIncomingPacket+0xd8>)
 8000a50:	7e1b      	ldrb	r3, [r3, #24]
 8000a52:	4618      	mov	r0, r3
 8000a54:	1cfb      	adds	r3, r7, #3
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f7ff fe0d 	bl	8000678 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a5e:	e003      	b.n	8000a68 <_HandleIncomingPacket+0xcc>
      break;
 8000a60:	bf00      	nop
 8000a62:	e002      	b.n	8000a6a <_HandleIncomingPacket+0xce>
      break;
 8000a64:	bf00      	nop
 8000a66:	e000      	b.n	8000a6a <_HandleIncomingPacket+0xce>
      break;
 8000a68:	bf00      	nop
    }
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000a7c 	.word	0x20000a7c

08000a78 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	@ 0x30
 8000a7c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a7e:	2301      	movs	r3, #1
 8000a80:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a92:	e00b      	b.n	8000aac <_TrySendOverflowPacket+0x34>
 8000a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a9a:	1c59      	adds	r1, r3, #1
 8000a9c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8000a9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa8:	09db      	lsrs	r3, r3, #7
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ab0:	d8f0      	bhi.n	8000a94 <_TrySendOverflowPacket+0x1c>
 8000ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000ab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ac0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ac2:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <_TrySendOverflowPacket+0xe0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	e00b      	b.n	8000af4 <_TrySendOverflowPacket+0x7c>
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae2:	1c59      	adds	r1, r3, #1
 8000ae4:	6279      	str	r1, [r7, #36]	@ 0x24
 8000ae6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	09db      	lsrs	r3, r3, #7
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000af8:	d8f0      	bhi.n	8000adc <_TrySendOverflowPacket+0x64>
 8000afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	627a      	str	r2, [r7, #36]	@ 0x24
 8000b00:	6a3a      	ldr	r2, [r7, #32]
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b08:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b0c:	785b      	ldrb	r3, [r3, #1]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f7ff fb90 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b20:	4603      	mov	r3, r0
 8000b22:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d009      	beq.n	8000b3e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e004      	b.n	8000b48 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b48:	693b      	ldr	r3, [r7, #16]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3730      	adds	r7, #48	@ 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000a7c 	.word	0x20000a7c
 8000b58:	e0001004 	.word	0xe0001004

08000b5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b68:	4b98      	ldr	r3, [pc, #608]	@ (8000dcc <_SendPacket+0x270>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d010      	beq.n	8000b92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b70:	4b96      	ldr	r3, [pc, #600]	@ (8000dcc <_SendPacket+0x270>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 812d 	beq.w	8000dd4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b7a:	4b94      	ldr	r3, [pc, #592]	@ (8000dcc <_SendPacket+0x270>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d109      	bne.n	8000b96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b82:	f7ff ff79 	bl	8000a78 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b86:	4b91      	ldr	r3, [pc, #580]	@ (8000dcc <_SendPacket+0x270>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	f040 8124 	bne.w	8000dd8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000b90:	e001      	b.n	8000b96 <_SendPacket+0x3a>
    goto Send;
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <_SendPacket+0x3c>
Send:
 8000b96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b1f      	cmp	r3, #31
 8000b9c:	d809      	bhi.n	8000bb2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8000dcc <_SendPacket+0x270>)
 8000ba0:	69da      	ldr	r2, [r3, #28]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f040 8115 	bne.w	8000ddc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b17      	cmp	r3, #23
 8000bb6:	d807      	bhi.n	8000bc8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	e0c4      	b.n	8000d52 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bd4:	d912      	bls.n	8000bfc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	09da      	lsrs	r2, r3, #7
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	3a01      	subs	r2, #1
 8000bee:	60fa      	str	r2, [r7, #12]
 8000bf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e006      	b.n	8000c0a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b7e      	cmp	r3, #126	@ 0x7e
 8000c0e:	d807      	bhi.n	8000c20 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e098      	b.n	8000d52 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c26:	d212      	bcs.n	8000c4e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	09da      	lsrs	r2, r3, #7
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	3a01      	subs	r2, #1
 8000c40:	60fa      	str	r2, [r7, #12]
 8000c42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e081      	b.n	8000d52 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000c54:	d21d      	bcs.n	8000c92 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	0b9a      	lsrs	r2, r3, #14
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	09db      	lsrs	r3, r3, #7
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	3a01      	subs	r2, #1
 8000c70:	60fa      	str	r2, [r7, #12]
 8000c72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	3a01      	subs	r2, #1
 8000c84:	60fa      	str	r2, [r7, #12]
 8000c86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e05f      	b.n	8000d52 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000c98:	d228      	bcs.n	8000cec <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	0d5a      	lsrs	r2, r3, #21
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0b9b      	lsrs	r3, r3, #14
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	3a01      	subs	r2, #1
 8000cb4:	60fa      	str	r2, [r7, #12]
 8000cb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	09db      	lsrs	r3, r3, #7
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	60fa      	str	r2, [r7, #12]
 8000ccc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	3a01      	subs	r2, #1
 8000cde:	60fa      	str	r2, [r7, #12]
 8000ce0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e032      	b.n	8000d52 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	0f1a      	lsrs	r2, r3, #28
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	0d5b      	lsrs	r3, r3, #21
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	3a01      	subs	r2, #1
 8000d06:	60fa      	str	r2, [r7, #12]
 8000d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0b9b      	lsrs	r3, r3, #14
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	3a01      	subs	r2, #1
 8000d1c:	60fa      	str	r2, [r7, #12]
 8000d1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	09db      	lsrs	r3, r3, #7
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	3a01      	subs	r2, #1
 8000d32:	60fa      	str	r2, [r7, #12]
 8000d34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	3a01      	subs	r2, #1
 8000d46:	60fa      	str	r2, [r7, #12]
 8000d48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d52:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <_SendPacket+0x274>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <_SendPacket+0x270>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	623b      	str	r3, [r7, #32]
 8000d6a:	e00b      	b.n	8000d84 <_SendPacket+0x228>
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	1c59      	adds	r1, r3, #1
 8000d74:	6279      	str	r1, [r7, #36]	@ 0x24
 8000d76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	09db      	lsrs	r3, r3, #7
 8000d82:	623b      	str	r3, [r7, #32]
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d88:	d8f0      	bhi.n	8000d6c <_SendPacket+0x210>
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8000d90:	6a3a      	ldr	r2, [r7, #32]
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <_SendPacket+0x270>)
 8000d9c:	785b      	ldrb	r3, [r3, #1]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	68f9      	ldr	r1, [r7, #12]
 8000daa:	f7ff fa49 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dae:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <_SendPacket+0x270>)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	60d3      	str	r3, [r2, #12]
 8000dbc:	e00f      	b.n	8000dde <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dbe:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <_SendPacket+0x270>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b01      	ldr	r3, [pc, #4]	@ (8000dcc <_SendPacket+0x270>)
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e008      	b.n	8000dde <_SendPacket+0x282>
 8000dcc:	20000a7c 	.word	0x20000a7c
 8000dd0:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dd4:	bf00      	nop
 8000dd6:	e002      	b.n	8000dde <_SendPacket+0x282>
      goto SendDone;
 8000dd8:	bf00      	nop
 8000dda:	e000      	b.n	8000dde <_SendPacket+0x282>
      goto SendDone;
 8000ddc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <_SendPacket+0x2d4>)
 8000de0:	7e1b      	ldrb	r3, [r3, #24]
 8000de2:	4619      	mov	r1, r3
 8000de4:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <_SendPacket+0x2d8>)
 8000de6:	460b      	mov	r3, r1
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	440b      	add	r3, r1
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4413      	add	r3, r2
 8000df0:	336c      	adds	r3, #108	@ 0x6c
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <_SendPacket+0x2d4>)
 8000df6:	7e1b      	ldrb	r3, [r3, #24]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	490e      	ldr	r1, [pc, #56]	@ (8000e34 <_SendPacket+0x2d8>)
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4403      	add	r3, r0
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	3370      	adds	r3, #112	@ 0x70
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d00b      	beq.n	8000e26 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <_SendPacket+0x2d4>)
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d107      	bne.n	8000e26 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <_SendPacket+0x2d4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e1c:	f7ff fdbe 	bl	800099c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <_SendPacket+0x2d4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	@ 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000a7c 	.word	0x20000a7c
 8000e34:	200001bc 	.word	0x200001bc

08000e38 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0a2      	sub	sp, #136	@ 0x88
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  NumArguments = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (;;) {
    c = *p++;
 8000e4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (c == 0) {
 8000e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d01d      	beq.n	8000e9e <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000e66:	2b25      	cmp	r3, #37	@ 0x25
 8000e68:	d1f1      	bne.n	8000e4e <_VPrintHost+0x16>
      c = *p;
 8000e6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1d19      	adds	r1, r3, #4
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6011      	str	r1, [r2, #0]
 8000e7c:	6819      	ldr	r1, [r3, #0]
 8000e7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8000e88:	460a      	mov	r2, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3388      	adds	r3, #136	@ 0x88
 8000e8e:	443b      	add	r3, r7
 8000e90:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	d002      	beq.n	8000ea2 <_VPrintHost+0x6a>
    c = *p++;
 8000e9c:	e7d7      	b.n	8000e4e <_VPrintHost+0x16>
      break;
 8000e9e:	bf00      	nop
 8000ea0:	e000      	b.n	8000ea4 <_VPrintHost+0x6c>
        break;
 8000ea2:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8000ea8:	f04f 0120 	mov.w	r1, #32
 8000eac:	f381 8811 	msr	BASEPRI, r1
 8000eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000eb2:	483f      	ldr	r0, [pc, #252]	@ (8000fb0 <_VPrintHost+0x178>)
 8000eb4:	f7ff fd66 	bl	8000984 <_PreparePacket>
 8000eb8:	6578      	str	r0, [r7, #84]	@ 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000eba:	2280      	movs	r2, #128	@ 0x80
 8000ebc:	68f9      	ldr	r1, [r7, #12]
 8000ebe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000ec0:	f7ff fd30 	bl	8000924 <_EncodeStr>
 8000ec4:	67b8      	str	r0, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, Options);
 8000ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ec8:	677b      	str	r3, [r7, #116]	@ 0x74
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ece:	e00b      	b.n	8000ee8 <_VPrintHost+0xb0>
 8000ed0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ed6:	1c59      	adds	r1, r3, #1
 8000ed8:	6779      	str	r1, [r7, #116]	@ 0x74
 8000eda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ee4:	09db      	lsrs	r3, r3, #7
 8000ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000eea:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eec:	d8f0      	bhi.n	8000ed0 <_VPrintHost+0x98>
 8000eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	677a      	str	r2, [r7, #116]	@ 0x74
 8000ef4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000efc:	67bb      	str	r3, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000efe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f08:	e00b      	b.n	8000f22 <_VPrintHost+0xea>
 8000f0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f10:	1c59      	adds	r1, r3, #1
 8000f12:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8000f14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f1e:	09db      	lsrs	r3, r3, #7
 8000f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f24:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f26:	d8f0      	bhi.n	8000f0a <_VPrintHost+0xd2>
 8000f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000f2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f36:	67bb      	str	r3, [r7, #120]	@ 0x78
    pParas = aParas;
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 8000f40:	e022      	b.n	8000f88 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f44:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f4e:	e00b      	b.n	8000f68 <_VPrintHost+0x130>
 8000f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f56:	1c59      	adds	r1, r3, #1
 8000f58:	6679      	str	r1, [r7, #100]	@ 0x64
 8000f5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f64:	09db      	lsrs	r3, r3, #7
 8000f66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f6c:	d8f0      	bhi.n	8000f50 <_VPrintHost+0x118>
 8000f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	667a      	str	r2, [r7, #100]	@ 0x64
 8000f74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f7c:	67bb      	str	r3, [r7, #120]	@ 0x78
      pParas++;
 8000f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f82:	3304      	adds	r3, #4
 8000f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 8000f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f8c:	1e5a      	subs	r2, r3, #1
 8000f8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1d5      	bne.n	8000f42 <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000f96:	221a      	movs	r2, #26
 8000f98:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f9a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000f9c:	f7ff fdde 	bl	8000b5c <_SendPacket>
    RECORD_END();
 8000fa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fa2:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3788      	adds	r7, #136	@ 0x88
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000aac 	.word	0x20000aac

08000fb4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc8:	4917      	ldr	r1, [pc, #92]	@ (8001028 <SEGGER_SYSVIEW_Init+0x74>)
 8000fca:	4818      	ldr	r0, [pc, #96]	@ (800102c <SEGGER_SYSVIEW_Init+0x78>)
 8000fcc:	f7ff fbda 	bl	8000784 <SEGGER_RTT_AllocUpBuffer>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fd6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fda:	785a      	ldrb	r2, [r3, #1]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fde:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe2:	7e1b      	ldrb	r3, [r3, #24]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2308      	movs	r3, #8
 8000fec:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <SEGGER_SYSVIEW_Init+0x80>)
 8000fee:	490f      	ldr	r1, [pc, #60]	@ (800102c <SEGGER_SYSVIEW_Init+0x78>)
 8000ff0:	f7ff fc4c 	bl	800088c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <SEGGER_SYSVIEW_Init+0x84>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8001000:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8001002:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000674 	.word	0x20000674
 800102c:	08008c68 	.word	0x08008c68
 8001030:	20000a7c 	.word	0x20000a7c
 8001034:	20000a74 	.word	0x20000a74
 8001038:	e0001004 	.word	0xe0001004

0800103c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6113      	str	r3, [r2, #16]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000a7c 	.word	0x20000a7c

0800105c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001064:	f3ef 8311 	mrs	r3, BASEPRI
 8001068:	f04f 0120 	mov.w	r1, #32
 800106c:	f381 8811 	msr	BASEPRI, r1
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4808      	ldr	r0, [pc, #32]	@ (8001094 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001074:	f7ff fc86 	bl	8000984 <_PreparePacket>
 8001078:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff fd6c 	bl	8000b5c <_SendPacket>
  RECORD_END();
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f383 8811 	msr	BASEPRI, r3
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000aac 	.word	0x20000aac

08001098 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010a2:	f3ef 8311 	mrs	r3, BASEPRI
 80010a6:	f04f 0120 	mov.w	r1, #32
 80010aa:	f381 8811 	msr	BASEPRI, r1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	4816      	ldr	r0, [pc, #88]	@ (800110c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010b2:	f7ff fc67 	bl	8000984 <_PreparePacket>
 80010b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	e00b      	b.n	80010de <SEGGER_SYSVIEW_RecordU32+0x46>
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	1c59      	adds	r1, r3, #1
 80010ce:	61f9      	str	r1, [r7, #28]
 80010d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	09db      	lsrs	r3, r3, #7
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80010e2:	d8f0      	bhi.n	80010c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	61fa      	str	r2, [r7, #28]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	6938      	ldr	r0, [r7, #16]
 80010fa:	f7ff fd2f 	bl	8000b5c <_SendPacket>
  RECORD_END();
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f383 8811 	msr	BASEPRI, r3
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000aac 	.word	0x20000aac

08001110 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	@ 0x30
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800111c:	f3ef 8311 	mrs	r3, BASEPRI
 8001120:	f04f 0120 	mov.w	r1, #32
 8001124:	f381 8811 	msr	BASEPRI, r1
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	4825      	ldr	r0, [pc, #148]	@ (80011c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800112c:	f7ff fc2a 	bl	8000984 <_PreparePacket>
 8001130:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800113e:	e00b      	b.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001142:	b2da      	uxtb	r2, r3
 8001144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001146:	1c59      	adds	r1, r3, #1
 8001148:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800114a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001154:	09db      	lsrs	r3, r3, #7
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115a:	2b7f      	cmp	r3, #127	@ 0x7f
 800115c:	d8f0      	bhi.n	8001140 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800115e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	e00b      	b.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	1c59      	adds	r1, r3, #1
 8001180:	6279      	str	r1, [r7, #36]	@ 0x24
 8001182:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	09db      	lsrs	r3, r3, #7
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	2b7f      	cmp	r3, #127	@ 0x7f
 8001194:	d8f0      	bhi.n	8001178 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	627a      	str	r2, [r7, #36]	@ 0x24
 800119c:	6a3a      	ldr	r2, [r7, #32]
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	6979      	ldr	r1, [r7, #20]
 80011aa:	69b8      	ldr	r0, [r7, #24]
 80011ac:	f7ff fcd6 	bl	8000b5c <_SendPacket>
  RECORD_END();
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f383 8811 	msr	BASEPRI, r3
}
 80011b6:	bf00      	nop
 80011b8:	3730      	adds	r7, #48	@ 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000aac 	.word	0x20000aac

080011c4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011ca:	4b58      	ldr	r3, [pc, #352]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011d0:	f3ef 8311 	mrs	r3, BASEPRI
 80011d4:	f04f 0120 	mov.w	r1, #32
 80011d8:	f381 8811 	msr	BASEPRI, r1
 80011dc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011de:	4b53      	ldr	r3, [pc, #332]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	220a      	movs	r2, #10
 80011e4:	4952      	ldr	r1, [pc, #328]	@ (8001330 <SEGGER_SYSVIEW_Start+0x16c>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f82a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f7ff ff32 	bl	800105c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80011f8:	f3ef 8311 	mrs	r3, BASEPRI
 80011fc:	f04f 0120 	mov.w	r1, #32
 8001200:	f381 8811 	msr	BASEPRI, r1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	484b      	ldr	r0, [pc, #300]	@ (8001334 <SEGGER_SYSVIEW_Start+0x170>)
 8001208:	f7ff fbbc 	bl	8000984 <_PreparePacket>
 800120c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001216:	4b45      	ldr	r3, [pc, #276]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800121c:	e00b      	b.n	8001236 <SEGGER_SYSVIEW_Start+0x72>
 800121e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001220:	b2da      	uxtb	r2, r3
 8001222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001224:	1c59      	adds	r1, r3, #1
 8001226:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001228:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001232:	09db      	lsrs	r3, r3, #7
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001238:	2b7f      	cmp	r3, #127	@ 0x7f
 800123a:	d8f0      	bhi.n	800121e <SEGGER_SYSVIEW_Start+0x5a>
 800123c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800124a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001250:	4b36      	ldr	r3, [pc, #216]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	623b      	str	r3, [r7, #32]
 8001256:	e00b      	b.n	8001270 <SEGGER_SYSVIEW_Start+0xac>
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	1c59      	adds	r1, r3, #1
 8001260:	6279      	str	r1, [r7, #36]	@ 0x24
 8001262:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	09db      	lsrs	r3, r3, #7
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	2b7f      	cmp	r3, #127	@ 0x7f
 8001274:	d8f0      	bhi.n	8001258 <SEGGER_SYSVIEW_Start+0x94>
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	627a      	str	r2, [r7, #36]	@ 0x24
 800127c:	6a3a      	ldr	r2, [r7, #32]
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	4b28      	ldr	r3, [pc, #160]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	e00b      	b.n	80012aa <SEGGER_SYSVIEW_Start+0xe6>
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	1c59      	adds	r1, r3, #1
 800129a:	61f9      	str	r1, [r7, #28]
 800129c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	09db      	lsrs	r3, r3, #7
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80012ae:	d8f0      	bhi.n	8001292 <SEGGER_SYSVIEW_Start+0xce>
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	61fa      	str	r2, [r7, #28]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	e00b      	b.n	80012e2 <SEGGER_SYSVIEW_Start+0x11e>
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1c59      	adds	r1, r3, #1
 80012d2:	6179      	str	r1, [r7, #20]
 80012d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	09db      	lsrs	r3, r3, #7
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e6:	d8f0      	bhi.n	80012ca <SEGGER_SYSVIEW_Start+0x106>
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	617a      	str	r2, [r7, #20]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80012f8:	2218      	movs	r2, #24
 80012fa:	6839      	ldr	r1, [r7, #0]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fc2d 	bl	8000b5c <_SendPacket>
      RECORD_END();
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001314:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001316:	f000 f9eb 	bl	80016f0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800131a:	f000 f9b1 	bl	8001680 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800131e:	f000 fac1 	bl	80018a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	@ 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000a7c 	.word	0x20000a7c
 8001330:	08008d2c 	.word	0x08008d2c
 8001334:	20000aac 	.word	0x20000aac

08001338 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800133e:	f3ef 8311 	mrs	r3, BASEPRI
 8001342:	f04f 0120 	mov.w	r1, #32
 8001346:	f381 8811 	msr	BASEPRI, r1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <SEGGER_SYSVIEW_Stop+0x44>)
 800134e:	f7ff fb19 	bl	8000984 <_PreparePacket>
 8001352:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <SEGGER_SYSVIEW_Stop+0x48>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d007      	beq.n	800136c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800135c:	220b      	movs	r2, #11
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff fbfb 	bl	8000b5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <SEGGER_SYSVIEW_Stop+0x48>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f383 8811 	msr	BASEPRI, r3
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000aac 	.word	0x20000aac
 8001380:	20000a7c 	.word	0x20000a7c

08001384 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	@ 0x30
 8001388:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800138a:	f3ef 8311 	mrs	r3, BASEPRI
 800138e:	f04f 0120 	mov.w	r1, #32
 8001392:	f381 8811 	msr	BASEPRI, r1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4845      	ldr	r0, [pc, #276]	@ (80014b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800139a:	f7ff faf3 	bl	8000984 <_PreparePacket>
 800139e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a8:	4b42      	ldr	r3, [pc, #264]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ae:	e00b      	b.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b6:	1c59      	adds	r1, r3, #1
 80013b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80013ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c4:	09db      	lsrs	r3, r3, #7
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80013cc:	d8f0      	bhi.n	80013b0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e2:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	623b      	str	r3, [r7, #32]
 80013e8:	e00b      	b.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	1c59      	adds	r1, r3, #1
 80013f2:	6279      	str	r1, [r7, #36]	@ 0x24
 80013f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	09db      	lsrs	r3, r3, #7
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b7f      	cmp	r3, #127	@ 0x7f
 8001406:	d8f0      	bhi.n	80013ea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	627a      	str	r2, [r7, #36]	@ 0x24
 800140e:	6a3a      	ldr	r2, [r7, #32]
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001416:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	e00b      	b.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	1c59      	adds	r1, r3, #1
 800142c:	61f9      	str	r1, [r7, #28]
 800142e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	09db      	lsrs	r3, r3, #7
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001440:	d8f0      	bhi.n	8001424 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	61fa      	str	r2, [r7, #28]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	e00b      	b.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1c59      	adds	r1, r3, #1
 8001464:	6179      	str	r1, [r7, #20]
 8001466:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	09db      	lsrs	r3, r3, #7
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	2b7f      	cmp	r3, #127	@ 0x7f
 8001478:	d8f0      	bhi.n	800145c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	617a      	str	r2, [r7, #20]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800148a:	2218      	movs	r2, #24
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7ff fb64 	bl	8000b5c <_SendPacket>
  RECORD_END();
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	4798      	blx	r3
  }
}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	@ 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000aac 	.word	0x20000aac
 80014b4:	20000a7c 	.word	0x20000a7c

080014b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b092      	sub	sp, #72	@ 0x48
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014c0:	f3ef 8311 	mrs	r3, BASEPRI
 80014c4:	f04f 0120 	mov.w	r1, #32
 80014c8:	f381 8811 	msr	BASEPRI, r1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	486a      	ldr	r0, [pc, #424]	@ (8001678 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014d0:	f7ff fa58 	bl	8000984 <_PreparePacket>
 80014d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b66      	ldr	r3, [pc, #408]	@ (800167c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80014ea:	e00b      	b.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80014ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014f2:	1c59      	adds	r1, r3, #1
 80014f4:	6479      	str	r1, [r7, #68]	@ 0x44
 80014f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001500:	09db      	lsrs	r3, r3, #7
 8001502:	643b      	str	r3, [r7, #64]	@ 0x40
 8001504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001506:	2b7f      	cmp	r3, #127	@ 0x7f
 8001508:	d8f0      	bhi.n	80014ec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800150a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001510:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001518:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001524:	e00b      	b.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001528:	b2da      	uxtb	r2, r3
 800152a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800152c:	1c59      	adds	r1, r3, #1
 800152e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8001530:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800153a:	09db      	lsrs	r3, r3, #7
 800153c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800153e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001540:	2b7f      	cmp	r3, #127	@ 0x7f
 8001542:	d8f0      	bhi.n	8001526 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800154a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001552:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	4619      	mov	r1, r3
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff f9e1 	bl	8000924 <_EncodeStr>
 8001562:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001564:	2209      	movs	r2, #9
 8001566:	68f9      	ldr	r1, [r7, #12]
 8001568:	6938      	ldr	r0, [r7, #16]
 800156a:	f7ff faf7 	bl	8000b5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	637b      	str	r3, [r7, #52]	@ 0x34
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b40      	ldr	r3, [pc, #256]	@ (800167c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	633b      	str	r3, [r7, #48]	@ 0x30
 8001582:	e00b      	b.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001586:	b2da      	uxtb	r2, r3
 8001588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158a:	1c59      	adds	r1, r3, #1
 800158c:	6379      	str	r1, [r7, #52]	@ 0x34
 800158e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001598:	09db      	lsrs	r3, r3, #7
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
 800159c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800159e:	2b7f      	cmp	r3, #127	@ 0x7f
 80015a0:	d8f0      	bhi.n	8001584 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80015a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015bc:	e00b      	b.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c4:	1c59      	adds	r1, r3, #1
 80015c6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80015c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d2:	09db      	lsrs	r3, r3, #7
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80015da:	d8f0      	bhi.n	80015be <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	e00b      	b.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	1c59      	adds	r1, r3, #1
 8001600:	6279      	str	r1, [r7, #36]	@ 0x24
 8001602:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	09db      	lsrs	r3, r3, #7
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	2b7f      	cmp	r3, #127	@ 0x7f
 8001614:	d8f0      	bhi.n	80015f8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	627a      	str	r2, [r7, #36]	@ 0x24
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	e00b      	b.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	1c59      	adds	r1, r3, #1
 8001638:	61f9      	str	r1, [r7, #28]
 800163a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	09db      	lsrs	r3, r3, #7
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b7f      	cmp	r3, #127	@ 0x7f
 800164c:	d8f0      	bhi.n	8001630 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	61fa      	str	r2, [r7, #28]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800165e:	2215      	movs	r2, #21
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	6938      	ldr	r0, [r7, #16]
 8001664:	f7ff fa7a 	bl	8000b5c <_SendPacket>
  RECORD_END();
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f383 8811 	msr	BASEPRI, r3
}
 800166e:	bf00      	nop
 8001670:	3748      	adds	r7, #72	@ 0x48
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000aac 	.word	0x20000aac
 800167c:	20000a7c 	.word	0x20000a7c

08001680 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001696:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4798      	blx	r3
  }
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000a7c 	.word	0x20000a7c

080016a8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016b0:	f3ef 8311 	mrs	r3, BASEPRI
 80016b4:	f04f 0120 	mov.w	r1, #32
 80016b8:	f381 8811 	msr	BASEPRI, r1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	480b      	ldr	r0, [pc, #44]	@ (80016ec <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016c0:	f7ff f960 	bl	8000984 <_PreparePacket>
 80016c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c6:	2280      	movs	r2, #128	@ 0x80
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	6938      	ldr	r0, [r7, #16]
 80016cc:	f7ff f92a 	bl	8000924 <_EncodeStr>
 80016d0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016d2:	220e      	movs	r2, #14
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f7ff fa40 	bl	8000b5c <_SendPacket>
  RECORD_END();
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f383 8811 	msr	BASEPRI, r3
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000aac 	.word	0x20000aac

080016f0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01a      	beq.n	8001734 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d015      	beq.n	8001734 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4798      	blx	r3
 8001710:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001714:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	000a      	movs	r2, r1
 8001724:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001726:	4613      	mov	r3, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4621      	mov	r1, r4
 800172c:	200d      	movs	r0, #13
 800172e:	f7ff fcef 	bl	8001110 <SEGGER_SYSVIEW_RecordU32x2>
 8001732:	e006      	b.n	8001742 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	200c      	movs	r0, #12
 800173c:	f7ff fcac 	bl	8001098 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000a7c 	.word	0x20000a7c
 8001750:	e0001004 	.word	0xe0001004

08001754 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	@ 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800175e:	4b40      	ldr	r3, [pc, #256]	@ (8001860 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d077      	beq.n	8001856 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001766:	4b3e      	ldr	r3, [pc, #248]	@ (8001860 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001770:	e008      	b.n	8001784 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8001772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8001778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800177e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001780:	3301      	adds	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001788:	429a      	cmp	r2, r3
 800178a:	d3f2      	bcc.n	8001772 <SEGGER_SYSVIEW_SendModule+0x1e>
 800178c:	e000      	b.n	8001790 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800178e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d055      	beq.n	8001842 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001796:	f3ef 8311 	mrs	r3, BASEPRI
 800179a:	f04f 0120 	mov.w	r1, #32
 800179e:	f381 8811 	msr	BASEPRI, r1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	482f      	ldr	r0, [pc, #188]	@ (8001864 <SEGGER_SYSVIEW_SendModule+0x110>)
 80017a6:	f7ff f8ed 	bl	8000984 <_PreparePacket>
 80017aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	e00b      	b.n	80017d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	1c59      	adds	r1, r3, #1
 80017c2:	6279      	str	r1, [r7, #36]	@ 0x24
 80017c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	09db      	lsrs	r3, r3, #7
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80017d6:	d8f0      	bhi.n	80017ba <SEGGER_SYSVIEW_SendModule+0x66>
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80017de:	6a3a      	ldr	r2, [r7, #32]
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	e00b      	b.n	800180c <SEGGER_SYSVIEW_SendModule+0xb8>
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	1c59      	adds	r1, r3, #1
 80017fc:	61f9      	str	r1, [r7, #28]
 80017fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	09db      	lsrs	r3, r3, #7
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001810:	d8f0      	bhi.n	80017f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	61fa      	str	r2, [r7, #28]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2280      	movs	r2, #128	@ 0x80
 8001828:	4619      	mov	r1, r3
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff f87a 	bl	8000924 <_EncodeStr>
 8001830:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8001832:	2216      	movs	r2, #22
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	6938      	ldr	r0, [r7, #16]
 8001838:	f7ff f990 	bl	8000b5c <_SendPacket>
      RECORD_END();
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8001842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <SEGGER_SYSVIEW_SendModule+0x102>
 8001848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4798      	blx	r3
    }
  }
}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	@ 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000aa4 	.word	0x20000aa4
 8001864:	20000aac 	.word	0x20000aac

08001868 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00f      	beq.n	8001896 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f2      	bne.n	800187c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000aa4 	.word	0x20000aa4

080018a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018aa:	f3ef 8311 	mrs	r3, BASEPRI
 80018ae:	f04f 0120 	mov.w	r1, #32
 80018b2:	f381 8811 	msr	BASEPRI, r1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	4817      	ldr	r0, [pc, #92]	@ (8001918 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018ba:	f7ff f863 	bl	8000984 <_PreparePacket>
 80018be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e00b      	b.n	80018e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	1c59      	adds	r1, r3, #1
 80018d8:	6179      	str	r1, [r7, #20]
 80018da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	09db      	lsrs	r3, r3, #7
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80018ec:	d8f0      	bhi.n	80018d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	617a      	str	r2, [r7, #20]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80018fe:	221b      	movs	r2, #27
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	68b8      	ldr	r0, [r7, #8]
 8001904:	f7ff f92a 	bl	8000b5c <_SendPacket>
  RECORD_END();
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f383 8811 	msr	BASEPRI, r3
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000aac 	.word	0x20000aac
 800191c:	20000aa8 	.word	0x20000aa8

08001920 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8001920:	b40f      	push	{r0, r1, r2, r3}
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	461a      	mov	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	6938      	ldr	r0, [r7, #16]
 8001936:	f7ff fa7f 	bl	8000e38 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001944:	b004      	add	sp, #16
 8001946:	4770      	bx	lr

08001948 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <_cbSendSystemDesc+0x14>)
 800194e:	f7ff feab 	bl	80016a8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001952:	4803      	ldr	r0, [pc, #12]	@ (8001960 <_cbSendSystemDesc+0x18>)
 8001954:	f7ff fea8 	bl	80016a8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	08008c70 	.word	0x08008c70
 8001960:	08008ca4 	.word	0x08008ca4

08001964 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <SEGGER_SYSVIEW_Conf+0x20>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <SEGGER_SYSVIEW_Conf+0x20>)
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SEGGER_SYSVIEW_Conf+0x24>)
 8001972:	4a06      	ldr	r2, [pc, #24]	@ (800198c <SEGGER_SYSVIEW_Conf+0x28>)
 8001974:	f7ff fb1e 	bl	8000fb4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001978:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800197c:	f7ff fb5e 	bl	800103c <SEGGER_SYSVIEW_SetRAMBase>
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000000 	.word	0x20000000
 8001988:	08001949 	.word	0x08001949
 800198c:	08008d38 	.word	0x08008d38

08001990 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001992:	b085      	sub	sp, #20
 8001994:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	e048      	b.n	8001a2e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800199c:	4929      	ldr	r1, [pc, #164]	@ (8001a44 <_cbSendTaskList+0xb4>)
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f005 fea9 	bl	8007704 <uxTaskGetStackHighWaterMark>
 80019b2:	4601      	mov	r1, r0
 80019b4:	4823      	ldr	r0, [pc, #140]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4403      	add	r3, r0
 80019c2:	3310      	adds	r3, #16
 80019c4:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019c6:	491f      	ldr	r1, [pc, #124]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	491b      	ldr	r1, [pc, #108]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	3304      	adds	r3, #4
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	4c16      	ldr	r4, [pc, #88]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4423      	add	r3, r4
 80019f6:	3308      	adds	r3, #8
 80019f8:	681c      	ldr	r4, [r3, #0]
 80019fa:	4d12      	ldr	r5, [pc, #72]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	442b      	add	r3, r5
 8001a08:	330c      	adds	r3, #12
 8001a0a:	681d      	ldr	r5, [r3, #0]
 8001a0c:	4e0d      	ldr	r6, [pc, #52]	@ (8001a44 <_cbSendTaskList+0xb4>)
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4433      	add	r3, r6
 8001a1a:	3310      	adds	r3, #16
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	462b      	mov	r3, r5
 8001a22:	4622      	mov	r2, r4
 8001a24:	f000 f855 	bl	8001ad2 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <_cbSendTaskList+0xb8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3b1      	bcc.n	800199c <_cbSendTaskList+0xc>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000b90 	.word	0x20000b90
 8001a48:	20000c30 	.word	0x20000c30

08001a4c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a54:	f005 fb38 	bl	80070c8 <xTaskGetTickCountFromISR>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	4693      	mov	fp, r2
 8001a60:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	f04f 0a00 	mov.w	sl, #0
 8001a70:	f04f 0b00 	mov.w	fp, #0
 8001a74:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a78:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a7c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a80:	4652      	mov	r2, sl
 8001a82:	465b      	mov	r3, fp
 8001a84:	1a14      	subs	r4, r2, r0
 8001a86:	eb63 0501 	sbc.w	r5, r3, r1
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	00ab      	lsls	r3, r5, #2
 8001a94:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001a98:	00a2      	lsls	r2, r4, #2
 8001a9a:	4614      	mov	r4, r2
 8001a9c:	461d      	mov	r5, r3
 8001a9e:	eb14 0800 	adds.w	r8, r4, r0
 8001aa2:	eb45 0901 	adc.w	r9, r5, r1
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aba:	4690      	mov	r8, r2
 8001abc:	4699      	mov	r9, r3
 8001abe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ad2 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08a      	sub	sp, #40	@ 0x28
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2214      	movs	r2, #20
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 ffbf 	bl	8008a6c <memset>
  TaskInfo.TaskID     = TaskID;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fcd6 	bl	80014b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	@ 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b18:	f000 fd65 	bl	80025e6 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b1c:	f7ff ff22 	bl	8001964 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b20:	f000 f852 	bl	8001bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b24:	f000 f9ce 	bl	8001ec4 <MX_GPIO_Init>
  MX_ETH_Init();
 8001b28:	f000 f8c0 	bl	8001cac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b2c:	f000 f96c 	bl	8001e08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b30:	f000 f99a 	bl	8001e68 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001b34:	f000 f908 	bl	8001d48 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001b38:	f000 f936 	bl	8001da8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b3c:	f003 ff7a 	bl	8005a34 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of printTimer */
  printTimerHandle = osTimerNew(printTimerRoutine, osTimerPeriodic, NULL, &printTimer_attributes);
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <main+0x84>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	2101      	movs	r1, #1
 8001b46:	4815      	ldr	r0, [pc, #84]	@ (8001b9c <main+0x88>)
 8001b48:	f004 f8c8 	bl	8005cdc <osTimerNew>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <main+0x8c>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  osTimerStart(printTimerHandle, 1000 / portTICK_PERIOD_MS);
 8001b52:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <main+0x8c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 f942 	bl	8005de4 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b60:	4a10      	ldr	r2, [pc, #64]	@ (8001ba4 <main+0x90>)
 8001b62:	2100      	movs	r1, #0
 8001b64:	4810      	ldr	r0, [pc, #64]	@ (8001ba8 <main+0x94>)
 8001b66:	f003 ffcf 	bl	8005b08 <osThreadNew>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <main+0x98>)
 8001b6e:	6013      	str	r3, [r2, #0]

  /* creation of sender */
  senderHandle = osThreadNew(senderEntry, NULL, &sender_attributes);
 8001b70:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <main+0x9c>)
 8001b72:	2100      	movs	r1, #0
 8001b74:	480f      	ldr	r0, [pc, #60]	@ (8001bb4 <main+0xa0>)
 8001b76:	f003 ffc7 	bl	8005b08 <osThreadNew>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <main+0xa4>)
 8001b7e:	6013      	str	r3, [r2, #0]

  /* creation of printer */
  printerHandle = osThreadNew(printerEntry, NULL, &printer_attributes);
 8001b80:	4a0e      	ldr	r2, [pc, #56]	@ (8001bbc <main+0xa8>)
 8001b82:	2100      	movs	r1, #0
 8001b84:	480e      	ldr	r0, [pc, #56]	@ (8001bc0 <main+0xac>)
 8001b86:	f003 ffbf 	bl	8005b08 <osThreadNew>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <main+0xb0>)
 8001b8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b90:	f003 ff84 	bl	8005a9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <main+0x80>
 8001b98:	08008dac 	.word	0x08008dac
 8001b9c:	0800205d 	.word	0x0800205d
 8001ba0:	200013a0 	.word	0x200013a0
 8001ba4:	08008d40 	.word	0x08008d40
 8001ba8:	08002009 	.word	0x08002009
 8001bac:	20001394 	.word	0x20001394
 8001bb0:	08008d64 	.word	0x08008d64
 8001bb4:	08002019 	.word	0x08002019
 8001bb8:	20001398 	.word	0x20001398
 8001bbc:	08008d88 	.word	0x08008d88
 8001bc0:	08002029 	.word	0x08002029
 8001bc4:	2000139c 	.word	0x2000139c

08001bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b094      	sub	sp, #80	@ 0x50
 8001bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	2234      	movs	r2, #52	@ 0x34
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f006 ff48 	bl	8008a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bec:	f001 fcb0 	bl	8003550 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <SystemClock_Config+0xdc>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca4 <SystemClock_Config+0xdc>)
 8001bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <SystemClock_Config+0xdc>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c10:	4a25      	ldr	r2, [pc, #148]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c28:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001c2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c3c:	2360      	movs	r3, #96	@ 0x60
 8001c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c44:	2304      	movs	r3, #4
 8001c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fcdd 	bl	8003610 <HAL_RCC_OscConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c5c:	f000 fa16 	bl	800208c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c60:	f001 fc86 	bl	8003570 <HAL_PWREx_EnableOverDrive>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c6a:	f000 fa0f 	bl	800208c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6e:	230f      	movs	r3, #15
 8001c70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c72:	2302      	movs	r3, #2
 8001c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	2103      	movs	r1, #3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 ff6e 	bl	8003b6c <HAL_RCC_ClockConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c96:	f000 f9f9 	bl	800208c <Error_Handler>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3750      	adds	r7, #80	@ 0x50
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000

08001cac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cb2:	4a20      	ldr	r2, [pc, #128]	@ (8001d34 <MX_ETH_Init+0x88>)
 8001cb4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cb6:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cbe:	2280      	movs	r2, #128	@ 0x80
 8001cc0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cc4:	22e1      	movs	r2, #225	@ 0xe1
 8001cc6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cdc:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cde:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001ce2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ce6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cea:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <MX_ETH_Init+0x90>)
 8001cec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cf0:	4a13      	ldr	r2, [pc, #76]	@ (8001d40 <MX_ETH_Init+0x94>)
 8001cf2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cf6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001cfa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cfe:	f000 fdd9 	bl	80028b4 <HAL_ETH_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d08:	f000 f9c0 	bl	800208c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d0c:	2238      	movs	r2, #56	@ 0x38
 8001d0e:	2100      	movs	r1, #0
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <MX_ETH_Init+0x98>)
 8001d12:	f006 feab 	bl	8008a6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_ETH_Init+0x98>)
 8001d18:	2221      	movs	r2, #33	@ 0x21
 8001d1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_ETH_Init+0x98>)
 8001d1e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001d22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d24:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <MX_ETH_Init+0x98>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000c6c 	.word	0x20000c6c
 8001d34:	40028000 	.word	0x40028000
 8001d38:	200013a4 	.word	0x200013a4
 8001d3c:	20000100 	.word	0x20000100
 8001d40:	20000060 	.word	0x20000060
 8001d44:	20000c34 	.word	0x20000c34

08001d48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d4e:	4a15      	ldr	r2, [pc, #84]	@ (8001da4 <MX_UART4_Init+0x5c>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d8c:	f002 fd3c 	bl	8004808 <HAL_UART_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d96:	f000 f979 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000d1c 	.word	0x20000d1c
 8001da4:	40004c00 	.word	0x40004c00

08001da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dac:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dae:	4a15      	ldr	r2, [pc, #84]	@ (8001e04 <MX_USART2_UART_Init+0x5c>)
 8001db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001db2:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dec:	f002 fd0c 	bl	8004808 <HAL_UART_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001df6:	f000 f949 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000da4 	.word	0x20000da4
 8001e04:	40004400 	.word	0x40004400

08001e08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <MX_USART3_UART_Init+0x5c>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e4c:	f002 fcdc 	bl	8004808 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e56:	f000 f919 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000e2c 	.word	0x20000e2c
 8001e64:	40004800 	.word	0x40004800

08001e68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e76:	2206      	movs	r2, #6
 8001e78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e88:	2202      	movs	r2, #2
 8001e8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eac:	f001 fa15 	bl	80032da <HAL_PCD_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001eb6:	f000 f8e9 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000eb4 	.word	0x20000eb4

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	@ 0x30
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	4b47      	ldr	r3, [pc, #284]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a46      	ldr	r2, [pc, #280]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef2:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a40      	ldr	r2, [pc, #256]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	4b35      	ldr	r3, [pc, #212]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a34      	ldr	r2, [pc, #208]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b32      	ldr	r3, [pc, #200]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f52:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a28      	ldr	r2, [pc, #160]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001f70:	4822      	ldr	r0, [pc, #136]	@ (8001ffc <MX_GPIO_Init+0x138>)
 8001f72:	f001 f999 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2140      	movs	r1, #64	@ 0x40
 8001f7a:	4821      	ldr	r0, [pc, #132]	@ (8002000 <MX_GPIO_Init+0x13c>)
 8001f7c:	f001 f994 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	481b      	ldr	r0, [pc, #108]	@ (8002004 <MX_GPIO_Init+0x140>)
 8001f98:	f000 ffda 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001f9c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4811      	ldr	r0, [pc, #68]	@ (8001ffc <MX_GPIO_Init+0x138>)
 8001fb6:	f000 ffcb 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001fba:	2340      	movs	r3, #64	@ 0x40
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480b      	ldr	r0, [pc, #44]	@ (8002000 <MX_GPIO_Init+0x13c>)
 8001fd2:	f000 ffbd 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_GPIO_Init+0x13c>)
 8001fea:	f000 ffb1 	bl	8002f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fee:	bf00      	nop
 8001ff0:	3730      	adds	r7, #48	@ 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40021800 	.word	0x40021800
 8002004:	40020800 	.word	0x40020800

08002008 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002010:	2001      	movs	r0, #1
 8002012:	f003 fe1f 	bl	8005c54 <osDelay>
 8002016:	e7fb      	b.n	8002010 <StartDefaultTask+0x8>

08002018 <senderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_senderEntry */
void senderEntry(void *argument)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN senderEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002020:	2001      	movs	r0, #1
 8002022:	f003 fe17 	bl	8005c54 <osDelay>
 8002026:	e7fb      	b.n	8002020 <senderEntry+0x8>

08002028 <printerEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printerEntry */
void printerEntry(void *argument)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  while(1)
  {
    //osDelay(1);


    HAL_UART_Receive(&huart2, &nextbyte, 1, 100);
 8002030:	f107 010c 	add.w	r1, r7, #12
 8002034:	2364      	movs	r3, #100	@ 0x64
 8002036:	2201      	movs	r2, #1
 8002038:	4806      	ldr	r0, [pc, #24]	@ (8002054 <printerEntry+0x2c>)
 800203a:	f002 fcbc 	bl	80049b6 <HAL_UART_Receive>
    SEGGER_SYSVIEW_PrintfHost("uart received");
 800203e:	4806      	ldr	r0, [pc, #24]	@ (8002058 <printerEntry+0x30>)
 8002040:	f7ff fc6e 	bl	8001920 <SEGGER_SYSVIEW_PrintfHost>

    SEGGER_SYSVIEW_PrintfHost(&nextbyte);
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fc69 	bl	8001920 <SEGGER_SYSVIEW_PrintfHost>
    HAL_UART_Receive(&huart2, &nextbyte, 1, 100);
 800204e:	bf00      	nop
 8002050:	e7ee      	b.n	8002030 <printerEntry+0x8>
 8002052:	bf00      	nop
 8002054:	20000da4 	.word	0x20000da4
 8002058:	08008cdc 	.word	0x08008cdc

0800205c <printTimerRoutine>:
  /* USER CODE END printerEntry */
}

/* printTimerRoutine function */
void printTimerRoutine(void *argument)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN printTimerRoutine */
	SEGGER_SYSVIEW_PrintfHost("timer print sender");
 8002064:	4806      	ldr	r0, [pc, #24]	@ (8002080 <printTimerRoutine+0x24>)
 8002066:	f7ff fc5b 	bl	8001920 <SEGGER_SYSVIEW_PrintfHost>

		//HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);

	HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);
 800206a:	2364      	movs	r3, #100	@ 0x64
 800206c:	2201      	movs	r2, #1
 800206e:	4905      	ldr	r1, [pc, #20]	@ (8002084 <printTimerRoutine+0x28>)
 8002070:	4805      	ldr	r0, [pc, #20]	@ (8002088 <printTimerRoutine+0x2c>)
 8002072:	f002 fc17 	bl	80048a4 <HAL_UART_Transmit>
  /* USER CODE END printTimerRoutine */
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	08008cec 	.word	0x08008cec
 8002084:	08008dbc 	.word	0x08008dbc
 8002088:	20000d1c 	.word	0x20000d1c

0800208c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002090:	b672      	cpsid	i
}
 8002092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <Error_Handler+0x8>

08002098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a10      	ldr	r2, [pc, #64]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	210f      	movs	r1, #15
 80020d2:	f06f 0001 	mvn.w	r0, #1
 80020d6:	f000 fbc4 	bl	8002862 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08e      	sub	sp, #56	@ 0x38
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4e      	ldr	r2, [pc, #312]	@ (8002240 <HAL_ETH_MspInit+0x158>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 8096 	bne.w	8002238 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800210c:	4b4d      	ldr	r3, [pc, #308]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	4a4c      	ldr	r2, [pc, #304]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002112:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002116:	6313      	str	r3, [r2, #48]	@ 0x30
 8002118:	4b4a      	ldr	r3, [pc, #296]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	4b47      	ldr	r3, [pc, #284]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	4a46      	ldr	r2, [pc, #280]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800212a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800212e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002130:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	4a40      	ldr	r2, [pc, #256]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002142:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002146:	6313      	str	r3, [r2, #48]	@ 0x30
 8002148:	4b3e      	ldr	r3, [pc, #248]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002154:	4b3b      	ldr	r3, [pc, #236]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002160:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	4b35      	ldr	r3, [pc, #212]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	4a34      	ldr	r2, [pc, #208]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6313      	str	r3, [r2, #48]	@ 0x30
 8002178:	4b32      	ldr	r3, [pc, #200]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	4a2e      	ldr	r2, [pc, #184]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002190:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800219c:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 80021a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a8:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80021b4:	2332      	movs	r3, #50	@ 0x32
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021c4:	230b      	movs	r3, #11
 80021c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021cc:	4619      	mov	r1, r3
 80021ce:	481e      	ldr	r0, [pc, #120]	@ (8002248 <HAL_ETH_MspInit+0x160>)
 80021d0:	f000 febe 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80021d4:	2386      	movs	r3, #134	@ 0x86
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021e4:	230b      	movs	r3, #11
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ec:	4619      	mov	r1, r3
 80021ee:	4817      	ldr	r0, [pc, #92]	@ (800224c <HAL_ETH_MspInit+0x164>)
 80021f0:	f000 feae 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002206:	230b      	movs	r3, #11
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800220a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220e:	4619      	mov	r1, r3
 8002210:	480f      	ldr	r0, [pc, #60]	@ (8002250 <HAL_ETH_MspInit+0x168>)
 8002212:	f000 fe9d 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002216:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002228:	230b      	movs	r3, #11
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	4808      	ldr	r0, [pc, #32]	@ (8002254 <HAL_ETH_MspInit+0x16c>)
 8002234:	f000 fe8c 	bl	8002f50 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8002238:	bf00      	nop
 800223a:	3738      	adds	r7, #56	@ 0x38
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40028000 	.word	0x40028000
 8002244:	40023800 	.word	0x40023800
 8002248:	40020800 	.word	0x40020800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400
 8002254:	40021800 	.word	0x40021800

08002258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0b2      	sub	sp, #200	@ 0xc8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002274:	2290      	movs	r2, #144	@ 0x90
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f006 fbf7 	bl	8008a6c <memset>
  if(huart->Instance==UART4)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a64      	ldr	r2, [pc, #400]	@ (8002414 <HAL_UART_MspInit+0x1bc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d13d      	bne.n	8002304 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800228e:	2300      	movs	r3, #0
 8002290:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fe8e 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022a2:	f7ff fef3 	bl	800208c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b59      	ldr	r3, [pc, #356]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	4b56      	ldr	r3, [pc, #344]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a55      	ldr	r2, [pc, #340]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022f0:	2308      	movs	r3, #8
 80022f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80022fa:	4619      	mov	r1, r3
 80022fc:	4847      	ldr	r0, [pc, #284]	@ (800241c <HAL_UART_MspInit+0x1c4>)
 80022fe:	f000 fe27 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002302:	e082      	b.n	800240a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a45      	ldr	r2, [pc, #276]	@ (8002420 <HAL_UART_MspInit+0x1c8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d13b      	bne.n	8002386 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002312:	2300      	movs	r3, #0
 8002314:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800231a:	4618      	mov	r0, r3
 800231c:	f001 fe4c 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8002326:	f7ff feb1 	bl	800208c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800232a:	4b3b      	ldr	r3, [pc, #236]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	4a3a      	ldr	r2, [pc, #232]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002334:	6413      	str	r3, [r2, #64]	@ 0x40
 8002336:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002342:	4b35      	ldr	r3, [pc, #212]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a34      	ldr	r2, [pc, #208]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b32      	ldr	r3, [pc, #200]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800235a:	2360      	movs	r3, #96	@ 0x60
 800235c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002372:	2307      	movs	r3, #7
 8002374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002378:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800237c:	4619      	mov	r1, r3
 800237e:	4829      	ldr	r0, [pc, #164]	@ (8002424 <HAL_UART_MspInit+0x1cc>)
 8002380:	f000 fde6 	bl	8002f50 <HAL_GPIO_Init>
}
 8002384:	e041      	b.n	800240a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a27      	ldr	r2, [pc, #156]	@ (8002428 <HAL_UART_MspInit+0x1d0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d13c      	bne.n	800240a <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002396:	2300      	movs	r3, #0
 8002398:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fe0a 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x156>
      Error_Handler();
 80023aa:	f7ff fe6f 	bl	800208c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ba:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f8:	2307      	movs	r3, #7
 80023fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fe:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002402:	4619      	mov	r1, r3
 8002404:	4807      	ldr	r0, [pc, #28]	@ (8002424 <HAL_UART_MspInit+0x1cc>)
 8002406:	f000 fda3 	bl	8002f50 <HAL_GPIO_Init>
}
 800240a:	bf00      	nop
 800240c:	37c8      	adds	r7, #200	@ 0xc8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40004c00 	.word	0x40004c00
 8002418:	40023800 	.word	0x40023800
 800241c:	40020800 	.word	0x40020800
 8002420:	40004400 	.word	0x40004400
 8002424:	40020c00 	.word	0x40020c00
 8002428:	40004800 	.word	0x40004800

0800242c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0ae      	sub	sp, #184	@ 0xb8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2290      	movs	r2, #144	@ 0x90
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f006 fb0d 	bl	8008a6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800245a:	d159      	bne.n	8002510 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800245c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002460:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fda3 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002478:	f7ff fe08 	bl	800208c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247c:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	4a25      	ldr	r2, [pc, #148]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6313      	str	r3, [r2, #48]	@ 0x30
 8002488:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002494:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002498:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024ae:	230a      	movs	r3, #10
 80024b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4818      	ldr	r0, [pc, #96]	@ (800251c <HAL_PCD_MspInit+0xf0>)
 80024bc:	f000 fd48 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024d8:	4619      	mov	r1, r3
 80024da:	4810      	ldr	r0, [pc, #64]	@ (800251c <HAL_PCD_MspInit+0xf0>)
 80024dc:	f000 fd38 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ea:	6353      	str	r3, [r2, #52]	@ 0x34
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fc:	4a06      	ldr	r2, [pc, #24]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002502:	6453      	str	r3, [r2, #68]	@ 0x44
 8002504:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002510:	bf00      	nop
 8002512:	37b8      	adds	r7, #184	@ 0xb8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <NMI_Handler+0x4>

08002528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <MemManage_Handler+0x4>

08002538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <UsageFault_Handler+0x4>

08002548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800255a:	f000 f881 	bl	8002660 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800255e:	f005 f945 	bl	80077ec <xTaskGetSchedulerState>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d001      	beq.n	800256c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002568:	f005 fffe 	bl	8008568 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <SystemInit+0x20>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <SystemInit+0x20>)
 800257c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002594:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002598:	480d      	ldr	r0, [pc, #52]	@ (80025d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800259a:	490e      	ldr	r1, [pc, #56]	@ (80025d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800259c:	4a0e      	ldr	r2, [pc, #56]	@ (80025d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a0:	e002      	b.n	80025a8 <LoopCopyDataInit>

080025a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a6:	3304      	adds	r3, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ac:	d3f9      	bcc.n	80025a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ae:	4a0b      	ldr	r2, [pc, #44]	@ (80025dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025b0:	4c0b      	ldr	r4, [pc, #44]	@ (80025e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b4:	e001      	b.n	80025ba <LoopFillZerobss>

080025b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b8:	3204      	adds	r2, #4

080025ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025bc:	d3fb      	bcc.n	80025b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025be:	f7ff ffd7 	bl	8002570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025c2:	f006 fab1 	bl	8008b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c6:	f7ff faa5 	bl	8001b14 <main>
  bx  lr    
 80025ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80025d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80025d8:	08008de8 	.word	0x08008de8
  ldr r2, =_sbss
 80025dc:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80025e0:	20005ed0 	.word	0x20005ed0

080025e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC_IRQHandler>

080025e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ea:	2003      	movs	r0, #3
 80025ec:	f000 f92e 	bl	800284c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f0:	200f      	movs	r0, #15
 80025f2:	f000 f805 	bl	8002600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f6:	f7ff fd4f 	bl	8002098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <HAL_InitTick+0x54>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_InitTick+0x58>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002616:	fbb3 f3f1 	udiv	r3, r3, r1
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f93b 	bl	800289a <HAL_SYSTICK_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00e      	b.n	800264c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d80a      	bhi.n	800264a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002634:	2200      	movs	r2, #0
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f000 f911 	bl	8002862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002640:	4a06      	ldr	r2, [pc, #24]	@ (800265c <HAL_InitTick+0x5c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	e000      	b.n	800264c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000000 	.word	0x20000000
 8002658:	20000008 	.word	0x20000008
 800265c:	20000004 	.word	0x20000004

08002660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_IncTick+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_IncTick+0x24>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <HAL_IncTick+0x24>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000008 	.word	0x20000008
 8002684:	200013ac 	.word	0x200013ac

08002688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_GetTick+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	200013ac 	.word	0x200013ac

080026a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff ffee 	bl	8002688 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d005      	beq.n	80026c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_Delay+0x44>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c6:	bf00      	nop
 80026c8:	f7ff ffde 	bl	8002688 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d8f7      	bhi.n	80026c8 <HAL_Delay+0x28>
  {
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000008 	.word	0x20000008

080026e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <__NVIC_SetPriorityGrouping+0x40>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <__NVIC_SetPriorityGrouping+0x44>)
 8002712:	4313      	orrs	r3, r2
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <__NVIC_SetPriorityGrouping+0x40>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00
 800272c:	05fa0000 	.word	0x05fa0000

08002730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <__NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	db0a      	blt.n	8002776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	490c      	ldr	r1, [pc, #48]	@ (8002798 <__NVIC_SetPriority+0x4c>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	440b      	add	r3, r1
 8002770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002774:	e00a      	b.n	800278c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4908      	ldr	r1, [pc, #32]	@ (800279c <__NVIC_SetPriority+0x50>)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3b04      	subs	r3, #4
 8002784:	0112      	lsls	r2, r2, #4
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	440b      	add	r3, r1
 800278a:	761a      	strb	r2, [r3, #24]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000e100 	.word	0xe000e100
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	@ 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f1c3 0307 	rsb	r3, r3, #7
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	bf28      	it	cs
 80027be:	2304      	movcs	r3, #4
 80027c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d902      	bls.n	80027d0 <NVIC_EncodePriority+0x30>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3b03      	subs	r3, #3
 80027ce:	e000      	b.n	80027d2 <NVIC_EncodePriority+0x32>
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	401a      	ands	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	4313      	orrs	r3, r2
         );
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	@ 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002818:	d301      	bcc.n	800281e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281a:	2301      	movs	r3, #1
 800281c:	e00f      	b.n	800283e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281e:	4a0a      	ldr	r2, [pc, #40]	@ (8002848 <SysTick_Config+0x40>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002826:	210f      	movs	r1, #15
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f7ff ff8e 	bl	800274c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <SysTick_Config+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002836:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <SysTick_Config+0x40>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010

0800284c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff47 	bl	80026e8 <__NVIC_SetPriorityGrouping>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff5c 	bl	8002730 <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff8e 	bl	80027a0 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5d 	bl	800274c <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffb0 	bl	8002808 <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e086      	b.n	80029d4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2223      	movs	r2, #35	@ 0x23
 80028d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff fc05 	bl	80020e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	4b3f      	ldr	r3, [pc, #252]	@ (80029dc <HAL_ETH_Init+0x128>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	4a3e      	ldr	r2, [pc, #248]	@ (80029dc <HAL_ETH_Init+0x128>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ea:	4b3c      	ldr	r3, [pc, #240]	@ (80029dc <HAL_ETH_Init+0x128>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80028f6:	4b3a      	ldr	r3, [pc, #232]	@ (80029e0 <HAL_ETH_Init+0x12c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a39      	ldr	r2, [pc, #228]	@ (80029e0 <HAL_ETH_Init+0x12c>)
 80028fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002900:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002902:	4b37      	ldr	r3, [pc, #220]	@ (80029e0 <HAL_ETH_Init+0x12c>)
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4935      	ldr	r1, [pc, #212]	@ (80029e0 <HAL_ETH_Init+0x12c>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002910:	4b33      	ldr	r3, [pc, #204]	@ (80029e0 <HAL_ETH_Init+0x12c>)
 8002912:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800292a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800292c:	f7ff feac 	bl	8002688 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002932:	e011      	b.n	8002958 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002934:	f7ff fea8 	bl	8002688 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002942:	d909      	bls.n	8002958 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2204      	movs	r2, #4
 8002948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	22e0      	movs	r2, #224	@ 0xe0
 8002950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e03d      	b.n	80029d4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e4      	bne.n	8002934 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f97a 	bl	8002c64 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fa25 	bl	8002dc0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa7b 	bl	8002e72 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	461a      	mov	r2, r3
 8002982:	2100      	movs	r1, #0
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f9e3 	bl	8002d50 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002998:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <HAL_ETH_Init+0x130>)
 80029a8:	430b      	orrs	r3, r1
 80029aa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80029be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2210      	movs	r2, #16
 80029ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40013800 	.word	0x40013800
 80029e4:	00020060 	.word	0x00020060

080029e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4b53      	ldr	r3, [pc, #332]	@ (8002b4c <ETH_SetMACConfig+0x164>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	7b9b      	ldrb	r3, [r3, #14]
 8002a06:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	7c12      	ldrb	r2, [r2, #16]
 8002a0c:	2a00      	cmp	r2, #0
 8002a0e:	d102      	bne.n	8002a16 <ETH_SetMACConfig+0x2e>
 8002a10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a14:	e000      	b.n	8002a18 <ETH_SetMACConfig+0x30>
 8002a16:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a18:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	7c52      	ldrb	r2, [r2, #17]
 8002a1e:	2a00      	cmp	r2, #0
 8002a20:	d102      	bne.n	8002a28 <ETH_SetMACConfig+0x40>
 8002a22:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002a26:	e000      	b.n	8002a2a <ETH_SetMACConfig+0x42>
 8002a28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a2a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	7fdb      	ldrb	r3, [r3, #31]
 8002a36:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a38:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	7f92      	ldrb	r2, [r2, #30]
 8002a44:	2a00      	cmp	r2, #0
 8002a46:	d102      	bne.n	8002a4e <ETH_SetMACConfig+0x66>
 8002a48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a4c:	e000      	b.n	8002a50 <ETH_SetMACConfig+0x68>
 8002a4e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	7f1b      	ldrb	r3, [r3, #28]
 8002a56:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a58:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a5e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	791b      	ldrb	r3, [r3, #4]
 8002a64:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a6e:	2a00      	cmp	r2, #0
 8002a70:	d102      	bne.n	8002a78 <ETH_SetMACConfig+0x90>
 8002a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a76:	e000      	b.n	8002a7a <ETH_SetMACConfig+0x92>
 8002a78:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	7bdb      	ldrb	r3, [r3, #15]
 8002a80:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a82:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a88:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a90:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002a92:	4313      	orrs	r3, r2
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f7ff fdf8 	bl	80026a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ace:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002ad6:	2a00      	cmp	r2, #0
 8002ad8:	d101      	bne.n	8002ade <ETH_SetMACConfig+0xf6>
 8002ada:	2280      	movs	r2, #128	@ 0x80
 8002adc:	e000      	b.n	8002ae0 <ETH_SetMACConfig+0xf8>
 8002ade:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ae0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ae6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002aee:	2a01      	cmp	r2, #1
 8002af0:	d101      	bne.n	8002af6 <ETH_SetMACConfig+0x10e>
 8002af2:	2208      	movs	r2, #8
 8002af4:	e000      	b.n	8002af8 <ETH_SetMACConfig+0x110>
 8002af6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002af8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002b00:	2a01      	cmp	r2, #1
 8002b02:	d101      	bne.n	8002b08 <ETH_SetMACConfig+0x120>
 8002b04:	2204      	movs	r2, #4
 8002b06:	e000      	b.n	8002b0a <ETH_SetMACConfig+0x122>
 8002b08:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002b12:	2a01      	cmp	r2, #1
 8002b14:	d101      	bne.n	8002b1a <ETH_SetMACConfig+0x132>
 8002b16:	2202      	movs	r2, #2
 8002b18:	e000      	b.n	8002b1c <ETH_SetMACConfig+0x134>
 8002b1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7ff fdb3 	bl	80026a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	fd20810f 	.word	0xfd20810f

08002b50 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4b3d      	ldr	r3, [pc, #244]	@ (8002c60 <ETH_SetDMAConfig+0x110>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	7b1b      	ldrb	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d102      	bne.n	8002b7c <ETH_SetDMAConfig+0x2c>
 8002b76:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b7a:	e000      	b.n	8002b7e <ETH_SetDMAConfig+0x2e>
 8002b7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	7b5b      	ldrb	r3, [r3, #13]
 8002b82:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b84:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	7f52      	ldrb	r2, [r2, #29]
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	d102      	bne.n	8002b94 <ETH_SetDMAConfig+0x44>
 8002b8e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b92:	e000      	b.n	8002b96 <ETH_SetDMAConfig+0x46>
 8002b94:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b96:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	7b9b      	ldrb	r3, [r3, #14]
 8002b9c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b9e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ba4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	7f1b      	ldrb	r3, [r3, #28]
 8002baa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002bac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	7f9b      	ldrb	r3, [r3, #30]
 8002bb2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bb4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bc2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7ff fd5a 	bl	80026a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	791b      	ldrb	r3, [r3, #4]
 8002bfe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c04:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c0a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c10:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c18:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c1a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c22:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c28:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c36:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7ff fd2b 	bl	80026a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	f8de3f23 	.word	0xf8de3f23

08002c64 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b0a6      	sub	sp, #152	@ 0x98
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ccc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002cd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002cde:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff fe7f 	bl	80029e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002cea:	2301      	movs	r3, #1
 8002cec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d1e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d24:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d2a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d3a:	f107 0308 	add.w	r3, r7, #8
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff05 	bl	8002b50 <ETH_SetDMAConfig>
}
 8002d46:	bf00      	nop
 8002d48:	3798      	adds	r7, #152	@ 0x98
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3305      	adds	r3, #5
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	3204      	adds	r2, #4
 8002d68:	7812      	ldrb	r2, [r2, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4b11      	ldr	r3, [pc, #68]	@ (8002db8 <ETH_MACAddressConfig+0x68>)
 8002d72:	4413      	add	r3, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3303      	adds	r3, #3
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	061a      	lsls	r2, r3, #24
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3302      	adds	r3, #2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	4313      	orrs	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <ETH_MACAddressConfig+0x6c>)
 8002da2:	4413      	add	r3, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6013      	str	r3, [r2, #0]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40028040 	.word	0x40028040
 8002dbc:	40028044 	.word	0x40028044

08002dc0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e03e      	b.n	8002e4c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68d9      	ldr	r1, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2200      	movs	r2, #0
 8002dea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2200      	movs	r2, #0
 8002df6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	3206      	adds	r2, #6
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d80c      	bhi.n	8002e30 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	e004      	b.n	8002e3a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d9bd      	bls.n	8002dce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e64:	611a      	str	r2, [r3, #16]
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e048      	b.n	8002f12 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6919      	ldr	r1, [r3, #16]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2200      	movs	r2, #0
 8002eae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002ebc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	3212      	adds	r2, #18
 8002ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d80c      	bhi.n	8002f02 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6919      	ldr	r1, [r3, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	440b      	add	r3, r1
 8002efa:	461a      	mov	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	60da      	str	r2, [r3, #12]
 8002f00:	e004      	b.n	8002f0c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d9b3      	bls.n	8002e80 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f42:	60da      	str	r2, [r3, #12]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	e175      	b.n	800325c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 8164 	bne.w	8003256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d005      	beq.n	8002fa6 <HAL_GPIO_Init+0x56>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d130      	bne.n	8003008 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0201 	and.w	r2, r3, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b03      	cmp	r3, #3
 8003012:	d017      	beq.n	8003044 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d123      	bne.n	8003098 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	08da      	lsrs	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3208      	adds	r2, #8
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	69b9      	ldr	r1, [r7, #24]
 8003094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80be 	beq.w	8003256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	4b66      	ldr	r3, [pc, #408]	@ (8003274 <HAL_GPIO_Init+0x324>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_GPIO_Init+0x324>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e6:	4b63      	ldr	r3, [pc, #396]	@ (8003274 <HAL_GPIO_Init+0x324>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030f2:	4a61      	ldr	r2, [pc, #388]	@ (8003278 <HAL_GPIO_Init+0x328>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a58      	ldr	r2, [pc, #352]	@ (800327c <HAL_GPIO_Init+0x32c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d037      	beq.n	800318e <HAL_GPIO_Init+0x23e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a57      	ldr	r2, [pc, #348]	@ (8003280 <HAL_GPIO_Init+0x330>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <HAL_GPIO_Init+0x23a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a56      	ldr	r2, [pc, #344]	@ (8003284 <HAL_GPIO_Init+0x334>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02b      	beq.n	8003186 <HAL_GPIO_Init+0x236>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a55      	ldr	r2, [pc, #340]	@ (8003288 <HAL_GPIO_Init+0x338>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d025      	beq.n	8003182 <HAL_GPIO_Init+0x232>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a54      	ldr	r2, [pc, #336]	@ (800328c <HAL_GPIO_Init+0x33c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01f      	beq.n	800317e <HAL_GPIO_Init+0x22e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a53      	ldr	r2, [pc, #332]	@ (8003290 <HAL_GPIO_Init+0x340>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d019      	beq.n	800317a <HAL_GPIO_Init+0x22a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a52      	ldr	r2, [pc, #328]	@ (8003294 <HAL_GPIO_Init+0x344>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_GPIO_Init+0x226>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a51      	ldr	r2, [pc, #324]	@ (8003298 <HAL_GPIO_Init+0x348>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00d      	beq.n	8003172 <HAL_GPIO_Init+0x222>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a50      	ldr	r2, [pc, #320]	@ (800329c <HAL_GPIO_Init+0x34c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <HAL_GPIO_Init+0x21e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4f      	ldr	r2, [pc, #316]	@ (80032a0 <HAL_GPIO_Init+0x350>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_GPIO_Init+0x21a>
 8003166:	2309      	movs	r3, #9
 8003168:	e012      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800316a:	230a      	movs	r3, #10
 800316c:	e010      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800316e:	2308      	movs	r3, #8
 8003170:	e00e      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003172:	2307      	movs	r3, #7
 8003174:	e00c      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003176:	2306      	movs	r3, #6
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800317a:	2305      	movs	r3, #5
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800318e:	2300      	movs	r3, #0
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031a0:	4935      	ldr	r1, [pc, #212]	@ (8003278 <HAL_GPIO_Init+0x328>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ae:	4b3d      	ldr	r3, [pc, #244]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d2:	4a34      	ldr	r2, [pc, #208]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d8:	4b32      	ldr	r3, [pc, #200]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031fc:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003202:	4b28      	ldr	r3, [pc, #160]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003226:	4a1f      	ldr	r2, [pc, #124]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322c:	4b1d      	ldr	r3, [pc, #116]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003250:	4a14      	ldr	r2, [pc, #80]	@ (80032a4 <HAL_GPIO_Init+0x354>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	f67f ae86 	bls.w	8002f70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3724      	adds	r7, #36	@ 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800
 8003298:	40021c00 	.word	0x40021c00
 800329c:	40022000 	.word	0x40022000
 80032a0:	40022400 	.word	0x40022400
 80032a4:	40013c00 	.word	0x40013c00

080032a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
 80032b4:	4613      	mov	r3, r2
 80032b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b8:	787b      	ldrb	r3, [r7, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032c4:	e003      	b.n	80032ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	041a      	lsls	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	619a      	str	r2, [r3, #24]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af02      	add	r7, sp, #8
 80032e0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e108      	b.n	80034fe <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff f890 	bl	800242c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2203      	movs	r2, #3
 8003310:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800331a:	d102      	bne.n	8003322 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f002 f8e8 	bl	80054fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7c1a      	ldrb	r2, [r3, #16]
 8003334:	f88d 2000 	strb.w	r2, [sp]
 8003338:	3304      	adds	r3, #4
 800333a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333c:	f002 f884 	bl	8005448 <USB_CoreInit>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0d5      	b.n	80034fe <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f002 f8e0 	bl	800551e <USB_SetCurrentMode>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0c6      	b.n	80034fe <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
 8003374:	e04a      	b.n	800340c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	3315      	adds	r3, #21
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	3314      	adds	r3, #20
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	b298      	uxth	r0, r3
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	332e      	adds	r3, #46	@ 0x2e
 80033b2:	4602      	mov	r2, r0
 80033b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3318      	adds	r3, #24
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	331c      	adds	r3, #28
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	3320      	adds	r3, #32
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	3324      	adds	r3, #36	@ 0x24
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	3301      	adds	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	791b      	ldrb	r3, [r3, #4]
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	429a      	cmp	r2, r3
 8003414:	d3af      	bcc.n	8003376 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003416:	2300      	movs	r3, #0
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	e044      	b.n	80034a6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	3301      	adds	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	791b      	ldrb	r3, [r3, #4]
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d3b5      	bcc.n	800341c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7c1a      	ldrb	r2, [r3, #16]
 80034b8:	f88d 2000 	strb.w	r2, [sp]
 80034bc:	3304      	adds	r3, #4
 80034be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c0:	f002 f87a 	bl	80055b8 <USB_DevInit>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e013      	b.n	80034fe <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	7b1b      	ldrb	r3, [r3, #12]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f80b 	bl	8003508 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 fa35 	bl	8005966 <USB_DevDisconnect>

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003536:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_PCDEx_ActivateLPM+0x44>)
 8003538:	4313      	orrs	r3, r2
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	10000003 	.word	0x10000003

08003550 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a04      	ldr	r2, [pc, #16]	@ (800356c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800355a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40007000 	.word	0x40007000

08003570 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	4b23      	ldr	r3, [pc, #140]	@ (8003608 <HAL_PWREx_EnableOverDrive+0x98>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	4a22      	ldr	r2, [pc, #136]	@ (8003608 <HAL_PWREx_EnableOverDrive+0x98>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003584:	6413      	str	r3, [r2, #64]	@ 0x40
 8003586:	4b20      	ldr	r3, [pc, #128]	@ (8003608 <HAL_PWREx_EnableOverDrive+0x98>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003592:	4b1e      	ldr	r3, [pc, #120]	@ (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1d      	ldr	r2, [pc, #116]	@ (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800359e:	f7ff f873 	bl	8002688 <HAL_GetTick>
 80035a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035a4:	e009      	b.n	80035ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035a6:	f7ff f86f 	bl	8002688 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035b4:	d901      	bls.n	80035ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e022      	b.n	8003600 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035ba:	4b14      	ldr	r3, [pc, #80]	@ (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c6:	d1ee      	bne.n	80035a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035c8:	4b10      	ldr	r3, [pc, #64]	@ (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0f      	ldr	r2, [pc, #60]	@ (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035d4:	f7ff f858 	bl	8002688 <HAL_GetTick>
 80035d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035da:	e009      	b.n	80035f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035dc:	f7ff f854 	bl	8002688 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035ea:	d901      	bls.n	80035f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e007      	b.n	8003600 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035f0:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_PWREx_EnableOverDrive+0x9c>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035fc:	d1ee      	bne.n	80035dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	40007000 	.word	0x40007000

08003610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e29b      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8087 	beq.w	8003742 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003634:	4b96      	ldr	r3, [pc, #600]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b04      	cmp	r3, #4
 800363e:	d00c      	beq.n	800365a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003640:	4b93      	ldr	r3, [pc, #588]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d112      	bne.n	8003672 <HAL_RCC_OscConfig+0x62>
 800364c:	4b90      	ldr	r3, [pc, #576]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003658:	d10b      	bne.n	8003672 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365a:	4b8d      	ldr	r3, [pc, #564]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d06c      	beq.n	8003740 <HAL_RCC_OscConfig+0x130>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d168      	bne.n	8003740 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e275      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x7a>
 800367c:	4b84      	ldr	r3, [pc, #528]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a83      	ldr	r2, [pc, #524]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e02e      	b.n	80036e8 <HAL_RCC_OscConfig+0xd8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x9c>
 8003692:	4b7f      	ldr	r3, [pc, #508]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7e      	ldr	r2, [pc, #504]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b7c      	ldr	r3, [pc, #496]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7b      	ldr	r2, [pc, #492]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e01d      	b.n	80036e8 <HAL_RCC_OscConfig+0xd8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0xc0>
 80036b6:	4b76      	ldr	r3, [pc, #472]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a75      	ldr	r2, [pc, #468]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b73      	ldr	r3, [pc, #460]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a72      	ldr	r2, [pc, #456]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0xd8>
 80036d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80036e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe ffca 	bl	8002688 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fe ffc6 	bl	8002688 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	@ 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e229      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b61      	ldr	r3, [pc, #388]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0xe8>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe ffb6 	bl	8002688 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fe ffb2 	bl	8002688 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	@ 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e215      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	4b57      	ldr	r3, [pc, #348]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x110>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d069      	beq.n	8003822 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800374e:	4b50      	ldr	r3, [pc, #320]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375a:	4b4d      	ldr	r3, [pc, #308]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x190>
 8003766:	4b4a      	ldr	r3, [pc, #296]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	4b47      	ldr	r3, [pc, #284]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x17a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1e9      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b41      	ldr	r3, [pc, #260]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	493d      	ldr	r1, [pc, #244]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	e040      	b.n	8003822 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d023      	beq.n	80037f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a8:	4b39      	ldr	r3, [pc, #228]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a38      	ldr	r2, [pc, #224]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe ff68 	bl	8002688 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037bc:	f7fe ff64 	bl	8002688 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1c7      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ce:	4b30      	ldr	r3, [pc, #192]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b2d      	ldr	r3, [pc, #180]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4929      	ldr	r1, [pc, #164]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]
 80037ee:	e018      	b.n	8003822 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f0:	4b27      	ldr	r3, [pc, #156]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a26      	ldr	r2, [pc, #152]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe ff44 	bl	8002688 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003804:	f7fe ff40 	bl	8002688 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e1a3      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	4b1e      	ldr	r3, [pc, #120]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d038      	beq.n	80038a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d019      	beq.n	800386a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4b16      	ldr	r3, [pc, #88]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383a:	4a15      	ldr	r2, [pc, #84]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003842:	f7fe ff21 	bl	8002688 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384a:	f7fe ff1d 	bl	8002688 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e180      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385c:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800385e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x23a>
 8003868:	e01a      	b.n	80038a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386a:	4b09      	ldr	r3, [pc, #36]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 800386c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386e:	4a08      	ldr	r2, [pc, #32]	@ (8003890 <HAL_RCC_OscConfig+0x280>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fe ff07 	bl	8002688 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387e:	f7fe ff03 	bl	8002688 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d903      	bls.n	8003894 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e166      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
 8003890:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	4b92      	ldr	r3, [pc, #584]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ee      	bne.n	800387e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80a4 	beq.w	80039f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ae:	4b8c      	ldr	r3, [pc, #560]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10d      	bne.n	80038d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	4b89      	ldr	r3, [pc, #548]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a88      	ldr	r2, [pc, #544]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	4b86      	ldr	r3, [pc, #536]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d6:	4b83      	ldr	r3, [pc, #524]	@ (8003ae4 <HAL_RCC_OscConfig+0x4d4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d118      	bne.n	8003914 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038e2:	4b80      	ldr	r3, [pc, #512]	@ (8003ae4 <HAL_RCC_OscConfig+0x4d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ae4 <HAL_RCC_OscConfig+0x4d4>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ee:	f7fe fecb 	bl	8002688 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f6:	f7fe fec7 	bl	8002688 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b64      	cmp	r3, #100	@ 0x64
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e12a      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003908:	4b76      	ldr	r3, [pc, #472]	@ (8003ae4 <HAL_RCC_OscConfig+0x4d4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x31a>
 800391c:	4b70      	ldr	r3, [pc, #448]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	4a6f      	ldr	r2, [pc, #444]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6713      	str	r3, [r2, #112]	@ 0x70
 8003928:	e02d      	b.n	8003986 <HAL_RCC_OscConfig+0x376>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x33c>
 8003932:	4b6b      	ldr	r3, [pc, #428]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	4a6a      	ldr	r2, [pc, #424]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	6713      	str	r3, [r2, #112]	@ 0x70
 800393e:	4b68      	ldr	r3, [pc, #416]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	4a67      	ldr	r2, [pc, #412]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	6713      	str	r3, [r2, #112]	@ 0x70
 800394a:	e01c      	b.n	8003986 <HAL_RCC_OscConfig+0x376>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b05      	cmp	r3, #5
 8003952:	d10c      	bne.n	800396e <HAL_RCC_OscConfig+0x35e>
 8003954:	4b62      	ldr	r3, [pc, #392]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003958:	4a61      	ldr	r2, [pc, #388]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003960:	4b5f      	ldr	r3, [pc, #380]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003964:	4a5e      	ldr	r2, [pc, #376]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6713      	str	r3, [r2, #112]	@ 0x70
 800396c:	e00b      	b.n	8003986 <HAL_RCC_OscConfig+0x376>
 800396e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a5b      	ldr	r2, [pc, #364]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
 800397a:	4b59      	ldr	r3, [pc, #356]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	4a58      	ldr	r2, [pc, #352]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003980:	f023 0304 	bic.w	r3, r3, #4
 8003984:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d015      	beq.n	80039ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe fe7b 	bl	8002688 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fe fe77 	bl	8002688 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0d8      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	4b4c      	ldr	r3, [pc, #304]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ee      	beq.n	8003996 <HAL_RCC_OscConfig+0x386>
 80039b8:	e014      	b.n	80039e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fe fe65 	bl	8002688 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fe fe61 	bl	8002688 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0c2      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d8:	4b41      	ldr	r3, [pc, #260]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ee      	bne.n	80039c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d105      	bne.n	80039f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ea:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	4a3c      	ldr	r2, [pc, #240]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 80039f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80ae 	beq.w	8003b5c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a00:	4b37      	ldr	r3, [pc, #220]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d06d      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d14b      	bne.n	8003aac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a14:	4b32      	ldr	r3, [pc, #200]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a31      	ldr	r2, [pc, #196]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fe32 	bl	8002688 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe fe2e 	bl	8002688 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e091      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	4b29      	ldr	r3, [pc, #164]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	041b      	lsls	r3, r3, #16
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	071b      	lsls	r3, r3, #28
 8003a72:	491b      	ldr	r1, [pc, #108]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a78:	4b19      	ldr	r3, [pc, #100]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a18      	ldr	r2, [pc, #96]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fe00 	bl	8002688 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe fdfc 	bl	8002688 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e05f      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x47c>
 8003aaa:	e057      	b.n	8003b5c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fde6 	bl	8002688 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fde2 	bl	8002688 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e045      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x4b0>
 8003ade:	e03d      	b.n	8003b5c <HAL_RCC_OscConfig+0x54c>
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <HAL_RCC_OscConfig+0x558>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d030      	beq.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d129      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d122      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b18:	4013      	ands	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d119      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	3b01      	subs	r3, #1
 8003b32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d10f      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b52:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0d0      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b84:	4b6a      	ldr	r3, [pc, #424]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d910      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b67      	ldr	r3, [pc, #412]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 020f 	bic.w	r2, r3, #15
 8003b9a:	4965      	ldr	r1, [pc, #404]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b63      	ldr	r3, [pc, #396]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0b8      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bcc:	4b59      	ldr	r3, [pc, #356]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a58      	ldr	r2, [pc, #352]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be4:	4b53      	ldr	r3, [pc, #332]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a52      	ldr	r2, [pc, #328]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b50      	ldr	r3, [pc, #320]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	494d      	ldr	r1, [pc, #308]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d040      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d115      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e07f      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2e:	4b41      	ldr	r3, [pc, #260]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e073      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e06b      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4e:	4b39      	ldr	r3, [pc, #228]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 0203 	bic.w	r2, r3, #3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4936      	ldr	r1, [pc, #216]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fe fd12 	bl	8002688 <HAL_GetTick>
 8003c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c68:	f7fe fd0e 	bl	8002688 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e053      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 020c 	and.w	r2, r3, #12
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d1eb      	bne.n	8003c68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c90:	4b27      	ldr	r3, [pc, #156]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d210      	bcs.n	8003cc0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b24      	ldr	r3, [pc, #144]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 020f 	bic.w	r2, r3, #15
 8003ca6:	4922      	ldr	r1, [pc, #136]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b20      	ldr	r3, [pc, #128]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e032      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ccc:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4916      	ldr	r1, [pc, #88]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cea:	4b12      	ldr	r3, [pc, #72]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	490e      	ldr	r1, [pc, #56]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cfe:	f000 f821 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003d02:	4602      	mov	r2, r0
 8003d04:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	490a      	ldr	r1, [pc, #40]	@ (8003d38 <HAL_RCC_ClockConfig+0x1cc>)
 8003d10:	5ccb      	ldrb	r3, [r1, r3]
 8003d12:	fa22 f303 	lsr.w	r3, r2, r3
 8003d16:	4a09      	ldr	r2, [pc, #36]	@ (8003d3c <HAL_RCC_ClockConfig+0x1d0>)
 8003d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <HAL_RCC_ClockConfig+0x1d4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fc6e 	bl	8002600 <HAL_InitTick>

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023c00 	.word	0x40023c00
 8003d34:	40023800 	.word	0x40023800
 8003d38:	08008dc0 	.word	0x08008dc0
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	20000004 	.word	0x20000004

08003d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b094      	sub	sp, #80	@ 0x50
 8003d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d50:	2300      	movs	r3, #0
 8003d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d54:	2300      	movs	r3, #0
 8003d56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5c:	4b79      	ldr	r3, [pc, #484]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d00d      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x40>
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	f200 80e1 	bhi.w	8003f30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x34>
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d003      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d76:	e0db      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d78:	4b73      	ldr	r3, [pc, #460]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d7c:	e0db      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d7e:	4b73      	ldr	r3, [pc, #460]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003d80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d82:	e0d8      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d84:	4b6f      	ldr	r3, [pc, #444]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	099b      	lsrs	r3, r3, #6
 8003da0:	2200      	movs	r2, #0
 8003da2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003da4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003db6:	4622      	mov	r2, r4
 8003db8:	462b      	mov	r3, r5
 8003dba:	f04f 0000 	mov.w	r0, #0
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	0159      	lsls	r1, r3, #5
 8003dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc8:	0150      	lsls	r0, r2, #5
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4621      	mov	r1, r4
 8003dd0:	1a51      	subs	r1, r2, r1
 8003dd2:	6139      	str	r1, [r7, #16]
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de8:	4659      	mov	r1, fp
 8003dea:	018b      	lsls	r3, r1, #6
 8003dec:	4651      	mov	r1, sl
 8003dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df2:	4651      	mov	r1, sl
 8003df4:	018a      	lsls	r2, r1, #6
 8003df6:	4651      	mov	r1, sl
 8003df8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	eb63 0901 	sbc.w	r9, r3, r1
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e16:	4690      	mov	r8, r2
 8003e18:	4699      	mov	r9, r3
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	eb18 0303 	adds.w	r3, r8, r3
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	462b      	mov	r3, r5
 8003e24:	eb49 0303 	adc.w	r3, r9, r3
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e36:	4629      	mov	r1, r5
 8003e38:	024b      	lsls	r3, r1, #9
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e40:	4621      	mov	r1, r4
 8003e42:	024a      	lsls	r2, r1, #9
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e54:	f7fc fa3e 	bl	80002d4 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e60:	e058      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e62:	4b38      	ldr	r3, [pc, #224]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	099b      	lsrs	r3, r3, #6
 8003e68:	2200      	movs	r2, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	2300      	movs	r3, #0
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	464b      	mov	r3, r9
 8003e80:	f04f 0000 	mov.w	r0, #0
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	0159      	lsls	r1, r3, #5
 8003e8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8e:	0150      	lsls	r0, r2, #5
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4641      	mov	r1, r8
 8003e96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003eac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003eb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	00eb      	lsls	r3, r5, #3
 8003ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eca:	00e2      	lsls	r2, r4, #3
 8003ecc:	4614      	mov	r4, r2
 8003ece:	461d      	mov	r5, r3
 8003ed0:	4643      	mov	r3, r8
 8003ed2:	18e3      	adds	r3, r4, r3
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	eb45 0303 	adc.w	r3, r5, r3
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eea:	4629      	mov	r1, r5
 8003eec:	028b      	lsls	r3, r1, #10
 8003eee:	4621      	mov	r1, r4
 8003ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	028a      	lsls	r2, r1, #10
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003efe:	2200      	movs	r2, #0
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	61fa      	str	r2, [r7, #28]
 8003f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f08:	f7fc f9e4 	bl	80002d4 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4613      	mov	r3, r2
 8003f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f2e:	e002      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3750      	adds	r7, #80	@ 0x50
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	00f42400 	.word	0x00f42400
 8003f4c:	007a1200 	.word	0x007a1200

08003f50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f54:	4b03      	ldr	r3, [pc, #12]	@ (8003f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000000 	.word	0x20000000

08003f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f6c:	f7ff fff0 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	0a9b      	lsrs	r3, r3, #10
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	4903      	ldr	r1, [pc, #12]	@ (8003f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7e:	5ccb      	ldrb	r3, [r1, r3]
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	08008dd0 	.word	0x08008dd0

08003f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f94:	f7ff ffdc 	bl	8003f50 <HAL_RCC_GetHCLKFreq>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	0b5b      	lsrs	r3, r3, #13
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	4903      	ldr	r1, [pc, #12]	@ (8003fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa6:	5ccb      	ldrb	r3, [r1, r3]
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	08008dd0 	.word	0x08008dd0

08003fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fe0:	4b69      	ldr	r3, [pc, #420]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a68      	ldr	r2, [pc, #416]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003fea:	6093      	str	r3, [r2, #8]
 8003fec:	4b66      	ldr	r3, [pc, #408]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff4:	4964      	ldr	r1, [pc, #400]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004002:	2301      	movs	r3, #1
 8004004:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d017      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004012:	4b5d      	ldr	r3, [pc, #372]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004018:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	4959      	ldr	r1, [pc, #356]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004030:	d101      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004032:	2301      	movs	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800403e:	2301      	movs	r3, #1
 8004040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d017      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800404e:	4b4e      	ldr	r3, [pc, #312]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004054:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	494a      	ldr	r1, [pc, #296]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800406c:	d101      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800406e:	2301      	movs	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800408a:	2301      	movs	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 808b 	beq.w	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800409c:	4b3a      	ldr	r3, [pc, #232]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	4a39      	ldr	r2, [pc, #228]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a8:	4b37      	ldr	r3, [pc, #220]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040b4:	4b35      	ldr	r3, [pc, #212]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a34      	ldr	r2, [pc, #208]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c0:	f7fe fae2 	bl	8002688 <HAL_GetTick>
 80040c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c8:	f7fe fade 	bl	8002688 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	@ 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e38f      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040da:	4b2c      	ldr	r3, [pc, #176]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040e6:	4b28      	ldr	r3, [pc, #160]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d035      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d02e      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004104:	4b20      	ldr	r3, [pc, #128]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800410e:	4b1e      	ldr	r3, [pc, #120]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004112:	4a1d      	ldr	r2, [pc, #116]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004118:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800411a:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411e:	4a1a      	ldr	r2, [pc, #104]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004124:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004126:	4a18      	ldr	r2, [pc, #96]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800412c:	4b16      	ldr	r3, [pc, #88]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d114      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe faa6 	bl	8002688 <HAL_GetTick>
 800413c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fe faa2 	bl	8002688 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e351      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	4b0c      	ldr	r3, [pc, #48]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ee      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800416a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800416e:	d111      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004170:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800417e:	400b      	ands	r3, r1
 8004180:	4901      	ldr	r1, [pc, #4]	@ (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
 8004186:	e00b      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004188:	40023800 	.word	0x40023800
 800418c:	40007000 	.word	0x40007000
 8004190:	0ffffcff 	.word	0x0ffffcff
 8004194:	4bac      	ldr	r3, [pc, #688]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4aab      	ldr	r2, [pc, #684]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800419e:	6093      	str	r3, [r2, #8]
 80041a0:	4ba9      	ldr	r3, [pc, #676]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	49a6      	ldr	r1, [pc, #664]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041be:	4ba2      	ldr	r3, [pc, #648]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041c4:	4aa0      	ldr	r2, [pc, #640]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80041ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	499b      	ldr	r1, [pc, #620]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ec:	4b96      	ldr	r3, [pc, #600]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041fa:	4993      	ldr	r1, [pc, #588]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800420e:	4b8e      	ldr	r3, [pc, #568]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004214:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800421c:	498a      	ldr	r1, [pc, #552]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004230:	4b85      	ldr	r3, [pc, #532]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004236:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800423e:	4982      	ldr	r1, [pc, #520]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004252:	4b7d      	ldr	r3, [pc, #500]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004258:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004260:	4979      	ldr	r1, [pc, #484]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004274:	4b74      	ldr	r3, [pc, #464]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427a:	f023 0203 	bic.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	4971      	ldr	r1, [pc, #452]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004296:	4b6c      	ldr	r3, [pc, #432]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429c:	f023 020c 	bic.w	r2, r3, #12
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a4:	4968      	ldr	r1, [pc, #416]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042b8:	4b63      	ldr	r3, [pc, #396]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c6:	4960      	ldr	r1, [pc, #384]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042da:	4b5b      	ldr	r3, [pc, #364]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e8:	4957      	ldr	r1, [pc, #348]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042fc:	4b52      	ldr	r3, [pc, #328]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004302:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430a:	494f      	ldr	r1, [pc, #316]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800431e:	4b4a      	ldr	r3, [pc, #296]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004324:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	4946      	ldr	r1, [pc, #280]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004340:	4b41      	ldr	r3, [pc, #260]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004346:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	493e      	ldr	r1, [pc, #248]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004362:	4b39      	ldr	r3, [pc, #228]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004368:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004370:	4935      	ldr	r1, [pc, #212]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004384:	4b30      	ldr	r3, [pc, #192]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004392:	492d      	ldr	r1, [pc, #180]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d011      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043a6:	4b28      	ldr	r3, [pc, #160]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043b4:	4924      	ldr	r1, [pc, #144]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043c4:	d101      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043e6:	4b18      	ldr	r3, [pc, #96]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f4:	4914      	ldr	r1, [pc, #80]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00b      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004408:	4b0f      	ldr	r3, [pc, #60]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004418:	490b      	ldr	r1, [pc, #44]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800442c:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800443c:	4902      	ldr	r1, [pc, #8]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004444:	e002      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004458:	4b8a      	ldr	r3, [pc, #552]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800445e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004468:	4986      	ldr	r1, [pc, #536]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800447c:	4b81      	ldr	r3, [pc, #516]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800447e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004482:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800448c:	497d      	ldr	r1, [pc, #500]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d006      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 80d6 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044a8:	4b76      	ldr	r3, [pc, #472]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a75      	ldr	r2, [pc, #468]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b4:	f7fe f8e8 	bl	8002688 <HAL_GetTick>
 80044b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044bc:	f7fe f8e4 	bl	8002688 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	@ 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e195      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d021      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11d      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044ee:	4b65      	ldr	r3, [pc, #404]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044fc:	4b61      	ldr	r3, [pc, #388]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004502:	0e1b      	lsrs	r3, r3, #24
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	019a      	lsls	r2, r3, #6
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	071b      	lsls	r3, r3, #28
 8004522:	4958      	ldr	r1, [pc, #352]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800453e:	d00a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02e      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004554:	d129      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004556:	4b4b      	ldr	r3, [pc, #300]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004564:	4b47      	ldr	r3, [pc, #284]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	019a      	lsls	r2, r3, #6
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	071b      	lsls	r3, r3, #28
 800458a:	493e      	ldr	r1, [pc, #248]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004592:	4b3c      	ldr	r3, [pc, #240]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004598:	f023 021f 	bic.w	r2, r3, #31
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	3b01      	subs	r3, #1
 80045a2:	4938      	ldr	r1, [pc, #224]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01d      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045b6:	4b33      	ldr	r3, [pc, #204]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045bc:	0e1b      	lsrs	r3, r3, #24
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ca:	0f1b      	lsrs	r3, r3, #28
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	019a      	lsls	r2, r3, #6
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	061b      	lsls	r3, r3, #24
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	071b      	lsls	r3, r3, #28
 80045ea:	4926      	ldr	r1, [pc, #152]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d011      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	019a      	lsls	r2, r3, #6
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	071b      	lsls	r3, r3, #28
 800461a:	491a      	ldr	r1, [pc, #104]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004622:	4b18      	ldr	r3, [pc, #96]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004628:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800462c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462e:	f7fe f82b 	bl	8002688 <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004636:	f7fe f827 	bl	8002688 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b64      	cmp	r3, #100	@ 0x64
 8004642:	d901      	bls.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e0d8      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004648:	4b0e      	ldr	r3, [pc, #56]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2b01      	cmp	r3, #1
 8004658:	f040 80ce 	bne.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800465c:	4b09      	ldr	r3, [pc, #36]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a08      	ldr	r2, [pc, #32]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fe f80e 	bl	8002688 <HAL_GetTick>
 800466c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800466e:	e00b      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004670:	f7fe f80a 	bl	8002688 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	@ 0x64
 800467c:	d904      	bls.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e0bb      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004688:	4b5e      	ldr	r3, [pc, #376]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004694:	d0ec      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d02e      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d12a      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046be:	4b51      	ldr	r3, [pc, #324]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d2:	0f1b      	lsrs	r3, r3, #28
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	019a      	lsls	r2, r3, #6
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	4944      	ldr	r1, [pc, #272]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046fa:	4b42      	ldr	r3, [pc, #264]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004700:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	3b01      	subs	r3, #1
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	493d      	ldr	r1, [pc, #244]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d022      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004728:	d11d      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800472a:	4b36      	ldr	r3, [pc, #216]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004730:	0e1b      	lsrs	r3, r3, #24
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004738:	4b32      	ldr	r3, [pc, #200]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473e:	0f1b      	lsrs	r3, r3, #28
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	019a      	lsls	r2, r3, #6
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	431a      	orrs	r2, r3
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	061b      	lsls	r3, r3, #24
 8004758:	431a      	orrs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	071b      	lsls	r3, r3, #28
 800475e:	4929      	ldr	r1, [pc, #164]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d028      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004772:	4b24      	ldr	r3, [pc, #144]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	0e1b      	lsrs	r3, r3, #24
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004780:	4b20      	ldr	r3, [pc, #128]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004786:	0c1b      	lsrs	r3, r3, #16
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	019a      	lsls	r2, r3, #6
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	431a      	orrs	r2, r3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	071b      	lsls	r3, r3, #28
 80047a6:	4917      	ldr	r1, [pc, #92]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	4911      	ldr	r1, [pc, #68]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d0:	f7fd ff5a 	bl	8002688 <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047d8:	f7fd ff56 	bl	8002688 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	@ 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e007      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f6:	d1ef      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800

08004808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e040      	b.n	800489c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd fd14 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	@ 0x24
 8004834:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fbde 	bl	8005010 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f977 	bl	8004b48 <UART_SetConfig>
 800485a:	4603      	mov	r3, r0
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e01b      	b.n	800489c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fc5d 	bl	8005154 <UART_CheckIdleState>
 800489a:	4603      	mov	r3, r0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	@ 0x28
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d177      	bne.n	80049ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_UART_Transmit+0x24>
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e070      	b.n	80049ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2221      	movs	r2, #33	@ 0x21
 80048d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048da:	f7fd fed5 	bl	8002688 <HAL_GetTick>
 80048de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	88fa      	ldrh	r2, [r7, #6]
 80048ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f8:	d108      	bne.n	800490c <HAL_UART_Transmit+0x68>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	e003      	b.n	8004914 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004914:	e02f      	b.n	8004976 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	2180      	movs	r1, #128	@ 0x80
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fcbf 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e03b      	b.n	80049ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800494a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	3302      	adds	r3, #2
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	e007      	b.n	8004964 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3301      	adds	r3, #1
 8004962:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1c9      	bne.n	8004916 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	2140      	movs	r1, #64	@ 0x40
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 fc89 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e005      	b.n	80049ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b08a      	sub	sp, #40	@ 0x28
 80049ba:	af02      	add	r7, sp, #8
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	f040 80b5 	bne.w	8004b3c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_UART_Receive+0x28>
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0ad      	b.n	8004b3e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2222      	movs	r2, #34	@ 0x22
 80049ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049f8:	f7fd fe46 	bl	8002688 <HAL_GetTick>
 80049fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	88fa      	ldrh	r2, [r7, #6]
 8004a02:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	88fa      	ldrh	r2, [r7, #6]
 8004a0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a16:	d10e      	bne.n	8004a36 <HAL_UART_Receive+0x80>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d105      	bne.n	8004a2c <HAL_UART_Receive+0x76>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a2a:	e02d      	b.n	8004a88 <HAL_UART_Receive+0xd2>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	22ff      	movs	r2, #255	@ 0xff
 8004a30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a34:	e028      	b.n	8004a88 <HAL_UART_Receive+0xd2>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10d      	bne.n	8004a5a <HAL_UART_Receive+0xa4>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d104      	bne.n	8004a50 <HAL_UART_Receive+0x9a>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	22ff      	movs	r2, #255	@ 0xff
 8004a4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a4e:	e01b      	b.n	8004a88 <HAL_UART_Receive+0xd2>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	227f      	movs	r2, #127	@ 0x7f
 8004a54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a58:	e016      	b.n	8004a88 <HAL_UART_Receive+0xd2>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a62:	d10d      	bne.n	8004a80 <HAL_UART_Receive+0xca>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <HAL_UART_Receive+0xc0>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	227f      	movs	r2, #127	@ 0x7f
 8004a70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a74:	e008      	b.n	8004a88 <HAL_UART_Receive+0xd2>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	223f      	movs	r2, #63	@ 0x3f
 8004a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a7e:	e003      	b.n	8004a88 <HAL_UART_Receive+0xd2>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a8e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a98:	d108      	bne.n	8004aac <HAL_UART_Receive+0xf6>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d104      	bne.n	8004aac <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	e003      	b.n	8004ab4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004ab4:	e036      	b.n	8004b24 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2120      	movs	r1, #32
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fbef 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e032      	b.n	8004b3e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10c      	bne.n	8004af8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	8a7b      	ldrh	r3, [r7, #18]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	3302      	adds	r3, #2
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	e00c      	b.n	8004b12 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	8a7b      	ldrh	r3, [r7, #18]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	4013      	ands	r3, r2
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1c2      	bne.n	8004ab6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4ba6      	ldr	r3, [pc, #664]	@ (8004e0c <UART_SetConfig+0x2c4>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a94      	ldr	r2, [pc, #592]	@ (8004e10 <UART_SetConfig+0x2c8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d120      	bne.n	8004c06 <UART_SetConfig+0xbe>
 8004bc4:	4b93      	ldr	r3, [pc, #588]	@ (8004e14 <UART_SetConfig+0x2cc>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d816      	bhi.n	8004c00 <UART_SetConfig+0xb8>
 8004bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <UART_SetConfig+0x90>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bf5 	.word	0x08004bf5
 8004be0:	08004bef 	.word	0x08004bef
 8004be4:	08004bfb 	.word	0x08004bfb
 8004be8:	2301      	movs	r3, #1
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e150      	b.n	8004e90 <UART_SetConfig+0x348>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	77fb      	strb	r3, [r7, #31]
 8004bf2:	e14d      	b.n	8004e90 <UART_SetConfig+0x348>
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	e14a      	b.n	8004e90 <UART_SetConfig+0x348>
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e147      	b.n	8004e90 <UART_SetConfig+0x348>
 8004c00:	2310      	movs	r3, #16
 8004c02:	77fb      	strb	r3, [r7, #31]
 8004c04:	e144      	b.n	8004e90 <UART_SetConfig+0x348>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a83      	ldr	r2, [pc, #524]	@ (8004e18 <UART_SetConfig+0x2d0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d132      	bne.n	8004c76 <UART_SetConfig+0x12e>
 8004c10:	4b80      	ldr	r3, [pc, #512]	@ (8004e14 <UART_SetConfig+0x2cc>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c16:	f003 030c 	and.w	r3, r3, #12
 8004c1a:	2b0c      	cmp	r3, #12
 8004c1c:	d828      	bhi.n	8004c70 <UART_SetConfig+0x128>
 8004c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c24 <UART_SetConfig+0xdc>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c59 	.word	0x08004c59
 8004c28:	08004c71 	.word	0x08004c71
 8004c2c:	08004c71 	.word	0x08004c71
 8004c30:	08004c71 	.word	0x08004c71
 8004c34:	08004c65 	.word	0x08004c65
 8004c38:	08004c71 	.word	0x08004c71
 8004c3c:	08004c71 	.word	0x08004c71
 8004c40:	08004c71 	.word	0x08004c71
 8004c44:	08004c5f 	.word	0x08004c5f
 8004c48:	08004c71 	.word	0x08004c71
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c71 	.word	0x08004c71
 8004c54:	08004c6b 	.word	0x08004c6b
 8004c58:	2300      	movs	r3, #0
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e118      	b.n	8004e90 <UART_SetConfig+0x348>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	77fb      	strb	r3, [r7, #31]
 8004c62:	e115      	b.n	8004e90 <UART_SetConfig+0x348>
 8004c64:	2304      	movs	r3, #4
 8004c66:	77fb      	strb	r3, [r7, #31]
 8004c68:	e112      	b.n	8004e90 <UART_SetConfig+0x348>
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	77fb      	strb	r3, [r7, #31]
 8004c6e:	e10f      	b.n	8004e90 <UART_SetConfig+0x348>
 8004c70:	2310      	movs	r3, #16
 8004c72:	77fb      	strb	r3, [r7, #31]
 8004c74:	e10c      	b.n	8004e90 <UART_SetConfig+0x348>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a68      	ldr	r2, [pc, #416]	@ (8004e1c <UART_SetConfig+0x2d4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d120      	bne.n	8004cc2 <UART_SetConfig+0x17a>
 8004c80:	4b64      	ldr	r3, [pc, #400]	@ (8004e14 <UART_SetConfig+0x2cc>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c86:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c8a:	2b30      	cmp	r3, #48	@ 0x30
 8004c8c:	d013      	beq.n	8004cb6 <UART_SetConfig+0x16e>
 8004c8e:	2b30      	cmp	r3, #48	@ 0x30
 8004c90:	d814      	bhi.n	8004cbc <UART_SetConfig+0x174>
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d009      	beq.n	8004caa <UART_SetConfig+0x162>
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d810      	bhi.n	8004cbc <UART_SetConfig+0x174>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <UART_SetConfig+0x15c>
 8004c9e:	2b10      	cmp	r3, #16
 8004ca0:	d006      	beq.n	8004cb0 <UART_SetConfig+0x168>
 8004ca2:	e00b      	b.n	8004cbc <UART_SetConfig+0x174>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e0f2      	b.n	8004e90 <UART_SetConfig+0x348>
 8004caa:	2302      	movs	r3, #2
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e0ef      	b.n	8004e90 <UART_SetConfig+0x348>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e0ec      	b.n	8004e90 <UART_SetConfig+0x348>
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	e0e9      	b.n	8004e90 <UART_SetConfig+0x348>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e0e6      	b.n	8004e90 <UART_SetConfig+0x348>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a56      	ldr	r2, [pc, #344]	@ (8004e20 <UART_SetConfig+0x2d8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d120      	bne.n	8004d0e <UART_SetConfig+0x1c6>
 8004ccc:	4b51      	ldr	r3, [pc, #324]	@ (8004e14 <UART_SetConfig+0x2cc>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cd8:	d013      	beq.n	8004d02 <UART_SetConfig+0x1ba>
 8004cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cdc:	d814      	bhi.n	8004d08 <UART_SetConfig+0x1c0>
 8004cde:	2b80      	cmp	r3, #128	@ 0x80
 8004ce0:	d009      	beq.n	8004cf6 <UART_SetConfig+0x1ae>
 8004ce2:	2b80      	cmp	r3, #128	@ 0x80
 8004ce4:	d810      	bhi.n	8004d08 <UART_SetConfig+0x1c0>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <UART_SetConfig+0x1a8>
 8004cea:	2b40      	cmp	r3, #64	@ 0x40
 8004cec:	d006      	beq.n	8004cfc <UART_SetConfig+0x1b4>
 8004cee:	e00b      	b.n	8004d08 <UART_SetConfig+0x1c0>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e0cc      	b.n	8004e90 <UART_SetConfig+0x348>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e0c9      	b.n	8004e90 <UART_SetConfig+0x348>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e0c6      	b.n	8004e90 <UART_SetConfig+0x348>
 8004d02:	2308      	movs	r3, #8
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e0c3      	b.n	8004e90 <UART_SetConfig+0x348>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e0c0      	b.n	8004e90 <UART_SetConfig+0x348>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a44      	ldr	r2, [pc, #272]	@ (8004e24 <UART_SetConfig+0x2dc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d125      	bne.n	8004d64 <UART_SetConfig+0x21c>
 8004d18:	4b3e      	ldr	r3, [pc, #248]	@ (8004e14 <UART_SetConfig+0x2cc>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d26:	d017      	beq.n	8004d58 <UART_SetConfig+0x210>
 8004d28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d2c:	d817      	bhi.n	8004d5e <UART_SetConfig+0x216>
 8004d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d32:	d00b      	beq.n	8004d4c <UART_SetConfig+0x204>
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d38:	d811      	bhi.n	8004d5e <UART_SetConfig+0x216>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <UART_SetConfig+0x1fe>
 8004d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d42:	d006      	beq.n	8004d52 <UART_SetConfig+0x20a>
 8004d44:	e00b      	b.n	8004d5e <UART_SetConfig+0x216>
 8004d46:	2300      	movs	r3, #0
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	e0a1      	b.n	8004e90 <UART_SetConfig+0x348>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e09e      	b.n	8004e90 <UART_SetConfig+0x348>
 8004d52:	2304      	movs	r3, #4
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e09b      	b.n	8004e90 <UART_SetConfig+0x348>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e098      	b.n	8004e90 <UART_SetConfig+0x348>
 8004d5e:	2310      	movs	r3, #16
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e095      	b.n	8004e90 <UART_SetConfig+0x348>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a2f      	ldr	r2, [pc, #188]	@ (8004e28 <UART_SetConfig+0x2e0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d125      	bne.n	8004dba <UART_SetConfig+0x272>
 8004d6e:	4b29      	ldr	r3, [pc, #164]	@ (8004e14 <UART_SetConfig+0x2cc>)
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d7c:	d017      	beq.n	8004dae <UART_SetConfig+0x266>
 8004d7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d82:	d817      	bhi.n	8004db4 <UART_SetConfig+0x26c>
 8004d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d88:	d00b      	beq.n	8004da2 <UART_SetConfig+0x25a>
 8004d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d8e:	d811      	bhi.n	8004db4 <UART_SetConfig+0x26c>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <UART_SetConfig+0x254>
 8004d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d98:	d006      	beq.n	8004da8 <UART_SetConfig+0x260>
 8004d9a:	e00b      	b.n	8004db4 <UART_SetConfig+0x26c>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e076      	b.n	8004e90 <UART_SetConfig+0x348>
 8004da2:	2302      	movs	r3, #2
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e073      	b.n	8004e90 <UART_SetConfig+0x348>
 8004da8:	2304      	movs	r3, #4
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e070      	b.n	8004e90 <UART_SetConfig+0x348>
 8004dae:	2308      	movs	r3, #8
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e06d      	b.n	8004e90 <UART_SetConfig+0x348>
 8004db4:	2310      	movs	r3, #16
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e06a      	b.n	8004e90 <UART_SetConfig+0x348>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8004e2c <UART_SetConfig+0x2e4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d138      	bne.n	8004e36 <UART_SetConfig+0x2ee>
 8004dc4:	4b13      	ldr	r3, [pc, #76]	@ (8004e14 <UART_SetConfig+0x2cc>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004dce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd2:	d017      	beq.n	8004e04 <UART_SetConfig+0x2bc>
 8004dd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dd8:	d82a      	bhi.n	8004e30 <UART_SetConfig+0x2e8>
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dde:	d00b      	beq.n	8004df8 <UART_SetConfig+0x2b0>
 8004de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de4:	d824      	bhi.n	8004e30 <UART_SetConfig+0x2e8>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <UART_SetConfig+0x2aa>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dee:	d006      	beq.n	8004dfe <UART_SetConfig+0x2b6>
 8004df0:	e01e      	b.n	8004e30 <UART_SetConfig+0x2e8>
 8004df2:	2300      	movs	r3, #0
 8004df4:	77fb      	strb	r3, [r7, #31]
 8004df6:	e04b      	b.n	8004e90 <UART_SetConfig+0x348>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e048      	b.n	8004e90 <UART_SetConfig+0x348>
 8004dfe:	2304      	movs	r3, #4
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e045      	b.n	8004e90 <UART_SetConfig+0x348>
 8004e04:	2308      	movs	r3, #8
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e042      	b.n	8004e90 <UART_SetConfig+0x348>
 8004e0a:	bf00      	nop
 8004e0c:	efff69f3 	.word	0xefff69f3
 8004e10:	40011000 	.word	0x40011000
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40004400 	.word	0x40004400
 8004e1c:	40004800 	.word	0x40004800
 8004e20:	40004c00 	.word	0x40004c00
 8004e24:	40005000 	.word	0x40005000
 8004e28:	40011400 	.word	0x40011400
 8004e2c:	40007800 	.word	0x40007800
 8004e30:	2310      	movs	r3, #16
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e02c      	b.n	8004e90 <UART_SetConfig+0x348>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a72      	ldr	r2, [pc, #456]	@ (8005004 <UART_SetConfig+0x4bc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d125      	bne.n	8004e8c <UART_SetConfig+0x344>
 8004e40:	4b71      	ldr	r3, [pc, #452]	@ (8005008 <UART_SetConfig+0x4c0>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e46:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e4a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e4e:	d017      	beq.n	8004e80 <UART_SetConfig+0x338>
 8004e50:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e54:	d817      	bhi.n	8004e86 <UART_SetConfig+0x33e>
 8004e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5a:	d00b      	beq.n	8004e74 <UART_SetConfig+0x32c>
 8004e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e60:	d811      	bhi.n	8004e86 <UART_SetConfig+0x33e>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <UART_SetConfig+0x326>
 8004e66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e6a:	d006      	beq.n	8004e7a <UART_SetConfig+0x332>
 8004e6c:	e00b      	b.n	8004e86 <UART_SetConfig+0x33e>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	77fb      	strb	r3, [r7, #31]
 8004e72:	e00d      	b.n	8004e90 <UART_SetConfig+0x348>
 8004e74:	2302      	movs	r3, #2
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e00a      	b.n	8004e90 <UART_SetConfig+0x348>
 8004e7a:	2304      	movs	r3, #4
 8004e7c:	77fb      	strb	r3, [r7, #31]
 8004e7e:	e007      	b.n	8004e90 <UART_SetConfig+0x348>
 8004e80:	2308      	movs	r3, #8
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e004      	b.n	8004e90 <UART_SetConfig+0x348>
 8004e86:	2310      	movs	r3, #16
 8004e88:	77fb      	strb	r3, [r7, #31]
 8004e8a:	e001      	b.n	8004e90 <UART_SetConfig+0x348>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e98:	d15b      	bne.n	8004f52 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e9a:	7ffb      	ldrb	r3, [r7, #31]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d828      	bhi.n	8004ef2 <UART_SetConfig+0x3aa>
 8004ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea8 <UART_SetConfig+0x360>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004ed5 	.word	0x08004ed5
 8004eb0:	08004edd 	.word	0x08004edd
 8004eb4:	08004ef3 	.word	0x08004ef3
 8004eb8:	08004ee3 	.word	0x08004ee3
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004ef3 	.word	0x08004ef3
 8004ec4:	08004ef3 	.word	0x08004ef3
 8004ec8:	08004eeb 	.word	0x08004eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ecc:	f7ff f84c 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 8004ed0:	61b8      	str	r0, [r7, #24]
        break;
 8004ed2:	e013      	b.n	8004efc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed4:	f7ff f85c 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 8004ed8:	61b8      	str	r0, [r7, #24]
        break;
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004edc:	4b4b      	ldr	r3, [pc, #300]	@ (800500c <UART_SetConfig+0x4c4>)
 8004ede:	61bb      	str	r3, [r7, #24]
        break;
 8004ee0:	e00c      	b.n	8004efc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee2:	f7fe ff2f 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8004ee6:	61b8      	str	r0, [r7, #24]
        break;
 8004ee8:	e008      	b.n	8004efc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eee:	61bb      	str	r3, [r7, #24]
        break;
 8004ef0:	e004      	b.n	8004efc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8004efa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d074      	beq.n	8004fec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	005a      	lsls	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b0f      	cmp	r3, #15
 8004f1c:	d916      	bls.n	8004f4c <UART_SetConfig+0x404>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f24:	d212      	bcs.n	8004f4c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f023 030f 	bic.w	r3, r3, #15
 8004f2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	89fb      	ldrh	r3, [r7, #14]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	89fa      	ldrh	r2, [r7, #14]
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	e04f      	b.n	8004fec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	77bb      	strb	r3, [r7, #30]
 8004f50:	e04c      	b.n	8004fec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f52:	7ffb      	ldrb	r3, [r7, #31]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d828      	bhi.n	8004faa <UART_SetConfig+0x462>
 8004f58:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <UART_SetConfig+0x418>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004fab 	.word	0x08004fab
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004fab 	.word	0x08004fab
 8004f78:	08004fab 	.word	0x08004fab
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f84:	f7fe fff0 	bl	8003f68 <HAL_RCC_GetPCLK1Freq>
 8004f88:	61b8      	str	r0, [r7, #24]
        break;
 8004f8a:	e013      	b.n	8004fb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7ff f800 	bl	8003f90 <HAL_RCC_GetPCLK2Freq>
 8004f90:	61b8      	str	r0, [r7, #24]
        break;
 8004f92:	e00f      	b.n	8004fb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f94:	4b1d      	ldr	r3, [pc, #116]	@ (800500c <UART_SetConfig+0x4c4>)
 8004f96:	61bb      	str	r3, [r7, #24]
        break;
 8004f98:	e00c      	b.n	8004fb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9a:	f7fe fed3 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8004f9e:	61b8      	str	r0, [r7, #24]
        break;
 8004fa0:	e008      	b.n	8004fb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fa6:	61bb      	str	r3, [r7, #24]
        break;
 8004fa8:	e004      	b.n	8004fb4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	77bb      	strb	r3, [r7, #30]
        break;
 8004fb2:	bf00      	nop
    }

    if (pclk != 0U)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d018      	beq.n	8004fec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	085a      	lsrs	r2, r3, #1
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	441a      	add	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b0f      	cmp	r3, #15
 8004fd2:	d909      	bls.n	8004fe8 <UART_SetConfig+0x4a0>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fda:	d205      	bcs.n	8004fe8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e001      	b.n	8004fec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ff8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40007c00 	.word	0x40007c00
 8005008:	40023800 	.word	0x40023800
 800500c:	00f42400 	.word	0x00f42400

08005010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01a      	beq.n	8005126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800510e:	d10a      	bne.n	8005126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
  }
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b098      	sub	sp, #96	@ 0x60
 8005158:	af02      	add	r7, sp, #8
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005164:	f7fd fa90 	bl	8002688 <HAL_GetTick>
 8005168:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b08      	cmp	r3, #8
 8005176:	d12e      	bne.n	80051d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005178:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005180:	2200      	movs	r2, #0
 8005182:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f88c 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d021      	beq.n	80051d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e6      	bne.n	8005192 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e062      	b.n	800529c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d149      	bne.n	8005278 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ec:	2200      	movs	r2, #0
 80051ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f856 	bl	80052a4 <UART_WaitOnFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d03c      	beq.n	8005278 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	623b      	str	r3, [r7, #32]
   return(result);
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800521c:	633b      	str	r3, [r7, #48]	@ 0x30
 800521e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e6      	bne.n	80051fe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005250:	61fa      	str	r2, [r7, #28]
 8005252:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	69b9      	ldr	r1, [r7, #24]
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	617b      	str	r3, [r7, #20]
   return(result);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e5      	bne.n	8005230 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e011      	b.n	800529c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3758      	adds	r7, #88	@ 0x58
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b4:	e04f      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d04b      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fd f9e3 	bl	8002688 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e04e      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d037      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b80      	cmp	r3, #128	@ 0x80
 80052ea:	d034      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b40      	cmp	r3, #64	@ 0x40
 80052f0:	d031      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d110      	bne.n	8005322 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2208      	movs	r2, #8
 8005306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f838 	bl	800537e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2208      	movs	r2, #8
 8005312:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e029      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800532c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005330:	d111      	bne.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800533a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f81e 	bl	800537e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e00f      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4013      	ands	r3, r2
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	bf0c      	ite	eq
 8005366:	2301      	moveq	r3, #1
 8005368:	2300      	movne	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	461a      	mov	r2, r3
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	429a      	cmp	r2, r3
 8005372:	d0a0      	beq.n	80052b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800537e:	b480      	push	{r7}
 8005380:	b095      	sub	sp, #84	@ 0x54
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800539a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80053a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e6      	bne.n	8005386 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3308      	adds	r3, #8
 80053be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3308      	adds	r3, #8
 80053d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e5      	bne.n	80053b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d118      	bne.n	8005426 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	60bb      	str	r3, [r7, #8]
   return(result);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f023 0310 	bic.w	r3, r3, #16
 8005408:	647b      	str	r3, [r7, #68]	@ 0x44
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6979      	ldr	r1, [r7, #20]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	613b      	str	r3, [r7, #16]
   return(result);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e6      	bne.n	80053f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800543a:	bf00      	nop
 800543c:	3754      	adds	r7, #84	@ 0x54
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005448:	b084      	sub	sp, #16
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	f107 001c 	add.w	r0, r7, #28
 8005456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800545a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800545e:	2b01      	cmp	r3, #1
 8005460:	d121      	bne.n	80054a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	4b21      	ldr	r3, [pc, #132]	@ (80054f8 <USB_CoreInit+0xb0>)
 8005474:	4013      	ands	r3, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005486:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800548a:	2b01      	cmp	r3, #1
 800548c:	d105      	bne.n	800549a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa92 	bl	80059c4 <USB_CoreReset>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]
 80054a4:	e010      	b.n	80054c8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa86 	bl	80059c4 <USB_CoreReset>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80054c8:	7fbb      	ldrb	r3, [r7, #30]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d10b      	bne.n	80054e6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f043 0206 	orr.w	r2, r3, #6
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f043 0220 	orr.w	r2, r3, #32
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054f2:	b004      	add	sp, #16
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	ffbdffbf 	.word	0xffbdffbf

080054fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f023 0201 	bic.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d115      	bne.n	800556c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800554c:	200a      	movs	r0, #10
 800554e:	f7fd f8a7 	bl	80026a0 <HAL_Delay>
      ms += 10U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	330a      	adds	r3, #10
 8005556:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fa25 	bl	80059a8 <USB_GetMode>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d01e      	beq.n	80055a2 <USB_SetCurrentMode+0x84>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2bc7      	cmp	r3, #199	@ 0xc7
 8005568:	d9f0      	bls.n	800554c <USB_SetCurrentMode+0x2e>
 800556a:	e01a      	b.n	80055a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d115      	bne.n	800559e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800557e:	200a      	movs	r0, #10
 8005580:	f7fd f88e 	bl	80026a0 <HAL_Delay>
      ms += 10U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	330a      	adds	r3, #10
 8005588:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa0c 	bl	80059a8 <USB_GetMode>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <USB_SetCurrentMode+0x84>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2bc7      	cmp	r3, #199	@ 0xc7
 800559a:	d9f0      	bls.n	800557e <USB_SetCurrentMode+0x60>
 800559c:	e001      	b.n	80055a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e005      	b.n	80055ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80055a6:	d101      	bne.n	80055ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055b8:	b084      	sub	sp, #16
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80055c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	e009      	b.n	80055ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	3340      	adds	r3, #64	@ 0x40
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	2200      	movs	r2, #0
 80055e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3301      	adds	r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b0e      	cmp	r3, #14
 80055f0:	d9f2      	bls.n	80055d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80055f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d11c      	bne.n	8005634 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005608:	f043 0302 	orr.w	r3, r3, #2
 800560c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e005      	b.n	8005640 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005638:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005646:	461a      	mov	r2, r3
 8005648:	2300      	movs	r3, #0
 800564a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800564c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005650:	2b01      	cmp	r3, #1
 8005652:	d10d      	bne.n	8005670 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800565c:	2100      	movs	r1, #0
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f968 	bl	8005934 <USB_SetDevSpeed>
 8005664:	e008      	b.n	8005678 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005666:	2101      	movs	r1, #1
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f963 	bl	8005934 <USB_SetDevSpeed>
 800566e:	e003      	b.n	8005678 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005670:	2103      	movs	r1, #3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f95e 	bl	8005934 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005678:	2110      	movs	r1, #16
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8fa 	bl	8005874 <USB_FlushTxFifo>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f924 	bl	80058d8 <USB_FlushRxFifo>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a0:	461a      	mov	r2, r3
 80056a2:	2300      	movs	r3, #0
 80056a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ac:	461a      	mov	r2, r3
 80056ae:	2300      	movs	r3, #0
 80056b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b8:	461a      	mov	r2, r3
 80056ba:	2300      	movs	r3, #0
 80056bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	e043      	b.n	800574c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056da:	d118      	bne.n	800570e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10a      	bne.n	80056f8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ee:	461a      	mov	r2, r3
 80056f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e013      	b.n	8005720 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005704:	461a      	mov	r2, r3
 8005706:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	e008      	b.n	8005720 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571a:	461a      	mov	r2, r3
 800571c:	2300      	movs	r3, #0
 800571e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800572c:	461a      	mov	r2, r3
 800572e:	2300      	movs	r3, #0
 8005730:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573e:	461a      	mov	r2, r3
 8005740:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005744:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	3301      	adds	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005750:	461a      	mov	r2, r3
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4293      	cmp	r3, r2
 8005756:	d3b5      	bcc.n	80056c4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	e043      	b.n	80057e6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005770:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005774:	d118      	bne.n	80057a8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005788:	461a      	mov	r2, r3
 800578a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	e013      	b.n	80057ba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579e:	461a      	mov	r2, r3
 80057a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	e008      	b.n	80057ba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b4:	461a      	mov	r2, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	3301      	adds	r3, #1
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057ea:	461a      	mov	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d3b5      	bcc.n	800575e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005804:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005812:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005818:	2b00      	cmp	r3, #0
 800581a:	d105      	bne.n	8005828 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	f043 0210 	orr.w	r2, r3, #16
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	4b0f      	ldr	r3, [pc, #60]	@ (800586c <USB_DevInit+0x2b4>)
 800582e:	4313      	orrs	r3, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005834:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f043 0208 	orr.w	r2, r3, #8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005848:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800584c:	2b01      	cmp	r3, #1
 800584e:	d105      	bne.n	800585c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <USB_DevInit+0x2b8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800585c:	7dfb      	ldrb	r3, [r7, #23]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005868:	b004      	add	sp, #16
 800586a:	4770      	bx	lr
 800586c:	803c3800 	.word	0x803c3800
 8005870:	40000004 	.word	0x40000004

08005874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3301      	adds	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800588e:	d901      	bls.n	8005894 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e01b      	b.n	80058cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	daf2      	bge.n	8005882 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	019b      	lsls	r3, r3, #6
 80058a4:	f043 0220 	orr.w	r2, r3, #32
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058b8:	d901      	bls.n	80058be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e006      	b.n	80058cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d0f0      	beq.n	80058ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058f0:	d901      	bls.n	80058f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e018      	b.n	8005928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	daf2      	bge.n	80058e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2210      	movs	r2, #16
 8005906:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3301      	adds	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005914:	d901      	bls.n	800591a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e006      	b.n	8005928 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b10      	cmp	r3, #16
 8005924:	d0f0      	beq.n	8005908 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005980:	f023 0303 	bic.w	r3, r3, #3
 8005984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005994:	f043 0302 	orr.w	r3, r3, #2
 8005998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f003 0301 	and.w	r3, r3, #1
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059dc:	d901      	bls.n	80059e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e01b      	b.n	8005a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	daf2      	bge.n	80059d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3301      	adds	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a06:	d901      	bls.n	8005a0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e006      	b.n	8005a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d0f0      	beq.n	80059fa <USB_CoreReset+0x36>

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a26:	b480      	push	{r7}
 8005a28:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a3a:	f3ef 8305 	mrs	r3, IPSR
 8005a3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10f      	bne.n	8005a66 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a46:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4a:	607b      	str	r3, [r7, #4]
  return(result);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d105      	bne.n	8005a5e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a52:	f3ef 8311 	mrs	r3, BASEPRI
 8005a56:	603b      	str	r3, [r7, #0]
  return(result);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d007      	beq.n	8005a6e <osKernelInitialize+0x3a>
 8005a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a98 <osKernelInitialize+0x64>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d103      	bne.n	8005a6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005a66:	f06f 0305 	mvn.w	r3, #5
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e00c      	b.n	8005a88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <osKernelInitialize+0x64>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d105      	bne.n	8005a82 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a76:	4b08      	ldr	r3, [pc, #32]	@ (8005a98 <osKernelInitialize+0x64>)
 8005a78:	2201      	movs	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e002      	b.n	8005a88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005a82:	f04f 33ff 	mov.w	r3, #4294967295
 8005a86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a88:	68fb      	ldr	r3, [r7, #12]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	200013b0 	.word	0x200013b0

08005a9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa2:	f3ef 8305 	mrs	r3, IPSR
 8005aa6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10f      	bne.n	8005ace <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aae:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab2:	607b      	str	r3, [r7, #4]
  return(result);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d105      	bne.n	8005ac6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005aba:	f3ef 8311 	mrs	r3, BASEPRI
 8005abe:	603b      	str	r3, [r7, #0]
  return(result);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <osKernelStart+0x3a>
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <osKernelStart+0x68>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d103      	bne.n	8005ad6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005ace:	f06f 0305 	mvn.w	r3, #5
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e010      	b.n	8005af8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <osKernelStart+0x68>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d109      	bne.n	8005af2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ade:	f7ff ffa2 	bl	8005a26 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ae2:	4b08      	ldr	r3, [pc, #32]	@ (8005b04 <osKernelStart+0x68>)
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ae8:	f001 f9bc 	bl	8006e64 <vTaskStartScheduler>
      stat = osOK;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e002      	b.n	8005af8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005af2:	f04f 33ff 	mov.w	r3, #4294967295
 8005af6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005af8:	68fb      	ldr	r3, [r7, #12]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200013b0 	.word	0x200013b0

08005b08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b090      	sub	sp, #64	@ 0x40
 8005b0c:	af04      	add	r7, sp, #16
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b18:	f3ef 8305 	mrs	r3, IPSR
 8005b1c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b1e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f040 808f 	bne.w	8005c44 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b26:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d105      	bne.n	8005b3e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b32:	f3ef 8311 	mrs	r3, BASEPRI
 8005b36:	617b      	str	r3, [r7, #20]
  return(result);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <osThreadNew+0x3e>
 8005b3e:	4b44      	ldr	r3, [pc, #272]	@ (8005c50 <osThreadNew+0x148>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d07e      	beq.n	8005c44 <osThreadNew+0x13c>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d07b      	beq.n	8005c44 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005b4c:	2380      	movs	r3, #128	@ 0x80
 8005b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005b50:	2318      	movs	r3, #24
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005b58:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d045      	beq.n	8005bf0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <osThreadNew+0x6a>
        name = attr->name;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d008      	beq.n	8005b98 <osThreadNew+0x90>
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	2b38      	cmp	r3, #56	@ 0x38
 8005b8a:	d805      	bhi.n	8005b98 <osThreadNew+0x90>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <osThreadNew+0x94>
        return (NULL);
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e054      	b.n	8005c46 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	089b      	lsrs	r3, r3, #2
 8005baa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00e      	beq.n	8005bd2 <osThreadNew+0xca>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2ba7      	cmp	r3, #167	@ 0xa7
 8005bba:	d90a      	bls.n	8005bd2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d006      	beq.n	8005bd2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <osThreadNew+0xca>
        mem = 1;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	623b      	str	r3, [r7, #32]
 8005bd0:	e010      	b.n	8005bf4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10c      	bne.n	8005bf4 <osThreadNew+0xec>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d108      	bne.n	8005bf4 <osThreadNew+0xec>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d104      	bne.n	8005bf4 <osThreadNew+0xec>
          mem = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	623b      	str	r3, [r7, #32]
 8005bee:	e001      	b.n	8005bf4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d110      	bne.n	8005c1c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c02:	9202      	str	r2, [sp, #8]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 ff29 	bl	8006a68 <xTaskCreateStatic>
 8005c16:	4603      	mov	r3, r0
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e013      	b.n	8005c44 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d110      	bne.n	8005c44 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	f107 0310 	add.w	r3, r7, #16
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 ff7d 	bl	8006b34 <xTaskCreate>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d001      	beq.n	8005c44 <osThreadNew+0x13c>
          hTask = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c44:	693b      	ldr	r3, [r7, #16]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3730      	adds	r7, #48	@ 0x30
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200013b0 	.word	0x200013b0

08005c54 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c5c:	f3ef 8305 	mrs	r3, IPSR
 8005c60:	613b      	str	r3, [r7, #16]
  return(result);
 8005c62:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10f      	bne.n	8005c88 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c68:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c74:	f3ef 8311 	mrs	r3, BASEPRI
 8005c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <osDelay+0x3c>
 8005c80:	4b0a      	ldr	r3, [pc, #40]	@ (8005cac <osDelay+0x58>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d103      	bne.n	8005c90 <osDelay+0x3c>
    stat = osErrorISR;
 8005c88:	f06f 0305 	mvn.w	r3, #5
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e007      	b.n	8005ca0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 f8aa 	bl	8006df4 <vTaskDelay>
    }
  }

  return (stat);
 8005ca0:	697b      	ldr	r3, [r7, #20]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	200013b0 	.word	0x200013b0

08005cb0 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f002 fa89 	bl	80081d0 <pvTimerGetTimerID>
 8005cbe:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	6852      	ldr	r2, [r2, #4]
 8005cce:	4610      	mov	r0, r2
 8005cd0:	4798      	blx	r3
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08e      	sub	sp, #56	@ 0x38
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf0:	f3ef 8305 	mrs	r3, IPSR
 8005cf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cf6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d16a      	bne.n	8005dd2 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005d00:	617b      	str	r3, [r7, #20]
  return(result);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d08:	f3ef 8311 	mrs	r3, BASEPRI
 8005d0c:	613b      	str	r3, [r7, #16]
  return(result);
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <osTimerNew+0x40>
 8005d14:	4b31      	ldr	r3, [pc, #196]	@ (8005ddc <osTimerNew+0x100>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d05a      	beq.n	8005dd2 <osTimerNew+0xf6>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d057      	beq.n	8005dd2 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005d22:	2008      	movs	r0, #8
 8005d24:	f002 fcb8 	bl	8008698 <pvPortMalloc>
 8005d28:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d050      	beq.n	8005dd2 <osTimerNew+0xf6>
      callb->func = func;
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005d3c:	7afb      	ldrb	r3, [r7, #11]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d102      	bne.n	8005d48 <osTimerNew+0x6c>
        reload = pdFALSE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d46:	e001      	b.n	8005d4c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 8005d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d50:	623b      	str	r3, [r7, #32]
      name = NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01c      	beq.n	8005d96 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <osTimerNew+0x8e>
          name = attr->name;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d006      	beq.n	8005d80 <osTimerNew+0xa4>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b2b      	cmp	r3, #43	@ 0x2b
 8005d78:	d902      	bls.n	8005d80 <osTimerNew+0xa4>
          mem = 1;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	623b      	str	r3, [r7, #32]
 8005d7e:	e00c      	b.n	8005d9a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d108      	bne.n	8005d9a <osTimerNew+0xbe>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d104      	bne.n	8005d9a <osTimerNew+0xbe>
            mem = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	e001      	b.n	8005d9a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10c      	bne.n	8005dba <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	4b0e      	ldr	r3, [pc, #56]	@ (8005de0 <osTimerNew+0x104>)
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dae:	2101      	movs	r1, #1
 8005db0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005db2:	f001 fe6e 	bl	8007a92 <xTimerCreateStatic>
 8005db6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005db8:	e00b      	b.n	8005dd2 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d108      	bne.n	8005dd2 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005dc0:	4b07      	ldr	r3, [pc, #28]	@ (8005de0 <osTimerNew+0x104>)
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc8:	2101      	movs	r1, #1
 8005dca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005dcc:	f001 fe40 	bl	8007a50 <xTimerCreate>
 8005dd0:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3730      	adds	r7, #48	@ 0x30
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	200013b0 	.word	0x200013b0
 8005de0:	08005cb1 	.word	0x08005cb1

08005de4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	@ 0x28
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df2:	f3ef 8305 	mrs	r3, IPSR
 8005df6:	617b      	str	r3, [r7, #20]
  return(result);
 8005df8:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10f      	bne.n	8005e1e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005e02:	613b      	str	r3, [r7, #16]
  return(result);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <osTimerStart+0x42>
 8005e16:	4b12      	ldr	r3, [pc, #72]	@ (8005e60 <osTimerStart+0x7c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d103      	bne.n	8005e26 <osTimerStart+0x42>
    stat = osErrorISR;
 8005e1e:	f06f 0305 	mvn.w	r3, #5
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	e017      	b.n	8005e56 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <osTimerStart+0x50>
    stat = osErrorParameter;
 8005e2c:	f06f 0303 	mvn.w	r3, #3
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	e010      	b.n	8005e56 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005e34:	2300      	movs	r3, #0
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	69b8      	ldr	r0, [r7, #24]
 8005e40:	f001 feaa 	bl	8007b98 <xTimerGenericCommand>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <osTimerStart+0x6c>
      stat = osOK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	e002      	b.n	8005e56 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8005e50:	f06f 0302 	mvn.w	r3, #2
 8005e54:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8005e56:	69fb      	ldr	r3, [r7, #28]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	200013b0 	.word	0x200013b0

08005e64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a07      	ldr	r2, [pc, #28]	@ (8005e90 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4a06      	ldr	r2, [pc, #24]	@ (8005e94 <vApplicationGetIdleTaskMemory+0x30>)
 8005e7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2280      	movs	r2, #128	@ 0x80
 8005e80:	601a      	str	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	200013b4 	.word	0x200013b4
 8005e94:	2000145c 	.word	0x2000145c

08005e98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a07      	ldr	r2, [pc, #28]	@ (8005ec4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ea8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4a06      	ldr	r2, [pc, #24]	@ (8005ec8 <vApplicationGetTimerTaskMemory+0x30>)
 8005eae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005eb6:	601a      	str	r2, [r3, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	2000165c 	.word	0x2000165c
 8005ec8:	20001704 	.word	0x20001704

08005ecc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f103 0208 	add.w	r2, r3, #8
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f103 0208 	add.w	r2, r3, #8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f103 0208 	add.w	r2, r3, #8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d103      	bne.n	8005f8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	e00c      	b.n	8005fa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3308      	adds	r3, #8
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <vListInsert+0x2e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d2f6      	bcs.n	8005f96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6892      	ldr	r2, [r2, #8]
 8005ff6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6852      	ldr	r2, [r2, #4]
 8006000:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d103      	bne.n	8006014 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	1e5a      	subs	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10d      	bne.n	8006064 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	b672      	cpsid	i
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	b662      	cpsie	i
 800605c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006064:	f002 f9ea 	bl	800843c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006070:	68f9      	ldr	r1, [r7, #12]
 8006072:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	441a      	add	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006094:	3b01      	subs	r3, #1
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	441a      	add	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	22ff      	movs	r2, #255	@ 0xff
 80060a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	22ff      	movs	r2, #255	@ 0xff
 80060b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d114      	bne.n	80060e4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01a      	beq.n	80060f8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3310      	adds	r3, #16
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 f98a 	bl	80073e0 <xTaskRemoveFromEventList>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d012      	beq.n	80060f8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <xQueueGenericReset+0xd4>)
 80060d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	e009      	b.n	80060f8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3310      	adds	r3, #16
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff feef 	bl	8005ecc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3324      	adds	r3, #36	@ 0x24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff feea 	bl	8005ecc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060f8:	f002 f9d6 	bl	80084a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060fc:	2301      	movs	r3, #1
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08e      	sub	sp, #56	@ 0x38
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10d      	bne.n	800613c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	b672      	cpsid	i
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	b662      	cpsie	i
 8006134:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006136:	bf00      	nop
 8006138:	bf00      	nop
 800613a:	e7fd      	b.n	8006138 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10d      	bne.n	800615e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006146:	b672      	cpsid	i
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	b662      	cpsie	i
 8006156:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	e7fd      	b.n	800615a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <xQueueGenericCreateStatic+0x5e>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <xQueueGenericCreateStatic+0x62>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <xQueueGenericCreateStatic+0x64>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10d      	bne.n	8006190 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006178:	b672      	cpsid	i
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	b662      	cpsie	i
 8006188:	623b      	str	r3, [r7, #32]
}
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	e7fd      	b.n	800618c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <xQueueGenericCreateStatic+0x90>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <xQueueGenericCreateStatic+0x94>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <xQueueGenericCreateStatic+0x96>
 80061a0:	2300      	movs	r3, #0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10d      	bne.n	80061c2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061aa:	b672      	cpsid	i
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	b662      	cpsie	i
 80061ba:	61fb      	str	r3, [r7, #28]
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	e7fd      	b.n	80061be <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061c2:	2350      	movs	r3, #80	@ 0x50
 80061c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b50      	cmp	r3, #80	@ 0x50
 80061ca:	d00d      	beq.n	80061e8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d0:	b672      	cpsid	i
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	b662      	cpsie	i
 80061e0:	61bb      	str	r3, [r7, #24]
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	e7fd      	b.n	80061e4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00d      	beq.n	8006210 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f805 	bl	800621a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006212:	4618      	mov	r0, r3
 8006214:	3730      	adds	r7, #48	@ 0x30
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d103      	bne.n	8006236 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	e002      	b.n	800623c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006248:	2101      	movs	r1, #1
 800624a:	69b8      	ldr	r0, [r7, #24]
 800624c:	f7ff fef2 	bl	8006034 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	78fa      	ldrb	r2, [r7, #3]
 8006254:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08e      	sub	sp, #56	@ 0x38
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800626e:	2300      	movs	r3, #0
 8006270:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10d      	bne.n	8006298 <xQueueGenericSend+0x38>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	b672      	cpsid	i
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	b662      	cpsie	i
 8006290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	e7fd      	b.n	8006294 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSend+0x46>
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <xQueueGenericSend+0x4a>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <xQueueGenericSend+0x4c>
 80062aa:	2300      	movs	r3, #0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10d      	bne.n	80062cc <xQueueGenericSend+0x6c>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	b672      	cpsid	i
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	b662      	cpsie	i
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d103      	bne.n	80062da <xQueueGenericSend+0x7a>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <xQueueGenericSend+0x7e>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <xQueueGenericSend+0x80>
 80062de:	2300      	movs	r3, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10d      	bne.n	8006300 <xQueueGenericSend+0xa0>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e8:	b672      	cpsid	i
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	b662      	cpsie	i
 80062f8:	623b      	str	r3, [r7, #32]
}
 80062fa:	bf00      	nop
 80062fc:	bf00      	nop
 80062fe:	e7fd      	b.n	80062fc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006300:	f001 fa74 	bl	80077ec <xTaskGetSchedulerState>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d102      	bne.n	8006310 <xQueueGenericSend+0xb0>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <xQueueGenericSend+0xb4>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <xQueueGenericSend+0xb6>
 8006314:	2300      	movs	r3, #0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10d      	bne.n	8006336 <xQueueGenericSend+0xd6>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631e:	b672      	cpsid	i
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	b662      	cpsie	i
 800632e:	61fb      	str	r3, [r7, #28]
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	e7fd      	b.n	8006332 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006336:	f002 f881 	bl	800843c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006342:	429a      	cmp	r2, r3
 8006344:	d302      	bcc.n	800634c <xQueueGenericSend+0xec>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d129      	bne.n	80063a0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006352:	f000 fa1b 	bl	800678c <prvCopyDataToQueue>
 8006356:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	2b00      	cmp	r3, #0
 800635e:	d010      	beq.n	8006382 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	3324      	adds	r3, #36	@ 0x24
 8006364:	4618      	mov	r0, r3
 8006366:	f001 f83b 	bl	80073e0 <xTaskRemoveFromEventList>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d013      	beq.n	8006398 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006370:	4b3f      	ldr	r3, [pc, #252]	@ (8006470 <xQueueGenericSend+0x210>)
 8006372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	e00a      	b.n	8006398 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006388:	4b39      	ldr	r3, [pc, #228]	@ (8006470 <xQueueGenericSend+0x210>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006398:	f002 f886 	bl	80084a8 <vPortExitCritical>
				return pdPASS;
 800639c:	2301      	movs	r3, #1
 800639e:	e063      	b.n	8006468 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063a6:	f002 f87f 	bl	80084a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e05c      	b.n	8006468 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063b4:	f107 0314 	add.w	r3, r7, #20
 80063b8:	4618      	mov	r0, r3
 80063ba:	f001 f877 	bl	80074ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063be:	2301      	movs	r3, #1
 80063c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063c2:	f002 f871 	bl	80084a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063c6:	f000 fdc1 	bl	8006f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ca:	f002 f837 	bl	800843c <vPortEnterCritical>
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063d4:	b25b      	sxtb	r3, r3
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d103      	bne.n	80063e4 <xQueueGenericSend+0x184>
 80063dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d103      	bne.n	80063fa <xQueueGenericSend+0x19a>
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063fa:	f002 f855 	bl	80084a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063fe:	1d3a      	adds	r2, r7, #4
 8006400:	f107 0314 	add.w	r3, r7, #20
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f866 	bl	80074d8 <xTaskCheckForTimeOut>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d124      	bne.n	800645c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006412:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006414:	f000 fab2 	bl	800697c <prvIsQueueFull>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d018      	beq.n	8006450 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	3310      	adds	r3, #16
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f000 ff84 	bl	8007334 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800642c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800642e:	f000 fa3d 	bl	80068ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006432:	f000 fd99 	bl	8006f68 <xTaskResumeAll>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	f47f af7c 	bne.w	8006336 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800643e:	4b0c      	ldr	r3, [pc, #48]	@ (8006470 <xQueueGenericSend+0x210>)
 8006440:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	e772      	b.n	8006336 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006452:	f000 fa2b 	bl	80068ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006456:	f000 fd87 	bl	8006f68 <xTaskResumeAll>
 800645a:	e76c      	b.n	8006336 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800645c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800645e:	f000 fa25 	bl	80068ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006462:	f000 fd81 	bl	8006f68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006466:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006468:	4618      	mov	r0, r3
 800646a:	3738      	adds	r7, #56	@ 0x38
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08e      	sub	sp, #56	@ 0x38
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10d      	bne.n	80064a8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006490:	b672      	cpsid	i
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	b662      	cpsie	i
 80064a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064a2:	bf00      	nop
 80064a4:	bf00      	nop
 80064a6:	e7fd      	b.n	80064a4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d103      	bne.n	80064b6 <xQueueGenericSendFromISR+0x42>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <xQueueGenericSendFromISR+0x46>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <xQueueGenericSendFromISR+0x48>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10d      	bne.n	80064dc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c4:	b672      	cpsid	i
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	b662      	cpsie	i
 80064d4:	623b      	str	r3, [r7, #32]
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d103      	bne.n	80064ea <xQueueGenericSendFromISR+0x76>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <xQueueGenericSendFromISR+0x7a>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <xQueueGenericSendFromISR+0x7c>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10d      	bne.n	8006510 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f8:	b672      	cpsid	i
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	b662      	cpsie	i
 8006508:	61fb      	str	r3, [r7, #28]
}
 800650a:	bf00      	nop
 800650c:	bf00      	nop
 800650e:	e7fd      	b.n	800650c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006510:	f002 f87c 	bl	800860c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006514:	f3ef 8211 	mrs	r2, BASEPRI
 8006518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651c:	b672      	cpsid	i
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	b662      	cpsie	i
 800652c:	61ba      	str	r2, [r7, #24]
 800652e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006530:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006532:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653c:	429a      	cmp	r2, r3
 800653e:	d302      	bcc.n	8006546 <xQueueGenericSendFromISR+0xd2>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d12c      	bne.n	80065a0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800654c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006556:	f000 f919 	bl	800678c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800655a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006562:	d112      	bne.n	800658a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d016      	beq.n	800659a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800656c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656e:	3324      	adds	r3, #36	@ 0x24
 8006570:	4618      	mov	r0, r3
 8006572:	f000 ff35 	bl	80073e0 <xTaskRemoveFromEventList>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00e      	beq.n	800659a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e007      	b.n	800659a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800658a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800658e:	3301      	adds	r3, #1
 8006590:	b2db      	uxtb	r3, r3
 8006592:	b25a      	sxtb	r2, r3
 8006594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800659a:	2301      	movs	r3, #1
 800659c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800659e:	e001      	b.n	80065a4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3738      	adds	r7, #56	@ 0x38
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08c      	sub	sp, #48	@ 0x30
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10d      	bne.n	80065f2 <xQueueReceive+0x36>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	b672      	cpsid	i
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	b662      	cpsie	i
 80065ea:	623b      	str	r3, [r7, #32]
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	e7fd      	b.n	80065ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <xQueueReceive+0x44>
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <xQueueReceive+0x48>
 8006600:	2301      	movs	r3, #1
 8006602:	e000      	b.n	8006606 <xQueueReceive+0x4a>
 8006604:	2300      	movs	r3, #0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10d      	bne.n	8006626 <xQueueReceive+0x6a>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660e:	b672      	cpsid	i
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	b662      	cpsie	i
 800661e:	61fb      	str	r3, [r7, #28]
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	e7fd      	b.n	8006622 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006626:	f001 f8e1 	bl	80077ec <xTaskGetSchedulerState>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <xQueueReceive+0x7a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <xQueueReceive+0x7e>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <xQueueReceive+0x80>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10d      	bne.n	800665c <xQueueReceive+0xa0>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	b672      	cpsid	i
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	b662      	cpsie	i
 8006654:	61bb      	str	r3, [r7, #24]
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800665c:	f001 feee 	bl	800843c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01f      	beq.n	80066ac <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006670:	f000 f8f6 	bl	8006860 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	1e5a      	subs	r2, r3, #1
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00f      	beq.n	80066a4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	3310      	adds	r3, #16
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fea9 	bl	80073e0 <xTaskRemoveFromEventList>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006694:	4b3c      	ldr	r3, [pc, #240]	@ (8006788 <xQueueReceive+0x1cc>)
 8006696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066a4:	f001 ff00 	bl	80084a8 <vPortExitCritical>
				return pdPASS;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e069      	b.n	8006780 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d103      	bne.n	80066ba <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066b2:	f001 fef9 	bl	80084a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e062      	b.n	8006780 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066c0:	f107 0310 	add.w	r3, r7, #16
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fef1 	bl	80074ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066ca:	2301      	movs	r3, #1
 80066cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066ce:	f001 feeb 	bl	80084a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066d2:	f000 fc3b 	bl	8006f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066d6:	f001 feb1 	bl	800843c <vPortEnterCritical>
 80066da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066e0:	b25b      	sxtb	r3, r3
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e6:	d103      	bne.n	80066f0 <xQueueReceive+0x134>
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066f6:	b25b      	sxtb	r3, r3
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fc:	d103      	bne.n	8006706 <xQueueReceive+0x14a>
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006706:	f001 fecf 	bl	80084a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800670a:	1d3a      	adds	r2, r7, #4
 800670c:	f107 0310 	add.w	r3, r7, #16
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fee0 	bl	80074d8 <xTaskCheckForTimeOut>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d123      	bne.n	8006766 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800671e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006720:	f000 f916 	bl	8006950 <prvIsQueueEmpty>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d017      	beq.n	800675a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	3324      	adds	r3, #36	@ 0x24
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	4611      	mov	r1, r2
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fdfe 	bl	8007334 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006738:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800673a:	f000 f8b7 	bl	80068ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800673e:	f000 fc13 	bl	8006f68 <xTaskResumeAll>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d189      	bne.n	800665c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006748:	4b0f      	ldr	r3, [pc, #60]	@ (8006788 <xQueueReceive+0x1cc>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	e780      	b.n	800665c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800675a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800675c:	f000 f8a6 	bl	80068ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006760:	f000 fc02 	bl	8006f68 <xTaskResumeAll>
 8006764:	e77a      	b.n	800665c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006768:	f000 f8a0 	bl	80068ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800676c:	f000 fbfc 	bl	8006f68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006772:	f000 f8ed 	bl	8006950 <prvIsQueueEmpty>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	f43f af6f 	beq.w	800665c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800677e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006780:	4618      	mov	r0, r3
 8006782:	3730      	adds	r7, #48	@ 0x30
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d14d      	bne.n	800684e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 f836 	bl	8007828 <xTaskPriorityDisinherit>
 80067bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
 80067c4:	e043      	b.n	800684e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d119      	bne.n	8006800 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6858      	ldr	r0, [r3, #4]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	461a      	mov	r2, r3
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	f002 f9cc 	bl	8008b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e4:	441a      	add	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d32b      	bcc.n	800684e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	e026      	b.n	800684e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68d8      	ldr	r0, [r3, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	461a      	mov	r2, r3
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	f002 f9b2 	bl	8008b74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	425b      	negs	r3, r3
 800681a:	441a      	add	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d207      	bcs.n	800683c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006834:	425b      	negs	r3, r3
 8006836:	441a      	add	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d105      	bne.n	800684e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3b01      	subs	r3, #1
 800684c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006856:	697b      	ldr	r3, [r7, #20]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d018      	beq.n	80068a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687a:	441a      	add	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	d303      	bcc.n	8006894 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68d9      	ldr	r1, [r3, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689c:	461a      	mov	r2, r3
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f002 f968 	bl	8008b74 <memcpy>
	}
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068b4:	f001 fdc2 	bl	800843c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068c0:	e011      	b.n	80068e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d012      	beq.n	80068f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3324      	adds	r3, #36	@ 0x24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fd86 	bl	80073e0 <xTaskRemoveFromEventList>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068da:	f000 fe65 	bl	80075a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dce9      	bgt.n	80068c2 <prvUnlockQueue+0x16>
 80068ee:	e000      	b.n	80068f2 <prvUnlockQueue+0x46>
					break;
 80068f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	22ff      	movs	r2, #255	@ 0xff
 80068f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80068fa:	f001 fdd5 	bl	80084a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068fe:	f001 fd9d 	bl	800843c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006908:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800690a:	e011      	b.n	8006930 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d012      	beq.n	800693a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3310      	adds	r3, #16
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fd61 	bl	80073e0 <xTaskRemoveFromEventList>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006924:	f000 fe40 	bl	80075a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	3b01      	subs	r3, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dce9      	bgt.n	800690c <prvUnlockQueue+0x60>
 8006938:	e000      	b.n	800693c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800693a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	22ff      	movs	r2, #255	@ 0xff
 8006940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006944:	f001 fdb0 	bl	80084a8 <vPortExitCritical>
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006958:	f001 fd70 	bl	800843c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e001      	b.n	800696e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800696e:	f001 fd9b 	bl	80084a8 <vPortExitCritical>

	return xReturn;
 8006972:	68fb      	ldr	r3, [r7, #12]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006984:	f001 fd5a 	bl	800843c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006990:	429a      	cmp	r2, r3
 8006992:	d102      	bne.n	800699a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e001      	b.n	800699e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800699e:	f001 fd83 	bl	80084a8 <vPortExitCritical>

	return xReturn;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e014      	b.n	80069e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069bc:	4a0f      	ldr	r2, [pc, #60]	@ (80069fc <vQueueAddToRegistry+0x50>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10b      	bne.n	80069e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069c8:	490c      	ldr	r1, [pc, #48]	@ (80069fc <vQueueAddToRegistry+0x50>)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069d2:	4a0a      	ldr	r2, [pc, #40]	@ (80069fc <vQueueAddToRegistry+0x50>)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	4413      	add	r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069de:	e006      	b.n	80069ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b07      	cmp	r3, #7
 80069ea:	d9e7      	bls.n	80069bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20001b04 	.word	0x20001b04

08006a00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a10:	f001 fd14 	bl	800843c <vPortEnterCritical>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d103      	bne.n	8006a2a <vQueueWaitForMessageRestricted+0x2a>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a30:	b25b      	sxtb	r3, r3
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a36:	d103      	bne.n	8006a40 <vQueueWaitForMessageRestricted+0x40>
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a40:	f001 fd32 	bl	80084a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	3324      	adds	r3, #36	@ 0x24
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fc95 	bl	8007384 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a5a:	6978      	ldr	r0, [r7, #20]
 8006a5c:	f7ff ff26 	bl	80068ac <prvUnlockQueue>
	}
 8006a60:	bf00      	nop
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08e      	sub	sp, #56	@ 0x38
 8006a6c:	af04      	add	r7, sp, #16
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10d      	bne.n	8006a98 <xTaskCreateStatic+0x30>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	b672      	cpsid	i
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	b662      	cpsie	i
 8006a90:	623b      	str	r3, [r7, #32]
}
 8006a92:	bf00      	nop
 8006a94:	bf00      	nop
 8006a96:	e7fd      	b.n	8006a94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10d      	bne.n	8006aba <xTaskCreateStatic+0x52>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	b672      	cpsid	i
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	b662      	cpsie	i
 8006ab2:	61fb      	str	r3, [r7, #28]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006aba:	23a8      	movs	r3, #168	@ 0xa8
 8006abc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2ba8      	cmp	r3, #168	@ 0xa8
 8006ac2:	d00d      	beq.n	8006ae0 <xTaskCreateStatic+0x78>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	b672      	cpsid	i
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	b662      	cpsie	i
 8006ad8:	61bb      	str	r3, [r7, #24]
}
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	e7fd      	b.n	8006adc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ae0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01e      	beq.n	8006b26 <xTaskCreateStatic+0xbe>
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01b      	beq.n	8006b26 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006af6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b00:	2300      	movs	r3, #0
 8006b02:	9303      	str	r3, [sp, #12]
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	9302      	str	r3, [sp, #8]
 8006b08:	f107 0314 	add.w	r3, r7, #20
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f851 	bl	8006bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b20:	f000 f8f8 	bl	8006d14 <prvAddNewTaskToReadyList>
 8006b24:	e001      	b.n	8006b2a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b2a:	697b      	ldr	r3, [r7, #20]
	}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3728      	adds	r7, #40	@ 0x28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08c      	sub	sp, #48	@ 0x30
 8006b38:	af04      	add	r7, sp, #16
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	4613      	mov	r3, r2
 8006b42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 fda5 	bl	8008698 <pvPortMalloc>
 8006b4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00e      	beq.n	8006b74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b56:	20a8      	movs	r0, #168	@ 0xa8
 8006b58:	f001 fd9e 	bl	8008698 <pvPortMalloc>
 8006b5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b6a:	e005      	b.n	8006b78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b6c:	6978      	ldr	r0, [r7, #20]
 8006b6e:	f001 fe61 	bl	8008834 <vPortFree>
 8006b72:	e001      	b.n	8006b78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d017      	beq.n	8006bae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b86:	88fa      	ldrh	r2, [r7, #6]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	9303      	str	r3, [sp, #12]
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	9302      	str	r3, [sp, #8]
 8006b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f80f 	bl	8006bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ba2:	69f8      	ldr	r0, [r7, #28]
 8006ba4:	f000 f8b6 	bl	8006d14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	61bb      	str	r3, [r7, #24]
 8006bac:	e002      	b.n	8006bb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bae:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bb4:	69bb      	ldr	r3, [r7, #24]
	}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3720      	adds	r7, #32
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	21a5      	movs	r1, #165	@ 0xa5
 8006bda:	f001 ff47 	bl	8008a6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006be8:	440b      	add	r3, r1
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f023 0307 	bic.w	r3, r3, #7
 8006bf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c06:	b672      	cpsid	i
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	b662      	cpsie	i
 8006c16:	617b      	str	r3, [r7, #20]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01f      	beq.n	8006c64 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c24:	2300      	movs	r3, #0
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	e012      	b.n	8006c50 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	7819      	ldrb	r1, [r3, #0]
 8006c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	3334      	adds	r3, #52	@ 0x34
 8006c3a:	460a      	mov	r2, r1
 8006c3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d006      	beq.n	8006c58 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	61fb      	str	r3, [r7, #28]
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	2b0f      	cmp	r3, #15
 8006c54:	d9e9      	bls.n	8006c2a <prvInitialiseNewTask+0x6a>
 8006c56:	e000      	b.n	8006c5a <prvInitialiseNewTask+0x9a>
			{
				break;
 8006c58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c62:	e003      	b.n	8006c6c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6e:	2b37      	cmp	r3, #55	@ 0x37
 8006c70:	d901      	bls.n	8006c76 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c72:	2337      	movs	r3, #55	@ 0x37
 8006c74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c80:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	2200      	movs	r2, #0
 8006c86:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff f93d 	bl	8005f0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c94:	3318      	adds	r3, #24
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff f938 	bl	8005f0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	3354      	adds	r3, #84	@ 0x54
 8006cc6:	224c      	movs	r2, #76	@ 0x4c
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 fece 	bl	8008a6c <memset>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8006d08 <prvInitialiseNewTask+0x148>)
 8006cd4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8006d0c <prvInitialiseNewTask+0x14c>)
 8006cda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	4a0c      	ldr	r2, [pc, #48]	@ (8006d10 <prvInitialiseNewTask+0x150>)
 8006ce0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	68f9      	ldr	r1, [r7, #12]
 8006ce6:	69b8      	ldr	r0, [r7, #24]
 8006ce8:	f001 fa96 	bl	8008218 <pxPortInitialiseStack>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cfe:	bf00      	nop
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20005d90 	.word	0x20005d90
 8006d0c:	20005df8 	.word	0x20005df8
 8006d10:	20005e60 	.word	0x20005e60

08006d14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d1c:	f001 fb8e 	bl	800843c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d20:	4b2d      	ldr	r3, [pc, #180]	@ (8006dd8 <prvAddNewTaskToReadyList+0xc4>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd8 <prvAddNewTaskToReadyList+0xc4>)
 8006d28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006ddc <prvAddNewTaskToReadyList+0xc8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d32:	4a2a      	ldr	r2, [pc, #168]	@ (8006ddc <prvAddNewTaskToReadyList+0xc8>)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d38:	4b27      	ldr	r3, [pc, #156]	@ (8006dd8 <prvAddNewTaskToReadyList+0xc4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d110      	bne.n	8006d62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d40:	f000 fc56 	bl	80075f0 <prvInitialiseTaskLists>
 8006d44:	e00d      	b.n	8006d62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d46:	4b26      	ldr	r3, [pc, #152]	@ (8006de0 <prvAddNewTaskToReadyList+0xcc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d4e:	4b23      	ldr	r3, [pc, #140]	@ (8006ddc <prvAddNewTaskToReadyList+0xc8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d802      	bhi.n	8006d62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006ddc <prvAddNewTaskToReadyList+0xc8>)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d62:	4b20      	ldr	r3, [pc, #128]	@ (8006de4 <prvAddNewTaskToReadyList+0xd0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3301      	adds	r3, #1
 8006d68:	4a1e      	ldr	r2, [pc, #120]	@ (8006de4 <prvAddNewTaskToReadyList+0xd0>)
 8006d6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006de4 <prvAddNewTaskToReadyList+0xd0>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d78:	4b1b      	ldr	r3, [pc, #108]	@ (8006de8 <prvAddNewTaskToReadyList+0xd4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d903      	bls.n	8006d88 <prvAddNewTaskToReadyList+0x74>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d84:	4a18      	ldr	r2, [pc, #96]	@ (8006de8 <prvAddNewTaskToReadyList+0xd4>)
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4a15      	ldr	r2, [pc, #84]	@ (8006dec <prvAddNewTaskToReadyList+0xd8>)
 8006d96:	441a      	add	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	f7ff f8c1 	bl	8005f26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006da4:	f001 fb80 	bl	80084a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006da8:	4b0d      	ldr	r3, [pc, #52]	@ (8006de0 <prvAddNewTaskToReadyList+0xcc>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00e      	beq.n	8006dce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006db0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ddc <prvAddNewTaskToReadyList+0xc8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d207      	bcs.n	8006dce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006df0 <prvAddNewTaskToReadyList+0xdc>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20002018 	.word	0x20002018
 8006ddc:	20001b44 	.word	0x20001b44
 8006de0:	20002024 	.word	0x20002024
 8006de4:	20002034 	.word	0x20002034
 8006de8:	20002020 	.word	0x20002020
 8006dec:	20001b48 	.word	0x20001b48
 8006df0:	e000ed04 	.word	0xe000ed04

08006df4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01a      	beq.n	8006e3c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e06:	4b15      	ldr	r3, [pc, #84]	@ (8006e5c <vTaskDelay+0x68>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00d      	beq.n	8006e2a <vTaskDelay+0x36>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	b672      	cpsid	i
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	b662      	cpsie	i
 8006e22:	60bb      	str	r3, [r7, #8]
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	e7fd      	b.n	8006e26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006e2a:	f000 f88f 	bl	8006f4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e2e:	2100      	movs	r1, #0
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fd6d 	bl	8007910 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e36:	f000 f897 	bl	8006f68 <xTaskResumeAll>
 8006e3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d107      	bne.n	8006e52 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006e42:	4b07      	ldr	r3, [pc, #28]	@ (8006e60 <vTaskDelay+0x6c>)
 8006e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e52:	bf00      	nop
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20002040 	.word	0x20002040
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	@ 0x28
 8006e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e72:	463a      	mov	r2, r7
 8006e74:	1d39      	adds	r1, r7, #4
 8006e76:	f107 0308 	add.w	r3, r7, #8
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fff2 	bl	8005e64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	9202      	str	r2, [sp, #8]
 8006e88:	9301      	str	r3, [sp, #4]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	460a      	mov	r2, r1
 8006e92:	4926      	ldr	r1, [pc, #152]	@ (8006f2c <vTaskStartScheduler+0xc8>)
 8006e94:	4826      	ldr	r0, [pc, #152]	@ (8006f30 <vTaskStartScheduler+0xcc>)
 8006e96:	f7ff fde7 	bl	8006a68 <xTaskCreateStatic>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	4a25      	ldr	r2, [pc, #148]	@ (8006f34 <vTaskStartScheduler+0xd0>)
 8006e9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ea0:	4b24      	ldr	r3, [pc, #144]	@ (8006f34 <vTaskStartScheduler+0xd0>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	e001      	b.n	8006eb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d102      	bne.n	8006ebe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006eb8:	f000 fd7e 	bl	80079b8 <xTimerCreateTimerTask>
 8006ebc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d11d      	bne.n	8006f00 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	b672      	cpsid	i
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	b662      	cpsie	i
 8006ed8:	613b      	str	r3, [r7, #16]
}
 8006eda:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006edc:	4b16      	ldr	r3, [pc, #88]	@ (8006f38 <vTaskStartScheduler+0xd4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3354      	adds	r3, #84	@ 0x54
 8006ee2:	4a16      	ldr	r2, [pc, #88]	@ (8006f3c <vTaskStartScheduler+0xd8>)
 8006ee4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ee6:	4b16      	ldr	r3, [pc, #88]	@ (8006f40 <vTaskStartScheduler+0xdc>)
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006eee:	4b15      	ldr	r3, [pc, #84]	@ (8006f44 <vTaskStartScheduler+0xe0>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ef4:	4b14      	ldr	r3, [pc, #80]	@ (8006f48 <vTaskStartScheduler+0xe4>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006efa:	f001 fa21 	bl	8008340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006efe:	e011      	b.n	8006f24 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f06:	d10d      	bne.n	8006f24 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0c:	b672      	cpsid	i
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	b662      	cpsie	i
 8006f1c:	60fb      	str	r3, [r7, #12]
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	e7fd      	b.n	8006f20 <vTaskStartScheduler+0xbc>
}
 8006f24:	bf00      	nop
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	08008d00 	.word	0x08008d00
 8006f30:	080075c1 	.word	0x080075c1
 8006f34:	2000203c 	.word	0x2000203c
 8006f38:	20001b44 	.word	0x20001b44
 8006f3c:	20000010 	.word	0x20000010
 8006f40:	20002038 	.word	0x20002038
 8006f44:	20002024 	.word	0x20002024
 8006f48:	2000201c 	.word	0x2000201c

08006f4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f50:	4b04      	ldr	r3, [pc, #16]	@ (8006f64 <vTaskSuspendAll+0x18>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	4a03      	ldr	r2, [pc, #12]	@ (8006f64 <vTaskSuspendAll+0x18>)
 8006f58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f5a:	bf00      	nop
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20002040 	.word	0x20002040

08006f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f76:	4b43      	ldr	r3, [pc, #268]	@ (8007084 <xTaskResumeAll+0x11c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10d      	bne.n	8006f9a <xTaskResumeAll+0x32>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f82:	b672      	cpsid	i
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	b662      	cpsie	i
 8006f92:	603b      	str	r3, [r7, #0]
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	e7fd      	b.n	8006f96 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f9a:	f001 fa4f 	bl	800843c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f9e:	4b39      	ldr	r3, [pc, #228]	@ (8007084 <xTaskResumeAll+0x11c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	4a37      	ldr	r2, [pc, #220]	@ (8007084 <xTaskResumeAll+0x11c>)
 8006fa6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa8:	4b36      	ldr	r3, [pc, #216]	@ (8007084 <xTaskResumeAll+0x11c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d162      	bne.n	8007076 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fb0:	4b35      	ldr	r3, [pc, #212]	@ (8007088 <xTaskResumeAll+0x120>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d05e      	beq.n	8007076 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fb8:	e02f      	b.n	800701a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fba:	4b34      	ldr	r3, [pc, #208]	@ (800708c <xTaskResumeAll+0x124>)
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3318      	adds	r3, #24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff f80a 	bl	8005fe0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff f805 	bl	8005fe0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	4b2d      	ldr	r3, [pc, #180]	@ (8007090 <xTaskResumeAll+0x128>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d903      	bls.n	8006fea <xTaskResumeAll+0x82>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8007090 <xTaskResumeAll+0x128>)
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4a27      	ldr	r2, [pc, #156]	@ (8007094 <xTaskResumeAll+0x12c>)
 8006ff8:	441a      	add	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f7fe ff90 	bl	8005f26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700a:	4b23      	ldr	r3, [pc, #140]	@ (8007098 <xTaskResumeAll+0x130>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	429a      	cmp	r2, r3
 8007012:	d302      	bcc.n	800701a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007014:	4b21      	ldr	r3, [pc, #132]	@ (800709c <xTaskResumeAll+0x134>)
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800701a:	4b1c      	ldr	r3, [pc, #112]	@ (800708c <xTaskResumeAll+0x124>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1cb      	bne.n	8006fba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007028:	f000 fbc0 	bl	80077ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800702c:	4b1c      	ldr	r3, [pc, #112]	@ (80070a0 <xTaskResumeAll+0x138>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d010      	beq.n	800705a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007038:	f000 f858 	bl	80070ec <xTaskIncrementTick>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007042:	4b16      	ldr	r3, [pc, #88]	@ (800709c <xTaskResumeAll+0x134>)
 8007044:	2201      	movs	r2, #1
 8007046:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3b01      	subs	r3, #1
 800704c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1f1      	bne.n	8007038 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007054:	4b12      	ldr	r3, [pc, #72]	@ (80070a0 <xTaskResumeAll+0x138>)
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800705a:	4b10      	ldr	r3, [pc, #64]	@ (800709c <xTaskResumeAll+0x134>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d009      	beq.n	8007076 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007062:	2301      	movs	r3, #1
 8007064:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007066:	4b0f      	ldr	r3, [pc, #60]	@ (80070a4 <xTaskResumeAll+0x13c>)
 8007068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007076:	f001 fa17 	bl	80084a8 <vPortExitCritical>

	return xAlreadyYielded;
 800707a:	68bb      	ldr	r3, [r7, #8]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20002040 	.word	0x20002040
 8007088:	20002018 	.word	0x20002018
 800708c:	20001fd8 	.word	0x20001fd8
 8007090:	20002020 	.word	0x20002020
 8007094:	20001b48 	.word	0x20001b48
 8007098:	20001b44 	.word	0x20001b44
 800709c:	2000202c 	.word	0x2000202c
 80070a0:	20002028 	.word	0x20002028
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070ae:	4b05      	ldr	r3, [pc, #20]	@ (80070c4 <xTaskGetTickCount+0x1c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070b4:	687b      	ldr	r3, [r7, #4]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	2000201c 	.word	0x2000201c

080070c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070ce:	f001 fa9d 	bl	800860c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80070d2:	2300      	movs	r3, #0
 80070d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80070d6:	4b04      	ldr	r3, [pc, #16]	@ (80070e8 <xTaskGetTickCountFromISR+0x20>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070dc:	683b      	ldr	r3, [r7, #0]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	2000201c 	.word	0x2000201c

080070ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f6:	4b50      	ldr	r3, [pc, #320]	@ (8007238 <xTaskIncrementTick+0x14c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f040 808c 	bne.w	8007218 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007100:	4b4e      	ldr	r3, [pc, #312]	@ (800723c <xTaskIncrementTick+0x150>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007108:	4a4c      	ldr	r2, [pc, #304]	@ (800723c <xTaskIncrementTick+0x150>)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d123      	bne.n	800715c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007114:	4b4a      	ldr	r3, [pc, #296]	@ (8007240 <xTaskIncrementTick+0x154>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00d      	beq.n	800713a <xTaskIncrementTick+0x4e>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	b672      	cpsid	i
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	b662      	cpsie	i
 8007132:	603b      	str	r3, [r7, #0]
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	e7fd      	b.n	8007136 <xTaskIncrementTick+0x4a>
 800713a:	4b41      	ldr	r3, [pc, #260]	@ (8007240 <xTaskIncrementTick+0x154>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	4b40      	ldr	r3, [pc, #256]	@ (8007244 <xTaskIncrementTick+0x158>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a3e      	ldr	r2, [pc, #248]	@ (8007240 <xTaskIncrementTick+0x154>)
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	4a3e      	ldr	r2, [pc, #248]	@ (8007244 <xTaskIncrementTick+0x158>)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	4b3e      	ldr	r3, [pc, #248]	@ (8007248 <xTaskIncrementTick+0x15c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	4a3c      	ldr	r2, [pc, #240]	@ (8007248 <xTaskIncrementTick+0x15c>)
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	f000 fb28 	bl	80077ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800715c:	4b3b      	ldr	r3, [pc, #236]	@ (800724c <xTaskIncrementTick+0x160>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	429a      	cmp	r2, r3
 8007164:	d349      	bcc.n	80071fa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007166:	4b36      	ldr	r3, [pc, #216]	@ (8007240 <xTaskIncrementTick+0x154>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007170:	4b36      	ldr	r3, [pc, #216]	@ (800724c <xTaskIncrementTick+0x160>)
 8007172:	f04f 32ff 	mov.w	r2, #4294967295
 8007176:	601a      	str	r2, [r3, #0]
					break;
 8007178:	e03f      	b.n	80071fa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800717a:	4b31      	ldr	r3, [pc, #196]	@ (8007240 <xTaskIncrementTick+0x154>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	429a      	cmp	r2, r3
 8007190:	d203      	bcs.n	800719a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007192:	4a2e      	ldr	r2, [pc, #184]	@ (800724c <xTaskIncrementTick+0x160>)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007198:	e02f      	b.n	80071fa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	3304      	adds	r3, #4
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe ff1e 	bl	8005fe0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	3318      	adds	r3, #24
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe ff15 	bl	8005fe0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ba:	4b25      	ldr	r3, [pc, #148]	@ (8007250 <xTaskIncrementTick+0x164>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d903      	bls.n	80071ca <xTaskIncrementTick+0xde>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c6:	4a22      	ldr	r2, [pc, #136]	@ (8007250 <xTaskIncrementTick+0x164>)
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007254 <xTaskIncrementTick+0x168>)
 80071d8:	441a      	add	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7fe fea0 	bl	8005f26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007258 <xTaskIncrementTick+0x16c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d3b8      	bcc.n	8007166 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f8:	e7b5      	b.n	8007166 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071fa:	4b17      	ldr	r3, [pc, #92]	@ (8007258 <xTaskIncrementTick+0x16c>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007200:	4914      	ldr	r1, [pc, #80]	@ (8007254 <xTaskIncrementTick+0x168>)
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d907      	bls.n	8007222 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007212:	2301      	movs	r3, #1
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	e004      	b.n	8007222 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007218:	4b10      	ldr	r3, [pc, #64]	@ (800725c <xTaskIncrementTick+0x170>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	4a0f      	ldr	r2, [pc, #60]	@ (800725c <xTaskIncrementTick+0x170>)
 8007220:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007222:	4b0f      	ldr	r3, [pc, #60]	@ (8007260 <xTaskIncrementTick+0x174>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800722a:	2301      	movs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800722e:	697b      	ldr	r3, [r7, #20]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20002040 	.word	0x20002040
 800723c:	2000201c 	.word	0x2000201c
 8007240:	20001fd0 	.word	0x20001fd0
 8007244:	20001fd4 	.word	0x20001fd4
 8007248:	20002030 	.word	0x20002030
 800724c:	20002038 	.word	0x20002038
 8007250:	20002020 	.word	0x20002020
 8007254:	20001b48 	.word	0x20001b48
 8007258:	20001b44 	.word	0x20001b44
 800725c:	20002028 	.word	0x20002028
 8007260:	2000202c 	.word	0x2000202c

08007264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800726a:	4b2c      	ldr	r3, [pc, #176]	@ (800731c <vTaskSwitchContext+0xb8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007272:	4b2b      	ldr	r3, [pc, #172]	@ (8007320 <vTaskSwitchContext+0xbc>)
 8007274:	2201      	movs	r2, #1
 8007276:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007278:	e049      	b.n	800730e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800727a:	4b29      	ldr	r3, [pc, #164]	@ (8007320 <vTaskSwitchContext+0xbc>)
 800727c:	2200      	movs	r2, #0
 800727e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007280:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <vTaskSwitchContext+0xc0>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	e013      	b.n	80072b0 <vTaskSwitchContext+0x4c>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <vTaskSwitchContext+0x46>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	607b      	str	r3, [r7, #4]
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	e7fd      	b.n	80072a6 <vTaskSwitchContext+0x42>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	491d      	ldr	r1, [pc, #116]	@ (8007328 <vTaskSwitchContext+0xc4>)
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	440b      	add	r3, r1
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0e1      	beq.n	8007288 <vTaskSwitchContext+0x24>
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4a16      	ldr	r2, [pc, #88]	@ (8007328 <vTaskSwitchContext+0xc4>)
 80072d0:	4413      	add	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	605a      	str	r2, [r3, #4]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	3308      	adds	r3, #8
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d104      	bne.n	80072f4 <vTaskSwitchContext+0x90>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	605a      	str	r2, [r3, #4]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	4a0c      	ldr	r2, [pc, #48]	@ (800732c <vTaskSwitchContext+0xc8>)
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	4a09      	ldr	r2, [pc, #36]	@ (8007324 <vTaskSwitchContext+0xc0>)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007304:	4b09      	ldr	r3, [pc, #36]	@ (800732c <vTaskSwitchContext+0xc8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3354      	adds	r3, #84	@ 0x54
 800730a:	4a09      	ldr	r2, [pc, #36]	@ (8007330 <vTaskSwitchContext+0xcc>)
 800730c:	6013      	str	r3, [r2, #0]
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	20002040 	.word	0x20002040
 8007320:	2000202c 	.word	0x2000202c
 8007324:	20002020 	.word	0x20002020
 8007328:	20001b48 	.word	0x20001b48
 800732c:	20001b44 	.word	0x20001b44
 8007330:	20000010 	.word	0x20000010

08007334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10d      	bne.n	8007360 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007348:	b672      	cpsid	i
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	b662      	cpsie	i
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007360:	4b07      	ldr	r3, [pc, #28]	@ (8007380 <vTaskPlaceOnEventList+0x4c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3318      	adds	r3, #24
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7fe fe00 	bl	8005f6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800736e:	2101      	movs	r1, #1
 8007370:	6838      	ldr	r0, [r7, #0]
 8007372:	f000 facd 	bl	8007910 <prvAddCurrentTaskToDelayedList>
}
 8007376:	bf00      	nop
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20001b44 	.word	0x20001b44

08007384 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10d      	bne.n	80073b2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	b672      	cpsid	i
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	b662      	cpsie	i
 80073aa:	617b      	str	r3, [r7, #20]
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073b2:	4b0a      	ldr	r3, [pc, #40]	@ (80073dc <vTaskPlaceOnEventListRestricted+0x58>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3318      	adds	r3, #24
 80073b8:	4619      	mov	r1, r3
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7fe fdb3 	bl	8005f26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	68b8      	ldr	r0, [r7, #8]
 80073d0:	f000 fa9e 	bl	8007910 <prvAddCurrentTaskToDelayedList>
	}
 80073d4:	bf00      	nop
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	20001b44 	.word	0x20001b44

080073e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10d      	bne.n	8007412 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fa:	b672      	cpsid	i
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	b662      	cpsie	i
 800740a:	60fb      	str	r3, [r7, #12]
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	3318      	adds	r3, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fde2 	bl	8005fe0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800741c:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <xTaskRemoveFromEventList+0xb4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11d      	bne.n	8007460 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	3304      	adds	r3, #4
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fdd9 	bl	8005fe0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007432:	4b19      	ldr	r3, [pc, #100]	@ (8007498 <xTaskRemoveFromEventList+0xb8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d903      	bls.n	8007442 <xTaskRemoveFromEventList+0x62>
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	4a16      	ldr	r2, [pc, #88]	@ (8007498 <xTaskRemoveFromEventList+0xb8>)
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4a13      	ldr	r2, [pc, #76]	@ (800749c <xTaskRemoveFromEventList+0xbc>)
 8007450:	441a      	add	r2, r3
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	3304      	adds	r3, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f7fe fd64 	bl	8005f26 <vListInsertEnd>
 800745e:	e005      	b.n	800746c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	3318      	adds	r3, #24
 8007464:	4619      	mov	r1, r3
 8007466:	480e      	ldr	r0, [pc, #56]	@ (80074a0 <xTaskRemoveFromEventList+0xc0>)
 8007468:	f7fe fd5d 	bl	8005f26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007470:	4b0c      	ldr	r3, [pc, #48]	@ (80074a4 <xTaskRemoveFromEventList+0xc4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	429a      	cmp	r2, r3
 8007478:	d905      	bls.n	8007486 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800747a:	2301      	movs	r3, #1
 800747c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800747e:	4b0a      	ldr	r3, [pc, #40]	@ (80074a8 <xTaskRemoveFromEventList+0xc8>)
 8007480:	2201      	movs	r2, #1
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e001      	b.n	800748a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800748a:	697b      	ldr	r3, [r7, #20]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20002040 	.word	0x20002040
 8007498:	20002020 	.word	0x20002020
 800749c:	20001b48 	.word	0x20001b48
 80074a0:	20001fd8 	.word	0x20001fd8
 80074a4:	20001b44 	.word	0x20001b44
 80074a8:	2000202c 	.word	0x2000202c

080074ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074b4:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <vTaskInternalSetTimeOutState+0x24>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074bc:	4b05      	ldr	r3, [pc, #20]	@ (80074d4 <vTaskInternalSetTimeOutState+0x28>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	605a      	str	r2, [r3, #4]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20002030 	.word	0x20002030
 80074d4:	2000201c 	.word	0x2000201c

080074d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10d      	bne.n	8007504 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	b672      	cpsid	i
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	b662      	cpsie	i
 80074fc:	613b      	str	r3, [r7, #16]
}
 80074fe:	bf00      	nop
 8007500:	bf00      	nop
 8007502:	e7fd      	b.n	8007500 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10d      	bne.n	8007526 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	b672      	cpsid	i
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	b662      	cpsie	i
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	bf00      	nop
 8007524:	e7fd      	b.n	8007522 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007526:	f000 ff89 	bl	800843c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800752a:	4b1d      	ldr	r3, [pc, #116]	@ (80075a0 <xTaskCheckForTimeOut+0xc8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d102      	bne.n	800754a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	e023      	b.n	8007592 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4b15      	ldr	r3, [pc, #84]	@ (80075a4 <xTaskCheckForTimeOut+0xcc>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d007      	beq.n	8007566 <xTaskCheckForTimeOut+0x8e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	429a      	cmp	r2, r3
 800755e:	d302      	bcc.n	8007566 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007560:	2301      	movs	r3, #1
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	e015      	b.n	8007592 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	429a      	cmp	r2, r3
 800756e:	d20b      	bcs.n	8007588 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	1ad2      	subs	r2, r2, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff ff95 	bl	80074ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007582:	2300      	movs	r3, #0
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	e004      	b.n	8007592 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800758e:	2301      	movs	r3, #1
 8007590:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007592:	f000 ff89 	bl	80084a8 <vPortExitCritical>

	return xReturn;
 8007596:	69fb      	ldr	r3, [r7, #28]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3720      	adds	r7, #32
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	2000201c 	.word	0x2000201c
 80075a4:	20002030 	.word	0x20002030

080075a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075ac:	4b03      	ldr	r3, [pc, #12]	@ (80075bc <vTaskMissedYield+0x14>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
}
 80075b2:	bf00      	nop
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	2000202c 	.word	0x2000202c

080075c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075c8:	f000 f852 	bl	8007670 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075cc:	4b06      	ldr	r3, [pc, #24]	@ (80075e8 <prvIdleTask+0x28>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d9f9      	bls.n	80075c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075d4:	4b05      	ldr	r3, [pc, #20]	@ (80075ec <prvIdleTask+0x2c>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075e4:	e7f0      	b.n	80075c8 <prvIdleTask+0x8>
 80075e6:	bf00      	nop
 80075e8:	20001b48 	.word	0x20001b48
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075f6:	2300      	movs	r3, #0
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	e00c      	b.n	8007616 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4613      	mov	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4a12      	ldr	r2, [pc, #72]	@ (8007650 <prvInitialiseTaskLists+0x60>)
 8007608:	4413      	add	r3, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fc5e 	bl	8005ecc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3301      	adds	r3, #1
 8007614:	607b      	str	r3, [r7, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b37      	cmp	r3, #55	@ 0x37
 800761a:	d9ef      	bls.n	80075fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800761c:	480d      	ldr	r0, [pc, #52]	@ (8007654 <prvInitialiseTaskLists+0x64>)
 800761e:	f7fe fc55 	bl	8005ecc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007622:	480d      	ldr	r0, [pc, #52]	@ (8007658 <prvInitialiseTaskLists+0x68>)
 8007624:	f7fe fc52 	bl	8005ecc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007628:	480c      	ldr	r0, [pc, #48]	@ (800765c <prvInitialiseTaskLists+0x6c>)
 800762a:	f7fe fc4f 	bl	8005ecc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800762e:	480c      	ldr	r0, [pc, #48]	@ (8007660 <prvInitialiseTaskLists+0x70>)
 8007630:	f7fe fc4c 	bl	8005ecc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007634:	480b      	ldr	r0, [pc, #44]	@ (8007664 <prvInitialiseTaskLists+0x74>)
 8007636:	f7fe fc49 	bl	8005ecc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800763a:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <prvInitialiseTaskLists+0x78>)
 800763c:	4a05      	ldr	r2, [pc, #20]	@ (8007654 <prvInitialiseTaskLists+0x64>)
 800763e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007640:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <prvInitialiseTaskLists+0x7c>)
 8007642:	4a05      	ldr	r2, [pc, #20]	@ (8007658 <prvInitialiseTaskLists+0x68>)
 8007644:	601a      	str	r2, [r3, #0]
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20001b48 	.word	0x20001b48
 8007654:	20001fa8 	.word	0x20001fa8
 8007658:	20001fbc 	.word	0x20001fbc
 800765c:	20001fd8 	.word	0x20001fd8
 8007660:	20001fec 	.word	0x20001fec
 8007664:	20002004 	.word	0x20002004
 8007668:	20001fd0 	.word	0x20001fd0
 800766c:	20001fd4 	.word	0x20001fd4

08007670 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007676:	e019      	b.n	80076ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007678:	f000 fee0 	bl	800843c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767c:	4b10      	ldr	r3, [pc, #64]	@ (80076c0 <prvCheckTasksWaitingTermination+0x50>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3304      	adds	r3, #4
 8007688:	4618      	mov	r0, r3
 800768a:	f7fe fca9 	bl	8005fe0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800768e:	4b0d      	ldr	r3, [pc, #52]	@ (80076c4 <prvCheckTasksWaitingTermination+0x54>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3b01      	subs	r3, #1
 8007694:	4a0b      	ldr	r2, [pc, #44]	@ (80076c4 <prvCheckTasksWaitingTermination+0x54>)
 8007696:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007698:	4b0b      	ldr	r3, [pc, #44]	@ (80076c8 <prvCheckTasksWaitingTermination+0x58>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3b01      	subs	r3, #1
 800769e:	4a0a      	ldr	r2, [pc, #40]	@ (80076c8 <prvCheckTasksWaitingTermination+0x58>)
 80076a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076a2:	f000 ff01 	bl	80084a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f848 	bl	800773c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <prvCheckTasksWaitingTermination+0x58>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e1      	bne.n	8007678 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20001fec 	.word	0x20001fec
 80076c4:	20002018 	.word	0x20002018
 80076c8:	20002000 	.word	0x20002000

080076cc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80076d8:	e005      	b.n	80076e6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3301      	adds	r3, #1
 80076de:	607b      	str	r3, [r7, #4]
			ulCount++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2ba5      	cmp	r3, #165	@ 0xa5
 80076ec:	d0f5      	beq.n	80076da <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	089b      	lsrs	r3, r3, #2
 80076f2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	b29b      	uxth	r3, r3
	}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <uxTaskGetStackHighWaterMark+0x14>
 8007712:	4b09      	ldr	r3, [pc, #36]	@ (8007738 <uxTaskGetStackHighWaterMark+0x34>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	e000      	b.n	800771a <uxTaskGetStackHighWaterMark+0x16>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007720:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8007722:	6938      	ldr	r0, [r7, #16]
 8007724:	f7ff ffd2 	bl	80076cc <prvTaskCheckFreeStackSpace>
 8007728:	4603      	mov	r3, r0
 800772a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800772c:	68fb      	ldr	r3, [r7, #12]
	}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20001b44 	.word	0x20001b44

0800773c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3354      	adds	r3, #84	@ 0x54
 8007748:	4618      	mov	r0, r3
 800774a:	f001 f997 	bl	8008a7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007754:	2b00      	cmp	r3, #0
 8007756:	d108      	bne.n	800776a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775c:	4618      	mov	r0, r3
 800775e:	f001 f869 	bl	8008834 <vPortFree>
				vPortFree( pxTCB );
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 f866 	bl	8008834 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007768:	e01b      	b.n	80077a2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007770:	2b01      	cmp	r3, #1
 8007772:	d103      	bne.n	800777c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f85d 	bl	8008834 <vPortFree>
	}
 800777a:	e012      	b.n	80077a2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007782:	2b02      	cmp	r3, #2
 8007784:	d00d      	beq.n	80077a2 <prvDeleteTCB+0x66>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778a:	b672      	cpsid	i
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	b662      	cpsie	i
 800779a:	60fb      	str	r3, [r7, #12]
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	e7fd      	b.n	800779e <prvDeleteTCB+0x62>
	}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077b2:	4b0c      	ldr	r3, [pc, #48]	@ (80077e4 <prvResetNextTaskUnblockTime+0x38>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d104      	bne.n	80077c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <prvResetNextTaskUnblockTime+0x3c>)
 80077be:	f04f 32ff 	mov.w	r2, #4294967295
 80077c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077c4:	e008      	b.n	80077d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c6:	4b07      	ldr	r3, [pc, #28]	@ (80077e4 <prvResetNextTaskUnblockTime+0x38>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	4a04      	ldr	r2, [pc, #16]	@ (80077e8 <prvResetNextTaskUnblockTime+0x3c>)
 80077d6:	6013      	str	r3, [r2, #0]
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	20001fd0 	.word	0x20001fd0
 80077e8:	20002038 	.word	0x20002038

080077ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007820 <xTaskGetSchedulerState+0x34>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077fa:	2301      	movs	r3, #1
 80077fc:	607b      	str	r3, [r7, #4]
 80077fe:	e008      	b.n	8007812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007800:	4b08      	ldr	r3, [pc, #32]	@ (8007824 <xTaskGetSchedulerState+0x38>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007808:	2302      	movs	r3, #2
 800780a:	607b      	str	r3, [r7, #4]
 800780c:	e001      	b.n	8007812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800780e:	2300      	movs	r3, #0
 8007810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007812:	687b      	ldr	r3, [r7, #4]
	}
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	20002024 	.word	0x20002024
 8007824:	20002040 	.word	0x20002040

08007828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d05c      	beq.n	80078f8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800783e:	4b31      	ldr	r3, [pc, #196]	@ (8007904 <xTaskPriorityDisinherit+0xdc>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	429a      	cmp	r2, r3
 8007846:	d00d      	beq.n	8007864 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784c:	b672      	cpsid	i
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	b662      	cpsie	i
 800785c:	60fb      	str	r3, [r7, #12]
}
 800785e:	bf00      	nop
 8007860:	bf00      	nop
 8007862:	e7fd      	b.n	8007860 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10d      	bne.n	8007888 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007870:	b672      	cpsid	i
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	b662      	cpsie	i
 8007880:	60bb      	str	r3, [r7, #8]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788c:	1e5a      	subs	r2, r3, #1
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800789a:	429a      	cmp	r2, r3
 800789c:	d02c      	beq.n	80078f8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d128      	bne.n	80078f8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe fb98 	bl	8005fe0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007908 <xTaskPriorityDisinherit+0xe0>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d903      	bls.n	80078d8 <xTaskPriorityDisinherit+0xb0>
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d4:	4a0c      	ldr	r2, [pc, #48]	@ (8007908 <xTaskPriorityDisinherit+0xe0>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4a09      	ldr	r2, [pc, #36]	@ (800790c <xTaskPriorityDisinherit+0xe4>)
 80078e6:	441a      	add	r2, r3
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7fe fb19 	bl	8005f26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078f4:	2301      	movs	r3, #1
 80078f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078f8:	697b      	ldr	r3, [r7, #20]
	}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20001b44 	.word	0x20001b44
 8007908:	20002020 	.word	0x20002020
 800790c:	20001b48 	.word	0x20001b48

08007910 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800791a:	4b21      	ldr	r3, [pc, #132]	@ (80079a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007920:	4b20      	ldr	r3, [pc, #128]	@ (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3304      	adds	r3, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fb5a 	bl	8005fe0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d10a      	bne.n	800794a <prvAddCurrentTaskToDelayedList+0x3a>
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800793a:	4b1a      	ldr	r3, [pc, #104]	@ (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4819      	ldr	r0, [pc, #100]	@ (80079a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007944:	f7fe faef 	bl	8005f26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007948:	e026      	b.n	8007998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4413      	add	r3, r2
 8007950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007952:	4b14      	ldr	r3, [pc, #80]	@ (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	429a      	cmp	r2, r3
 8007960:	d209      	bcs.n	8007976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007962:	4b12      	ldr	r3, [pc, #72]	@ (80079ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4b0f      	ldr	r3, [pc, #60]	@ (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3304      	adds	r3, #4
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f7fe fafd 	bl	8005f6e <vListInsert>
}
 8007974:	e010      	b.n	8007998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007976:	4b0e      	ldr	r3, [pc, #56]	@ (80079b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4b0a      	ldr	r3, [pc, #40]	@ (80079a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3304      	adds	r3, #4
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f7fe faf3 	bl	8005f6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007988:	4b0a      	ldr	r3, [pc, #40]	@ (80079b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	429a      	cmp	r2, r3
 8007990:	d202      	bcs.n	8007998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007992:	4a08      	ldr	r2, [pc, #32]	@ (80079b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6013      	str	r3, [r2, #0]
}
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	2000201c 	.word	0x2000201c
 80079a4:	20001b44 	.word	0x20001b44
 80079a8:	20002004 	.word	0x20002004
 80079ac:	20001fd4 	.word	0x20001fd4
 80079b0:	20001fd0 	.word	0x20001fd0
 80079b4:	20002038 	.word	0x20002038

080079b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	@ 0x28
 80079bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80079c2:	f000 fbc5 	bl	8008150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80079c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a40 <xTimerCreateTimerTask+0x88>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d021      	beq.n	8007a12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80079d6:	1d3a      	adds	r2, r7, #4
 80079d8:	f107 0108 	add.w	r1, r7, #8
 80079dc:	f107 030c 	add.w	r3, r7, #12
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe fa59 	bl	8005e98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	9202      	str	r2, [sp, #8]
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	2308      	movs	r3, #8
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	2300      	movs	r3, #0
 80079f6:	460a      	mov	r2, r1
 80079f8:	4912      	ldr	r1, [pc, #72]	@ (8007a44 <xTimerCreateTimerTask+0x8c>)
 80079fa:	4813      	ldr	r0, [pc, #76]	@ (8007a48 <xTimerCreateTimerTask+0x90>)
 80079fc:	f7ff f834 	bl	8006a68 <xTaskCreateStatic>
 8007a00:	4603      	mov	r3, r0
 8007a02:	4a12      	ldr	r2, [pc, #72]	@ (8007a4c <xTimerCreateTimerTask+0x94>)
 8007a04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a06:	4b11      	ldr	r3, [pc, #68]	@ (8007a4c <xTimerCreateTimerTask+0x94>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10d      	bne.n	8007a34 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	b672      	cpsid	i
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	b662      	cpsie	i
 8007a2c:	613b      	str	r3, [r7, #16]
}
 8007a2e:	bf00      	nop
 8007a30:	bf00      	nop
 8007a32:	e7fd      	b.n	8007a30 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007a34:	697b      	ldr	r3, [r7, #20]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20002074 	.word	0x20002074
 8007a44:	08008d08 	.word	0x08008d08
 8007a48:	08007cd9 	.word	0x08007cd9
 8007a4c:	20002078 	.word	0x20002078

08007a50 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007a5e:	202c      	movs	r0, #44	@ 0x2c
 8007a60:	f000 fe1a 	bl	8008698 <pvPortMalloc>
 8007a64:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00d      	beq.n	8007a88 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	68b9      	ldr	r1, [r7, #8]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f849 	bl	8007b1a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007a88:	697b      	ldr	r3, [r7, #20]
	}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3718      	adds	r7, #24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b08a      	sub	sp, #40	@ 0x28
 8007a96:	af02      	add	r7, sp, #8
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
 8007a9e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007aa0:	232c      	movs	r3, #44	@ 0x2c
 8007aa2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b2c      	cmp	r3, #44	@ 0x2c
 8007aa8:	d00d      	beq.n	8007ac6 <xTimerCreateStatic+0x34>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aae:	b672      	cpsid	i
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	b662      	cpsie	i
 8007abe:	61bb      	str	r3, [r7, #24]
}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	e7fd      	b.n	8007ac2 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ac6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10d      	bne.n	8007aea <xTimerCreateStatic+0x58>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	b672      	cpsid	i
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	b662      	cpsie	i
 8007ae2:	617b      	str	r3, [r7, #20]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aec:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00d      	beq.n	8007b10 <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	68b9      	ldr	r1, [r7, #8]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 f805 	bl	8007b1a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007b10:	69fb      	ldr	r3, [r7, #28]
	}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3720      	adds	r7, #32
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b086      	sub	sp, #24
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
 8007b26:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10d      	bne.n	8007b4a <prvInitialiseNewTimer+0x30>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	b672      	cpsid	i
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	b662      	cpsie	i
 8007b42:	617b      	str	r3, [r7, #20]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d01e      	beq.n	8007b8e <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007b50:	f000 fafe 	bl	8008150 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	6a3a      	ldr	r2, [r7, #32]
 8007b6a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe f9cb 	bl	8005f0c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d008      	beq.n	8007b8e <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b82:	f043 0304 	orr.w	r3, r3, #4
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007b8e:	bf00      	nop
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	@ 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10d      	bne.n	8007bcc <xTimerGenericCommand+0x34>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb4:	b672      	cpsid	i
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	b662      	cpsie	i
 8007bc4:	623b      	str	r3, [r7, #32]
}
 8007bc6:	bf00      	nop
 8007bc8:	bf00      	nop
 8007bca:	e7fd      	b.n	8007bc8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bcc:	4b19      	ldr	r3, [pc, #100]	@ (8007c34 <xTimerGenericCommand+0x9c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d02a      	beq.n	8007c2a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	dc18      	bgt.n	8007c18 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007be6:	f7ff fe01 	bl	80077ec <xTaskGetSchedulerState>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d109      	bne.n	8007c04 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bf0:	4b10      	ldr	r3, [pc, #64]	@ (8007c34 <xTimerGenericCommand+0x9c>)
 8007bf2:	6818      	ldr	r0, [r3, #0]
 8007bf4:	f107 0110 	add.w	r1, r7, #16
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bfc:	f7fe fb30 	bl	8006260 <xQueueGenericSend>
 8007c00:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c02:	e012      	b.n	8007c2a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c04:	4b0b      	ldr	r3, [pc, #44]	@ (8007c34 <xTimerGenericCommand+0x9c>)
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	f107 0110 	add.w	r1, r7, #16
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f7fe fb26 	bl	8006260 <xQueueGenericSend>
 8007c14:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c16:	e008      	b.n	8007c2a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c18:	4b06      	ldr	r3, [pc, #24]	@ (8007c34 <xTimerGenericCommand+0x9c>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	f107 0110 	add.w	r1, r7, #16
 8007c20:	2300      	movs	r3, #0
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	f7fe fc26 	bl	8006474 <xQueueGenericSendFromISR>
 8007c28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3728      	adds	r7, #40	@ 0x28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	20002074 	.word	0x20002074

08007c38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c42:	4b24      	ldr	r3, [pc, #144]	@ (8007cd4 <prvProcessExpiredTimer+0x9c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fe f9c5 	bl	8005fe0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d025      	beq.n	8007cb0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	699a      	ldr	r2, [r3, #24]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	18d1      	adds	r1, r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	6978      	ldr	r0, [r7, #20]
 8007c72:	f000 f8d7 	bl	8007e24 <prvInsertTimerInActiveList>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d022      	beq.n	8007cc2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	2300      	movs	r3, #0
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	2100      	movs	r1, #0
 8007c86:	6978      	ldr	r0, [r7, #20]
 8007c88:	f7ff ff86 	bl	8007b98 <xTimerGenericCommand>
 8007c8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d116      	bne.n	8007cc2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	b672      	cpsid	i
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	b662      	cpsie	i
 8007ca8:	60fb      	str	r3, [r7, #12]
}
 8007caa:	bf00      	nop
 8007cac:	bf00      	nop
 8007cae:	e7fd      	b.n	8007cac <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	6978      	ldr	r0, [r7, #20]
 8007cc8:	4798      	blx	r3
}
 8007cca:	bf00      	nop
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	2000206c 	.word	0x2000206c

08007cd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ce0:	f107 0308 	add.w	r3, r7, #8
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 f859 	bl	8007d9c <prvGetNextExpireTime>
 8007cea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f805 	bl	8007d00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007cf6:	f000 f8d7 	bl	8007ea8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cfa:	bf00      	nop
 8007cfc:	e7f0      	b.n	8007ce0 <prvTimerTask+0x8>
	...

08007d00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d0a:	f7ff f91f 	bl	8006f4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d0e:	f107 0308 	add.w	r3, r7, #8
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 f866 	bl	8007de4 <prvSampleTimeNow>
 8007d18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d130      	bne.n	8007d82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10a      	bne.n	8007d3c <prvProcessTimerOrBlockTask+0x3c>
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d806      	bhi.n	8007d3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d2e:	f7ff f91b 	bl	8006f68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff ff7f 	bl	8007c38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d3a:	e024      	b.n	8007d86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d42:	4b13      	ldr	r3, [pc, #76]	@ (8007d90 <prvProcessTimerOrBlockTask+0x90>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <prvProcessTimerOrBlockTask+0x50>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e000      	b.n	8007d52 <prvProcessTimerOrBlockTask+0x52>
 8007d50:	2300      	movs	r3, #0
 8007d52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d54:	4b0f      	ldr	r3, [pc, #60]	@ (8007d94 <prvProcessTimerOrBlockTask+0x94>)
 8007d56:	6818      	ldr	r0, [r3, #0]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	4619      	mov	r1, r3
 8007d62:	f7fe fe4d 	bl	8006a00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d66:	f7ff f8ff 	bl	8006f68 <xTaskResumeAll>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d70:	4b09      	ldr	r3, [pc, #36]	@ (8007d98 <prvProcessTimerOrBlockTask+0x98>)
 8007d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	f3bf 8f6f 	isb	sy
}
 8007d80:	e001      	b.n	8007d86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d82:	f7ff f8f1 	bl	8006f68 <xTaskResumeAll>
}
 8007d86:	bf00      	nop
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20002070 	.word	0x20002070
 8007d94:	20002074 	.word	0x20002074
 8007d98:	e000ed04 	.word	0xe000ed04

08007d9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007da4:	4b0e      	ldr	r3, [pc, #56]	@ (8007de0 <prvGetNextExpireTime+0x44>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <prvGetNextExpireTime+0x16>
 8007dae:	2201      	movs	r2, #1
 8007db0:	e000      	b.n	8007db4 <prvGetNextExpireTime+0x18>
 8007db2:	2200      	movs	r2, #0
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d105      	bne.n	8007dcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dc0:	4b07      	ldr	r3, [pc, #28]	@ (8007de0 <prvGetNextExpireTime+0x44>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	e001      	b.n	8007dd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	2000206c 	.word	0x2000206c

08007de4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007dec:	f7ff f95c 	bl	80070a8 <xTaskGetTickCount>
 8007df0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007df2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <prvSampleTimeNow+0x3c>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d205      	bcs.n	8007e08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007dfc:	f000 f940 	bl	8008080 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	e002      	b.n	8007e0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e0e:	4a04      	ldr	r2, [pc, #16]	@ (8007e20 <prvSampleTimeNow+0x3c>)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e14:	68fb      	ldr	r3, [r7, #12]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	2000207c 	.word	0x2000207c

08007e24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e32:	2300      	movs	r3, #0
 8007e34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d812      	bhi.n	8007e70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	1ad2      	subs	r2, r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d302      	bcc.n	8007e5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e01b      	b.n	8007e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ea0 <prvInsertTimerInActiveList+0x7c>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7fe f880 	bl	8005f6e <vListInsert>
 8007e6e:	e012      	b.n	8007e96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d206      	bcs.n	8007e86 <prvInsertTimerInActiveList+0x62>
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e007      	b.n	8007e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e86:	4b07      	ldr	r3, [pc, #28]	@ (8007ea4 <prvInsertTimerInActiveList+0x80>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f7fe f86c 	bl	8005f6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e96:	697b      	ldr	r3, [r7, #20]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	20002070 	.word	0x20002070
 8007ea4:	2000206c 	.word	0x2000206c

08007ea8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08e      	sub	sp, #56	@ 0x38
 8007eac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007eae:	e0d4      	b.n	800805a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	da1b      	bge.n	8007eee <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007eb6:	1d3b      	adds	r3, r7, #4
 8007eb8:	3304      	adds	r3, #4
 8007eba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10d      	bne.n	8007ede <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec6:	b672      	cpsid	i
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	b662      	cpsie	i
 8007ed6:	61fb      	str	r3, [r7, #28]
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	e7fd      	b.n	8007eda <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee4:	6850      	ldr	r0, [r2, #4]
 8007ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee8:	6892      	ldr	r2, [r2, #8]
 8007eea:	4611      	mov	r1, r2
 8007eec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f2c0 80b2 	blt.w	800805a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d004      	beq.n	8007f0c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f04:	3304      	adds	r3, #4
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe f86a 	bl	8005fe0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f0c:	463b      	mov	r3, r7
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff ff68 	bl	8007de4 <prvSampleTimeNow>
 8007f14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	f200 809b 	bhi.w	8008054 <prvProcessReceivedCommands+0x1ac>
 8007f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f24 <prvProcessReceivedCommands+0x7c>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007f4d 	.word	0x08007f4d
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f4d 	.word	0x08007f4d
 8007f30:	08007fc7 	.word	0x08007fc7
 8007f34:	08007fdb 	.word	0x08007fdb
 8007f38:	0800802b 	.word	0x0800802b
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	08007f4d 	.word	0x08007f4d
 8007f44:	08007fc7 	.word	0x08007fc7
 8007f48:	08007fdb 	.word	0x08007fdb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	18d1      	adds	r1, r2, r3
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f6c:	f7ff ff5a 	bl	8007e24 <prvInsertTimerInActiveList>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d070      	beq.n	8008058 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d065      	beq.n	8008058 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	441a      	add	r2, r3
 8007f94:	2300      	movs	r3, #0
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f9e:	f7ff fdfb 	bl	8007b98 <xTimerGenericCommand>
 8007fa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d156      	bne.n	8008058 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fae:	b672      	cpsid	i
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	b662      	cpsie	i
 8007fbe:	61bb      	str	r3, [r7, #24]
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	e7fd      	b.n	8007fc2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007fd8:	e03f      	b.n	800805a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10d      	bne.n	8008016 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	b672      	cpsid	i
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	b662      	cpsie	i
 800800e:	617b      	str	r3, [r7, #20]
}
 8008010:	bf00      	nop
 8008012:	bf00      	nop
 8008014:	e7fd      	b.n	8008012 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	18d1      	adds	r1, r2, r3
 800801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008024:	f7ff fefe 	bl	8007e24 <prvInsertTimerInActiveList>
					break;
 8008028:	e017      	b.n	800805a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800802a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008030:	f003 0302 	and.w	r3, r3, #2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d103      	bne.n	8008040 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800803a:	f000 fbfb 	bl	8008834 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800803e:	e00c      	b.n	800805a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	b2da      	uxtb	r2, r3
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008052:	e002      	b.n	800805a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008054:	bf00      	nop
 8008056:	e000      	b.n	800805a <prvProcessReceivedCommands+0x1b2>
					break;
 8008058:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800805a:	4b08      	ldr	r3, [pc, #32]	@ (800807c <prvProcessReceivedCommands+0x1d4>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	1d39      	adds	r1, r7, #4
 8008060:	2200      	movs	r2, #0
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe faaa 	bl	80065bc <xQueueReceive>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	f47f af20 	bne.w	8007eb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	3730      	adds	r7, #48	@ 0x30
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20002074 	.word	0x20002074

08008080 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008086:	e04b      	b.n	8008120 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008088:	4b2f      	ldr	r3, [pc, #188]	@ (8008148 <prvSwitchTimerLists+0xc8>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008092:	4b2d      	ldr	r3, [pc, #180]	@ (8008148 <prvSwitchTimerLists+0xc8>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3304      	adds	r3, #4
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fd ff9d 	bl	8005fe0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d031      	beq.n	8008120 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4413      	add	r3, r2
 80080c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d90e      	bls.n	80080ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080da:	4b1b      	ldr	r3, [pc, #108]	@ (8008148 <prvSwitchTimerLists+0xc8>)
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3304      	adds	r3, #4
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f7fd ff42 	bl	8005f6e <vListInsert>
 80080ea:	e019      	b.n	8008120 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080ec:	2300      	movs	r3, #0
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f7ff fd4e 	bl	8007b98 <xTimerGenericCommand>
 80080fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10d      	bne.n	8008120 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	b672      	cpsid	i
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	b662      	cpsie	i
 8008118:	603b      	str	r3, [r7, #0]
}
 800811a:	bf00      	nop
 800811c:	bf00      	nop
 800811e:	e7fd      	b.n	800811c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008120:	4b09      	ldr	r3, [pc, #36]	@ (8008148 <prvSwitchTimerLists+0xc8>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1ae      	bne.n	8008088 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800812a:	4b07      	ldr	r3, [pc, #28]	@ (8008148 <prvSwitchTimerLists+0xc8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008130:	4b06      	ldr	r3, [pc, #24]	@ (800814c <prvSwitchTimerLists+0xcc>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a04      	ldr	r2, [pc, #16]	@ (8008148 <prvSwitchTimerLists+0xc8>)
 8008136:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008138:	4a04      	ldr	r2, [pc, #16]	@ (800814c <prvSwitchTimerLists+0xcc>)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	6013      	str	r3, [r2, #0]
}
 800813e:	bf00      	nop
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	2000206c 	.word	0x2000206c
 800814c:	20002070 	.word	0x20002070

08008150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008156:	f000 f971 	bl	800843c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800815a:	4b15      	ldr	r3, [pc, #84]	@ (80081b0 <prvCheckForValidListAndQueue+0x60>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d120      	bne.n	80081a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008162:	4814      	ldr	r0, [pc, #80]	@ (80081b4 <prvCheckForValidListAndQueue+0x64>)
 8008164:	f7fd feb2 	bl	8005ecc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008168:	4813      	ldr	r0, [pc, #76]	@ (80081b8 <prvCheckForValidListAndQueue+0x68>)
 800816a:	f7fd feaf 	bl	8005ecc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800816e:	4b13      	ldr	r3, [pc, #76]	@ (80081bc <prvCheckForValidListAndQueue+0x6c>)
 8008170:	4a10      	ldr	r2, [pc, #64]	@ (80081b4 <prvCheckForValidListAndQueue+0x64>)
 8008172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008174:	4b12      	ldr	r3, [pc, #72]	@ (80081c0 <prvCheckForValidListAndQueue+0x70>)
 8008176:	4a10      	ldr	r2, [pc, #64]	@ (80081b8 <prvCheckForValidListAndQueue+0x68>)
 8008178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800817a:	2300      	movs	r3, #0
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	4b11      	ldr	r3, [pc, #68]	@ (80081c4 <prvCheckForValidListAndQueue+0x74>)
 8008180:	4a11      	ldr	r2, [pc, #68]	@ (80081c8 <prvCheckForValidListAndQueue+0x78>)
 8008182:	2110      	movs	r1, #16
 8008184:	200a      	movs	r0, #10
 8008186:	f7fd ffc1 	bl	800610c <xQueueGenericCreateStatic>
 800818a:	4603      	mov	r3, r0
 800818c:	4a08      	ldr	r2, [pc, #32]	@ (80081b0 <prvCheckForValidListAndQueue+0x60>)
 800818e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <prvCheckForValidListAndQueue+0x60>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008198:	4b05      	ldr	r3, [pc, #20]	@ (80081b0 <prvCheckForValidListAndQueue+0x60>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	490b      	ldr	r1, [pc, #44]	@ (80081cc <prvCheckForValidListAndQueue+0x7c>)
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe fc04 	bl	80069ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081a4:	f000 f980 	bl	80084a8 <vPortExitCritical>
}
 80081a8:	bf00      	nop
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20002074 	.word	0x20002074
 80081b4:	20002044 	.word	0x20002044
 80081b8:	20002058 	.word	0x20002058
 80081bc:	2000206c 	.word	0x2000206c
 80081c0:	20002070 	.word	0x20002070
 80081c4:	20002120 	.word	0x20002120
 80081c8:	20002080 	.word	0x20002080
 80081cc:	08008d10 	.word	0x08008d10

080081d0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10d      	bne.n	80081fe <pvTimerGetTimerID+0x2e>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	b672      	cpsid	i
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	b662      	cpsie	i
 80081f6:	60fb      	str	r3, [r7, #12]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 80081fe:	f000 f91d 	bl	800843c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008208:	f000 f94e 	bl	80084a8 <vPortExitCritical>

	return pvReturn;
 800820c:	693b      	ldr	r3, [r7, #16]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3b04      	subs	r3, #4
 8008228:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3b04      	subs	r3, #4
 8008236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	f023 0201 	bic.w	r2, r3, #1
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3b04      	subs	r3, #4
 8008246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008248:	4a0c      	ldr	r2, [pc, #48]	@ (800827c <pxPortInitialiseStack+0x64>)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3b14      	subs	r3, #20
 8008252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3b04      	subs	r3, #4
 800825e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f06f 0202 	mvn.w	r2, #2
 8008266:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3b20      	subs	r3, #32
 800826c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800826e:	68fb      	ldr	r3, [r7, #12]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	08008281 	.word	0x08008281

08008280 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800828a:	4b15      	ldr	r3, [pc, #84]	@ (80082e0 <prvTaskExitError+0x60>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d00d      	beq.n	80082b0 <prvTaskExitError+0x30>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008298:	b672      	cpsid	i
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	b662      	cpsie	i
 80082a8:	60fb      	str	r3, [r7, #12]
}
 80082aa:	bf00      	nop
 80082ac:	bf00      	nop
 80082ae:	e7fd      	b.n	80082ac <prvTaskExitError+0x2c>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b4:	b672      	cpsid	i
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	b662      	cpsie	i
 80082c4:	60bb      	str	r3, [r7, #8]
}
 80082c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082c8:	bf00      	nop
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0fc      	beq.n	80082ca <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	2000000c 	.word	0x2000000c
	...

080082f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082f0:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <pxCurrentTCBConst2>)
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	6808      	ldr	r0, [r1, #0]
 80082f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	f380 8809 	msr	PSP, r0
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f04f 0000 	mov.w	r0, #0
 8008306:	f380 8811 	msr	BASEPRI, r0
 800830a:	4770      	bx	lr
 800830c:	f3af 8000 	nop.w

08008310 <pxCurrentTCBConst2>:
 8008310:	20001b44 	.word	0x20001b44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop

08008318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008318:	4808      	ldr	r0, [pc, #32]	@ (800833c <prvPortStartFirstTask+0x24>)
 800831a:	6800      	ldr	r0, [r0, #0]
 800831c:	6800      	ldr	r0, [r0, #0]
 800831e:	f380 8808 	msr	MSP, r0
 8008322:	f04f 0000 	mov.w	r0, #0
 8008326:	f380 8814 	msr	CONTROL, r0
 800832a:	b662      	cpsie	i
 800832c:	b661      	cpsie	f
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	df00      	svc	0
 8008338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800833a:	bf00      	nop
 800833c:	e000ed08 	.word	0xe000ed08

08008340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008346:	4b37      	ldr	r3, [pc, #220]	@ (8008424 <xPortStartScheduler+0xe4>)
 8008348:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	22ff      	movs	r2, #255	@ 0xff
 8008356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008368:	b2da      	uxtb	r2, r3
 800836a:	4b2f      	ldr	r3, [pc, #188]	@ (8008428 <xPortStartScheduler+0xe8>)
 800836c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800836e:	4b2f      	ldr	r3, [pc, #188]	@ (800842c <xPortStartScheduler+0xec>)
 8008370:	2207      	movs	r2, #7
 8008372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008374:	e009      	b.n	800838a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008376:	4b2d      	ldr	r3, [pc, #180]	@ (800842c <xPortStartScheduler+0xec>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3b01      	subs	r3, #1
 800837c:	4a2b      	ldr	r2, [pc, #172]	@ (800842c <xPortStartScheduler+0xec>)
 800837e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008380:	78fb      	ldrb	r3, [r7, #3]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	b2db      	uxtb	r3, r3
 8008388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008392:	2b80      	cmp	r3, #128	@ 0x80
 8008394:	d0ef      	beq.n	8008376 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008396:	4b25      	ldr	r3, [pc, #148]	@ (800842c <xPortStartScheduler+0xec>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1c3 0307 	rsb	r3, r3, #7
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d00d      	beq.n	80083be <xPortStartScheduler+0x7e>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a6:	b672      	cpsid	i
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	b662      	cpsie	i
 80083b6:	60bb      	str	r3, [r7, #8]
}
 80083b8:	bf00      	nop
 80083ba:	bf00      	nop
 80083bc:	e7fd      	b.n	80083ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083be:	4b1b      	ldr	r3, [pc, #108]	@ (800842c <xPortStartScheduler+0xec>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	021b      	lsls	r3, r3, #8
 80083c4:	4a19      	ldr	r2, [pc, #100]	@ (800842c <xPortStartScheduler+0xec>)
 80083c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083c8:	4b18      	ldr	r3, [pc, #96]	@ (800842c <xPortStartScheduler+0xec>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083d0:	4a16      	ldr	r2, [pc, #88]	@ (800842c <xPortStartScheduler+0xec>)
 80083d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083dc:	4b14      	ldr	r3, [pc, #80]	@ (8008430 <xPortStartScheduler+0xf0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a13      	ldr	r2, [pc, #76]	@ (8008430 <xPortStartScheduler+0xf0>)
 80083e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80083e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083e8:	4b11      	ldr	r3, [pc, #68]	@ (8008430 <xPortStartScheduler+0xf0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a10      	ldr	r2, [pc, #64]	@ (8008430 <xPortStartScheduler+0xf0>)
 80083ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80083f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083f4:	f000 f8dc 	bl	80085b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008434 <xPortStartScheduler+0xf4>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083fe:	f000 f8fb 	bl	80085f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008402:	4b0d      	ldr	r3, [pc, #52]	@ (8008438 <xPortStartScheduler+0xf8>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a0c      	ldr	r2, [pc, #48]	@ (8008438 <xPortStartScheduler+0xf8>)
 8008408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800840c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800840e:	f7ff ff83 	bl	8008318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008412:	f7fe ff27 	bl	8007264 <vTaskSwitchContext>
	prvTaskExitError();
 8008416:	f7ff ff33 	bl	8008280 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	e000e400 	.word	0xe000e400
 8008428:	20002170 	.word	0x20002170
 800842c:	20002174 	.word	0x20002174
 8008430:	e000ed20 	.word	0xe000ed20
 8008434:	2000000c 	.word	0x2000000c
 8008438:	e000ef34 	.word	0xe000ef34

0800843c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	b672      	cpsid	i
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	b662      	cpsie	i
 8008456:	607b      	str	r3, [r7, #4]
}
 8008458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800845a:	4b11      	ldr	r3, [pc, #68]	@ (80084a0 <vPortEnterCritical+0x64>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3301      	adds	r3, #1
 8008460:	4a0f      	ldr	r2, [pc, #60]	@ (80084a0 <vPortEnterCritical+0x64>)
 8008462:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008464:	4b0e      	ldr	r3, [pc, #56]	@ (80084a0 <vPortEnterCritical+0x64>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d112      	bne.n	8008492 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800846c:	4b0d      	ldr	r3, [pc, #52]	@ (80084a4 <vPortEnterCritical+0x68>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00d      	beq.n	8008492 <vPortEnterCritical+0x56>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	b672      	cpsid	i
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	b662      	cpsie	i
 800848a:	603b      	str	r3, [r7, #0]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <vPortEnterCritical+0x52>
	}
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	2000000c 	.word	0x2000000c
 80084a4:	e000ed04 	.word	0xe000ed04

080084a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084ae:	4b13      	ldr	r3, [pc, #76]	@ (80084fc <vPortExitCritical+0x54>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10d      	bne.n	80084d2 <vPortExitCritical+0x2a>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	b672      	cpsid	i
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	b662      	cpsie	i
 80084ca:	607b      	str	r3, [r7, #4]
}
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	e7fd      	b.n	80084ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80084d2:	4b0a      	ldr	r3, [pc, #40]	@ (80084fc <vPortExitCritical+0x54>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	4a08      	ldr	r2, [pc, #32]	@ (80084fc <vPortExitCritical+0x54>)
 80084da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084dc:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <vPortExitCritical+0x54>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d105      	bne.n	80084f0 <vPortExitCritical+0x48>
 80084e4:	2300      	movs	r3, #0
 80084e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	f383 8811 	msr	BASEPRI, r3
}
 80084ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	2000000c 	.word	0x2000000c

08008500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008500:	f3ef 8009 	mrs	r0, PSP
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	4b15      	ldr	r3, [pc, #84]	@ (8008560 <pxCurrentTCBConst>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	f01e 0f10 	tst.w	lr, #16
 8008510:	bf08      	it	eq
 8008512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	6010      	str	r0, [r2, #0]
 800851c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008524:	b672      	cpsid	i
 8008526:	f380 8811 	msr	BASEPRI, r0
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	b662      	cpsie	i
 8008534:	f7fe fe96 	bl	8007264 <vTaskSwitchContext>
 8008538:	f04f 0000 	mov.w	r0, #0
 800853c:	f380 8811 	msr	BASEPRI, r0
 8008540:	bc09      	pop	{r0, r3}
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	f01e 0f10 	tst.w	lr, #16
 800854e:	bf08      	it	eq
 8008550:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008554:	f380 8809 	msr	PSP, r0
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop

08008560 <pxCurrentTCBConst>:
 8008560:	20001b44 	.word	0x20001b44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008572:	b672      	cpsid	i
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	b662      	cpsie	i
 8008582:	607b      	str	r3, [r7, #4]
}
 8008584:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008586:	f7fe fdb1 	bl	80070ec <xTaskIncrementTick>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008590:	4b06      	ldr	r3, [pc, #24]	@ (80085ac <xPortSysTickHandler+0x44>)
 8008592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	2300      	movs	r3, #0
 800859a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	f383 8811 	msr	BASEPRI, r3
}
 80085a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085b0:	b480      	push	{r7}
 80085b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085b4:	4b0b      	ldr	r3, [pc, #44]	@ (80085e4 <vPortSetupTimerInterrupt+0x34>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085ba:	4b0b      	ldr	r3, [pc, #44]	@ (80085e8 <vPortSetupTimerInterrupt+0x38>)
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085c0:	4b0a      	ldr	r3, [pc, #40]	@ (80085ec <vPortSetupTimerInterrupt+0x3c>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a0a      	ldr	r2, [pc, #40]	@ (80085f0 <vPortSetupTimerInterrupt+0x40>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	099b      	lsrs	r3, r3, #6
 80085cc:	4a09      	ldr	r2, [pc, #36]	@ (80085f4 <vPortSetupTimerInterrupt+0x44>)
 80085ce:	3b01      	subs	r3, #1
 80085d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085d2:	4b04      	ldr	r3, [pc, #16]	@ (80085e4 <vPortSetupTimerInterrupt+0x34>)
 80085d4:	2207      	movs	r2, #7
 80085d6:	601a      	str	r2, [r3, #0]
}
 80085d8:	bf00      	nop
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	e000e010 	.word	0xe000e010
 80085e8:	e000e018 	.word	0xe000e018
 80085ec:	20000000 	.word	0x20000000
 80085f0:	10624dd3 	.word	0x10624dd3
 80085f4:	e000e014 	.word	0xe000e014

080085f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008608 <vPortEnableVFP+0x10>
 80085fc:	6801      	ldr	r1, [r0, #0]
 80085fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008602:	6001      	str	r1, [r0, #0]
 8008604:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008606:	bf00      	nop
 8008608:	e000ed88 	.word	0xe000ed88

0800860c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008612:	f3ef 8305 	mrs	r3, IPSR
 8008616:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b0f      	cmp	r3, #15
 800861c:	d917      	bls.n	800864e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800861e:	4a1a      	ldr	r2, [pc, #104]	@ (8008688 <vPortValidateInterruptPriority+0x7c>)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4413      	add	r3, r2
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008628:	4b18      	ldr	r3, [pc, #96]	@ (800868c <vPortValidateInterruptPriority+0x80>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	7afa      	ldrb	r2, [r7, #11]
 800862e:	429a      	cmp	r2, r3
 8008630:	d20d      	bcs.n	800864e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008636:	b672      	cpsid	i
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	b662      	cpsie	i
 8008646:	607b      	str	r3, [r7, #4]
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	e7fd      	b.n	800864a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800864e:	4b10      	ldr	r3, [pc, #64]	@ (8008690 <vPortValidateInterruptPriority+0x84>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008656:	4b0f      	ldr	r3, [pc, #60]	@ (8008694 <vPortValidateInterruptPriority+0x88>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d90d      	bls.n	800867a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	b672      	cpsid	i
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	b662      	cpsie	i
 8008672:	603b      	str	r3, [r7, #0]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <vPortValidateInterruptPriority+0x6a>
	}
 800867a:	bf00      	nop
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	e000e3f0 	.word	0xe000e3f0
 800868c:	20002170 	.word	0x20002170
 8008690:	e000ed0c 	.word	0xe000ed0c
 8008694:	20002174 	.word	0x20002174

08008698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b08a      	sub	sp, #40	@ 0x28
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086a4:	f7fe fc52 	bl	8006f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086a8:	4b5d      	ldr	r3, [pc, #372]	@ (8008820 <pvPortMalloc+0x188>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086b0:	f000 f920 	bl	80088f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086b4:	4b5b      	ldr	r3, [pc, #364]	@ (8008824 <pvPortMalloc+0x18c>)
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4013      	ands	r3, r2
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f040 8094 	bne.w	80087ea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d020      	beq.n	800870a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80086c8:	2208      	movs	r2, #8
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4413      	add	r3, r2
 80086ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f003 0307 	and.w	r3, r3, #7
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d017      	beq.n	800870a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f023 0307 	bic.w	r3, r3, #7
 80086e0:	3308      	adds	r3, #8
 80086e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00d      	beq.n	800870a <pvPortMalloc+0x72>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	b672      	cpsid	i
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	b662      	cpsie	i
 8008702:	617b      	str	r3, [r7, #20]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d06c      	beq.n	80087ea <pvPortMalloc+0x152>
 8008710:	4b45      	ldr	r3, [pc, #276]	@ (8008828 <pvPortMalloc+0x190>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	429a      	cmp	r2, r3
 8008718:	d867      	bhi.n	80087ea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800871a:	4b44      	ldr	r3, [pc, #272]	@ (800882c <pvPortMalloc+0x194>)
 800871c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800871e:	4b43      	ldr	r3, [pc, #268]	@ (800882c <pvPortMalloc+0x194>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008724:	e004      	b.n	8008730 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008728:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	429a      	cmp	r2, r3
 8008738:	d903      	bls.n	8008742 <pvPortMalloc+0xaa>
 800873a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1f1      	bne.n	8008726 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008742:	4b37      	ldr	r3, [pc, #220]	@ (8008820 <pvPortMalloc+0x188>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008748:	429a      	cmp	r2, r3
 800874a:	d04e      	beq.n	80087ea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2208      	movs	r2, #8
 8008752:	4413      	add	r3, r2
 8008754:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	1ad2      	subs	r2, r2, r3
 8008766:	2308      	movs	r3, #8
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	429a      	cmp	r2, r3
 800876c:	d922      	bls.n	80087b4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800876e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4413      	add	r3, r2
 8008774:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	f003 0307 	and.w	r3, r3, #7
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00d      	beq.n	800879c <pvPortMalloc+0x104>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008784:	b672      	cpsid	i
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	b662      	cpsie	i
 8008794:	613b      	str	r3, [r7, #16]
}
 8008796:	bf00      	nop
 8008798:	bf00      	nop
 800879a:	e7fd      	b.n	8008798 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	1ad2      	subs	r2, r2, r3
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087ae:	69b8      	ldr	r0, [r7, #24]
 80087b0:	f000 f902 	bl	80089b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008828 <pvPortMalloc+0x190>)
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	4a1a      	ldr	r2, [pc, #104]	@ (8008828 <pvPortMalloc+0x190>)
 80087c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087c2:	4b19      	ldr	r3, [pc, #100]	@ (8008828 <pvPortMalloc+0x190>)
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008830 <pvPortMalloc+0x198>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d203      	bcs.n	80087d6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087ce:	4b16      	ldr	r3, [pc, #88]	@ (8008828 <pvPortMalloc+0x190>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a17      	ldr	r2, [pc, #92]	@ (8008830 <pvPortMalloc+0x198>)
 80087d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	4b12      	ldr	r3, [pc, #72]	@ (8008824 <pvPortMalloc+0x18c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	431a      	orrs	r2, r3
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087ea:	f7fe fbbd 	bl	8006f68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	f003 0307 	and.w	r3, r3, #7
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00d      	beq.n	8008814 <pvPortMalloc+0x17c>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fc:	b672      	cpsid	i
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	b662      	cpsie	i
 800880c:	60fb      	str	r3, [r7, #12]
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	e7fd      	b.n	8008810 <pvPortMalloc+0x178>
	return pvReturn;
 8008814:	69fb      	ldr	r3, [r7, #28]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3728      	adds	r7, #40	@ 0x28
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20005d80 	.word	0x20005d80
 8008824:	20005d8c 	.word	0x20005d8c
 8008828:	20005d84 	.word	0x20005d84
 800882c:	20005d78 	.word	0x20005d78
 8008830:	20005d88 	.word	0x20005d88

08008834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d04e      	beq.n	80088e4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008846:	2308      	movs	r3, #8
 8008848:	425b      	negs	r3, r3
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	4413      	add	r3, r2
 800884e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	4b24      	ldr	r3, [pc, #144]	@ (80088ec <vPortFree+0xb8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4013      	ands	r3, r2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10d      	bne.n	800887e <vPortFree+0x4a>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008866:	b672      	cpsid	i
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	b662      	cpsie	i
 8008876:	60fb      	str	r3, [r7, #12]
}
 8008878:	bf00      	nop
 800887a:	bf00      	nop
 800887c:	e7fd      	b.n	800887a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00d      	beq.n	80088a2 <vPortFree+0x6e>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888a:	b672      	cpsid	i
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	b662      	cpsie	i
 800889a:	60bb      	str	r3, [r7, #8]
}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	e7fd      	b.n	800889e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	4b11      	ldr	r3, [pc, #68]	@ (80088ec <vPortFree+0xb8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4013      	ands	r3, r2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d019      	beq.n	80088e4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d115      	bne.n	80088e4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	4b0b      	ldr	r3, [pc, #44]	@ (80088ec <vPortFree+0xb8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	43db      	mvns	r3, r3
 80088c2:	401a      	ands	r2, r3
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088c8:	f7fe fb40 	bl	8006f4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	4b07      	ldr	r3, [pc, #28]	@ (80088f0 <vPortFree+0xbc>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4413      	add	r3, r2
 80088d6:	4a06      	ldr	r2, [pc, #24]	@ (80088f0 <vPortFree+0xbc>)
 80088d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088da:	6938      	ldr	r0, [r7, #16]
 80088dc:	f000 f86c 	bl	80089b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80088e0:	f7fe fb42 	bl	8006f68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088e4:	bf00      	nop
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20005d8c 	.word	0x20005d8c
 80088f0:	20005d84 	.word	0x20005d84

080088f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088fa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80088fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008900:	4b27      	ldr	r3, [pc, #156]	@ (80089a0 <prvHeapInit+0xac>)
 8008902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00c      	beq.n	8008928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3307      	adds	r3, #7
 8008912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0307 	bic.w	r3, r3, #7
 800891a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	4a1f      	ldr	r2, [pc, #124]	@ (80089a0 <prvHeapInit+0xac>)
 8008924:	4413      	add	r3, r2
 8008926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800892c:	4a1d      	ldr	r2, [pc, #116]	@ (80089a4 <prvHeapInit+0xb0>)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008932:	4b1c      	ldr	r3, [pc, #112]	@ (80089a4 <prvHeapInit+0xb0>)
 8008934:	2200      	movs	r2, #0
 8008936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	4413      	add	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008940:	2208      	movs	r2, #8
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	1a9b      	subs	r3, r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0307 	bic.w	r3, r3, #7
 800894e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4a15      	ldr	r2, [pc, #84]	@ (80089a8 <prvHeapInit+0xb4>)
 8008954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008956:	4b14      	ldr	r3, [pc, #80]	@ (80089a8 <prvHeapInit+0xb4>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800895e:	4b12      	ldr	r3, [pc, #72]	@ (80089a8 <prvHeapInit+0xb4>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	1ad2      	subs	r2, r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008974:	4b0c      	ldr	r3, [pc, #48]	@ (80089a8 <prvHeapInit+0xb4>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	4a0a      	ldr	r2, [pc, #40]	@ (80089ac <prvHeapInit+0xb8>)
 8008982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	4a09      	ldr	r2, [pc, #36]	@ (80089b0 <prvHeapInit+0xbc>)
 800898a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800898c:	4b09      	ldr	r3, [pc, #36]	@ (80089b4 <prvHeapInit+0xc0>)
 800898e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008992:	601a      	str	r2, [r3, #0]
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	20002178 	.word	0x20002178
 80089a4:	20005d78 	.word	0x20005d78
 80089a8:	20005d80 	.word	0x20005d80
 80089ac:	20005d88 	.word	0x20005d88
 80089b0:	20005d84 	.word	0x20005d84
 80089b4:	20005d8c 	.word	0x20005d8c

080089b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089c0:	4b28      	ldr	r3, [pc, #160]	@ (8008a64 <prvInsertBlockIntoFreeList+0xac>)
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	e002      	b.n	80089cc <prvInsertBlockIntoFreeList+0x14>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d8f7      	bhi.n	80089c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	4413      	add	r3, r2
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d108      	bne.n	80089fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	441a      	add	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	441a      	add	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d118      	bne.n	8008a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	4b15      	ldr	r3, [pc, #84]	@ (8008a68 <prvInsertBlockIntoFreeList+0xb0>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d00d      	beq.n	8008a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	441a      	add	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	e008      	b.n	8008a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a36:	4b0c      	ldr	r3, [pc, #48]	@ (8008a68 <prvInsertBlockIntoFreeList+0xb0>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	e003      	b.n	8008a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d002      	beq.n	8008a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20005d78 	.word	0x20005d78
 8008a68:	20005d80 	.word	0x20005d80

08008a6c <memset>:
 8008a6c:	4402      	add	r2, r0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d100      	bne.n	8008a76 <memset+0xa>
 8008a74:	4770      	bx	lr
 8008a76:	f803 1b01 	strb.w	r1, [r3], #1
 8008a7a:	e7f9      	b.n	8008a70 <memset+0x4>

08008a7c <_reclaim_reent>:
 8008a7c:	4b29      	ldr	r3, [pc, #164]	@ (8008b24 <_reclaim_reent+0xa8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4283      	cmp	r3, r0
 8008a82:	b570      	push	{r4, r5, r6, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	d04b      	beq.n	8008b20 <_reclaim_reent+0xa4>
 8008a88:	69c3      	ldr	r3, [r0, #28]
 8008a8a:	b1ab      	cbz	r3, 8008ab8 <_reclaim_reent+0x3c>
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	b16b      	cbz	r3, 8008aac <_reclaim_reent+0x30>
 8008a90:	2500      	movs	r5, #0
 8008a92:	69e3      	ldr	r3, [r4, #28]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	5959      	ldr	r1, [r3, r5]
 8008a98:	2900      	cmp	r1, #0
 8008a9a:	d13b      	bne.n	8008b14 <_reclaim_reent+0x98>
 8008a9c:	3504      	adds	r5, #4
 8008a9e:	2d80      	cmp	r5, #128	@ 0x80
 8008aa0:	d1f7      	bne.n	8008a92 <_reclaim_reent+0x16>
 8008aa2:	69e3      	ldr	r3, [r4, #28]
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	68d9      	ldr	r1, [r3, #12]
 8008aa8:	f000 f872 	bl	8008b90 <_free_r>
 8008aac:	69e3      	ldr	r3, [r4, #28]
 8008aae:	6819      	ldr	r1, [r3, #0]
 8008ab0:	b111      	cbz	r1, 8008ab8 <_reclaim_reent+0x3c>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 f86c 	bl	8008b90 <_free_r>
 8008ab8:	6961      	ldr	r1, [r4, #20]
 8008aba:	b111      	cbz	r1, 8008ac2 <_reclaim_reent+0x46>
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 f867 	bl	8008b90 <_free_r>
 8008ac2:	69e1      	ldr	r1, [r4, #28]
 8008ac4:	b111      	cbz	r1, 8008acc <_reclaim_reent+0x50>
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f862 	bl	8008b90 <_free_r>
 8008acc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008ace:	b111      	cbz	r1, 8008ad6 <_reclaim_reent+0x5a>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 f85d 	bl	8008b90 <_free_r>
 8008ad6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ad8:	b111      	cbz	r1, 8008ae0 <_reclaim_reent+0x64>
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 f858 	bl	8008b90 <_free_r>
 8008ae0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008ae2:	b111      	cbz	r1, 8008aea <_reclaim_reent+0x6e>
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f000 f853 	bl	8008b90 <_free_r>
 8008aea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008aec:	b111      	cbz	r1, 8008af4 <_reclaim_reent+0x78>
 8008aee:	4620      	mov	r0, r4
 8008af0:	f000 f84e 	bl	8008b90 <_free_r>
 8008af4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008af6:	b111      	cbz	r1, 8008afe <_reclaim_reent+0x82>
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 f849 	bl	8008b90 <_free_r>
 8008afe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008b00:	b111      	cbz	r1, 8008b08 <_reclaim_reent+0x8c>
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 f844 	bl	8008b90 <_free_r>
 8008b08:	6a23      	ldr	r3, [r4, #32]
 8008b0a:	b14b      	cbz	r3, 8008b20 <_reclaim_reent+0xa4>
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b12:	4718      	bx	r3
 8008b14:	680e      	ldr	r6, [r1, #0]
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 f83a 	bl	8008b90 <_free_r>
 8008b1c:	4631      	mov	r1, r6
 8008b1e:	e7bb      	b.n	8008a98 <_reclaim_reent+0x1c>
 8008b20:	bd70      	pop	{r4, r5, r6, pc}
 8008b22:	bf00      	nop
 8008b24:	20000010 	.word	0x20000010

08008b28 <__libc_init_array>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8008b60 <__libc_init_array+0x38>)
 8008b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8008b64 <__libc_init_array+0x3c>)
 8008b2e:	1b64      	subs	r4, r4, r5
 8008b30:	10a4      	asrs	r4, r4, #2
 8008b32:	2600      	movs	r6, #0
 8008b34:	42a6      	cmp	r6, r4
 8008b36:	d109      	bne.n	8008b4c <__libc_init_array+0x24>
 8008b38:	4d0b      	ldr	r5, [pc, #44]	@ (8008b68 <__libc_init_array+0x40>)
 8008b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8008b6c <__libc_init_array+0x44>)
 8008b3c:	f000 f87e 	bl	8008c3c <_init>
 8008b40:	1b64      	subs	r4, r4, r5
 8008b42:	10a4      	asrs	r4, r4, #2
 8008b44:	2600      	movs	r6, #0
 8008b46:	42a6      	cmp	r6, r4
 8008b48:	d105      	bne.n	8008b56 <__libc_init_array+0x2e>
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b50:	4798      	blx	r3
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7ee      	b.n	8008b34 <__libc_init_array+0xc>
 8008b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5a:	4798      	blx	r3
 8008b5c:	3601      	adds	r6, #1
 8008b5e:	e7f2      	b.n	8008b46 <__libc_init_array+0x1e>
 8008b60:	08008de0 	.word	0x08008de0
 8008b64:	08008de0 	.word	0x08008de0
 8008b68:	08008de0 	.word	0x08008de0
 8008b6c:	08008de4 	.word	0x08008de4

08008b70 <__retarget_lock_acquire_recursive>:
 8008b70:	4770      	bx	lr

08008b72 <__retarget_lock_release_recursive>:
 8008b72:	4770      	bx	lr

08008b74 <memcpy>:
 8008b74:	440a      	add	r2, r1
 8008b76:	4291      	cmp	r1, r2
 8008b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b7c:	d100      	bne.n	8008b80 <memcpy+0xc>
 8008b7e:	4770      	bx	lr
 8008b80:	b510      	push	{r4, lr}
 8008b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b8a:	4291      	cmp	r1, r2
 8008b8c:	d1f9      	bne.n	8008b82 <memcpy+0xe>
 8008b8e:	bd10      	pop	{r4, pc}

08008b90 <_free_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4605      	mov	r5, r0
 8008b94:	2900      	cmp	r1, #0
 8008b96:	d041      	beq.n	8008c1c <_free_r+0x8c>
 8008b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9c:	1f0c      	subs	r4, r1, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	bfb8      	it	lt
 8008ba2:	18e4      	addlt	r4, r4, r3
 8008ba4:	f000 f83e 	bl	8008c24 <__malloc_lock>
 8008ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c20 <_free_r+0x90>)
 8008baa:	6813      	ldr	r3, [r2, #0]
 8008bac:	b933      	cbnz	r3, 8008bbc <_free_r+0x2c>
 8008bae:	6063      	str	r3, [r4, #4]
 8008bb0:	6014      	str	r4, [r2, #0]
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb8:	f000 b83a 	b.w	8008c30 <__malloc_unlock>
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d908      	bls.n	8008bd2 <_free_r+0x42>
 8008bc0:	6820      	ldr	r0, [r4, #0]
 8008bc2:	1821      	adds	r1, r4, r0
 8008bc4:	428b      	cmp	r3, r1
 8008bc6:	bf01      	itttt	eq
 8008bc8:	6819      	ldreq	r1, [r3, #0]
 8008bca:	685b      	ldreq	r3, [r3, #4]
 8008bcc:	1809      	addeq	r1, r1, r0
 8008bce:	6021      	streq	r1, [r4, #0]
 8008bd0:	e7ed      	b.n	8008bae <_free_r+0x1e>
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	b10b      	cbz	r3, 8008bdc <_free_r+0x4c>
 8008bd8:	42a3      	cmp	r3, r4
 8008bda:	d9fa      	bls.n	8008bd2 <_free_r+0x42>
 8008bdc:	6811      	ldr	r1, [r2, #0]
 8008bde:	1850      	adds	r0, r2, r1
 8008be0:	42a0      	cmp	r0, r4
 8008be2:	d10b      	bne.n	8008bfc <_free_r+0x6c>
 8008be4:	6820      	ldr	r0, [r4, #0]
 8008be6:	4401      	add	r1, r0
 8008be8:	1850      	adds	r0, r2, r1
 8008bea:	4283      	cmp	r3, r0
 8008bec:	6011      	str	r1, [r2, #0]
 8008bee:	d1e0      	bne.n	8008bb2 <_free_r+0x22>
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	6053      	str	r3, [r2, #4]
 8008bf6:	4408      	add	r0, r1
 8008bf8:	6010      	str	r0, [r2, #0]
 8008bfa:	e7da      	b.n	8008bb2 <_free_r+0x22>
 8008bfc:	d902      	bls.n	8008c04 <_free_r+0x74>
 8008bfe:	230c      	movs	r3, #12
 8008c00:	602b      	str	r3, [r5, #0]
 8008c02:	e7d6      	b.n	8008bb2 <_free_r+0x22>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	1821      	adds	r1, r4, r0
 8008c08:	428b      	cmp	r3, r1
 8008c0a:	bf04      	itt	eq
 8008c0c:	6819      	ldreq	r1, [r3, #0]
 8008c0e:	685b      	ldreq	r3, [r3, #4]
 8008c10:	6063      	str	r3, [r4, #4]
 8008c12:	bf04      	itt	eq
 8008c14:	1809      	addeq	r1, r1, r0
 8008c16:	6021      	streq	r1, [r4, #0]
 8008c18:	6054      	str	r4, [r2, #4]
 8008c1a:	e7ca      	b.n	8008bb2 <_free_r+0x22>
 8008c1c:	bd38      	pop	{r3, r4, r5, pc}
 8008c1e:	bf00      	nop
 8008c20:	20005ecc 	.word	0x20005ecc

08008c24 <__malloc_lock>:
 8008c24:	4801      	ldr	r0, [pc, #4]	@ (8008c2c <__malloc_lock+0x8>)
 8008c26:	f7ff bfa3 	b.w	8008b70 <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20005ec8 	.word	0x20005ec8

08008c30 <__malloc_unlock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	@ (8008c38 <__malloc_unlock+0x8>)
 8008c32:	f7ff bf9e 	b.w	8008b72 <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	20005ec8 	.word	0x20005ec8

08008c3c <_init>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr

08008c48 <_fini>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr
