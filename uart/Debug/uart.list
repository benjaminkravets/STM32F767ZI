
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008944  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08008b44  08008b44  00009b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cc8  08008cc8  0000a1a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008cc8  08008cc8  00009cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd0  08008cd0  0000a1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd0  08008cd0  00009cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cd4  08008cd4  00009cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008cd8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08008d38  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008dd8  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005d58  200001a0  08008e78  0000a1a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005ef8  08008e78  0000aef8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a1a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021e12  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000414d  00000000  00000000  0002bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001948  00000000  00000000  00030130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001381  00000000  00000000  00031a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000072db  00000000  00000000  00032df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cee0  00000000  00000000  0003a0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a842  00000000  00000000  00056fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001617f6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d38  00000000  00000000  0016183c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007a  00000000  00000000  00168574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008b2c 	.word	0x08008b2c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008b2c 	.word	0x08008b2c

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001bc 	.word	0x200001bc

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b96a 	b.w	80005c0 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	460c      	mov	r4, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14e      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000310:	4694      	mov	ip, r2
 8000312:	458c      	cmp	ip, r1
 8000314:	4686      	mov	lr, r0
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	d962      	bls.n	80003e2 <__udivmoddi4+0xde>
 800031c:	b14a      	cbz	r2, 8000332 <__udivmoddi4+0x2e>
 800031e:	f1c2 0320 	rsb	r3, r2, #32
 8000322:	4091      	lsls	r1, r2
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	fa0c fc02 	lsl.w	ip, ip, r2
 800032c:	4319      	orrs	r1, r3
 800032e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f f68c 	uxth.w	r6, ip
 800033a:	fbb1 f4f7 	udiv	r4, r1, r7
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb07 1114 	mls	r1, r7, r4, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb04 f106 	mul.w	r1, r4, r6
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f104 30ff 	add.w	r0, r4, #4294967295
 800035a:	f080 8112 	bcs.w	8000582 <__udivmoddi4+0x27e>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 810f 	bls.w	8000582 <__udivmoddi4+0x27e>
 8000364:	3c02      	subs	r4, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a59      	subs	r1, r3, r1
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000372:	fb07 1110 	mls	r1, r7, r0, r1
 8000376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037a:	fb00 f606 	mul.w	r6, r0, r6
 800037e:	429e      	cmp	r6, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x94>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 31ff 	add.w	r1, r0, #4294967295
 800038a:	f080 80fc 	bcs.w	8000586 <__udivmoddi4+0x282>
 800038e:	429e      	cmp	r6, r3
 8000390:	f240 80f9 	bls.w	8000586 <__udivmoddi4+0x282>
 8000394:	4463      	add	r3, ip
 8000396:	3802      	subs	r0, #2
 8000398:	1b9b      	subs	r3, r3, r6
 800039a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa6>
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xba>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb4>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa6>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x150>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xcc>
 80003ca:	4290      	cmp	r0, r2
 80003cc:	f0c0 80f0 	bcc.w	80005b0 <__udivmoddi4+0x2ac>
 80003d0:	1a86      	subs	r6, r0, r2
 80003d2:	eb64 0303 	sbc.w	r3, r4, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	2d00      	cmp	r5, #0
 80003da:	d0e6      	beq.n	80003aa <__udivmoddi4+0xa6>
 80003dc:	e9c5 6300 	strd	r6, r3, [r5]
 80003e0:	e7e3      	b.n	80003aa <__udivmoddi4+0xa6>
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	f040 8090 	bne.w	8000508 <__udivmoddi4+0x204>
 80003e8:	eba1 040c 	sub.w	r4, r1, ip
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	fa1f f78c 	uxth.w	r7, ip
 80003f4:	2101      	movs	r1, #1
 80003f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000402:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000406:	fb07 f006 	mul.w	r0, r7, r6
 800040a:	4298      	cmp	r0, r3
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x11c>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 34ff 	add.w	r4, r6, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0x11a>
 8000418:	4298      	cmp	r0, r3
 800041a:	f200 80cd 	bhi.w	80005b8 <__udivmoddi4+0x2b4>
 800041e:	4626      	mov	r6, r4
 8000420:	1a1c      	subs	r4, r3, r0
 8000422:	fa1f f38e 	uxth.w	r3, lr
 8000426:	fbb4 f0f8 	udiv	r0, r4, r8
 800042a:	fb08 4410 	mls	r4, r8, r0, r4
 800042e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000432:	fb00 f707 	mul.w	r7, r0, r7
 8000436:	429f      	cmp	r7, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x148>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x146>
 8000444:	429f      	cmp	r7, r3
 8000446:	f200 80b0 	bhi.w	80005aa <__udivmoddi4+0x2a6>
 800044a:	4620      	mov	r0, r4
 800044c:	1bdb      	subs	r3, r3, r7
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x9c>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa20 fc06 	lsr.w	ip, r0, r6
 8000464:	fa04 f301 	lsl.w	r3, r4, r1
 8000468:	ea43 030c 	orr.w	r3, r3, ip
 800046c:	40f4      	lsrs	r4, r6
 800046e:	fa00 f801 	lsl.w	r8, r0, r1
 8000472:	0c38      	lsrs	r0, r7, #16
 8000474:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000478:	fbb4 fef0 	udiv	lr, r4, r0
 800047c:	fa1f fc87 	uxth.w	ip, r7
 8000480:	fb00 441e 	mls	r4, r0, lr, r4
 8000484:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000488:	fb0e f90c 	mul.w	r9, lr, ip
 800048c:	45a1      	cmp	r9, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d90a      	bls.n	80004aa <__udivmoddi4+0x1a6>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049a:	f080 8084 	bcs.w	80005a6 <__udivmoddi4+0x2a2>
 800049e:	45a1      	cmp	r9, r4
 80004a0:	f240 8081 	bls.w	80005a6 <__udivmoddi4+0x2a2>
 80004a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a8:	443c      	add	r4, r7
 80004aa:	eba4 0409 	sub.w	r4, r4, r9
 80004ae:	fa1f f983 	uxth.w	r9, r3
 80004b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b6:	fb00 4413 	mls	r4, r0, r3, r4
 80004ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004be:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c2:	45a4      	cmp	ip, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x1d2>
 80004c6:	193c      	adds	r4, r7, r4
 80004c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004cc:	d267      	bcs.n	800059e <__udivmoddi4+0x29a>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d965      	bls.n	800059e <__udivmoddi4+0x29a>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004da:	fba0 9302 	umull	r9, r3, r0, r2
 80004de:	eba4 040c 	sub.w	r4, r4, ip
 80004e2:	429c      	cmp	r4, r3
 80004e4:	46ce      	mov	lr, r9
 80004e6:	469c      	mov	ip, r3
 80004e8:	d351      	bcc.n	800058e <__udivmoddi4+0x28a>
 80004ea:	d04e      	beq.n	800058a <__udivmoddi4+0x286>
 80004ec:	b155      	cbz	r5, 8000504 <__udivmoddi4+0x200>
 80004ee:	ebb8 030e 	subs.w	r3, r8, lr
 80004f2:	eb64 040c 	sbc.w	r4, r4, ip
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431e      	orrs	r6, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	e9c5 6400 	strd	r6, r4, [r5]
 8000504:	2100      	movs	r1, #0
 8000506:	e750      	b.n	80003aa <__udivmoddi4+0xa6>
 8000508:	f1c2 0320 	rsb	r3, r2, #32
 800050c:	fa20 f103 	lsr.w	r1, r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa24 f303 	lsr.w	r3, r4, r3
 8000518:	4094      	lsls	r4, r2
 800051a:	430c      	orrs	r4, r1
 800051c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000520:	fa00 fe02 	lsl.w	lr, r0, r2
 8000524:	fa1f f78c 	uxth.w	r7, ip
 8000528:	fbb3 f0f8 	udiv	r0, r3, r8
 800052c:	fb08 3110 	mls	r1, r8, r0, r3
 8000530:	0c23      	lsrs	r3, r4, #16
 8000532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000536:	fb00 f107 	mul.w	r1, r0, r7
 800053a:	4299      	cmp	r1, r3
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x24c>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 36ff 	add.w	r6, r0, #4294967295
 8000546:	d22c      	bcs.n	80005a2 <__udivmoddi4+0x29e>
 8000548:	4299      	cmp	r1, r3
 800054a:	d92a      	bls.n	80005a2 <__udivmoddi4+0x29e>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1a5b      	subs	r3, r3, r1
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb3 f1f8 	udiv	r1, r3, r8
 8000558:	fb08 3311 	mls	r3, r8, r1, r3
 800055c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000560:	fb01 f307 	mul.w	r3, r1, r7
 8000564:	42a3      	cmp	r3, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x276>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000570:	d213      	bcs.n	800059a <__udivmoddi4+0x296>
 8000572:	42a3      	cmp	r3, r4
 8000574:	d911      	bls.n	800059a <__udivmoddi4+0x296>
 8000576:	3902      	subs	r1, #2
 8000578:	4464      	add	r4, ip
 800057a:	1ae4      	subs	r4, r4, r3
 800057c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000580:	e739      	b.n	80003f6 <__udivmoddi4+0xf2>
 8000582:	4604      	mov	r4, r0
 8000584:	e6f0      	b.n	8000368 <__udivmoddi4+0x64>
 8000586:	4608      	mov	r0, r1
 8000588:	e706      	b.n	8000398 <__udivmoddi4+0x94>
 800058a:	45c8      	cmp	r8, r9
 800058c:	d2ae      	bcs.n	80004ec <__udivmoddi4+0x1e8>
 800058e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000592:	eb63 0c07 	sbc.w	ip, r3, r7
 8000596:	3801      	subs	r0, #1
 8000598:	e7a8      	b.n	80004ec <__udivmoddi4+0x1e8>
 800059a:	4631      	mov	r1, r6
 800059c:	e7ed      	b.n	800057a <__udivmoddi4+0x276>
 800059e:	4603      	mov	r3, r0
 80005a0:	e799      	b.n	80004d6 <__udivmoddi4+0x1d2>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e7d4      	b.n	8000550 <__udivmoddi4+0x24c>
 80005a6:	46d6      	mov	lr, sl
 80005a8:	e77f      	b.n	80004aa <__udivmoddi4+0x1a6>
 80005aa:	4463      	add	r3, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e74d      	b.n	800044c <__udivmoddi4+0x148>
 80005b0:	4606      	mov	r6, r0
 80005b2:	4623      	mov	r3, r4
 80005b4:	4608      	mov	r0, r1
 80005b6:	e70f      	b.n	80003d8 <__udivmoddi4+0xd4>
 80005b8:	3e02      	subs	r6, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	e730      	b.n	8000420 <__udivmoddi4+0x11c>
 80005be:	bf00      	nop

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005ca:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <_DoInit+0xa0>)
 80005cc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005ce:	22a8      	movs	r2, #168	@ 0xa8
 80005d0:	2100      	movs	r1, #0
 80005d2:	6838      	ldr	r0, [r7, #0]
 80005d4:	f008 f9c2 	bl	800895c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2203      	movs	r2, #3
 80005dc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2203      	movs	r2, #3
 80005e2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <_DoInit+0xa4>)
 80005e8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	4a1f      	ldr	r2, [pc, #124]	@ (800066c <_DoInit+0xa8>)
 80005ee:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005f6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	4a16      	ldr	r2, [pc, #88]	@ (8000668 <_DoInit+0xa4>)
 800060e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <_DoInit+0xac>)
 8000614:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2210      	movs	r2, #16
 800061a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2200      	movs	r2, #0
 8000626:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800062e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	e00c      	b.n	8000652 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f1c3 030f 	rsb	r3, r3, #15
 800063e:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <_DoInit+0xb0>)
 8000640:	5cd1      	ldrb	r1, [r2, r3]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4413      	add	r3, r2
 8000648:	460a      	mov	r2, r1
 800064a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d9ef      	bls.n	8000638 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000658:	f3bf 8f5f 	dmb	sy
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200001bc 	.word	0x200001bc
 8000668:	08008b44 	.word	0x08008b44
 800066c:	20000264 	.word	0x20000264
 8000670:	20000664 	.word	0x20000664
 8000674:	08008c08 	.word	0x08008c08

08000678 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b08c      	sub	sp, #48	@ 0x30
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000684:	4b3e      	ldr	r3, [pc, #248]	@ (8000780 <SEGGER_RTT_ReadNoLock+0x108>)
 8000686:	623b      	str	r3, [r7, #32]
 8000688:	6a3b      	ldr	r3, [r7, #32]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <SEGGER_RTT_ReadNoLock+0x1e>
 8000692:	f7ff ff97 	bl	80005c4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	3360      	adds	r3, #96	@ 0x60
 80006a2:	4a37      	ldr	r2, [pc, #220]	@ (8000780 <SEGGER_RTT_ReadNoLock+0x108>)
 80006a4:	4413      	add	r3, r2
 80006a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d92b      	bls.n	800071c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4293      	cmp	r3, r2
 80006d4:	bf28      	it	cs
 80006d6:	4613      	movcs	r3, r2
 80006d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	685a      	ldr	r2, [r3, #4]
 80006de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006e0:	4413      	add	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	6939      	ldr	r1, [r7, #16]
 80006e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80006ea:	f008 f9bb 	bl	8008a64 <memcpy>
    NumBytesRead += NumBytesRem;
 80006ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	4413      	add	r3, r2
 80006f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80006f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	4413      	add	r3, r2
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	4413      	add	r3, r2
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000714:	429a      	cmp	r2, r3
 8000716:	d101      	bne.n	800071c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800071c:	69ba      	ldr	r2, [r7, #24]
 800071e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4293      	cmp	r3, r2
 800072a:	bf28      	it	cs
 800072c:	4613      	movcs	r3, r2
 800072e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d019      	beq.n	800076a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800073c:	4413      	add	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	6939      	ldr	r1, [r7, #16]
 8000744:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000746:	f008 f98d 	bl	8008a64 <memcpy>
    NumBytesRead += NumBytesRem;
 800074a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	4413      	add	r3, r2
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8000752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	4413      	add	r3, r2
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	4413      	add	r3, r2
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800076a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000774:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000778:	4618      	mov	r0, r3
 800077a:	3730      	adds	r7, #48	@ 0x30
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200001bc 	.word	0x200001bc

08000784 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8000792:	4b3d      	ldr	r3, [pc, #244]	@ (8000888 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8000794:	61bb      	str	r3, [r7, #24]
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d101      	bne.n	80007a4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007a0:	f7ff ff10 	bl	80005c4 <_DoInit>
  SEGGER_RTT_LOCK();
 80007a4:	f3ef 8311 	mrs	r3, BASEPRI
 80007a8:	f04f 0120 	mov.w	r1, #32
 80007ac:	f381 8811 	msr	BASEPRI, r1
 80007b0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007b2:	4b35      	ldr	r3, [pc, #212]	@ (8000888 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007b4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ba:	6939      	ldr	r1, [r7, #16]
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	440b      	add	r3, r1
 80007ca:	3304      	adds	r3, #4
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d008      	beq.n	80007e4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	3301      	adds	r3, #1
 80007d6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	69fa      	ldr	r2, [r7, #28]
 80007de:	429a      	cmp	r2, r3
 80007e0:	dbeb      	blt.n	80007ba <SEGGER_RTT_AllocUpBuffer+0x36>
 80007e2:	e000      	b.n	80007e6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007e4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	da3f      	bge.n	8000870 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80007f0:	6939      	ldr	r1, [r7, #16]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	3304      	adds	r3, #4
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800081a:	6939      	ldr	r1, [r7, #16]
 800081c:	69fa      	ldr	r2, [r7, #28]
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3320      	adds	r3, #32
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3328      	adds	r3, #40	@ 0x28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3324      	adds	r3, #36	@ 0x24
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	332c      	adds	r3, #44	@ 0x2c
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800086a:	f3bf 8f5f 	dmb	sy
 800086e:	e002      	b.n	8000876 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800087c:	69fb      	ldr	r3, [r7, #28]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200001bc 	.word	0x200001bc

0800088c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008a8:	f7ff fe8c 	bl	80005c4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008ae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d82c      	bhi.n	8000910 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008b6:	f3ef 8311 	mrs	r3, BASEPRI
 80008ba:	f04f 0120 	mov.w	r1, #32
 80008be:	f381 8811 	msr	BASEPRI, r1
 80008c2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	3360      	adds	r3, #96	@ 0x60
 80008d0:	69fa      	ldr	r2, [r7, #28]
 80008d2:	4413      	add	r3, r2
 80008d4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00e      	beq.n	80008fa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80008fe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000900:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
 800090e:	e002      	b.n	8000916 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8000916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000918:	4618      	mov	r0, r3
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200001bc 	.word	0x200001bc

08000924 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60fa      	str	r2, [r7, #12]
 800093a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b80      	cmp	r3, #128	@ 0x80
 8000940:	d90a      	bls.n	8000958 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000942:	2380      	movs	r3, #128	@ 0x80
 8000944:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000946:	e007      	b.n	8000958 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	1c53      	adds	r3, r2, #1
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	1c59      	adds	r1, r3, #1
 8000952:	60f9      	str	r1, [r7, #12]
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <_EncodeStr+0x46>
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1ee      	bne.n	8000948 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	b2da      	uxtb	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	371c      	adds	r7, #28
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3307      	adds	r3, #7
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009a2:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <_HandleIncomingPacket+0xd8>)
 80009a4:	7e1b      	ldrb	r3, [r3, #24]
 80009a6:	4618      	mov	r0, r3
 80009a8:	1cfb      	adds	r3, r7, #3
 80009aa:	2201      	movs	r2, #1
 80009ac:	4619      	mov	r1, r3
 80009ae:	f7ff fe63 	bl	8000678 <SEGGER_RTT_ReadNoLock>
 80009b2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d057      	beq.n	8000a6a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	2b80      	cmp	r3, #128	@ 0x80
 80009be:	d031      	beq.n	8000a24 <_HandleIncomingPacket+0x88>
 80009c0:	2b80      	cmp	r3, #128	@ 0x80
 80009c2:	dc40      	bgt.n	8000a46 <_HandleIncomingPacket+0xaa>
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	dc15      	bgt.n	80009f4 <_HandleIncomingPacket+0x58>
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dd3c      	ble.n	8000a46 <_HandleIncomingPacket+0xaa>
 80009cc:	3b01      	subs	r3, #1
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d839      	bhi.n	8000a46 <_HandleIncomingPacket+0xaa>
 80009d2:	a201      	add	r2, pc, #4	@ (adr r2, 80009d8 <_HandleIncomingPacket+0x3c>)
 80009d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d8:	080009fb 	.word	0x080009fb
 80009dc:	08000a01 	.word	0x08000a01
 80009e0:	08000a07 	.word	0x08000a07
 80009e4:	08000a0d 	.word	0x08000a0d
 80009e8:	08000a13 	.word	0x08000a13
 80009ec:	08000a19 	.word	0x08000a19
 80009f0:	08000a1f 	.word	0x08000a1f
 80009f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80009f6:	d033      	beq.n	8000a60 <_HandleIncomingPacket+0xc4>
 80009f8:	e025      	b.n	8000a46 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80009fa:	f000 fbe3 	bl	80011c4 <SEGGER_SYSVIEW_Start>
      break;
 80009fe:	e034      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a00:	f000 fc9a 	bl	8001338 <SEGGER_SYSVIEW_Stop>
      break;
 8000a04:	e031      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a06:	f000 fe73 	bl	80016f0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a0a:	e02e      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a0c:	f000 fe38 	bl	8001680 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a10:	e02b      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a12:	f000 fcb7 	bl	8001384 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a16:	e028      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a18:	f000 ff44 	bl	80018a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a1c:	e025      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a1e:	f000 ff23 	bl	8001868 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a22:	e022      	b.n	8000a6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <_HandleIncomingPacket+0xd8>)
 8000a26:	7e1b      	ldrb	r3, [r3, #24]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	1cfb      	adds	r3, r7, #3
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f7ff fe22 	bl	8000678 <SEGGER_RTT_ReadNoLock>
 8000a34:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d013      	beq.n	8000a64 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fe88 	bl	8001754 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a44:	e00e      	b.n	8000a64 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a46:	78fb      	ldrb	r3, [r7, #3]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da0c      	bge.n	8000a68 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <_HandleIncomingPacket+0xd8>)
 8000a50:	7e1b      	ldrb	r3, [r3, #24]
 8000a52:	4618      	mov	r0, r3
 8000a54:	1cfb      	adds	r3, r7, #3
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f7ff fe0d 	bl	8000678 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a5e:	e003      	b.n	8000a68 <_HandleIncomingPacket+0xcc>
      break;
 8000a60:	bf00      	nop
 8000a62:	e002      	b.n	8000a6a <_HandleIncomingPacket+0xce>
      break;
 8000a64:	bf00      	nop
 8000a66:	e000      	b.n	8000a6a <_HandleIncomingPacket+0xce>
      break;
 8000a68:	bf00      	nop
    }
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000a7c 	.word	0x20000a7c

08000a78 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	@ 0x30
 8000a7c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a7e:	2301      	movs	r3, #1
 8000a80:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a92:	e00b      	b.n	8000aac <_TrySendOverflowPacket+0x34>
 8000a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a9a:	1c59      	adds	r1, r3, #1
 8000a9c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8000a9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa8:	09db      	lsrs	r3, r3, #7
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ab0:	d8f0      	bhi.n	8000a94 <_TrySendOverflowPacket+0x1c>
 8000ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000ab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ac0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ac2:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <_TrySendOverflowPacket+0xe0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	e00b      	b.n	8000af4 <_TrySendOverflowPacket+0x7c>
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae2:	1c59      	adds	r1, r3, #1
 8000ae4:	6279      	str	r1, [r7, #36]	@ 0x24
 8000ae6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	09db      	lsrs	r3, r3, #7
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000af8:	d8f0      	bhi.n	8000adc <_TrySendOverflowPacket+0x64>
 8000afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	627a      	str	r2, [r7, #36]	@ 0x24
 8000b00:	6a3a      	ldr	r2, [r7, #32]
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b08:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b0c:	785b      	ldrb	r3, [r3, #1]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f7ff fb90 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b20:	4603      	mov	r3, r0
 8000b22:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d009      	beq.n	8000b3e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e004      	b.n	8000b48 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b3e:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <_TrySendOverflowPacket+0xdc>)
 8000b46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b48:	693b      	ldr	r3, [r7, #16]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3730      	adds	r7, #48	@ 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000a7c 	.word	0x20000a7c
 8000b58:	e0001004 	.word	0xe0001004

08000b5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	@ 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b68:	4b98      	ldr	r3, [pc, #608]	@ (8000dcc <_SendPacket+0x270>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d010      	beq.n	8000b92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b70:	4b96      	ldr	r3, [pc, #600]	@ (8000dcc <_SendPacket+0x270>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 812d 	beq.w	8000dd4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b7a:	4b94      	ldr	r3, [pc, #592]	@ (8000dcc <_SendPacket+0x270>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d109      	bne.n	8000b96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b82:	f7ff ff79 	bl	8000a78 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b86:	4b91      	ldr	r3, [pc, #580]	@ (8000dcc <_SendPacket+0x270>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	f040 8124 	bne.w	8000dd8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000b90:	e001      	b.n	8000b96 <_SendPacket+0x3a>
    goto Send;
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <_SendPacket+0x3c>
Send:
 8000b96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b1f      	cmp	r3, #31
 8000b9c:	d809      	bhi.n	8000bb2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8000dcc <_SendPacket+0x270>)
 8000ba0:	69da      	ldr	r2, [r3, #28]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f040 8115 	bne.w	8000ddc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b17      	cmp	r3, #23
 8000bb6:	d807      	bhi.n	8000bc8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	e0c4      	b.n	8000d52 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bd4:	d912      	bls.n	8000bfc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	09da      	lsrs	r2, r3, #7
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	3a01      	subs	r2, #1
 8000bee:	60fa      	str	r2, [r7, #12]
 8000bf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e006      	b.n	8000c0a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b7e      	cmp	r3, #126	@ 0x7e
 8000c0e:	d807      	bhi.n	8000c20 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e098      	b.n	8000d52 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c26:	d212      	bcs.n	8000c4e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	09da      	lsrs	r2, r3, #7
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	3a01      	subs	r2, #1
 8000c40:	60fa      	str	r2, [r7, #12]
 8000c42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e081      	b.n	8000d52 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000c54:	d21d      	bcs.n	8000c92 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	0b9a      	lsrs	r2, r3, #14
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	09db      	lsrs	r3, r3, #7
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	3a01      	subs	r2, #1
 8000c70:	60fa      	str	r2, [r7, #12]
 8000c72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	3a01      	subs	r2, #1
 8000c84:	60fa      	str	r2, [r7, #12]
 8000c86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e05f      	b.n	8000d52 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000c98:	d228      	bcs.n	8000cec <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	0d5a      	lsrs	r2, r3, #21
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0b9b      	lsrs	r3, r3, #14
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	3a01      	subs	r2, #1
 8000cb4:	60fa      	str	r2, [r7, #12]
 8000cb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	09db      	lsrs	r3, r3, #7
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	3a01      	subs	r2, #1
 8000cca:	60fa      	str	r2, [r7, #12]
 8000ccc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	3a01      	subs	r2, #1
 8000cde:	60fa      	str	r2, [r7, #12]
 8000ce0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e032      	b.n	8000d52 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	0f1a      	lsrs	r2, r3, #28
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	0d5b      	lsrs	r3, r3, #21
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	3a01      	subs	r2, #1
 8000d06:	60fa      	str	r2, [r7, #12]
 8000d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0b9b      	lsrs	r3, r3, #14
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	3a01      	subs	r2, #1
 8000d1c:	60fa      	str	r2, [r7, #12]
 8000d1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	09db      	lsrs	r3, r3, #7
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	3a01      	subs	r2, #1
 8000d32:	60fa      	str	r2, [r7, #12]
 8000d34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	3a01      	subs	r2, #1
 8000d46:	60fa      	str	r2, [r7, #12]
 8000d48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d52:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <_SendPacket+0x274>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <_SendPacket+0x270>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	623b      	str	r3, [r7, #32]
 8000d6a:	e00b      	b.n	8000d84 <_SendPacket+0x228>
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	1c59      	adds	r1, r3, #1
 8000d74:	6279      	str	r1, [r7, #36]	@ 0x24
 8000d76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	09db      	lsrs	r3, r3, #7
 8000d82:	623b      	str	r3, [r7, #32]
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d88:	d8f0      	bhi.n	8000d6c <_SendPacket+0x210>
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8000d90:	6a3a      	ldr	r2, [r7, #32]
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <_SendPacket+0x270>)
 8000d9c:	785b      	ldrb	r3, [r3, #1]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	68f9      	ldr	r1, [r7, #12]
 8000daa:	f7ff fa49 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dae:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <_SendPacket+0x270>)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	60d3      	str	r3, [r2, #12]
 8000dbc:	e00f      	b.n	8000dde <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dbe:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <_SendPacket+0x270>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b01      	ldr	r3, [pc, #4]	@ (8000dcc <_SendPacket+0x270>)
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e008      	b.n	8000dde <_SendPacket+0x282>
 8000dcc:	20000a7c 	.word	0x20000a7c
 8000dd0:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dd4:	bf00      	nop
 8000dd6:	e002      	b.n	8000dde <_SendPacket+0x282>
      goto SendDone;
 8000dd8:	bf00      	nop
 8000dda:	e000      	b.n	8000dde <_SendPacket+0x282>
      goto SendDone;
 8000ddc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <_SendPacket+0x2d4>)
 8000de0:	7e1b      	ldrb	r3, [r3, #24]
 8000de2:	4619      	mov	r1, r3
 8000de4:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <_SendPacket+0x2d8>)
 8000de6:	460b      	mov	r3, r1
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	440b      	add	r3, r1
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4413      	add	r3, r2
 8000df0:	336c      	adds	r3, #108	@ 0x6c
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <_SendPacket+0x2d4>)
 8000df6:	7e1b      	ldrb	r3, [r3, #24]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	490e      	ldr	r1, [pc, #56]	@ (8000e34 <_SendPacket+0x2d8>)
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4403      	add	r3, r0
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	3370      	adds	r3, #112	@ 0x70
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d00b      	beq.n	8000e26 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <_SendPacket+0x2d4>)
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d107      	bne.n	8000e26 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <_SendPacket+0x2d4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e1c:	f7ff fdbe 	bl	800099c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <_SendPacket+0x2d4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	@ 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000a7c 	.word	0x20000a7c
 8000e34:	200001bc 	.word	0x200001bc

08000e38 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0a2      	sub	sp, #136	@ 0x88
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  NumArguments = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (;;) {
    c = *p++;
 8000e4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (c == 0) {
 8000e5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d01d      	beq.n	8000e9e <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000e66:	2b25      	cmp	r3, #37	@ 0x25
 8000e68:	d1f1      	bne.n	8000e4e <_VPrintHost+0x16>
      c = *p;
 8000e6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1d19      	adds	r1, r3, #4
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6011      	str	r1, [r2, #0]
 8000e7c:	6819      	ldr	r1, [r3, #0]
 8000e7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8000e88:	460a      	mov	r2, r1
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3388      	adds	r3, #136	@ 0x88
 8000e8e:	443b      	add	r3, r7
 8000e90:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	d002      	beq.n	8000ea2 <_VPrintHost+0x6a>
    c = *p++;
 8000e9c:	e7d7      	b.n	8000e4e <_VPrintHost+0x16>
      break;
 8000e9e:	bf00      	nop
 8000ea0:	e000      	b.n	8000ea4 <_VPrintHost+0x6c>
        break;
 8000ea2:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8000ea8:	f04f 0120 	mov.w	r1, #32
 8000eac:	f381 8811 	msr	BASEPRI, r1
 8000eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000eb2:	483f      	ldr	r0, [pc, #252]	@ (8000fb0 <_VPrintHost+0x178>)
 8000eb4:	f7ff fd66 	bl	8000984 <_PreparePacket>
 8000eb8:	6578      	str	r0, [r7, #84]	@ 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000eba:	2280      	movs	r2, #128	@ 0x80
 8000ebc:	68f9      	ldr	r1, [r7, #12]
 8000ebe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000ec0:	f7ff fd30 	bl	8000924 <_EncodeStr>
 8000ec4:	67b8      	str	r0, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, Options);
 8000ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ec8:	677b      	str	r3, [r7, #116]	@ 0x74
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ece:	e00b      	b.n	8000ee8 <_VPrintHost+0xb0>
 8000ed0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ed6:	1c59      	adds	r1, r3, #1
 8000ed8:	6779      	str	r1, [r7, #116]	@ 0x74
 8000eda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ee4:	09db      	lsrs	r3, r3, #7
 8000ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000eea:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eec:	d8f0      	bhi.n	8000ed0 <_VPrintHost+0x98>
 8000eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	677a      	str	r2, [r7, #116]	@ 0x74
 8000ef4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000efc:	67bb      	str	r3, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000efe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f08:	e00b      	b.n	8000f22 <_VPrintHost+0xea>
 8000f0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f10:	1c59      	adds	r1, r3, #1
 8000f12:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8000f14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f1e:	09db      	lsrs	r3, r3, #7
 8000f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000f22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f24:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f26:	d8f0      	bhi.n	8000f0a <_VPrintHost+0xd2>
 8000f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f2a:	1c5a      	adds	r2, r3, #1
 8000f2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000f2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f36:	67bb      	str	r3, [r7, #120]	@ 0x78
    pParas = aParas;
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 8000f40:	e022      	b.n	8000f88 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f44:	667b      	str	r3, [r7, #100]	@ 0x64
 8000f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f4e:	e00b      	b.n	8000f68 <_VPrintHost+0x130>
 8000f50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f56:	1c59      	adds	r1, r3, #1
 8000f58:	6679      	str	r1, [r7, #100]	@ 0x64
 8000f5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f64:	09db      	lsrs	r3, r3, #7
 8000f66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f6c:	d8f0      	bhi.n	8000f50 <_VPrintHost+0x118>
 8000f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	667a      	str	r2, [r7, #100]	@ 0x64
 8000f74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f7c:	67bb      	str	r3, [r7, #120]	@ 0x78
      pParas++;
 8000f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f82:	3304      	adds	r3, #4
 8000f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 8000f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f8c:	1e5a      	subs	r2, r3, #1
 8000f8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1d5      	bne.n	8000f42 <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000f96:	221a      	movs	r2, #26
 8000f98:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f9a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000f9c:	f7ff fdde 	bl	8000b5c <_SendPacket>
    RECORD_END();
 8000fa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fa2:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3788      	adds	r7, #136	@ 0x88
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000aac 	.word	0x20000aac

08000fb4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc8:	4917      	ldr	r1, [pc, #92]	@ (8001028 <SEGGER_SYSVIEW_Init+0x74>)
 8000fca:	4818      	ldr	r0, [pc, #96]	@ (800102c <SEGGER_SYSVIEW_Init+0x78>)
 8000fcc:	f7ff fbda 	bl	8000784 <SEGGER_RTT_AllocUpBuffer>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fd6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fda:	785a      	ldrb	r2, [r3, #1]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fde:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe2:	7e1b      	ldrb	r3, [r3, #24]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2308      	movs	r3, #8
 8000fec:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <SEGGER_SYSVIEW_Init+0x80>)
 8000fee:	490f      	ldr	r1, [pc, #60]	@ (800102c <SEGGER_SYSVIEW_Init+0x78>)
 8000ff0:	f7ff fc4c 	bl	800088c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <SEGGER_SYSVIEW_Init+0x84>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8001000:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8001002:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800100e:	4a08      	ldr	r2, [pc, #32]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001014:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000674 	.word	0x20000674
 800102c:	08008b58 	.word	0x08008b58
 8001030:	20000a7c 	.word	0x20000a7c
 8001034:	20000a74 	.word	0x20000a74
 8001038:	e0001004 	.word	0xe0001004

0800103c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001044:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6113      	str	r3, [r2, #16]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000a7c 	.word	0x20000a7c

0800105c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001064:	f3ef 8311 	mrs	r3, BASEPRI
 8001068:	f04f 0120 	mov.w	r1, #32
 800106c:	f381 8811 	msr	BASEPRI, r1
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4808      	ldr	r0, [pc, #32]	@ (8001094 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001074:	f7ff fc86 	bl	8000984 <_PreparePacket>
 8001078:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff fd6c 	bl	8000b5c <_SendPacket>
  RECORD_END();
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f383 8811 	msr	BASEPRI, r3
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000aac 	.word	0x20000aac

08001098 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010a2:	f3ef 8311 	mrs	r3, BASEPRI
 80010a6:	f04f 0120 	mov.w	r1, #32
 80010aa:	f381 8811 	msr	BASEPRI, r1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	4816      	ldr	r0, [pc, #88]	@ (800110c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010b2:	f7ff fc67 	bl	8000984 <_PreparePacket>
 80010b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	e00b      	b.n	80010de <SEGGER_SYSVIEW_RecordU32+0x46>
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	1c59      	adds	r1, r3, #1
 80010ce:	61f9      	str	r1, [r7, #28]
 80010d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	09db      	lsrs	r3, r3, #7
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80010e2:	d8f0      	bhi.n	80010c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	61fa      	str	r2, [r7, #28]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	6938      	ldr	r0, [r7, #16]
 80010fa:	f7ff fd2f 	bl	8000b5c <_SendPacket>
  RECORD_END();
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f383 8811 	msr	BASEPRI, r3
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000aac 	.word	0x20000aac

08001110 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	@ 0x30
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800111c:	f3ef 8311 	mrs	r3, BASEPRI
 8001120:	f04f 0120 	mov.w	r1, #32
 8001124:	f381 8811 	msr	BASEPRI, r1
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	4825      	ldr	r0, [pc, #148]	@ (80011c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800112c:	f7ff fc2a 	bl	8000984 <_PreparePacket>
 8001130:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800113e:	e00b      	b.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001142:	b2da      	uxtb	r2, r3
 8001144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001146:	1c59      	adds	r1, r3, #1
 8001148:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800114a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001154:	09db      	lsrs	r3, r3, #7
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115a:	2b7f      	cmp	r3, #127	@ 0x7f
 800115c:	d8f0      	bhi.n	8001140 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800115e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	e00b      	b.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	1c59      	adds	r1, r3, #1
 8001180:	6279      	str	r1, [r7, #36]	@ 0x24
 8001182:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	701a      	strb	r2, [r3, #0]
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	09db      	lsrs	r3, r3, #7
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	2b7f      	cmp	r3, #127	@ 0x7f
 8001194:	d8f0      	bhi.n	8001178 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	627a      	str	r2, [r7, #36]	@ 0x24
 800119c:	6a3a      	ldr	r2, [r7, #32]
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	6979      	ldr	r1, [r7, #20]
 80011aa:	69b8      	ldr	r0, [r7, #24]
 80011ac:	f7ff fcd6 	bl	8000b5c <_SendPacket>
  RECORD_END();
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f383 8811 	msr	BASEPRI, r3
}
 80011b6:	bf00      	nop
 80011b8:	3730      	adds	r7, #48	@ 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000aac 	.word	0x20000aac

080011c4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011ca:	4b58      	ldr	r3, [pc, #352]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011d0:	f3ef 8311 	mrs	r3, BASEPRI
 80011d4:	f04f 0120 	mov.w	r1, #32
 80011d8:	f381 8811 	msr	BASEPRI, r1
 80011dc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011de:	4b53      	ldr	r3, [pc, #332]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	220a      	movs	r2, #10
 80011e4:	4952      	ldr	r1, [pc, #328]	@ (8001330 <SEGGER_SYSVIEW_Start+0x16c>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f82a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f7ff ff32 	bl	800105c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80011f8:	f3ef 8311 	mrs	r3, BASEPRI
 80011fc:	f04f 0120 	mov.w	r1, #32
 8001200:	f381 8811 	msr	BASEPRI, r1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	484b      	ldr	r0, [pc, #300]	@ (8001334 <SEGGER_SYSVIEW_Start+0x170>)
 8001208:	f7ff fbbc 	bl	8000984 <_PreparePacket>
 800120c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001216:	4b45      	ldr	r3, [pc, #276]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800121c:	e00b      	b.n	8001236 <SEGGER_SYSVIEW_Start+0x72>
 800121e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001220:	b2da      	uxtb	r2, r3
 8001222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001224:	1c59      	adds	r1, r3, #1
 8001226:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001228:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001232:	09db      	lsrs	r3, r3, #7
 8001234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001238:	2b7f      	cmp	r3, #127	@ 0x7f
 800123a:	d8f0      	bhi.n	800121e <SEGGER_SYSVIEW_Start+0x5a>
 800123c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800124a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001250:	4b36      	ldr	r3, [pc, #216]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	623b      	str	r3, [r7, #32]
 8001256:	e00b      	b.n	8001270 <SEGGER_SYSVIEW_Start+0xac>
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	1c59      	adds	r1, r3, #1
 8001260:	6279      	str	r1, [r7, #36]	@ 0x24
 8001262:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	09db      	lsrs	r3, r3, #7
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	2b7f      	cmp	r3, #127	@ 0x7f
 8001274:	d8f0      	bhi.n	8001258 <SEGGER_SYSVIEW_Start+0x94>
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	627a      	str	r2, [r7, #36]	@ 0x24
 800127c:	6a3a      	ldr	r2, [r7, #32]
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	4b28      	ldr	r3, [pc, #160]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	61bb      	str	r3, [r7, #24]
 8001290:	e00b      	b.n	80012aa <SEGGER_SYSVIEW_Start+0xe6>
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	1c59      	adds	r1, r3, #1
 800129a:	61f9      	str	r1, [r7, #28]
 800129c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	09db      	lsrs	r3, r3, #7
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80012ae:	d8f0      	bhi.n	8001292 <SEGGER_SYSVIEW_Start+0xce>
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	61fa      	str	r2, [r7, #28]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	e00b      	b.n	80012e2 <SEGGER_SYSVIEW_Start+0x11e>
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1c59      	adds	r1, r3, #1
 80012d2:	6179      	str	r1, [r7, #20]
 80012d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	09db      	lsrs	r3, r3, #7
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e6:	d8f0      	bhi.n	80012ca <SEGGER_SYSVIEW_Start+0x106>
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	617a      	str	r2, [r7, #20]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80012f8:	2218      	movs	r2, #24
 80012fa:	6839      	ldr	r1, [r7, #0]
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fc2d 	bl	8000b5c <_SendPacket>
      RECORD_END();
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SEGGER_SYSVIEW_Start+0x168>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001314:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001316:	f000 f9eb 	bl	80016f0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800131a:	f000 f9b1 	bl	8001680 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800131e:	f000 fac1 	bl	80018a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	@ 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000a7c 	.word	0x20000a7c
 8001330:	08008c1c 	.word	0x08008c1c
 8001334:	20000aac 	.word	0x20000aac

08001338 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800133e:	f3ef 8311 	mrs	r3, BASEPRI
 8001342:	f04f 0120 	mov.w	r1, #32
 8001346:	f381 8811 	msr	BASEPRI, r1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <SEGGER_SYSVIEW_Stop+0x44>)
 800134e:	f7ff fb19 	bl	8000984 <_PreparePacket>
 8001352:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <SEGGER_SYSVIEW_Stop+0x48>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d007      	beq.n	800136c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800135c:	220b      	movs	r2, #11
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7ff fbfb 	bl	8000b5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <SEGGER_SYSVIEW_Stop+0x48>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f383 8811 	msr	BASEPRI, r3
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000aac 	.word	0x20000aac
 8001380:	20000a7c 	.word	0x20000a7c

08001384 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	@ 0x30
 8001388:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800138a:	f3ef 8311 	mrs	r3, BASEPRI
 800138e:	f04f 0120 	mov.w	r1, #32
 8001392:	f381 8811 	msr	BASEPRI, r1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4845      	ldr	r0, [pc, #276]	@ (80014b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800139a:	f7ff faf3 	bl	8000984 <_PreparePacket>
 800139e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a8:	4b42      	ldr	r3, [pc, #264]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ae:	e00b      	b.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b6:	1c59      	adds	r1, r3, #1
 80013b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80013ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c4:	09db      	lsrs	r3, r3, #7
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80013cc:	d8f0      	bhi.n	80013b0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80013d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e2:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	623b      	str	r3, [r7, #32]
 80013e8:	e00b      	b.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	1c59      	adds	r1, r3, #1
 80013f2:	6279      	str	r1, [r7, #36]	@ 0x24
 80013f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	09db      	lsrs	r3, r3, #7
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b7f      	cmp	r3, #127	@ 0x7f
 8001406:	d8f0      	bhi.n	80013ea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	627a      	str	r2, [r7, #36]	@ 0x24
 800140e:	6a3a      	ldr	r2, [r7, #32]
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001416:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	e00b      	b.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	1c59      	adds	r1, r3, #1
 800142c:	61f9      	str	r1, [r7, #28]
 800142e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	09db      	lsrs	r3, r3, #7
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001440:	d8f0      	bhi.n	8001424 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	61fa      	str	r2, [r7, #28]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	e00b      	b.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1c59      	adds	r1, r3, #1
 8001464:	6179      	str	r1, [r7, #20]
 8001466:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	09db      	lsrs	r3, r3, #7
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	2b7f      	cmp	r3, #127	@ 0x7f
 8001478:	d8f0      	bhi.n	800145c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	617a      	str	r2, [r7, #20]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800148a:	2218      	movs	r2, #24
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7ff fb64 	bl	8000b5c <_SendPacket>
  RECORD_END();
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800149c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	4798      	blx	r3
  }
}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	@ 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000aac 	.word	0x20000aac
 80014b4:	20000a7c 	.word	0x20000a7c

080014b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b092      	sub	sp, #72	@ 0x48
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014c0:	f3ef 8311 	mrs	r3, BASEPRI
 80014c4:	f04f 0120 	mov.w	r1, #32
 80014c8:	f381 8811 	msr	BASEPRI, r1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	486a      	ldr	r0, [pc, #424]	@ (8001678 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014d0:	f7ff fa58 	bl	8000984 <_PreparePacket>
 80014d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b66      	ldr	r3, [pc, #408]	@ (800167c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80014ea:	e00b      	b.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80014ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014f2:	1c59      	adds	r1, r3, #1
 80014f4:	6479      	str	r1, [r7, #68]	@ 0x44
 80014f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001500:	09db      	lsrs	r3, r3, #7
 8001502:	643b      	str	r3, [r7, #64]	@ 0x40
 8001504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001506:	2b7f      	cmp	r3, #127	@ 0x7f
 8001508:	d8f0      	bhi.n	80014ec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800150a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001510:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001518:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001524:	e00b      	b.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001528:	b2da      	uxtb	r2, r3
 800152a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800152c:	1c59      	adds	r1, r3, #1
 800152e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8001530:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800153a:	09db      	lsrs	r3, r3, #7
 800153c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800153e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001540:	2b7f      	cmp	r3, #127	@ 0x7f
 8001542:	d8f0      	bhi.n	8001526 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800154a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001552:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	4619      	mov	r1, r3
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff f9e1 	bl	8000924 <_EncodeStr>
 8001562:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001564:	2209      	movs	r2, #9
 8001566:	68f9      	ldr	r1, [r7, #12]
 8001568:	6938      	ldr	r0, [r7, #16]
 800156a:	f7ff faf7 	bl	8000b5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	637b      	str	r3, [r7, #52]	@ 0x34
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b40      	ldr	r3, [pc, #256]	@ (800167c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	633b      	str	r3, [r7, #48]	@ 0x30
 8001582:	e00b      	b.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001586:	b2da      	uxtb	r2, r3
 8001588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158a:	1c59      	adds	r1, r3, #1
 800158c:	6379      	str	r1, [r7, #52]	@ 0x34
 800158e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001598:	09db      	lsrs	r3, r3, #7
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
 800159c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800159e:	2b7f      	cmp	r3, #127	@ 0x7f
 80015a0:	d8f0      	bhi.n	8001584 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80015a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015bc:	e00b      	b.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c4:	1c59      	adds	r1, r3, #1
 80015c6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80015c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d2:	09db      	lsrs	r3, r3, #7
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80015da:	d8f0      	bhi.n	80015be <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	623b      	str	r3, [r7, #32]
 80015f6:	e00b      	b.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	1c59      	adds	r1, r3, #1
 8001600:	6279      	str	r1, [r7, #36]	@ 0x24
 8001602:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	09db      	lsrs	r3, r3, #7
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	2b7f      	cmp	r3, #127	@ 0x7f
 8001614:	d8f0      	bhi.n	80015f8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	627a      	str	r2, [r7, #36]	@ 0x24
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	e00b      	b.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	1c59      	adds	r1, r3, #1
 8001638:	61f9      	str	r1, [r7, #28]
 800163a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	09db      	lsrs	r3, r3, #7
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b7f      	cmp	r3, #127	@ 0x7f
 800164c:	d8f0      	bhi.n	8001630 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	61fa      	str	r2, [r7, #28]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800165e:	2215      	movs	r2, #21
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	6938      	ldr	r0, [r7, #16]
 8001664:	f7ff fa7a 	bl	8000b5c <_SendPacket>
  RECORD_END();
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f383 8811 	msr	BASEPRI, r3
}
 800166e:	bf00      	nop
 8001670:	3748      	adds	r7, #72	@ 0x48
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000aac 	.word	0x20000aac
 800167c:	20000a7c 	.word	0x20000a7c

08001680 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001684:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001696:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4798      	blx	r3
  }
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000a7c 	.word	0x20000a7c

080016a8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016b0:	f3ef 8311 	mrs	r3, BASEPRI
 80016b4:	f04f 0120 	mov.w	r1, #32
 80016b8:	f381 8811 	msr	BASEPRI, r1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	480b      	ldr	r0, [pc, #44]	@ (80016ec <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016c0:	f7ff f960 	bl	8000984 <_PreparePacket>
 80016c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c6:	2280      	movs	r2, #128	@ 0x80
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	6938      	ldr	r0, [r7, #16]
 80016cc:	f7ff f92a 	bl	8000924 <_EncodeStr>
 80016d0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016d2:	220e      	movs	r2, #14
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f7ff fa40 	bl	8000b5c <_SendPacket>
  RECORD_END();
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f383 8811 	msr	BASEPRI, r3
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000aac 	.word	0x20000aac

080016f0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01a      	beq.n	8001734 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80016fe:	4b13      	ldr	r3, [pc, #76]	@ (800174c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d015      	beq.n	8001734 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001708:	4b10      	ldr	r3, [pc, #64]	@ (800174c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4798      	blx	r3
 8001710:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001714:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	000a      	movs	r2, r1
 8001724:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001726:	4613      	mov	r3, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4621      	mov	r1, r4
 800172c:	200d      	movs	r0, #13
 800172e:	f7ff fcef 	bl	8001110 <SEGGER_SYSVIEW_RecordU32x2>
 8001732:	e006      	b.n	8001742 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	200c      	movs	r0, #12
 800173c:	f7ff fcac 	bl	8001098 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000a7c 	.word	0x20000a7c
 8001750:	e0001004 	.word	0xe0001004

08001754 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	@ 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800175e:	4b40      	ldr	r3, [pc, #256]	@ (8001860 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d077      	beq.n	8001856 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001766:	4b3e      	ldr	r3, [pc, #248]	@ (8001860 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001770:	e008      	b.n	8001784 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8001772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8001778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d007      	beq.n	800178e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800177e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001780:	3301      	adds	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001788:	429a      	cmp	r2, r3
 800178a:	d3f2      	bcc.n	8001772 <SEGGER_SYSVIEW_SendModule+0x1e>
 800178c:	e000      	b.n	8001790 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800178e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d055      	beq.n	8001842 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001796:	f3ef 8311 	mrs	r3, BASEPRI
 800179a:	f04f 0120 	mov.w	r1, #32
 800179e:	f381 8811 	msr	BASEPRI, r1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	482f      	ldr	r0, [pc, #188]	@ (8001864 <SEGGER_SYSVIEW_SendModule+0x110>)
 80017a6:	f7ff f8ed 	bl	8000984 <_PreparePacket>
 80017aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	e00b      	b.n	80017d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	1c59      	adds	r1, r3, #1
 80017c2:	6279      	str	r1, [r7, #36]	@ 0x24
 80017c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	09db      	lsrs	r3, r3, #7
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80017d6:	d8f0      	bhi.n	80017ba <SEGGER_SYSVIEW_SendModule+0x66>
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80017de:	6a3a      	ldr	r2, [r7, #32]
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	61bb      	str	r3, [r7, #24]
 80017f2:	e00b      	b.n	800180c <SEGGER_SYSVIEW_SendModule+0xb8>
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	1c59      	adds	r1, r3, #1
 80017fc:	61f9      	str	r1, [r7, #28]
 80017fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	09db      	lsrs	r3, r3, #7
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001810:	d8f0      	bhi.n	80017f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	61fa      	str	r2, [r7, #28]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2280      	movs	r2, #128	@ 0x80
 8001828:	4619      	mov	r1, r3
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f7ff f87a 	bl	8000924 <_EncodeStr>
 8001830:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8001832:	2216      	movs	r2, #22
 8001834:	68f9      	ldr	r1, [r7, #12]
 8001836:	6938      	ldr	r0, [r7, #16]
 8001838:	f7ff f990 	bl	8000b5c <_SendPacket>
      RECORD_END();
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8001842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <SEGGER_SYSVIEW_SendModule+0x102>
 8001848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4798      	blx	r3
    }
  }
}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	@ 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000aa4 	.word	0x20000aa4
 8001864:	20000aac 	.word	0x20000aac

08001868 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00f      	beq.n	8001896 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f2      	bne.n	800187c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000aa4 	.word	0x20000aa4

080018a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018aa:	f3ef 8311 	mrs	r3, BASEPRI
 80018ae:	f04f 0120 	mov.w	r1, #32
 80018b2:	f381 8811 	msr	BASEPRI, r1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	4817      	ldr	r0, [pc, #92]	@ (8001918 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018ba:	f7ff f863 	bl	8000984 <_PreparePacket>
 80018be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e00b      	b.n	80018e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	1c59      	adds	r1, r3, #1
 80018d8:	6179      	str	r1, [r7, #20]
 80018da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	09db      	lsrs	r3, r3, #7
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80018ec:	d8f0      	bhi.n	80018d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	617a      	str	r2, [r7, #20]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80018fe:	221b      	movs	r2, #27
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	68b8      	ldr	r0, [r7, #8]
 8001904:	f7ff f92a 	bl	8000b5c <_SendPacket>
  RECORD_END();
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f383 8811 	msr	BASEPRI, r3
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000aac 	.word	0x20000aac
 800191c:	20000aa8 	.word	0x20000aa8

08001920 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8001920:	b40f      	push	{r0, r1, r2, r3}
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	461a      	mov	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	6938      	ldr	r0, [r7, #16]
 8001936:	f7ff fa7f 	bl	8000e38 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001944:	b004      	add	sp, #16
 8001946:	4770      	bx	lr

08001948 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <_cbSendSystemDesc+0x14>)
 800194e:	f7ff feab 	bl	80016a8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001952:	4803      	ldr	r0, [pc, #12]	@ (8001960 <_cbSendSystemDesc+0x18>)
 8001954:	f7ff fea8 	bl	80016a8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	08008b60 	.word	0x08008b60
 8001960:	08008b94 	.word	0x08008b94

08001964 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <SEGGER_SYSVIEW_Conf+0x20>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <SEGGER_SYSVIEW_Conf+0x20>)
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SEGGER_SYSVIEW_Conf+0x24>)
 8001972:	4a06      	ldr	r2, [pc, #24]	@ (800198c <SEGGER_SYSVIEW_Conf+0x28>)
 8001974:	f7ff fb1e 	bl	8000fb4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001978:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800197c:	f7ff fb5e 	bl	800103c <SEGGER_SYSVIEW_SetRAMBase>
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000000 	.word	0x20000000
 8001988:	08001949 	.word	0x08001949
 800198c:	08008c28 	.word	0x08008c28

08001990 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001992:	b085      	sub	sp, #20
 8001994:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	e048      	b.n	8001a2e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800199c:	4929      	ldr	r1, [pc, #164]	@ (8001a44 <_cbSendTaskList+0xb4>)
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f005 fe25 	bl	80075fc <uxTaskGetStackHighWaterMark>
 80019b2:	4601      	mov	r1, r0
 80019b4:	4823      	ldr	r0, [pc, #140]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4403      	add	r3, r0
 80019c2:	3310      	adds	r3, #16
 80019c4:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019c6:	491f      	ldr	r1, [pc, #124]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	491b      	ldr	r1, [pc, #108]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	3304      	adds	r3, #4
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	4c16      	ldr	r4, [pc, #88]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4423      	add	r3, r4
 80019f6:	3308      	adds	r3, #8
 80019f8:	681c      	ldr	r4, [r3, #0]
 80019fa:	4d12      	ldr	r5, [pc, #72]	@ (8001a44 <_cbSendTaskList+0xb4>)
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	442b      	add	r3, r5
 8001a08:	330c      	adds	r3, #12
 8001a0a:	681d      	ldr	r5, [r3, #0]
 8001a0c:	4e0d      	ldr	r6, [pc, #52]	@ (8001a44 <_cbSendTaskList+0xb4>)
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4433      	add	r3, r6
 8001a1a:	3310      	adds	r3, #16
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	462b      	mov	r3, r5
 8001a22:	4622      	mov	r2, r4
 8001a24:	f000 f855 	bl	8001ad2 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <_cbSendTaskList+0xb8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3b1      	bcc.n	800199c <_cbSendTaskList+0xc>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000b90 	.word	0x20000b90
 8001a48:	20000c30 	.word	0x20000c30

08001a4c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a54:	f005 fab4 	bl	8006fc0 <xTaskGetTickCountFromISR>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	4693      	mov	fp, r2
 8001a60:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	f04f 0a00 	mov.w	sl, #0
 8001a70:	f04f 0b00 	mov.w	fp, #0
 8001a74:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a78:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a7c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a80:	4652      	mov	r2, sl
 8001a82:	465b      	mov	r3, fp
 8001a84:	1a14      	subs	r4, r2, r0
 8001a86:	eb63 0501 	sbc.w	r5, r3, r1
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	00ab      	lsls	r3, r5, #2
 8001a94:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001a98:	00a2      	lsls	r2, r4, #2
 8001a9a:	4614      	mov	r4, r2
 8001a9c:	461d      	mov	r5, r3
 8001a9e:	eb14 0800 	adds.w	r8, r4, r0
 8001aa2:	eb45 0901 	adc.w	r9, r5, r1
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aba:	4690      	mov	r8, r2
 8001abc:	4699      	mov	r9, r3
 8001abe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ad2 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08a      	sub	sp, #40	@ 0x28
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2214      	movs	r2, #20
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f006 ff37 	bl	800895c <memset>
  TaskInfo.TaskID     = TaskID;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fcd6 	bl	80014b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	@ 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b18:	f000 fd65 	bl	80025e6 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b1c:	f7ff ff22 	bl	8001964 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b20:	f000 f852 	bl	8001bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b24:	f000 f9ce 	bl	8001ec4 <MX_GPIO_Init>
  MX_ETH_Init();
 8001b28:	f000 f8c0 	bl	8001cac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b2c:	f000 f96c 	bl	8001e08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b30:	f000 f99a 	bl	8001e68 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001b34:	f000 f908 	bl	8001d48 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001b38:	f000 f936 	bl	8001da8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b3c:	f003 fef6 	bl	800592c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of printTimer */
  printTimerHandle = osTimerNew(printTimerRoutine, osTimerPeriodic, NULL, &printTimer_attributes);
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <main+0x84>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	2101      	movs	r1, #1
 8001b46:	4815      	ldr	r0, [pc, #84]	@ (8001b9c <main+0x88>)
 8001b48:	f004 f844 	bl	8005bd4 <osTimerNew>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <main+0x8c>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  osTimerStart(printTimerHandle, 1000 / portTICK_PERIOD_MS);
 8001b52:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <main+0x8c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 f8be 	bl	8005cdc <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b60:	4a10      	ldr	r2, [pc, #64]	@ (8001ba4 <main+0x90>)
 8001b62:	2100      	movs	r1, #0
 8001b64:	4810      	ldr	r0, [pc, #64]	@ (8001ba8 <main+0x94>)
 8001b66:	f003 ff4b 	bl	8005a00 <osThreadNew>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <main+0x98>)
 8001b6e:	6013      	str	r3, [r2, #0]

  /* creation of sender */
  senderHandle = osThreadNew(senderEntry, NULL, &sender_attributes);
 8001b70:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <main+0x9c>)
 8001b72:	2100      	movs	r1, #0
 8001b74:	480f      	ldr	r0, [pc, #60]	@ (8001bb4 <main+0xa0>)
 8001b76:	f003 ff43 	bl	8005a00 <osThreadNew>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <main+0xa4>)
 8001b7e:	6013      	str	r3, [r2, #0]

  /* creation of printer */
  printerHandle = osThreadNew(printerEntry, NULL, &printer_attributes);
 8001b80:	4a0e      	ldr	r2, [pc, #56]	@ (8001bbc <main+0xa8>)
 8001b82:	2100      	movs	r1, #0
 8001b84:	480e      	ldr	r0, [pc, #56]	@ (8001bc0 <main+0xac>)
 8001b86:	f003 ff3b 	bl	8005a00 <osThreadNew>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <main+0xb0>)
 8001b8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b90:	f003 ff00 	bl	8005994 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <main+0x80>
 8001b98:	08008c9c 	.word	0x08008c9c
 8001b9c:	0800205d 	.word	0x0800205d
 8001ba0:	200013c8 	.word	0x200013c8
 8001ba4:	08008c30 	.word	0x08008c30
 8001ba8:	08002009 	.word	0x08002009
 8001bac:	200013bc 	.word	0x200013bc
 8001bb0:	08008c54 	.word	0x08008c54
 8001bb4:	08002019 	.word	0x08002019
 8001bb8:	200013c0 	.word	0x200013c0
 8001bbc:	08008c78 	.word	0x08008c78
 8001bc0:	08002029 	.word	0x08002029
 8001bc4:	200013c4 	.word	0x200013c4

08001bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b094      	sub	sp, #80	@ 0x50
 8001bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	2234      	movs	r2, #52	@ 0x34
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f006 fec0 	bl	800895c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bec:	f001 fc96 	bl	800351c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <SystemClock_Config+0xdc>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca4 <SystemClock_Config+0xdc>)
 8001bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <SystemClock_Config+0xdc>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c10:	4a25      	ldr	r2, [pc, #148]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b23      	ldr	r3, [pc, #140]	@ (8001ca8 <SystemClock_Config+0xe0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c28:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001c2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c3c:	2360      	movs	r3, #96	@ 0x60
 8001c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c44:	2304      	movs	r3, #4
 8001c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fcc3 	bl	80035dc <HAL_RCC_OscConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c5c:	f000 fa16 	bl	800208c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c60:	f001 fc6c 	bl	800353c <HAL_PWREx_EnableOverDrive>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c6a:	f000 fa0f 	bl	800208c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6e:	230f      	movs	r3, #15
 8001c70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c72:	2302      	movs	r3, #2
 8001c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	2103      	movs	r1, #3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 ff54 	bl	8003b38 <HAL_RCC_ClockConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c96:	f000 f9f9 	bl	800208c <Error_Handler>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3750      	adds	r7, #80	@ 0x50
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000

08001cac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cb2:	4a20      	ldr	r2, [pc, #128]	@ (8001d34 <MX_ETH_Init+0x88>)
 8001cb4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cb6:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cbe:	2280      	movs	r2, #128	@ 0x80
 8001cc0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cc4:	22e1      	movs	r2, #225	@ 0xe1
 8001cc6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cdc:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <MX_ETH_Init+0x8c>)
 8001cde:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001ce2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001ce6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cea:	4a14      	ldr	r2, [pc, #80]	@ (8001d3c <MX_ETH_Init+0x90>)
 8001cec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cf0:	4a13      	ldr	r2, [pc, #76]	@ (8001d40 <MX_ETH_Init+0x94>)
 8001cf2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cf6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001cfa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <MX_ETH_Init+0x84>)
 8001cfe:	f000 fdd9 	bl	80028b4 <HAL_ETH_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d08:	f000 f9c0 	bl	800208c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d0c:	2238      	movs	r2, #56	@ 0x38
 8001d0e:	2100      	movs	r1, #0
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <MX_ETH_Init+0x98>)
 8001d12:	f006 fe23 	bl	800895c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_ETH_Init+0x98>)
 8001d18:	2221      	movs	r2, #33	@ 0x21
 8001d1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_ETH_Init+0x98>)
 8001d1e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001d22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d24:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <MX_ETH_Init+0x98>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000c6c 	.word	0x20000c6c
 8001d34:	40028000 	.word	0x40028000
 8001d38:	200013cc 	.word	0x200013cc
 8001d3c:	20000100 	.word	0x20000100
 8001d40:	20000060 	.word	0x20000060
 8001d44:	20000c34 	.word	0x20000c34

08001d48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d4e:	4a15      	ldr	r2, [pc, #84]	@ (8001da4 <MX_UART4_Init+0x5c>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <MX_UART4_Init+0x58>)
 8001d8c:	f002 fd22 	bl	80047d4 <HAL_UART_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d96:	f000 f979 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000d1c 	.word	0x20000d1c
 8001da4:	40004c00 	.word	0x40004c00

08001da8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dac:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dae:	4a15      	ldr	r2, [pc, #84]	@ (8001e04 <MX_USART2_UART_Init+0x5c>)
 8001db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001db2:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <MX_USART2_UART_Init+0x58>)
 8001dec:	f002 fcf2 	bl	80047d4 <HAL_UART_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001df6:	f000 f949 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000da4 	.word	0x20000da4
 8001e04:	40004400 	.word	0x40004400

08001e08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <MX_USART3_UART_Init+0x5c>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e44:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_USART3_UART_Init+0x58>)
 8001e4c:	f002 fcc2 	bl	80047d4 <HAL_UART_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e56:	f000 f919 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000e2c 	.word	0x20000e2c
 8001e64:	40004800 	.word	0x40004800

08001e68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001e72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e76:	2206      	movs	r2, #6
 8001e78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e88:	2202      	movs	r2, #2
 8001e8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e98:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	@ (8001ec0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eac:	f001 f9ed 	bl	800328a <HAL_PCD_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001eb6:	f000 f8e9 	bl	800208c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000eb4 	.word	0x20000eb4

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	@ 0x30
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	4b47      	ldr	r3, [pc, #284]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a46      	ldr	r2, [pc, #280]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef2:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a40      	ldr	r2, [pc, #256]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f22:	4b35      	ldr	r3, [pc, #212]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a34      	ldr	r2, [pc, #208]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b32      	ldr	r3, [pc, #200]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f52:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a28      	ldr	r2, [pc, #160]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <MX_GPIO_Init+0x134>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001f70:	4822      	ldr	r0, [pc, #136]	@ (8001ffc <MX_GPIO_Init+0x138>)
 8001f72:	f001 f971 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2140      	movs	r1, #64	@ 0x40
 8001f7a:	4821      	ldr	r0, [pc, #132]	@ (8002000 <MX_GPIO_Init+0x13c>)
 8001f7c:	f001 f96c 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	481b      	ldr	r0, [pc, #108]	@ (8002004 <MX_GPIO_Init+0x140>)
 8001f98:	f000 ffb2 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001f9c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4811      	ldr	r0, [pc, #68]	@ (8001ffc <MX_GPIO_Init+0x138>)
 8001fb6:	f000 ffa3 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001fba:	2340      	movs	r3, #64	@ 0x40
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480b      	ldr	r0, [pc, #44]	@ (8002000 <MX_GPIO_Init+0x13c>)
 8001fd2:	f000 ff95 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_GPIO_Init+0x13c>)
 8001fea:	f000 ff89 	bl	8002f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fee:	bf00      	nop
 8001ff0:	3730      	adds	r7, #48	@ 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40021800 	.word	0x40021800
 8002004:	40020800 	.word	0x40020800

08002008 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002010:	2001      	movs	r0, #1
 8002012:	f003 fd9b 	bl	8005b4c <osDelay>
 8002016:	e7fb      	b.n	8002010 <StartDefaultTask+0x8>

08002018 <senderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_senderEntry */
void senderEntry(void *argument)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN senderEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002020:	2001      	movs	r0, #1
 8002022:	f003 fd93 	bl	8005b4c <osDelay>
 8002026:	e7fb      	b.n	8002020 <senderEntry+0x8>

08002028 <printerEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printerEntry */
void printerEntry(void *argument)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  while(1)
  {
    //osDelay(1);


    HAL_UART_Receive(&huart2, &nextbyte, 1, 100);
 8002030:	f107 010c 	add.w	r1, r7, #12
 8002034:	2364      	movs	r3, #100	@ 0x64
 8002036:	2201      	movs	r2, #1
 8002038:	4806      	ldr	r0, [pc, #24]	@ (8002054 <printerEntry+0x2c>)
 800203a:	f002 fc9c 	bl	8004976 <HAL_UART_Receive>
    SEGGER_SYSVIEW_PrintfHost("uart received");
 800203e:	4806      	ldr	r0, [pc, #24]	@ (8002058 <printerEntry+0x30>)
 8002040:	f7ff fc6e 	bl	8001920 <SEGGER_SYSVIEW_PrintfHost>

    SEGGER_SYSVIEW_PrintfHost(&nextbyte);
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fc69 	bl	8001920 <SEGGER_SYSVIEW_PrintfHost>
    HAL_UART_Receive(&huart2, &nextbyte, 1, 100);
 800204e:	bf00      	nop
 8002050:	e7ee      	b.n	8002030 <printerEntry+0x8>
 8002052:	bf00      	nop
 8002054:	20000da4 	.word	0x20000da4
 8002058:	08008bcc 	.word	0x08008bcc

0800205c <printTimerRoutine>:
  /* USER CODE END printerEntry */
}

/* printTimerRoutine function */
void printTimerRoutine(void *argument)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN printTimerRoutine */
	SEGGER_SYSVIEW_PrintfHost("timer print sender");
 8002064:	4806      	ldr	r0, [pc, #24]	@ (8002080 <printTimerRoutine+0x24>)
 8002066:	f7ff fc5b 	bl	8001920 <SEGGER_SYSVIEW_PrintfHost>

		//HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);

	HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);
 800206a:	2364      	movs	r3, #100	@ 0x64
 800206c:	2201      	movs	r2, #1
 800206e:	4905      	ldr	r1, [pc, #20]	@ (8002084 <printTimerRoutine+0x28>)
 8002070:	4805      	ldr	r0, [pc, #20]	@ (8002088 <printTimerRoutine+0x2c>)
 8002072:	f002 fbfd 	bl	8004870 <HAL_UART_Transmit>
  /* USER CODE END printTimerRoutine */
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	08008bdc 	.word	0x08008bdc
 8002084:	08008cac 	.word	0x08008cac
 8002088:	20000d1c 	.word	0x20000d1c

0800208c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002090:	b672      	cpsid	i
}
 8002092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <Error_Handler+0x8>

08002098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a10      	ldr	r2, [pc, #64]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <HAL_MspInit+0x4c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	210f      	movs	r1, #15
 80020d2:	f06f 0001 	mvn.w	r0, #1
 80020d6:	f000 fbc4 	bl	8002862 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08e      	sub	sp, #56	@ 0x38
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4e      	ldr	r2, [pc, #312]	@ (8002240 <HAL_ETH_MspInit+0x158>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 8096 	bne.w	8002238 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800210c:	4b4d      	ldr	r3, [pc, #308]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	4a4c      	ldr	r2, [pc, #304]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002112:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002116:	6313      	str	r3, [r2, #48]	@ 0x30
 8002118:	4b4a      	ldr	r3, [pc, #296]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	4b47      	ldr	r3, [pc, #284]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	4a46      	ldr	r2, [pc, #280]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800212a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800212e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002130:	4b44      	ldr	r3, [pc, #272]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	4a40      	ldr	r2, [pc, #256]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002142:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002146:	6313      	str	r3, [r2, #48]	@ 0x30
 8002148:	4b3e      	ldr	r3, [pc, #248]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002154:	4b3b      	ldr	r3, [pc, #236]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002160:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	4b35      	ldr	r3, [pc, #212]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	4a34      	ldr	r2, [pc, #208]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6313      	str	r3, [r2, #48]	@ 0x30
 8002178:	4b32      	ldr	r3, [pc, #200]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	4a2e      	ldr	r2, [pc, #184]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002190:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800219c:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 80021a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a8:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <HAL_ETH_MspInit+0x15c>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80021b4:	2332      	movs	r3, #50	@ 0x32
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021c4:	230b      	movs	r3, #11
 80021c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021cc:	4619      	mov	r1, r3
 80021ce:	481e      	ldr	r0, [pc, #120]	@ (8002248 <HAL_ETH_MspInit+0x160>)
 80021d0:	f000 fe96 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80021d4:	2386      	movs	r3, #134	@ 0x86
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021e4:	230b      	movs	r3, #11
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ec:	4619      	mov	r1, r3
 80021ee:	4817      	ldr	r0, [pc, #92]	@ (800224c <HAL_ETH_MspInit+0x164>)
 80021f0:	f000 fe86 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002206:	230b      	movs	r3, #11
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800220a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220e:	4619      	mov	r1, r3
 8002210:	480f      	ldr	r0, [pc, #60]	@ (8002250 <HAL_ETH_MspInit+0x168>)
 8002212:	f000 fe75 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002216:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002228:	230b      	movs	r3, #11
 800222a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800222c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002230:	4619      	mov	r1, r3
 8002232:	4808      	ldr	r0, [pc, #32]	@ (8002254 <HAL_ETH_MspInit+0x16c>)
 8002234:	f000 fe64 	bl	8002f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002238:	bf00      	nop
 800223a:	3738      	adds	r7, #56	@ 0x38
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40028000 	.word	0x40028000
 8002244:	40023800 	.word	0x40023800
 8002248:	40020800 	.word	0x40020800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400
 8002254:	40021800 	.word	0x40021800

08002258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0b2      	sub	sp, #200	@ 0xc8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002274:	2290      	movs	r2, #144	@ 0x90
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f006 fb6f 	bl	800895c <memset>
  if(huart->Instance==UART4)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a64      	ldr	r2, [pc, #400]	@ (8002414 <HAL_UART_MspInit+0x1bc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d13d      	bne.n	8002304 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800228e:	2300      	movs	r3, #0
 8002290:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fe74 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022a2:	f7ff fef3 	bl	800208c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b59      	ldr	r3, [pc, #356]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	4b56      	ldr	r3, [pc, #344]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a55      	ldr	r2, [pc, #340]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022f0:	2308      	movs	r3, #8
 80022f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80022fa:	4619      	mov	r1, r3
 80022fc:	4847      	ldr	r0, [pc, #284]	@ (800241c <HAL_UART_MspInit+0x1c4>)
 80022fe:	f000 fdff 	bl	8002f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002302:	e082      	b.n	800240a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a45      	ldr	r2, [pc, #276]	@ (8002420 <HAL_UART_MspInit+0x1c8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d13b      	bne.n	8002386 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002312:	2300      	movs	r3, #0
 8002314:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800231a:	4618      	mov	r0, r3
 800231c:	f001 fe32 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8002326:	f7ff feb1 	bl	800208c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800232a:	4b3b      	ldr	r3, [pc, #236]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	4a3a      	ldr	r2, [pc, #232]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002334:	6413      	str	r3, [r2, #64]	@ 0x40
 8002336:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002342:	4b35      	ldr	r3, [pc, #212]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a34      	ldr	r2, [pc, #208]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b32      	ldr	r3, [pc, #200]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800235a:	2360      	movs	r3, #96	@ 0x60
 800235c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002372:	2307      	movs	r3, #7
 8002374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002378:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800237c:	4619      	mov	r1, r3
 800237e:	4829      	ldr	r0, [pc, #164]	@ (8002424 <HAL_UART_MspInit+0x1cc>)
 8002380:	f000 fdbe 	bl	8002f00 <HAL_GPIO_Init>
}
 8002384:	e041      	b.n	800240a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a27      	ldr	r2, [pc, #156]	@ (8002428 <HAL_UART_MspInit+0x1d0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d13c      	bne.n	800240a <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002396:	2300      	movs	r3, #0
 8002398:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 fdf0 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x156>
      Error_Handler();
 80023aa:	f7ff fe6f 	bl	800208c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	4a19      	ldr	r2, [pc, #100]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ba:	4b17      	ldr	r3, [pc, #92]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <HAL_UART_MspInit+0x1c0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f8:	2307      	movs	r3, #7
 80023fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fe:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002402:	4619      	mov	r1, r3
 8002404:	4807      	ldr	r0, [pc, #28]	@ (8002424 <HAL_UART_MspInit+0x1cc>)
 8002406:	f000 fd7b 	bl	8002f00 <HAL_GPIO_Init>
}
 800240a:	bf00      	nop
 800240c:	37c8      	adds	r7, #200	@ 0xc8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40004c00 	.word	0x40004c00
 8002418:	40023800 	.word	0x40023800
 800241c:	40020800 	.word	0x40020800
 8002420:	40004400 	.word	0x40004400
 8002424:	40020c00 	.word	0x40020c00
 8002428:	40004800 	.word	0x40004800

0800242c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0ae      	sub	sp, #184	@ 0xb8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2290      	movs	r2, #144	@ 0x90
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f006 fa85 	bl	800895c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800245a:	d159      	bne.n	8002510 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800245c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002460:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fd89 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002478:	f7ff fe08 	bl	800208c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247c:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	4a25      	ldr	r2, [pc, #148]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6313      	str	r3, [r2, #48]	@ 0x30
 8002488:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002494:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002498:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024ae:	230a      	movs	r3, #10
 80024b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4818      	ldr	r0, [pc, #96]	@ (800251c <HAL_PCD_MspInit+0xf0>)
 80024bc:	f000 fd20 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80024d8:	4619      	mov	r1, r3
 80024da:	4810      	ldr	r0, [pc, #64]	@ (800251c <HAL_PCD_MspInit+0xf0>)
 80024dc:	f000 fd10 	bl	8002f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ea:	6353      	str	r3, [r2, #52]	@ 0x34
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fc:	4a06      	ldr	r2, [pc, #24]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 80024fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002502:	6453      	str	r3, [r2, #68]	@ 0x44
 8002504:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <HAL_PCD_MspInit+0xec>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002510:	bf00      	nop
 8002512:	37b8      	adds	r7, #184	@ 0xb8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <NMI_Handler+0x4>

08002528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <MemManage_Handler+0x4>

08002538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <UsageFault_Handler+0x4>

08002548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800255a:	f000 f881 	bl	8002660 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800255e:	f005 f8c1 	bl	80076e4 <xTaskGetSchedulerState>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d001      	beq.n	800256c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002568:	f005 ff76 	bl	8008458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <SystemInit+0x20>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <SystemInit+0x20>)
 800257c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002594:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002598:	480d      	ldr	r0, [pc, #52]	@ (80025d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800259a:	490e      	ldr	r1, [pc, #56]	@ (80025d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800259c:	4a0e      	ldr	r2, [pc, #56]	@ (80025d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a0:	e002      	b.n	80025a8 <LoopCopyDataInit>

080025a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a6:	3304      	adds	r3, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ac:	d3f9      	bcc.n	80025a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ae:	4a0b      	ldr	r2, [pc, #44]	@ (80025dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025b0:	4c0b      	ldr	r4, [pc, #44]	@ (80025e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b4:	e001      	b.n	80025ba <LoopFillZerobss>

080025b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b8:	3204      	adds	r2, #4

080025ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025bc:	d3fb      	bcc.n	80025b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025be:	f7ff ffd7 	bl	8002570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025c2:	f006 fa29 	bl	8008a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c6:	f7ff faa5 	bl	8001b14 <main>
  bx  lr    
 80025ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80025d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80025d8:	08008cd8 	.word	0x08008cd8
  ldr r2, =_sbss
 80025dc:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80025e0:	20005ef8 	.word	0x20005ef8

080025e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC_IRQHandler>

080025e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ea:	2003      	movs	r0, #3
 80025ec:	f000 f92e 	bl	800284c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f0:	200f      	movs	r0, #15
 80025f2:	f000 f805 	bl	8002600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f6:	f7ff fd4f 	bl	8002098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <HAL_InitTick+0x54>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_InitTick+0x58>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002616:	fbb3 f3f1 	udiv	r3, r3, r1
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f93b 	bl	800289a <HAL_SYSTICK_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00e      	b.n	800264c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d80a      	bhi.n	800264a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002634:	2200      	movs	r2, #0
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f000 f911 	bl	8002862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002640:	4a06      	ldr	r2, [pc, #24]	@ (800265c <HAL_InitTick+0x5c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	e000      	b.n	800264c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000000 	.word	0x20000000
 8002658:	20000008 	.word	0x20000008
 800265c:	20000004 	.word	0x20000004

08002660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_IncTick+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_IncTick+0x24>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <HAL_IncTick+0x24>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000008 	.word	0x20000008
 8002684:	200013d4 	.word	0x200013d4

08002688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_GetTick+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	200013d4 	.word	0x200013d4

080026a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff ffee 	bl	8002688 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d005      	beq.n	80026c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_Delay+0x44>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c6:	bf00      	nop
 80026c8:	f7ff ffde 	bl	8002688 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d8f7      	bhi.n	80026c8 <HAL_Delay+0x28>
  {
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000008 	.word	0x20000008

080026e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <__NVIC_SetPriorityGrouping+0x40>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <__NVIC_SetPriorityGrouping+0x44>)
 8002712:	4313      	orrs	r3, r2
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <__NVIC_SetPriorityGrouping+0x40>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00
 800272c:	05fa0000 	.word	0x05fa0000

08002730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002734:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <__NVIC_GetPriorityGrouping+0x18>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	f003 0307 	and.w	r3, r3, #7
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	db0a      	blt.n	8002776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	490c      	ldr	r1, [pc, #48]	@ (8002798 <__NVIC_SetPriority+0x4c>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	440b      	add	r3, r1
 8002770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002774:	e00a      	b.n	800278c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4908      	ldr	r1, [pc, #32]	@ (800279c <__NVIC_SetPriority+0x50>)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3b04      	subs	r3, #4
 8002784:	0112      	lsls	r2, r2, #4
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	440b      	add	r3, r1
 800278a:	761a      	strb	r2, [r3, #24]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000e100 	.word	0xe000e100
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	@ 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f1c3 0307 	rsb	r3, r3, #7
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	bf28      	it	cs
 80027be:	2304      	movcs	r3, #4
 80027c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d902      	bls.n	80027d0 <NVIC_EncodePriority+0x30>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3b03      	subs	r3, #3
 80027ce:	e000      	b.n	80027d2 <NVIC_EncodePriority+0x32>
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	401a      	ands	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	4313      	orrs	r3, r2
         );
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	@ 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002818:	d301      	bcc.n	800281e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281a:	2301      	movs	r3, #1
 800281c:	e00f      	b.n	800283e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281e:	4a0a      	ldr	r2, [pc, #40]	@ (8002848 <SysTick_Config+0x40>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002826:	210f      	movs	r1, #15
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f7ff ff8e 	bl	800274c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <SysTick_Config+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002836:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <SysTick_Config+0x40>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010

0800284c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff47 	bl	80026e8 <__NVIC_SetPriorityGrouping>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff5c 	bl	8002730 <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff8e 	bl	80027a0 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5d 	bl	800274c <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffb0 	bl	8002808 <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06a      	b.n	800299c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2223      	movs	r2, #35	@ 0x23
 80028d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff fc05 	bl	80020e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_ETH_Init+0xf0>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	4a30      	ldr	r2, [pc, #192]	@ (80029a4 <HAL_ETH_Init+0xf0>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ea:	4b2e      	ldr	r3, [pc, #184]	@ (80029a4 <HAL_ETH_Init+0xf0>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80028f6:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <HAL_ETH_Init+0xf4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a2b      	ldr	r2, [pc, #172]	@ (80029a8 <HAL_ETH_Init+0xf4>)
 80028fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002900:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002902:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <HAL_ETH_Init+0xf4>)
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4927      	ldr	r1, [pc, #156]	@ (80029a8 <HAL_ETH_Init+0xf4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002910:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <HAL_ETH_Init+0xf4>)
 8002912:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800292a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800292c:	f7ff feac 	bl	8002688 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002932:	e011      	b.n	8002958 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002934:	f7ff fea8 	bl	8002688 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002942:	d909      	bls.n	8002958 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2204      	movs	r2, #4
 8002948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	22e0      	movs	r2, #224	@ 0xe0
 8002950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e021      	b.n	800299c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1e4      	bne.n	8002934 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f958 	bl	8002c20 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f9ff 	bl	8002d74 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa55 	bl	8002e26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	461a      	mov	r2, r3
 8002982:	2100      	movs	r1, #0
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f9bd 	bl	8002d04 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2210      	movs	r2, #16
 8002996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800

080029ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4b51      	ldr	r3, [pc, #324]	@ (8002b08 <ETH_SetMACConfig+0x15c>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	7c1b      	ldrb	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <ETH_SetMACConfig+0x28>
 80029ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80029d2:	e000      	b.n	80029d6 <ETH_SetMACConfig+0x2a>
 80029d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	7c5b      	ldrb	r3, [r3, #17]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <ETH_SetMACConfig+0x38>
 80029de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029e2:	e000      	b.n	80029e6 <ETH_SetMACConfig+0x3a>
 80029e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	7fdb      	ldrb	r3, [r3, #31]
 80029f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80029f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	7f92      	ldrb	r2, [r2, #30]
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d102      	bne.n	8002a0a <ETH_SetMACConfig+0x5e>
 8002a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a08:	e000      	b.n	8002a0c <ETH_SetMACConfig+0x60>
 8002a0a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	7f1b      	ldrb	r3, [r3, #28]
 8002a12:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a14:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	791b      	ldrb	r3, [r3, #4]
 8002a20:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a2a:	2a00      	cmp	r2, #0
 8002a2c:	d102      	bne.n	8002a34 <ETH_SetMACConfig+0x88>
 8002a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a32:	e000      	b.n	8002a36 <ETH_SetMACConfig+0x8a>
 8002a34:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	7bdb      	ldrb	r3, [r3, #15]
 8002a3c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a3e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a4c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f7ff fe1a 	bl	80026a0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002a82:	4013      	ands	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002a92:	2a00      	cmp	r2, #0
 8002a94:	d101      	bne.n	8002a9a <ETH_SetMACConfig+0xee>
 8002a96:	2280      	movs	r2, #128	@ 0x80
 8002a98:	e000      	b.n	8002a9c <ETH_SetMACConfig+0xf0>
 8002a9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a9c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002aa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002aaa:	2a01      	cmp	r2, #1
 8002aac:	d101      	bne.n	8002ab2 <ETH_SetMACConfig+0x106>
 8002aae:	2208      	movs	r2, #8
 8002ab0:	e000      	b.n	8002ab4 <ETH_SetMACConfig+0x108>
 8002ab2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ab4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002abc:	2a01      	cmp	r2, #1
 8002abe:	d101      	bne.n	8002ac4 <ETH_SetMACConfig+0x118>
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	e000      	b.n	8002ac6 <ETH_SetMACConfig+0x11a>
 8002ac4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ac6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002ace:	2a01      	cmp	r2, #1
 8002ad0:	d101      	bne.n	8002ad6 <ETH_SetMACConfig+0x12a>
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	e000      	b.n	8002ad8 <ETH_SetMACConfig+0x12c>
 8002ad6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af0:	2001      	movs	r0, #1
 8002af2:	f7ff fdd5 	bl	80026a0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	ff20810f 	.word	0xff20810f

08002b0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <ETH_SetDMAConfig+0x110>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	7b1b      	ldrb	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <ETH_SetDMAConfig+0x2c>
 8002b32:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b36:	e000      	b.n	8002b3a <ETH_SetDMAConfig+0x2e>
 8002b38:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7b5b      	ldrb	r3, [r3, #13]
 8002b3e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b40:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	7f52      	ldrb	r2, [r2, #29]
 8002b46:	2a00      	cmp	r2, #0
 8002b48:	d102      	bne.n	8002b50 <ETH_SetDMAConfig+0x44>
 8002b4a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b4e:	e000      	b.n	8002b52 <ETH_SetDMAConfig+0x46>
 8002b50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	7b9b      	ldrb	r3, [r3, #14]
 8002b58:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b5a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	7f1b      	ldrb	r3, [r3, #28]
 8002b66:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	7f9b      	ldrb	r3, [r3, #30]
 8002b6e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b70:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b7e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b80:	4313      	orrs	r3, r2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b90:	461a      	mov	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7ff fd7c 	bl	80026a0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	791b      	ldrb	r3, [r3, #4]
 8002bba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bc0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002bc6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bcc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bd4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002bd6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bdc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bde:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002be4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bf2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7ff fd4d 	bl	80026a0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	f8de3f23 	.word	0xf8de3f23

08002c20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b0a6      	sub	sp, #152	@ 0x98
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c34:	2300      	movs	r3, #0
 8002c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c86:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c98:	4619      	mov	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fe86 	bl	80029ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cd4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cda:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ce0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ff08 	bl	8002b0c <ETH_SetDMAConfig>
}
 8002cfc:	bf00      	nop
 8002cfe:	3798      	adds	r7, #152	@ 0x98
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3305      	adds	r3, #5
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	3204      	adds	r2, #4
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <ETH_MACAddressConfig+0x68>)
 8002d26:	4413      	add	r3, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3303      	adds	r3, #3
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	061a      	lsls	r2, r3, #24
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3302      	adds	r3, #2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3301      	adds	r3, #1
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	7812      	ldrb	r2, [r2, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <ETH_MACAddressConfig+0x6c>)
 8002d56:	4413      	add	r3, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	6013      	str	r3, [r2, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40028040 	.word	0x40028040
 8002d70:	40028044 	.word	0x40028044

08002d74 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e03e      	b.n	8002e00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68d9      	ldr	r1, [r3, #12]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2200      	movs	r2, #0
 8002daa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	3206      	adds	r2, #6
 8002db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d80c      	bhi.n	8002de4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68d9      	ldr	r1, [r3, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	e004      	b.n	8002dee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	461a      	mov	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d9bd      	bls.n	8002d82 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e18:	611a      	str	r2, [r3, #16]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	e046      	b.n	8002ec2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6919      	ldr	r1, [r3, #16]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002e70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002e78:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	3212      	adds	r2, #18
 8002e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d80c      	bhi.n	8002eb2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6919      	ldr	r1, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	e004      	b.n	8002ebc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d9b5      	bls.n	8002e34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ef2:	60da      	str	r2, [r3, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	@ 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	e175      	b.n	800320c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f20:	2201      	movs	r2, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f040 8164 	bne.w	8003206 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d005      	beq.n	8002f56 <HAL_GPIO_Init+0x56>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d130      	bne.n	8002fb8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0201 	and.w	r2, r3, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d017      	beq.n	8002ff4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d123      	bne.n	8003048 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	69b9      	ldr	r1, [r7, #24]
 8003044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80be 	beq.w	8003206 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	4b66      	ldr	r3, [pc, #408]	@ (8003224 <HAL_GPIO_Init+0x324>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	4a65      	ldr	r2, [pc, #404]	@ (8003224 <HAL_GPIO_Init+0x324>)
 8003090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003094:	6453      	str	r3, [r2, #68]	@ 0x44
 8003096:	4b63      	ldr	r3, [pc, #396]	@ (8003224 <HAL_GPIO_Init+0x324>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030a2:	4a61      	ldr	r2, [pc, #388]	@ (8003228 <HAL_GPIO_Init+0x328>)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a58      	ldr	r2, [pc, #352]	@ (800322c <HAL_GPIO_Init+0x32c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d037      	beq.n	800313e <HAL_GPIO_Init+0x23e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a57      	ldr	r2, [pc, #348]	@ (8003230 <HAL_GPIO_Init+0x330>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d031      	beq.n	800313a <HAL_GPIO_Init+0x23a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a56      	ldr	r2, [pc, #344]	@ (8003234 <HAL_GPIO_Init+0x334>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02b      	beq.n	8003136 <HAL_GPIO_Init+0x236>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a55      	ldr	r2, [pc, #340]	@ (8003238 <HAL_GPIO_Init+0x338>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d025      	beq.n	8003132 <HAL_GPIO_Init+0x232>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a54      	ldr	r2, [pc, #336]	@ (800323c <HAL_GPIO_Init+0x33c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01f      	beq.n	800312e <HAL_GPIO_Init+0x22e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a53      	ldr	r2, [pc, #332]	@ (8003240 <HAL_GPIO_Init+0x340>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d019      	beq.n	800312a <HAL_GPIO_Init+0x22a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a52      	ldr	r2, [pc, #328]	@ (8003244 <HAL_GPIO_Init+0x344>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_GPIO_Init+0x226>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a51      	ldr	r2, [pc, #324]	@ (8003248 <HAL_GPIO_Init+0x348>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00d      	beq.n	8003122 <HAL_GPIO_Init+0x222>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a50      	ldr	r2, [pc, #320]	@ (800324c <HAL_GPIO_Init+0x34c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <HAL_GPIO_Init+0x21e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4f      	ldr	r2, [pc, #316]	@ (8003250 <HAL_GPIO_Init+0x350>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_GPIO_Init+0x21a>
 8003116:	2309      	movs	r3, #9
 8003118:	e012      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800311a:	230a      	movs	r3, #10
 800311c:	e010      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800311e:	2308      	movs	r3, #8
 8003120:	e00e      	b.n	8003140 <HAL_GPIO_Init+0x240>
 8003122:	2307      	movs	r3, #7
 8003124:	e00c      	b.n	8003140 <HAL_GPIO_Init+0x240>
 8003126:	2306      	movs	r3, #6
 8003128:	e00a      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800312a:	2305      	movs	r3, #5
 800312c:	e008      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800312e:	2304      	movs	r3, #4
 8003130:	e006      	b.n	8003140 <HAL_GPIO_Init+0x240>
 8003132:	2303      	movs	r3, #3
 8003134:	e004      	b.n	8003140 <HAL_GPIO_Init+0x240>
 8003136:	2302      	movs	r3, #2
 8003138:	e002      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800313e:	2300      	movs	r3, #0
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f002 0203 	and.w	r2, r2, #3
 8003146:	0092      	lsls	r2, r2, #2
 8003148:	4093      	lsls	r3, r2
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003150:	4935      	ldr	r1, [pc, #212]	@ (8003228 <HAL_GPIO_Init+0x328>)
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	3302      	adds	r3, #2
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b3d      	ldr	r3, [pc, #244]	@ (8003254 <HAL_GPIO_Init+0x354>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003182:	4a34      	ldr	r2, [pc, #208]	@ (8003254 <HAL_GPIO_Init+0x354>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003188:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <HAL_GPIO_Init+0x354>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ac:	4a29      	ldr	r2, [pc, #164]	@ (8003254 <HAL_GPIO_Init+0x354>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b2:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <HAL_GPIO_Init+0x354>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003254 <HAL_GPIO_Init+0x354>)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <HAL_GPIO_Init+0x354>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003200:	4a14      	ldr	r2, [pc, #80]	@ (8003254 <HAL_GPIO_Init+0x354>)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3301      	adds	r3, #1
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	f67f ae86 	bls.w	8002f20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	3724      	adds	r7, #36	@ 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	40013800 	.word	0x40013800
 800322c:	40020000 	.word	0x40020000
 8003230:	40020400 	.word	0x40020400
 8003234:	40020800 	.word	0x40020800
 8003238:	40020c00 	.word	0x40020c00
 800323c:	40021000 	.word	0x40021000
 8003240:	40021400 	.word	0x40021400
 8003244:	40021800 	.word	0x40021800
 8003248:	40021c00 	.word	0x40021c00
 800324c:	40022000 	.word	0x40022000
 8003250:	40022400 	.word	0x40022400
 8003254:	40013c00 	.word	0x40013c00

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800328a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328c:	b08f      	sub	sp, #60	@ 0x3c
 800328e:	af0a      	add	r7, sp, #40	@ 0x28
 8003290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e116      	b.n	80034ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff f8b8 	bl	800242c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2203      	movs	r2, #3
 80032c0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 f882 	bl	80053e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	687e      	ldr	r6, [r7, #4]
 80032e8:	466d      	mov	r5, sp
 80032ea:	f106 0410 	add.w	r4, r6, #16
 80032ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80032fe:	1d33      	adds	r3, r6, #4
 8003300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003302:	6838      	ldr	r0, [r7, #0]
 8003304:	f002 f816 	bl	8005334 <USB_CoreInit>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0d7      	b.n	80034ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f002 f870 	bl	8005406 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	e04a      	b.n	80033c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	333d      	adds	r3, #61	@ 0x3d
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	333c      	adds	r3, #60	@ 0x3c
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	b298      	uxth	r0, r3
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3344      	adds	r3, #68	@ 0x44
 8003368:	4602      	mov	r2, r0
 800336a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	3340      	adds	r3, #64	@ 0x40
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	3348      	adds	r3, #72	@ 0x48
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	334c      	adds	r3, #76	@ 0x4c
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3354      	adds	r3, #84	@ 0x54
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	3301      	adds	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d3af      	bcc.n	800332c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e044      	b.n	800345c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	3301      	adds	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d3b5      	bcc.n	80033d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	687e      	ldr	r6, [r7, #4]
 800346e:	466d      	mov	r5, sp
 8003470:	f106 0410 	add.w	r4, r6, #16
 8003474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800347a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800347c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003480:	e885 0003 	stmia.w	r5, {r0, r1}
 8003484:	1d33      	adds	r3, r6, #4
 8003486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003488:	6838      	ldr	r0, [r7, #0]
 800348a:	f002 f809 	bl	80054a0 <USB_DevInit>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e014      	b.n	80034ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d102      	bne.n	80034be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f80b 	bl	80034d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f002 f9c7 	bl	8005856 <USB_DevDisconnect>

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080034d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003502:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <HAL_PCDEx_ActivateLPM+0x44>)
 8003504:	4313      	orrs	r3, r2
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	10000003 	.word	0x10000003

0800351c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a04      	ldr	r2, [pc, #16]	@ (8003538 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352a:	6013      	str	r3, [r2, #0]
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40007000 	.word	0x40007000

0800353c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003546:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	4a22      	ldr	r2, [pc, #136]	@ (80035d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800354c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003550:	6413      	str	r3, [r2, #64]	@ 0x40
 8003552:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800355e:	4b1e      	ldr	r3, [pc, #120]	@ (80035d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1d      	ldr	r2, [pc, #116]	@ (80035d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800356a:	f7ff f88d 	bl	8002688 <HAL_GetTick>
 800356e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003570:	e009      	b.n	8003586 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003572:	f7ff f889 	bl	8002688 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003580:	d901      	bls.n	8003586 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e022      	b.n	80035cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003586:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003592:	d1ee      	bne.n	8003572 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003594:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0f      	ldr	r2, [pc, #60]	@ (80035d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800359a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035a0:	f7ff f872 	bl	8002688 <HAL_GetTick>
 80035a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a6:	e009      	b.n	80035bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035a8:	f7ff f86e 	bl	8002688 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035b6:	d901      	bls.n	80035bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e007      	b.n	80035cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035c8:	d1ee      	bne.n	80035a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40007000 	.word	0x40007000

080035dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035e4:	2300      	movs	r3, #0
 80035e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e29b      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8087 	beq.w	800370e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003600:	4b96      	ldr	r3, [pc, #600]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b04      	cmp	r3, #4
 800360a:	d00c      	beq.n	8003626 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360c:	4b93      	ldr	r3, [pc, #588]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d112      	bne.n	800363e <HAL_RCC_OscConfig+0x62>
 8003618:	4b90      	ldr	r3, [pc, #576]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003624:	d10b      	bne.n	800363e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003626:	4b8d      	ldr	r3, [pc, #564]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d06c      	beq.n	800370c <HAL_RCC_OscConfig+0x130>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d168      	bne.n	800370c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e275      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0x7a>
 8003648:	4b84      	ldr	r3, [pc, #528]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a83      	ldr	r2, [pc, #524]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800364e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	e02e      	b.n	80036b4 <HAL_RCC_OscConfig+0xd8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x9c>
 800365e:	4b7f      	ldr	r3, [pc, #508]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7e      	ldr	r2, [pc, #504]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b7c      	ldr	r3, [pc, #496]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a7b      	ldr	r2, [pc, #492]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003670:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e01d      	b.n	80036b4 <HAL_RCC_OscConfig+0xd8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0xc0>
 8003682:	4b76      	ldr	r3, [pc, #472]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a75      	ldr	r2, [pc, #468]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b73      	ldr	r3, [pc, #460]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a72      	ldr	r2, [pc, #456]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0xd8>
 800369c:	4b6f      	ldr	r3, [pc, #444]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a6e      	ldr	r2, [pc, #440]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b6c      	ldr	r3, [pc, #432]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a6b      	ldr	r2, [pc, #428]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe ffe4 	bl	8002688 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe ffe0 	bl	8002688 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	@ 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e229      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b61      	ldr	r3, [pc, #388]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0xe8>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe ffd0 	bl	8002688 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe ffcc 	bl	8002688 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	@ 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e215      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	4b57      	ldr	r3, [pc, #348]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x110>
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d069      	beq.n	80037ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800371a:	4b50      	ldr	r3, [pc, #320]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003726:	4b4d      	ldr	r3, [pc, #308]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b08      	cmp	r3, #8
 8003730:	d11c      	bne.n	800376c <HAL_RCC_OscConfig+0x190>
 8003732:	4b4a      	ldr	r3, [pc, #296]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d116      	bne.n	800376c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_RCC_OscConfig+0x17a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e1e9      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003756:	4b41      	ldr	r3, [pc, #260]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	493d      	ldr	r1, [pc, #244]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	e040      	b.n	80037ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d023      	beq.n	80037bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003774:	4b39      	ldr	r3, [pc, #228]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a38      	ldr	r2, [pc, #224]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe ff82 	bl	8002688 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003788:	f7fe ff7e 	bl	8002688 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e1c7      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379a:	4b30      	ldr	r3, [pc, #192]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	4b2d      	ldr	r3, [pc, #180]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4929      	ldr	r1, [pc, #164]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
 80037ba:	e018      	b.n	80037ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037bc:	4b27      	ldr	r3, [pc, #156]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a26      	ldr	r2, [pc, #152]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7fe ff5e 	bl	8002688 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d0:	f7fe ff5a 	bl	8002688 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1a3      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	4b1e      	ldr	r3, [pc, #120]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d038      	beq.n	800386c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d019      	beq.n	8003836 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003802:	4b16      	ldr	r3, [pc, #88]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003806:	4a15      	ldr	r2, [pc, #84]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fe ff3b 	bl	8002688 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003816:	f7fe ff37 	bl	8002688 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e180      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800382a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x23a>
 8003834:	e01a      	b.n	800386c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003836:	4b09      	ldr	r3, [pc, #36]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 8003838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383a:	4a08      	ldr	r2, [pc, #32]	@ (800385c <HAL_RCC_OscConfig+0x280>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003842:	f7fe ff21 	bl	8002688 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384a:	f7fe ff1d 	bl	8002688 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d903      	bls.n	8003860 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e166      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
 800385c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	4b92      	ldr	r3, [pc, #584]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ee      	bne.n	800384a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a4 	beq.w	80039c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387a:	4b8c      	ldr	r3, [pc, #560]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10d      	bne.n	80038a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003886:	4b89      	ldr	r3, [pc, #548]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	4a88      	ldr	r2, [pc, #544]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003890:	6413      	str	r3, [r2, #64]	@ 0x40
 8003892:	4b86      	ldr	r3, [pc, #536]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a2:	4b83      	ldr	r3, [pc, #524]	@ (8003ab0 <HAL_RCC_OscConfig+0x4d4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d118      	bne.n	80038e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038ae:	4b80      	ldr	r3, [pc, #512]	@ (8003ab0 <HAL_RCC_OscConfig+0x4d4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ab0 <HAL_RCC_OscConfig+0x4d4>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ba:	f7fe fee5 	bl	8002688 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c2:	f7fe fee1 	bl	8002688 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b64      	cmp	r3, #100	@ 0x64
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e12a      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d4:	4b76      	ldr	r3, [pc, #472]	@ (8003ab0 <HAL_RCC_OscConfig+0x4d4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d106      	bne.n	80038f6 <HAL_RCC_OscConfig+0x31a>
 80038e8:	4b70      	ldr	r3, [pc, #448]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ec:	4a6f      	ldr	r2, [pc, #444]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f4:	e02d      	b.n	8003952 <HAL_RCC_OscConfig+0x376>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0x33c>
 80038fe:	4b6b      	ldr	r3, [pc, #428]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003902:	4a6a      	ldr	r2, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6713      	str	r3, [r2, #112]	@ 0x70
 800390a:	4b68      	ldr	r3, [pc, #416]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390e:	4a67      	ldr	r2, [pc, #412]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	6713      	str	r3, [r2, #112]	@ 0x70
 8003916:	e01c      	b.n	8003952 <HAL_RCC_OscConfig+0x376>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b05      	cmp	r3, #5
 800391e:	d10c      	bne.n	800393a <HAL_RCC_OscConfig+0x35e>
 8003920:	4b62      	ldr	r3, [pc, #392]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a61      	ldr	r2, [pc, #388]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
 800392c:	4b5f      	ldr	r3, [pc, #380]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	4a5e      	ldr	r2, [pc, #376]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	@ 0x70
 8003938:	e00b      	b.n	8003952 <HAL_RCC_OscConfig+0x376>
 800393a:	4b5c      	ldr	r3, [pc, #368]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6713      	str	r3, [r2, #112]	@ 0x70
 8003946:	4b59      	ldr	r3, [pc, #356]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	4a58      	ldr	r2, [pc, #352]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 800394c:	f023 0304 	bic.w	r3, r3, #4
 8003950:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d015      	beq.n	8003986 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fe fe95 	bl	8002688 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	e00a      	b.n	8003978 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fe fe91 	bl	8002688 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e0d8      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003978:	4b4c      	ldr	r3, [pc, #304]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ee      	beq.n	8003962 <HAL_RCC_OscConfig+0x386>
 8003984:	e014      	b.n	80039b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe fe7f 	bl	8002688 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fe fe7b 	bl	8002688 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0c2      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a4:	4b41      	ldr	r3, [pc, #260]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ee      	bne.n	800398e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d105      	bne.n	80039c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b6:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	4a3c      	ldr	r2, [pc, #240]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 80039bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80ae 	beq.w	8003b28 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039cc:	4b37      	ldr	r3, [pc, #220]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 030c 	and.w	r3, r3, #12
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d06d      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d14b      	bne.n	8003a78 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e0:	4b32      	ldr	r3, [pc, #200]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a31      	ldr	r2, [pc, #196]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 80039e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe fe4c 	bl	8002688 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fe fe48 	bl	8002688 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e091      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	4b29      	ldr	r3, [pc, #164]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	071b      	lsls	r3, r3, #28
 8003a3e:	491b      	ldr	r1, [pc, #108]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a44:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a18      	ldr	r2, [pc, #96]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fe fe1a 	bl	8002688 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fe fe16 	bl	8002688 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e05f      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6a:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x47c>
 8003a76:	e057      	b.n	8003b28 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fe00 	bl	8002688 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe fdfc 	bl	8002688 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e045      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	4b03      	ldr	r3, [pc, #12]	@ (8003aac <HAL_RCC_OscConfig+0x4d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x4b0>
 8003aaa:	e03d      	b.n	8003b28 <HAL_RCC_OscConfig+0x54c>
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b34 <HAL_RCC_OscConfig+0x558>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d030      	beq.n	8003b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d129      	bne.n	8003b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d122      	bne.n	8003b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d119      	bne.n	8003b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	3b01      	subs	r3, #1
 8003afe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d10f      	bne.n	8003b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800

08003b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0d0      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b6a      	ldr	r3, [pc, #424]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d910      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b67      	ldr	r3, [pc, #412]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 020f 	bic.w	r2, r3, #15
 8003b66:	4965      	ldr	r1, [pc, #404]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b63      	ldr	r3, [pc, #396]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0b8      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b98:	4b59      	ldr	r3, [pc, #356]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a58      	ldr	r2, [pc, #352]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ba2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb0:	4b53      	ldr	r3, [pc, #332]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a52      	ldr	r2, [pc, #328]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b50      	ldr	r3, [pc, #320]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	494d      	ldr	r1, [pc, #308]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d040      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b47      	ldr	r3, [pc, #284]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d115      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e07f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b41      	ldr	r3, [pc, #260]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e073      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06b      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4936      	ldr	r1, [pc, #216]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c2c:	f7fe fd2c 	bl	8002688 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fe fd28 	bl	8002688 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e053      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d210      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 020f 	bic.w	r2, r3, #15
 8003c72:	4922      	ldr	r1, [pc, #136]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b20      	ldr	r3, [pc, #128]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e032      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c98:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4916      	ldr	r1, [pc, #88]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	490e      	ldr	r1, [pc, #56]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cca:	f000 f821 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	490a      	ldr	r1, [pc, #40]	@ (8003d04 <HAL_RCC_ClockConfig+0x1cc>)
 8003cdc:	5ccb      	ldrb	r3, [r1, r3]
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	4a09      	ldr	r2, [pc, #36]	@ (8003d08 <HAL_RCC_ClockConfig+0x1d0>)
 8003ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ce6:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <HAL_RCC_ClockConfig+0x1d4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fc88 	bl	8002600 <HAL_InitTick>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00
 8003d00:	40023800 	.word	0x40023800
 8003d04:	08008cb0 	.word	0x08008cb0
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	20000004 	.word	0x20000004

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b094      	sub	sp, #80	@ 0x50
 8003d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d20:	2300      	movs	r3, #0
 8003d22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d28:	4b79      	ldr	r3, [pc, #484]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d00d      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x40>
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	f200 80e1 	bhi.w	8003efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d42:	e0db      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b73      	ldr	r3, [pc, #460]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d48:	e0db      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4a:	4b73      	ldr	r3, [pc, #460]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d4e:	e0d8      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d50:	4b6f      	ldr	r3, [pc, #444]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d063      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d66:	4b6a      	ldr	r3, [pc, #424]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	f04f 0000 	mov.w	r0, #0
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	0159      	lsls	r1, r3, #5
 8003d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d94:	0150      	lsls	r0, r2, #5
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	1a51      	subs	r1, r2, r1
 8003d9e:	6139      	str	r1, [r7, #16]
 8003da0:	4629      	mov	r1, r5
 8003da2:	eb63 0301 	sbc.w	r3, r3, r1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003db4:	4659      	mov	r1, fp
 8003db6:	018b      	lsls	r3, r1, #6
 8003db8:	4651      	mov	r1, sl
 8003dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	018a      	lsls	r2, r1, #6
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8003dc8:	4659      	mov	r1, fp
 8003dca:	eb63 0901 	sbc.w	r9, r3, r1
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003de2:	4690      	mov	r8, r2
 8003de4:	4699      	mov	r9, r3
 8003de6:	4623      	mov	r3, r4
 8003de8:	eb18 0303 	adds.w	r3, r8, r3
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	462b      	mov	r3, r5
 8003df0:	eb49 0303 	adc.w	r3, r9, r3
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e02:	4629      	mov	r1, r5
 8003e04:	024b      	lsls	r3, r1, #9
 8003e06:	4621      	mov	r1, r4
 8003e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	024a      	lsls	r2, r1, #9
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e16:	2200      	movs	r2, #0
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e20:	f7fc fa58 	bl	80002d4 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4613      	mov	r3, r2
 8003e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e2c:	e058      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2e:	4b38      	ldr	r3, [pc, #224]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	099b      	lsrs	r3, r3, #6
 8003e34:	2200      	movs	r2, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	4611      	mov	r1, r2
 8003e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	f04f 0000 	mov.w	r0, #0
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	0159      	lsls	r1, r3, #5
 8003e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e5a:	0150      	lsls	r0, r2, #5
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4641      	mov	r1, r8
 8003e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e66:	4649      	mov	r1, r9
 8003e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e80:	ebb2 040a 	subs.w	r4, r2, sl
 8003e84:	eb63 050b 	sbc.w	r5, r3, fp
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	00eb      	lsls	r3, r5, #3
 8003e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e96:	00e2      	lsls	r2, r4, #3
 8003e98:	4614      	mov	r4, r2
 8003e9a:	461d      	mov	r5, r3
 8003e9c:	4643      	mov	r3, r8
 8003e9e:	18e3      	adds	r3, r4, r3
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	eb45 0303 	adc.w	r3, r5, r3
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	028b      	lsls	r3, r1, #10
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	028a      	lsls	r2, r1, #10
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	61fa      	str	r2, [r7, #28]
 8003ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ed4:	f7fc f9fe 	bl	80002d4 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4613      	mov	r3, r2
 8003ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	3301      	adds	r3, #1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003efe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3750      	adds	r7, #80	@ 0x50
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	007a1200 	.word	0x007a1200

08003f1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f20:	4b03      	ldr	r3, [pc, #12]	@ (8003f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000000 	.word	0x20000000

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f38:	f7ff fff0 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0a9b      	lsrs	r3, r3, #10
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	@ (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	08008cc0 	.word	0x08008cc0

08003f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f60:	f7ff ffdc 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0b5b      	lsrs	r3, r3, #13
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	@ (8003f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	08008cc0 	.word	0x08008cc0

08003f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d012      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fac:	4b69      	ldr	r3, [pc, #420]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a68      	ldr	r2, [pc, #416]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003fb6:	6093      	str	r3, [r2, #8]
 8003fb8:	4b66      	ldr	r3, [pc, #408]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	4964      	ldr	r1, [pc, #400]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d017      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fde:	4b5d      	ldr	r3, [pc, #372]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	4959      	ldr	r1, [pc, #356]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffc:	d101      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d017      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800401a:	4b4e      	ldr	r3, [pc, #312]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004020:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	494a      	ldr	r1, [pc, #296]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004038:	d101      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004046:	2301      	movs	r3, #1
 8004048:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 808b 	beq.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b3a      	ldr	r3, [pc, #232]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	4a39      	ldr	r2, [pc, #228]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004072:	6413      	str	r3, [r2, #64]	@ 0x40
 8004074:	4b37      	ldr	r3, [pc, #220]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004080:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a34      	ldr	r2, [pc, #208]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fe fafc 	bl	8002688 <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fe faf8 	bl	8002688 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	@ 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e38f      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b2:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d035      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d02e      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d0:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040da:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040f2:	4a18      	ldr	r2, [pc, #96]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040f8:	4b16      	ldr	r3, [pc, #88]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d114      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fac0 	bl	8002688 <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fe fabc 	bl	8002688 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e351      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ee      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800413a:	d111      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004148:	4b04      	ldr	r3, [pc, #16]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800414a:	400b      	ands	r3, r1
 800414c:	4901      	ldr	r1, [pc, #4]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
 8004152:	e00b      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004154:	40023800 	.word	0x40023800
 8004158:	40007000 	.word	0x40007000
 800415c:	0ffffcff 	.word	0x0ffffcff
 8004160:	4bac      	ldr	r3, [pc, #688]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4aab      	ldr	r2, [pc, #684]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004166:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	4ba9      	ldr	r3, [pc, #676]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	49a6      	ldr	r1, [pc, #664]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417a:	4313      	orrs	r3, r2
 800417c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d010      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800418a:	4ba2      	ldr	r3, [pc, #648]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004190:	4aa0      	ldr	r2, [pc, #640]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004196:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800419a:	4b9e      	ldr	r3, [pc, #632]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	499b      	ldr	r1, [pc, #620]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041b8:	4b96      	ldr	r3, [pc, #600]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041c6:	4993      	ldr	r1, [pc, #588]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041da:	4b8e      	ldr	r3, [pc, #568]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e8:	498a      	ldr	r1, [pc, #552]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041fc:	4b85      	ldr	r3, [pc, #532]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800420a:	4982      	ldr	r1, [pc, #520]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800421e:	4b7d      	ldr	r3, [pc, #500]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004224:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422c:	4979      	ldr	r1, [pc, #484]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004240:	4b74      	ldr	r3, [pc, #464]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	4971      	ldr	r1, [pc, #452]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004262:	4b6c      	ldr	r3, [pc, #432]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004268:	f023 020c 	bic.w	r2, r3, #12
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004270:	4968      	ldr	r1, [pc, #416]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004284:	4b63      	ldr	r3, [pc, #396]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	4960      	ldr	r1, [pc, #384]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b4:	4957      	ldr	r1, [pc, #348]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042c8:	4b52      	ldr	r3, [pc, #328]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	494f      	ldr	r1, [pc, #316]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	4946      	ldr	r1, [pc, #280]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800430c:	4b41      	ldr	r3, [pc, #260]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004312:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431a:	493e      	ldr	r1, [pc, #248]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800432e:	4b39      	ldr	r3, [pc, #228]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004334:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433c:	4935      	ldr	r1, [pc, #212]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004350:	4b30      	ldr	r3, [pc, #192]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004356:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800435e:	492d      	ldr	r1, [pc, #180]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004372:	4b28      	ldr	r3, [pc, #160]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004378:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004380:	4924      	ldr	r1, [pc, #144]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800438c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004390:	d101      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004392:	2301      	movs	r3, #1
 8004394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043b2:	4b18      	ldr	r3, [pc, #96]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c0:	4914      	ldr	r1, [pc, #80]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00b      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e4:	490b      	ldr	r1, [pc, #44]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00f      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004408:	4902      	ldr	r1, [pc, #8]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004410:	e002      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00b      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004424:	4b8a      	ldr	r3, [pc, #552]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800442a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	4986      	ldr	r1, [pc, #536]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004448:	4b81      	ldr	r3, [pc, #516]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800444e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004458:	497d      	ldr	r1, [pc, #500]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d006      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80d6 	beq.w	8004620 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004474:	4b76      	ldr	r3, [pc, #472]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a75      	ldr	r2, [pc, #468]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800447a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800447e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004480:	f7fe f902 	bl	8002688 <HAL_GetTick>
 8004484:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004488:	f7fe f8fe 	bl	8002688 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	@ 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e195      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800449a:	4b6d      	ldr	r3, [pc, #436]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d021      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11d      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044ba:	4b65      	ldr	r3, [pc, #404]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044c8:	4b61      	ldr	r3, [pc, #388]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ce:	0e1b      	lsrs	r3, r3, #24
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	019a      	lsls	r2, r3, #6
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	431a      	orrs	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	071b      	lsls	r3, r3, #28
 80044ee:	4958      	ldr	r1, [pc, #352]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004514:	2b00      	cmp	r3, #0
 8004516:	d02e      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004520:	d129      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004522:	4b4b      	ldr	r3, [pc, #300]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004530:	4b47      	ldr	r3, [pc, #284]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004536:	0f1b      	lsrs	r3, r3, #28
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	019a      	lsls	r2, r3, #6
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	041b      	lsls	r3, r3, #16
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	071b      	lsls	r3, r3, #28
 8004556:	493e      	ldr	r1, [pc, #248]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800455e:	4b3c      	ldr	r3, [pc, #240]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004564:	f023 021f 	bic.w	r2, r3, #31
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	3b01      	subs	r3, #1
 800456e:	4938      	ldr	r1, [pc, #224]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01d      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004582:	4b33      	ldr	r3, [pc, #204]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004588:	0e1b      	lsrs	r3, r3, #24
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004590:	4b2f      	ldr	r3, [pc, #188]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004596:	0f1b      	lsrs	r3, r3, #28
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	019a      	lsls	r2, r3, #6
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	431a      	orrs	r2, r3
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	4926      	ldr	r1, [pc, #152]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d011      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	019a      	lsls	r2, r3, #6
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	071b      	lsls	r3, r3, #28
 80045e6:	491a      	ldr	r1, [pc, #104]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045ee:	4b18      	ldr	r3, [pc, #96]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fa:	f7fe f845 	bl	8002688 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004602:	f7fe f841 	bl	8002688 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b64      	cmp	r3, #100	@ 0x64
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0d8      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b01      	cmp	r3, #1
 8004624:	f040 80ce 	bne.w	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004628:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a08      	ldr	r2, [pc, #32]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800462e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fe f828 	bl	8002688 <HAL_GetTick>
 8004638:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800463a:	e00b      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800463c:	f7fe f824 	bl	8002688 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	@ 0x64
 8004648:	d904      	bls.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e0bb      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004654:	4b5e      	ldr	r3, [pc, #376]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800465c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004660:	d0ec      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02e      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d12a      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800468a:	4b51      	ldr	r3, [pc, #324]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004698:	4b4d      	ldr	r3, [pc, #308]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469e:	0f1b      	lsrs	r3, r3, #28
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	019a      	lsls	r2, r3, #6
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	061b      	lsls	r3, r3, #24
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	071b      	lsls	r3, r3, #28
 80046be:	4944      	ldr	r1, [pc, #272]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046c6:	4b42      	ldr	r3, [pc, #264]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	3b01      	subs	r3, #1
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	493d      	ldr	r1, [pc, #244]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d022      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046f4:	d11d      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046f6:	4b36      	ldr	r3, [pc, #216]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	0e1b      	lsrs	r3, r3, #24
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004704:	4b32      	ldr	r3, [pc, #200]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470a:	0f1b      	lsrs	r3, r3, #28
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	019a      	lsls	r2, r3, #6
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	431a      	orrs	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	071b      	lsls	r3, r3, #28
 800472a:	4929      	ldr	r1, [pc, #164]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d028      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800473e:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004744:	0e1b      	lsrs	r3, r3, #24
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800474c:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004752:	0c1b      	lsrs	r3, r3, #16
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	019a      	lsls	r2, r3, #6
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	431a      	orrs	r2, r3
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	061b      	lsls	r3, r3, #24
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	071b      	lsls	r3, r3, #28
 8004772:	4917      	ldr	r1, [pc, #92]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800477a:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800477c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004780:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	4911      	ldr	r1, [pc, #68]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004790:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0e      	ldr	r2, [pc, #56]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479c:	f7fd ff74 	bl	8002688 <HAL_GetTick>
 80047a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047a4:	f7fd ff70 	bl	8002688 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b64      	cmp	r3, #100	@ 0x64
 80047b0:	d901      	bls.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e007      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047b6:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047c2:	d1ef      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800

080047d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e040      	b.n	8004868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd fd2e 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2224      	movs	r2, #36	@ 0x24
 8004800:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f974 	bl	8004b00 <UART_SetConfig>
 8004818:	4603      	mov	r3, r0
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e022      	b.n	8004868 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fbcc 	bl	8004fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800483e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800484e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fc53 	bl	800510c <UART_CheckIdleState>
 8004866:	4603      	mov	r3, r0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004884:	2b20      	cmp	r3, #32
 8004886:	d171      	bne.n	800496c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Transmit+0x24>
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e06a      	b.n	800496e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2221      	movs	r2, #33	@ 0x21
 80048a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a6:	f7fd feef 	bl	8002688 <HAL_GetTick>
 80048aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c4:	d108      	bne.n	80048d8 <HAL_UART_Transmit+0x68>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	e003      	b.n	80048e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048e0:	e02c      	b.n	800493c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2180      	movs	r1, #128	@ 0x80
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fc5a 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e038      	b.n	800496e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10b      	bne.n	800491a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004910:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	3302      	adds	r3, #2
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	e007      	b.n	800492a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	3301      	adds	r3, #1
 8004928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1cc      	bne.n	80048e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	2140      	movs	r1, #64	@ 0x40
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 fc27 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e005      	b.n	800496e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2220      	movs	r2, #32
 8004966:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	e000      	b.n	800496e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08a      	sub	sp, #40	@ 0x28
 800497a:	af02      	add	r7, sp, #8
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800498c:	2b20      	cmp	r3, #32
 800498e:	f040 80b1 	bne.w	8004af4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <HAL_UART_Receive+0x28>
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e0a9      	b.n	8004af6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2222      	movs	r2, #34	@ 0x22
 80049ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b8:	f7fd fe66 	bl	8002688 <HAL_GetTick>
 80049bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d6:	d10e      	bne.n	80049f6 <HAL_UART_Receive+0x80>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_UART_Receive+0x76>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80049e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80049ea:	e02d      	b.n	8004a48 <HAL_UART_Receive+0xd2>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	22ff      	movs	r2, #255	@ 0xff
 80049f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80049f4:	e028      	b.n	8004a48 <HAL_UART_Receive+0xd2>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <HAL_UART_Receive+0xa4>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <HAL_UART_Receive+0x9a>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	22ff      	movs	r2, #255	@ 0xff
 8004a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a0e:	e01b      	b.n	8004a48 <HAL_UART_Receive+0xd2>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	227f      	movs	r2, #127	@ 0x7f
 8004a14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a18:	e016      	b.n	8004a48 <HAL_UART_Receive+0xd2>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a22:	d10d      	bne.n	8004a40 <HAL_UART_Receive+0xca>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_UART_Receive+0xc0>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	227f      	movs	r2, #127	@ 0x7f
 8004a30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a34:	e008      	b.n	8004a48 <HAL_UART_Receive+0xd2>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	223f      	movs	r2, #63	@ 0x3f
 8004a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a3e:	e003      	b.n	8004a48 <HAL_UART_Receive+0xd2>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a4e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a58:	d108      	bne.n	8004a6c <HAL_UART_Receive+0xf6>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d104      	bne.n	8004a6c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	e003      	b.n	8004a74 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a74:	e032      	b.n	8004adc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2120      	movs	r1, #32
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fb90 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e032      	b.n	8004af6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10c      	bne.n	8004ab0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	8a7b      	ldrh	r3, [r7, #18]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	3302      	adds	r3, #2
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	e00c      	b.n	8004aca <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	8a7b      	ldrh	r3, [r7, #18]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	4013      	ands	r3, r2
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1c6      	bne.n	8004a76 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4ba6      	ldr	r3, [pc, #664]	@ (8004dc4 <UART_SetConfig+0x2c4>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	6979      	ldr	r1, [r7, #20]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a94      	ldr	r2, [pc, #592]	@ (8004dc8 <UART_SetConfig+0x2c8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d120      	bne.n	8004bbe <UART_SetConfig+0xbe>
 8004b7c:	4b93      	ldr	r3, [pc, #588]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d816      	bhi.n	8004bb8 <UART_SetConfig+0xb8>
 8004b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <UART_SetConfig+0x90>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bad 	.word	0x08004bad
 8004b98:	08004ba7 	.word	0x08004ba7
 8004b9c:	08004bb3 	.word	0x08004bb3
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e150      	b.n	8004e48 <UART_SetConfig+0x348>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	e14d      	b.n	8004e48 <UART_SetConfig+0x348>
 8004bac:	2304      	movs	r3, #4
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e14a      	b.n	8004e48 <UART_SetConfig+0x348>
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	77fb      	strb	r3, [r7, #31]
 8004bb6:	e147      	b.n	8004e48 <UART_SetConfig+0x348>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e144      	b.n	8004e48 <UART_SetConfig+0x348>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a83      	ldr	r2, [pc, #524]	@ (8004dd0 <UART_SetConfig+0x2d0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d132      	bne.n	8004c2e <UART_SetConfig+0x12e>
 8004bc8:	4b80      	ldr	r3, [pc, #512]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d828      	bhi.n	8004c28 <UART_SetConfig+0x128>
 8004bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <UART_SetConfig+0xdc>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004c11 	.word	0x08004c11
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c1d 	.word	0x08004c1d
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004c29 	.word	0x08004c29
 8004bfc:	08004c17 	.word	0x08004c17
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c29 	.word	0x08004c29
 8004c0c:	08004c23 	.word	0x08004c23
 8004c10:	2300      	movs	r3, #0
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e118      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c16:	2302      	movs	r3, #2
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e115      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e112      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c22:	2308      	movs	r3, #8
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e10f      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e10c      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a68      	ldr	r2, [pc, #416]	@ (8004dd4 <UART_SetConfig+0x2d4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d120      	bne.n	8004c7a <UART_SetConfig+0x17a>
 8004c38:	4b64      	ldr	r3, [pc, #400]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c42:	2b30      	cmp	r3, #48	@ 0x30
 8004c44:	d013      	beq.n	8004c6e <UART_SetConfig+0x16e>
 8004c46:	2b30      	cmp	r3, #48	@ 0x30
 8004c48:	d814      	bhi.n	8004c74 <UART_SetConfig+0x174>
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d009      	beq.n	8004c62 <UART_SetConfig+0x162>
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d810      	bhi.n	8004c74 <UART_SetConfig+0x174>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <UART_SetConfig+0x15c>
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d006      	beq.n	8004c68 <UART_SetConfig+0x168>
 8004c5a:	e00b      	b.n	8004c74 <UART_SetConfig+0x174>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e0f2      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e0ef      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e0ec      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e0e9      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e0e6      	b.n	8004e48 <UART_SetConfig+0x348>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a56      	ldr	r2, [pc, #344]	@ (8004dd8 <UART_SetConfig+0x2d8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d120      	bne.n	8004cc6 <UART_SetConfig+0x1c6>
 8004c84:	4b51      	ldr	r3, [pc, #324]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c90:	d013      	beq.n	8004cba <UART_SetConfig+0x1ba>
 8004c92:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c94:	d814      	bhi.n	8004cc0 <UART_SetConfig+0x1c0>
 8004c96:	2b80      	cmp	r3, #128	@ 0x80
 8004c98:	d009      	beq.n	8004cae <UART_SetConfig+0x1ae>
 8004c9a:	2b80      	cmp	r3, #128	@ 0x80
 8004c9c:	d810      	bhi.n	8004cc0 <UART_SetConfig+0x1c0>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <UART_SetConfig+0x1a8>
 8004ca2:	2b40      	cmp	r3, #64	@ 0x40
 8004ca4:	d006      	beq.n	8004cb4 <UART_SetConfig+0x1b4>
 8004ca6:	e00b      	b.n	8004cc0 <UART_SetConfig+0x1c0>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	77fb      	strb	r3, [r7, #31]
 8004cac:	e0cc      	b.n	8004e48 <UART_SetConfig+0x348>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	e0c9      	b.n	8004e48 <UART_SetConfig+0x348>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e0c6      	b.n	8004e48 <UART_SetConfig+0x348>
 8004cba:	2308      	movs	r3, #8
 8004cbc:	77fb      	strb	r3, [r7, #31]
 8004cbe:	e0c3      	b.n	8004e48 <UART_SetConfig+0x348>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e0c0      	b.n	8004e48 <UART_SetConfig+0x348>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a44      	ldr	r2, [pc, #272]	@ (8004ddc <UART_SetConfig+0x2dc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d125      	bne.n	8004d1c <UART_SetConfig+0x21c>
 8004cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cde:	d017      	beq.n	8004d10 <UART_SetConfig+0x210>
 8004ce0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ce4:	d817      	bhi.n	8004d16 <UART_SetConfig+0x216>
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cea:	d00b      	beq.n	8004d04 <UART_SetConfig+0x204>
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf0:	d811      	bhi.n	8004d16 <UART_SetConfig+0x216>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <UART_SetConfig+0x1fe>
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cfa:	d006      	beq.n	8004d0a <UART_SetConfig+0x20a>
 8004cfc:	e00b      	b.n	8004d16 <UART_SetConfig+0x216>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e0a1      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d04:	2302      	movs	r3, #2
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e09e      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e09b      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d10:	2308      	movs	r3, #8
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e098      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d16:	2310      	movs	r3, #16
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e095      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2f      	ldr	r2, [pc, #188]	@ (8004de0 <UART_SetConfig+0x2e0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d125      	bne.n	8004d72 <UART_SetConfig+0x272>
 8004d26:	4b29      	ldr	r3, [pc, #164]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d34:	d017      	beq.n	8004d66 <UART_SetConfig+0x266>
 8004d36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d3a:	d817      	bhi.n	8004d6c <UART_SetConfig+0x26c>
 8004d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d40:	d00b      	beq.n	8004d5a <UART_SetConfig+0x25a>
 8004d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d46:	d811      	bhi.n	8004d6c <UART_SetConfig+0x26c>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <UART_SetConfig+0x254>
 8004d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d50:	d006      	beq.n	8004d60 <UART_SetConfig+0x260>
 8004d52:	e00b      	b.n	8004d6c <UART_SetConfig+0x26c>
 8004d54:	2301      	movs	r3, #1
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e076      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	77fb      	strb	r3, [r7, #31]
 8004d5e:	e073      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d60:	2304      	movs	r3, #4
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e070      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d66:	2308      	movs	r3, #8
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e06d      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e06a      	b.n	8004e48 <UART_SetConfig+0x348>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1b      	ldr	r2, [pc, #108]	@ (8004de4 <UART_SetConfig+0x2e4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d138      	bne.n	8004dee <UART_SetConfig+0x2ee>
 8004d7c:	4b13      	ldr	r3, [pc, #76]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d82:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004d86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d8a:	d017      	beq.n	8004dbc <UART_SetConfig+0x2bc>
 8004d8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d90:	d82a      	bhi.n	8004de8 <UART_SetConfig+0x2e8>
 8004d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d96:	d00b      	beq.n	8004db0 <UART_SetConfig+0x2b0>
 8004d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9c:	d824      	bhi.n	8004de8 <UART_SetConfig+0x2e8>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <UART_SetConfig+0x2aa>
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da6:	d006      	beq.n	8004db6 <UART_SetConfig+0x2b6>
 8004da8:	e01e      	b.n	8004de8 <UART_SetConfig+0x2e8>
 8004daa:	2300      	movs	r3, #0
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e04b      	b.n	8004e48 <UART_SetConfig+0x348>
 8004db0:	2302      	movs	r3, #2
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e048      	b.n	8004e48 <UART_SetConfig+0x348>
 8004db6:	2304      	movs	r3, #4
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e045      	b.n	8004e48 <UART_SetConfig+0x348>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e042      	b.n	8004e48 <UART_SetConfig+0x348>
 8004dc2:	bf00      	nop
 8004dc4:	efff69f3 	.word	0xefff69f3
 8004dc8:	40011000 	.word	0x40011000
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	40004400 	.word	0x40004400
 8004dd4:	40004800 	.word	0x40004800
 8004dd8:	40004c00 	.word	0x40004c00
 8004ddc:	40005000 	.word	0x40005000
 8004de0:	40011400 	.word	0x40011400
 8004de4:	40007800 	.word	0x40007800
 8004de8:	2310      	movs	r3, #16
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e02c      	b.n	8004e48 <UART_SetConfig+0x348>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a72      	ldr	r2, [pc, #456]	@ (8004fbc <UART_SetConfig+0x4bc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d125      	bne.n	8004e44 <UART_SetConfig+0x344>
 8004df8:	4b71      	ldr	r3, [pc, #452]	@ (8004fc0 <UART_SetConfig+0x4c0>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004e02:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e06:	d017      	beq.n	8004e38 <UART_SetConfig+0x338>
 8004e08:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e0c:	d817      	bhi.n	8004e3e <UART_SetConfig+0x33e>
 8004e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e12:	d00b      	beq.n	8004e2c <UART_SetConfig+0x32c>
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e18:	d811      	bhi.n	8004e3e <UART_SetConfig+0x33e>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <UART_SetConfig+0x326>
 8004e1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e22:	d006      	beq.n	8004e32 <UART_SetConfig+0x332>
 8004e24:	e00b      	b.n	8004e3e <UART_SetConfig+0x33e>
 8004e26:	2300      	movs	r3, #0
 8004e28:	77fb      	strb	r3, [r7, #31]
 8004e2a:	e00d      	b.n	8004e48 <UART_SetConfig+0x348>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e00a      	b.n	8004e48 <UART_SetConfig+0x348>
 8004e32:	2304      	movs	r3, #4
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e007      	b.n	8004e48 <UART_SetConfig+0x348>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e004      	b.n	8004e48 <UART_SetConfig+0x348>
 8004e3e:	2310      	movs	r3, #16
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e001      	b.n	8004e48 <UART_SetConfig+0x348>
 8004e44:	2310      	movs	r3, #16
 8004e46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e50:	d15b      	bne.n	8004f0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e52:	7ffb      	ldrb	r3, [r7, #31]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d828      	bhi.n	8004eaa <UART_SetConfig+0x3aa>
 8004e58:	a201      	add	r2, pc, #4	@ (adr r2, 8004e60 <UART_SetConfig+0x360>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	08004eab 	.word	0x08004eab
 8004e70:	08004e9b 	.word	0x08004e9b
 8004e74:	08004eab 	.word	0x08004eab
 8004e78:	08004eab 	.word	0x08004eab
 8004e7c:	08004eab 	.word	0x08004eab
 8004e80:	08004ea3 	.word	0x08004ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7ff f856 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8004e88:	61b8      	str	r0, [r7, #24]
        break;
 8004e8a:	e013      	b.n	8004eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e8c:	f7ff f866 	bl	8003f5c <HAL_RCC_GetPCLK2Freq>
 8004e90:	61b8      	str	r0, [r7, #24]
        break;
 8004e92:	e00f      	b.n	8004eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e94:	4b4b      	ldr	r3, [pc, #300]	@ (8004fc4 <UART_SetConfig+0x4c4>)
 8004e96:	61bb      	str	r3, [r7, #24]
        break;
 8004e98:	e00c      	b.n	8004eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9a:	f7fe ff39 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8004e9e:	61b8      	str	r0, [r7, #24]
        break;
 8004ea0:	e008      	b.n	8004eb4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ea6:	61bb      	str	r3, [r7, #24]
        break;
 8004ea8:	e004      	b.n	8004eb4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	77bb      	strb	r3, [r7, #30]
        break;
 8004eb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d074      	beq.n	8004fa4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	005a      	lsls	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	441a      	add	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b0f      	cmp	r3, #15
 8004ed4:	d916      	bls.n	8004f04 <UART_SetConfig+0x404>
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004edc:	d212      	bcs.n	8004f04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f023 030f 	bic.w	r3, r3, #15
 8004ee6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	89fb      	ldrh	r3, [r7, #14]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	89fa      	ldrh	r2, [r7, #14]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	e04f      	b.n	8004fa4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	77bb      	strb	r3, [r7, #30]
 8004f08:	e04c      	b.n	8004fa4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f0a:	7ffb      	ldrb	r3, [r7, #31]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d828      	bhi.n	8004f62 <UART_SetConfig+0x462>
 8004f10:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <UART_SetConfig+0x418>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f3d 	.word	0x08004f3d
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f4d 	.word	0x08004f4d
 8004f24:	08004f63 	.word	0x08004f63
 8004f28:	08004f53 	.word	0x08004f53
 8004f2c:	08004f63 	.word	0x08004f63
 8004f30:	08004f63 	.word	0x08004f63
 8004f34:	08004f63 	.word	0x08004f63
 8004f38:	08004f5b 	.word	0x08004f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3c:	f7fe fffa 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8004f40:	61b8      	str	r0, [r7, #24]
        break;
 8004f42:	e013      	b.n	8004f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f44:	f7ff f80a 	bl	8003f5c <HAL_RCC_GetPCLK2Freq>
 8004f48:	61b8      	str	r0, [r7, #24]
        break;
 8004f4a:	e00f      	b.n	8004f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc4 <UART_SetConfig+0x4c4>)
 8004f4e:	61bb      	str	r3, [r7, #24]
        break;
 8004f50:	e00c      	b.n	8004f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f52:	f7fe fedd 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8004f56:	61b8      	str	r0, [r7, #24]
        break;
 8004f58:	e008      	b.n	8004f6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5e:	61bb      	str	r3, [r7, #24]
        break;
 8004f60:	e004      	b.n	8004f6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	77bb      	strb	r3, [r7, #30]
        break;
 8004f6a:	bf00      	nop
    }

    if (pclk != 0U)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d018      	beq.n	8004fa4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	085a      	lsrs	r2, r3, #1
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	441a      	add	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	d909      	bls.n	8004fa0 <UART_SetConfig+0x4a0>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f92:	d205      	bcs.n	8004fa0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	e001      	b.n	8004fa4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004fb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40007c00 	.word	0x40007c00
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	00f42400 	.word	0x00f42400

08004fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01a      	beq.n	80050de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c6:	d10a      	bne.n	80050de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800511c:	f7fd fab4 	bl	8002688 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b08      	cmp	r3, #8
 800512e:	d10e      	bne.n	800514e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005130:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f831 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e027      	b.n	800519e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b04      	cmp	r3, #4
 800515a:	d10e      	bne.n	800517a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800515c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f81b 	bl	80051a6 <UART_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e011      	b.n	800519e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b09c      	sub	sp, #112	@ 0x70
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	4613      	mov	r3, r2
 80051b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b6:	e0a7      	b.n	8005308 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	f000 80a3 	beq.w	8005308 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fd fa61 	bl	8002688 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80051d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d13f      	bne.n	8005258 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80051e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80051ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80051fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e6      	bne.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	663b      	str	r3, [r7, #96]	@ 0x60
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800522a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800522c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005230:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e068      	b.n	800532a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d050      	beq.n	8005308 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005274:	d148      	bne.n	8005308 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800527e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005294:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800529e:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80052ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e6      	bne.n	8005280 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	613b      	str	r3, [r7, #16]
   return(result);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3308      	adds	r3, #8
 80052d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80052d2:	623a      	str	r2, [r7, #32]
 80052d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	69f9      	ldr	r1, [r7, #28]
 80052d8:	6a3a      	ldr	r2, [r7, #32]
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	61bb      	str	r3, [r7, #24]
   return(result);
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e5      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e010      	b.n	800532a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69da      	ldr	r2, [r3, #28]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	429a      	cmp	r2, r3
 8005316:	bf0c      	ite	eq
 8005318:	2301      	moveq	r3, #1
 800531a:	2300      	movne	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	429a      	cmp	r2, r3
 8005324:	f43f af48 	beq.w	80051b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3770      	adds	r7, #112	@ 0x70
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005334:	b084      	sub	sp, #16
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	f107 001c 	add.w	r0, r7, #28
 8005342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	2b01      	cmp	r3, #1
 800534a:	d120      	bne.n	800538e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	4b20      	ldr	r3, [pc, #128]	@ (80053e0 <USB_CoreInit+0xac>)
 800535e:	4013      	ands	r3, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005372:	2b01      	cmp	r3, #1
 8005374:	d105      	bne.n	8005382 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa96 	bl	80058b4 <USB_CoreReset>
 8005388:	4603      	mov	r3, r0
 800538a:	73fb      	strb	r3, [r7, #15]
 800538c:	e010      	b.n	80053b0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa8a 	bl	80058b4 <USB_CoreReset>
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d10b      	bne.n	80053ce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f043 0206 	orr.w	r2, r3, #6
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053da:	b004      	add	sp, #16
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	ffbdffbf 	.word	0xffbdffbf

080053e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f023 0201 	bic.w	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d115      	bne.n	8005454 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005434:	2001      	movs	r0, #1
 8005436:	f7fd f933 	bl	80026a0 <HAL_Delay>
      ms++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3301      	adds	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fa29 	bl	8005898 <USB_GetMode>
 8005446:	4603      	mov	r3, r0
 8005448:	2b01      	cmp	r3, #1
 800544a:	d01e      	beq.n	800548a <USB_SetCurrentMode+0x84>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b31      	cmp	r3, #49	@ 0x31
 8005450:	d9f0      	bls.n	8005434 <USB_SetCurrentMode+0x2e>
 8005452:	e01a      	b.n	800548a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d115      	bne.n	8005486 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005466:	2001      	movs	r0, #1
 8005468:	f7fd f91a 	bl	80026a0 <HAL_Delay>
      ms++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3301      	adds	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa10 	bl	8005898 <USB_GetMode>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <USB_SetCurrentMode+0x84>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b31      	cmp	r3, #49	@ 0x31
 8005482:	d9f0      	bls.n	8005466 <USB_SetCurrentMode+0x60>
 8005484:	e001      	b.n	800548a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e005      	b.n	8005496 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b32      	cmp	r3, #50	@ 0x32
 800548e:	d101      	bne.n	8005494 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a0:	b084      	sub	sp, #16
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80054ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e009      	b.n	80054d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	3340      	adds	r3, #64	@ 0x40
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	2200      	movs	r2, #0
 80054cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3301      	adds	r3, #1
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b0e      	cmp	r3, #14
 80054d8:	d9f2      	bls.n	80054c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11c      	bne.n	800551a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054ee:	f043 0302 	orr.w	r3, r3, #2
 80054f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	e005      	b.n	8005526 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800552c:	461a      	mov	r2, r3
 800552e:	2300      	movs	r3, #0
 8005530:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005538:	4619      	mov	r1, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005540:	461a      	mov	r2, r3
 8005542:	680b      	ldr	r3, [r1, #0]
 8005544:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10c      	bne.n	8005566 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005552:	2100      	movs	r1, #0
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f965 	bl	8005824 <USB_SetDevSpeed>
 800555a:	e008      	b.n	800556e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800555c:	2101      	movs	r1, #1
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f960 	bl	8005824 <USB_SetDevSpeed>
 8005564:	e003      	b.n	800556e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005566:	2103      	movs	r1, #3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f95b 	bl	8005824 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800556e:	2110      	movs	r1, #16
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8f3 	bl	800575c <USB_FlushTxFifo>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f91f 	bl	80057c4 <USB_FlushRxFifo>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005596:	461a      	mov	r2, r3
 8005598:	2300      	movs	r3, #0
 800559a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a2:	461a      	mov	r2, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ae:	461a      	mov	r2, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	e043      	b.n	8005642 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055d0:	d118      	bne.n	8005604 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e4:	461a      	mov	r2, r3
 80055e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	e013      	b.n	8005616 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055fa:	461a      	mov	r2, r3
 80055fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e008      	b.n	8005616 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005610:	461a      	mov	r2, r3
 8005612:	2300      	movs	r3, #0
 8005614:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005622:	461a      	mov	r2, r3
 8005624:	2300      	movs	r3, #0
 8005626:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005634:	461a      	mov	r2, r3
 8005636:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800563a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	3301      	adds	r3, #1
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	429a      	cmp	r2, r3
 8005648:	d3b7      	bcc.n	80055ba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e043      	b.n	80056d8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005662:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005666:	d118      	bne.n	800569a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567a:	461a      	mov	r2, r3
 800567c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e013      	b.n	80056ac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005690:	461a      	mov	r2, r3
 8005692:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e008      	b.n	80056ac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a6:	461a      	mov	r2, r3
 80056a8:	2300      	movs	r3, #0
 80056aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b8:	461a      	mov	r2, r3
 80056ba:	2300      	movs	r3, #0
 80056bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ca:	461a      	mov	r2, r3
 80056cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3301      	adds	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d3b7      	bcc.n	8005650 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005700:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	f043 0210 	orr.w	r2, r3, #16
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	4b0e      	ldr	r3, [pc, #56]	@ (8005754 <USB_DevInit+0x2b4>)
 800571a:	4313      	orrs	r3, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f043 0208 	orr.w	r2, r3, #8
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d105      	bne.n	8005744 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <USB_DevInit+0x2b8>)
 800573e:	4313      	orrs	r3, r2
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005750:	b004      	add	sp, #16
 8005752:	4770      	bx	lr
 8005754:	803c3800 	.word	0x803c3800
 8005758:	40000004 	.word	0x40000004

0800575c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a13      	ldr	r2, [pc, #76]	@ (80057c0 <USB_FlushTxFifo+0x64>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e01b      	b.n	80057b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	daf2      	bge.n	800576a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	019b      	lsls	r3, r3, #6
 800578c:	f043 0220 	orr.w	r2, r3, #32
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3301      	adds	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4a08      	ldr	r2, [pc, #32]	@ (80057c0 <USB_FlushTxFifo+0x64>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e006      	b.n	80057b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d0f0      	beq.n	8005794 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	00030d40 	.word	0x00030d40

080057c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3301      	adds	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a11      	ldr	r2, [pc, #68]	@ (8005820 <USB_FlushRxFifo+0x5c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e018      	b.n	8005814 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	daf2      	bge.n	80057d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2210      	movs	r2, #16
 80057f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a08      	ldr	r2, [pc, #32]	@ (8005820 <USB_FlushRxFifo+0x5c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d901      	bls.n	8005806 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e006      	b.n	8005814 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b10      	cmp	r3, #16
 8005810:	d0f0      	beq.n	80057f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	00030d40 	.word	0x00030d40

08005824 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	68f9      	ldr	r1, [r7, #12]
 8005840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005844:	4313      	orrs	r3, r2
 8005846:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005870:	f023 0303 	bic.w	r3, r3, #3
 8005874:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005884:	f043 0302 	orr.w	r3, r3, #2
 8005888:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f003 0301 	and.w	r3, r3, #1
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4a13      	ldr	r2, [pc, #76]	@ (8005918 <USB_CoreReset+0x64>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e01b      	b.n	800590a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	daf2      	bge.n	80058c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f043 0201 	orr.w	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a09      	ldr	r2, [pc, #36]	@ (8005918 <USB_CoreReset+0x64>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e006      	b.n	800590a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d0f0      	beq.n	80058ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	00030d40 	.word	0x00030d40

0800591c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005920:	bf00      	nop
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005932:	f3ef 8305 	mrs	r3, IPSR
 8005936:	60bb      	str	r3, [r7, #8]
  return(result);
 8005938:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10f      	bne.n	800595e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593e:	f3ef 8310 	mrs	r3, PRIMASK
 8005942:	607b      	str	r3, [r7, #4]
  return(result);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d105      	bne.n	8005956 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800594a:	f3ef 8311 	mrs	r3, BASEPRI
 800594e:	603b      	str	r3, [r7, #0]
  return(result);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <osKernelInitialize+0x3a>
 8005956:	4b0e      	ldr	r3, [pc, #56]	@ (8005990 <osKernelInitialize+0x64>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d103      	bne.n	8005966 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800595e:	f06f 0305 	mvn.w	r3, #5
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	e00c      	b.n	8005980 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005966:	4b0a      	ldr	r3, [pc, #40]	@ (8005990 <osKernelInitialize+0x64>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d105      	bne.n	800597a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800596e:	4b08      	ldr	r3, [pc, #32]	@ (8005990 <osKernelInitialize+0x64>)
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	e002      	b.n	8005980 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005980:	68fb      	ldr	r3, [r7, #12]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	200013d8 	.word	0x200013d8

08005994 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800599a:	f3ef 8305 	mrs	r3, IPSR
 800599e:	60bb      	str	r3, [r7, #8]
  return(result);
 80059a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10f      	bne.n	80059c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059a6:	f3ef 8310 	mrs	r3, PRIMASK
 80059aa:	607b      	str	r3, [r7, #4]
  return(result);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d105      	bne.n	80059be <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059b2:	f3ef 8311 	mrs	r3, BASEPRI
 80059b6:	603b      	str	r3, [r7, #0]
  return(result);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <osKernelStart+0x3a>
 80059be:	4b0f      	ldr	r3, [pc, #60]	@ (80059fc <osKernelStart+0x68>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d103      	bne.n	80059ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80059c6:	f06f 0305 	mvn.w	r3, #5
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e010      	b.n	80059f0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059ce:	4b0b      	ldr	r3, [pc, #44]	@ (80059fc <osKernelStart+0x68>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d109      	bne.n	80059ea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059d6:	f7ff ffa1 	bl	800591c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059da:	4b08      	ldr	r3, [pc, #32]	@ (80059fc <osKernelStart+0x68>)
 80059dc:	2202      	movs	r2, #2
 80059de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059e0:	f001 f9bc 	bl	8006d5c <vTaskStartScheduler>
      stat = osOK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	e002      	b.n	80059f0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80059ea:	f04f 33ff 	mov.w	r3, #4294967295
 80059ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059f0:	68fb      	ldr	r3, [r7, #12]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	200013d8 	.word	0x200013d8

08005a00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b090      	sub	sp, #64	@ 0x40
 8005a04:	af04      	add	r7, sp, #16
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a10:	f3ef 8305 	mrs	r3, IPSR
 8005a14:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a16:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f040 808f 	bne.w	8005b3c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a22:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d105      	bne.n	8005a36 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a2e:	617b      	str	r3, [r7, #20]
  return(result);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <osThreadNew+0x3e>
 8005a36:	4b44      	ldr	r3, [pc, #272]	@ (8005b48 <osThreadNew+0x148>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d07e      	beq.n	8005b3c <osThreadNew+0x13c>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d07b      	beq.n	8005b3c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005a44:	2380      	movs	r3, #128	@ 0x80
 8005a46:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005a48:	2318      	movs	r3, #24
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005a50:	f04f 33ff 	mov.w	r3, #4294967295
 8005a54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d045      	beq.n	8005ae8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <osThreadNew+0x6a>
        name = attr->name;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <osThreadNew+0x90>
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	2b38      	cmp	r3, #56	@ 0x38
 8005a82:	d805      	bhi.n	8005a90 <osThreadNew+0x90>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <osThreadNew+0x94>
        return (NULL);
 8005a90:	2300      	movs	r3, #0
 8005a92:	e054      	b.n	8005b3e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	089b      	lsrs	r3, r3, #2
 8005aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00e      	beq.n	8005aca <osThreadNew+0xca>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2ba7      	cmp	r3, #167	@ 0xa7
 8005ab2:	d90a      	bls.n	8005aca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d006      	beq.n	8005aca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <osThreadNew+0xca>
        mem = 1;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	e010      	b.n	8005aec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10c      	bne.n	8005aec <osThreadNew+0xec>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d108      	bne.n	8005aec <osThreadNew+0xec>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <osThreadNew+0xec>
          mem = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	623b      	str	r3, [r7, #32]
 8005ae6:	e001      	b.n	8005aec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d110      	bne.n	8005b14 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005afa:	9202      	str	r2, [sp, #8]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 ff29 	bl	8006960 <xTaskCreateStatic>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e013      	b.n	8005b3c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d110      	bne.n	8005b3c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f107 0310 	add.w	r3, r7, #16
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 ff7d 	bl	8006a2c <xTaskCreate>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d001      	beq.n	8005b3c <osThreadNew+0x13c>
          hTask = NULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b3c:	693b      	ldr	r3, [r7, #16]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3730      	adds	r7, #48	@ 0x30
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	200013d8 	.word	0x200013d8

08005b4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b54:	f3ef 8305 	mrs	r3, IPSR
 8005b58:	613b      	str	r3, [r7, #16]
  return(result);
 8005b5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10f      	bne.n	8005b80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b60:	f3ef 8310 	mrs	r3, PRIMASK
 8005b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b70:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <osDelay+0x3c>
 8005b78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <osDelay+0x58>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d103      	bne.n	8005b88 <osDelay+0x3c>
    stat = osErrorISR;
 8005b80:	f06f 0305 	mvn.w	r3, #5
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e007      	b.n	8005b98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f001 f8aa 	bl	8006cec <vTaskDelay>
    }
  }

  return (stat);
 8005b98:	697b      	ldr	r3, [r7, #20]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200013d8 	.word	0x200013d8

08005ba8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f002 fa89 	bl	80080c8 <pvTimerGetTimerID>
 8005bb6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d005      	beq.n	8005bca <TimerCallback+0x22>
    callb->func (callb->arg);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	6852      	ldr	r2, [r2, #4]
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	4798      	blx	r3
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	@ 0x38
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	607a      	str	r2, [r7, #4]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	460b      	mov	r3, r1
 8005be2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be8:	f3ef 8305 	mrs	r3, IPSR
 8005bec:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d16a      	bne.n	8005cca <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf8:	617b      	str	r3, [r7, #20]
  return(result);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c00:	f3ef 8311 	mrs	r3, BASEPRI
 8005c04:	613b      	str	r3, [r7, #16]
  return(result);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <osTimerNew+0x40>
 8005c0c:	4b31      	ldr	r3, [pc, #196]	@ (8005cd4 <osTimerNew+0x100>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d05a      	beq.n	8005cca <osTimerNew+0xf6>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d057      	beq.n	8005cca <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005c1a:	2008      	movs	r0, #8
 8005c1c:	f002 fcb4 	bl	8008588 <pvPortMalloc>
 8005c20:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d050      	beq.n	8005cca <osTimerNew+0xf6>
      callb->func = func;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005c34:	7afb      	ldrb	r3, [r7, #11]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <osTimerNew+0x6c>
        reload = pdFALSE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c3e:	e001      	b.n	8005c44 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      mem  = -1;
 8005c44:	f04f 33ff 	mov.w	r3, #4294967295
 8005c48:	623b      	str	r3, [r7, #32]
      name = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

      if (attr != NULL) {
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01c      	beq.n	8005c8e <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <osTimerNew+0x8e>
          name = attr->name;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d006      	beq.n	8005c78 <osTimerNew+0xa4>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8005c70:	d902      	bls.n	8005c78 <osTimerNew+0xa4>
          mem = 1;
 8005c72:	2301      	movs	r3, #1
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	e00c      	b.n	8005c92 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d108      	bne.n	8005c92 <osTimerNew+0xbe>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <osTimerNew+0xbe>
            mem = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	623b      	str	r3, [r7, #32]
 8005c8c:	e001      	b.n	8005c92 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10c      	bne.n	8005cb2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd8 <osTimerNew+0x104>)
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005caa:	f001 fe6e 	bl	800798a <xTimerCreateStatic>
 8005cae:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005cb0:	e00b      	b.n	8005cca <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d108      	bne.n	8005cca <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005cb8:	4b07      	ldr	r3, [pc, #28]	@ (8005cd8 <osTimerNew+0x104>)
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cc4:	f001 fe40 	bl	8007948 <xTimerCreate>
 8005cc8:	62b8      	str	r0, [r7, #40]	@ 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3730      	adds	r7, #48	@ 0x30
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	200013d8 	.word	0x200013d8
 8005cd8:	08005ba9 	.word	0x08005ba9

08005cdc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	@ 0x28
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cea:	f3ef 8305 	mrs	r3, IPSR
 8005cee:	617b      	str	r3, [r7, #20]
  return(result);
 8005cf0:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10f      	bne.n	8005d16 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cfa:	613b      	str	r3, [r7, #16]
  return(result);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d105      	bne.n	8005d0e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d02:	f3ef 8311 	mrs	r3, BASEPRI
 8005d06:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <osTimerStart+0x42>
 8005d0e:	4b12      	ldr	r3, [pc, #72]	@ (8005d58 <osTimerStart+0x7c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d103      	bne.n	8005d1e <osTimerStart+0x42>
    stat = osErrorISR;
 8005d16:	f06f 0305 	mvn.w	r3, #5
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e017      	b.n	8005d4e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <osTimerStart+0x50>
    stat = osErrorParameter;
 8005d24:	f06f 0303 	mvn.w	r3, #3
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	e010      	b.n	8005d4e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	2300      	movs	r3, #0
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	2104      	movs	r1, #4
 8005d36:	69b8      	ldr	r0, [r7, #24]
 8005d38:	f001 feaa 	bl	8007a90 <xTimerGenericCommand>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d102      	bne.n	8005d48 <osTimerStart+0x6c>
      stat = osOK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	e002      	b.n	8005d4e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8005d48:	f06f 0302 	mvn.w	r3, #2
 8005d4c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8005d4e:	69fb      	ldr	r3, [r7, #28]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200013d8 	.word	0x200013d8

08005d5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4a07      	ldr	r2, [pc, #28]	@ (8005d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	4a06      	ldr	r2, [pc, #24]	@ (8005d8c <vApplicationGetIdleTaskMemory+0x30>)
 8005d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2280      	movs	r2, #128	@ 0x80
 8005d78:	601a      	str	r2, [r3, #0]
}
 8005d7a:	bf00      	nop
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	200013dc 	.word	0x200013dc
 8005d8c:	20001484 	.word	0x20001484

08005d90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a07      	ldr	r2, [pc, #28]	@ (8005dbc <vApplicationGetTimerTaskMemory+0x2c>)
 8005da0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4a06      	ldr	r2, [pc, #24]	@ (8005dc0 <vApplicationGetTimerTaskMemory+0x30>)
 8005da6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dae:	601a      	str	r2, [r3, #0]
}
 8005db0:	bf00      	nop
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	20001684 	.word	0x20001684
 8005dc0:	2000172c 	.word	0x2000172c

08005dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f103 0208 	add.w	r2, r3, #8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f103 0208 	add.w	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f103 0208 	add.w	r2, r3, #8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7c:	d103      	bne.n	8005e86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e00c      	b.n	8005ea0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3308      	adds	r3, #8
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	e002      	b.n	8005e94 <vListInsert+0x2e>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d2f6      	bcs.n	8005e8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6892      	ldr	r2, [r2, #8]
 8005eee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6852      	ldr	r2, [r2, #4]
 8005ef8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d103      	bne.n	8005f0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	1e5a      	subs	r2, r3, #1
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10d      	bne.n	8005f5c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f44:	b672      	cpsid	i
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	b662      	cpsie	i
 8005f54:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005f5c:	f002 f9e6 	bl	800832c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f68:	68f9      	ldr	r1, [r7, #12]
 8005f6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f6c:	fb01 f303 	mul.w	r3, r1, r3
 8005f70:	441a      	add	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	68f9      	ldr	r1, [r7, #12]
 8005f90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	441a      	add	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	22ff      	movs	r2, #255	@ 0xff
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	22ff      	movs	r2, #255	@ 0xff
 8005fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d114      	bne.n	8005fdc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01a      	beq.n	8005ff0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3310      	adds	r3, #16
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 f98a 	bl	80072d8 <xTaskRemoveFromEventList>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d012      	beq.n	8005ff0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <xQueueGenericReset+0xd4>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	e009      	b.n	8005ff0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3310      	adds	r3, #16
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff feef 	bl	8005dc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3324      	adds	r3, #36	@ 0x24
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff feea 	bl	8005dc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ff0:	f002 f9d2 	bl	8008398 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ff4:	2301      	movs	r3, #1
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08e      	sub	sp, #56	@ 0x38
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10d      	bne.n	8006034 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	b672      	cpsid	i
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	b662      	cpsie	i
 800602c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10d      	bne.n	8006056 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603e:	b672      	cpsid	i
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	b662      	cpsie	i
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	e7fd      	b.n	8006052 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <xQueueGenericCreateStatic+0x5e>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <xQueueGenericCreateStatic+0x62>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <xQueueGenericCreateStatic+0x64>
 8006066:	2300      	movs	r3, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10d      	bne.n	8006088 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006070:	b672      	cpsid	i
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	b662      	cpsie	i
 8006080:	623b      	str	r3, [r7, #32]
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	e7fd      	b.n	8006084 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <xQueueGenericCreateStatic+0x90>
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <xQueueGenericCreateStatic+0x94>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <xQueueGenericCreateStatic+0x96>
 8006098:	2300      	movs	r3, #0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10d      	bne.n	80060ba <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	b672      	cpsid	i
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	b662      	cpsie	i
 80060b2:	61fb      	str	r3, [r7, #28]
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	e7fd      	b.n	80060b6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060ba:	2350      	movs	r3, #80	@ 0x50
 80060bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b50      	cmp	r3, #80	@ 0x50
 80060c2:	d00d      	beq.n	80060e0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	b672      	cpsid	i
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	b662      	cpsie	i
 80060d8:	61bb      	str	r3, [r7, #24]
}
 80060da:	bf00      	nop
 80060dc:	bf00      	nop
 80060de:	e7fd      	b.n	80060dc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80060e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80060f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f805 	bl	8006112 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800610a:	4618      	mov	r0, r3
 800610c:	3730      	adds	r7, #48	@ 0x30
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	607a      	str	r2, [r7, #4]
 800611e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d103      	bne.n	800612e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e002      	b.n	8006134 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006140:	2101      	movs	r1, #1
 8006142:	69b8      	ldr	r0, [r7, #24]
 8006144:	f7ff fef2 	bl	8005f2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	78fa      	ldrb	r2, [r7, #3]
 800614c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	@ 0x38
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006166:	2300      	movs	r3, #0
 8006168:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10d      	bne.n	8006190 <xQueueGenericSend+0x38>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006178:	b672      	cpsid	i
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	b662      	cpsie	i
 8006188:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	e7fd      	b.n	800618c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <xQueueGenericSend+0x46>
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <xQueueGenericSend+0x4a>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <xQueueGenericSend+0x4c>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10d      	bne.n	80061c4 <xQueueGenericSend+0x6c>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	b672      	cpsid	i
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	b662      	cpsie	i
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	e7fd      	b.n	80061c0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d103      	bne.n	80061d2 <xQueueGenericSend+0x7a>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <xQueueGenericSend+0x7e>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <xQueueGenericSend+0x80>
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10d      	bne.n	80061f8 <xQueueGenericSend+0xa0>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e0:	b672      	cpsid	i
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	b662      	cpsie	i
 80061f0:	623b      	str	r3, [r7, #32]
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	e7fd      	b.n	80061f4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061f8:	f001 fa74 	bl	80076e4 <xTaskGetSchedulerState>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <xQueueGenericSend+0xb0>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <xQueueGenericSend+0xb4>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <xQueueGenericSend+0xb6>
 800620c:	2300      	movs	r3, #0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10d      	bne.n	800622e <xQueueGenericSend+0xd6>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006216:	b672      	cpsid	i
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	b662      	cpsie	i
 8006226:	61fb      	str	r3, [r7, #28]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800622e:	f002 f87d 	bl	800832c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623a:	429a      	cmp	r2, r3
 800623c:	d302      	bcc.n	8006244 <xQueueGenericSend+0xec>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d129      	bne.n	8006298 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800624a:	f000 fa1b 	bl	8006684 <prvCopyDataToQueue>
 800624e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d010      	beq.n	800627a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	3324      	adds	r3, #36	@ 0x24
 800625c:	4618      	mov	r0, r3
 800625e:	f001 f83b 	bl	80072d8 <xTaskRemoveFromEventList>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d013      	beq.n	8006290 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006268:	4b3f      	ldr	r3, [pc, #252]	@ (8006368 <xQueueGenericSend+0x210>)
 800626a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	e00a      	b.n	8006290 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800627a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006280:	4b39      	ldr	r3, [pc, #228]	@ (8006368 <xQueueGenericSend+0x210>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006290:	f002 f882 	bl	8008398 <vPortExitCritical>
				return pdPASS;
 8006294:	2301      	movs	r3, #1
 8006296:	e063      	b.n	8006360 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800629e:	f002 f87b 	bl	8008398 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e05c      	b.n	8006360 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062ac:	f107 0314 	add.w	r3, r7, #20
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f877 	bl	80073a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062b6:	2301      	movs	r3, #1
 80062b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ba:	f002 f86d 	bl	8008398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062be:	f000 fdc1 	bl	8006e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062c2:	f002 f833 	bl	800832c <vPortEnterCritical>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d103      	bne.n	80062dc <xQueueGenericSend+0x184>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d103      	bne.n	80062f2 <xQueueGenericSend+0x19a>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062f2:	f002 f851 	bl	8008398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062f6:	1d3a      	adds	r2, r7, #4
 80062f8:	f107 0314 	add.w	r3, r7, #20
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 f866 	bl	80073d0 <xTaskCheckForTimeOut>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d124      	bne.n	8006354 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800630a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800630c:	f000 fab2 	bl	8006874 <prvIsQueueFull>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d018      	beq.n	8006348 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	3310      	adds	r3, #16
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f000 ff84 	bl	800722c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006326:	f000 fa3d 	bl	80067a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800632a:	f000 fd99 	bl	8006e60 <xTaskResumeAll>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	f47f af7c 	bne.w	800622e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006336:	4b0c      	ldr	r3, [pc, #48]	@ (8006368 <xQueueGenericSend+0x210>)
 8006338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	e772      	b.n	800622e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800634a:	f000 fa2b 	bl	80067a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800634e:	f000 fd87 	bl	8006e60 <xTaskResumeAll>
 8006352:	e76c      	b.n	800622e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006356:	f000 fa25 	bl	80067a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800635a:	f000 fd81 	bl	8006e60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800635e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006360:	4618      	mov	r0, r3
 8006362:	3738      	adds	r7, #56	@ 0x38
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08e      	sub	sp, #56	@ 0x38
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800637e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10d      	bne.n	80063a0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006388:	b672      	cpsid	i
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	b662      	cpsie	i
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <xQueueGenericSendFromISR+0x42>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <xQueueGenericSendFromISR+0x46>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <xQueueGenericSendFromISR+0x48>
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063bc:	b672      	cpsid	i
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	b662      	cpsie	i
 80063cc:	623b      	str	r3, [r7, #32]
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d103      	bne.n	80063e2 <xQueueGenericSendFromISR+0x76>
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <xQueueGenericSendFromISR+0x7a>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <xQueueGenericSendFromISR+0x7c>
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10d      	bne.n	8006408 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	b672      	cpsid	i
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	b662      	cpsie	i
 8006400:	61fb      	str	r3, [r7, #28]
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006408:	f002 f878 	bl	80084fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800640c:	f3ef 8211 	mrs	r2, BASEPRI
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	b672      	cpsid	i
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	b662      	cpsie	i
 8006424:	61ba      	str	r2, [r7, #24]
 8006426:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006428:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800642a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006434:	429a      	cmp	r2, r3
 8006436:	d302      	bcc.n	800643e <xQueueGenericSendFromISR+0xd2>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d12c      	bne.n	8006498 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006444:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800644e:	f000 f919 	bl	8006684 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006452:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d112      	bne.n	8006482 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d016      	beq.n	8006492 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	3324      	adds	r3, #36	@ 0x24
 8006468:	4618      	mov	r0, r3
 800646a:	f000 ff35 	bl	80072d8 <xTaskRemoveFromEventList>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e007      	b.n	8006492 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006482:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006486:	3301      	adds	r3, #1
 8006488:	b2db      	uxtb	r3, r3
 800648a:	b25a      	sxtb	r2, r3
 800648c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006492:	2301      	movs	r3, #1
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006496:	e001      	b.n	800649c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006498:	2300      	movs	r3, #0
 800649a:	637b      	str	r3, [r7, #52]	@ 0x34
 800649c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3738      	adds	r7, #56	@ 0x38
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08c      	sub	sp, #48	@ 0x30
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10d      	bne.n	80064ea <xQueueReceive+0x36>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	b672      	cpsid	i
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	b662      	cpsie	i
 80064e2:	623b      	str	r3, [r7, #32]
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	e7fd      	b.n	80064e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d103      	bne.n	80064f8 <xQueueReceive+0x44>
 80064f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <xQueueReceive+0x48>
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <xQueueReceive+0x4a>
 80064fc:	2300      	movs	r3, #0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10d      	bne.n	800651e <xQueueReceive+0x6a>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006506:	b672      	cpsid	i
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	b662      	cpsie	i
 8006516:	61fb      	str	r3, [r7, #28]
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	e7fd      	b.n	800651a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800651e:	f001 f8e1 	bl	80076e4 <xTaskGetSchedulerState>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <xQueueReceive+0x7a>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <xQueueReceive+0x7e>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <xQueueReceive+0x80>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10d      	bne.n	8006554 <xQueueReceive+0xa0>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653c:	b672      	cpsid	i
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	b662      	cpsie	i
 800654c:	61bb      	str	r3, [r7, #24]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006554:	f001 feea 	bl	800832c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01f      	beq.n	80065a4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006568:	f000 f8f6 	bl	8006758 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656e:	1e5a      	subs	r2, r3, #1
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006572:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00f      	beq.n	800659c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	3310      	adds	r3, #16
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fea9 	bl	80072d8 <xTaskRemoveFromEventList>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800658c:	4b3c      	ldr	r3, [pc, #240]	@ (8006680 <xQueueReceive+0x1cc>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800659c:	f001 fefc 	bl	8008398 <vPortExitCritical>
				return pdPASS;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e069      	b.n	8006678 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065aa:	f001 fef5 	bl	8008398 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e062      	b.n	8006678 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065b8:	f107 0310 	add.w	r3, r7, #16
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fef1 	bl	80073a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065c2:	2301      	movs	r3, #1
 80065c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065c6:	f001 fee7 	bl	8008398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065ca:	f000 fc3b 	bl	8006e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ce:	f001 fead 	bl	800832c <vPortEnterCritical>
 80065d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065d8:	b25b      	sxtb	r3, r3
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d103      	bne.n	80065e8 <xQueueReceive+0x134>
 80065e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065ee:	b25b      	sxtb	r3, r3
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d103      	bne.n	80065fe <xQueueReceive+0x14a>
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065fe:	f001 fecb 	bl	8008398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006602:	1d3a      	adds	r2, r7, #4
 8006604:	f107 0310 	add.w	r3, r7, #16
 8006608:	4611      	mov	r1, r2
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fee0 	bl	80073d0 <xTaskCheckForTimeOut>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d123      	bne.n	800665e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006618:	f000 f916 	bl	8006848 <prvIsQueueEmpty>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d017      	beq.n	8006652 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	3324      	adds	r3, #36	@ 0x24
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fdfe 	bl	800722c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006632:	f000 f8b7 	bl	80067a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006636:	f000 fc13 	bl	8006e60 <xTaskResumeAll>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d189      	bne.n	8006554 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006640:	4b0f      	ldr	r3, [pc, #60]	@ (8006680 <xQueueReceive+0x1cc>)
 8006642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	e780      	b.n	8006554 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006654:	f000 f8a6 	bl	80067a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006658:	f000 fc02 	bl	8006e60 <xTaskResumeAll>
 800665c:	e77a      	b.n	8006554 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800665e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006660:	f000 f8a0 	bl	80067a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006664:	f000 fbfc 	bl	8006e60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800666a:	f000 f8ed 	bl	8006848 <prvIsQueueEmpty>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	f43f af6f 	beq.w	8006554 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006676:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006678:	4618      	mov	r0, r3
 800667a:	3730      	adds	r7, #48	@ 0x30
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006690:	2300      	movs	r3, #0
 8006692:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10d      	bne.n	80066be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d14d      	bne.n	8006746 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 f836 	bl	8007720 <xTaskPriorityDisinherit>
 80066b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	609a      	str	r2, [r3, #8]
 80066bc:	e043      	b.n	8006746 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d119      	bne.n	80066f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6858      	ldr	r0, [r3, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066cc:	461a      	mov	r2, r3
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	f002 f9c8 	bl	8008a64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066dc:	441a      	add	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d32b      	bcc.n	8006746 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	605a      	str	r2, [r3, #4]
 80066f6:	e026      	b.n	8006746 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68d8      	ldr	r0, [r3, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	461a      	mov	r2, r3
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	f002 f9ae 	bl	8008a64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006710:	425b      	negs	r3, r3
 8006712:	441a      	add	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d207      	bcs.n	8006734 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672c:	425b      	negs	r3, r3
 800672e:	441a      	add	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d105      	bne.n	8006746 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	3b01      	subs	r3, #1
 8006744:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800674e:	697b      	ldr	r3, [r7, #20]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006766:	2b00      	cmp	r3, #0
 8006768:	d018      	beq.n	800679c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006772:	441a      	add	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	429a      	cmp	r2, r3
 8006782:	d303      	bcc.n	800678c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68d9      	ldr	r1, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	461a      	mov	r2, r3
 8006796:	6838      	ldr	r0, [r7, #0]
 8006798:	f002 f964 	bl	8008a64 <memcpy>
	}
}
 800679c:	bf00      	nop
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067ac:	f001 fdbe 	bl	800832c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067b8:	e011      	b.n	80067de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d012      	beq.n	80067e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3324      	adds	r3, #36	@ 0x24
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fd86 	bl	80072d8 <xTaskRemoveFromEventList>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067d2:	f000 fe65 	bl	80074a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	3b01      	subs	r3, #1
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dce9      	bgt.n	80067ba <prvUnlockQueue+0x16>
 80067e6:	e000      	b.n	80067ea <prvUnlockQueue+0x46>
					break;
 80067e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	22ff      	movs	r2, #255	@ 0xff
 80067ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80067f2:	f001 fdd1 	bl	8008398 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067f6:	f001 fd99 	bl	800832c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006800:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006802:	e011      	b.n	8006828 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d012      	beq.n	8006832 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3310      	adds	r3, #16
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fd61 	bl	80072d8 <xTaskRemoveFromEventList>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800681c:	f000 fe40 	bl	80074a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	3b01      	subs	r3, #1
 8006824:	b2db      	uxtb	r3, r3
 8006826:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dce9      	bgt.n	8006804 <prvUnlockQueue+0x60>
 8006830:	e000      	b.n	8006834 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006832:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	22ff      	movs	r2, #255	@ 0xff
 8006838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800683c:	f001 fdac 	bl	8008398 <vPortExitCritical>
}
 8006840:	bf00      	nop
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006850:	f001 fd6c 	bl	800832c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e001      	b.n	8006866 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006866:	f001 fd97 	bl	8008398 <vPortExitCritical>

	return xReturn;
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800687c:	f001 fd56 	bl	800832c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	429a      	cmp	r2, r3
 800688a:	d102      	bne.n	8006892 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800688c:	2301      	movs	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e001      	b.n	8006896 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006896:	f001 fd7f 	bl	8008398 <vPortExitCritical>

	return xReturn;
 800689a:	68fb      	ldr	r3, [r7, #12]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e014      	b.n	80068de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068b4:	4a0f      	ldr	r2, [pc, #60]	@ (80068f4 <vQueueAddToRegistry+0x50>)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10b      	bne.n	80068d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068c0:	490c      	ldr	r1, [pc, #48]	@ (80068f4 <vQueueAddToRegistry+0x50>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068ca:	4a0a      	ldr	r2, [pc, #40]	@ (80068f4 <vQueueAddToRegistry+0x50>)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	4413      	add	r3, r2
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068d6:	e006      	b.n	80068e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3301      	adds	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b07      	cmp	r3, #7
 80068e2:	d9e7      	bls.n	80068b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	20001b2c 	.word	0x20001b2c

080068f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006908:	f001 fd10 	bl	800832c <vPortEnterCritical>
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006912:	b25b      	sxtb	r3, r3
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d103      	bne.n	8006922 <vQueueWaitForMessageRestricted+0x2a>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006928:	b25b      	sxtb	r3, r3
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d103      	bne.n	8006938 <vQueueWaitForMessageRestricted+0x40>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006938:	f001 fd2e 	bl	8008398 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	3324      	adds	r3, #36	@ 0x24
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fc95 	bl	800727c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006952:	6978      	ldr	r0, [r7, #20]
 8006954:	f7ff ff26 	bl	80067a4 <prvUnlockQueue>
	}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08e      	sub	sp, #56	@ 0x38
 8006964:	af04      	add	r7, sp, #16
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800696e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10d      	bne.n	8006990 <xTaskCreateStatic+0x30>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	b672      	cpsid	i
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	b662      	cpsie	i
 8006988:	623b      	str	r3, [r7, #32]
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	e7fd      	b.n	800698c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10d      	bne.n	80069b2 <xTaskCreateStatic+0x52>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699a:	b672      	cpsid	i
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	b662      	cpsie	i
 80069aa:	61fb      	str	r3, [r7, #28]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069b2:	23a8      	movs	r3, #168	@ 0xa8
 80069b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80069ba:	d00d      	beq.n	80069d8 <xTaskCreateStatic+0x78>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	b672      	cpsid	i
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	b662      	cpsie	i
 80069d0:	61bb      	str	r3, [r7, #24]
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01e      	beq.n	8006a1e <xTaskCreateStatic+0xbe>
 80069e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01b      	beq.n	8006a1e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069f8:	2300      	movs	r3, #0
 80069fa:	9303      	str	r3, [sp, #12]
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	9302      	str	r3, [sp, #8]
 8006a00:	f107 0314 	add.w	r3, r7, #20
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f851 	bl	8006ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a18:	f000 f8f8 	bl	8006c0c <prvAddNewTaskToReadyList>
 8006a1c:	e001      	b.n	8006a22 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a22:	697b      	ldr	r3, [r7, #20]
	}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3728      	adds	r7, #40	@ 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08c      	sub	sp, #48	@ 0x30
 8006a30:	af04      	add	r7, sp, #16
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 fda1 	bl	8008588 <pvPortMalloc>
 8006a46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00e      	beq.n	8006a6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a4e:	20a8      	movs	r0, #168	@ 0xa8
 8006a50:	f001 fd9a 	bl	8008588 <pvPortMalloc>
 8006a54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a62:	e005      	b.n	8006a70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a64:	6978      	ldr	r0, [r7, #20]
 8006a66:	f001 fe5d 	bl	8008724 <vPortFree>
 8006a6a:	e001      	b.n	8006a70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d017      	beq.n	8006aa6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a7e:	88fa      	ldrh	r2, [r7, #6]
 8006a80:	2300      	movs	r3, #0
 8006a82:	9303      	str	r3, [sp, #12]
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	9302      	str	r3, [sp, #8]
 8006a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f80f 	bl	8006ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a9a:	69f8      	ldr	r0, [r7, #28]
 8006a9c:	f000 f8b6 	bl	8006c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	61bb      	str	r3, [r7, #24]
 8006aa4:	e002      	b.n	8006aac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aaa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aac:	69bb      	ldr	r3, [r7, #24]
	}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3720      	adds	r7, #32
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	461a      	mov	r2, r3
 8006ad0:	21a5      	movs	r1, #165	@ 0xa5
 8006ad2:	f001 ff43 	bl	800895c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006ae0:	440b      	add	r3, r1
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f023 0307 	bic.w	r3, r3, #7
 8006aee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afe:	b672      	cpsid	i
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	b662      	cpsie	i
 8006b0e:	617b      	str	r3, [r7, #20]
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	e7fd      	b.n	8006b12 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01f      	beq.n	8006b5c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61fb      	str	r3, [r7, #28]
 8006b20:	e012      	b.n	8006b48 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	4413      	add	r3, r2
 8006b28:	7819      	ldrb	r1, [r3, #0]
 8006b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	4413      	add	r3, r2
 8006b30:	3334      	adds	r3, #52	@ 0x34
 8006b32:	460a      	mov	r2, r1
 8006b34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d006      	beq.n	8006b50 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	3301      	adds	r3, #1
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b0f      	cmp	r3, #15
 8006b4c:	d9e9      	bls.n	8006b22 <prvInitialiseNewTask+0x6a>
 8006b4e:	e000      	b.n	8006b52 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006b50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b5a:	e003      	b.n	8006b64 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b66:	2b37      	cmp	r3, #55	@ 0x37
 8006b68:	d901      	bls.n	8006b6e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b6a:	2337      	movs	r3, #55	@ 0x37
 8006b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b78:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	3304      	adds	r3, #4
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff f93d 	bl	8005e04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	3318      	adds	r3, #24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff f938 	bl	8005e04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	3354      	adds	r3, #84	@ 0x54
 8006bbe:	224c      	movs	r2, #76	@ 0x4c
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f001 feca 	bl	800895c <memset>
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	4a0d      	ldr	r2, [pc, #52]	@ (8006c00 <prvInitialiseNewTask+0x148>)
 8006bcc:	659a      	str	r2, [r3, #88]	@ 0x58
 8006bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8006c04 <prvInitialiseNewTask+0x14c>)
 8006bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c08 <prvInitialiseNewTask+0x150>)
 8006bd8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	69b8      	ldr	r0, [r7, #24]
 8006be0:	f001 fa96 	bl	8008110 <pxPortInitialiseStack>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20005db8 	.word	0x20005db8
 8006c04:	20005e20 	.word	0x20005e20
 8006c08:	20005e88 	.word	0x20005e88

08006c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c14:	f001 fb8a 	bl	800832c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c18:	4b2d      	ldr	r3, [pc, #180]	@ (8006cd0 <prvAddNewTaskToReadyList+0xc4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8006cd0 <prvAddNewTaskToReadyList+0xc4>)
 8006c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c22:	4b2c      	ldr	r3, [pc, #176]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c30:	4b27      	ldr	r3, [pc, #156]	@ (8006cd0 <prvAddNewTaskToReadyList+0xc4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d110      	bne.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c38:	f000 fc56 	bl	80074e8 <prvInitialiseTaskLists>
 8006c3c:	e00d      	b.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c3e:	4b26      	ldr	r3, [pc, #152]	@ (8006cd8 <prvAddNewTaskToReadyList+0xcc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c46:	4b23      	ldr	r3, [pc, #140]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d802      	bhi.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c54:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c5a:	4b20      	ldr	r3, [pc, #128]	@ (8006cdc <prvAddNewTaskToReadyList+0xd0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	4a1e      	ldr	r2, [pc, #120]	@ (8006cdc <prvAddNewTaskToReadyList+0xd0>)
 8006c62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c64:	4b1d      	ldr	r3, [pc, #116]	@ (8006cdc <prvAddNewTaskToReadyList+0xd0>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c70:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce0 <prvAddNewTaskToReadyList+0xd4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <prvAddNewTaskToReadyList+0x74>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7c:	4a18      	ldr	r2, [pc, #96]	@ (8006ce0 <prvAddNewTaskToReadyList+0xd4>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a15      	ldr	r2, [pc, #84]	@ (8006ce4 <prvAddNewTaskToReadyList+0xd8>)
 8006c8e:	441a      	add	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7ff f8c1 	bl	8005e1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c9c:	f001 fb7c 	bl	8008398 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <prvAddNewTaskToReadyList+0xcc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00e      	beq.n	8006cc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d207      	bcs.n	8006cc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <prvAddNewTaskToReadyList+0xdc>)
 8006cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20002040 	.word	0x20002040
 8006cd4:	20001b6c 	.word	0x20001b6c
 8006cd8:	2000204c 	.word	0x2000204c
 8006cdc:	2000205c 	.word	0x2000205c
 8006ce0:	20002048 	.word	0x20002048
 8006ce4:	20001b70 	.word	0x20001b70
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d01a      	beq.n	8006d34 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cfe:	4b15      	ldr	r3, [pc, #84]	@ (8006d54 <vTaskDelay+0x68>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00d      	beq.n	8006d22 <vTaskDelay+0x36>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0a:	b672      	cpsid	i
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	b662      	cpsie	i
 8006d1a:	60bb      	str	r3, [r7, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	e7fd      	b.n	8006d1e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006d22:	f000 f88f 	bl	8006e44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d26:	2100      	movs	r1, #0
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fd6d 	bl	8007808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d2e:	f000 f897 	bl	8006e60 <xTaskResumeAll>
 8006d32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d107      	bne.n	8006d4a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006d3a:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <vTaskDelay+0x6c>)
 8006d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20002068 	.word	0x20002068
 8006d58:	e000ed04 	.word	0xe000ed04

08006d5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08a      	sub	sp, #40	@ 0x28
 8006d60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d6a:	463a      	mov	r2, r7
 8006d6c:	1d39      	adds	r1, r7, #4
 8006d6e:	f107 0308 	add.w	r3, r7, #8
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fff2 	bl	8005d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	9202      	str	r2, [sp, #8]
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	2300      	movs	r3, #0
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	2300      	movs	r3, #0
 8006d88:	460a      	mov	r2, r1
 8006d8a:	4926      	ldr	r1, [pc, #152]	@ (8006e24 <vTaskStartScheduler+0xc8>)
 8006d8c:	4826      	ldr	r0, [pc, #152]	@ (8006e28 <vTaskStartScheduler+0xcc>)
 8006d8e:	f7ff fde7 	bl	8006960 <xTaskCreateStatic>
 8006d92:	4603      	mov	r3, r0
 8006d94:	4a25      	ldr	r2, [pc, #148]	@ (8006e2c <vTaskStartScheduler+0xd0>)
 8006d96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d98:	4b24      	ldr	r3, [pc, #144]	@ (8006e2c <vTaskStartScheduler+0xd0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006da0:	2301      	movs	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	e001      	b.n	8006daa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d102      	bne.n	8006db6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006db0:	f000 fd7e 	bl	80078b0 <xTimerCreateTimerTask>
 8006db4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d11d      	bne.n	8006df8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	b672      	cpsid	i
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	b662      	cpsie	i
 8006dd0:	613b      	str	r3, [r7, #16]
}
 8006dd2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dd4:	4b16      	ldr	r3, [pc, #88]	@ (8006e30 <vTaskStartScheduler+0xd4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3354      	adds	r3, #84	@ 0x54
 8006dda:	4a16      	ldr	r2, [pc, #88]	@ (8006e34 <vTaskStartScheduler+0xd8>)
 8006ddc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dde:	4b16      	ldr	r3, [pc, #88]	@ (8006e38 <vTaskStartScheduler+0xdc>)
 8006de0:	f04f 32ff 	mov.w	r2, #4294967295
 8006de4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006de6:	4b15      	ldr	r3, [pc, #84]	@ (8006e3c <vTaskStartScheduler+0xe0>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dec:	4b14      	ldr	r3, [pc, #80]	@ (8006e40 <vTaskStartScheduler+0xe4>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006df2:	f001 fa1d 	bl	8008230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006df6:	e011      	b.n	8006e1c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	d10d      	bne.n	8006e1c <vTaskStartScheduler+0xc0>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e04:	b672      	cpsid	i
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	b662      	cpsie	i
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <vTaskStartScheduler+0xbc>
}
 8006e1c:	bf00      	nop
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	08008bf0 	.word	0x08008bf0
 8006e28:	080074b9 	.word	0x080074b9
 8006e2c:	20002064 	.word	0x20002064
 8006e30:	20001b6c 	.word	0x20001b6c
 8006e34:	20000010 	.word	0x20000010
 8006e38:	20002060 	.word	0x20002060
 8006e3c:	2000204c 	.word	0x2000204c
 8006e40:	20002044 	.word	0x20002044

08006e44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e48:	4b04      	ldr	r3, [pc, #16]	@ (8006e5c <vTaskSuspendAll+0x18>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	4a03      	ldr	r2, [pc, #12]	@ (8006e5c <vTaskSuspendAll+0x18>)
 8006e50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006e52:	bf00      	nop
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20002068 	.word	0x20002068

08006e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e6e:	4b43      	ldr	r3, [pc, #268]	@ (8006f7c <xTaskResumeAll+0x11c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10d      	bne.n	8006e92 <xTaskResumeAll+0x32>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7a:	b672      	cpsid	i
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	b662      	cpsie	i
 8006e8a:	603b      	str	r3, [r7, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e92:	f001 fa4b 	bl	800832c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e96:	4b39      	ldr	r3, [pc, #228]	@ (8006f7c <xTaskResumeAll+0x11c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	4a37      	ldr	r2, [pc, #220]	@ (8006f7c <xTaskResumeAll+0x11c>)
 8006e9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea0:	4b36      	ldr	r3, [pc, #216]	@ (8006f7c <xTaskResumeAll+0x11c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d162      	bne.n	8006f6e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ea8:	4b35      	ldr	r3, [pc, #212]	@ (8006f80 <xTaskResumeAll+0x120>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d05e      	beq.n	8006f6e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eb0:	e02f      	b.n	8006f12 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb2:	4b34      	ldr	r3, [pc, #208]	@ (8006f84 <xTaskResumeAll+0x124>)
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3318      	adds	r3, #24
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff f80a 	bl	8005ed8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff f805 	bl	8005ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8006f88 <xTaskResumeAll+0x128>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d903      	bls.n	8006ee2 <xTaskResumeAll+0x82>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	4a2a      	ldr	r2, [pc, #168]	@ (8006f88 <xTaskResumeAll+0x128>)
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4a27      	ldr	r2, [pc, #156]	@ (8006f8c <xTaskResumeAll+0x12c>)
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f7fe ff90 	bl	8005e1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f02:	4b23      	ldr	r3, [pc, #140]	@ (8006f90 <xTaskResumeAll+0x130>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d302      	bcc.n	8006f12 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006f0c:	4b21      	ldr	r3, [pc, #132]	@ (8006f94 <xTaskResumeAll+0x134>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f12:	4b1c      	ldr	r3, [pc, #112]	@ (8006f84 <xTaskResumeAll+0x124>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1cb      	bne.n	8006eb2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f20:	f000 fbc0 	bl	80076a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f24:	4b1c      	ldr	r3, [pc, #112]	@ (8006f98 <xTaskResumeAll+0x138>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d010      	beq.n	8006f52 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f30:	f000 f858 	bl	8006fe4 <xTaskIncrementTick>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006f3a:	4b16      	ldr	r3, [pc, #88]	@ (8006f94 <xTaskResumeAll+0x134>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f1      	bne.n	8006f30 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006f4c:	4b12      	ldr	r3, [pc, #72]	@ (8006f98 <xTaskResumeAll+0x138>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f52:	4b10      	ldr	r3, [pc, #64]	@ (8006f94 <xTaskResumeAll+0x134>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f9c <xTaskResumeAll+0x13c>)
 8006f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f6e:	f001 fa13 	bl	8008398 <vPortExitCritical>

	return xAlreadyYielded;
 8006f72:	68bb      	ldr	r3, [r7, #8]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20002068 	.word	0x20002068
 8006f80:	20002040 	.word	0x20002040
 8006f84:	20002000 	.word	0x20002000
 8006f88:	20002048 	.word	0x20002048
 8006f8c:	20001b70 	.word	0x20001b70
 8006f90:	20001b6c 	.word	0x20001b6c
 8006f94:	20002054 	.word	0x20002054
 8006f98:	20002050 	.word	0x20002050
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fa6:	4b05      	ldr	r3, [pc, #20]	@ (8006fbc <xTaskGetTickCount+0x1c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fac:	687b      	ldr	r3, [r7, #4]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20002044 	.word	0x20002044

08006fc0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fc6:	f001 fa99 	bl	80084fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006fca:	2300      	movs	r3, #0
 8006fcc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006fce:	4b04      	ldr	r3, [pc, #16]	@ (8006fe0 <xTaskGetTickCountFromISR+0x20>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fd4:	683b      	ldr	r3, [r7, #0]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20002044 	.word	0x20002044

08006fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fee:	4b50      	ldr	r3, [pc, #320]	@ (8007130 <xTaskIncrementTick+0x14c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f040 808c 	bne.w	8007110 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ff8:	4b4e      	ldr	r3, [pc, #312]	@ (8007134 <xTaskIncrementTick+0x150>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007000:	4a4c      	ldr	r2, [pc, #304]	@ (8007134 <xTaskIncrementTick+0x150>)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d123      	bne.n	8007054 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800700c:	4b4a      	ldr	r3, [pc, #296]	@ (8007138 <xTaskIncrementTick+0x154>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00d      	beq.n	8007032 <xTaskIncrementTick+0x4e>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701a:	b672      	cpsid	i
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	b662      	cpsie	i
 800702a:	603b      	str	r3, [r7, #0]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <xTaskIncrementTick+0x4a>
 8007032:	4b41      	ldr	r3, [pc, #260]	@ (8007138 <xTaskIncrementTick+0x154>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	4b40      	ldr	r3, [pc, #256]	@ (800713c <xTaskIncrementTick+0x158>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a3e      	ldr	r2, [pc, #248]	@ (8007138 <xTaskIncrementTick+0x154>)
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	4a3e      	ldr	r2, [pc, #248]	@ (800713c <xTaskIncrementTick+0x158>)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	4b3e      	ldr	r3, [pc, #248]	@ (8007140 <xTaskIncrementTick+0x15c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3301      	adds	r3, #1
 800704c:	4a3c      	ldr	r2, [pc, #240]	@ (8007140 <xTaskIncrementTick+0x15c>)
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	f000 fb28 	bl	80076a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007054:	4b3b      	ldr	r3, [pc, #236]	@ (8007144 <xTaskIncrementTick+0x160>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	429a      	cmp	r2, r3
 800705c:	d349      	bcc.n	80070f2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800705e:	4b36      	ldr	r3, [pc, #216]	@ (8007138 <xTaskIncrementTick+0x154>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007068:	4b36      	ldr	r3, [pc, #216]	@ (8007144 <xTaskIncrementTick+0x160>)
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	601a      	str	r2, [r3, #0]
					break;
 8007070:	e03f      	b.n	80070f2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007072:	4b31      	ldr	r3, [pc, #196]	@ (8007138 <xTaskIncrementTick+0x154>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	429a      	cmp	r2, r3
 8007088:	d203      	bcs.n	8007092 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800708a:	4a2e      	ldr	r2, [pc, #184]	@ (8007144 <xTaskIncrementTick+0x160>)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007090:	e02f      	b.n	80070f2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	3304      	adds	r3, #4
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe ff1e 	bl	8005ed8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3318      	adds	r3, #24
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7fe ff15 	bl	8005ed8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b2:	4b25      	ldr	r3, [pc, #148]	@ (8007148 <xTaskIncrementTick+0x164>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d903      	bls.n	80070c2 <xTaskIncrementTick+0xde>
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070be:	4a22      	ldr	r2, [pc, #136]	@ (8007148 <xTaskIncrementTick+0x164>)
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4a1f      	ldr	r2, [pc, #124]	@ (800714c <xTaskIncrementTick+0x168>)
 80070d0:	441a      	add	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	3304      	adds	r3, #4
 80070d6:	4619      	mov	r1, r3
 80070d8:	4610      	mov	r0, r2
 80070da:	f7fe fea0 	bl	8005e1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007150 <xTaskIncrementTick+0x16c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d3b8      	bcc.n	800705e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070f0:	e7b5      	b.n	800705e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070f2:	4b17      	ldr	r3, [pc, #92]	@ (8007150 <xTaskIncrementTick+0x16c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f8:	4914      	ldr	r1, [pc, #80]	@ (800714c <xTaskIncrementTick+0x168>)
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	440b      	add	r3, r1
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d907      	bls.n	800711a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800710a:	2301      	movs	r3, #1
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	e004      	b.n	800711a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007110:	4b10      	ldr	r3, [pc, #64]	@ (8007154 <xTaskIncrementTick+0x170>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	4a0f      	ldr	r2, [pc, #60]	@ (8007154 <xTaskIncrementTick+0x170>)
 8007118:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800711a:	4b0f      	ldr	r3, [pc, #60]	@ (8007158 <xTaskIncrementTick+0x174>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007122:	2301      	movs	r3, #1
 8007124:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007126:	697b      	ldr	r3, [r7, #20]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20002068 	.word	0x20002068
 8007134:	20002044 	.word	0x20002044
 8007138:	20001ff8 	.word	0x20001ff8
 800713c:	20001ffc 	.word	0x20001ffc
 8007140:	20002058 	.word	0x20002058
 8007144:	20002060 	.word	0x20002060
 8007148:	20002048 	.word	0x20002048
 800714c:	20001b70 	.word	0x20001b70
 8007150:	20001b6c 	.word	0x20001b6c
 8007154:	20002050 	.word	0x20002050
 8007158:	20002054 	.word	0x20002054

0800715c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007162:	4b2c      	ldr	r3, [pc, #176]	@ (8007214 <vTaskSwitchContext+0xb8>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800716a:	4b2b      	ldr	r3, [pc, #172]	@ (8007218 <vTaskSwitchContext+0xbc>)
 800716c:	2201      	movs	r2, #1
 800716e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007170:	e049      	b.n	8007206 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007172:	4b29      	ldr	r3, [pc, #164]	@ (8007218 <vTaskSwitchContext+0xbc>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007178:	4b28      	ldr	r3, [pc, #160]	@ (800721c <vTaskSwitchContext+0xc0>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e013      	b.n	80071a8 <vTaskSwitchContext+0x4c>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10d      	bne.n	80071a2 <vTaskSwitchContext+0x46>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	b672      	cpsid	i
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	b662      	cpsie	i
 800719a:	607b      	str	r3, [r7, #4]
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	e7fd      	b.n	800719e <vTaskSwitchContext+0x42>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	491d      	ldr	r1, [pc, #116]	@ (8007220 <vTaskSwitchContext+0xc4>)
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	440b      	add	r3, r1
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0e1      	beq.n	8007180 <vTaskSwitchContext+0x24>
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4a16      	ldr	r2, [pc, #88]	@ (8007220 <vTaskSwitchContext+0xc4>)
 80071c8:	4413      	add	r3, r2
 80071ca:	60bb      	str	r3, [r7, #8]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	3308      	adds	r3, #8
 80071de:	429a      	cmp	r2, r3
 80071e0:	d104      	bne.n	80071ec <vTaskSwitchContext+0x90>
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	605a      	str	r2, [r3, #4]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007224 <vTaskSwitchContext+0xc8>)
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	4a09      	ldr	r2, [pc, #36]	@ (800721c <vTaskSwitchContext+0xc0>)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071fc:	4b09      	ldr	r3, [pc, #36]	@ (8007224 <vTaskSwitchContext+0xc8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3354      	adds	r3, #84	@ 0x54
 8007202:	4a09      	ldr	r2, [pc, #36]	@ (8007228 <vTaskSwitchContext+0xcc>)
 8007204:	6013      	str	r3, [r2, #0]
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20002068 	.word	0x20002068
 8007218:	20002054 	.word	0x20002054
 800721c:	20002048 	.word	0x20002048
 8007220:	20001b70 	.word	0x20001b70
 8007224:	20001b6c 	.word	0x20001b6c
 8007228:	20000010 	.word	0x20000010

0800722c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10d      	bne.n	8007258 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	b672      	cpsid	i
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	b662      	cpsie	i
 8007250:	60fb      	str	r3, [r7, #12]
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	e7fd      	b.n	8007254 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007258:	4b07      	ldr	r3, [pc, #28]	@ (8007278 <vTaskPlaceOnEventList+0x4c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3318      	adds	r3, #24
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fe fe00 	bl	8005e66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007266:	2101      	movs	r1, #1
 8007268:	6838      	ldr	r0, [r7, #0]
 800726a:	f000 facd 	bl	8007808 <prvAddCurrentTaskToDelayedList>
}
 800726e:	bf00      	nop
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20001b6c 	.word	0x20001b6c

0800727c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	617b      	str	r3, [r7, #20]
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	e7fd      	b.n	80072a6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072aa:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <vTaskPlaceOnEventListRestricted+0x58>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3318      	adds	r3, #24
 80072b0:	4619      	mov	r1, r3
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7fe fdb3 	bl	8005e1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80072be:	f04f 33ff 	mov.w	r3, #4294967295
 80072c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	68b8      	ldr	r0, [r7, #8]
 80072c8:	f000 fa9e 	bl	8007808 <prvAddCurrentTaskToDelayedList>
	}
 80072cc:	bf00      	nop
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20001b6c 	.word	0x20001b6c

080072d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10d      	bne.n	800730a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	b672      	cpsid	i
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	b662      	cpsie	i
 8007302:	60fb      	str	r3, [r7, #12]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3318      	adds	r3, #24
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fde2 	bl	8005ed8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007314:	4b1d      	ldr	r3, [pc, #116]	@ (800738c <xTaskRemoveFromEventList+0xb4>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11d      	bne.n	8007358 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3304      	adds	r3, #4
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fdd9 	bl	8005ed8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732a:	4b19      	ldr	r3, [pc, #100]	@ (8007390 <xTaskRemoveFromEventList+0xb8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d903      	bls.n	800733a <xTaskRemoveFromEventList+0x62>
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007336:	4a16      	ldr	r2, [pc, #88]	@ (8007390 <xTaskRemoveFromEventList+0xb8>)
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4a13      	ldr	r2, [pc, #76]	@ (8007394 <xTaskRemoveFromEventList+0xbc>)
 8007348:	441a      	add	r2, r3
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe fd64 	bl	8005e1e <vListInsertEnd>
 8007356:	e005      	b.n	8007364 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	3318      	adds	r3, #24
 800735c:	4619      	mov	r1, r3
 800735e:	480e      	ldr	r0, [pc, #56]	@ (8007398 <xTaskRemoveFromEventList+0xc0>)
 8007360:	f7fe fd5d 	bl	8005e1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007368:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <xTaskRemoveFromEventList+0xc4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	429a      	cmp	r2, r3
 8007370:	d905      	bls.n	800737e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007372:	2301      	movs	r3, #1
 8007374:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007376:	4b0a      	ldr	r3, [pc, #40]	@ (80073a0 <xTaskRemoveFromEventList+0xc8>)
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e001      	b.n	8007382 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007382:	697b      	ldr	r3, [r7, #20]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20002068 	.word	0x20002068
 8007390:	20002048 	.word	0x20002048
 8007394:	20001b70 	.word	0x20001b70
 8007398:	20002000 	.word	0x20002000
 800739c:	20001b6c 	.word	0x20001b6c
 80073a0:	20002054 	.word	0x20002054

080073a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073ac:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <vTaskInternalSetTimeOutState+0x24>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073b4:	4b05      	ldr	r3, [pc, #20]	@ (80073cc <vTaskInternalSetTimeOutState+0x28>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	605a      	str	r2, [r3, #4]
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	20002058 	.word	0x20002058
 80073cc:	20002044 	.word	0x20002044

080073d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10d      	bne.n	80073fc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e4:	b672      	cpsid	i
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	b662      	cpsie	i
 80073f4:	613b      	str	r3, [r7, #16]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10d      	bne.n	800741e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007406:	b672      	cpsid	i
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	b662      	cpsie	i
 8007416:	60fb      	str	r3, [r7, #12]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800741e:	f000 ff85 	bl	800832c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007422:	4b1d      	ldr	r3, [pc, #116]	@ (8007498 <xTaskCheckForTimeOut+0xc8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743a:	d102      	bne.n	8007442 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800743c:	2300      	movs	r3, #0
 800743e:	61fb      	str	r3, [r7, #28]
 8007440:	e023      	b.n	800748a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	4b15      	ldr	r3, [pc, #84]	@ (800749c <xTaskCheckForTimeOut+0xcc>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d007      	beq.n	800745e <xTaskCheckForTimeOut+0x8e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	429a      	cmp	r2, r3
 8007456:	d302      	bcc.n	800745e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	e015      	b.n	800748a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	429a      	cmp	r2, r3
 8007466:	d20b      	bcs.n	8007480 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff ff95 	bl	80073a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	e004      	b.n	800748a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007486:	2301      	movs	r3, #1
 8007488:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800748a:	f000 ff85 	bl	8008398 <vPortExitCritical>

	return xReturn;
 800748e:	69fb      	ldr	r3, [r7, #28]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20002044 	.word	0x20002044
 800749c:	20002058 	.word	0x20002058

080074a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074a4:	4b03      	ldr	r3, [pc, #12]	@ (80074b4 <vTaskMissedYield+0x14>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	601a      	str	r2, [r3, #0]
}
 80074aa:	bf00      	nop
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20002054 	.word	0x20002054

080074b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074c0:	f000 f852 	bl	8007568 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074c4:	4b06      	ldr	r3, [pc, #24]	@ (80074e0 <prvIdleTask+0x28>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d9f9      	bls.n	80074c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074cc:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <prvIdleTask+0x2c>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074dc:	e7f0      	b.n	80074c0 <prvIdleTask+0x8>
 80074de:	bf00      	nop
 80074e0:	20001b70 	.word	0x20001b70
 80074e4:	e000ed04 	.word	0xe000ed04

080074e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ee:	2300      	movs	r3, #0
 80074f0:	607b      	str	r3, [r7, #4]
 80074f2:	e00c      	b.n	800750e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	4613      	mov	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4a12      	ldr	r2, [pc, #72]	@ (8007548 <prvInitialiseTaskLists+0x60>)
 8007500:	4413      	add	r3, r2
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe fc5e 	bl	8005dc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3301      	adds	r3, #1
 800750c:	607b      	str	r3, [r7, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b37      	cmp	r3, #55	@ 0x37
 8007512:	d9ef      	bls.n	80074f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007514:	480d      	ldr	r0, [pc, #52]	@ (800754c <prvInitialiseTaskLists+0x64>)
 8007516:	f7fe fc55 	bl	8005dc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800751a:	480d      	ldr	r0, [pc, #52]	@ (8007550 <prvInitialiseTaskLists+0x68>)
 800751c:	f7fe fc52 	bl	8005dc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007520:	480c      	ldr	r0, [pc, #48]	@ (8007554 <prvInitialiseTaskLists+0x6c>)
 8007522:	f7fe fc4f 	bl	8005dc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007526:	480c      	ldr	r0, [pc, #48]	@ (8007558 <prvInitialiseTaskLists+0x70>)
 8007528:	f7fe fc4c 	bl	8005dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800752c:	480b      	ldr	r0, [pc, #44]	@ (800755c <prvInitialiseTaskLists+0x74>)
 800752e:	f7fe fc49 	bl	8005dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007532:	4b0b      	ldr	r3, [pc, #44]	@ (8007560 <prvInitialiseTaskLists+0x78>)
 8007534:	4a05      	ldr	r2, [pc, #20]	@ (800754c <prvInitialiseTaskLists+0x64>)
 8007536:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007538:	4b0a      	ldr	r3, [pc, #40]	@ (8007564 <prvInitialiseTaskLists+0x7c>)
 800753a:	4a05      	ldr	r2, [pc, #20]	@ (8007550 <prvInitialiseTaskLists+0x68>)
 800753c:	601a      	str	r2, [r3, #0]
}
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20001b70 	.word	0x20001b70
 800754c:	20001fd0 	.word	0x20001fd0
 8007550:	20001fe4 	.word	0x20001fe4
 8007554:	20002000 	.word	0x20002000
 8007558:	20002014 	.word	0x20002014
 800755c:	2000202c 	.word	0x2000202c
 8007560:	20001ff8 	.word	0x20001ff8
 8007564:	20001ffc 	.word	0x20001ffc

08007568 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800756e:	e019      	b.n	80075a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007570:	f000 fedc 	bl	800832c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007574:	4b10      	ldr	r3, [pc, #64]	@ (80075b8 <prvCheckTasksWaitingTermination+0x50>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3304      	adds	r3, #4
 8007580:	4618      	mov	r0, r3
 8007582:	f7fe fca9 	bl	8005ed8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007586:	4b0d      	ldr	r3, [pc, #52]	@ (80075bc <prvCheckTasksWaitingTermination+0x54>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3b01      	subs	r3, #1
 800758c:	4a0b      	ldr	r2, [pc, #44]	@ (80075bc <prvCheckTasksWaitingTermination+0x54>)
 800758e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007590:	4b0b      	ldr	r3, [pc, #44]	@ (80075c0 <prvCheckTasksWaitingTermination+0x58>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3b01      	subs	r3, #1
 8007596:	4a0a      	ldr	r2, [pc, #40]	@ (80075c0 <prvCheckTasksWaitingTermination+0x58>)
 8007598:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800759a:	f000 fefd 	bl	8008398 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f848 	bl	8007634 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075a4:	4b06      	ldr	r3, [pc, #24]	@ (80075c0 <prvCheckTasksWaitingTermination+0x58>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e1      	bne.n	8007570 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075ac:	bf00      	nop
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20002014 	.word	0x20002014
 80075bc:	20002040 	.word	0x20002040
 80075c0:	20002028 	.word	0x20002028

080075c4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80075d0:	e005      	b.n	80075de <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3301      	adds	r3, #1
 80075d6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3301      	adds	r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2ba5      	cmp	r3, #165	@ 0xa5
 80075e4:	d0f5      	beq.n	80075d2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	089b      	lsrs	r3, r3, #2
 80075ea:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	b29b      	uxth	r3, r3
	}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <uxTaskGetStackHighWaterMark+0x14>
 800760a:	4b09      	ldr	r3, [pc, #36]	@ (8007630 <uxTaskGetStackHighWaterMark+0x34>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	e000      	b.n	8007612 <uxTaskGetStackHighWaterMark+0x16>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007618:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800761a:	6938      	ldr	r0, [r7, #16]
 800761c:	f7ff ffd2 	bl	80075c4 <prvTaskCheckFreeStackSpace>
 8007620:	4603      	mov	r3, r0
 8007622:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8007624:	68fb      	ldr	r3, [r7, #12]
	}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20001b6c 	.word	0x20001b6c

08007634 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3354      	adds	r3, #84	@ 0x54
 8007640:	4618      	mov	r0, r3
 8007642:	f001 f993 	bl	800896c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800764c:	2b00      	cmp	r3, #0
 800764e:	d108      	bne.n	8007662 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007654:	4618      	mov	r0, r3
 8007656:	f001 f865 	bl	8008724 <vPortFree>
				vPortFree( pxTCB );
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 f862 	bl	8008724 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007660:	e01b      	b.n	800769a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007668:	2b01      	cmp	r3, #1
 800766a:	d103      	bne.n	8007674 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f859 	bl	8008724 <vPortFree>
	}
 8007672:	e012      	b.n	800769a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800767a:	2b02      	cmp	r3, #2
 800767c:	d00d      	beq.n	800769a <prvDeleteTCB+0x66>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	b672      	cpsid	i
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	b662      	cpsie	i
 8007692:	60fb      	str	r3, [r7, #12]
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop
 8007698:	e7fd      	b.n	8007696 <prvDeleteTCB+0x62>
	}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076aa:	4b0c      	ldr	r3, [pc, #48]	@ (80076dc <prvResetNextTaskUnblockTime+0x38>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076b4:	4b0a      	ldr	r3, [pc, #40]	@ (80076e0 <prvResetNextTaskUnblockTime+0x3c>)
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076bc:	e008      	b.n	80076d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076be:	4b07      	ldr	r3, [pc, #28]	@ (80076dc <prvResetNextTaskUnblockTime+0x38>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4a04      	ldr	r2, [pc, #16]	@ (80076e0 <prvResetNextTaskUnblockTime+0x3c>)
 80076ce:	6013      	str	r3, [r2, #0]
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	20001ff8 	.word	0x20001ff8
 80076e0:	20002060 	.word	0x20002060

080076e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <xTaskGetSchedulerState+0x34>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076f2:	2301      	movs	r3, #1
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	e008      	b.n	800770a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f8:	4b08      	ldr	r3, [pc, #32]	@ (800771c <xTaskGetSchedulerState+0x38>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007700:	2302      	movs	r3, #2
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	e001      	b.n	800770a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007706:	2300      	movs	r3, #0
 8007708:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800770a:	687b      	ldr	r3, [r7, #4]
	}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	2000204c 	.word	0x2000204c
 800771c:	20002068 	.word	0x20002068

08007720 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d05c      	beq.n	80077f0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007736:	4b31      	ldr	r3, [pc, #196]	@ (80077fc <xTaskPriorityDisinherit+0xdc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	429a      	cmp	r2, r3
 800773e:	d00d      	beq.n	800775c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	b672      	cpsid	i
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	b662      	cpsie	i
 8007754:	60fb      	str	r3, [r7, #12]
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	e7fd      	b.n	8007758 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10d      	bne.n	8007780 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	b672      	cpsid	i
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	b662      	cpsie	i
 8007778:	60bb      	str	r3, [r7, #8]
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007784:	1e5a      	subs	r2, r3, #1
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007792:	429a      	cmp	r2, r3
 8007794:	d02c      	beq.n	80077f0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800779a:	2b00      	cmp	r3, #0
 800779c:	d128      	bne.n	80077f0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fb98 	bl	8005ed8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007800 <xTaskPriorityDisinherit+0xe0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d903      	bls.n	80077d0 <xTaskPriorityDisinherit+0xb0>
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077cc:	4a0c      	ldr	r2, [pc, #48]	@ (8007800 <xTaskPriorityDisinherit+0xe0>)
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4a09      	ldr	r2, [pc, #36]	@ (8007804 <xTaskPriorityDisinherit+0xe4>)
 80077de:	441a      	add	r2, r3
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f7fe fb19 	bl	8005e1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077ec:	2301      	movs	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077f0:	697b      	ldr	r3, [r7, #20]
	}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20001b6c 	.word	0x20001b6c
 8007800:	20002048 	.word	0x20002048
 8007804:	20001b70 	.word	0x20001b70

08007808 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007812:	4b21      	ldr	r3, [pc, #132]	@ (8007898 <prvAddCurrentTaskToDelayedList+0x90>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007818:	4b20      	ldr	r3, [pc, #128]	@ (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3304      	adds	r3, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fb5a 	bl	8005ed8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	d10a      	bne.n	8007842 <prvAddCurrentTaskToDelayedList+0x3a>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007832:	4b1a      	ldr	r3, [pc, #104]	@ (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	4819      	ldr	r0, [pc, #100]	@ (80078a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800783c:	f7fe faef 	bl	8005e1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007840:	e026      	b.n	8007890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4413      	add	r3, r2
 8007848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800784a:	4b14      	ldr	r3, [pc, #80]	@ (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	429a      	cmp	r2, r3
 8007858:	d209      	bcs.n	800786e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800785a:	4b12      	ldr	r3, [pc, #72]	@ (80078a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4b0f      	ldr	r3, [pc, #60]	@ (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3304      	adds	r3, #4
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	f7fe fafd 	bl	8005e66 <vListInsert>
}
 800786c:	e010      	b.n	8007890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800786e:	4b0e      	ldr	r3, [pc, #56]	@ (80078a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4b0a      	ldr	r3, [pc, #40]	@ (800789c <prvAddCurrentTaskToDelayedList+0x94>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4610      	mov	r0, r2
 800787c:	f7fe faf3 	bl	8005e66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007880:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	429a      	cmp	r2, r3
 8007888:	d202      	bcs.n	8007890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800788a:	4a08      	ldr	r2, [pc, #32]	@ (80078ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6013      	str	r3, [r2, #0]
}
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20002044 	.word	0x20002044
 800789c:	20001b6c 	.word	0x20001b6c
 80078a0:	2000202c 	.word	0x2000202c
 80078a4:	20001ffc 	.word	0x20001ffc
 80078a8:	20001ff8 	.word	0x20001ff8
 80078ac:	20002060 	.word	0x20002060

080078b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	@ 0x28
 80078b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078ba:	f000 fbc5 	bl	8008048 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078be:	4b1e      	ldr	r3, [pc, #120]	@ (8007938 <xTimerCreateTimerTask+0x88>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d021      	beq.n	800790a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078ce:	1d3a      	adds	r2, r7, #4
 80078d0:	f107 0108 	add.w	r1, r7, #8
 80078d4:	f107 030c 	add.w	r3, r7, #12
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fa59 	bl	8005d90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	9202      	str	r2, [sp, #8]
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	2308      	movs	r3, #8
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	2300      	movs	r3, #0
 80078ee:	460a      	mov	r2, r1
 80078f0:	4912      	ldr	r1, [pc, #72]	@ (800793c <xTimerCreateTimerTask+0x8c>)
 80078f2:	4813      	ldr	r0, [pc, #76]	@ (8007940 <xTimerCreateTimerTask+0x90>)
 80078f4:	f7ff f834 	bl	8006960 <xTaskCreateStatic>
 80078f8:	4603      	mov	r3, r0
 80078fa:	4a12      	ldr	r2, [pc, #72]	@ (8007944 <xTimerCreateTimerTask+0x94>)
 80078fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078fe:	4b11      	ldr	r3, [pc, #68]	@ (8007944 <xTimerCreateTimerTask+0x94>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007906:	2301      	movs	r3, #1
 8007908:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10d      	bne.n	800792c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007914:	b672      	cpsid	i
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	b662      	cpsie	i
 8007924:	613b      	str	r3, [r7, #16]
}
 8007926:	bf00      	nop
 8007928:	bf00      	nop
 800792a:	e7fd      	b.n	8007928 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800792c:	697b      	ldr	r3, [r7, #20]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	2000209c 	.word	0x2000209c
 800793c:	08008bf8 	.word	0x08008bf8
 8007940:	08007bd1 	.word	0x08007bd1
 8007944:	200020a0 	.word	0x200020a0

08007948 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007956:	202c      	movs	r0, #44	@ 0x2c
 8007958:	f000 fe16 	bl	8008588 <pvPortMalloc>
 800795c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00d      	beq.n	8007980 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f849 	bl	8007a12 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007980:	697b      	ldr	r3, [r7, #20]
	}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800798a:	b580      	push	{r7, lr}
 800798c:	b08a      	sub	sp, #40	@ 0x28
 800798e:	af02      	add	r7, sp, #8
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
 8007996:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007998:	232c      	movs	r3, #44	@ 0x2c
 800799a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2b2c      	cmp	r3, #44	@ 0x2c
 80079a0:	d00d      	beq.n	80079be <xTimerCreateStatic+0x34>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a6:	b672      	cpsid	i
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	b662      	cpsie	i
 80079b6:	61bb      	str	r3, [r7, #24]
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	e7fd      	b.n	80079ba <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80079c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10d      	bne.n	80079e2 <xTimerCreateStatic+0x58>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ca:	b672      	cpsid	i
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	b662      	cpsie	i
 80079da:	617b      	str	r3, [r7, #20]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <xTimerCreateStatic+0x54>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80079e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00d      	beq.n	8007a08 <xTimerCreateStatic+0x7e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 f805 	bl	8007a12 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007a08:	69fb      	ldr	r3, [r7, #28]
	}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b086      	sub	sp, #24
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	607a      	str	r2, [r7, #4]
 8007a1e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10d      	bne.n	8007a42 <prvInitialiseNewTimer+0x30>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	b672      	cpsid	i
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	b662      	cpsie	i
 8007a3a:	617b      	str	r3, [r7, #20]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01e      	beq.n	8007a86 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007a48:	f000 fafe 	bl	8008048 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	6a3a      	ldr	r2, [r7, #32]
 8007a62:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a66:	3304      	adds	r3, #4
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fe f9cb 	bl	8005e04 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d008      	beq.n	8007a86 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a7a:	f043 0304 	orr.w	r3, r3, #4
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007a86:	bf00      	nop
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08a      	sub	sp, #40	@ 0x28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10d      	bne.n	8007ac4 <xTimerGenericCommand+0x34>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	b672      	cpsid	i
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	b662      	cpsie	i
 8007abc:	623b      	str	r3, [r7, #32]
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ac4:	4b19      	ldr	r3, [pc, #100]	@ (8007b2c <xTimerGenericCommand+0x9c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d02a      	beq.n	8007b22 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b05      	cmp	r3, #5
 8007adc:	dc18      	bgt.n	8007b10 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ade:	f7ff fe01 	bl	80076e4 <xTaskGetSchedulerState>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d109      	bne.n	8007afc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ae8:	4b10      	ldr	r3, [pc, #64]	@ (8007b2c <xTimerGenericCommand+0x9c>)
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	f107 0110 	add.w	r1, r7, #16
 8007af0:	2300      	movs	r3, #0
 8007af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af4:	f7fe fb30 	bl	8006158 <xQueueGenericSend>
 8007af8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007afa:	e012      	b.n	8007b22 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007afc:	4b0b      	ldr	r3, [pc, #44]	@ (8007b2c <xTimerGenericCommand+0x9c>)
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	f107 0110 	add.w	r1, r7, #16
 8007b04:	2300      	movs	r3, #0
 8007b06:	2200      	movs	r2, #0
 8007b08:	f7fe fb26 	bl	8006158 <xQueueGenericSend>
 8007b0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b0e:	e008      	b.n	8007b22 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b10:	4b06      	ldr	r3, [pc, #24]	@ (8007b2c <xTimerGenericCommand+0x9c>)
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	f107 0110 	add.w	r1, r7, #16
 8007b18:	2300      	movs	r3, #0
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	f7fe fc26 	bl	800636c <xQueueGenericSendFromISR>
 8007b20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3728      	adds	r7, #40	@ 0x28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	2000209c 	.word	0x2000209c

08007b30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b3a:	4b24      	ldr	r3, [pc, #144]	@ (8007bcc <prvProcessExpiredTimer+0x9c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe f9c5 	bl	8005ed8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d025      	beq.n	8007ba8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	18d1      	adds	r1, r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	6978      	ldr	r0, [r7, #20]
 8007b6a:	f000 f8d7 	bl	8007d1c <prvInsertTimerInActiveList>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d022      	beq.n	8007bba <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b74:	2300      	movs	r3, #0
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	6978      	ldr	r0, [r7, #20]
 8007b80:	f7ff ff86 	bl	8007a90 <xTimerGenericCommand>
 8007b84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d116      	bne.n	8007bba <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b90:	b672      	cpsid	i
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	b662      	cpsie	i
 8007ba0:	60fb      	str	r3, [r7, #12]
}
 8007ba2:	bf00      	nop
 8007ba4:	bf00      	nop
 8007ba6:	e7fd      	b.n	8007ba4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bae:	f023 0301 	bic.w	r3, r3, #1
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	6978      	ldr	r0, [r7, #20]
 8007bc0:	4798      	blx	r3
}
 8007bc2:	bf00      	nop
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20002094 	.word	0x20002094

08007bd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bd8:	f107 0308 	add.w	r3, r7, #8
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f859 	bl	8007c94 <prvGetNextExpireTime>
 8007be2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4619      	mov	r1, r3
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f805 	bl	8007bf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bee:	f000 f8d7 	bl	8007da0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bf2:	bf00      	nop
 8007bf4:	e7f0      	b.n	8007bd8 <prvTimerTask+0x8>
	...

08007bf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c02:	f7ff f91f 	bl	8006e44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c06:	f107 0308 	add.w	r3, r7, #8
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f866 	bl	8007cdc <prvSampleTimeNow>
 8007c10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d130      	bne.n	8007c7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <prvProcessTimerOrBlockTask+0x3c>
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d806      	bhi.n	8007c34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c26:	f7ff f91b 	bl	8006e60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c2a:	68f9      	ldr	r1, [r7, #12]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff ff7f 	bl	8007b30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c32:	e024      	b.n	8007c7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d008      	beq.n	8007c4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c3a:	4b13      	ldr	r3, [pc, #76]	@ (8007c88 <prvProcessTimerOrBlockTask+0x90>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <prvProcessTimerOrBlockTask+0x50>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e000      	b.n	8007c4a <prvProcessTimerOrBlockTask+0x52>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007c8c <prvProcessTimerOrBlockTask+0x94>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f7fe fe4d 	bl	80068f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c5e:	f7ff f8ff 	bl	8006e60 <xTaskResumeAll>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c68:	4b09      	ldr	r3, [pc, #36]	@ (8007c90 <prvProcessTimerOrBlockTask+0x98>)
 8007c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	f3bf 8f6f 	isb	sy
}
 8007c78:	e001      	b.n	8007c7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c7a:	f7ff f8f1 	bl	8006e60 <xTaskResumeAll>
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20002098 	.word	0x20002098
 8007c8c:	2000209c 	.word	0x2000209c
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd8 <prvGetNextExpireTime+0x44>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <prvGetNextExpireTime+0x16>
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	e000      	b.n	8007cac <prvGetNextExpireTime+0x18>
 8007caa:	2200      	movs	r2, #0
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d105      	bne.n	8007cc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cb8:	4b07      	ldr	r3, [pc, #28]	@ (8007cd8 <prvGetNextExpireTime+0x44>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	e001      	b.n	8007cc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	20002094 	.word	0x20002094

08007cdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ce4:	f7ff f95c 	bl	8006fa0 <xTaskGetTickCount>
 8007ce8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cea:	4b0b      	ldr	r3, [pc, #44]	@ (8007d18 <prvSampleTimeNow+0x3c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d205      	bcs.n	8007d00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007cf4:	f000 f940 	bl	8007f78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d06:	4a04      	ldr	r2, [pc, #16]	@ (8007d18 <prvSampleTimeNow+0x3c>)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	200020a4 	.word	0x200020a4

08007d1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d812      	bhi.n	8007d68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	1ad2      	subs	r2, r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d302      	bcc.n	8007d56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d50:	2301      	movs	r3, #1
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	e01b      	b.n	8007d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d56:	4b10      	ldr	r3, [pc, #64]	@ (8007d98 <prvInsertTimerInActiveList+0x7c>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4610      	mov	r0, r2
 8007d62:	f7fe f880 	bl	8005e66 <vListInsert>
 8007d66:	e012      	b.n	8007d8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d206      	bcs.n	8007d7e <prvInsertTimerInActiveList+0x62>
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d302      	bcc.n	8007d7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	e007      	b.n	8007d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d7e:	4b07      	ldr	r3, [pc, #28]	@ (8007d9c <prvInsertTimerInActiveList+0x80>)
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f7fe f86c 	bl	8005e66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d8e:	697b      	ldr	r3, [r7, #20]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20002098 	.word	0x20002098
 8007d9c:	20002094 	.word	0x20002094

08007da0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08e      	sub	sp, #56	@ 0x38
 8007da4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007da6:	e0d4      	b.n	8007f52 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	da1b      	bge.n	8007de6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dae:	1d3b      	adds	r3, r7, #4
 8007db0:	3304      	adds	r3, #4
 8007db2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10d      	bne.n	8007dd6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbe:	b672      	cpsid	i
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	b662      	cpsie	i
 8007dce:	61fb      	str	r3, [r7, #28]
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	e7fd      	b.n	8007dd2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ddc:	6850      	ldr	r0, [r2, #4]
 8007dde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007de0:	6892      	ldr	r2, [r2, #8]
 8007de2:	4611      	mov	r1, r2
 8007de4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f2c0 80b2 	blt.w	8007f52 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe f86a 	bl	8005ed8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e04:	463b      	mov	r3, r7
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff ff68 	bl	8007cdc <prvSampleTimeNow>
 8007e0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b09      	cmp	r3, #9
 8007e12:	f200 809b 	bhi.w	8007f4c <prvProcessReceivedCommands+0x1ac>
 8007e16:	a201      	add	r2, pc, #4	@ (adr r2, 8007e1c <prvProcessReceivedCommands+0x7c>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e45 	.word	0x08007e45
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e45 	.word	0x08007e45
 8007e28:	08007ebf 	.word	0x08007ebf
 8007e2c:	08007ed3 	.word	0x08007ed3
 8007e30:	08007f23 	.word	0x08007f23
 8007e34:	08007e45 	.word	0x08007e45
 8007e38:	08007e45 	.word	0x08007e45
 8007e3c:	08007ebf 	.word	0x08007ebf
 8007e40:	08007ed3 	.word	0x08007ed3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e4a:	f043 0301 	orr.w	r3, r3, #1
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	18d1      	adds	r1, r2, r3
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e64:	f7ff ff5a 	bl	8007d1c <prvInsertTimerInActiveList>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d070      	beq.n	8007f50 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d065      	beq.n	8007f50 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	441a      	add	r2, r3
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2300      	movs	r3, #0
 8007e92:	2100      	movs	r1, #0
 8007e94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e96:	f7ff fdfb 	bl	8007a90 <xTimerGenericCommand>
 8007e9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d156      	bne.n	8007f50 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	b672      	cpsid	i
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	b662      	cpsie	i
 8007eb6:	61bb      	str	r3, [r7, #24]
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	e7fd      	b.n	8007eba <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ec4:	f023 0301 	bic.w	r3, r3, #1
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ecc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007ed0:	e03f      	b.n	8007f52 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ed8:	f043 0301 	orr.w	r3, r3, #1
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10d      	bne.n	8007f0e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef6:	b672      	cpsid	i
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	b662      	cpsie	i
 8007f06:	617b      	str	r3, [r7, #20]
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	e7fd      	b.n	8007f0a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	18d1      	adds	r1, r2, r3
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f1c:	f7ff fefe 	bl	8007d1c <prvInsertTimerInActiveList>
					break;
 8007f20:	e017      	b.n	8007f52 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d103      	bne.n	8007f38 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f32:	f000 fbf7 	bl	8008724 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f36:	e00c      	b.n	8007f52 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f4a:	e002      	b.n	8007f52 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007f4c:	bf00      	nop
 8007f4e:	e000      	b.n	8007f52 <prvProcessReceivedCommands+0x1b2>
					break;
 8007f50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f52:	4b08      	ldr	r3, [pc, #32]	@ (8007f74 <prvProcessReceivedCommands+0x1d4>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	1d39      	adds	r1, r7, #4
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe faaa 	bl	80064b4 <xQueueReceive>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f47f af20 	bne.w	8007da8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	3730      	adds	r7, #48	@ 0x30
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	2000209c 	.word	0x2000209c

08007f78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f7e:	e04b      	b.n	8008018 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f80:	4b2f      	ldr	r3, [pc, #188]	@ (8008040 <prvSwitchTimerLists+0xc8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8008040 <prvSwitchTimerLists+0xc8>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fd ff9d 	bl	8005ed8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d031      	beq.n	8008018 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	4413      	add	r3, r2
 8007fbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d90e      	bls.n	8007fe4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8008040 <prvSwitchTimerLists+0xc8>)
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4610      	mov	r0, r2
 8007fde:	f7fd ff42 	bl	8005e66 <vListInsert>
 8007fe2:	e019      	b.n	8008018 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	2100      	movs	r1, #0
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff fd4e 	bl	8007a90 <xTimerGenericCommand>
 8007ff4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10d      	bne.n	8008018 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008000:	b672      	cpsid	i
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	b662      	cpsie	i
 8008010:	603b      	str	r3, [r7, #0]
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008018:	4b09      	ldr	r3, [pc, #36]	@ (8008040 <prvSwitchTimerLists+0xc8>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1ae      	bne.n	8007f80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008022:	4b07      	ldr	r3, [pc, #28]	@ (8008040 <prvSwitchTimerLists+0xc8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008028:	4b06      	ldr	r3, [pc, #24]	@ (8008044 <prvSwitchTimerLists+0xcc>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a04      	ldr	r2, [pc, #16]	@ (8008040 <prvSwitchTimerLists+0xc8>)
 800802e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008030:	4a04      	ldr	r2, [pc, #16]	@ (8008044 <prvSwitchTimerLists+0xcc>)
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	6013      	str	r3, [r2, #0]
}
 8008036:	bf00      	nop
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20002094 	.word	0x20002094
 8008044:	20002098 	.word	0x20002098

08008048 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800804e:	f000 f96d 	bl	800832c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008052:	4b15      	ldr	r3, [pc, #84]	@ (80080a8 <prvCheckForValidListAndQueue+0x60>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d120      	bne.n	800809c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800805a:	4814      	ldr	r0, [pc, #80]	@ (80080ac <prvCheckForValidListAndQueue+0x64>)
 800805c:	f7fd feb2 	bl	8005dc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008060:	4813      	ldr	r0, [pc, #76]	@ (80080b0 <prvCheckForValidListAndQueue+0x68>)
 8008062:	f7fd feaf 	bl	8005dc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008066:	4b13      	ldr	r3, [pc, #76]	@ (80080b4 <prvCheckForValidListAndQueue+0x6c>)
 8008068:	4a10      	ldr	r2, [pc, #64]	@ (80080ac <prvCheckForValidListAndQueue+0x64>)
 800806a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800806c:	4b12      	ldr	r3, [pc, #72]	@ (80080b8 <prvCheckForValidListAndQueue+0x70>)
 800806e:	4a10      	ldr	r2, [pc, #64]	@ (80080b0 <prvCheckForValidListAndQueue+0x68>)
 8008070:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008072:	2300      	movs	r3, #0
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	4b11      	ldr	r3, [pc, #68]	@ (80080bc <prvCheckForValidListAndQueue+0x74>)
 8008078:	4a11      	ldr	r2, [pc, #68]	@ (80080c0 <prvCheckForValidListAndQueue+0x78>)
 800807a:	2110      	movs	r1, #16
 800807c:	200a      	movs	r0, #10
 800807e:	f7fd ffc1 	bl	8006004 <xQueueGenericCreateStatic>
 8008082:	4603      	mov	r3, r0
 8008084:	4a08      	ldr	r2, [pc, #32]	@ (80080a8 <prvCheckForValidListAndQueue+0x60>)
 8008086:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008088:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <prvCheckForValidListAndQueue+0x60>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008090:	4b05      	ldr	r3, [pc, #20]	@ (80080a8 <prvCheckForValidListAndQueue+0x60>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	490b      	ldr	r1, [pc, #44]	@ (80080c4 <prvCheckForValidListAndQueue+0x7c>)
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fc04 	bl	80068a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800809c:	f000 f97c 	bl	8008398 <vPortExitCritical>
}
 80080a0:	bf00      	nop
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	2000209c 	.word	0x2000209c
 80080ac:	2000206c 	.word	0x2000206c
 80080b0:	20002080 	.word	0x20002080
 80080b4:	20002094 	.word	0x20002094
 80080b8:	20002098 	.word	0x20002098
 80080bc:	20002148 	.word	0x20002148
 80080c0:	200020a8 	.word	0x200020a8
 80080c4:	08008c00 	.word	0x08008c00

080080c8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10d      	bne.n	80080f6 <pvTimerGetTimerID+0x2e>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080de:	b672      	cpsid	i
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	b662      	cpsie	i
 80080ee:	60fb      	str	r3, [r7, #12]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 80080f6:	f000 f919 	bl	800832c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008100:	f000 f94a 	bl	8008398 <vPortExitCritical>

	return pvReturn;
 8008104:	693b      	ldr	r3, [r7, #16]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3b04      	subs	r3, #4
 8008120:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b04      	subs	r3, #4
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f023 0201 	bic.w	r2, r3, #1
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3b04      	subs	r3, #4
 800813e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008140:	4a0c      	ldr	r2, [pc, #48]	@ (8008174 <pxPortInitialiseStack+0x64>)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3b14      	subs	r3, #20
 800814a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	3b04      	subs	r3, #4
 8008156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f06f 0202 	mvn.w	r2, #2
 800815e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3b20      	subs	r3, #32
 8008164:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008166:	68fb      	ldr	r3, [r7, #12]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	08008179 	.word	0x08008179

08008178 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008182:	4b15      	ldr	r3, [pc, #84]	@ (80081d8 <prvTaskExitError+0x60>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818a:	d00d      	beq.n	80081a8 <prvTaskExitError+0x30>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	b672      	cpsid	i
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	b662      	cpsie	i
 80081a0:	60fb      	str	r3, [r7, #12]
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	e7fd      	b.n	80081a4 <prvTaskExitError+0x2c>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ac:	b672      	cpsid	i
 80081ae:	f383 8811 	msr	BASEPRI, r3
 80081b2:	f3bf 8f6f 	isb	sy
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	b662      	cpsie	i
 80081bc:	60bb      	str	r3, [r7, #8]
}
 80081be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081c0:	bf00      	nop
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0fc      	beq.n	80081c2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081c8:	bf00      	nop
 80081ca:	bf00      	nop
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	2000000c 	.word	0x2000000c
 80081dc:	00000000 	.word	0x00000000

080081e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081e0:	4b07      	ldr	r3, [pc, #28]	@ (8008200 <pxCurrentTCBConst2>)
 80081e2:	6819      	ldr	r1, [r3, #0]
 80081e4:	6808      	ldr	r0, [r1, #0]
 80081e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ea:	f380 8809 	msr	PSP, r0
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f04f 0000 	mov.w	r0, #0
 80081f6:	f380 8811 	msr	BASEPRI, r0
 80081fa:	4770      	bx	lr
 80081fc:	f3af 8000 	nop.w

08008200 <pxCurrentTCBConst2>:
 8008200:	20001b6c 	.word	0x20001b6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop

08008208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008208:	4808      	ldr	r0, [pc, #32]	@ (800822c <prvPortStartFirstTask+0x24>)
 800820a:	6800      	ldr	r0, [r0, #0]
 800820c:	6800      	ldr	r0, [r0, #0]
 800820e:	f380 8808 	msr	MSP, r0
 8008212:	f04f 0000 	mov.w	r0, #0
 8008216:	f380 8814 	msr	CONTROL, r0
 800821a:	b662      	cpsie	i
 800821c:	b661      	cpsie	f
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	df00      	svc	0
 8008228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800822a:	bf00      	nop
 800822c:	e000ed08 	.word	0xe000ed08

08008230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008236:	4b37      	ldr	r3, [pc, #220]	@ (8008314 <xPortStartScheduler+0xe4>)
 8008238:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	22ff      	movs	r2, #255	@ 0xff
 8008246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008258:	b2da      	uxtb	r2, r3
 800825a:	4b2f      	ldr	r3, [pc, #188]	@ (8008318 <xPortStartScheduler+0xe8>)
 800825c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800825e:	4b2f      	ldr	r3, [pc, #188]	@ (800831c <xPortStartScheduler+0xec>)
 8008260:	2207      	movs	r2, #7
 8008262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008264:	e009      	b.n	800827a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008266:	4b2d      	ldr	r3, [pc, #180]	@ (800831c <xPortStartScheduler+0xec>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3b01      	subs	r3, #1
 800826c:	4a2b      	ldr	r2, [pc, #172]	@ (800831c <xPortStartScheduler+0xec>)
 800826e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008282:	2b80      	cmp	r3, #128	@ 0x80
 8008284:	d0ef      	beq.n	8008266 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008286:	4b25      	ldr	r3, [pc, #148]	@ (800831c <xPortStartScheduler+0xec>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f1c3 0307 	rsb	r3, r3, #7
 800828e:	2b04      	cmp	r3, #4
 8008290:	d00d      	beq.n	80082ae <xPortStartScheduler+0x7e>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	b672      	cpsid	i
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	b662      	cpsie	i
 80082a6:	60bb      	str	r3, [r7, #8]
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082ae:	4b1b      	ldr	r3, [pc, #108]	@ (800831c <xPortStartScheduler+0xec>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	4a19      	ldr	r2, [pc, #100]	@ (800831c <xPortStartScheduler+0xec>)
 80082b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082b8:	4b18      	ldr	r3, [pc, #96]	@ (800831c <xPortStartScheduler+0xec>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082c0:	4a16      	ldr	r2, [pc, #88]	@ (800831c <xPortStartScheduler+0xec>)
 80082c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082cc:	4b14      	ldr	r3, [pc, #80]	@ (8008320 <xPortStartScheduler+0xf0>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a13      	ldr	r2, [pc, #76]	@ (8008320 <xPortStartScheduler+0xf0>)
 80082d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082d8:	4b11      	ldr	r3, [pc, #68]	@ (8008320 <xPortStartScheduler+0xf0>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a10      	ldr	r2, [pc, #64]	@ (8008320 <xPortStartScheduler+0xf0>)
 80082de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80082e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082e4:	f000 f8dc 	bl	80084a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008324 <xPortStartScheduler+0xf4>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082ee:	f000 f8fb 	bl	80084e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008328 <xPortStartScheduler+0xf8>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008328 <xPortStartScheduler+0xf8>)
 80082f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80082fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082fe:	f7ff ff83 	bl	8008208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008302:	f7fe ff2b 	bl	800715c <vTaskSwitchContext>
	prvTaskExitError();
 8008306:	f7ff ff37 	bl	8008178 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	e000e400 	.word	0xe000e400
 8008318:	20002198 	.word	0x20002198
 800831c:	2000219c 	.word	0x2000219c
 8008320:	e000ed20 	.word	0xe000ed20
 8008324:	2000000c 	.word	0x2000000c
 8008328:	e000ef34 	.word	0xe000ef34

0800832c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008336:	b672      	cpsid	i
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	b662      	cpsie	i
 8008346:	607b      	str	r3, [r7, #4]
}
 8008348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800834a:	4b11      	ldr	r3, [pc, #68]	@ (8008390 <vPortEnterCritical+0x64>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3301      	adds	r3, #1
 8008350:	4a0f      	ldr	r2, [pc, #60]	@ (8008390 <vPortEnterCritical+0x64>)
 8008352:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008354:	4b0e      	ldr	r3, [pc, #56]	@ (8008390 <vPortEnterCritical+0x64>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d112      	bne.n	8008382 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800835c:	4b0d      	ldr	r3, [pc, #52]	@ (8008394 <vPortEnterCritical+0x68>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00d      	beq.n	8008382 <vPortEnterCritical+0x56>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	b672      	cpsid	i
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	b662      	cpsie	i
 800837a:	603b      	str	r3, [r7, #0]
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	e7fd      	b.n	800837e <vPortEnterCritical+0x52>
	}
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	2000000c 	.word	0x2000000c
 8008394:	e000ed04 	.word	0xe000ed04

08008398 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800839e:	4b13      	ldr	r3, [pc, #76]	@ (80083ec <vPortExitCritical+0x54>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10d      	bne.n	80083c2 <vPortExitCritical+0x2a>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083aa:	b672      	cpsid	i
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	b662      	cpsie	i
 80083ba:	607b      	str	r3, [r7, #4]
}
 80083bc:	bf00      	nop
 80083be:	bf00      	nop
 80083c0:	e7fd      	b.n	80083be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80083c2:	4b0a      	ldr	r3, [pc, #40]	@ (80083ec <vPortExitCritical+0x54>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	4a08      	ldr	r2, [pc, #32]	@ (80083ec <vPortExitCritical+0x54>)
 80083ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083cc:	4b07      	ldr	r3, [pc, #28]	@ (80083ec <vPortExitCritical+0x54>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d105      	bne.n	80083e0 <vPortExitCritical+0x48>
 80083d4:	2300      	movs	r3, #0
 80083d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f383 8811 	msr	BASEPRI, r3
}
 80083de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	2000000c 	.word	0x2000000c

080083f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083f0:	f3ef 8009 	mrs	r0, PSP
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	4b15      	ldr	r3, [pc, #84]	@ (8008450 <pxCurrentTCBConst>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	f01e 0f10 	tst.w	lr, #16
 8008400:	bf08      	it	eq
 8008402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	6010      	str	r0, [r2, #0]
 800840c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008410:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008414:	b672      	cpsid	i
 8008416:	f380 8811 	msr	BASEPRI, r0
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	b662      	cpsie	i
 8008424:	f7fe fe9a 	bl	800715c <vTaskSwitchContext>
 8008428:	f04f 0000 	mov.w	r0, #0
 800842c:	f380 8811 	msr	BASEPRI, r0
 8008430:	bc09      	pop	{r0, r3}
 8008432:	6819      	ldr	r1, [r3, #0]
 8008434:	6808      	ldr	r0, [r1, #0]
 8008436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843a:	f01e 0f10 	tst.w	lr, #16
 800843e:	bf08      	it	eq
 8008440:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008444:	f380 8809 	msr	PSP, r0
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop

08008450 <pxCurrentTCBConst>:
 8008450:	20001b6c 	.word	0x20001b6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop

08008458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	b672      	cpsid	i
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	b662      	cpsie	i
 8008472:	607b      	str	r3, [r7, #4]
}
 8008474:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008476:	f7fe fdb5 	bl	8006fe4 <xTaskIncrementTick>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008480:	4b06      	ldr	r3, [pc, #24]	@ (800849c <xPortSysTickHandler+0x44>)
 8008482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	f383 8811 	msr	BASEPRI, r3
}
 8008492:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	e000ed04 	.word	0xe000ed04

080084a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084a4:	4b0b      	ldr	r3, [pc, #44]	@ (80084d4 <vPortSetupTimerInterrupt+0x34>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084aa:	4b0b      	ldr	r3, [pc, #44]	@ (80084d8 <vPortSetupTimerInterrupt+0x38>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084b0:	4b0a      	ldr	r3, [pc, #40]	@ (80084dc <vPortSetupTimerInterrupt+0x3c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a0a      	ldr	r2, [pc, #40]	@ (80084e0 <vPortSetupTimerInterrupt+0x40>)
 80084b6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ba:	099b      	lsrs	r3, r3, #6
 80084bc:	4a09      	ldr	r2, [pc, #36]	@ (80084e4 <vPortSetupTimerInterrupt+0x44>)
 80084be:	3b01      	subs	r3, #1
 80084c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084c2:	4b04      	ldr	r3, [pc, #16]	@ (80084d4 <vPortSetupTimerInterrupt+0x34>)
 80084c4:	2207      	movs	r2, #7
 80084c6:	601a      	str	r2, [r3, #0]
}
 80084c8:	bf00      	nop
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	e000e010 	.word	0xe000e010
 80084d8:	e000e018 	.word	0xe000e018
 80084dc:	20000000 	.word	0x20000000
 80084e0:	10624dd3 	.word	0x10624dd3
 80084e4:	e000e014 	.word	0xe000e014

080084e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80084f8 <vPortEnableVFP+0x10>
 80084ec:	6801      	ldr	r1, [r0, #0]
 80084ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084f2:	6001      	str	r1, [r0, #0]
 80084f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084f6:	bf00      	nop
 80084f8:	e000ed88 	.word	0xe000ed88

080084fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008502:	f3ef 8305 	mrs	r3, IPSR
 8008506:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b0f      	cmp	r3, #15
 800850c:	d917      	bls.n	800853e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800850e:	4a1a      	ldr	r2, [pc, #104]	@ (8008578 <vPortValidateInterruptPriority+0x7c>)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008518:	4b18      	ldr	r3, [pc, #96]	@ (800857c <vPortValidateInterruptPriority+0x80>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	7afa      	ldrb	r2, [r7, #11]
 800851e:	429a      	cmp	r2, r3
 8008520:	d20d      	bcs.n	800853e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008526:	b672      	cpsid	i
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	b662      	cpsie	i
 8008536:	607b      	str	r3, [r7, #4]
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	e7fd      	b.n	800853a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800853e:	4b10      	ldr	r3, [pc, #64]	@ (8008580 <vPortValidateInterruptPriority+0x84>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008546:	4b0f      	ldr	r3, [pc, #60]	@ (8008584 <vPortValidateInterruptPriority+0x88>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d90d      	bls.n	800856a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	b672      	cpsid	i
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	b662      	cpsie	i
 8008562:	603b      	str	r3, [r7, #0]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <vPortValidateInterruptPriority+0x6a>
	}
 800856a:	bf00      	nop
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	e000e3f0 	.word	0xe000e3f0
 800857c:	20002198 	.word	0x20002198
 8008580:	e000ed0c 	.word	0xe000ed0c
 8008584:	2000219c 	.word	0x2000219c

08008588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	@ 0x28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008594:	f7fe fc56 	bl	8006e44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008598:	4b5d      	ldr	r3, [pc, #372]	@ (8008710 <pvPortMalloc+0x188>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085a0:	f000 f920 	bl	80087e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085a4:	4b5b      	ldr	r3, [pc, #364]	@ (8008714 <pvPortMalloc+0x18c>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 8094 	bne.w	80086da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d020      	beq.n	80085fa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80085b8:	2208      	movs	r2, #8
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4413      	add	r3, r2
 80085be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d017      	beq.n	80085fa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f023 0307 	bic.w	r3, r3, #7
 80085d0:	3308      	adds	r3, #8
 80085d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00d      	beq.n	80085fa <pvPortMalloc+0x72>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	b672      	cpsid	i
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	b662      	cpsie	i
 80085f2:	617b      	str	r3, [r7, #20]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d06c      	beq.n	80086da <pvPortMalloc+0x152>
 8008600:	4b45      	ldr	r3, [pc, #276]	@ (8008718 <pvPortMalloc+0x190>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d867      	bhi.n	80086da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800860a:	4b44      	ldr	r3, [pc, #272]	@ (800871c <pvPortMalloc+0x194>)
 800860c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800860e:	4b43      	ldr	r3, [pc, #268]	@ (800871c <pvPortMalloc+0x194>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008614:	e004      	b.n	8008620 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d903      	bls.n	8008632 <pvPortMalloc+0xaa>
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f1      	bne.n	8008616 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008632:	4b37      	ldr	r3, [pc, #220]	@ (8008710 <pvPortMalloc+0x188>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008638:	429a      	cmp	r2, r3
 800863a:	d04e      	beq.n	80086da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2208      	movs	r2, #8
 8008642:	4413      	add	r3, r2
 8008644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	1ad2      	subs	r2, r2, r3
 8008656:	2308      	movs	r3, #8
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	429a      	cmp	r2, r3
 800865c:	d922      	bls.n	80086a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800865e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00d      	beq.n	800868c <pvPortMalloc+0x104>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008674:	b672      	cpsid	i
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	b662      	cpsie	i
 8008684:	613b      	str	r3, [r7, #16]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800869e:	69b8      	ldr	r0, [r7, #24]
 80086a0:	f000 f902 	bl	80088a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008718 <pvPortMalloc+0x190>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008718 <pvPortMalloc+0x190>)
 80086b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086b2:	4b19      	ldr	r3, [pc, #100]	@ (8008718 <pvPortMalloc+0x190>)
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008720 <pvPortMalloc+0x198>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d203      	bcs.n	80086c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086be:	4b16      	ldr	r3, [pc, #88]	@ (8008718 <pvPortMalloc+0x190>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a17      	ldr	r2, [pc, #92]	@ (8008720 <pvPortMalloc+0x198>)
 80086c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	4b12      	ldr	r3, [pc, #72]	@ (8008714 <pvPortMalloc+0x18c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086da:	f7fe fbc1 	bl	8006e60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00d      	beq.n	8008704 <pvPortMalloc+0x17c>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ec:	b672      	cpsid	i
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	b662      	cpsie	i
 80086fc:	60fb      	str	r3, [r7, #12]
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <pvPortMalloc+0x178>
	return pvReturn;
 8008704:	69fb      	ldr	r3, [r7, #28]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3728      	adds	r7, #40	@ 0x28
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20005da8 	.word	0x20005da8
 8008714:	20005db4 	.word	0x20005db4
 8008718:	20005dac 	.word	0x20005dac
 800871c:	20005da0 	.word	0x20005da0
 8008720:	20005db0 	.word	0x20005db0

08008724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d04e      	beq.n	80087d4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008736:	2308      	movs	r3, #8
 8008738:	425b      	negs	r3, r3
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	4413      	add	r3, r2
 800873e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	4b24      	ldr	r3, [pc, #144]	@ (80087dc <vPortFree+0xb8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4013      	ands	r3, r2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10d      	bne.n	800876e <vPortFree+0x4a>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008756:	b672      	cpsid	i
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	b662      	cpsie	i
 8008766:	60fb      	str	r3, [r7, #12]
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	e7fd      	b.n	800876a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00d      	beq.n	8008792 <vPortFree+0x6e>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	b672      	cpsid	i
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	b662      	cpsie	i
 800878a:	60bb      	str	r3, [r7, #8]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	4b11      	ldr	r3, [pc, #68]	@ (80087dc <vPortFree+0xb8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4013      	ands	r3, r2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d019      	beq.n	80087d4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d115      	bne.n	80087d4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	4b0b      	ldr	r3, [pc, #44]	@ (80087dc <vPortFree+0xb8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	401a      	ands	r2, r3
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087b8:	f7fe fb44 	bl	8006e44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	4b07      	ldr	r3, [pc, #28]	@ (80087e0 <vPortFree+0xbc>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4413      	add	r3, r2
 80087c6:	4a06      	ldr	r2, [pc, #24]	@ (80087e0 <vPortFree+0xbc>)
 80087c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ca:	6938      	ldr	r0, [r7, #16]
 80087cc:	f000 f86c 	bl	80088a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087d0:	f7fe fb46 	bl	8006e60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087d4:	bf00      	nop
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20005db4 	.word	0x20005db4
 80087e0:	20005dac 	.word	0x20005dac

080087e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ea:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80087ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087f0:	4b27      	ldr	r3, [pc, #156]	@ (8008890 <prvHeapInit+0xac>)
 80087f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00c      	beq.n	8008818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3307      	adds	r3, #7
 8008802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	4a1f      	ldr	r2, [pc, #124]	@ (8008890 <prvHeapInit+0xac>)
 8008814:	4413      	add	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800881c:	4a1d      	ldr	r2, [pc, #116]	@ (8008894 <prvHeapInit+0xb0>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008822:	4b1c      	ldr	r3, [pc, #112]	@ (8008894 <prvHeapInit+0xb0>)
 8008824:	2200      	movs	r2, #0
 8008826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008830:	2208      	movs	r2, #8
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a15      	ldr	r2, [pc, #84]	@ (8008898 <prvHeapInit+0xb4>)
 8008844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008846:	4b14      	ldr	r3, [pc, #80]	@ (8008898 <prvHeapInit+0xb4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800884e:	4b12      	ldr	r3, [pc, #72]	@ (8008898 <prvHeapInit+0xb4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008864:	4b0c      	ldr	r3, [pc, #48]	@ (8008898 <prvHeapInit+0xb4>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	4a0a      	ldr	r2, [pc, #40]	@ (800889c <prvHeapInit+0xb8>)
 8008872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4a09      	ldr	r2, [pc, #36]	@ (80088a0 <prvHeapInit+0xbc>)
 800887a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800887c:	4b09      	ldr	r3, [pc, #36]	@ (80088a4 <prvHeapInit+0xc0>)
 800887e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	200021a0 	.word	0x200021a0
 8008894:	20005da0 	.word	0x20005da0
 8008898:	20005da8 	.word	0x20005da8
 800889c:	20005db0 	.word	0x20005db0
 80088a0:	20005dac 	.word	0x20005dac
 80088a4:	20005db4 	.word	0x20005db4

080088a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088b0:	4b28      	ldr	r3, [pc, #160]	@ (8008954 <prvInsertBlockIntoFreeList+0xac>)
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e002      	b.n	80088bc <prvInsertBlockIntoFreeList+0x14>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d8f7      	bhi.n	80088b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d108      	bne.n	80088ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	441a      	add	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d118      	bne.n	8008930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	4b15      	ldr	r3, [pc, #84]	@ (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d00d      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	441a      	add	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e008      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008926:	4b0c      	ldr	r3, [pc, #48]	@ (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e003      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d002      	beq.n	8008946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20005da0 	.word	0x20005da0
 8008958:	20005da8 	.word	0x20005da8

0800895c <memset>:
 800895c:	4402      	add	r2, r0
 800895e:	4603      	mov	r3, r0
 8008960:	4293      	cmp	r3, r2
 8008962:	d100      	bne.n	8008966 <memset+0xa>
 8008964:	4770      	bx	lr
 8008966:	f803 1b01 	strb.w	r1, [r3], #1
 800896a:	e7f9      	b.n	8008960 <memset+0x4>

0800896c <_reclaim_reent>:
 800896c:	4b29      	ldr	r3, [pc, #164]	@ (8008a14 <_reclaim_reent+0xa8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4283      	cmp	r3, r0
 8008972:	b570      	push	{r4, r5, r6, lr}
 8008974:	4604      	mov	r4, r0
 8008976:	d04b      	beq.n	8008a10 <_reclaim_reent+0xa4>
 8008978:	69c3      	ldr	r3, [r0, #28]
 800897a:	b1ab      	cbz	r3, 80089a8 <_reclaim_reent+0x3c>
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	b16b      	cbz	r3, 800899c <_reclaim_reent+0x30>
 8008980:	2500      	movs	r5, #0
 8008982:	69e3      	ldr	r3, [r4, #28]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	5959      	ldr	r1, [r3, r5]
 8008988:	2900      	cmp	r1, #0
 800898a:	d13b      	bne.n	8008a04 <_reclaim_reent+0x98>
 800898c:	3504      	adds	r5, #4
 800898e:	2d80      	cmp	r5, #128	@ 0x80
 8008990:	d1f7      	bne.n	8008982 <_reclaim_reent+0x16>
 8008992:	69e3      	ldr	r3, [r4, #28]
 8008994:	4620      	mov	r0, r4
 8008996:	68d9      	ldr	r1, [r3, #12]
 8008998:	f000 f872 	bl	8008a80 <_free_r>
 800899c:	69e3      	ldr	r3, [r4, #28]
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	b111      	cbz	r1, 80089a8 <_reclaim_reent+0x3c>
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 f86c 	bl	8008a80 <_free_r>
 80089a8:	6961      	ldr	r1, [r4, #20]
 80089aa:	b111      	cbz	r1, 80089b2 <_reclaim_reent+0x46>
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 f867 	bl	8008a80 <_free_r>
 80089b2:	69e1      	ldr	r1, [r4, #28]
 80089b4:	b111      	cbz	r1, 80089bc <_reclaim_reent+0x50>
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 f862 	bl	8008a80 <_free_r>
 80089bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80089be:	b111      	cbz	r1, 80089c6 <_reclaim_reent+0x5a>
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 f85d 	bl	8008a80 <_free_r>
 80089c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089c8:	b111      	cbz	r1, 80089d0 <_reclaim_reent+0x64>
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 f858 	bl	8008a80 <_free_r>
 80089d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80089d2:	b111      	cbz	r1, 80089da <_reclaim_reent+0x6e>
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 f853 	bl	8008a80 <_free_r>
 80089da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80089dc:	b111      	cbz	r1, 80089e4 <_reclaim_reent+0x78>
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 f84e 	bl	8008a80 <_free_r>
 80089e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80089e6:	b111      	cbz	r1, 80089ee <_reclaim_reent+0x82>
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 f849 	bl	8008a80 <_free_r>
 80089ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80089f0:	b111      	cbz	r1, 80089f8 <_reclaim_reent+0x8c>
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f844 	bl	8008a80 <_free_r>
 80089f8:	6a23      	ldr	r3, [r4, #32]
 80089fa:	b14b      	cbz	r3, 8008a10 <_reclaim_reent+0xa4>
 80089fc:	4620      	mov	r0, r4
 80089fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a02:	4718      	bx	r3
 8008a04:	680e      	ldr	r6, [r1, #0]
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f83a 	bl	8008a80 <_free_r>
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	e7bb      	b.n	8008988 <_reclaim_reent+0x1c>
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	bf00      	nop
 8008a14:	20000010 	.word	0x20000010

08008a18 <__libc_init_array>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8008a50 <__libc_init_array+0x38>)
 8008a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8008a54 <__libc_init_array+0x3c>)
 8008a1e:	1b64      	subs	r4, r4, r5
 8008a20:	10a4      	asrs	r4, r4, #2
 8008a22:	2600      	movs	r6, #0
 8008a24:	42a6      	cmp	r6, r4
 8008a26:	d109      	bne.n	8008a3c <__libc_init_array+0x24>
 8008a28:	4d0b      	ldr	r5, [pc, #44]	@ (8008a58 <__libc_init_array+0x40>)
 8008a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8008a5c <__libc_init_array+0x44>)
 8008a2c:	f000 f87e 	bl	8008b2c <_init>
 8008a30:	1b64      	subs	r4, r4, r5
 8008a32:	10a4      	asrs	r4, r4, #2
 8008a34:	2600      	movs	r6, #0
 8008a36:	42a6      	cmp	r6, r4
 8008a38:	d105      	bne.n	8008a46 <__libc_init_array+0x2e>
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}
 8008a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a40:	4798      	blx	r3
 8008a42:	3601      	adds	r6, #1
 8008a44:	e7ee      	b.n	8008a24 <__libc_init_array+0xc>
 8008a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4a:	4798      	blx	r3
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	e7f2      	b.n	8008a36 <__libc_init_array+0x1e>
 8008a50:	08008cd0 	.word	0x08008cd0
 8008a54:	08008cd0 	.word	0x08008cd0
 8008a58:	08008cd0 	.word	0x08008cd0
 8008a5c:	08008cd4 	.word	0x08008cd4

08008a60 <__retarget_lock_acquire_recursive>:
 8008a60:	4770      	bx	lr

08008a62 <__retarget_lock_release_recursive>:
 8008a62:	4770      	bx	lr

08008a64 <memcpy>:
 8008a64:	440a      	add	r2, r1
 8008a66:	4291      	cmp	r1, r2
 8008a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a6c:	d100      	bne.n	8008a70 <memcpy+0xc>
 8008a6e:	4770      	bx	lr
 8008a70:	b510      	push	{r4, lr}
 8008a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a7a:	4291      	cmp	r1, r2
 8008a7c:	d1f9      	bne.n	8008a72 <memcpy+0xe>
 8008a7e:	bd10      	pop	{r4, pc}

08008a80 <_free_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4605      	mov	r5, r0
 8008a84:	2900      	cmp	r1, #0
 8008a86:	d041      	beq.n	8008b0c <_free_r+0x8c>
 8008a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a8c:	1f0c      	subs	r4, r1, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	bfb8      	it	lt
 8008a92:	18e4      	addlt	r4, r4, r3
 8008a94:	f000 f83e 	bl	8008b14 <__malloc_lock>
 8008a98:	4a1d      	ldr	r2, [pc, #116]	@ (8008b10 <_free_r+0x90>)
 8008a9a:	6813      	ldr	r3, [r2, #0]
 8008a9c:	b933      	cbnz	r3, 8008aac <_free_r+0x2c>
 8008a9e:	6063      	str	r3, [r4, #4]
 8008aa0:	6014      	str	r4, [r2, #0]
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aa8:	f000 b83a 	b.w	8008b20 <__malloc_unlock>
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	d908      	bls.n	8008ac2 <_free_r+0x42>
 8008ab0:	6820      	ldr	r0, [r4, #0]
 8008ab2:	1821      	adds	r1, r4, r0
 8008ab4:	428b      	cmp	r3, r1
 8008ab6:	bf01      	itttt	eq
 8008ab8:	6819      	ldreq	r1, [r3, #0]
 8008aba:	685b      	ldreq	r3, [r3, #4]
 8008abc:	1809      	addeq	r1, r1, r0
 8008abe:	6021      	streq	r1, [r4, #0]
 8008ac0:	e7ed      	b.n	8008a9e <_free_r+0x1e>
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	b10b      	cbz	r3, 8008acc <_free_r+0x4c>
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	d9fa      	bls.n	8008ac2 <_free_r+0x42>
 8008acc:	6811      	ldr	r1, [r2, #0]
 8008ace:	1850      	adds	r0, r2, r1
 8008ad0:	42a0      	cmp	r0, r4
 8008ad2:	d10b      	bne.n	8008aec <_free_r+0x6c>
 8008ad4:	6820      	ldr	r0, [r4, #0]
 8008ad6:	4401      	add	r1, r0
 8008ad8:	1850      	adds	r0, r2, r1
 8008ada:	4283      	cmp	r3, r0
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	d1e0      	bne.n	8008aa2 <_free_r+0x22>
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	6053      	str	r3, [r2, #4]
 8008ae6:	4408      	add	r0, r1
 8008ae8:	6010      	str	r0, [r2, #0]
 8008aea:	e7da      	b.n	8008aa2 <_free_r+0x22>
 8008aec:	d902      	bls.n	8008af4 <_free_r+0x74>
 8008aee:	230c      	movs	r3, #12
 8008af0:	602b      	str	r3, [r5, #0]
 8008af2:	e7d6      	b.n	8008aa2 <_free_r+0x22>
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	1821      	adds	r1, r4, r0
 8008af8:	428b      	cmp	r3, r1
 8008afa:	bf04      	itt	eq
 8008afc:	6819      	ldreq	r1, [r3, #0]
 8008afe:	685b      	ldreq	r3, [r3, #4]
 8008b00:	6063      	str	r3, [r4, #4]
 8008b02:	bf04      	itt	eq
 8008b04:	1809      	addeq	r1, r1, r0
 8008b06:	6021      	streq	r1, [r4, #0]
 8008b08:	6054      	str	r4, [r2, #4]
 8008b0a:	e7ca      	b.n	8008aa2 <_free_r+0x22>
 8008b0c:	bd38      	pop	{r3, r4, r5, pc}
 8008b0e:	bf00      	nop
 8008b10:	20005ef4 	.word	0x20005ef4

08008b14 <__malloc_lock>:
 8008b14:	4801      	ldr	r0, [pc, #4]	@ (8008b1c <__malloc_lock+0x8>)
 8008b16:	f7ff bfa3 	b.w	8008a60 <__retarget_lock_acquire_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	20005ef0 	.word	0x20005ef0

08008b20 <__malloc_unlock>:
 8008b20:	4801      	ldr	r0, [pc, #4]	@ (8008b28 <__malloc_unlock+0x8>)
 8008b22:	f7ff bf9e 	b.w	8008a62 <__retarget_lock_release_recursive>
 8008b26:	bf00      	nop
 8008b28:	20005ef0 	.word	0x20005ef0

08008b2c <_init>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr

08008b38 <_fini>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr
