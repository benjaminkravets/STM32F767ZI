
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008920  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d18  08008d18  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d20  08008d20  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08008d9c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08008e3c  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005c48  200001b4  08008edc  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005dfc  08008edc  00025dfc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000238e6  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fd4  00000000  00000000  00043ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001948  00000000  00000000  00047aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000017a0  00000000  00000000  000493e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000071c7  00000000  00000000  0004ab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bce4  00000000  00000000  00051d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010a422  00000000  00000000  0006da33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00177e55  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006d5c  00000000  00000000  00177ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08008b08 	.word	0x08008b08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08008b08 	.word	0x08008b08

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001d0 	.word	0x200001d0

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f008 f9c4 	bl	8008974 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200001d0 	.word	0x200001d0
 800067c:	08008b20 	.word	0x08008b20
 8000680:	20000278 	.word	0x20000278
 8000684:	20000678 	.word	0x20000678
 8000688:	08008bf8 	.word	0x08008bf8

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f008 f92b 	bl	8008958 <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f008 f8fd 	bl	8008958 <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001d0 	.word	0x200001d0

08000798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007b4:	f7ff ff10 	bl	80005d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b8:	f3ef 8311 	mrs	r3, BASEPRI
 80007bc:	f04f 0120 	mov.w	r1, #32
 80007c0:	f381 8811 	msr	BASEPRI, r1
 80007c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbeb      	blt.n	80007ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80007f6:	e000      	b.n	80007fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	da3f      	bge.n	8000884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3320      	adds	r3, #32
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3328      	adds	r3, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	332c      	adds	r3, #44	; 0x2c
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800087e:	f3bf 8f5f 	dmb	sy
 8000882:	e002      	b.n	800088a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001d0 	.word	0x200001d0

080008a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008bc:	f7ff fe8c 	bl	80005d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d82c      	bhi.n	8000924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800092c:	4618      	mov	r0, r3
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001d0 	.word	0x200001d0

08000938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b80      	cmp	r3, #128	; 0x80
 8000954:	d90a      	bls.n	800096c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800095a:	e007      	b.n	800096c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1c53      	adds	r3, r2, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	60f9      	str	r1, [r7, #12]
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_EncodeStr+0x46>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3307      	adds	r3, #7
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	4618      	mov	r0, r3
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fe63 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80009c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d052      	beq.n	8000a74 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b80      	cmp	r3, #128	; 0x80
 80009d2:	d031      	beq.n	8000a38 <_HandleIncomingPacket+0x88>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	dc40      	bgt.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dc15      	bgt.n	8000a08 <_HandleIncomingPacket+0x58>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd3c      	ble.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d839      	bhi.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <_HandleIncomingPacket+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a0f 	.word	0x08000a0f
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1b 	.word	0x08000a1b
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a27 	.word	0x08000a27
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a33 	.word	0x08000a33
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d035      	beq.n	8000a78 <_HandleIncomingPacket+0xc8>
 8000a0c:	e025      	b.n	8000a5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a0e:	f000 fbe5 	bl	80011dc <SEGGER_SYSVIEW_Start>
      break;
 8000a12:	e036      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a14:	f000 fc9c 	bl	8001350 <SEGGER_SYSVIEW_Stop>
      break;
 8000a18:	e033      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a1a:	f000 fe75 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a1e:	e030      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a20:	f000 fe3a 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a24:	e02d      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a26:	f000 fcb9 	bl	800139c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a2a:	e02a      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a2c:	f000 ff46 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a30:	e027      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a32:	f000 ff25 	bl	8001880 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a36:	e024      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fe22 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000a48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fe8a 	bl	800176c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a58:	e010      	b.n	8000a7c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0e      	bge.n	8000a80 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	4618      	mov	r0, r3
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fe0d 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a72:	e005      	b.n	8000a80 <_HandleIncomingPacket+0xd0>
    }
  }
 8000a74:	bf00      	nop
 8000a76:	e004      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000a90 	.word	0x20000a90

08000a90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a96:	2301      	movs	r3, #1
 8000a98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e00b      	b.n	8000ac4 <_TrySendOverflowPacket+0x34>
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d8f0      	bhi.n	8000aac <_TrySendOverflowPacket+0x1c>
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <_TrySendOverflowPacket+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e00b      	b.n	8000b0c <_TrySendOverflowPacket+0x7c>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	6279      	str	r1, [r7, #36]	; 0x24
 8000afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	09db      	lsrs	r3, r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d8f0      	bhi.n	8000af4 <_TrySendOverflowPacket+0x64>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fb84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e004      	b.n	8000b60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b60:	693b      	ldr	r3, [r7, #16]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000a90 	.word	0x20000a90
 8000b70:	e0001004 	.word	0xe0001004

08000b74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <_SendPacket+0x270>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d010      	beq.n	8000baa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <_SendPacket+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 812d 	beq.w	8000dec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d109      	bne.n	8000bae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b9a:	f7ff ff79 	bl	8000a90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <_SendPacket+0x270>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8124 	bne.w	8000df0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ba8:	e001      	b.n	8000bae <_SendPacket+0x3a>
    goto Send;
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <_SendPacket+0x3c>
Send:
 8000bae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	d809      	bhi.n	8000bca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <_SendPacket+0x270>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8115 	bne.w	8000df4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b17      	cmp	r3, #23
 8000bce:	d807      	bhi.n	8000be0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e0c4      	b.n	8000d6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d912      	bls.n	8000c14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	09da      	lsrs	r2, r3, #7
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	60fa      	str	r2, [r7, #12]
 8000c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e006      	b.n	8000c22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b7e      	cmp	r3, #126	; 0x7e
 8000c26:	d807      	bhi.n	8000c38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e098      	b.n	8000d6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3e:	d212      	bcs.n	8000c66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	09da      	lsrs	r2, r3, #7
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3a01      	subs	r2, #1
 8000c58:	60fa      	str	r2, [r7, #12]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e081      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c6c:	d21d      	bcs.n	8000caa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0b9a      	lsrs	r2, r3, #14
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	09db      	lsrs	r3, r3, #7
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	60fa      	str	r2, [r7, #12]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e05f      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb0:	d228      	bcs.n	8000d04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0d5a      	lsrs	r2, r3, #21
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0b9b      	lsrs	r3, r3, #14
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	09db      	lsrs	r3, r3, #7
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0f1a      	lsrs	r2, r3, #28
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0b9b      	lsrs	r3, r3, #14
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <_SendPacket+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <_SendPacket+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00b      	b.n	8000d9c <_SendPacket+0x228>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8000d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	09db      	lsrs	r3, r3, #7
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d8f0      	bhi.n	8000d84 <_SendPacket+0x210>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	627a      	str	r2, [r7, #36]	; 0x24
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_SendPacket+0x270>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	4618      	mov	r0, r3
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	f7ff fa3d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_SendPacket+0x270>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e00f      	b.n	8000df6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_SendPacket+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <_SendPacket+0x270>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e008      	b.n	8000df6 <_SendPacket+0x282>
 8000de4:	20000a90 	.word	0x20000a90
 8000de8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <_SendPacket+0x2d4>)
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <_SendPacket+0x2d8>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	336c      	adds	r3, #108	; 0x6c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_SendPacket+0x2d4>)
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	4618      	mov	r0, r3
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <_SendPacket+0x2d8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3370      	adds	r3, #112	; 0x70
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00b      	beq.n	8000e3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_SendPacket+0x2d4>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <_SendPacket+0x2d4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e34:	f7ff fdbc 	bl	80009b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_SendPacket+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000a90 	.word	0x20000a90
 8000e4c:	200001d0 	.word	0x200001d0

08000e50 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a2      	sub	sp, #136	; 0x88
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01d      	beq.n	8000eb6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e7e:	2b25      	cmp	r3, #37	; 0x25
 8000e80:	d1f1      	bne.n	8000e66 <_VPrintHost+0x16>
      c = *p;
 8000e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	3388      	adds	r3, #136	; 0x88
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d002      	beq.n	8000eba <_VPrintHost+0x6a>
    c = *p++;
 8000eb4:	e7d7      	b.n	8000e66 <_VPrintHost+0x16>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <_VPrintHost+0x6c>
        break;
 8000eba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8000ec0:	f04f 0120 	mov.w	r1, #32
 8000ec4:	f381 8811 	msr	BASEPRI, r1
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eca:	483f      	ldr	r0, [pc, #252]	; (8000fc8 <_VPrintHost+0x178>)
 8000ecc:	f7ff fd64 	bl	8000998 <_PreparePacket>
 8000ed0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ed8:	f7ff fd2e 	bl	8000938 <_EncodeStr>
 8000edc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ee6:	e00b      	b.n	8000f00 <_VPrintHost+0xb0>
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	6779      	str	r1, [r7, #116]	; 0x74
 8000ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efc:	09db      	lsrs	r3, r3, #7
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
 8000f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d8f0      	bhi.n	8000ee8 <_VPrintHost+0x98>
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f14:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f20:	e00b      	b.n	8000f3a <_VPrintHost+0xea>
 8000f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	09db      	lsrs	r3, r3, #7
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	d8f0      	bhi.n	8000f22 <_VPrintHost+0xd2>
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f58:	e022      	b.n	8000fa0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	663b      	str	r3, [r7, #96]	; 0x60
 8000f66:	e00b      	b.n	8000f80 <_VPrintHost+0x130>
 8000f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6e:	1c59      	adds	r1, r3, #1
 8000f70:	6679      	str	r1, [r7, #100]	; 0x64
 8000f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f7c:	09db      	lsrs	r3, r3, #7
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d8f0      	bhi.n	8000f68 <_VPrintHost+0x118>
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	667a      	str	r2, [r7, #100]	; 0x64
 8000f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1d5      	bne.n	8000f5a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fae:	221a      	movs	r2, #26
 8000fb0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fb4:	f7ff fdde 	bl	8000b74 <_SendPacket>
    RECORD_END();
 8000fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3788      	adds	r7, #136	; 0x88
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000ac0 	.word	0x20000ac0

08000fcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	4917      	ldr	r1, [pc, #92]	; (8001040 <SEGGER_SYSVIEW_Init+0x74>)
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8000fe4:	f7ff fbd8 	bl	8000798 <SEGGER_RTT_AllocUpBuffer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff2:	785a      	ldrb	r2, [r3, #1]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2308      	movs	r3, #8
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SEGGER_SYSVIEW_Init+0x80>)
 8001006:	490f      	ldr	r1, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8001008:	f7ff fc4a 	bl	80008a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SEGGER_SYSVIEW_Init+0x84>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001018:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000688 	.word	0x20000688
 8001044:	08008b34 	.word	0x08008b34
 8001048:	20000a90 	.word	0x20000a90
 800104c:	20000a88 	.word	0x20000a88
 8001050:	e0001004 	.word	0xe0001004

08001054 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000a90 	.word	0x20000a90

08001074 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800107c:	f3ef 8311 	mrs	r3, BASEPRI
 8001080:	f04f 0120 	mov.w	r1, #32
 8001084:	f381 8811 	msr	BASEPRI, r1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800108c:	f7ff fc84 	bl	8000998 <_PreparePacket>
 8001090:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff fd6c 	bl	8000b74 <_SendPacket>
  RECORD_END();
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f383 8811 	msr	BASEPRI, r3
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000ac0 	.word	0x20000ac0

080010b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ba:	f3ef 8311 	mrs	r3, BASEPRI
 80010be:	f04f 0120 	mov.w	r1, #32
 80010c2:	f381 8811 	msr	BASEPRI, r1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010ca:	f7ff fc65 	bl	8000998 <_PreparePacket>
 80010ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e00b      	b.n	80010f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	61f9      	str	r1, [r7, #28]
 80010e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d8f0      	bhi.n	80010de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	61fa      	str	r2, [r7, #28]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	6938      	ldr	r0, [r7, #16]
 8001112:	f7ff fd2f 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f383 8811 	msr	BASEPRI, r3
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000ac0 	.word	0x20000ac0

08001128 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001134:	f3ef 8311 	mrs	r3, BASEPRI
 8001138:	f04f 0120 	mov.w	r1, #32
 800113c:	f381 8811 	msr	BASEPRI, r1
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001144:	f7ff fc28 	bl	8000998 <_PreparePacket>
 8001148:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	e00b      	b.n	8001170 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	09db      	lsrs	r3, r3, #7
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2b7f      	cmp	r3, #127	; 0x7f
 8001174:	d8f0      	bhi.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800117c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e00b      	b.n	80011a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	6279      	str	r1, [r7, #36]	; 0x24
 800119a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	09db      	lsrs	r3, r3, #7
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	d8f0      	bhi.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	627a      	str	r2, [r7, #36]	; 0x24
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcd6 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f383 8811 	msr	BASEPRI, r3
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000ac0 	.word	0x20000ac0

080011dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011e8:	f3ef 8311 	mrs	r3, BASEPRI
 80011ec:	f04f 0120 	mov.w	r1, #32
 80011f0:	f381 8811 	msr	BASEPRI, r1
 80011f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	220a      	movs	r2, #10
 80011fc:	4952      	ldr	r1, [pc, #328]	; (8001348 <SEGGER_SYSVIEW_Start+0x16c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f81e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff ff32 	bl	8001074 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001210:	f3ef 8311 	mrs	r3, BASEPRI
 8001214:	f04f 0120 	mov.w	r1, #32
 8001218:	f381 8811 	msr	BASEPRI, r1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	484b      	ldr	r0, [pc, #300]	; (800134c <SEGGER_SYSVIEW_Start+0x170>)
 8001220:	f7ff fbba 	bl	8000998 <_PreparePacket>
 8001224:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
 8001234:	e00b      	b.n	800124e <SEGGER_SYSVIEW_Start+0x72>
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d8f0      	bhi.n	8001236 <SEGGER_SYSVIEW_Start+0x5a>
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00b      	b.n	8001288 <SEGGER_SYSVIEW_Start+0xac>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	6279      	str	r1, [r7, #36]	; 0x24
 800127a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	09db      	lsrs	r3, r3, #7
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b7f      	cmp	r3, #127	; 0x7f
 800128c:	d8f0      	bhi.n	8001270 <SEGGER_SYSVIEW_Start+0x94>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	627a      	str	r2, [r7, #36]	; 0x24
 8001294:	6a3a      	ldr	r2, [r7, #32]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e00b      	b.n	80012c2 <SEGGER_SYSVIEW_Start+0xe6>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	61f9      	str	r1, [r7, #28]
 80012b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	09db      	lsrs	r3, r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d8f0      	bhi.n	80012aa <SEGGER_SYSVIEW_Start+0xce>
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	61fa      	str	r2, [r7, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e00b      	b.n	80012fa <SEGGER_SYSVIEW_Start+0x11e>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	6179      	str	r1, [r7, #20]
 80012ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b7f      	cmp	r3, #127	; 0x7f
 80012fe:	d8f0      	bhi.n	80012e2 <SEGGER_SYSVIEW_Start+0x106>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	617a      	str	r2, [r7, #20]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001310:	2218      	movs	r2, #24
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fc2d 	bl	8000b74 <_SendPacket>
      RECORD_END();
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800132e:	f000 f9eb 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001332:	f000 f9b1 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001336:	f000 fac1 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000a90 	.word	0x20000a90
 8001348:	08008c0c 	.word	0x08008c0c
 800134c:	20000ac0 	.word	0x20000ac0

08001350 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0120 	mov.w	r1, #32
 800135e:	f381 8811 	msr	BASEPRI, r1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <SEGGER_SYSVIEW_Stop+0x44>)
 8001366:	f7ff fb17 	bl	8000998 <_PreparePacket>
 800136a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001374:	220b      	movs	r2, #11
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff fbfb 	bl	8000b74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f383 8811 	msr	BASEPRI, r3
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000ac0 	.word	0x20000ac0
 8001398:	20000a90 	.word	0x20000a90

0800139c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013a2:	f3ef 8311 	mrs	r3, BASEPRI
 80013a6:	f04f 0120 	mov.w	r1, #32
 80013aa:	f381 8811 	msr	BASEPRI, r1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4845      	ldr	r0, [pc, #276]	; (80014c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013b2:	f7ff faf1 	bl	8000998 <_PreparePacket>
 80013b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c6:	e00b      	b.n	80013e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	09db      	lsrs	r3, r3, #7
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	d8f0      	bhi.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	e00b      	b.n	800141a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	6279      	str	r1, [r7, #36]	; 0x24
 800140c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b7f      	cmp	r3, #127	; 0x7f
 800141e:	d8f0      	bhi.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	627a      	str	r2, [r7, #36]	; 0x24
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	61f9      	str	r1, [r7, #28]
 8001446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	09db      	lsrs	r3, r3, #7
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b7f      	cmp	r3, #127	; 0x7f
 8001458:	d8f0      	bhi.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	61fa      	str	r2, [r7, #28]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e00b      	b.n	800148c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	6179      	str	r1, [r7, #20]
 800147e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d8f0      	bhi.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	617a      	str	r2, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014a2:	2218      	movs	r2, #24
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fb64 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4798      	blx	r3
  }
}
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000ac0 	.word	0x20000ac0
 80014cc:	20000a90 	.word	0x20000a90

080014d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014d8:	f3ef 8311 	mrs	r3, BASEPRI
 80014dc:	f04f 0120 	mov.w	r1, #32
 80014e0:	f381 8811 	msr	BASEPRI, r1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	486a      	ldr	r0, [pc, #424]	; (8001690 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014e8:	f7ff fa56 	bl	8000998 <_PreparePacket>
 80014ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
 8001502:	e00b      	b.n	800151c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001506:	b2da      	uxtb	r2, r3
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	6479      	str	r1, [r7, #68]	; 0x44
 800150e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	09db      	lsrs	r3, r3, #7
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d8f0      	bhi.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	647a      	str	r2, [r7, #68]	; 0x44
 8001528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
 800153c:	e00b      	b.n	8001556 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	b2da      	uxtb	r2, r3
 8001542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	09db      	lsrs	r3, r3, #7
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	2b7f      	cmp	r3, #127	; 0x7f
 800155a:	d8f0      	bhi.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff f9df 	bl	8000938 <_EncodeStr>
 800157a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800157c:	2209      	movs	r2, #9
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f7ff faf7 	bl	8000b74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
 800159a:	e00b      	b.n	80015b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	6379      	str	r1, [r7, #52]	; 0x34
 80015a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	09db      	lsrs	r3, r3, #7
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d8f0      	bhi.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	637a      	str	r2, [r7, #52]	; 0x34
 80015c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	e00b      	b.n	80015ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	2b7f      	cmp	r3, #127	; 0x7f
 80015f2:	d8f0      	bhi.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	e00b      	b.n	8001628 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	6279      	str	r1, [r7, #36]	; 0x24
 800161a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	09db      	lsrs	r3, r3, #7
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d8f0      	bhi.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	627a      	str	r2, [r7, #36]	; 0x24
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e00b      	b.n	8001660 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	61f9      	str	r1, [r7, #28]
 8001652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	09db      	lsrs	r3, r3, #7
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b7f      	cmp	r3, #127	; 0x7f
 8001664:	d8f0      	bhi.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	61fa      	str	r2, [r7, #28]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001676:	2215      	movs	r2, #21
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f7ff fa7a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f383 8811 	msr	BASEPRI, r3
}
 8001686:	bf00      	nop
 8001688:	3748      	adds	r7, #72	; 0x48
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000ac0 	.word	0x20000ac0
 8001694:	20000a90 	.word	0x20000a90

08001698 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4798      	blx	r3
  }
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000a90 	.word	0x20000a90

080016c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c8:	f3ef 8311 	mrs	r3, BASEPRI
 80016cc:	f04f 0120 	mov.w	r1, #32
 80016d0:	f381 8811 	msr	BASEPRI, r1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016d8:	f7ff f95e 	bl	8000998 <_PreparePacket>
 80016dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff f928 	bl	8000938 <_EncodeStr>
 80016e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016ea:	220e      	movs	r2, #14
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6938      	ldr	r0, [r7, #16]
 80016f0:	f7ff fa40 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f383 8811 	msr	BASEPRI, r3
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000ac0 	.word	0x20000ac0

08001708 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01a      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4798      	blx	r3
 8001728:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800172c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	000a      	movs	r2, r1
 800173c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800173e:	4613      	mov	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4621      	mov	r1, r4
 8001744:	200d      	movs	r0, #13
 8001746:	f7ff fcef 	bl	8001128 <SEGGER_SYSVIEW_RecordU32x2>
 800174a:	e006      	b.n	800175a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	200c      	movs	r0, #12
 8001754:	f7ff fcac 	bl	80010b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000a90 	.word	0x20000a90
 8001768:	e0001004 	.word	0xe0001004

0800176c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d077      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	e008      	b.n	800179c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	3301      	adds	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3f2      	bcc.n	800178a <SEGGER_SYSVIEW_SendModule+0x1e>
 80017a4:	e000      	b.n	80017a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80017a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d055      	beq.n	800185a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80017ae:	f3ef 8311 	mrs	r3, BASEPRI
 80017b2:	f04f 0120 	mov.w	r1, #32
 80017b6:	f381 8811 	msr	BASEPRI, r1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	482f      	ldr	r0, [pc, #188]	; (800187c <SEGGER_SYSVIEW_SendModule+0x110>)
 80017be:	f7ff f8eb 	bl	8000998 <_PreparePacket>
 80017c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	e00b      	b.n	80017ea <SEGGER_SYSVIEW_SendModule+0x7e>
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1c59      	adds	r1, r3, #1
 80017da:	6279      	str	r1, [r7, #36]	; 0x24
 80017dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	09db      	lsrs	r3, r3, #7
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2b7f      	cmp	r3, #127	; 0x7f
 80017ee:	d8f0      	bhi.n	80017d2 <SEGGER_SYSVIEW_SendModule+0x66>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	627a      	str	r2, [r7, #36]	; 0x24
 80017f6:	6a3a      	ldr	r2, [r7, #32]
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	e00b      	b.n	8001824 <SEGGER_SYSVIEW_SendModule+0xb8>
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	61f9      	str	r1, [r7, #28]
 8001816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	09db      	lsrs	r3, r3, #7
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b7f      	cmp	r3, #127	; 0x7f
 8001828:	d8f0      	bhi.n	800180c <SEGGER_SYSVIEW_SendModule+0xa0>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	61fa      	str	r2, [r7, #28]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	4619      	mov	r1, r3
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff f878 	bl	8000938 <_EncodeStr>
 8001848:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800184a:	2216      	movs	r2, #22
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	6938      	ldr	r0, [r7, #16]
 8001850:	f7ff f990 	bl	8000b74 <_SendPacket>
      RECORD_END();
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4798      	blx	r3
    }
  }
}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000ab8 	.word	0x20000ab8
 800187c:	20000ac0 	.word	0x20000ac0

08001880 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00f      	beq.n	80018ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f2      	bne.n	8001894 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000ab8 	.word	0x20000ab8

080018bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018c2:	f3ef 8311 	mrs	r3, BASEPRI
 80018c6:	f04f 0120 	mov.w	r1, #32
 80018ca:	f381 8811 	msr	BASEPRI, r1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4817      	ldr	r0, [pc, #92]	; (8001930 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018d2:	f7ff f861 	bl	8000998 <_PreparePacket>
 80018d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	e00b      	b.n	8001900 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	6179      	str	r1, [r7, #20]
 80018f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	09db      	lsrs	r3, r3, #7
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	d8f0      	bhi.n	80018e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	617a      	str	r2, [r7, #20]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8001916:	221b      	movs	r2, #27
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f7ff f92a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f383 8811 	msr	BASEPRI, r3
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000ac0 	.word	0x20000ac0
 8001934:	20000abc 	.word	0x20000abc

08001938 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8001938:	b40f      	push	{r0, r1, r2, r3}
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	461a      	mov	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	6938      	ldr	r0, [r7, #16]
 800194e:	f7ff fa7f 	bl	8000e50 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800195c:	b004      	add	sp, #16
 800195e:	4770      	bx	lr

08001960 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <_cbSendSystemDesc+0x14>)
 8001966:	f7ff feab 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <_cbSendSystemDesc+0x18>)
 800196c:	f7ff fea8 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	08008b3c 	.word	0x08008b3c
 8001978:	08008b70 	.word	0x08008b70

0800197c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SEGGER_SYSVIEW_Conf+0x24>)
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <SEGGER_SYSVIEW_Conf+0x28>)
 800198c:	f7ff fb1e 	bl	8000fcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001990:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001994:	f7ff fb5e 	bl	8001054 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	08001961 	.word	0x08001961
 80019a4:	08008c18 	.word	0x08008c18

080019a8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	e048      	b.n	8001a46 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80019b4:	4929      	ldr	r1, [pc, #164]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f005 fe11 	bl	80075ec <uxTaskGetStackHighWaterMark>
 80019ca:	4601      	mov	r1, r0
 80019cc:	4823      	ldr	r0, [pc, #140]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	3310      	adds	r3, #16
 80019dc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019de:	491f      	ldr	r1, [pc, #124]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3304      	adds	r3, #4
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	4c16      	ldr	r4, [pc, #88]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4423      	add	r3, r4
 8001a0e:	3308      	adds	r3, #8
 8001a10:	681c      	ldr	r4, [r3, #0]
 8001a12:	4d12      	ldr	r5, [pc, #72]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	442b      	add	r3, r5
 8001a20:	330c      	adds	r3, #12
 8001a22:	681d      	ldr	r5, [r3, #0]
 8001a24:	4e0d      	ldr	r6, [pc, #52]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4433      	add	r3, r6
 8001a32:	3310      	adds	r3, #16
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	462b      	mov	r3, r5
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	f000 f855 	bl	8001aea <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3301      	adds	r3, #1
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <_cbSendTaskList+0xb8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3b1      	bcc.n	80019b4 <_cbSendTaskList+0xc>
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000ba4 	.word	0x20000ba4
 8001a60:	20000c44 	.word	0x20000c44

08001a64 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a6c:	f005 faa6 	bl	8006fbc <xTaskGetTickCountFromISR>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	469a      	mov	sl, r3
 8001a76:	4693      	mov	fp, r2
 8001a78:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f04f 0a00 	mov.w	sl, #0
 8001a88:	f04f 0b00 	mov.w	fp, #0
 8001a8c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a90:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a94:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a98:	4652      	mov	r2, sl
 8001a9a:	465b      	mov	r3, fp
 8001a9c:	1a14      	subs	r4, r2, r0
 8001a9e:	eb63 0501 	sbc.w	r5, r3, r1
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	00ab      	lsls	r3, r5, #2
 8001aac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001ab0:	00a2      	lsls	r2, r4, #2
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	eb14 0800 	adds.w	r8, r4, r0
 8001aba:	eb45 0901 	adc.w	r9, r5, r1
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ad2:	4690      	mov	r8, r2
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ada:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001aea <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b08a      	sub	sp, #40	; 0x28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2214      	movs	r2, #20
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f006 ff37 	bl	8008974 <memset>
  TaskInfo.TaskID     = TaskID;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fcd6 	bl	80014d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b30:	f000 fd6f 	bl	8002612 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b34:	f7ff ff22 	bl	800197c <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b38:	f000 f850 	bl	8001bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3c:	f000 f9cc 	bl	8001ed8 <MX_GPIO_Init>
  MX_ETH_Init();
 8001b40:	f000 f8be 	bl	8001cc0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b44:	f000 f96a 	bl	8001e1c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b48:	f000 f998 	bl	8001e7c <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001b4c:	f000 f906 	bl	8001d5c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001b50:	f000 f934 	bl	8001dbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b54:	f003 ff00 	bl	8005958 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of printtimer */
  printtimerHandle = osTimerNew(timerEntry, osTimerPeriodic, NULL, &printtimer_attributes);
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <main+0x80>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	4814      	ldr	r0, [pc, #80]	; (8001bb0 <main+0x84>)
 8001b60:	f004 f84e 	bl	8005c00 <osTimerNew>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <main+0x88>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  //osTimerStart(printtimerHandle, 100);
  osTimerStart(printtimerHandle, 5);
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <main+0x88>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2105      	movs	r1, #5
 8001b70:	4618      	mov	r0, r3
 8001b72:	f004 f8c9 	bl	8005d08 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <main+0x8c>)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4810      	ldr	r0, [pc, #64]	; (8001bbc <main+0x90>)
 8001b7c:	f003 ff56 	bl	8005a2c <osThreadNew>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <main+0x94>)
 8001b84:	6013      	str	r3, [r2, #0]

  /* creation of sender */
  senderHandle = osThreadNew(senderEntry, NULL, &sender_attributes);
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <main+0x98>)
 8001b88:	2100      	movs	r1, #0
 8001b8a:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <main+0x9c>)
 8001b8c:	f003 ff4e 	bl	8005a2c <osThreadNew>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <main+0xa0>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* creation of printer */
  printerHandle = osThreadNew(printerEntry, NULL, &printer_attributes);
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <main+0xa4>)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	480e      	ldr	r0, [pc, #56]	; (8001bd4 <main+0xa8>)
 8001b9c:	f003 ff46 	bl	8005a2c <osThreadNew>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <main+0xac>)
 8001ba4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ba6:	f003 ff0b 	bl	80059c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <main+0x7e>
 8001bac:	08008c8c 	.word	0x08008c8c
 8001bb0:	08002091 	.word	0x08002091
 8001bb4:	200013dc 	.word	0x200013dc
 8001bb8:	08008c20 	.word	0x08008c20
 8001bbc:	0800201d 	.word	0x0800201d
 8001bc0:	200013d0 	.word	0x200013d0
 8001bc4:	08008c44 	.word	0x08008c44
 8001bc8:	0800202d 	.word	0x0800202d
 8001bcc:	200013d4 	.word	0x200013d4
 8001bd0:	08008c68 	.word	0x08008c68
 8001bd4:	0800205d 	.word	0x0800205d
 8001bd8:	200013d8 	.word	0x200013d8

08001bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	; 0x50
 8001be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	2234      	movs	r2, #52	; 0x34
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f006 fec2 	bl	8008974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf0:	f107 0308 	add.w	r3, r7, #8
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c00:	f001 fca2 	bl	8003548 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <SystemClock_Config+0xdc>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <SystemClock_Config+0xe0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	2302      	movs	r3, #2
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c50:	2360      	movs	r3, #96	; 0x60
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 fccf 	bl	8003608 <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c70:	f000 fa26 	bl	80020c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c74:	f001 fc78 	bl	8003568 <HAL_PWREx_EnableOverDrive>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c7e:	f000 fa1f 	bl	80020c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2302      	movs	r3, #2
 8001c88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 ff60 	bl	8003b64 <HAL_RCC_ClockConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001caa:	f000 fa09 	bl	80020c0 <Error_Handler>
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3750      	adds	r7, #80	; 0x50
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cc6:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <MX_ETH_Init+0x88>)
 8001cc8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cd8:	22e1      	movs	r2, #225	; 0xe1
 8001cda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <MX_ETH_Init+0x8c>)
 8001cf2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cf6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cfa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_ETH_Init+0x84>)
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <MX_ETH_Init+0x90>)
 8001d00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <MX_ETH_Init+0x94>)
 8001d06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <MX_ETH_Init+0x84>)
 8001d12:	f000 fde5 	bl	80028e0 <HAL_ETH_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d1c:	f000 f9d0 	bl	80020c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d20:	2238      	movs	r2, #56	; 0x38
 8001d22:	2100      	movs	r1, #0
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d26:	f006 fe25 	bl	8008974 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d2c:	2221      	movs	r2, #33	; 0x21
 8001d2e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d32:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001d36:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_ETH_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000c80 	.word	0x20000c80
 8001d48:	40028000 	.word	0x40028000
 8001d4c:	200013e0 	.word	0x200013e0
 8001d50:	20000114 	.word	0x20000114
 8001d54:	20000074 	.word	0x20000074
 8001d58:	20000c48 	.word	0x20000c48

08001d5c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <MX_UART4_Init+0x5c>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_UART4_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_UART4_Init+0x58>)
 8001da0:	f002 fd2e 	bl	8004800 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001daa:	f000 f989 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000d30 	.word	0x20000d30
 8001db8:	40004c00 	.word	0x40004c00

08001dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001dc2:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <MX_USART2_UART_Init+0x5c>)
 8001dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001de2:	220c      	movs	r2, #12
 8001de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_USART2_UART_Init+0x58>)
 8001e00:	f002 fcfe 	bl	8004800 <HAL_UART_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e0a:	f000 f959 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000db8 	.word	0x20000db8
 8001e18:	40004400 	.word	0x40004400

08001e1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <MX_USART3_UART_Init+0x5c>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_USART3_UART_Init+0x58>)
 8001e60:	f002 fcce 	bl	8004800 <HAL_UART_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e6a:	f000 f929 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000e40 	.word	0x20000e40
 8001e78:	40004800 	.word	0x40004800

08001e7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e8a:	2206      	movs	r2, #6
 8001e8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e90:	2202      	movs	r2, #2
 8001e92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ec0:	f001 f9f9 	bl	80032b6 <HAL_PCD_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001eca:	f000 f8f9 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000ec8 	.word	0x20000ec8

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <MX_GPIO_Init+0x134>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a46      	ldr	r2, [pc, #280]	; (800200c <MX_GPIO_Init+0x134>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <MX_GPIO_Init+0x134>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <MX_GPIO_Init+0x134>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a40      	ldr	r2, [pc, #256]	; (800200c <MX_GPIO_Init+0x134>)
 8001f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <MX_GPIO_Init+0x134>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <MX_GPIO_Init+0x134>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a3a      	ldr	r2, [pc, #232]	; (800200c <MX_GPIO_Init+0x134>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b38      	ldr	r3, [pc, #224]	; (800200c <MX_GPIO_Init+0x134>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	4b35      	ldr	r3, [pc, #212]	; (800200c <MX_GPIO_Init+0x134>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a34      	ldr	r2, [pc, #208]	; (800200c <MX_GPIO_Init+0x134>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <MX_GPIO_Init+0x134>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	; (800200c <MX_GPIO_Init+0x134>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a2e      	ldr	r2, [pc, #184]	; (800200c <MX_GPIO_Init+0x134>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	; (800200c <MX_GPIO_Init+0x134>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <MX_GPIO_Init+0x134>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a28      	ldr	r2, [pc, #160]	; (800200c <MX_GPIO_Init+0x134>)
 8001f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <MX_GPIO_Init+0x134>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f84:	4822      	ldr	r0, [pc, #136]	; (8002010 <MX_GPIO_Init+0x138>)
 8001f86:	f001 f97d 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2140      	movs	r1, #64	; 0x40
 8001f8e:	4821      	ldr	r0, [pc, #132]	; (8002014 <MX_GPIO_Init+0x13c>)
 8001f90:	f001 f978 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	4619      	mov	r1, r3
 8001faa:	481b      	ldr	r0, [pc, #108]	; (8002018 <MX_GPIO_Init+0x140>)
 8001fac:	f000 ffbe 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001fb0:	f244 0381 	movw	r3, #16513	; 0x4081
 8001fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4811      	ldr	r0, [pc, #68]	; (8002010 <MX_GPIO_Init+0x138>)
 8001fca:	f000 ffaf 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001fce:	2340      	movs	r3, #64	; 0x40
 8001fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480b      	ldr	r0, [pc, #44]	; (8002014 <MX_GPIO_Init+0x13c>)
 8001fe6:	f000 ffa1 	bl	8002f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_GPIO_Init+0x13c>)
 8001ffe:	f000 ff95 	bl	8002f2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002002:	bf00      	nop
 8002004:	3730      	adds	r7, #48	; 0x30
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40020400 	.word	0x40020400
 8002014:	40021800 	.word	0x40021800
 8002018:	40020800 	.word	0x40020800

0800201c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002024:	2001      	movs	r0, #1
 8002026:	f003 fda7 	bl	8005b78 <osDelay>
 800202a:	e7fb      	b.n	8002024 <StartDefaultTask+0x8>

0800202c <senderEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_senderEntry */
void senderEntry(void *argument)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN senderEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002034:	2001      	movs	r0, #1
 8002036:	f003 fd9f 	bl	8005b78 <osDelay>
    //SEGGER_SYSVIEW_PrintfHost("sender");
    SEGGER_SYSVIEW_PrintfHost("task print sender");
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <senderEntry+0x24>)
 800203c:	f7ff fc7c 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>

    HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);
 8002040:	2364      	movs	r3, #100	; 0x64
 8002042:	2201      	movs	r2, #1
 8002044:	4903      	ldr	r1, [pc, #12]	; (8002054 <senderEntry+0x28>)
 8002046:	4804      	ldr	r0, [pc, #16]	; (8002058 <senderEntry+0x2c>)
 8002048:	f002 fc28 	bl	800489c <HAL_UART_Transmit>
    osDelay(1);
 800204c:	e7f2      	b.n	8002034 <senderEntry+0x8>
 800204e:	bf00      	nop
 8002050:	08008ba8 	.word	0x08008ba8
 8002054:	08008c9c 	.word	0x08008c9c
 8002058:	20000d30 	.word	0x20000d30

0800205c <printerEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printerEntry */
void printerEntry(void *argument)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN printerEntry */
  /* Infinite loop */
  uint8_t nextbyte = 'h';
 8002064:	2368      	movs	r3, #104	; 0x68
 8002066:	73fb      	strb	r3, [r7, #15]
  while(1)
  {
    //osDelay(1);
    //SEGGER_SYSVIEW_PrintfHost("printer");

    HAL_UART_Receive(&huart2, &nextbyte, 1, 100);
 8002068:	f107 010f 	add.w	r1, r7, #15
 800206c:	2364      	movs	r3, #100	; 0x64
 800206e:	2201      	movs	r2, #1
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <printerEntry+0x2c>)
 8002072:	f002 fc96 	bl	80049a2 <HAL_UART_Receive>
    SEGGER_SYSVIEW_PrintfHost("uart received");
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <printerEntry+0x30>)
 8002078:	f7ff fc5e 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>
    //nextbyte = 'i';
    SEGGER_SYSVIEW_PrintfHost(&nextbyte);
 800207c:	f107 030f 	add.w	r3, r7, #15
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fc59 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>
    HAL_UART_Receive(&huart2, &nextbyte, 1, 100);
 8002086:	e7ef      	b.n	8002068 <printerEntry+0xc>
 8002088:	20000db8 	.word	0x20000db8
 800208c:	08008bbc 	.word	0x08008bbc

08002090 <timerEntry>:
  /* USER CODE END printerEntry */
}

/* timerEntry function */
void timerEntry(void *argument)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN timerEntry */
	//uint8_t uart4Msg[] = "a";

	SEGGER_SYSVIEW_PrintfHost("timer print sender");
 8002098:	4806      	ldr	r0, [pc, #24]	; (80020b4 <timerEntry+0x24>)
 800209a:	f7ff fc4d 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>

	HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);
 800209e:	2364      	movs	r3, #100	; 0x64
 80020a0:	2201      	movs	r2, #1
 80020a2:	4905      	ldr	r1, [pc, #20]	; (80020b8 <timerEntry+0x28>)
 80020a4:	4805      	ldr	r0, [pc, #20]	; (80020bc <timerEntry+0x2c>)
 80020a6:	f002 fbf9 	bl	800489c <HAL_UART_Transmit>
  /* USER CODE END timerEntry */
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	08008bcc 	.word	0x08008bcc
 80020b8:	08008c9c 	.word	0x08008c9c
 80020bc:	20000d30 	.word	0x20000d30

080020c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
}
 80020c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <Error_Handler+0x8>
	...

080020cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_MspInit+0x4c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_MspInit+0x4c>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_MspInit+0x4c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_MspInit+0x4c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_MspInit+0x4c>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_MspInit+0x4c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	210f      	movs	r1, #15
 8002106:	f06f 0001 	mvn.w	r0, #1
 800210a:	f000 fbc0 	bl	800288e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800

0800211c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a4e      	ldr	r2, [pc, #312]	; (8002274 <HAL_ETH_MspInit+0x158>)
 800213a:	4293      	cmp	r3, r2
 800213c:	f040 8096 	bne.w	800226c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002140:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4a4c      	ldr	r2, [pc, #304]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 8002146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800214a:	6313      	str	r3, [r2, #48]	; 0x30
 800214c:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	623b      	str	r3, [r7, #32]
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4a46      	ldr	r2, [pc, #280]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 800215e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002162:	6313      	str	r3, [r2, #48]	; 0x30
 8002164:	4b44      	ldr	r3, [pc, #272]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	4a40      	ldr	r2, [pc, #256]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 8002176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800217a:	6313      	str	r3, [r2, #48]	; 0x30
 800217c:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002188:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a3a      	ldr	r2, [pc, #232]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b38      	ldr	r3, [pc, #224]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b35      	ldr	r3, [pc, #212]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a34      	ldr	r2, [pc, #208]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	4a2e      	ldr	r2, [pc, #184]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	6313      	str	r3, [r2, #48]	; 0x30
 80021c4:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 80021d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021da:	6313      	str	r3, [r2, #48]	; 0x30
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_ETH_MspInit+0x15c>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80021e8:	2332      	movs	r3, #50	; 0x32
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021f8:	230b      	movs	r3, #11
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002200:	4619      	mov	r1, r3
 8002202:	481e      	ldr	r0, [pc, #120]	; (800227c <HAL_ETH_MspInit+0x160>)
 8002204:	f000 fe92 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002208:	2386      	movs	r3, #134	; 0x86
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002218:	230b      	movs	r3, #11
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4817      	ldr	r0, [pc, #92]	; (8002280 <HAL_ETH_MspInit+0x164>)
 8002224:	f000 fe82 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800223a:	230b      	movs	r3, #11
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	480f      	ldr	r0, [pc, #60]	; (8002284 <HAL_ETH_MspInit+0x168>)
 8002246:	f000 fe71 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800224a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800225c:	230b      	movs	r3, #11
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4808      	ldr	r0, [pc, #32]	; (8002288 <HAL_ETH_MspInit+0x16c>)
 8002268:	f000 fe60 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800226c:	bf00      	nop
 800226e:	3738      	adds	r7, #56	; 0x38
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40028000 	.word	0x40028000
 8002278:	40023800 	.word	0x40023800
 800227c:	40020800 	.word	0x40020800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020400 	.word	0x40020400
 8002288:	40021800 	.word	0x40021800

0800228c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b0b2      	sub	sp, #200	; 0xc8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	2290      	movs	r2, #144	; 0x90
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f006 fb61 	bl	8008974 <memset>
  if(huart->Instance==UART4)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a64      	ldr	r2, [pc, #400]	; (8002448 <HAL_UART_MspInit+0x1bc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d13d      	bne.n	8002338 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80022c2:	2300      	movs	r3, #0
 80022c4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 fe70 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022d6:	f7ff fef3 	bl	80020c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022da:	4b5c      	ldr	r3, [pc, #368]	; (800244c <HAL_UART_MspInit+0x1c0>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a5b      	ldr	r2, [pc, #364]	; (800244c <HAL_UART_MspInit+0x1c0>)
 80022e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b59      	ldr	r3, [pc, #356]	; (800244c <HAL_UART_MspInit+0x1c0>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ee:	623b      	str	r3, [r7, #32]
 80022f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	4b56      	ldr	r3, [pc, #344]	; (800244c <HAL_UART_MspInit+0x1c0>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a55      	ldr	r2, [pc, #340]	; (800244c <HAL_UART_MspInit+0x1c0>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_UART_MspInit+0x1c0>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800230a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800230e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002324:	2308      	movs	r3, #8
 8002326:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800232e:	4619      	mov	r1, r3
 8002330:	4847      	ldr	r0, [pc, #284]	; (8002450 <HAL_UART_MspInit+0x1c4>)
 8002332:	f000 fdfb 	bl	8002f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002336:	e082      	b.n	800243e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a45      	ldr	r2, [pc, #276]	; (8002454 <HAL_UART_MspInit+0x1c8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d13b      	bne.n	80023ba <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002346:	2300      	movs	r3, #0
 8002348:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800234a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234e:	4618      	mov	r0, r3
 8002350:	f001 fe2e 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800235a:	f7ff feb1 	bl	80020c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_UART_MspInit+0x1c0>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a3a      	ldr	r2, [pc, #232]	; (800244c <HAL_UART_MspInit+0x1c0>)
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b38      	ldr	r3, [pc, #224]	; (800244c <HAL_UART_MspInit+0x1c0>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <HAL_UART_MspInit+0x1c0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a34      	ldr	r2, [pc, #208]	; (800244c <HAL_UART_MspInit+0x1c0>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b32      	ldr	r3, [pc, #200]	; (800244c <HAL_UART_MspInit+0x1c0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800238e:	2360      	movs	r3, #96	; 0x60
 8002390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a6:	2307      	movs	r3, #7
 80023a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4829      	ldr	r0, [pc, #164]	; (8002458 <HAL_UART_MspInit+0x1cc>)
 80023b4:	f000 fdba 	bl	8002f2c <HAL_GPIO_Init>
}
 80023b8:	e041      	b.n	800243e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a27      	ldr	r2, [pc, #156]	; (800245c <HAL_UART_MspInit+0x1d0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d13c      	bne.n	800243e <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 fdec 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_UART_MspInit+0x156>
      Error_Handler();
 80023de:	f7ff fe6f 	bl	80020c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_UART_MspInit+0x1c0>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_UART_MspInit+0x1c0>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_UART_MspInit+0x1c0>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_UART_MspInit+0x1c0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <HAL_UART_MspInit+0x1c0>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_UART_MspInit+0x1c0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800242c:	2307      	movs	r3, #7
 800242e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002432:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002436:	4619      	mov	r1, r3
 8002438:	4807      	ldr	r0, [pc, #28]	; (8002458 <HAL_UART_MspInit+0x1cc>)
 800243a:	f000 fd77 	bl	8002f2c <HAL_GPIO_Init>
}
 800243e:	bf00      	nop
 8002440:	37c8      	adds	r7, #200	; 0xc8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40004c00 	.word	0x40004c00
 800244c:	40023800 	.word	0x40023800
 8002450:	40020800 	.word	0x40020800
 8002454:	40004400 	.word	0x40004400
 8002458:	40020c00 	.word	0x40020c00
 800245c:	40004800 	.word	0x40004800

08002460 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0ae      	sub	sp, #184	; 0xb8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2290      	movs	r2, #144	; 0x90
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f006 fa77 	bl	8008974 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800248e:	d159      	bne.n	8002544 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002490:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002494:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 fd85 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80024ac:	f7ff fe08 	bl	80020c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b0:	4b26      	ldr	r3, [pc, #152]	; (800254c <HAL_PCD_MspInit+0xec>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	4a25      	ldr	r2, [pc, #148]	; (800254c <HAL_PCD_MspInit+0xec>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6313      	str	r3, [r2, #48]	; 0x30
 80024bc:	4b23      	ldr	r3, [pc, #140]	; (800254c <HAL_PCD_MspInit+0xec>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80024c8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80024cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80024e2:	230a      	movs	r3, #10
 80024e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024ec:	4619      	mov	r1, r3
 80024ee:	4818      	ldr	r0, [pc, #96]	; (8002550 <HAL_PCD_MspInit+0xf0>)
 80024f0:	f000 fd1c 	bl	8002f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80024f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800250c:	4619      	mov	r1, r3
 800250e:	4810      	ldr	r0, [pc, #64]	; (8002550 <HAL_PCD_MspInit+0xf0>)
 8002510:	f000 fd0c 	bl	8002f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_PCD_MspInit+0xec>)
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	4a0c      	ldr	r2, [pc, #48]	; (800254c <HAL_PCD_MspInit+0xec>)
 800251a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251e:	6353      	str	r3, [r2, #52]	; 0x34
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_PCD_MspInit+0xec>)
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <HAL_PCD_MspInit+0xec>)
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	4a06      	ldr	r2, [pc, #24]	; (800254c <HAL_PCD_MspInit+0xec>)
 8002532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002536:	6453      	str	r3, [r2, #68]	; 0x44
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_PCD_MspInit+0xec>)
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002544:	bf00      	nop
 8002546:	37b8      	adds	r7, #184	; 0xb8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	40020000 	.word	0x40020000

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <NMI_Handler+0x4>

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <MemManage_Handler+0x4>

08002566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler+0x4>

08002572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002584:	f000 f882 	bl	800268c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002588:	f005 f8a2 	bl	80076d0 <xTaskGetSchedulerState>
 800258c:	4603      	mov	r3, r0
 800258e:	2b01      	cmp	r3, #1
 8002590:	d001      	beq.n	8002596 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002592:	f005 ff41 	bl	8008418 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <SystemInit+0x20>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <SystemInit+0x20>)
 80025a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c4:	480d      	ldr	r0, [pc, #52]	; (80025fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c6:	490e      	ldr	r1, [pc, #56]	; (8002600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025cc:	e002      	b.n	80025d4 <LoopCopyDataInit>

080025ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025d2:	3304      	adds	r3, #4

080025d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d8:	d3f9      	bcc.n	80025ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025da:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025dc:	4c0b      	ldr	r4, [pc, #44]	; (800260c <LoopFillZerobss+0x26>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e0:	e001      	b.n	80025e6 <LoopFillZerobss>

080025e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e4:	3204      	adds	r2, #4

080025e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e8:	d3fb      	bcc.n	80025e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ea:	f7ff ffd7 	bl	800259c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ee:	f006 f98d 	bl	800890c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f2:	f7ff fa9b 	bl	8001b2c <main>
  bx  lr    
 80025f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025f8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80025fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002600:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002604:	08008d28 	.word	0x08008d28
  ldr r2, =_sbss
 8002608:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 800260c:	20005dfc 	.word	0x20005dfc

08002610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002610:	e7fe      	b.n	8002610 <ADC_IRQHandler>

08002612 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002616:	2003      	movs	r0, #3
 8002618:	f000 f92e 	bl	8002878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261c:	200f      	movs	r0, #15
 800261e:	f000 f805 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002622:	f7ff fd53 	bl	80020cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x54>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x58>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002642:	fbb3 f3f1 	udiv	r3, r3, r1
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f93b 	bl	80028c6 <HAL_SYSTICK_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00e      	b.n	8002678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0f      	cmp	r3, #15
 800265e:	d80a      	bhi.n	8002676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002660:	2200      	movs	r2, #0
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f000 f911 	bl	800288e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_InitTick+0x5c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000000 	.word	0x20000000
 8002684:	20000008 	.word	0x20000008
 8002688:	20000004 	.word	0x20000004

0800268c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_IncTick+0x20>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_IncTick+0x24>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_IncTick+0x24>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000008 	.word	0x20000008
 80026b0:	200013e8 	.word	0x200013e8

080026b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_GetTick+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	200013e8 	.word	0x200013e8

080026cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff ffee 	bl	80026b4 <HAL_GetTick>
 80026d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d005      	beq.n	80026f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_Delay+0x44>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026f2:	bf00      	nop
 80026f4:	f7ff ffde 	bl	80026b4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	d8f7      	bhi.n	80026f4 <HAL_Delay+0x28>
  {
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000008 	.word	0x20000008

08002714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <__NVIC_SetPriorityGrouping+0x40>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	4313      	orrs	r3, r2
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x40>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00
 8002758:	05fa0000 	.word	0x05fa0000

0800275c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	2b00      	cmp	r3, #0
 800278a:	db0a      	blt.n	80027a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	490c      	ldr	r1, [pc, #48]	; (80027c4 <__NVIC_SetPriority+0x4c>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	0112      	lsls	r2, r2, #4
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	440b      	add	r3, r1
 800279c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a0:	e00a      	b.n	80027b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4908      	ldr	r1, [pc, #32]	; (80027c8 <__NVIC_SetPriority+0x50>)
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	3b04      	subs	r3, #4
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	440b      	add	r3, r1
 80027b6:	761a      	strb	r2, [r3, #24]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000e100 	.word	0xe000e100
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f1c3 0307 	rsb	r3, r3, #7
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	bf28      	it	cs
 80027ea:	2304      	movcs	r3, #4
 80027ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d902      	bls.n	80027fc <NVIC_EncodePriority+0x30>
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3b03      	subs	r3, #3
 80027fa:	e000      	b.n	80027fe <NVIC_EncodePriority+0x32>
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	f04f 32ff 	mov.w	r2, #4294967295
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43da      	mvns	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	401a      	ands	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	43d9      	mvns	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	4313      	orrs	r3, r2
         );
}
 8002826:	4618      	mov	r0, r3
 8002828:	3724      	adds	r7, #36	; 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002844:	d301      	bcc.n	800284a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002846:	2301      	movs	r3, #1
 8002848:	e00f      	b.n	800286a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <SysTick_Config+0x40>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002852:	210f      	movs	r1, #15
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f7ff ff8e 	bl	8002778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <SysTick_Config+0x40>)
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SysTick_Config+0x40>)
 8002864:	2207      	movs	r2, #7
 8002866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	e000e010 	.word	0xe000e010

08002878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff47 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288e:	b580      	push	{r7, lr}
 8002890:	b086      	sub	sp, #24
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a0:	f7ff ff5c 	bl	800275c <__NVIC_GetPriorityGrouping>
 80028a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	6978      	ldr	r0, [r7, #20]
 80028ac:	f7ff ff8e 	bl	80027cc <NVIC_EncodePriority>
 80028b0:	4602      	mov	r2, r0
 80028b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff5d 	bl	8002778 <__NVIC_SetPriority>
}
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffb0 	bl	8002834 <SysTick_Config>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06a      	b.n	80029c8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d106      	bne.n	800290a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2223      	movs	r2, #35	; 0x23
 8002900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fc09 	bl	800211c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_ETH_Init+0xf0>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <HAL_ETH_Init+0xf0>)
 8002910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002914:	6453      	str	r3, [r2, #68]	; 0x44
 8002916:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_ETH_Init+0xf0>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002922:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <HAL_ETH_Init+0xf4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <HAL_ETH_Init+0xf4>)
 8002928:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800292c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800292e:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <HAL_ETH_Init+0xf4>)
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4927      	ldr	r1, [pc, #156]	; (80029d4 <HAL_ETH_Init+0xf4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <HAL_ETH_Init+0xf4>)
 800293e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002956:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002958:	f7ff feac 	bl	80026b4 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800295e:	e011      	b.n	8002984 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002960:	f7ff fea8 	bl	80026b4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800296e:	d909      	bls.n	8002984 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2204      	movs	r2, #4
 8002974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	22e0      	movs	r2, #224	; 0xe0
 800297c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e021      	b.n	80029c8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e4      	bne.n	8002960 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f958 	bl	8002c4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f9ff 	bl	8002da0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa55 	bl	8002e52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	461a      	mov	r2, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f9bd 	bl	8002d30 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2210      	movs	r2, #16
 80029c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40013800 	.word	0x40013800

080029d8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4b51      	ldr	r3, [pc, #324]	; (8002b34 <ETH_SetMACConfig+0x15c>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	7c1b      	ldrb	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <ETH_SetMACConfig+0x28>
 80029fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029fe:	e000      	b.n	8002a02 <ETH_SetMACConfig+0x2a>
 8002a00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	7c5b      	ldrb	r3, [r3, #17]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <ETH_SetMACConfig+0x38>
 8002a0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a0e:	e000      	b.n	8002a12 <ETH_SetMACConfig+0x3a>
 8002a10:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a12:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	7fdb      	ldrb	r3, [r3, #31]
 8002a1e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a20:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	7f92      	ldrb	r2, [r2, #30]
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	d102      	bne.n	8002a36 <ETH_SetMACConfig+0x5e>
 8002a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a34:	e000      	b.n	8002a38 <ETH_SetMACConfig+0x60>
 8002a36:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	7f1b      	ldrb	r3, [r3, #28]
 8002a3e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a40:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	791b      	ldrb	r3, [r3, #4]
 8002a4c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a56:	2a00      	cmp	r2, #0
 8002a58:	d102      	bne.n	8002a60 <ETH_SetMACConfig+0x88>
 8002a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a5e:	e000      	b.n	8002a62 <ETH_SetMACConfig+0x8a>
 8002a60:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a62:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	7bdb      	ldrb	r3, [r3, #15]
 8002a68:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a6a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a70:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a78:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7ff fe1a 	bl	80026cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002aae:	4013      	ands	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002abe:	2a00      	cmp	r2, #0
 8002ac0:	d101      	bne.n	8002ac6 <ETH_SetMACConfig+0xee>
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	e000      	b.n	8002ac8 <ETH_SetMACConfig+0xf0>
 8002ac6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ac8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ace:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002ad6:	2a01      	cmp	r2, #1
 8002ad8:	d101      	bne.n	8002ade <ETH_SetMACConfig+0x106>
 8002ada:	2208      	movs	r2, #8
 8002adc:	e000      	b.n	8002ae0 <ETH_SetMACConfig+0x108>
 8002ade:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ae0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002ae8:	2a01      	cmp	r2, #1
 8002aea:	d101      	bne.n	8002af0 <ETH_SetMACConfig+0x118>
 8002aec:	2204      	movs	r2, #4
 8002aee:	e000      	b.n	8002af2 <ETH_SetMACConfig+0x11a>
 8002af0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002af2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002afa:	2a01      	cmp	r2, #1
 8002afc:	d101      	bne.n	8002b02 <ETH_SetMACConfig+0x12a>
 8002afe:	2202      	movs	r2, #2
 8002b00:	e000      	b.n	8002b04 <ETH_SetMACConfig+0x12c>
 8002b02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b04:	4313      	orrs	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f7ff fdd5 	bl	80026cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	ff20810f 	.word	0xff20810f

08002b38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <ETH_SetDMAConfig+0x110>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	7b1b      	ldrb	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d102      	bne.n	8002b64 <ETH_SetDMAConfig+0x2c>
 8002b5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b62:	e000      	b.n	8002b66 <ETH_SetDMAConfig+0x2e>
 8002b64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	7b5b      	ldrb	r3, [r3, #13]
 8002b6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	7f52      	ldrb	r2, [r2, #29]
 8002b72:	2a00      	cmp	r2, #0
 8002b74:	d102      	bne.n	8002b7c <ETH_SetDMAConfig+0x44>
 8002b76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b7a:	e000      	b.n	8002b7e <ETH_SetDMAConfig+0x46>
 8002b7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	7b9b      	ldrb	r3, [r3, #14]
 8002b84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	7f1b      	ldrb	r3, [r3, #28]
 8002b92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	7f9b      	ldrb	r3, [r3, #30]
 8002b9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ba2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002baa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bac:	4313      	orrs	r3, r2
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7ff fd7c 	bl	80026cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	791b      	ldrb	r3, [r3, #4]
 8002be6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002bf2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bf8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f7ff fd4d 	bl	80026cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	f8de3f23 	.word	0xf8de3f23

08002c4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b0a6      	sub	sp, #152	; 0x98
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c60:	2300      	movs	r3, #0
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002cb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002cc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fe86 	bl	80029d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d00:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff08 	bl	8002b38 <ETH_SetDMAConfig>
}
 8002d28:	bf00      	nop
 8002d2a:	3798      	adds	r7, #152	; 0x98
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3305      	adds	r3, #5
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	3204      	adds	r2, #4
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <ETH_MACAddressConfig+0x68>)
 8002d52:	4413      	add	r3, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3303      	adds	r3, #3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	061a      	lsls	r2, r3, #24
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3302      	adds	r3, #2
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	4313      	orrs	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <ETH_MACAddressConfig+0x6c>)
 8002d82:	4413      	add	r3, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	6013      	str	r3, [r2, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40028040 	.word	0x40028040
 8002d9c:	40028044 	.word	0x40028044

08002da0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e03e      	b.n	8002e2c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68d9      	ldr	r1, [r3, #12]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	3206      	adds	r2, #6
 8002de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d80c      	bhi.n	8002e10 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68d9      	ldr	r1, [r3, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	e004      	b.n	8002e1a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d9bd      	bls.n	8002dae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e44:	611a      	str	r2, [r3, #16]
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e046      	b.n	8002eee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6919      	ldr	r1, [r3, #16]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2200      	movs	r2, #0
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e9c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002ea4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	3212      	adds	r2, #18
 8002eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d80c      	bhi.n	8002ede <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6919      	ldr	r1, [r3, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	440b      	add	r3, r1
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	e004      	b.n	8002ee8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3301      	adds	r3, #1
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d9b5      	bls.n	8002e60 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1e:	60da      	str	r2, [r3, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e175      	b.n	8003238 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 8164 	bne.w	8003232 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d005      	beq.n	8002f82 <HAL_GPIO_Init+0x56>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d130      	bne.n	8002fe4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0201 	and.w	r2, r3, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d017      	beq.n	8003020 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d123      	bne.n	8003074 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80be 	beq.w	8003232 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	4a65      	ldr	r2, [pc, #404]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	; 0x44
 80030c2:	4b63      	ldr	r3, [pc, #396]	; (8003250 <HAL_GPIO_Init+0x324>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030ce:	4a61      	ldr	r2, [pc, #388]	; (8003254 <HAL_GPIO_Init+0x328>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a58      	ldr	r2, [pc, #352]	; (8003258 <HAL_GPIO_Init+0x32c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d037      	beq.n	800316a <HAL_GPIO_Init+0x23e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a57      	ldr	r2, [pc, #348]	; (800325c <HAL_GPIO_Init+0x330>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d031      	beq.n	8003166 <HAL_GPIO_Init+0x23a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a56      	ldr	r2, [pc, #344]	; (8003260 <HAL_GPIO_Init+0x334>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02b      	beq.n	8003162 <HAL_GPIO_Init+0x236>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a55      	ldr	r2, [pc, #340]	; (8003264 <HAL_GPIO_Init+0x338>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d025      	beq.n	800315e <HAL_GPIO_Init+0x232>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_GPIO_Init+0x33c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01f      	beq.n	800315a <HAL_GPIO_Init+0x22e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a53      	ldr	r2, [pc, #332]	; (800326c <HAL_GPIO_Init+0x340>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x22a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_GPIO_Init+0x344>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x226>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a51      	ldr	r2, [pc, #324]	; (8003274 <HAL_GPIO_Init+0x348>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x222>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a50      	ldr	r2, [pc, #320]	; (8003278 <HAL_GPIO_Init+0x34c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x21e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	; (800327c <HAL_GPIO_Init+0x350>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x21a>
 8003142:	2309      	movs	r3, #9
 8003144:	e012      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003146:	230a      	movs	r3, #10
 8003148:	e010      	b.n	800316c <HAL_GPIO_Init+0x240>
 800314a:	2308      	movs	r3, #8
 800314c:	e00e      	b.n	800316c <HAL_GPIO_Init+0x240>
 800314e:	2307      	movs	r3, #7
 8003150:	e00c      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003152:	2306      	movs	r3, #6
 8003154:	e00a      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003156:	2305      	movs	r3, #5
 8003158:	e008      	b.n	800316c <HAL_GPIO_Init+0x240>
 800315a:	2304      	movs	r3, #4
 800315c:	e006      	b.n	800316c <HAL_GPIO_Init+0x240>
 800315e:	2303      	movs	r3, #3
 8003160:	e004      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003162:	2302      	movs	r3, #2
 8003164:	e002      	b.n	800316c <HAL_GPIO_Init+0x240>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_GPIO_Init+0x240>
 800316a:	2300      	movs	r3, #0
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	f002 0203 	and.w	r2, r2, #3
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4093      	lsls	r3, r2
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800317c:	4935      	ldr	r1, [pc, #212]	; (8003254 <HAL_GPIO_Init+0x328>)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	3302      	adds	r3, #2
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_GPIO_Init+0x354>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d8:	4a29      	ldr	r2, [pc, #164]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_GPIO_Init+0x354>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_GPIO_Init+0x354>)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_GPIO_Init+0x354>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_GPIO_Init+0x354>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b0f      	cmp	r3, #15
 800323c:	f67f ae86 	bls.w	8002f4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3724      	adds	r7, #36	; 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	40013800 	.word	0x40013800
 8003258:	40020000 	.word	0x40020000
 800325c:	40020400 	.word	0x40020400
 8003260:	40020800 	.word	0x40020800
 8003264:	40020c00 	.word	0x40020c00
 8003268:	40021000 	.word	0x40021000
 800326c:	40021400 	.word	0x40021400
 8003270:	40021800 	.word	0x40021800
 8003274:	40021c00 	.word	0x40021c00
 8003278:	40022000 	.word	0x40022000
 800327c:	40022400 	.word	0x40022400
 8003280:	40013c00 	.word	0x40013c00

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003294:	787b      	ldrb	r3, [r7, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032a0:	e003      	b.n	80032aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	041a      	lsls	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	619a      	str	r2, [r3, #24]
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b8:	b08f      	sub	sp, #60	; 0x3c
 80032ba:	af0a      	add	r7, sp, #40	; 0x28
 80032bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e116      	b.n	80034f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff f8bc 	bl	8002460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2203      	movs	r2, #3
 80032ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f002 f882 	bl	8005410 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	603b      	str	r3, [r7, #0]
 8003312:	687e      	ldr	r6, [r7, #4]
 8003314:	466d      	mov	r5, sp
 8003316:	f106 0410 	add.w	r4, r6, #16
 800331a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800331e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003322:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003326:	e885 0003 	stmia.w	r5, {r0, r1}
 800332a:	1d33      	adds	r3, r6, #4
 800332c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f002 f816 	bl	8005360 <USB_CoreInit>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2202      	movs	r2, #2
 800333e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0d7      	b.n	80034f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f002 f870 	bl	8005432 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	e04a      	b.n	80033ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	333d      	adds	r3, #61	; 0x3d
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	333c      	adds	r3, #60	; 0x3c
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	b298      	uxth	r0, r3
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3344      	adds	r3, #68	; 0x44
 8003394:	4602      	mov	r2, r0
 8003396:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3340      	adds	r3, #64	; 0x40
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3348      	adds	r3, #72	; 0x48
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	334c      	adds	r3, #76	; 0x4c
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3354      	adds	r3, #84	; 0x54
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	3301      	adds	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d3af      	bcc.n	8003358 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f8:	2300      	movs	r3, #0
 80033fa:	73fb      	strb	r3, [r7, #15]
 80033fc:	e044      	b.n	8003488 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	3301      	adds	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d3b5      	bcc.n	80033fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	687e      	ldr	r6, [r7, #4]
 800349a:	466d      	mov	r5, sp
 800349c:	f106 0410 	add.w	r4, r6, #16
 80034a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80034b0:	1d33      	adds	r3, r6, #4
 80034b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b4:	6838      	ldr	r0, [r7, #0]
 80034b6:	f002 f809 	bl	80054cc <USB_DevInit>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e014      	b.n	80034f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d102      	bne.n	80034ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f80b 	bl	8003500 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 f9c7 	bl	8005882 <USB_DevDisconnect>

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003500 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_PCDEx_ActivateLPM+0x44>)
 8003530:	4313      	orrs	r3, r2
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	10000003 	.word	0x10000003

08003548 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40007000 	.word	0x40007000

08003568 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b23      	ldr	r3, [pc, #140]	; (8003600 <HAL_PWREx_EnableOverDrive+0x98>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	4a22      	ldr	r2, [pc, #136]	; (8003600 <HAL_PWREx_EnableOverDrive+0x98>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357c:	6413      	str	r3, [r2, #64]	; 0x40
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_PWREx_EnableOverDrive+0x98>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_PWREx_EnableOverDrive+0x9c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003596:	f7ff f88d 	bl	80026b4 <HAL_GetTick>
 800359a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800359c:	e009      	b.n	80035b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800359e:	f7ff f889 	bl	80026b4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ac:	d901      	bls.n	80035b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e022      	b.n	80035f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035be:	d1ee      	bne.n	800359e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0f      	ldr	r2, [pc, #60]	; (8003604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035cc:	f7ff f872 	bl	80026b4 <HAL_GetTick>
 80035d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035d2:	e009      	b.n	80035e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035d4:	f7ff f86e 	bl	80026b4 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035e2:	d901      	bls.n	80035e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e007      	b.n	80035f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035f4:	d1ee      	bne.n	80035d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40023800 	.word	0x40023800
 8003604:	40007000 	.word	0x40007000

08003608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e29b      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8087 	beq.w	800373a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800362c:	4b96      	ldr	r3, [pc, #600]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b04      	cmp	r3, #4
 8003636:	d00c      	beq.n	8003652 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003638:	4b93      	ldr	r3, [pc, #588]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b08      	cmp	r3, #8
 8003642:	d112      	bne.n	800366a <HAL_RCC_OscConfig+0x62>
 8003644:	4b90      	ldr	r3, [pc, #576]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003650:	d10b      	bne.n	800366a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003652:	4b8d      	ldr	r3, [pc, #564]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d06c      	beq.n	8003738 <HAL_RCC_OscConfig+0x130>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d168      	bne.n	8003738 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e275      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x7a>
 8003674:	4b84      	ldr	r3, [pc, #528]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a83      	ldr	r2, [pc, #524]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	e02e      	b.n	80036e0 <HAL_RCC_OscConfig+0xd8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x9c>
 800368a:	4b7f      	ldr	r3, [pc, #508]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a7e      	ldr	r2, [pc, #504]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b7c      	ldr	r3, [pc, #496]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7b      	ldr	r2, [pc, #492]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 800369c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e01d      	b.n	80036e0 <HAL_RCC_OscConfig+0xd8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0xc0>
 80036ae:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a75      	ldr	r2, [pc, #468]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80036b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b73      	ldr	r3, [pc, #460]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a72      	ldr	r2, [pc, #456]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0xd8>
 80036c8:	4b6f      	ldr	r3, [pc, #444]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a6e      	ldr	r2, [pc, #440]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b6c      	ldr	r3, [pc, #432]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a6b      	ldr	r2, [pc, #428]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80036da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe ffe4 	bl	80026b4 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fe ffe0 	bl	80026b4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e229      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	4b61      	ldr	r3, [pc, #388]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0xe8>
 800370e:	e014      	b.n	800373a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fe ffd0 	bl	80026b4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003718:	f7fe ffcc 	bl	80026b4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e215      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	4b57      	ldr	r3, [pc, #348]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x110>
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d069      	beq.n	800381a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003746:	4b50      	ldr	r3, [pc, #320]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003752:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b08      	cmp	r3, #8
 800375c:	d11c      	bne.n	8003798 <HAL_RCC_OscConfig+0x190>
 800375e:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d116      	bne.n	8003798 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_RCC_OscConfig+0x17a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d001      	beq.n	8003782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e1e9      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003782:	4b41      	ldr	r3, [pc, #260]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	493d      	ldr	r1, [pc, #244]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	e040      	b.n	800381a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d023      	beq.n	80037e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a0:	4b39      	ldr	r3, [pc, #228]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a38      	ldr	r2, [pc, #224]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe ff82 	bl	80026b4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fe ff7e 	bl	80026b4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1c7      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	4b30      	ldr	r3, [pc, #192]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4929      	ldr	r1, [pc, #164]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]
 80037e6:	e018      	b.n	800381a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a26      	ldr	r2, [pc, #152]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe ff5e 	bl	80026b4 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fc:	f7fe ff5a 	bl	80026b4 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e1a3      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380e:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d038      	beq.n	8003898 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d019      	beq.n	8003862 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003832:	4a15      	ldr	r2, [pc, #84]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fe ff3b 	bl	80026b4 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003842:	f7fe ff37 	bl	80026b4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e180      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x23a>
 8003860:	e01a      	b.n	8003898 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003866:	4a08      	ldr	r2, [pc, #32]	; (8003888 <HAL_RCC_OscConfig+0x280>)
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fe ff21 	bl	80026b4 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	e00a      	b.n	800388c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003876:	f7fe ff1d 	bl	80026b4 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d903      	bls.n	800388c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e166      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
 8003888:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	4b92      	ldr	r3, [pc, #584]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 800388e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ee      	bne.n	8003876 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80a4 	beq.w	80039ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a6:	4b8c      	ldr	r3, [pc, #560]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10d      	bne.n	80038ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b89      	ldr	r3, [pc, #548]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a88      	ldr	r2, [pc, #544]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b86      	ldr	r3, [pc, #536]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ce:	4b83      	ldr	r3, [pc, #524]	; (8003adc <HAL_RCC_OscConfig+0x4d4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d118      	bne.n	800390c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038da:	4b80      	ldr	r3, [pc, #512]	; (8003adc <HAL_RCC_OscConfig+0x4d4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a7f      	ldr	r2, [pc, #508]	; (8003adc <HAL_RCC_OscConfig+0x4d4>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e6:	f7fe fee5 	bl	80026b4 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ee:	f7fe fee1 	bl	80026b4 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b64      	cmp	r3, #100	; 0x64
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e12a      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003900:	4b76      	ldr	r3, [pc, #472]	; (8003adc <HAL_RCC_OscConfig+0x4d4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x31a>
 8003914:	4b70      	ldr	r3, [pc, #448]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4a6f      	ldr	r2, [pc, #444]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	; 0x70
 8003920:	e02d      	b.n	800397e <HAL_RCC_OscConfig+0x376>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x33c>
 800392a:	4b6b      	ldr	r3, [pc, #428]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	4a6a      	ldr	r2, [pc, #424]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6713      	str	r3, [r2, #112]	; 0x70
 8003936:	4b68      	ldr	r3, [pc, #416]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	4a67      	ldr	r2, [pc, #412]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 800393c:	f023 0304 	bic.w	r3, r3, #4
 8003940:	6713      	str	r3, [r2, #112]	; 0x70
 8003942:	e01c      	b.n	800397e <HAL_RCC_OscConfig+0x376>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b05      	cmp	r3, #5
 800394a:	d10c      	bne.n	8003966 <HAL_RCC_OscConfig+0x35e>
 800394c:	4b62      	ldr	r3, [pc, #392]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	4a61      	ldr	r2, [pc, #388]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003952:	f043 0304 	orr.w	r3, r3, #4
 8003956:	6713      	str	r3, [r2, #112]	; 0x70
 8003958:	4b5f      	ldr	r3, [pc, #380]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a5e      	ldr	r2, [pc, #376]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	e00b      	b.n	800397e <HAL_RCC_OscConfig+0x376>
 8003966:	4b5c      	ldr	r3, [pc, #368]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	4a5b      	ldr	r2, [pc, #364]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6713      	str	r3, [r2, #112]	; 0x70
 8003972:	4b59      	ldr	r3, [pc, #356]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d015      	beq.n	80039b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe fe95 	bl	80026b4 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fe fe91 	bl	80026b4 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0d8      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	4b4c      	ldr	r3, [pc, #304]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ee      	beq.n	800398e <HAL_RCC_OscConfig+0x386>
 80039b0:	e014      	b.n	80039dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b2:	f7fe fe7f 	bl	80026b4 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ba:	f7fe fe7b 	bl	80026b4 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e0c2      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ee      	bne.n	80039ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d105      	bne.n	80039ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e2:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	4a3c      	ldr	r2, [pc, #240]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 80039e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80ae 	beq.w	8003b54 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f8:	4b37      	ldr	r3, [pc, #220]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d06d      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d14b      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0c:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a31      	ldr	r2, [pc, #196]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fe fe4c 	bl	80026b4 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fe fe48 	bl	80026b4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e091      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	4b29      	ldr	r3, [pc, #164]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	3b01      	subs	r3, #1
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	491b      	ldr	r1, [pc, #108]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a70:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fe1a 	bl	80026b4 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fe fe16 	bl	80026b4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e05f      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x47c>
 8003aa2:	e057      	b.n	8003b54 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fe00 	bl	80026b4 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fe fdfc 	bl	80026b4 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e045      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <HAL_RCC_OscConfig+0x4d0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4b0>
 8003ad6:	e03d      	b.n	8003b54 <HAL_RCC_OscConfig+0x54c>
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <HAL_RCC_OscConfig+0x558>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d030      	beq.n	8003b50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d129      	bne.n	8003b50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d122      	bne.n	8003b50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b10:	4013      	ands	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d119      	bne.n	8003b50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d10f      	bne.n	8003b50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0d0      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d910      	bls.n	8003bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8a:	4b67      	ldr	r3, [pc, #412]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 020f 	bic.w	r2, r3, #15
 8003b92:	4965      	ldr	r1, [pc, #404]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b63      	ldr	r3, [pc, #396]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0b8      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc4:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bdc:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a52      	ldr	r2, [pc, #328]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003be6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be8:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	494d      	ldr	r1, [pc, #308]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d040      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d115      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e07f      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e073      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e06b      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c46:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 0203 	bic.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4936      	ldr	r1, [pc, #216]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c58:	f7fe fd2c 	bl	80026b4 <HAL_GetTick>
 8003c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c60:	f7fe fd28 	bl	80026b4 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e053      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 020c 	and.w	r2, r3, #12
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1eb      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c88:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d210      	bcs.n	8003cb8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 020f 	bic.w	r2, r3, #15
 8003c9e:	4922      	ldr	r1, [pc, #136]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e032      	b.n	8003d1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc4:	4b19      	ldr	r3, [pc, #100]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4916      	ldr	r1, [pc, #88]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d009      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	490e      	ldr	r1, [pc, #56]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cf6:	f000 f821 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	490a      	ldr	r1, [pc, #40]	; (8003d30 <HAL_RCC_ClockConfig+0x1cc>)
 8003d08:	5ccb      	ldrb	r3, [r1, r3]
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <HAL_RCC_ClockConfig+0x1d0>)
 8003d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d12:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCC_ClockConfig+0x1d4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe fc88 	bl	800262c <HAL_InitTick>

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023c00 	.word	0x40023c00
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	08008ca0 	.word	0x08008ca0
 8003d34:	20000000 	.word	0x20000000
 8003d38:	20000004 	.word	0x20000004

08003d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d40:	b094      	sub	sp, #80	; 0x50
 8003d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	647b      	str	r3, [r7, #68]	; 0x44
 8003d48:	2300      	movs	r3, #0
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d54:	4b79      	ldr	r3, [pc, #484]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 030c 	and.w	r3, r3, #12
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d00d      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x40>
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	f200 80e1 	bhi.w	8003f28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_RCC_GetSysClockFreq+0x34>
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d6e:	e0db      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b73      	ldr	r3, [pc, #460]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d74:	e0db      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d76:	4b73      	ldr	r3, [pc, #460]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d7a:	e0d8      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d7c:	4b6f      	ldr	r3, [pc, #444]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d86:	4b6d      	ldr	r3, [pc, #436]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d063      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b6a      	ldr	r3, [pc, #424]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	2200      	movs	r2, #0
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
 8003da6:	2300      	movs	r3, #0
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
 8003daa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dae:	4622      	mov	r2, r4
 8003db0:	462b      	mov	r3, r5
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	0159      	lsls	r1, r3, #5
 8003dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc0:	0150      	lsls	r0, r2, #5
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	1a51      	subs	r1, r2, r1
 8003dca:	6139      	str	r1, [r7, #16]
 8003dcc:	4629      	mov	r1, r5
 8003dce:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de0:	4659      	mov	r1, fp
 8003de2:	018b      	lsls	r3, r1, #6
 8003de4:	4651      	mov	r1, sl
 8003de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dea:	4651      	mov	r1, sl
 8003dec:	018a      	lsls	r2, r1, #6
 8003dee:	4651      	mov	r1, sl
 8003df0:	ebb2 0801 	subs.w	r8, r2, r1
 8003df4:	4659      	mov	r1, fp
 8003df6:	eb63 0901 	sbc.w	r9, r3, r1
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0e:	4690      	mov	r8, r2
 8003e10:	4699      	mov	r9, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	eb18 0303 	adds.w	r3, r8, r3
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	462b      	mov	r3, r5
 8003e1c:	eb49 0303 	adc.w	r3, r9, r3
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	024b      	lsls	r3, r1, #9
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e38:	4621      	mov	r1, r4
 8003e3a:	024a      	lsls	r2, r1, #9
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e42:	2200      	movs	r2, #0
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e4c:	f7fc fa42 	bl	80002d4 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4613      	mov	r3, r2
 8003e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e58:	e058      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5a:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	099b      	lsrs	r3, r3, #6
 8003e60:	2200      	movs	r2, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	4611      	mov	r1, r2
 8003e66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e6a:	623b      	str	r3, [r7, #32]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	f04f 0000 	mov.w	r0, #0
 8003e7c:	f04f 0100 	mov.w	r1, #0
 8003e80:	0159      	lsls	r1, r3, #5
 8003e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e86:	0150      	lsls	r0, r2, #5
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4641      	mov	r1, r8
 8003e8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e92:	4649      	mov	r1, r9
 8003e94:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eac:	ebb2 040a 	subs.w	r4, r2, sl
 8003eb0:	eb63 050b 	sbc.w	r5, r3, fp
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	00eb      	lsls	r3, r5, #3
 8003ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec2:	00e2      	lsls	r2, r4, #3
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	461d      	mov	r5, r3
 8003ec8:	4643      	mov	r3, r8
 8003eca:	18e3      	adds	r3, r4, r3
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	464b      	mov	r3, r9
 8003ed0:	eb45 0303 	adc.w	r3, r5, r3
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	028b      	lsls	r3, r1, #10
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eec:	4621      	mov	r1, r4
 8003eee:	028a      	lsls	r2, r1, #10
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	61fa      	str	r2, [r7, #28]
 8003efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f00:	f7fc f9e8 	bl	80002d4 <__aeabi_uldivmod>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4613      	mov	r3, r2
 8003f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f26:	e002      	b.n	8003f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3750      	adds	r7, #80	; 0x50
 8003f34:	46bd      	mov	sp, r7
 8003f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	007a1200 	.word	0x007a1200

08003f48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000000 	.word	0x20000000

08003f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f64:	f7ff fff0 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0a9b      	lsrs	r3, r3, #10
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4903      	ldr	r1, [pc, #12]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40023800 	.word	0x40023800
 8003f84:	08008cb0 	.word	0x08008cb0

08003f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f8c:	f7ff ffdc 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	0b5b      	lsrs	r3, r3, #13
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	4903      	ldr	r1, [pc, #12]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9e:	5ccb      	ldrb	r3, [r1, r3]
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	08008cb0 	.word	0x08008cb0

08003fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fd8:	4b69      	ldr	r3, [pc, #420]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a68      	ldr	r2, [pc, #416]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fe2:	6093      	str	r3, [r2, #8]
 8003fe4:	4b66      	ldr	r3, [pc, #408]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	4964      	ldr	r1, [pc, #400]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d017      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004010:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	4959      	ldr	r1, [pc, #356]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004028:	d101      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800402a:	2301      	movs	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004036:	2301      	movs	r3, #1
 8004038:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d017      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004046:	4b4e      	ldr	r3, [pc, #312]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800404c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	494a      	ldr	r1, [pc, #296]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004064:	d101      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004066:	2301      	movs	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004072:	2301      	movs	r3, #1
 8004074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004082:	2301      	movs	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 808b 	beq.w	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	4a39      	ldr	r2, [pc, #228]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409e:	6413      	str	r3, [r2, #64]	; 0x40
 80040a0:	4b37      	ldr	r3, [pc, #220]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040ac:	4b35      	ldr	r3, [pc, #212]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a34      	ldr	r2, [pc, #208]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b8:	f7fe fafc 	bl	80026b4 <HAL_GetTick>
 80040bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c0:	f7fe faf8 	bl	80026b4 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e38f      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040d2:	4b2c      	ldr	r3, [pc, #176]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040de:	4b28      	ldr	r3, [pc, #160]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d035      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d02e      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040fc:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004104:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800411e:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004124:	4b16      	ldr	r3, [pc, #88]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d114      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe fac0 	bl	80026b4 <HAL_GetTick>
 8004134:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004136:	e00a      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004138:	f7fe fabc 	bl	80026b4 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	; 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e351      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414e:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ee      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004166:	d111      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004176:	400b      	ands	r3, r1
 8004178:	4901      	ldr	r1, [pc, #4]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
 800417e:	e00b      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004180:	40023800 	.word	0x40023800
 8004184:	40007000 	.word	0x40007000
 8004188:	0ffffcff 	.word	0x0ffffcff
 800418c:	4bac      	ldr	r3, [pc, #688]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4aab      	ldr	r2, [pc, #684]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004192:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004196:	6093      	str	r3, [r2, #8]
 8004198:	4ba9      	ldr	r3, [pc, #676]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	49a6      	ldr	r1, [pc, #664]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d010      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041b6:	4ba2      	ldr	r3, [pc, #648]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041bc:	4aa0      	ldr	r2, [pc, #640]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80041c6:	4b9e      	ldr	r3, [pc, #632]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	499b      	ldr	r1, [pc, #620]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e4:	4b96      	ldr	r3, [pc, #600]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041f2:	4993      	ldr	r1, [pc, #588]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004206:	4b8e      	ldr	r3, [pc, #568]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004214:	498a      	ldr	r1, [pc, #552]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004228:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004236:	4982      	ldr	r1, [pc, #520]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800424a:	4b7d      	ldr	r3, [pc, #500]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	4979      	ldr	r1, [pc, #484]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800426c:	4b74      	ldr	r3, [pc, #464]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f023 0203 	bic.w	r2, r3, #3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	4971      	ldr	r1, [pc, #452]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800428e:	4b6c      	ldr	r3, [pc, #432]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	f023 020c 	bic.w	r2, r3, #12
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	4968      	ldr	r1, [pc, #416]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042b0:	4b63      	ldr	r3, [pc, #396]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042be:	4960      	ldr	r1, [pc, #384]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042d2:	4b5b      	ldr	r3, [pc, #364]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	4957      	ldr	r1, [pc, #348]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042f4:	4b52      	ldr	r3, [pc, #328]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	494f      	ldr	r1, [pc, #316]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004316:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	4946      	ldr	r1, [pc, #280]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004338:	4b41      	ldr	r3, [pc, #260]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004346:	493e      	ldr	r1, [pc, #248]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800435a:	4b39      	ldr	r3, [pc, #228]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004368:	4935      	ldr	r1, [pc, #212]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800437c:	4b30      	ldr	r3, [pc, #192]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438a:	492d      	ldr	r1, [pc, #180]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d011      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800439e:	4b28      	ldr	r3, [pc, #160]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ac:	4924      	ldr	r1, [pc, #144]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043bc:	d101      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043ce:	2301      	movs	r3, #1
 80043d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ec:	4914      	ldr	r1, [pc, #80]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00b      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004410:	490b      	ldr	r1, [pc, #44]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00f      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004434:	4902      	ldr	r1, [pc, #8]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800443c:	e002      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004450:	4b8a      	ldr	r3, [pc, #552]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004456:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	4986      	ldr	r1, [pc, #536]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004474:	4b81      	ldr	r3, [pc, #516]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004484:	497d      	ldr	r1, [pc, #500]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d006      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80d6 	beq.w	800464c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044a0:	4b76      	ldr	r3, [pc, #472]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a75      	ldr	r2, [pc, #468]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ac:	f7fe f902 	bl	80026b4 <HAL_GetTick>
 80044b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044b4:	f7fe f8fe 	bl	80026b4 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e195      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044c6:	4b6d      	ldr	r3, [pc, #436]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d021      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d11d      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044e6:	4b65      	ldr	r3, [pc, #404]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044f4:	4b61      	ldr	r3, [pc, #388]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fa:	0e1b      	lsrs	r3, r3, #24
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	019a      	lsls	r2, r3, #6
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	431a      	orrs	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	061b      	lsls	r3, r3, #24
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	071b      	lsls	r3, r3, #28
 800451a:	4958      	ldr	r1, [pc, #352]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004540:	2b00      	cmp	r3, #0
 8004542:	d02e      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800454c:	d129      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800454e:	4b4b      	ldr	r3, [pc, #300]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800455c:	4b47      	ldr	r3, [pc, #284]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004562:	0f1b      	lsrs	r3, r3, #28
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	019a      	lsls	r2, r3, #6
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	041b      	lsls	r3, r3, #16
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	061b      	lsls	r3, r3, #24
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	071b      	lsls	r3, r3, #28
 8004582:	493e      	ldr	r1, [pc, #248]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800458a:	4b3c      	ldr	r3, [pc, #240]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004590:	f023 021f 	bic.w	r2, r3, #31
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	3b01      	subs	r3, #1
 800459a:	4938      	ldr	r1, [pc, #224]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01d      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045ae:	4b33      	ldr	r3, [pc, #204]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b4:	0e1b      	lsrs	r3, r3, #24
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045bc:	4b2f      	ldr	r3, [pc, #188]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c2:	0f1b      	lsrs	r3, r3, #28
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	019a      	lsls	r2, r3, #6
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	431a      	orrs	r2, r3
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	071b      	lsls	r3, r3, #28
 80045e2:	4926      	ldr	r1, [pc, #152]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d011      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	019a      	lsls	r2, r3, #6
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	071b      	lsls	r3, r3, #28
 8004612:	491a      	ldr	r1, [pc, #104]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004620:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004626:	f7fe f845 	bl	80026b4 <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800462e:	f7fe f841 	bl	80026b4 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b64      	cmp	r3, #100	; 0x64
 800463a:	d901      	bls.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e0d8      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004640:	4b0e      	ldr	r3, [pc, #56]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b01      	cmp	r3, #1
 8004650:	f040 80ce 	bne.w	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a08      	ldr	r2, [pc, #32]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004660:	f7fe f828 	bl	80026b4 <HAL_GetTick>
 8004664:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004666:	e00b      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004668:	f7fe f824 	bl	80026b4 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	; 0x64
 8004674:	d904      	bls.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e0bb      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004680:	4b5e      	ldr	r3, [pc, #376]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800468c:	d0ec      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d02e      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d12a      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046b6:	4b51      	ldr	r3, [pc, #324]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046c4:	4b4d      	ldr	r3, [pc, #308]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	0f1b      	lsrs	r3, r3, #28
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	019a      	lsls	r2, r3, #6
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	041b      	lsls	r3, r3, #16
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	071b      	lsls	r3, r3, #28
 80046ea:	4944      	ldr	r1, [pc, #272]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046f2:	4b42      	ldr	r3, [pc, #264]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	3b01      	subs	r3, #1
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	493d      	ldr	r1, [pc, #244]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d022      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800471c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004720:	d11d      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004722:	4b36      	ldr	r3, [pc, #216]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	0e1b      	lsrs	r3, r3, #24
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004730:	4b32      	ldr	r3, [pc, #200]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	0f1b      	lsrs	r3, r3, #28
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	019a      	lsls	r2, r3, #6
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	431a      	orrs	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	071b      	lsls	r3, r3, #28
 8004756:	4929      	ldr	r1, [pc, #164]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d028      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	0e1b      	lsrs	r3, r3, #24
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004778:	4b20      	ldr	r3, [pc, #128]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	019a      	lsls	r2, r3, #6
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	041b      	lsls	r3, r3, #16
 8004790:	431a      	orrs	r2, r3
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	071b      	lsls	r3, r3, #28
 800479e:	4917      	ldr	r1, [pc, #92]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047a6:	4b15      	ldr	r3, [pc, #84]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	4911      	ldr	r1, [pc, #68]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c8:	f7fd ff74 	bl	80026b4 <HAL_GetTick>
 80047cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047d0:	f7fd ff70 	bl	80026b4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e007      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ee:	d1ef      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800

08004800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e040      	b.n	8004894 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fd fd32 	bl	800228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2224      	movs	r2, #36	; 0x24
 800482c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f974 	bl	8004b2c <UART_SetConfig>
 8004844:	4603      	mov	r3, r0
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e022      	b.n	8004894 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fbcc 	bl	8004ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800486a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800487a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fc53 	bl	8005138 <UART_CheckIdleState>
 8004892:	4603      	mov	r3, r0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d171      	bne.n	8004998 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_UART_Transmit+0x24>
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e06a      	b.n	800499a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2221      	movs	r2, #33	; 0x21
 80048d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d2:	f7fd feef 	bl	80026b4 <HAL_GetTick>
 80048d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f0:	d108      	bne.n	8004904 <HAL_UART_Transmit+0x68>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	e003      	b.n	800490c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800490c:	e02c      	b.n	8004968 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2200      	movs	r2, #0
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fc5a 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e038      	b.n	800499a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800493c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	3302      	adds	r3, #2
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	e007      	b.n	8004956 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	781a      	ldrb	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	3301      	adds	r3, #1
 8004954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1cc      	bne.n	800490e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2200      	movs	r2, #0
 800497c:	2140      	movs	r1, #64	; 0x40
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fc27 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e005      	b.n	800499a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	e000      	b.n	800499a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
  }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b08a      	sub	sp, #40	; 0x28
 80049a6:	af02      	add	r7, sp, #8
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	f040 80b1 	bne.w	8004b20 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_UART_Receive+0x28>
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0a9      	b.n	8004b22 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2222      	movs	r2, #34	; 0x22
 80049da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049e4:	f7fd fe66 	bl	80026b4 <HAL_GetTick>
 80049e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	88fa      	ldrh	r2, [r7, #6]
 80049ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	88fa      	ldrh	r2, [r7, #6]
 80049f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a02:	d10e      	bne.n	8004a22 <HAL_UART_Receive+0x80>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d105      	bne.n	8004a18 <HAL_UART_Receive+0x76>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a16:	e02d      	b.n	8004a74 <HAL_UART_Receive+0xd2>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	22ff      	movs	r2, #255	; 0xff
 8004a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a20:	e028      	b.n	8004a74 <HAL_UART_Receive+0xd2>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10d      	bne.n	8004a46 <HAL_UART_Receive+0xa4>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d104      	bne.n	8004a3c <HAL_UART_Receive+0x9a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	22ff      	movs	r2, #255	; 0xff
 8004a36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a3a:	e01b      	b.n	8004a74 <HAL_UART_Receive+0xd2>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	227f      	movs	r2, #127	; 0x7f
 8004a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a44:	e016      	b.n	8004a74 <HAL_UART_Receive+0xd2>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a4e:	d10d      	bne.n	8004a6c <HAL_UART_Receive+0xca>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <HAL_UART_Receive+0xc0>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	227f      	movs	r2, #127	; 0x7f
 8004a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a60:	e008      	b.n	8004a74 <HAL_UART_Receive+0xd2>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	223f      	movs	r2, #63	; 0x3f
 8004a66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a6a:	e003      	b.n	8004a74 <HAL_UART_Receive+0xd2>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a7a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a84:	d108      	bne.n	8004a98 <HAL_UART_Receive+0xf6>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d104      	bne.n	8004a98 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	e003      	b.n	8004aa0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004aa0:	e032      	b.n	8004b08 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2120      	movs	r1, #32
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 fb90 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e032      	b.n	8004b22 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10c      	bne.n	8004adc <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	8a7b      	ldrh	r3, [r7, #18]
 8004acc:	4013      	ands	r3, r2
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e00c      	b.n	8004af6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	8a7b      	ldrh	r3, [r7, #18]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	4013      	ands	r3, r2
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	3301      	adds	r3, #1
 8004af4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1c6      	bne.n	8004aa2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e000      	b.n	8004b22 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4ba6      	ldr	r3, [pc, #664]	; (8004df0 <UART_SetConfig+0x2c4>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	6979      	ldr	r1, [r7, #20]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a94      	ldr	r2, [pc, #592]	; (8004df4 <UART_SetConfig+0x2c8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d120      	bne.n	8004bea <UART_SetConfig+0xbe>
 8004ba8:	4b93      	ldr	r3, [pc, #588]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d816      	bhi.n	8004be4 <UART_SetConfig+0xb8>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x90>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004bd9 	.word	0x08004bd9
 8004bc4:	08004bd3 	.word	0x08004bd3
 8004bc8:	08004bdf 	.word	0x08004bdf
 8004bcc:	2301      	movs	r3, #1
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e150      	b.n	8004e74 <UART_SetConfig+0x348>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e14d      	b.n	8004e74 <UART_SetConfig+0x348>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e14a      	b.n	8004e74 <UART_SetConfig+0x348>
 8004bde:	2308      	movs	r3, #8
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e147      	b.n	8004e74 <UART_SetConfig+0x348>
 8004be4:	2310      	movs	r3, #16
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e144      	b.n	8004e74 <UART_SetConfig+0x348>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a83      	ldr	r2, [pc, #524]	; (8004dfc <UART_SetConfig+0x2d0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d132      	bne.n	8004c5a <UART_SetConfig+0x12e>
 8004bf4:	4b80      	ldr	r3, [pc, #512]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	2b0c      	cmp	r3, #12
 8004c00:	d828      	bhi.n	8004c54 <UART_SetConfig+0x128>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <UART_SetConfig+0xdc>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c55 	.word	0x08004c55
 8004c10:	08004c55 	.word	0x08004c55
 8004c14:	08004c55 	.word	0x08004c55
 8004c18:	08004c49 	.word	0x08004c49
 8004c1c:	08004c55 	.word	0x08004c55
 8004c20:	08004c55 	.word	0x08004c55
 8004c24:	08004c55 	.word	0x08004c55
 8004c28:	08004c43 	.word	0x08004c43
 8004c2c:	08004c55 	.word	0x08004c55
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c55 	.word	0x08004c55
 8004c38:	08004c4f 	.word	0x08004c4f
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e118      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c42:	2302      	movs	r3, #2
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e115      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e112      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c4e:	2308      	movs	r3, #8
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e10f      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c54:	2310      	movs	r3, #16
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e10c      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a68      	ldr	r2, [pc, #416]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d120      	bne.n	8004ca6 <UART_SetConfig+0x17a>
 8004c64:	4b64      	ldr	r3, [pc, #400]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c6e:	2b30      	cmp	r3, #48	; 0x30
 8004c70:	d013      	beq.n	8004c9a <UART_SetConfig+0x16e>
 8004c72:	2b30      	cmp	r3, #48	; 0x30
 8004c74:	d814      	bhi.n	8004ca0 <UART_SetConfig+0x174>
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d009      	beq.n	8004c8e <UART_SetConfig+0x162>
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d810      	bhi.n	8004ca0 <UART_SetConfig+0x174>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <UART_SetConfig+0x15c>
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d006      	beq.n	8004c94 <UART_SetConfig+0x168>
 8004c86:	e00b      	b.n	8004ca0 <UART_SetConfig+0x174>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e0f2      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e0ef      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c94:	2304      	movs	r3, #4
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e0ec      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e0e9      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e0e6      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a56      	ldr	r2, [pc, #344]	; (8004e04 <UART_SetConfig+0x2d8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d120      	bne.n	8004cf2 <UART_SetConfig+0x1c6>
 8004cb0:	4b51      	ldr	r3, [pc, #324]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cba:	2bc0      	cmp	r3, #192	; 0xc0
 8004cbc:	d013      	beq.n	8004ce6 <UART_SetConfig+0x1ba>
 8004cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc0:	d814      	bhi.n	8004cec <UART_SetConfig+0x1c0>
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d009      	beq.n	8004cda <UART_SetConfig+0x1ae>
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d810      	bhi.n	8004cec <UART_SetConfig+0x1c0>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <UART_SetConfig+0x1a8>
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d006      	beq.n	8004ce0 <UART_SetConfig+0x1b4>
 8004cd2:	e00b      	b.n	8004cec <UART_SetConfig+0x1c0>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e0cc      	b.n	8004e74 <UART_SetConfig+0x348>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e0c9      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e0c6      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e0c3      	b.n	8004e74 <UART_SetConfig+0x348>
 8004cec:	2310      	movs	r3, #16
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e0c0      	b.n	8004e74 <UART_SetConfig+0x348>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a44      	ldr	r2, [pc, #272]	; (8004e08 <UART_SetConfig+0x2dc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d125      	bne.n	8004d48 <UART_SetConfig+0x21c>
 8004cfc:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0a:	d017      	beq.n	8004d3c <UART_SetConfig+0x210>
 8004d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d10:	d817      	bhi.n	8004d42 <UART_SetConfig+0x216>
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d16:	d00b      	beq.n	8004d30 <UART_SetConfig+0x204>
 8004d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1c:	d811      	bhi.n	8004d42 <UART_SetConfig+0x216>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <UART_SetConfig+0x1fe>
 8004d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d26:	d006      	beq.n	8004d36 <UART_SetConfig+0x20a>
 8004d28:	e00b      	b.n	8004d42 <UART_SetConfig+0x216>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e0a1      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d30:	2302      	movs	r3, #2
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e09e      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d36:	2304      	movs	r3, #4
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e09b      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e098      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d42:	2310      	movs	r3, #16
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e095      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a2f      	ldr	r2, [pc, #188]	; (8004e0c <UART_SetConfig+0x2e0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d125      	bne.n	8004d9e <UART_SetConfig+0x272>
 8004d52:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d60:	d017      	beq.n	8004d92 <UART_SetConfig+0x266>
 8004d62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d66:	d817      	bhi.n	8004d98 <UART_SetConfig+0x26c>
 8004d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6c:	d00b      	beq.n	8004d86 <UART_SetConfig+0x25a>
 8004d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d72:	d811      	bhi.n	8004d98 <UART_SetConfig+0x26c>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <UART_SetConfig+0x254>
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7c:	d006      	beq.n	8004d8c <UART_SetConfig+0x260>
 8004d7e:	e00b      	b.n	8004d98 <UART_SetConfig+0x26c>
 8004d80:	2301      	movs	r3, #1
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e076      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d86:	2302      	movs	r3, #2
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e073      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e070      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d92:	2308      	movs	r3, #8
 8004d94:	77fb      	strb	r3, [r7, #31]
 8004d96:	e06d      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e06a      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <UART_SetConfig+0x2e4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d138      	bne.n	8004e1a <UART_SetConfig+0x2ee>
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004db2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004db6:	d017      	beq.n	8004de8 <UART_SetConfig+0x2bc>
 8004db8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dbc:	d82a      	bhi.n	8004e14 <UART_SetConfig+0x2e8>
 8004dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc2:	d00b      	beq.n	8004ddc <UART_SetConfig+0x2b0>
 8004dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc8:	d824      	bhi.n	8004e14 <UART_SetConfig+0x2e8>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <UART_SetConfig+0x2aa>
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd2:	d006      	beq.n	8004de2 <UART_SetConfig+0x2b6>
 8004dd4:	e01e      	b.n	8004e14 <UART_SetConfig+0x2e8>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e04b      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e048      	b.n	8004e74 <UART_SetConfig+0x348>
 8004de2:	2304      	movs	r3, #4
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e045      	b.n	8004e74 <UART_SetConfig+0x348>
 8004de8:	2308      	movs	r3, #8
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e042      	b.n	8004e74 <UART_SetConfig+0x348>
 8004dee:	bf00      	nop
 8004df0:	efff69f3 	.word	0xefff69f3
 8004df4:	40011000 	.word	0x40011000
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	40004400 	.word	0x40004400
 8004e00:	40004800 	.word	0x40004800
 8004e04:	40004c00 	.word	0x40004c00
 8004e08:	40005000 	.word	0x40005000
 8004e0c:	40011400 	.word	0x40011400
 8004e10:	40007800 	.word	0x40007800
 8004e14:	2310      	movs	r3, #16
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e02c      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a72      	ldr	r2, [pc, #456]	; (8004fe8 <UART_SetConfig+0x4bc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d125      	bne.n	8004e70 <UART_SetConfig+0x344>
 8004e24:	4b71      	ldr	r3, [pc, #452]	; (8004fec <UART_SetConfig+0x4c0>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e32:	d017      	beq.n	8004e64 <UART_SetConfig+0x338>
 8004e34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e38:	d817      	bhi.n	8004e6a <UART_SetConfig+0x33e>
 8004e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3e:	d00b      	beq.n	8004e58 <UART_SetConfig+0x32c>
 8004e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e44:	d811      	bhi.n	8004e6a <UART_SetConfig+0x33e>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <UART_SetConfig+0x326>
 8004e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e4e:	d006      	beq.n	8004e5e <UART_SetConfig+0x332>
 8004e50:	e00b      	b.n	8004e6a <UART_SetConfig+0x33e>
 8004e52:	2300      	movs	r3, #0
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e00d      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e00a      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e007      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e64:	2308      	movs	r3, #8
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e004      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e001      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e70:	2310      	movs	r3, #16
 8004e72:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7c:	d15b      	bne.n	8004f36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e7e:	7ffb      	ldrb	r3, [r7, #31]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d828      	bhi.n	8004ed6 <UART_SetConfig+0x3aa>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x360>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004ec1 	.word	0x08004ec1
 8004e98:	08004ed7 	.word	0x08004ed7
 8004e9c:	08004ec7 	.word	0x08004ec7
 8004ea0:	08004ed7 	.word	0x08004ed7
 8004ea4:	08004ed7 	.word	0x08004ed7
 8004ea8:	08004ed7 	.word	0x08004ed7
 8004eac:	08004ecf 	.word	0x08004ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7ff f856 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8004eb4:	61b8      	str	r0, [r7, #24]
        break;
 8004eb6:	e013      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb8:	f7ff f866 	bl	8003f88 <HAL_RCC_GetPCLK2Freq>
 8004ebc:	61b8      	str	r0, [r7, #24]
        break;
 8004ebe:	e00f      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec0:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <UART_SetConfig+0x4c4>)
 8004ec2:	61bb      	str	r3, [r7, #24]
        break;
 8004ec4:	e00c      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec6:	f7fe ff39 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8004eca:	61b8      	str	r0, [r7, #24]
        break;
 8004ecc:	e008      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed2:	61bb      	str	r3, [r7, #24]
        break;
 8004ed4:	e004      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	77bb      	strb	r3, [r7, #30]
        break;
 8004ede:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d074      	beq.n	8004fd0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	005a      	lsls	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	085b      	lsrs	r3, r3, #1
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	d916      	bls.n	8004f30 <UART_SetConfig+0x404>
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f08:	d212      	bcs.n	8004f30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f023 030f 	bic.w	r3, r3, #15
 8004f12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	89fb      	ldrh	r3, [r7, #14]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	89fa      	ldrh	r2, [r7, #14]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	e04f      	b.n	8004fd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	77bb      	strb	r3, [r7, #30]
 8004f34:	e04c      	b.n	8004fd0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d828      	bhi.n	8004f8e <UART_SetConfig+0x462>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0x418>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f71 	.word	0x08004f71
 8004f4c:	08004f79 	.word	0x08004f79
 8004f50:	08004f8f 	.word	0x08004f8f
 8004f54:	08004f7f 	.word	0x08004f7f
 8004f58:	08004f8f 	.word	0x08004f8f
 8004f5c:	08004f8f 	.word	0x08004f8f
 8004f60:	08004f8f 	.word	0x08004f8f
 8004f64:	08004f87 	.word	0x08004f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f68:	f7fe fffa 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8004f6c:	61b8      	str	r0, [r7, #24]
        break;
 8004f6e:	e013      	b.n	8004f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f70:	f7ff f80a 	bl	8003f88 <HAL_RCC_GetPCLK2Freq>
 8004f74:	61b8      	str	r0, [r7, #24]
        break;
 8004f76:	e00f      	b.n	8004f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <UART_SetConfig+0x4c4>)
 8004f7a:	61bb      	str	r3, [r7, #24]
        break;
 8004f7c:	e00c      	b.n	8004f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7e:	f7fe fedd 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8004f82:	61b8      	str	r0, [r7, #24]
        break;
 8004f84:	e008      	b.n	8004f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8a:	61bb      	str	r3, [r7, #24]
        break;
 8004f8c:	e004      	b.n	8004f98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	77bb      	strb	r3, [r7, #30]
        break;
 8004f96:	bf00      	nop
    }

    if (pclk != 0U)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d018      	beq.n	8004fd0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	085a      	lsrs	r2, r3, #1
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	441a      	add	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b0f      	cmp	r3, #15
 8004fb6:	d909      	bls.n	8004fcc <UART_SetConfig+0x4a0>
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbe:	d205      	bcs.n	8004fcc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	e001      	b.n	8004fd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40007c00 	.word	0x40007c00
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	00f42400 	.word	0x00f42400

08004ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01a      	beq.n	800510a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f2:	d10a      	bne.n	800510a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005148:	f7fd fab4 	bl	80026b4 <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d10e      	bne.n	800517a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800515c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f831 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e027      	b.n	80051ca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d10e      	bne.n	80051a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f81b 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e011      	b.n	80051ca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b09c      	sub	sp, #112	; 0x70
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e2:	e0a7      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ea:	f000 80a3 	beq.w	8005334 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fd fa61 	bl	80026b4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <UART_WaitOnFlagUntilTimeout+0x32>
 80051fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005200:	2b00      	cmp	r3, #0
 8005202:	d13f      	bne.n	8005284 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005218:	667b      	str	r3, [r7, #100]	; 0x64
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005224:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e6      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3308      	adds	r3, #8
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	663b      	str	r3, [r7, #96]	; 0x60
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3308      	adds	r3, #8
 8005254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005256:	64ba      	str	r2, [r7, #72]	; 0x48
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800525c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e5      	bne.n	8005236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e068      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d050      	beq.n	8005334 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a0:	d148      	bne.n	8005334 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
 80052cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e6      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3308      	adds	r3, #8
 80052e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	613b      	str	r3, [r7, #16]
   return(result);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3308      	adds	r3, #8
 80052fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052fe:	623a      	str	r2, [r7, #32]
 8005300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	69f9      	ldr	r1, [r7, #28]
 8005304:	6a3a      	ldr	r2, [r7, #32]
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	61bb      	str	r3, [r7, #24]
   return(result);
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e5      	bne.n	80052de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e010      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69da      	ldr	r2, [r3, #28]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	429a      	cmp	r2, r3
 8005350:	f43f af48 	beq.w	80051e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3770      	adds	r7, #112	; 0x70
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005360:	b084      	sub	sp, #16
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	f107 001c 	add.w	r0, r7, #28
 800536e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2b01      	cmp	r3, #1
 8005376:	d120      	bne.n	80053ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	4b20      	ldr	r3, [pc, #128]	; (800540c <USB_CoreInit+0xac>)
 800538a:	4013      	ands	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800539c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa96 	bl	80058e0 <USB_CoreReset>
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]
 80053b8:	e010      	b.n	80053dc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fa8a 	bl	80058e0 <USB_CoreReset>
 80053cc:	4603      	mov	r3, r0
 80053ce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d10b      	bne.n	80053fa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f043 0206 	orr.w	r2, r3, #6
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f043 0220 	orr.w	r2, r3, #32
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005406:	b004      	add	sp, #16
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	ffbdffbf 	.word	0xffbdffbf

08005410 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f023 0201 	bic.w	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d115      	bne.n	8005480 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005460:	2001      	movs	r0, #1
 8005462:	f7fd f933 	bl	80026cc <HAL_Delay>
      ms++;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fa29 	bl	80058c4 <USB_GetMode>
 8005472:	4603      	mov	r3, r0
 8005474:	2b01      	cmp	r3, #1
 8005476:	d01e      	beq.n	80054b6 <USB_SetCurrentMode+0x84>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b31      	cmp	r3, #49	; 0x31
 800547c:	d9f0      	bls.n	8005460 <USB_SetCurrentMode+0x2e>
 800547e:	e01a      	b.n	80054b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d115      	bne.n	80054b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005492:	2001      	movs	r0, #1
 8005494:	f7fd f91a 	bl	80026cc <HAL_Delay>
      ms++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa10 	bl	80058c4 <USB_GetMode>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <USB_SetCurrentMode+0x84>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b31      	cmp	r3, #49	; 0x31
 80054ae:	d9f0      	bls.n	8005492 <USB_SetCurrentMode+0x60>
 80054b0:	e001      	b.n	80054b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e005      	b.n	80054c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b32      	cmp	r3, #50	; 0x32
 80054ba:	d101      	bne.n	80054c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054cc:	b084      	sub	sp, #16
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	e009      	b.n	8005500 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	3340      	adds	r3, #64	; 0x40
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3301      	adds	r3, #1
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b0e      	cmp	r3, #14
 8005504:	d9f2      	bls.n	80054ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d11c      	bne.n	8005546 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800551a:	f043 0302 	orr.w	r3, r3, #2
 800551e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e005      	b.n	8005552 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005558:	461a      	mov	r2, r3
 800555a:	2300      	movs	r3, #0
 800555c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005564:	4619      	mov	r1, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556c:	461a      	mov	r2, r3
 800556e:	680b      	ldr	r3, [r1, #0]
 8005570:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b01      	cmp	r3, #1
 8005576:	d10c      	bne.n	8005592 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800557e:	2100      	movs	r1, #0
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f965 	bl	8005850 <USB_SetDevSpeed>
 8005586:	e008      	b.n	800559a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005588:	2101      	movs	r1, #1
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f960 	bl	8005850 <USB_SetDevSpeed>
 8005590:	e003      	b.n	800559a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005592:	2103      	movs	r1, #3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f95b 	bl	8005850 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800559a:	2110      	movs	r1, #16
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f8f3 	bl	8005788 <USB_FlushTxFifo>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f91f 	bl	80057f0 <USB_FlushRxFifo>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	461a      	mov	r2, r3
 80055c4:	2300      	movs	r3, #0
 80055c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ce:	461a      	mov	r2, r3
 80055d0:	2300      	movs	r3, #0
 80055d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	461a      	mov	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	e043      	b.n	800566e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fc:	d118      	bne.n	8005630 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005610:	461a      	mov	r2, r3
 8005612:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	e013      	b.n	8005642 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	461a      	mov	r2, r3
 8005628:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e008      	b.n	8005642 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563c:	461a      	mov	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	461a      	mov	r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	461a      	mov	r2, r3
 8005662:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005666:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	3301      	adds	r3, #1
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	429a      	cmp	r2, r3
 8005674:	d3b7      	bcc.n	80055e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	e043      	b.n	8005704 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800568e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005692:	d118      	bne.n	80056c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	461a      	mov	r2, r3
 80056a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e013      	b.n	80056d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	461a      	mov	r2, r3
 80056be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e008      	b.n	80056d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	461a      	mov	r2, r3
 80056d4:	2300      	movs	r3, #0
 80056d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	461a      	mov	r2, r3
 80056e6:	2300      	movs	r3, #0
 80056e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	3301      	adds	r3, #1
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	429a      	cmp	r2, r3
 800570a:	d3b7      	bcc.n	800567c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800572c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f043 0210 	orr.w	r2, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <USB_DevInit+0x2b4>)
 8005746:	4313      	orrs	r3, r2
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f043 0208 	orr.w	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800575e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d105      	bne.n	8005770 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <USB_DevInit+0x2b8>)
 800576a:	4313      	orrs	r3, r2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800577c:	b004      	add	sp, #16
 800577e:	4770      	bx	lr
 8005780:	803c3800 	.word	0x803c3800
 8005784:	40000004 	.word	0x40000004

08005788 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3301      	adds	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4a13      	ldr	r2, [pc, #76]	; (80057ec <USB_FlushTxFifo+0x64>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e01b      	b.n	80057e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	daf2      	bge.n	8005796 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	019b      	lsls	r3, r3, #6
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a08      	ldr	r2, [pc, #32]	; (80057ec <USB_FlushTxFifo+0x64>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e006      	b.n	80057e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d0f0      	beq.n	80057c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	00030d40 	.word	0x00030d40

080057f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a11      	ldr	r2, [pc, #68]	; (800584c <USB_FlushRxFifo+0x5c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e018      	b.n	8005840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	daf2      	bge.n	80057fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2210      	movs	r2, #16
 800581e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4a08      	ldr	r2, [pc, #32]	; (800584c <USB_FlushRxFifo+0x5c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d901      	bls.n	8005832 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e006      	b.n	8005840 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b10      	cmp	r3, #16
 800583c:	d0f0      	beq.n	8005820 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	00030d40 	.word	0x00030d40

08005850 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005870:	4313      	orrs	r3, r2
 8005872:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800589c:	f023 0303 	bic.w	r3, r3, #3
 80058a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0301 	and.w	r3, r3, #1
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3301      	adds	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <USB_CoreReset+0x64>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e01b      	b.n	8005936 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	daf2      	bge.n	80058ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f043 0201 	orr.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3301      	adds	r3, #1
 800591a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a09      	ldr	r2, [pc, #36]	; (8005944 <USB_CoreReset+0x64>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d901      	bls.n	8005928 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e006      	b.n	8005936 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	d0f0      	beq.n	8005916 <USB_CoreReset+0x36>

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	00030d40 	.word	0x00030d40

08005948 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800594c:	bf00      	nop
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800595e:	f3ef 8305 	mrs	r3, IPSR
 8005962:	60bb      	str	r3, [r7, #8]
  return(result);
 8005964:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10f      	bne.n	800598a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596a:	f3ef 8310 	mrs	r3, PRIMASK
 800596e:	607b      	str	r3, [r7, #4]
  return(result);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005976:	f3ef 8311 	mrs	r3, BASEPRI
 800597a:	603b      	str	r3, [r7, #0]
  return(result);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <osKernelInitialize+0x3a>
 8005982:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <osKernelInitialize+0x64>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d103      	bne.n	8005992 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800598a:	f06f 0305 	mvn.w	r3, #5
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e00c      	b.n	80059ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <osKernelInitialize+0x64>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d105      	bne.n	80059a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800599a:	4b08      	ldr	r3, [pc, #32]	; (80059bc <osKernelInitialize+0x64>)
 800599c:	2201      	movs	r2, #1
 800599e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e002      	b.n	80059ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295
 80059aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059ac:	68fb      	ldr	r3, [r7, #12]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	200013ec 	.word	0x200013ec

080059c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c6:	f3ef 8305 	mrs	r3, IPSR
 80059ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80059cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10f      	bne.n	80059f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d2:	f3ef 8310 	mrs	r3, PRIMASK
 80059d6:	607b      	str	r3, [r7, #4]
  return(result);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059de:	f3ef 8311 	mrs	r3, BASEPRI
 80059e2:	603b      	str	r3, [r7, #0]
  return(result);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <osKernelStart+0x3a>
 80059ea:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <osKernelStart+0x68>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d103      	bne.n	80059fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80059f2:	f06f 0305 	mvn.w	r3, #5
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e010      	b.n	8005a1c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <osKernelStart+0x68>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d109      	bne.n	8005a16 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a02:	f7ff ffa1 	bl	8005948 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a06:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <osKernelStart+0x68>)
 8005a08:	2202      	movs	r2, #2
 8005a0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a0c:	f001 f9a4 	bl	8006d58 <vTaskStartScheduler>
      stat = osOK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	e002      	b.n	8005a1c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	200013ec 	.word	0x200013ec

08005a2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b090      	sub	sp, #64	; 0x40
 8005a30:	af04      	add	r7, sp, #16
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a3c:	f3ef 8305 	mrs	r3, IPSR
 8005a40:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a42:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f040 808f 	bne.w	8005b68 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d105      	bne.n	8005a62 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a56:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5a:	617b      	str	r3, [r7, #20]
  return(result);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <osThreadNew+0x3e>
 8005a62:	4b44      	ldr	r3, [pc, #272]	; (8005b74 <osThreadNew+0x148>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d07e      	beq.n	8005b68 <osThreadNew+0x13c>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d07b      	beq.n	8005b68 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005a74:	2318      	movs	r3, #24
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d045      	beq.n	8005b14 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <osThreadNew+0x6a>
        name = attr->name;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <osThreadNew+0x90>
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	2b38      	cmp	r3, #56	; 0x38
 8005aae:	d805      	bhi.n	8005abc <osThreadNew+0x90>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <osThreadNew+0x94>
        return (NULL);
 8005abc:	2300      	movs	r3, #0
 8005abe:	e054      	b.n	8005b6a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	089b      	lsrs	r3, r3, #2
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00e      	beq.n	8005af6 <osThreadNew+0xca>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2bbb      	cmp	r3, #187	; 0xbb
 8005ade:	d90a      	bls.n	8005af6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d006      	beq.n	8005af6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <osThreadNew+0xca>
        mem = 1;
 8005af0:	2301      	movs	r3, #1
 8005af2:	623b      	str	r3, [r7, #32]
 8005af4:	e010      	b.n	8005b18 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10c      	bne.n	8005b18 <osThreadNew+0xec>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d108      	bne.n	8005b18 <osThreadNew+0xec>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d104      	bne.n	8005b18 <osThreadNew+0xec>
          mem = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	623b      	str	r3, [r7, #32]
 8005b12:	e001      	b.n	8005b18 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d110      	bne.n	8005b40 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b26:	9202      	str	r2, [sp, #8]
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 ff19 	bl	800696c <xTaskCreateStatic>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	e013      	b.n	8005b68 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d110      	bne.n	8005b68 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f107 0310 	add.w	r3, r7, #16
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 ff6a 	bl	8006a32 <xTaskCreate>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d001      	beq.n	8005b68 <osThreadNew+0x13c>
          hTask = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b68:	693b      	ldr	r3, [r7, #16]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3730      	adds	r7, #48	; 0x30
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200013ec 	.word	0x200013ec

08005b78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b80:	f3ef 8305 	mrs	r3, IPSR
 8005b84:	613b      	str	r3, [r7, #16]
  return(result);
 8005b86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10f      	bne.n	8005bac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b90:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b98:	f3ef 8311 	mrs	r3, BASEPRI
 8005b9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <osDelay+0x3c>
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <osDelay+0x58>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d103      	bne.n	8005bb4 <osDelay+0x3c>
    stat = osErrorISR;
 8005bac:	f06f 0305 	mvn.w	r3, #5
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e007      	b.n	8005bc4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f001 f894 	bl	8006cec <vTaskDelay>
    }
  }

  return (stat);
 8005bc4:	697b      	ldr	r3, [r7, #20]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200013ec 	.word	0x200013ec

08005bd4 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f002 fa57 	bl	8008090 <pvTimerGetTimerID>
 8005be2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	6852      	ldr	r2, [r2, #4]
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4798      	blx	r3
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08e      	sub	sp, #56	; 0x38
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	607a      	str	r2, [r7, #4]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005c10:	2300      	movs	r3, #0
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c14:	f3ef 8305 	mrs	r3, IPSR
 8005c18:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c1a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d16a      	bne.n	8005cf6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c20:	f3ef 8310 	mrs	r3, PRIMASK
 8005c24:	617b      	str	r3, [r7, #20]
  return(result);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c30:	613b      	str	r3, [r7, #16]
  return(result);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <osTimerNew+0x40>
 8005c38:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <osTimerNew+0x100>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d05a      	beq.n	8005cf6 <osTimerNew+0xf6>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d057      	beq.n	8005cf6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005c46:	2008      	movs	r0, #8
 8005c48:	f002 fc7c 	bl	8008544 <pvPortMalloc>
 8005c4c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d050      	beq.n	8005cf6 <osTimerNew+0xf6>
      callb->func = func;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005c60:	7afb      	ldrb	r3, [r7, #11]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <osTimerNew+0x6c>
        reload = pdFALSE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6a:	e001      	b.n	8005c70 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8005c70:	f04f 33ff 	mov.w	r3, #4294967295
 8005c74:	623b      	str	r3, [r7, #32]
      name = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01c      	beq.n	8005cba <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <osTimerNew+0x8e>
          name = attr->name;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d006      	beq.n	8005ca4 <osTimerNew+0xa4>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2b2b      	cmp	r3, #43	; 0x2b
 8005c9c:	d902      	bls.n	8005ca4 <osTimerNew+0xa4>
          mem = 1;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	e00c      	b.n	8005cbe <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d108      	bne.n	8005cbe <osTimerNew+0xbe>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <osTimerNew+0xbe>
            mem = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	623b      	str	r3, [r7, #32]
 8005cb8:	e001      	b.n	8005cbe <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d10c      	bne.n	8005cde <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <osTimerNew+0x104>)
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd6:	f001 fe4a 	bl	800796e <xTimerCreateStatic>
 8005cda:	62b8      	str	r0, [r7, #40]	; 0x28
 8005cdc:	e00b      	b.n	8005cf6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d108      	bne.n	8005cf6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005ce4:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <osTimerNew+0x104>)
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cec:	2101      	movs	r1, #1
 8005cee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cf0:	f001 fe1c 	bl	800792c <xTimerCreate>
 8005cf4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3730      	adds	r7, #48	; 0x30
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	200013ec 	.word	0x200013ec
 8005d04:	08005bd5 	.word	0x08005bd5

08005d08 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d16:	f3ef 8305 	mrs	r3, IPSR
 8005d1a:	617b      	str	r3, [r7, #20]
  return(result);
 8005d1c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d22:	f3ef 8310 	mrs	r3, PRIMASK
 8005d26:	613b      	str	r3, [r7, #16]
  return(result);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d105      	bne.n	8005d3a <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d32:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <osTimerStart+0x42>
 8005d3a:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <osTimerStart+0x7c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d103      	bne.n	8005d4a <osTimerStart+0x42>
    stat = osErrorISR;
 8005d42:	f06f 0305 	mvn.w	r3, #5
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	e017      	b.n	8005d7a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d103      	bne.n	8005d58 <osTimerStart+0x50>
    stat = osErrorParameter;
 8005d50:	f06f 0303 	mvn.w	r3, #3
 8005d54:	61fb      	str	r3, [r7, #28]
 8005d56:	e010      	b.n	8005d7a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005d58:	2300      	movs	r3, #0
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	2104      	movs	r1, #4
 8005d62:	69b8      	ldr	r0, [r7, #24]
 8005d64:	f001 fe82 	bl	8007a6c <xTimerGenericCommand>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d102      	bne.n	8005d74 <osTimerStart+0x6c>
      stat = osOK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61fb      	str	r3, [r7, #28]
 8005d72:	e002      	b.n	8005d7a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8005d74:	f06f 0302 	mvn.w	r3, #2
 8005d78:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	200013ec 	.word	0x200013ec

08005d88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4a07      	ldr	r2, [pc, #28]	; (8005db4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4a06      	ldr	r2, [pc, #24]	; (8005db8 <vApplicationGetIdleTaskMemory+0x30>)
 8005d9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	601a      	str	r2, [r3, #0]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	200013f0 	.word	0x200013f0
 8005db8:	200014ac 	.word	0x200014ac

08005dbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005dcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4a06      	ldr	r2, [pc, #24]	; (8005dec <vApplicationGetTimerTaskMemory+0x30>)
 8005dd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dda:	601a      	str	r2, [r3, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	200016ac 	.word	0x200016ac
 8005dec:	20001768 	.word	0x20001768

08005df0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f103 0208 	add.w	r2, r3, #8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f103 0208 	add.w	r2, r3, #8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 0208 	add.w	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
}
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d103      	bne.n	8005eb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e00c      	b.n	8005ecc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e002      	b.n	8005ec0 <vListInsert+0x2e>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d2f6      	bcs.n	8005eba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6892      	ldr	r2, [r2, #8]
 8005f1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6852      	ldr	r2, [r2, #4]
 8005f24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d103      	bne.n	8005f38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	1e5a      	subs	r2, r3, #1
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10c      	bne.n	8005f86 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	b672      	cpsid	i
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	b662      	cpsie	i
 8005f80:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005f86:	f002 f9b1 	bl	80082ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	441a      	add	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	68f9      	ldr	r1, [r7, #12]
 8005fba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fbc:	fb01 f303 	mul.w	r3, r1, r3
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	22ff      	movs	r2, #255	; 0xff
 8005fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	22ff      	movs	r2, #255	; 0xff
 8005fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d114      	bne.n	8006006 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01a      	beq.n	800601a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3310      	adds	r3, #16
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f96f 	bl	80072cc <xTaskRemoveFromEventList>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d012      	beq.n	800601a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <xQueueGenericReset+0xd0>)
 8005ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	e009      	b.n	800601a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3310      	adds	r3, #16
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fef0 	bl	8005df0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff feeb 	bl	8005df0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800601a:	f002 f99b 	bl	8008354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800601e:	2301      	movs	r3, #1
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	e000ed04 	.word	0xe000ed04

0800602c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08e      	sub	sp, #56	; 0x38
 8006030:	af02      	add	r7, sp, #8
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10c      	bne.n	800605a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	b672      	cpsid	i
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	b662      	cpsie	i
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10c      	bne.n	800607a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	b672      	cpsid	i
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	b662      	cpsie	i
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <xQueueGenericCreateStatic+0x5a>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <xQueueGenericCreateStatic+0x5e>
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <xQueueGenericCreateStatic+0x60>
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10c      	bne.n	80060aa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	b672      	cpsid	i
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	b662      	cpsie	i
 80060a4:	623b      	str	r3, [r7, #32]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <xQueueGenericCreateStatic+0x8a>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <xQueueGenericCreateStatic+0x8e>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericCreateStatic+0x90>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10c      	bne.n	80060da <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	61fb      	str	r3, [r7, #28]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060da:	2350      	movs	r3, #80	; 0x50
 80060dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b50      	cmp	r3, #80	; 0x50
 80060e2:	d00c      	beq.n	80060fe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	b672      	cpsid	i
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	b662      	cpsie	i
 80060f8:	61bb      	str	r3, [r7, #24]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00d      	beq.n	8006126 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006112:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f805 	bl	8006130 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006128:	4618      	mov	r0, r3
 800612a:	3730      	adds	r7, #48	; 0x30
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d103      	bne.n	800614c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e002      	b.n	8006152 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800615e:	2101      	movs	r1, #1
 8006160:	69b8      	ldr	r0, [r7, #24]
 8006162:	f7ff fef9 	bl	8005f58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	78fa      	ldrb	r2, [r7, #3]
 800616a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08e      	sub	sp, #56	; 0x38
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006186:	2300      	movs	r3, #0
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <xQueueGenericSend+0x36>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	b672      	cpsid	i
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	b662      	cpsie	i
 80061a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <xQueueGenericSend+0x44>
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <xQueueGenericSend+0x48>
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <xQueueGenericSend+0x4a>
 80061c0:	2300      	movs	r3, #0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10c      	bne.n	80061e0 <xQueueGenericSend+0x68>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	b672      	cpsid	i
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	b662      	cpsie	i
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d103      	bne.n	80061ee <xQueueGenericSend+0x76>
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <xQueueGenericSend+0x7a>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueGenericSend+0x7c>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10c      	bne.n	8006212 <xQueueGenericSend+0x9a>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	b672      	cpsid	i
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	b662      	cpsie	i
 800620c:	623b      	str	r3, [r7, #32]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006212:	f001 fa5d 	bl	80076d0 <xTaskGetSchedulerState>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d102      	bne.n	8006222 <xQueueGenericSend+0xaa>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <xQueueGenericSend+0xae>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <xQueueGenericSend+0xb0>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10c      	bne.n	8006246 <xQueueGenericSend+0xce>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	b672      	cpsid	i
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	b662      	cpsie	i
 8006240:	61fb      	str	r3, [r7, #28]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006246:	f002 f851 	bl	80082ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	429a      	cmp	r2, r3
 8006254:	d302      	bcc.n	800625c <xQueueGenericSend+0xe4>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d129      	bne.n	80062b0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006262:	f000 fa15 	bl	8006690 <prvCopyDataToQueue>
 8006266:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	d010      	beq.n	8006292 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	3324      	adds	r3, #36	; 0x24
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f829 	bl	80072cc <xTaskRemoveFromEventList>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d013      	beq.n	80062a8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006280:	4b3f      	ldr	r3, [pc, #252]	; (8006380 <xQueueGenericSend+0x208>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	e00a      	b.n	80062a8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006298:	4b39      	ldr	r3, [pc, #228]	; (8006380 <xQueueGenericSend+0x208>)
 800629a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062a8:	f002 f854 	bl	8008354 <vPortExitCritical>
				return pdPASS;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e063      	b.n	8006378 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062b6:	f002 f84d 	bl	8008354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e05c      	b.n	8006378 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062c4:	f107 0314 	add.w	r3, r7, #20
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 f865 	bl	8007398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062ce:	2301      	movs	r3, #1
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062d2:	f002 f83f 	bl	8008354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062d6:	f000 fdb3 	bl	8006e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062da:	f002 f807 	bl	80082ec <vPortEnterCritical>
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062e4:	b25b      	sxtb	r3, r3
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d103      	bne.n	80062f4 <xQueueGenericSend+0x17c>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d103      	bne.n	800630a <xQueueGenericSend+0x192>
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800630a:	f002 f823 	bl	8008354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800630e:	1d3a      	adds	r2, r7, #4
 8006310:	f107 0314 	add.w	r3, r7, #20
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f001 f854 	bl	80073c4 <xTaskCheckForTimeOut>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d124      	bne.n	800636c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006324:	f000 faac 	bl	8006880 <prvIsQueueFull>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d018      	beq.n	8006360 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	3310      	adds	r3, #16
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	4611      	mov	r1, r2
 8006336:	4618      	mov	r0, r3
 8006338:	f000 ff74 	bl	8007224 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800633c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800633e:	f000 fa37 	bl	80067b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006342:	f000 fd8b 	bl	8006e5c <xTaskResumeAll>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	f47f af7c 	bne.w	8006246 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800634e:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <xQueueGenericSend+0x208>)
 8006350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	e772      	b.n	8006246 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006362:	f000 fa25 	bl	80067b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006366:	f000 fd79 	bl	8006e5c <xTaskResumeAll>
 800636a:	e76c      	b.n	8006246 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800636c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800636e:	f000 fa1f 	bl	80067b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006372:	f000 fd73 	bl	8006e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006376:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006378:	4618      	mov	r0, r3
 800637a:	3738      	adds	r7, #56	; 0x38
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08e      	sub	sp, #56	; 0x38
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10c      	bne.n	80063b6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800639c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a0:	b672      	cpsid	i
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	b662      	cpsie	i
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <xQueueGenericSendFromISR+0x40>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <xQueueGenericSendFromISR+0x44>
 80063c4:	2301      	movs	r3, #1
 80063c6:	e000      	b.n	80063ca <xQueueGenericSendFromISR+0x46>
 80063c8:	2300      	movs	r3, #0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10c      	bne.n	80063e8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	b672      	cpsid	i
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	b662      	cpsie	i
 80063e2:	623b      	str	r3, [r7, #32]
}
 80063e4:	bf00      	nop
 80063e6:	e7fe      	b.n	80063e6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d103      	bne.n	80063f6 <xQueueGenericSendFromISR+0x72>
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <xQueueGenericSendFromISR+0x76>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e000      	b.n	80063fc <xQueueGenericSendFromISR+0x78>
 80063fa:	2300      	movs	r3, #0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10c      	bne.n	800641a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	b672      	cpsid	i
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	b662      	cpsie	i
 8006414:	61fb      	str	r3, [r7, #28]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800641a:	f002 f84f 	bl	80084bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800641e:	f3ef 8211 	mrs	r2, BASEPRI
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	b672      	cpsid	i
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	b662      	cpsie	i
 8006436:	61ba      	str	r2, [r7, #24]
 8006438:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800643a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <xQueueGenericSendFromISR+0xcc>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d12c      	bne.n	80064aa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006460:	f000 f916 	bl	8006690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006464:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d112      	bne.n	8006494 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d016      	beq.n	80064a4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	3324      	adds	r3, #36	; 0x24
 800647a:	4618      	mov	r0, r3
 800647c:	f000 ff26 	bl	80072cc <xTaskRemoveFromEventList>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	e007      	b.n	80064a4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006494:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006498:	3301      	adds	r3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	b25a      	sxtb	r2, r3
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064a4:	2301      	movs	r3, #1
 80064a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80064a8:	e001      	b.n	80064ae <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3738      	adds	r7, #56	; 0x38
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08c      	sub	sp, #48	; 0x30
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10c      	bne.n	80064f8 <xQueueReceive+0x34>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	b672      	cpsid	i
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	b662      	cpsie	i
 80064f2:	623b      	str	r3, [r7, #32]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <xQueueReceive+0x42>
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <xQueueReceive+0x46>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <xQueueReceive+0x48>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10c      	bne.n	800652a <xQueueReceive+0x66>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	b672      	cpsid	i
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	b662      	cpsie	i
 8006524:	61fb      	str	r3, [r7, #28]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800652a:	f001 f8d1 	bl	80076d0 <xTaskGetSchedulerState>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <xQueueReceive+0x76>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <xQueueReceive+0x7a>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <xQueueReceive+0x7c>
 800653e:	2300      	movs	r3, #0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10c      	bne.n	800655e <xQueueReceive+0x9a>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	b672      	cpsid	i
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	b662      	cpsie	i
 8006558:	61bb      	str	r3, [r7, #24]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800655e:	f001 fec5 	bl	80082ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01f      	beq.n	80065ae <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006572:	f000 f8f7 	bl	8006764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	1e5a      	subs	r2, r3, #1
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00f      	beq.n	80065a6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	3310      	adds	r3, #16
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fe9e 	bl	80072cc <xTaskRemoveFromEventList>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d007      	beq.n	80065a6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006596:	4b3d      	ldr	r3, [pc, #244]	; (800668c <xQueueReceive+0x1c8>)
 8006598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065a6:	f001 fed5 	bl	8008354 <vPortExitCritical>
				return pdPASS;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e069      	b.n	8006682 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d103      	bne.n	80065bc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065b4:	f001 fece 	bl	8008354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e062      	b.n	8006682 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065c2:	f107 0310 	add.w	r3, r7, #16
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fee6 	bl	8007398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065d0:	f001 fec0 	bl	8008354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065d4:	f000 fc34 	bl	8006e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d8:	f001 fe88 	bl	80082ec <vPortEnterCritical>
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e2:	b25b      	sxtb	r3, r3
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d103      	bne.n	80065f2 <xQueueReceive+0x12e>
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d103      	bne.n	8006608 <xQueueReceive+0x144>
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006608:	f001 fea4 	bl	8008354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800660c:	1d3a      	adds	r2, r7, #4
 800660e:	f107 0310 	add.w	r3, r7, #16
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fed5 	bl	80073c4 <xTaskCheckForTimeOut>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d123      	bne.n	8006668 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006622:	f000 f917 	bl	8006854 <prvIsQueueEmpty>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d017      	beq.n	800665c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	3324      	adds	r3, #36	; 0x24
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fdf5 	bl	8007224 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800663a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663c:	f000 f8b8 	bl	80067b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006640:	f000 fc0c 	bl	8006e5c <xTaskResumeAll>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d189      	bne.n	800655e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800664a:	4b10      	ldr	r3, [pc, #64]	; (800668c <xQueueReceive+0x1c8>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	e780      	b.n	800655e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800665c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665e:	f000 f8a7 	bl	80067b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006662:	f000 fbfb 	bl	8006e5c <xTaskResumeAll>
 8006666:	e77a      	b.n	800655e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666a:	f000 f8a1 	bl	80067b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800666e:	f000 fbf5 	bl	8006e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006674:	f000 f8ee 	bl	8006854 <prvIsQueueEmpty>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	f43f af6f 	beq.w	800655e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006680:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006682:	4618      	mov	r0, r3
 8006684:	3730      	adds	r7, #48	; 0x30
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10d      	bne.n	80066ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d14d      	bne.n	8006752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 f826 	bl	800770c <xTaskPriorityDisinherit>
 80066c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	609a      	str	r2, [r3, #8]
 80066c8:	e043      	b.n	8006752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d119      	bne.n	8006704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6858      	ldr	r0, [r3, #4]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	461a      	mov	r2, r3
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	f002 f93c 	bl	8008958 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	441a      	add	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d32b      	bcc.n	8006752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	e026      	b.n	8006752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68d8      	ldr	r0, [r3, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	461a      	mov	r2, r3
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	f002 f922 	bl	8008958 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	425b      	negs	r3, r3
 800671e:	441a      	add	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d207      	bcs.n	8006740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	425b      	negs	r3, r3
 800673a:	441a      	add	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d105      	bne.n	8006752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	3b01      	subs	r3, #1
 8006750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800675a:	697b      	ldr	r3, [r7, #20]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d018      	beq.n	80067a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	441a      	add	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	d303      	bcc.n	8006798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68d9      	ldr	r1, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	461a      	mov	r2, r3
 80067a2:	6838      	ldr	r0, [r7, #0]
 80067a4:	f002 f8d8 	bl	8008958 <memcpy>
	}
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067b8:	f001 fd98 	bl	80082ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067c4:	e011      	b.n	80067ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d012      	beq.n	80067f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3324      	adds	r3, #36	; 0x24
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fd7a 	bl	80072cc <xTaskRemoveFromEventList>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067de:	f000 fe57 	bl	8007490 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dce9      	bgt.n	80067c6 <prvUnlockQueue+0x16>
 80067f2:	e000      	b.n	80067f6 <prvUnlockQueue+0x46>
					break;
 80067f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	22ff      	movs	r2, #255	; 0xff
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067fe:	f001 fda9 	bl	8008354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006802:	f001 fd73 	bl	80082ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800680c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800680e:	e011      	b.n	8006834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d012      	beq.n	800683e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3310      	adds	r3, #16
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fd55 	bl	80072cc <xTaskRemoveFromEventList>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006828:	f000 fe32 	bl	8007490 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	3b01      	subs	r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006838:	2b00      	cmp	r3, #0
 800683a:	dce9      	bgt.n	8006810 <prvUnlockQueue+0x60>
 800683c:	e000      	b.n	8006840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800683e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	22ff      	movs	r2, #255	; 0xff
 8006844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006848:	f001 fd84 	bl	8008354 <vPortExitCritical>
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800685c:	f001 fd46 	bl	80082ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e001      	b.n	8006872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006872:	f001 fd6f 	bl	8008354 <vPortExitCritical>

	return xReturn;
 8006876:	68fb      	ldr	r3, [r7, #12]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006888:	f001 fd30 	bl	80082ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	429a      	cmp	r2, r3
 8006896:	d102      	bne.n	800689e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006898:	2301      	movs	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	e001      	b.n	80068a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068a2:	f001 fd57 	bl	8008354 <vPortExitCritical>

	return xReturn;
 80068a6:	68fb      	ldr	r3, [r7, #12]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	e014      	b.n	80068ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068c0:	4a0f      	ldr	r2, [pc, #60]	; (8006900 <vQueueAddToRegistry+0x50>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068cc:	490c      	ldr	r1, [pc, #48]	; (8006900 <vQueueAddToRegistry+0x50>)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068d6:	4a0a      	ldr	r2, [pc, #40]	; (8006900 <vQueueAddToRegistry+0x50>)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	4413      	add	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068e2:	e006      	b.n	80068f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b07      	cmp	r3, #7
 80068ee:	d9e7      	bls.n	80068c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20001b68 	.word	0x20001b68

08006904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006914:	f001 fcea 	bl	80082ec <vPortEnterCritical>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800691e:	b25b      	sxtb	r3, r3
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d103      	bne.n	800692e <vQueueWaitForMessageRestricted+0x2a>
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006934:	b25b      	sxtb	r3, r3
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d103      	bne.n	8006944 <vQueueWaitForMessageRestricted+0x40>
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006944:	f001 fd06 	bl	8008354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	d106      	bne.n	800695e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	3324      	adds	r3, #36	; 0x24
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fc89 	bl	8007270 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800695e:	6978      	ldr	r0, [r7, #20]
 8006960:	f7ff ff26 	bl	80067b0 <prvUnlockQueue>
	}
 8006964:	bf00      	nop
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08e      	sub	sp, #56	; 0x38
 8006970:	af04      	add	r7, sp, #16
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10c      	bne.n	800699a <xTaskCreateStatic+0x2e>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	b672      	cpsid	i
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	b662      	cpsie	i
 8006994:	623b      	str	r3, [r7, #32]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10c      	bne.n	80069ba <xTaskCreateStatic+0x4e>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	b672      	cpsid	i
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	b662      	cpsie	i
 80069b4:	61fb      	str	r3, [r7, #28]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ba:	23bc      	movs	r3, #188	; 0xbc
 80069bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2bbc      	cmp	r3, #188	; 0xbc
 80069c2:	d00c      	beq.n	80069de <xTaskCreateStatic+0x72>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	b672      	cpsid	i
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	b662      	cpsie	i
 80069d8:	61bb      	str	r3, [r7, #24]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01e      	beq.n	8006a24 <xTaskCreateStatic+0xb8>
 80069e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01b      	beq.n	8006a24 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	2202      	movs	r2, #2
 80069fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069fe:	2300      	movs	r3, #0
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	9302      	str	r3, [sp, #8]
 8006a06:	f107 0314 	add.w	r3, r7, #20
 8006a0a:	9301      	str	r3, [sp, #4]
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f850 	bl	8006abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a1e:	f000 f8f5 	bl	8006c0c <prvAddNewTaskToReadyList>
 8006a22:	e001      	b.n	8006a28 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a28:	697b      	ldr	r3, [r7, #20]
	}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3728      	adds	r7, #40	; 0x28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08c      	sub	sp, #48	; 0x30
 8006a36:	af04      	add	r7, sp, #16
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a42:	88fb      	ldrh	r3, [r7, #6]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f001 fd7c 	bl	8008544 <pvPortMalloc>
 8006a4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00e      	beq.n	8006a72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a54:	20bc      	movs	r0, #188	; 0xbc
 8006a56:	f001 fd75 	bl	8008544 <pvPortMalloc>
 8006a5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
 8006a68:	e005      	b.n	8006a76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a6a:	6978      	ldr	r0, [r7, #20]
 8006a6c:	f001 fe34 	bl	80086d8 <vPortFree>
 8006a70:	e001      	b.n	8006a76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d017      	beq.n	8006aac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	2300      	movs	r3, #0
 8006a88:	9303      	str	r3, [sp, #12]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	9302      	str	r3, [sp, #8]
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f80e 	bl	8006abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aa0:	69f8      	ldr	r0, [r7, #28]
 8006aa2:	f000 f8b3 	bl	8006c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e002      	b.n	8006ab2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aac:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
	}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3720      	adds	r7, #32
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	21a5      	movs	r1, #165	; 0xa5
 8006ad6:	f001 ff4d 	bl	8008974 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006ae4:	440b      	add	r3, r1
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f023 0307 	bic.w	r3, r3, #7
 8006af2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00c      	beq.n	8006b18 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	b672      	cpsid	i
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	b662      	cpsie	i
 8006b12:	617b      	str	r3, [r7, #20]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01f      	beq.n	8006b5e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	e012      	b.n	8006b4a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	7819      	ldrb	r1, [r3, #0]
 8006b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	3334      	adds	r3, #52	; 0x34
 8006b34:	460a      	mov	r2, r1
 8006b36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d006      	beq.n	8006b52 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b0f      	cmp	r3, #15
 8006b4e:	d9e9      	bls.n	8006b24 <prvInitialiseNewTask+0x68>
 8006b50:	e000      	b.n	8006b54 <prvInitialiseNewTask+0x98>
			{
				break;
 8006b52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b5c:	e003      	b.n	8006b66 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	2b37      	cmp	r3, #55	; 0x37
 8006b6a:	d901      	bls.n	8006b70 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b6c:	2337      	movs	r3, #55	; 0x37
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	2200      	movs	r2, #0
 8006b80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	3304      	adds	r3, #4
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff f952 	bl	8005e30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	3318      	adds	r3, #24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff f94d 	bl	8005e30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006baa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	3354      	adds	r3, #84	; 0x54
 8006bc0:	2260      	movs	r2, #96	; 0x60
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 fed5 	bl	8008974 <memset>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	4a0c      	ldr	r2, [pc, #48]	; (8006c00 <prvInitialiseNewTask+0x144>)
 8006bce:	659a      	str	r2, [r3, #88]	; 0x58
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	4a0c      	ldr	r2, [pc, #48]	; (8006c04 <prvInitialiseNewTask+0x148>)
 8006bd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	4a0b      	ldr	r2, [pc, #44]	; (8006c08 <prvInitialiseNewTask+0x14c>)
 8006bda:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	69b8      	ldr	r0, [r7, #24]
 8006be2:	f001 fa77 	bl	80080d4 <pxPortInitialiseStack>
 8006be6:	4602      	mov	r2, r0
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf8:	bf00      	nop
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	08008cd8 	.word	0x08008cd8
 8006c04:	08008cf8 	.word	0x08008cf8
 8006c08:	08008cb8 	.word	0x08008cb8

08006c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c14:	f001 fb6a 	bl	80082ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c18:	4b2d      	ldr	r3, [pc, #180]	; (8006cd0 <prvAddNewTaskToReadyList+0xc4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	; (8006cd0 <prvAddNewTaskToReadyList+0xc4>)
 8006c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c22:	4b2c      	ldr	r3, [pc, #176]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c2a:	4a2a      	ldr	r2, [pc, #168]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c30:	4b27      	ldr	r3, [pc, #156]	; (8006cd0 <prvAddNewTaskToReadyList+0xc4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d110      	bne.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c38:	f000 fc4e 	bl	80074d8 <prvInitialiseTaskLists>
 8006c3c:	e00d      	b.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c3e:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <prvAddNewTaskToReadyList+0xcc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c46:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d802      	bhi.n	8006c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c54:	4a1f      	ldr	r2, [pc, #124]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c5a:	4b20      	ldr	r3, [pc, #128]	; (8006cdc <prvAddNewTaskToReadyList+0xd0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	4a1e      	ldr	r2, [pc, #120]	; (8006cdc <prvAddNewTaskToReadyList+0xd0>)
 8006c62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c64:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <prvAddNewTaskToReadyList+0xd0>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4b1b      	ldr	r3, [pc, #108]	; (8006ce0 <prvAddNewTaskToReadyList+0xd4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <prvAddNewTaskToReadyList+0x74>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a18      	ldr	r2, [pc, #96]	; (8006ce0 <prvAddNewTaskToReadyList+0xd4>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <prvAddNewTaskToReadyList+0xd8>)
 8006c8e:	441a      	add	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7ff f8d7 	bl	8005e4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c9c:	f001 fb5a 	bl	8008354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <prvAddNewTaskToReadyList+0xcc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00e      	beq.n	8006cc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <prvAddNewTaskToReadyList+0xc8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d207      	bcs.n	8006cc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <prvAddNewTaskToReadyList+0xdc>)
 8006cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	2000207c 	.word	0x2000207c
 8006cd4:	20001ba8 	.word	0x20001ba8
 8006cd8:	20002088 	.word	0x20002088
 8006cdc:	20002098 	.word	0x20002098
 8006ce0:	20002084 	.word	0x20002084
 8006ce4:	20001bac 	.word	0x20001bac
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d019      	beq.n	8006d32 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cfe:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <vTaskDelay+0x64>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00c      	beq.n	8006d20 <vTaskDelay+0x34>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	b672      	cpsid	i
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	b662      	cpsie	i
 8006d1a:	60bb      	str	r3, [r7, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006d20:	f000 f88e 	bl	8006e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d24:	2100      	movs	r1, #0
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fd62 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d2c:	f000 f896 	bl	8006e5c <xTaskResumeAll>
 8006d30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d107      	bne.n	8006d48 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <vTaskDelay+0x68>)
 8006d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d48:	bf00      	nop
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	200020a4 	.word	0x200020a4
 8006d54:	e000ed04 	.word	0xe000ed04

08006d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d66:	463a      	mov	r2, r7
 8006d68:	1d39      	adds	r1, r7, #4
 8006d6a:	f107 0308 	add.w	r3, r7, #8
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff f80a 	bl	8005d88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	9202      	str	r2, [sp, #8]
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	2300      	movs	r3, #0
 8006d84:	460a      	mov	r2, r1
 8006d86:	4926      	ldr	r1, [pc, #152]	; (8006e20 <vTaskStartScheduler+0xc8>)
 8006d88:	4826      	ldr	r0, [pc, #152]	; (8006e24 <vTaskStartScheduler+0xcc>)
 8006d8a:	f7ff fdef 	bl	800696c <xTaskCreateStatic>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4a25      	ldr	r2, [pc, #148]	; (8006e28 <vTaskStartScheduler+0xd0>)
 8006d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d94:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <vTaskStartScheduler+0xd0>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	e001      	b.n	8006da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d102      	bne.n	8006db2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006dac:	f000 fd74 	bl	8007898 <xTimerCreateTimerTask>
 8006db0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d11d      	bne.n	8006df4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	b672      	cpsid	i
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	b662      	cpsie	i
 8006dcc:	613b      	str	r3, [r7, #16]
}
 8006dce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dd0:	4b16      	ldr	r3, [pc, #88]	; (8006e2c <vTaskStartScheduler+0xd4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3354      	adds	r3, #84	; 0x54
 8006dd6:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <vTaskStartScheduler+0xd8>)
 8006dd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dda:	4b16      	ldr	r3, [pc, #88]	; (8006e34 <vTaskStartScheduler+0xdc>)
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8006de0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <vTaskStartScheduler+0xe0>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006de8:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <vTaskStartScheduler+0xe4>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dee:	f001 f9ff 	bl	80081f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006df2:	e010      	b.n	8006e16 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d10c      	bne.n	8006e16 <vTaskStartScheduler+0xbe>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	b672      	cpsid	i
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	b662      	cpsie	i
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <vTaskStartScheduler+0xbc>
}
 8006e16:	bf00      	nop
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	08008be0 	.word	0x08008be0
 8006e24:	080074a9 	.word	0x080074a9
 8006e28:	200020a0 	.word	0x200020a0
 8006e2c:	20001ba8 	.word	0x20001ba8
 8006e30:	20000010 	.word	0x20000010
 8006e34:	2000209c 	.word	0x2000209c
 8006e38:	20002088 	.word	0x20002088
 8006e3c:	20002080 	.word	0x20002080

08006e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e44:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <vTaskSuspendAll+0x18>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	4a03      	ldr	r2, [pc, #12]	; (8006e58 <vTaskSuspendAll+0x18>)
 8006e4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006e4e:	bf00      	nop
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	200020a4 	.word	0x200020a4

08006e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e6a:	4b43      	ldr	r3, [pc, #268]	; (8006f78 <xTaskResumeAll+0x11c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10c      	bne.n	8006e8c <xTaskResumeAll+0x30>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	b672      	cpsid	i
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	b662      	cpsie	i
 8006e86:	603b      	str	r3, [r7, #0]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e8c:	f001 fa2e 	bl	80082ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e90:	4b39      	ldr	r3, [pc, #228]	; (8006f78 <xTaskResumeAll+0x11c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	4a38      	ldr	r2, [pc, #224]	; (8006f78 <xTaskResumeAll+0x11c>)
 8006e98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e9a:	4b37      	ldr	r3, [pc, #220]	; (8006f78 <xTaskResumeAll+0x11c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d162      	bne.n	8006f68 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ea2:	4b36      	ldr	r3, [pc, #216]	; (8006f7c <xTaskResumeAll+0x120>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d05e      	beq.n	8006f68 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eaa:	e02f      	b.n	8006f0c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eac:	4b34      	ldr	r3, [pc, #208]	; (8006f80 <xTaskResumeAll+0x124>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3318      	adds	r3, #24
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff f823 	bl	8005f04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff f81e 	bl	8005f04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ecc:	4b2d      	ldr	r3, [pc, #180]	; (8006f84 <xTaskResumeAll+0x128>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d903      	bls.n	8006edc <xTaskResumeAll+0x80>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	4a2a      	ldr	r2, [pc, #168]	; (8006f84 <xTaskResumeAll+0x128>)
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4a27      	ldr	r2, [pc, #156]	; (8006f88 <xTaskResumeAll+0x12c>)
 8006eea:	441a      	add	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	f7fe ffa9 	bl	8005e4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	4b23      	ldr	r3, [pc, #140]	; (8006f8c <xTaskResumeAll+0x130>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d302      	bcc.n	8006f0c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006f06:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <xTaskResumeAll+0x134>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f0c:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <xTaskResumeAll+0x124>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1cb      	bne.n	8006eac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f1a:	f000 fbb9 	bl	8007690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f1e:	4b1d      	ldr	r3, [pc, #116]	; (8006f94 <xTaskResumeAll+0x138>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d010      	beq.n	8006f4c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f2a:	f000 f859 	bl	8006fe0 <xTaskIncrementTick>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006f34:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <xTaskResumeAll+0x134>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f1      	bne.n	8006f2a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006f46:	4b13      	ldr	r3, [pc, #76]	; (8006f94 <xTaskResumeAll+0x138>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f4c:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <xTaskResumeAll+0x134>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f58:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <xTaskResumeAll+0x13c>)
 8006f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f68:	f001 f9f4 	bl	8008354 <vPortExitCritical>

	return xAlreadyYielded;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	200020a4 	.word	0x200020a4
 8006f7c:	2000207c 	.word	0x2000207c
 8006f80:	2000203c 	.word	0x2000203c
 8006f84:	20002084 	.word	0x20002084
 8006f88:	20001bac 	.word	0x20001bac
 8006f8c:	20001ba8 	.word	0x20001ba8
 8006f90:	20002090 	.word	0x20002090
 8006f94:	2000208c 	.word	0x2000208c
 8006f98:	e000ed04 	.word	0xe000ed04

08006f9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <xTaskGetTickCount+0x1c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fa8:	687b      	ldr	r3, [r7, #4]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20002080 	.word	0x20002080

08006fbc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fc2:	f001 fa7b 	bl	80084bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006fca:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <xTaskGetTickCountFromISR+0x20>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fd0:	683b      	ldr	r3, [r7, #0]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20002080 	.word	0x20002080

08006fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fea:	4b50      	ldr	r3, [pc, #320]	; (800712c <xTaskIncrementTick+0x14c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f040 808b 	bne.w	800710a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ff4:	4b4e      	ldr	r3, [pc, #312]	; (8007130 <xTaskIncrementTick+0x150>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ffc:	4a4c      	ldr	r2, [pc, #304]	; (8007130 <xTaskIncrementTick+0x150>)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d122      	bne.n	800704e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007008:	4b4a      	ldr	r3, [pc, #296]	; (8007134 <xTaskIncrementTick+0x154>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00c      	beq.n	800702c <xTaskIncrementTick+0x4c>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	b672      	cpsid	i
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	b662      	cpsie	i
 8007026:	603b      	str	r3, [r7, #0]
}
 8007028:	bf00      	nop
 800702a:	e7fe      	b.n	800702a <xTaskIncrementTick+0x4a>
 800702c:	4b41      	ldr	r3, [pc, #260]	; (8007134 <xTaskIncrementTick+0x154>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	4b41      	ldr	r3, [pc, #260]	; (8007138 <xTaskIncrementTick+0x158>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a3f      	ldr	r2, [pc, #252]	; (8007134 <xTaskIncrementTick+0x154>)
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	4a3f      	ldr	r2, [pc, #252]	; (8007138 <xTaskIncrementTick+0x158>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	4b3e      	ldr	r3, [pc, #248]	; (800713c <xTaskIncrementTick+0x15c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	4a3d      	ldr	r2, [pc, #244]	; (800713c <xTaskIncrementTick+0x15c>)
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	f000 fb21 	bl	8007690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800704e:	4b3c      	ldr	r3, [pc, #240]	; (8007140 <xTaskIncrementTick+0x160>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	429a      	cmp	r2, r3
 8007056:	d349      	bcc.n	80070ec <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007058:	4b36      	ldr	r3, [pc, #216]	; (8007134 <xTaskIncrementTick+0x154>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007062:	4b37      	ldr	r3, [pc, #220]	; (8007140 <xTaskIncrementTick+0x160>)
 8007064:	f04f 32ff 	mov.w	r2, #4294967295
 8007068:	601a      	str	r2, [r3, #0]
					break;
 800706a:	e03f      	b.n	80070ec <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800706c:	4b31      	ldr	r3, [pc, #196]	; (8007134 <xTaskIncrementTick+0x154>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d203      	bcs.n	800708c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007084:	4a2e      	ldr	r2, [pc, #184]	; (8007140 <xTaskIncrementTick+0x160>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800708a:	e02f      	b.n	80070ec <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	3304      	adds	r3, #4
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe ff37 	bl	8005f04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	3318      	adds	r3, #24
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe ff2e 	bl	8005f04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	4b25      	ldr	r3, [pc, #148]	; (8007144 <xTaskIncrementTick+0x164>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d903      	bls.n	80070bc <xTaskIncrementTick+0xdc>
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	4a22      	ldr	r2, [pc, #136]	; (8007144 <xTaskIncrementTick+0x164>)
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	4613      	mov	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4a1f      	ldr	r2, [pc, #124]	; (8007148 <xTaskIncrementTick+0x168>)
 80070ca:	441a      	add	r2, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4610      	mov	r0, r2
 80070d4:	f7fe feb9 	bl	8005e4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	4b1b      	ldr	r3, [pc, #108]	; (800714c <xTaskIncrementTick+0x16c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d3b8      	bcc.n	8007058 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80070e6:	2301      	movs	r3, #1
 80070e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ea:	e7b5      	b.n	8007058 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070ec:	4b17      	ldr	r3, [pc, #92]	; (800714c <xTaskIncrementTick+0x16c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f2:	4915      	ldr	r1, [pc, #84]	; (8007148 <xTaskIncrementTick+0x168>)
 80070f4:	4613      	mov	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	440b      	add	r3, r1
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d907      	bls.n	8007114 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007104:	2301      	movs	r3, #1
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	e004      	b.n	8007114 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800710a:	4b11      	ldr	r3, [pc, #68]	; (8007150 <xTaskIncrementTick+0x170>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3301      	adds	r3, #1
 8007110:	4a0f      	ldr	r2, [pc, #60]	; (8007150 <xTaskIncrementTick+0x170>)
 8007112:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007114:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <xTaskIncrementTick+0x174>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800711c:	2301      	movs	r3, #1
 800711e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007120:	697b      	ldr	r3, [r7, #20]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200020a4 	.word	0x200020a4
 8007130:	20002080 	.word	0x20002080
 8007134:	20002034 	.word	0x20002034
 8007138:	20002038 	.word	0x20002038
 800713c:	20002094 	.word	0x20002094
 8007140:	2000209c 	.word	0x2000209c
 8007144:	20002084 	.word	0x20002084
 8007148:	20001bac 	.word	0x20001bac
 800714c:	20001ba8 	.word	0x20001ba8
 8007150:	2000208c 	.word	0x2000208c
 8007154:	20002090 	.word	0x20002090

08007158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800715e:	4b2b      	ldr	r3, [pc, #172]	; (800720c <vTaskSwitchContext+0xb4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007166:	4b2a      	ldr	r3, [pc, #168]	; (8007210 <vTaskSwitchContext+0xb8>)
 8007168:	2201      	movs	r2, #1
 800716a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800716c:	e048      	b.n	8007200 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800716e:	4b28      	ldr	r3, [pc, #160]	; (8007210 <vTaskSwitchContext+0xb8>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007174:	4b27      	ldr	r3, [pc, #156]	; (8007214 <vTaskSwitchContext+0xbc>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	e012      	b.n	80071a2 <vTaskSwitchContext+0x4a>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10c      	bne.n	800719c <vTaskSwitchContext+0x44>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	b672      	cpsid	i
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	b662      	cpsie	i
 8007196:	607b      	str	r3, [r7, #4]
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <vTaskSwitchContext+0x42>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3b01      	subs	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	491d      	ldr	r1, [pc, #116]	; (8007218 <vTaskSwitchContext+0xc0>)
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0e2      	beq.n	800717c <vTaskSwitchContext+0x24>
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4a15      	ldr	r2, [pc, #84]	; (8007218 <vTaskSwitchContext+0xc0>)
 80071c2:	4413      	add	r3, r2
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	605a      	str	r2, [r3, #4]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	3308      	adds	r3, #8
 80071d8:	429a      	cmp	r2, r3
 80071da:	d104      	bne.n	80071e6 <vTaskSwitchContext+0x8e>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	4a0b      	ldr	r2, [pc, #44]	; (800721c <vTaskSwitchContext+0xc4>)
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	4a08      	ldr	r2, [pc, #32]	; (8007214 <vTaskSwitchContext+0xbc>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071f6:	4b09      	ldr	r3, [pc, #36]	; (800721c <vTaskSwitchContext+0xc4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3354      	adds	r3, #84	; 0x54
 80071fc:	4a08      	ldr	r2, [pc, #32]	; (8007220 <vTaskSwitchContext+0xc8>)
 80071fe:	6013      	str	r3, [r2, #0]
}
 8007200:	bf00      	nop
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	200020a4 	.word	0x200020a4
 8007210:	20002090 	.word	0x20002090
 8007214:	20002084 	.word	0x20002084
 8007218:	20001bac 	.word	0x20001bac
 800721c:	20001ba8 	.word	0x20001ba8
 8007220:	20000010 	.word	0x20000010

08007224 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10c      	bne.n	800724e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	b672      	cpsid	i
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	b662      	cpsie	i
 8007248:	60fb      	str	r3, [r7, #12]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800724e:	4b07      	ldr	r3, [pc, #28]	; (800726c <vTaskPlaceOnEventList+0x48>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3318      	adds	r3, #24
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7fe fe1b 	bl	8005e92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800725c:	2101      	movs	r1, #1
 800725e:	6838      	ldr	r0, [r7, #0]
 8007260:	f000 fac6 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20001ba8 	.word	0x20001ba8

08007270 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10c      	bne.n	800729c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	b672      	cpsid	i
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	b662      	cpsie	i
 8007296:	617b      	str	r3, [r7, #20]
}
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <vTaskPlaceOnEventListRestricted+0x58>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3318      	adds	r3, #24
 80072a2:	4619      	mov	r1, r3
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7fe fdd0 	bl	8005e4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80072b0:	f04f 33ff 	mov.w	r3, #4294967295
 80072b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	68b8      	ldr	r0, [r7, #8]
 80072ba:	f000 fa99 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
	}
 80072be:	bf00      	nop
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20001ba8 	.word	0x20001ba8

080072cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10c      	bne.n	80072fc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	b672      	cpsid	i
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	b662      	cpsie	i
 80072f6:	60fb      	str	r3, [r7, #12]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3318      	adds	r3, #24
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fdff 	bl	8005f04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007306:	4b1e      	ldr	r3, [pc, #120]	; (8007380 <xTaskRemoveFromEventList+0xb4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11d      	bne.n	800734a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3304      	adds	r3, #4
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fdf6 	bl	8005f04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4b19      	ldr	r3, [pc, #100]	; (8007384 <xTaskRemoveFromEventList+0xb8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d903      	bls.n	800732c <xTaskRemoveFromEventList+0x60>
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	4a16      	ldr	r2, [pc, #88]	; (8007384 <xTaskRemoveFromEventList+0xb8>)
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4a13      	ldr	r2, [pc, #76]	; (8007388 <xTaskRemoveFromEventList+0xbc>)
 800733a:	441a      	add	r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f7fe fd81 	bl	8005e4a <vListInsertEnd>
 8007348:	e005      	b.n	8007356 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3318      	adds	r3, #24
 800734e:	4619      	mov	r1, r3
 8007350:	480e      	ldr	r0, [pc, #56]	; (800738c <xTaskRemoveFromEventList+0xc0>)
 8007352:	f7fe fd7a 	bl	8005e4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <xTaskRemoveFromEventList+0xc4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	429a      	cmp	r2, r3
 8007362:	d905      	bls.n	8007370 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <xTaskRemoveFromEventList+0xc8>)
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	e001      	b.n	8007374 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007374:	697b      	ldr	r3, [r7, #20]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	200020a4 	.word	0x200020a4
 8007384:	20002084 	.word	0x20002084
 8007388:	20001bac 	.word	0x20001bac
 800738c:	2000203c 	.word	0x2000203c
 8007390:	20001ba8 	.word	0x20001ba8
 8007394:	20002090 	.word	0x20002090

08007398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <vTaskInternalSetTimeOutState+0x24>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <vTaskInternalSetTimeOutState+0x28>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	605a      	str	r2, [r3, #4]
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20002094 	.word	0x20002094
 80073c0:	20002080 	.word	0x20002080

080073c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10c      	bne.n	80073ee <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	b672      	cpsid	i
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	b662      	cpsie	i
 80073e8:	613b      	str	r3, [r7, #16]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10c      	bne.n	800740e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	b672      	cpsid	i
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	b662      	cpsie	i
 8007408:	60fb      	str	r3, [r7, #12]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800740e:	f000 ff6d 	bl	80082ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007412:	4b1d      	ldr	r3, [pc, #116]	; (8007488 <xTaskCheckForTimeOut+0xc4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742a:	d102      	bne.n	8007432 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800742c:	2300      	movs	r3, #0
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	e023      	b.n	800747a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b15      	ldr	r3, [pc, #84]	; (800748c <xTaskCheckForTimeOut+0xc8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d007      	beq.n	800744e <xTaskCheckForTimeOut+0x8a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	69ba      	ldr	r2, [r7, #24]
 8007444:	429a      	cmp	r2, r3
 8007446:	d302      	bcc.n	800744e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	e015      	b.n	800747a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	429a      	cmp	r2, r3
 8007456:	d20b      	bcs.n	8007470 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff ff97 	bl	8007398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800746a:	2300      	movs	r3, #0
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	e004      	b.n	800747a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007476:	2301      	movs	r3, #1
 8007478:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800747a:	f000 ff6b 	bl	8008354 <vPortExitCritical>

	return xReturn;
 800747e:	69fb      	ldr	r3, [r7, #28]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20002080 	.word	0x20002080
 800748c:	20002094 	.word	0x20002094

08007490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007494:	4b03      	ldr	r3, [pc, #12]	; (80074a4 <vTaskMissedYield+0x14>)
 8007496:	2201      	movs	r2, #1
 8007498:	601a      	str	r2, [r3, #0]
}
 800749a:	bf00      	nop
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	20002090 	.word	0x20002090

080074a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074b0:	f000 f852 	bl	8007558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <prvIdleTask+0x28>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d9f9      	bls.n	80074b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074bc:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <prvIdleTask+0x2c>)
 80074be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074cc:	e7f0      	b.n	80074b0 <prvIdleTask+0x8>
 80074ce:	bf00      	nop
 80074d0:	20001bac 	.word	0x20001bac
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074de:	2300      	movs	r3, #0
 80074e0:	607b      	str	r3, [r7, #4]
 80074e2:	e00c      	b.n	80074fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4a12      	ldr	r2, [pc, #72]	; (8007538 <prvInitialiseTaskLists+0x60>)
 80074f0:	4413      	add	r3, r2
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fc7c 	bl	8005df0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3301      	adds	r3, #1
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b37      	cmp	r3, #55	; 0x37
 8007502:	d9ef      	bls.n	80074e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007504:	480d      	ldr	r0, [pc, #52]	; (800753c <prvInitialiseTaskLists+0x64>)
 8007506:	f7fe fc73 	bl	8005df0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800750a:	480d      	ldr	r0, [pc, #52]	; (8007540 <prvInitialiseTaskLists+0x68>)
 800750c:	f7fe fc70 	bl	8005df0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007510:	480c      	ldr	r0, [pc, #48]	; (8007544 <prvInitialiseTaskLists+0x6c>)
 8007512:	f7fe fc6d 	bl	8005df0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007516:	480c      	ldr	r0, [pc, #48]	; (8007548 <prvInitialiseTaskLists+0x70>)
 8007518:	f7fe fc6a 	bl	8005df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800751c:	480b      	ldr	r0, [pc, #44]	; (800754c <prvInitialiseTaskLists+0x74>)
 800751e:	f7fe fc67 	bl	8005df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007522:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <prvInitialiseTaskLists+0x78>)
 8007524:	4a05      	ldr	r2, [pc, #20]	; (800753c <prvInitialiseTaskLists+0x64>)
 8007526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <prvInitialiseTaskLists+0x7c>)
 800752a:	4a05      	ldr	r2, [pc, #20]	; (8007540 <prvInitialiseTaskLists+0x68>)
 800752c:	601a      	str	r2, [r3, #0]
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20001bac 	.word	0x20001bac
 800753c:	2000200c 	.word	0x2000200c
 8007540:	20002020 	.word	0x20002020
 8007544:	2000203c 	.word	0x2000203c
 8007548:	20002050 	.word	0x20002050
 800754c:	20002068 	.word	0x20002068
 8007550:	20002034 	.word	0x20002034
 8007554:	20002038 	.word	0x20002038

08007558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800755e:	e019      	b.n	8007594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007560:	f000 fec4 	bl	80082ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007564:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <prvCheckTasksWaitingTermination+0x50>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	4618      	mov	r0, r3
 8007572:	f7fe fcc7 	bl	8005f04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007576:	4b0d      	ldr	r3, [pc, #52]	; (80075ac <prvCheckTasksWaitingTermination+0x54>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3b01      	subs	r3, #1
 800757c:	4a0b      	ldr	r2, [pc, #44]	; (80075ac <prvCheckTasksWaitingTermination+0x54>)
 800757e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <prvCheckTasksWaitingTermination+0x58>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3b01      	subs	r3, #1
 8007586:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <prvCheckTasksWaitingTermination+0x58>)
 8007588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800758a:	f000 fee3 	bl	8008354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f848 	bl	8007624 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007594:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <prvCheckTasksWaitingTermination+0x58>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e1      	bne.n	8007560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800759c:	bf00      	nop
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20002050 	.word	0x20002050
 80075ac:	2000207c 	.word	0x2000207c
 80075b0:	20002064 	.word	0x20002064

080075b4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80075c0:	e005      	b.n	80075ce <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3301      	adds	r3, #1
 80075c6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2ba5      	cmp	r3, #165	; 0xa5
 80075d4:	d0f5      	beq.n	80075c2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	089b      	lsrs	r3, r3, #2
 80075da:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	b29b      	uxth	r3, r3
	}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d102      	bne.n	8007600 <uxTaskGetStackHighWaterMark+0x14>
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <uxTaskGetStackHighWaterMark+0x34>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	e000      	b.n	8007602 <uxTaskGetStackHighWaterMark+0x16>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007608:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800760a:	6938      	ldr	r0, [r7, #16]
 800760c:	f7ff ffd2 	bl	80075b4 <prvTaskCheckFreeStackSpace>
 8007610:	4603      	mov	r3, r0
 8007612:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8007614:	68fb      	ldr	r3, [r7, #12]
	}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20001ba8 	.word	0x20001ba8

08007624 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3354      	adds	r3, #84	; 0x54
 8007630:	4618      	mov	r0, r3
 8007632:	f001 f9b5 	bl	80089a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800763c:	2b00      	cmp	r3, #0
 800763e:	d108      	bne.n	8007652 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	4618      	mov	r0, r3
 8007646:	f001 f847 	bl	80086d8 <vPortFree>
				vPortFree( pxTCB );
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 f844 	bl	80086d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007650:	e01a      	b.n	8007688 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007658:	2b01      	cmp	r3, #1
 800765a:	d103      	bne.n	8007664 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 f83b 	bl	80086d8 <vPortFree>
	}
 8007662:	e011      	b.n	8007688 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800766a:	2b02      	cmp	r3, #2
 800766c:	d00c      	beq.n	8007688 <prvDeleteTCB+0x64>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007672:	b672      	cpsid	i
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	b662      	cpsie	i
 8007682:	60fb      	str	r3, [r7, #12]
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <prvDeleteTCB+0x62>
	}
 8007688:	bf00      	nop
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007696:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <prvResetNextTaskUnblockTime+0x38>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d104      	bne.n	80076aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <prvResetNextTaskUnblockTime+0x3c>)
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295
 80076a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076a8:	e008      	b.n	80076bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076aa:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <prvResetNextTaskUnblockTime+0x38>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	4a04      	ldr	r2, [pc, #16]	; (80076cc <prvResetNextTaskUnblockTime+0x3c>)
 80076ba:	6013      	str	r3, [r2, #0]
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	20002034 	.word	0x20002034
 80076cc:	2000209c 	.word	0x2000209c

080076d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <xTaskGetSchedulerState+0x34>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d102      	bne.n	80076e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076de:	2301      	movs	r3, #1
 80076e0:	607b      	str	r3, [r7, #4]
 80076e2:	e008      	b.n	80076f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076e4:	4b08      	ldr	r3, [pc, #32]	; (8007708 <xTaskGetSchedulerState+0x38>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076ec:	2302      	movs	r3, #2
 80076ee:	607b      	str	r3, [r7, #4]
 80076f0:	e001      	b.n	80076f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076f2:	2300      	movs	r3, #0
 80076f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076f6:	687b      	ldr	r3, [r7, #4]
	}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	20002088 	.word	0x20002088
 8007708:	200020a4 	.word	0x200020a4

0800770c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d05a      	beq.n	80077d8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007722:	4b30      	ldr	r3, [pc, #192]	; (80077e4 <xTaskPriorityDisinherit+0xd8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	429a      	cmp	r2, r3
 800772a:	d00c      	beq.n	8007746 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	b672      	cpsid	i
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	b662      	cpsie	i
 8007740:	60fb      	str	r3, [r7, #12]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10c      	bne.n	8007768 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	b672      	cpsid	i
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	b662      	cpsie	i
 8007762:	60bb      	str	r3, [r7, #8]
}
 8007764:	bf00      	nop
 8007766:	e7fe      	b.n	8007766 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776c:	1e5a      	subs	r2, r3, #1
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777a:	429a      	cmp	r2, r3
 800777c:	d02c      	beq.n	80077d8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	2b00      	cmp	r3, #0
 8007784:	d128      	bne.n	80077d8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	3304      	adds	r3, #4
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe fbba 	bl	8005f04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <xTaskPriorityDisinherit+0xdc>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d903      	bls.n	80077b8 <xTaskPriorityDisinherit+0xac>
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	4a0c      	ldr	r2, [pc, #48]	; (80077e8 <xTaskPriorityDisinherit+0xdc>)
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077bc:	4613      	mov	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4a09      	ldr	r2, [pc, #36]	; (80077ec <xTaskPriorityDisinherit+0xe0>)
 80077c6:	441a      	add	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	3304      	adds	r3, #4
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f7fe fb3b 	bl	8005e4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077d8:	697b      	ldr	r3, [r7, #20]
	}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20001ba8 	.word	0x20001ba8
 80077e8:	20002084 	.word	0x20002084
 80077ec:	20001bac 	.word	0x20001bac

080077f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077fa:	4b21      	ldr	r3, [pc, #132]	; (8007880 <prvAddCurrentTaskToDelayedList+0x90>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007800:	4b20      	ldr	r3, [pc, #128]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3304      	adds	r3, #4
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fb7c 	bl	8005f04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d10a      	bne.n	800782a <prvAddCurrentTaskToDelayedList+0x3a>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800781a:	4b1a      	ldr	r3, [pc, #104]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4819      	ldr	r0, [pc, #100]	; (8007888 <prvAddCurrentTaskToDelayedList+0x98>)
 8007824:	f7fe fb11 	bl	8005e4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007828:	e026      	b.n	8007878 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007832:	4b14      	ldr	r3, [pc, #80]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	429a      	cmp	r2, r3
 8007840:	d209      	bcs.n	8007856 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b0f      	ldr	r3, [pc, #60]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3304      	adds	r3, #4
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7fe fb1f 	bl	8005e92 <vListInsert>
}
 8007854:	e010      	b.n	8007878 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007856:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3304      	adds	r3, #4
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f7fe fb15 	bl	8005e92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	429a      	cmp	r2, r3
 8007870:	d202      	bcs.n	8007878 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007872:	4a08      	ldr	r2, [pc, #32]	; (8007894 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6013      	str	r3, [r2, #0]
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20002080 	.word	0x20002080
 8007884:	20001ba8 	.word	0x20001ba8
 8007888:	20002068 	.word	0x20002068
 800788c:	20002038 	.word	0x20002038
 8007890:	20002034 	.word	0x20002034
 8007894:	2000209c 	.word	0x2000209c

08007898 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078a2:	f000 fbb5 	bl	8008010 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078a6:	4b1d      	ldr	r3, [pc, #116]	; (800791c <xTimerCreateTimerTask+0x84>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d021      	beq.n	80078f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078b6:	1d3a      	adds	r2, r7, #4
 80078b8:	f107 0108 	add.w	r1, r7, #8
 80078bc:	f107 030c 	add.w	r3, r7, #12
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fa7b 	bl	8005dbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	9202      	str	r2, [sp, #8]
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	2302      	movs	r3, #2
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	460a      	mov	r2, r1
 80078d8:	4911      	ldr	r1, [pc, #68]	; (8007920 <xTimerCreateTimerTask+0x88>)
 80078da:	4812      	ldr	r0, [pc, #72]	; (8007924 <xTimerCreateTimerTask+0x8c>)
 80078dc:	f7ff f846 	bl	800696c <xTaskCreateStatic>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4a11      	ldr	r2, [pc, #68]	; (8007928 <xTimerCreateTimerTask+0x90>)
 80078e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078e6:	4b10      	ldr	r3, [pc, #64]	; (8007928 <xTimerCreateTimerTask+0x90>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078ee:	2301      	movs	r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10c      	bne.n	8007912 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	b672      	cpsid	i
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	b662      	cpsie	i
 800790c:	613b      	str	r3, [r7, #16]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007912:	697b      	ldr	r3, [r7, #20]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	200020d8 	.word	0x200020d8
 8007920:	08008be8 	.word	0x08008be8
 8007924:	08007ba9 	.word	0x08007ba9
 8007928:	200020dc 	.word	0x200020dc

0800792c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af02      	add	r7, sp, #8
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800793a:	202c      	movs	r0, #44	; 0x2c
 800793c:	f000 fe02 	bl	8008544 <pvPortMalloc>
 8007940:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00d      	beq.n	8007964 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f847 	bl	80079f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007964:	697b      	ldr	r3, [r7, #20]
	}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800796e:	b580      	push	{r7, lr}
 8007970:	b08a      	sub	sp, #40	; 0x28
 8007972:	af02      	add	r7, sp, #8
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	607a      	str	r2, [r7, #4]
 800797a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800797c:	232c      	movs	r3, #44	; 0x2c
 800797e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2b2c      	cmp	r3, #44	; 0x2c
 8007984:	d00c      	beq.n	80079a0 <xTimerCreateStatic+0x32>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	b672      	cpsid	i
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	b662      	cpsie	i
 800799a:	61bb      	str	r3, [r7, #24]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10c      	bne.n	80079c2 <xTimerCreateStatic+0x54>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	b672      	cpsid	i
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	b662      	cpsie	i
 80079bc:	617b      	str	r3, [r7, #20]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00d      	beq.n	80079e8 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f805 	bl	80079f2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80079e8:	69fb      	ldr	r3, [r7, #28]
	}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3720      	adds	r7, #32
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b086      	sub	sp, #24
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	60f8      	str	r0, [r7, #12]
 80079fa:	60b9      	str	r1, [r7, #8]
 80079fc:	607a      	str	r2, [r7, #4]
 80079fe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10c      	bne.n	8007a20 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	b672      	cpsid	i
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	b662      	cpsie	i
 8007a1a:	617b      	str	r3, [r7, #20]
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01e      	beq.n	8007a64 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007a26:	f000 faf3 	bl	8008010 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	6a3a      	ldr	r2, [r7, #32]
 8007a40:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	3304      	adds	r3, #4
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe f9f2 	bl	8005e30 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d008      	beq.n	8007a64 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a58:	f043 0304 	orr.w	r3, r3, #4
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007a64:	bf00      	nop
 8007a66:	3718      	adds	r7, #24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	; 0x28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10c      	bne.n	8007a9e <xTimerGenericCommand+0x32>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	b672      	cpsid	i
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	b662      	cpsie	i
 8007a98:	623b      	str	r3, [r7, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	e7fe      	b.n	8007a9c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a9e:	4b1a      	ldr	r3, [pc, #104]	; (8007b08 <xTimerGenericCommand+0x9c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d02a      	beq.n	8007afc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2b05      	cmp	r3, #5
 8007ab6:	dc18      	bgt.n	8007aea <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ab8:	f7ff fe0a 	bl	80076d0 <xTaskGetSchedulerState>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d109      	bne.n	8007ad6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ac2:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <xTimerGenericCommand+0x9c>)
 8007ac4:	6818      	ldr	r0, [r3, #0]
 8007ac6:	f107 0110 	add.w	r1, r7, #16
 8007aca:	2300      	movs	r3, #0
 8007acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ace:	f7fe fb53 	bl	8006178 <xQueueGenericSend>
 8007ad2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ad4:	e012      	b.n	8007afc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <xTimerGenericCommand+0x9c>)
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	f107 0110 	add.w	r1, r7, #16
 8007ade:	2300      	movs	r3, #0
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f7fe fb49 	bl	8006178 <xQueueGenericSend>
 8007ae6:	6278      	str	r0, [r7, #36]	; 0x24
 8007ae8:	e008      	b.n	8007afc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007aea:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <xTimerGenericCommand+0x9c>)
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	f107 0110 	add.w	r1, r7, #16
 8007af2:	2300      	movs	r3, #0
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	f7fe fc45 	bl	8006384 <xQueueGenericSendFromISR>
 8007afa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3728      	adds	r7, #40	; 0x28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	200020d8 	.word	0x200020d8

08007b0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b16:	4b23      	ldr	r3, [pc, #140]	; (8007ba4 <prvProcessExpiredTimer+0x98>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe f9ed 	bl	8005f04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d024      	beq.n	8007b82 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	699a      	ldr	r2, [r3, #24]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	18d1      	adds	r1, r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	6978      	ldr	r0, [r7, #20]
 8007b46:	f000 f8d3 	bl	8007cf0 <prvInsertTimerInActiveList>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d021      	beq.n	8007b94 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b50:	2300      	movs	r3, #0
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	2300      	movs	r3, #0
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	2100      	movs	r1, #0
 8007b5a:	6978      	ldr	r0, [r7, #20]
 8007b5c:	f7ff ff86 	bl	8007a6c <xTimerGenericCommand>
 8007b60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d115      	bne.n	8007b94 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	b672      	cpsid	i
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	b662      	cpsie	i
 8007b7c:	60fb      	str	r3, [r7, #12]
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b88:	f023 0301 	bic.w	r3, r3, #1
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	6978      	ldr	r0, [r7, #20]
 8007b9a:	4798      	blx	r3
}
 8007b9c:	bf00      	nop
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	200020d0 	.word	0x200020d0

08007ba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bb0:	f107 0308 	add.w	r3, r7, #8
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 f857 	bl	8007c68 <prvGetNextExpireTime>
 8007bba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 f803 	bl	8007bcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bc6:	f000 f8d5 	bl	8007d74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bca:	e7f1      	b.n	8007bb0 <prvTimerTask+0x8>

08007bcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bd6:	f7ff f933 	bl	8006e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bda:	f107 0308 	add.w	r3, r7, #8
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f866 	bl	8007cb0 <prvSampleTimeNow>
 8007be4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d130      	bne.n	8007c4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <prvProcessTimerOrBlockTask+0x3c>
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d806      	bhi.n	8007c08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007bfa:	f7ff f92f 	bl	8006e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bfe:	68f9      	ldr	r1, [r7, #12]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ff83 	bl	8007b0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c06:	e024      	b.n	8007c52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d008      	beq.n	8007c20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c0e:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <prvProcessTimerOrBlockTask+0x90>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <prvProcessTimerOrBlockTask+0x50>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <prvProcessTimerOrBlockTask+0x52>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c20:	4b0f      	ldr	r3, [pc, #60]	; (8007c60 <prvProcessTimerOrBlockTask+0x94>)
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f7fe fe69 	bl	8006904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c32:	f7ff f913 	bl	8006e5c <xTaskResumeAll>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c3c:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <prvProcessTimerOrBlockTask+0x98>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	f3bf 8f6f 	isb	sy
}
 8007c4c:	e001      	b.n	8007c52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c4e:	f7ff f905 	bl	8006e5c <xTaskResumeAll>
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200020d4 	.word	0x200020d4
 8007c60:	200020d8 	.word	0x200020d8
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c70:	4b0e      	ldr	r3, [pc, #56]	; (8007cac <prvGetNextExpireTime+0x44>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <prvGetNextExpireTime+0x16>
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	e000      	b.n	8007c80 <prvGetNextExpireTime+0x18>
 8007c7e:	2200      	movs	r2, #0
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d105      	bne.n	8007c98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c8c:	4b07      	ldr	r3, [pc, #28]	; (8007cac <prvGetNextExpireTime+0x44>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	e001      	b.n	8007c9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	200020d0 	.word	0x200020d0

08007cb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cb8:	f7ff f970 	bl	8006f9c <xTaskGetTickCount>
 8007cbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cbe:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <prvSampleTimeNow+0x3c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d205      	bcs.n	8007cd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007cc8:	f000 f93c 	bl	8007f44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	e002      	b.n	8007cda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cda:	4a04      	ldr	r2, [pc, #16]	; (8007cec <prvSampleTimeNow+0x3c>)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	200020e0 	.word	0x200020e0

08007cf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d812      	bhi.n	8007d3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	1ad2      	subs	r2, r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d302      	bcc.n	8007d2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d24:	2301      	movs	r3, #1
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	e01b      	b.n	8007d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d2a:	4b10      	ldr	r3, [pc, #64]	; (8007d6c <prvInsertTimerInActiveList+0x7c>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3304      	adds	r3, #4
 8007d32:	4619      	mov	r1, r3
 8007d34:	4610      	mov	r0, r2
 8007d36:	f7fe f8ac 	bl	8005e92 <vListInsert>
 8007d3a:	e012      	b.n	8007d62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d206      	bcs.n	8007d52 <prvInsertTimerInActiveList+0x62>
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d302      	bcc.n	8007d52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e007      	b.n	8007d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d52:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <prvInsertTimerInActiveList+0x80>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7fe f898 	bl	8005e92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d62:	697b      	ldr	r3, [r7, #20]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	200020d4 	.word	0x200020d4
 8007d70:	200020d0 	.word	0x200020d0

08007d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08e      	sub	sp, #56	; 0x38
 8007d78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d7a:	e0d0      	b.n	8007f1e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	da1a      	bge.n	8007db8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d82:	1d3b      	adds	r3, r7, #4
 8007d84:	3304      	adds	r3, #4
 8007d86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10c      	bne.n	8007da8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	b672      	cpsid	i
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	b662      	cpsie	i
 8007da2:	61fb      	str	r3, [r7, #28]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dae:	6850      	ldr	r0, [r2, #4]
 8007db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007db2:	6892      	ldr	r2, [r2, #8]
 8007db4:	4611      	mov	r1, r2
 8007db6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f2c0 80ae 	blt.w	8007f1c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe f897 	bl	8005f04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7ff ff69 	bl	8007cb0 <prvSampleTimeNow>
 8007dde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b09      	cmp	r3, #9
 8007de4:	f200 809b 	bhi.w	8007f1e <prvProcessReceivedCommands+0x1aa>
 8007de8:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <prvProcessReceivedCommands+0x7c>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e19 	.word	0x08007e19
 8007df4:	08007e19 	.word	0x08007e19
 8007df8:	08007e19 	.word	0x08007e19
 8007dfc:	08007e91 	.word	0x08007e91
 8007e00:	08007ea5 	.word	0x08007ea5
 8007e04:	08007ef3 	.word	0x08007ef3
 8007e08:	08007e19 	.word	0x08007e19
 8007e0c:	08007e19 	.word	0x08007e19
 8007e10:	08007e91 	.word	0x08007e91
 8007e14:	08007ea5 	.word	0x08007ea5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e1e:	f043 0301 	orr.w	r3, r3, #1
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	18d1      	adds	r1, r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e38:	f7ff ff5a 	bl	8007cf0 <prvInsertTimerInActiveList>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d06d      	beq.n	8007f1e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d062      	beq.n	8007f1e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	441a      	add	r2, r3
 8007e60:	2300      	movs	r3, #0
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	2300      	movs	r3, #0
 8007e66:	2100      	movs	r1, #0
 8007e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6a:	f7ff fdff 	bl	8007a6c <xTimerGenericCommand>
 8007e6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d153      	bne.n	8007f1e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	b672      	cpsid	i
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	b662      	cpsie	i
 8007e8a:	61bb      	str	r3, [r7, #24]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007ea2:	e03c      	b.n	8007f1e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eaa:	f043 0301 	orr.w	r3, r3, #1
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10c      	bne.n	8007ede <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	b672      	cpsid	i
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	b662      	cpsie	i
 8007ed8:	617b      	str	r3, [r7, #20]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	699a      	ldr	r2, [r3, #24]
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	18d1      	adds	r1, r2, r3
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eec:	f7ff ff00 	bl	8007cf0 <prvInsertTimerInActiveList>
					break;
 8007ef0:	e015      	b.n	8007f1e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f02:	f000 fbe9 	bl	80086d8 <vPortFree>
 8007f06:	e00a      	b.n	8007f1e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f0e:	f023 0301 	bic.w	r3, r3, #1
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f1a:	e000      	b.n	8007f1e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f1e:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <prvProcessReceivedCommands+0x1cc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	1d39      	adds	r1, r7, #4
 8007f24:	2200      	movs	r2, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe facc 	bl	80064c4 <xQueueReceive>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f47f af24 	bne.w	8007d7c <prvProcessReceivedCommands+0x8>
	}
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop
 8007f38:	3730      	adds	r7, #48	; 0x30
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200020d8 	.word	0x200020d8

08007f44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f4a:	e04a      	b.n	8007fe2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f4c:	4b2e      	ldr	r3, [pc, #184]	; (8008008 <prvSwitchTimerLists+0xc4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f56:	4b2c      	ldr	r3, [pc, #176]	; (8008008 <prvSwitchTimerLists+0xc4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3304      	adds	r3, #4
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fd ffcd 	bl	8005f04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d030      	beq.n	8007fe2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d90e      	bls.n	8007fb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f9e:	4b1a      	ldr	r3, [pc, #104]	; (8008008 <prvSwitchTimerLists+0xc4>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	4610      	mov	r0, r2
 8007faa:	f7fd ff72 	bl	8005e92 <vListInsert>
 8007fae:	e018      	b.n	8007fe2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	2100      	movs	r1, #0
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f7ff fd56 	bl	8007a6c <xTimerGenericCommand>
 8007fc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10c      	bne.n	8007fe2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	b672      	cpsid	i
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	b662      	cpsie	i
 8007fdc:	603b      	str	r3, [r7, #0]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fe2:	4b09      	ldr	r3, [pc, #36]	; (8008008 <prvSwitchTimerLists+0xc4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1af      	bne.n	8007f4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <prvSwitchTimerLists+0xc4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <prvSwitchTimerLists+0xc8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a04      	ldr	r2, [pc, #16]	; (8008008 <prvSwitchTimerLists+0xc4>)
 8007ff8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ffa:	4a04      	ldr	r2, [pc, #16]	; (800800c <prvSwitchTimerLists+0xc8>)
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	6013      	str	r3, [r2, #0]
}
 8008000:	bf00      	nop
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	200020d0 	.word	0x200020d0
 800800c:	200020d4 	.word	0x200020d4

08008010 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008016:	f000 f969 	bl	80082ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800801a:	4b15      	ldr	r3, [pc, #84]	; (8008070 <prvCheckForValidListAndQueue+0x60>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d120      	bne.n	8008064 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008022:	4814      	ldr	r0, [pc, #80]	; (8008074 <prvCheckForValidListAndQueue+0x64>)
 8008024:	f7fd fee4 	bl	8005df0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008028:	4813      	ldr	r0, [pc, #76]	; (8008078 <prvCheckForValidListAndQueue+0x68>)
 800802a:	f7fd fee1 	bl	8005df0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <prvCheckForValidListAndQueue+0x6c>)
 8008030:	4a10      	ldr	r2, [pc, #64]	; (8008074 <prvCheckForValidListAndQueue+0x64>)
 8008032:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008034:	4b12      	ldr	r3, [pc, #72]	; (8008080 <prvCheckForValidListAndQueue+0x70>)
 8008036:	4a10      	ldr	r2, [pc, #64]	; (8008078 <prvCheckForValidListAndQueue+0x68>)
 8008038:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800803a:	2300      	movs	r3, #0
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	4b11      	ldr	r3, [pc, #68]	; (8008084 <prvCheckForValidListAndQueue+0x74>)
 8008040:	4a11      	ldr	r2, [pc, #68]	; (8008088 <prvCheckForValidListAndQueue+0x78>)
 8008042:	2110      	movs	r1, #16
 8008044:	200a      	movs	r0, #10
 8008046:	f7fd fff1 	bl	800602c <xQueueGenericCreateStatic>
 800804a:	4603      	mov	r3, r0
 800804c:	4a08      	ldr	r2, [pc, #32]	; (8008070 <prvCheckForValidListAndQueue+0x60>)
 800804e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <prvCheckForValidListAndQueue+0x60>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d005      	beq.n	8008064 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <prvCheckForValidListAndQueue+0x60>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	490b      	ldr	r1, [pc, #44]	; (800808c <prvCheckForValidListAndQueue+0x7c>)
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fc26 	bl	80068b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008064:	f000 f976 	bl	8008354 <vPortExitCritical>
}
 8008068:	bf00      	nop
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	200020d8 	.word	0x200020d8
 8008074:	200020a8 	.word	0x200020a8
 8008078:	200020bc 	.word	0x200020bc
 800807c:	200020d0 	.word	0x200020d0
 8008080:	200020d4 	.word	0x200020d4
 8008084:	20002184 	.word	0x20002184
 8008088:	200020e4 	.word	0x200020e4
 800808c:	08008bf0 	.word	0x08008bf0

08008090 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10c      	bne.n	80080bc <pvTimerGetTimerID+0x2c>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	b672      	cpsid	i
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	b662      	cpsie	i
 80080b6:	60fb      	str	r3, [r7, #12]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 80080bc:	f000 f916 	bl	80082ec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80080c6:	f000 f945 	bl	8008354 <vPortExitCritical>

	return pvReturn;
 80080ca:	693b      	ldr	r3, [r7, #16]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3b04      	subs	r3, #4
 80080e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3b04      	subs	r3, #4
 80080f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f023 0201 	bic.w	r2, r3, #1
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3b04      	subs	r3, #4
 8008102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008104:	4a0c      	ldr	r2, [pc, #48]	; (8008138 <pxPortInitialiseStack+0x64>)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3b14      	subs	r3, #20
 800810e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3b04      	subs	r3, #4
 800811a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f06f 0202 	mvn.w	r2, #2
 8008122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3b20      	subs	r3, #32
 8008128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800812a:	68fb      	ldr	r3, [r7, #12]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	0800813d 	.word	0x0800813d

0800813c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <prvTaskExitError+0x5c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d00c      	beq.n	800816a <prvTaskExitError+0x2e>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008154:	b672      	cpsid	i
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	b662      	cpsie	i
 8008164:	60fb      	str	r3, [r7, #12]
}
 8008166:	bf00      	nop
 8008168:	e7fe      	b.n	8008168 <prvTaskExitError+0x2c>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	b672      	cpsid	i
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	b662      	cpsie	i
 800817e:	60bb      	str	r3, [r7, #8]
}
 8008180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008182:	bf00      	nop
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0fc      	beq.n	8008184 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800818a:	bf00      	nop
 800818c:	bf00      	nop
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	2000000c 	.word	0x2000000c
 800819c:	00000000 	.word	0x00000000

080081a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <pxCurrentTCBConst2>)
 80081a2:	6819      	ldr	r1, [r3, #0]
 80081a4:	6808      	ldr	r0, [r1, #0]
 80081a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	f380 8809 	msr	PSP, r0
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f04f 0000 	mov.w	r0, #0
 80081b6:	f380 8811 	msr	BASEPRI, r0
 80081ba:	4770      	bx	lr
 80081bc:	f3af 8000 	nop.w

080081c0 <pxCurrentTCBConst2>:
 80081c0:	20001ba8 	.word	0x20001ba8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081c8:	4808      	ldr	r0, [pc, #32]	; (80081ec <prvPortStartFirstTask+0x24>)
 80081ca:	6800      	ldr	r0, [r0, #0]
 80081cc:	6800      	ldr	r0, [r0, #0]
 80081ce:	f380 8808 	msr	MSP, r0
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f380 8814 	msr	CONTROL, r0
 80081da:	b662      	cpsie	i
 80081dc:	b661      	cpsie	f
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	df00      	svc	0
 80081e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081ea:	bf00      	nop
 80081ec:	e000ed08 	.word	0xe000ed08

080081f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081f6:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <xPortStartScheduler+0xe4>)
 80081f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	22ff      	movs	r2, #255	; 0xff
 8008206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008218:	b2da      	uxtb	r2, r3
 800821a:	4b2f      	ldr	r3, [pc, #188]	; (80082d8 <xPortStartScheduler+0xe8>)
 800821c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800821e:	4b2f      	ldr	r3, [pc, #188]	; (80082dc <xPortStartScheduler+0xec>)
 8008220:	2207      	movs	r2, #7
 8008222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008224:	e009      	b.n	800823a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008226:	4b2d      	ldr	r3, [pc, #180]	; (80082dc <xPortStartScheduler+0xec>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3b01      	subs	r3, #1
 800822c:	4a2b      	ldr	r2, [pc, #172]	; (80082dc <xPortStartScheduler+0xec>)
 800822e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	b2db      	uxtb	r3, r3
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	b2db      	uxtb	r3, r3
 8008238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008242:	2b80      	cmp	r3, #128	; 0x80
 8008244:	d0ef      	beq.n	8008226 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008246:	4b25      	ldr	r3, [pc, #148]	; (80082dc <xPortStartScheduler+0xec>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f1c3 0307 	rsb	r3, r3, #7
 800824e:	2b04      	cmp	r3, #4
 8008250:	d00c      	beq.n	800826c <xPortStartScheduler+0x7c>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	b672      	cpsid	i
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	b662      	cpsie	i
 8008266:	60bb      	str	r3, [r7, #8]
}
 8008268:	bf00      	nop
 800826a:	e7fe      	b.n	800826a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <xPortStartScheduler+0xec>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	4a1a      	ldr	r2, [pc, #104]	; (80082dc <xPortStartScheduler+0xec>)
 8008274:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008276:	4b19      	ldr	r3, [pc, #100]	; (80082dc <xPortStartScheduler+0xec>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800827e:	4a17      	ldr	r2, [pc, #92]	; (80082dc <xPortStartScheduler+0xec>)
 8008280:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	b2da      	uxtb	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800828a:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <xPortStartScheduler+0xf0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a14      	ldr	r2, [pc, #80]	; (80082e0 <xPortStartScheduler+0xf0>)
 8008290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008294:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008296:	4b12      	ldr	r3, [pc, #72]	; (80082e0 <xPortStartScheduler+0xf0>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a11      	ldr	r2, [pc, #68]	; (80082e0 <xPortStartScheduler+0xf0>)
 800829c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082a2:	f000 f8dd 	bl	8008460 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082a6:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <xPortStartScheduler+0xf4>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082ac:	f000 f8fc 	bl	80084a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082b0:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <xPortStartScheduler+0xf8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a0c      	ldr	r2, [pc, #48]	; (80082e8 <xPortStartScheduler+0xf8>)
 80082b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082bc:	f7ff ff84 	bl	80081c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082c0:	f7fe ff4a 	bl	8007158 <vTaskSwitchContext>
	prvTaskExitError();
 80082c4:	f7ff ff3a 	bl	800813c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	e000e400 	.word	0xe000e400
 80082d8:	200021d4 	.word	0x200021d4
 80082dc:	200021d8 	.word	0x200021d8
 80082e0:	e000ed20 	.word	0xe000ed20
 80082e4:	2000000c 	.word	0x2000000c
 80082e8:	e000ef34 	.word	0xe000ef34

080082ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	b672      	cpsid	i
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	b662      	cpsie	i
 8008306:	607b      	str	r3, [r7, #4]
}
 8008308:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800830a:	4b10      	ldr	r3, [pc, #64]	; (800834c <vPortEnterCritical+0x60>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3301      	adds	r3, #1
 8008310:	4a0e      	ldr	r2, [pc, #56]	; (800834c <vPortEnterCritical+0x60>)
 8008312:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <vPortEnterCritical+0x60>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d111      	bne.n	8008340 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800831c:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <vPortEnterCritical+0x64>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00c      	beq.n	8008340 <vPortEnterCritical+0x54>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	b672      	cpsid	i
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	b662      	cpsie	i
 800833a:	603b      	str	r3, [r7, #0]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <vPortEnterCritical+0x52>
	}
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	2000000c 	.word	0x2000000c
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <vPortExitCritical+0x54>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10c      	bne.n	800837c <vPortExitCritical+0x28>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	b672      	cpsid	i
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	b662      	cpsie	i
 8008376:	607b      	str	r3, [r7, #4]
}
 8008378:	bf00      	nop
 800837a:	e7fe      	b.n	800837a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800837c:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <vPortExitCritical+0x54>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3b01      	subs	r3, #1
 8008382:	4a09      	ldr	r2, [pc, #36]	; (80083a8 <vPortExitCritical+0x54>)
 8008384:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008386:	4b08      	ldr	r3, [pc, #32]	; (80083a8 <vPortExitCritical+0x54>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d105      	bne.n	800839a <vPortExitCritical+0x46>
 800838e:	2300      	movs	r3, #0
 8008390:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	f383 8811 	msr	BASEPRI, r3
}
 8008398:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	2000000c 	.word	0x2000000c
 80083ac:	00000000 	.word	0x00000000

080083b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083b0:	f3ef 8009 	mrs	r0, PSP
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	4b15      	ldr	r3, [pc, #84]	; (8008410 <pxCurrentTCBConst>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	f01e 0f10 	tst.w	lr, #16
 80083c0:	bf08      	it	eq
 80083c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ca:	6010      	str	r0, [r2, #0]
 80083cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80083d4:	b672      	cpsid	i
 80083d6:	f380 8811 	msr	BASEPRI, r0
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	b662      	cpsie	i
 80083e4:	f7fe feb8 	bl	8007158 <vTaskSwitchContext>
 80083e8:	f04f 0000 	mov.w	r0, #0
 80083ec:	f380 8811 	msr	BASEPRI, r0
 80083f0:	bc09      	pop	{r0, r3}
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	6808      	ldr	r0, [r1, #0]
 80083f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	f01e 0f10 	tst.w	lr, #16
 80083fe:	bf08      	it	eq
 8008400:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008404:	f380 8809 	msr	PSP, r0
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop

08008410 <pxCurrentTCBConst>:
 8008410:	20001ba8 	.word	0x20001ba8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop

08008418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	b672      	cpsid	i
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	b662      	cpsie	i
 8008432:	607b      	str	r3, [r7, #4]
}
 8008434:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008436:	f7fe fdd3 	bl	8006fe0 <xTaskIncrementTick>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008440:	4b06      	ldr	r3, [pc, #24]	; (800845c <xPortSysTickHandler+0x44>)
 8008442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	2300      	movs	r3, #0
 800844a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	f383 8811 	msr	BASEPRI, r3
}
 8008452:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008464:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <vPortSetupTimerInterrupt+0x34>)
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800846a:	4b0b      	ldr	r3, [pc, #44]	; (8008498 <vPortSetupTimerInterrupt+0x38>)
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008470:	4b0a      	ldr	r3, [pc, #40]	; (800849c <vPortSetupTimerInterrupt+0x3c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a0a      	ldr	r2, [pc, #40]	; (80084a0 <vPortSetupTimerInterrupt+0x40>)
 8008476:	fba2 2303 	umull	r2, r3, r2, r3
 800847a:	099b      	lsrs	r3, r3, #6
 800847c:	4a09      	ldr	r2, [pc, #36]	; (80084a4 <vPortSetupTimerInterrupt+0x44>)
 800847e:	3b01      	subs	r3, #1
 8008480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008482:	4b04      	ldr	r3, [pc, #16]	; (8008494 <vPortSetupTimerInterrupt+0x34>)
 8008484:	2207      	movs	r2, #7
 8008486:	601a      	str	r2, [r3, #0]
}
 8008488:	bf00      	nop
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	e000e010 	.word	0xe000e010
 8008498:	e000e018 	.word	0xe000e018
 800849c:	20000000 	.word	0x20000000
 80084a0:	10624dd3 	.word	0x10624dd3
 80084a4:	e000e014 	.word	0xe000e014

080084a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084b8 <vPortEnableVFP+0x10>
 80084ac:	6801      	ldr	r1, [r0, #0]
 80084ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084b2:	6001      	str	r1, [r0, #0]
 80084b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084b6:	bf00      	nop
 80084b8:	e000ed88 	.word	0xe000ed88

080084bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084c2:	f3ef 8305 	mrs	r3, IPSR
 80084c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b0f      	cmp	r3, #15
 80084cc:	d916      	bls.n	80084fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084ce:	4a19      	ldr	r2, [pc, #100]	; (8008534 <vPortValidateInterruptPriority+0x78>)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084d8:	4b17      	ldr	r3, [pc, #92]	; (8008538 <vPortValidateInterruptPriority+0x7c>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	7afa      	ldrb	r2, [r7, #11]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d20c      	bcs.n	80084fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	b672      	cpsid	i
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	b662      	cpsie	i
 80084f6:	607b      	str	r3, [r7, #4]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084fc:	4b0f      	ldr	r3, [pc, #60]	; (800853c <vPortValidateInterruptPriority+0x80>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008504:	4b0e      	ldr	r3, [pc, #56]	; (8008540 <vPortValidateInterruptPriority+0x84>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d90c      	bls.n	8008526 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	b672      	cpsid	i
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	b662      	cpsie	i
 8008520:	603b      	str	r3, [r7, #0]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <vPortValidateInterruptPriority+0x68>
	}
 8008526:	bf00      	nop
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	e000e3f0 	.word	0xe000e3f0
 8008538:	200021d4 	.word	0x200021d4
 800853c:	e000ed0c 	.word	0xe000ed0c
 8008540:	200021d8 	.word	0x200021d8

08008544 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08a      	sub	sp, #40	; 0x28
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800854c:	2300      	movs	r3, #0
 800854e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008550:	f7fe fc76 	bl	8006e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008554:	4b5b      	ldr	r3, [pc, #364]	; (80086c4 <pvPortMalloc+0x180>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800855c:	f000 f91a 	bl	8008794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008560:	4b59      	ldr	r3, [pc, #356]	; (80086c8 <pvPortMalloc+0x184>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 8092 	bne.w	8008692 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01f      	beq.n	80085b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008574:	2208      	movs	r2, #8
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4413      	add	r3, r2
 800857a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f003 0307 	and.w	r3, r3, #7
 8008582:	2b00      	cmp	r3, #0
 8008584:	d016      	beq.n	80085b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f023 0307 	bic.w	r3, r3, #7
 800858c:	3308      	adds	r3, #8
 800858e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00c      	beq.n	80085b4 <pvPortMalloc+0x70>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	b672      	cpsid	i
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	b662      	cpsie	i
 80085ae:	617b      	str	r3, [r7, #20]
}
 80085b0:	bf00      	nop
 80085b2:	e7fe      	b.n	80085b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d06b      	beq.n	8008692 <pvPortMalloc+0x14e>
 80085ba:	4b44      	ldr	r3, [pc, #272]	; (80086cc <pvPortMalloc+0x188>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d866      	bhi.n	8008692 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085c4:	4b42      	ldr	r3, [pc, #264]	; (80086d0 <pvPortMalloc+0x18c>)
 80085c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085c8:	4b41      	ldr	r3, [pc, #260]	; (80086d0 <pvPortMalloc+0x18c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085ce:	e004      	b.n	80085da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d903      	bls.n	80085ec <pvPortMalloc+0xa8>
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1f1      	bne.n	80085d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085ec:	4b35      	ldr	r3, [pc, #212]	; (80086c4 <pvPortMalloc+0x180>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d04d      	beq.n	8008692 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2208      	movs	r2, #8
 80085fc:	4413      	add	r3, r2
 80085fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	2308      	movs	r3, #8
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	429a      	cmp	r2, r3
 8008616:	d921      	bls.n	800865c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00c      	beq.n	8008644 <pvPortMalloc+0x100>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	b672      	cpsid	i
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	b662      	cpsie	i
 800863e:	613b      	str	r3, [r7, #16]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	1ad2      	subs	r2, r2, r3
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008656:	69b8      	ldr	r0, [r7, #24]
 8008658:	f000 f8fe 	bl	8008858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800865c:	4b1b      	ldr	r3, [pc, #108]	; (80086cc <pvPortMalloc+0x188>)
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	4a19      	ldr	r2, [pc, #100]	; (80086cc <pvPortMalloc+0x188>)
 8008668:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800866a:	4b18      	ldr	r3, [pc, #96]	; (80086cc <pvPortMalloc+0x188>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	4b19      	ldr	r3, [pc, #100]	; (80086d4 <pvPortMalloc+0x190>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d203      	bcs.n	800867e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008676:	4b15      	ldr	r3, [pc, #84]	; (80086cc <pvPortMalloc+0x188>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a16      	ldr	r2, [pc, #88]	; (80086d4 <pvPortMalloc+0x190>)
 800867c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <pvPortMalloc+0x184>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	431a      	orrs	r2, r3
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	2200      	movs	r2, #0
 8008690:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008692:	f7fe fbe3 	bl	8006e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <pvPortMalloc+0x176>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	b672      	cpsid	i
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	b662      	cpsie	i
 80086b4:	60fb      	str	r3, [r7, #12]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <pvPortMalloc+0x174>
	return pvReturn;
 80086ba:	69fb      	ldr	r3, [r7, #28]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3728      	adds	r7, #40	; 0x28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20005de4 	.word	0x20005de4
 80086c8:	20005df0 	.word	0x20005df0
 80086cc:	20005de8 	.word	0x20005de8
 80086d0:	20005ddc 	.word	0x20005ddc
 80086d4:	20005dec 	.word	0x20005dec

080086d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d04c      	beq.n	8008784 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086ea:	2308      	movs	r3, #8
 80086ec:	425b      	negs	r3, r3
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	4413      	add	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	4b23      	ldr	r3, [pc, #140]	; (800878c <vPortFree+0xb4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4013      	ands	r3, r2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10c      	bne.n	8008720 <vPortFree+0x48>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	b672      	cpsid	i
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	b662      	cpsie	i
 800871a:	60fb      	str	r3, [r7, #12]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00c      	beq.n	8008742 <vPortFree+0x6a>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	b672      	cpsid	i
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	b662      	cpsie	i
 800873c:	60bb      	str	r3, [r7, #8]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	4b11      	ldr	r3, [pc, #68]	; (800878c <vPortFree+0xb4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d019      	beq.n	8008784 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d115      	bne.n	8008784 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	4b0b      	ldr	r3, [pc, #44]	; (800878c <vPortFree+0xb4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	43db      	mvns	r3, r3
 8008762:	401a      	ands	r2, r3
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008768:	f7fe fb6a 	bl	8006e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	4b07      	ldr	r3, [pc, #28]	; (8008790 <vPortFree+0xb8>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4413      	add	r3, r2
 8008776:	4a06      	ldr	r2, [pc, #24]	; (8008790 <vPortFree+0xb8>)
 8008778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800877a:	6938      	ldr	r0, [r7, #16]
 800877c:	f000 f86c 	bl	8008858 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008780:	f7fe fb6c 	bl	8006e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008784:	bf00      	nop
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20005df0 	.word	0x20005df0
 8008790:	20005de8 	.word	0x20005de8

08008794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800879a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800879e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087a0:	4b27      	ldr	r3, [pc, #156]	; (8008840 <prvHeapInit+0xac>)
 80087a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3307      	adds	r3, #7
 80087b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0307 	bic.w	r3, r3, #7
 80087ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	4a1f      	ldr	r2, [pc, #124]	; (8008840 <prvHeapInit+0xac>)
 80087c4:	4413      	add	r3, r2
 80087c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087cc:	4a1d      	ldr	r2, [pc, #116]	; (8008844 <prvHeapInit+0xb0>)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087d2:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <prvHeapInit+0xb0>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	4413      	add	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087e0:	2208      	movs	r2, #8
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 0307 	bic.w	r3, r3, #7
 80087ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4a15      	ldr	r2, [pc, #84]	; (8008848 <prvHeapInit+0xb4>)
 80087f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087f6:	4b14      	ldr	r3, [pc, #80]	; (8008848 <prvHeapInit+0xb4>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2200      	movs	r2, #0
 80087fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <prvHeapInit+0xb4>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	1ad2      	subs	r2, r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008814:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <prvHeapInit+0xb4>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	4a0a      	ldr	r2, [pc, #40]	; (800884c <prvHeapInit+0xb8>)
 8008822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4a09      	ldr	r2, [pc, #36]	; (8008850 <prvHeapInit+0xbc>)
 800882a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <prvHeapInit+0xc0>)
 800882e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008832:	601a      	str	r2, [r3, #0]
}
 8008834:	bf00      	nop
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	200021dc 	.word	0x200021dc
 8008844:	20005ddc 	.word	0x20005ddc
 8008848:	20005de4 	.word	0x20005de4
 800884c:	20005dec 	.word	0x20005dec
 8008850:	20005de8 	.word	0x20005de8
 8008854:	20005df0 	.word	0x20005df0

08008858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008860:	4b28      	ldr	r3, [pc, #160]	; (8008904 <prvInsertBlockIntoFreeList+0xac>)
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	e002      	b.n	800886c <prvInsertBlockIntoFreeList+0x14>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	429a      	cmp	r2, r3
 8008874:	d8f7      	bhi.n	8008866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4413      	add	r3, r2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d108      	bne.n	800889a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	441a      	add	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	441a      	add	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d118      	bne.n	80088e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	4b15      	ldr	r3, [pc, #84]	; (8008908 <prvInsertBlockIntoFreeList+0xb0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d00d      	beq.n	80088d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	441a      	add	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e008      	b.n	80088e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088d6:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <prvInsertBlockIntoFreeList+0xb0>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	e003      	b.n	80088e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d002      	beq.n	80088f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20005ddc 	.word	0x20005ddc
 8008908:	20005de4 	.word	0x20005de4

0800890c <__libc_init_array>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	4d0d      	ldr	r5, [pc, #52]	; (8008944 <__libc_init_array+0x38>)
 8008910:	4c0d      	ldr	r4, [pc, #52]	; (8008948 <__libc_init_array+0x3c>)
 8008912:	1b64      	subs	r4, r4, r5
 8008914:	10a4      	asrs	r4, r4, #2
 8008916:	2600      	movs	r6, #0
 8008918:	42a6      	cmp	r6, r4
 800891a:	d109      	bne.n	8008930 <__libc_init_array+0x24>
 800891c:	4d0b      	ldr	r5, [pc, #44]	; (800894c <__libc_init_array+0x40>)
 800891e:	4c0c      	ldr	r4, [pc, #48]	; (8008950 <__libc_init_array+0x44>)
 8008920:	f000 f8f2 	bl	8008b08 <_init>
 8008924:	1b64      	subs	r4, r4, r5
 8008926:	10a4      	asrs	r4, r4, #2
 8008928:	2600      	movs	r6, #0
 800892a:	42a6      	cmp	r6, r4
 800892c:	d105      	bne.n	800893a <__libc_init_array+0x2e>
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	f855 3b04 	ldr.w	r3, [r5], #4
 8008934:	4798      	blx	r3
 8008936:	3601      	adds	r6, #1
 8008938:	e7ee      	b.n	8008918 <__libc_init_array+0xc>
 800893a:	f855 3b04 	ldr.w	r3, [r5], #4
 800893e:	4798      	blx	r3
 8008940:	3601      	adds	r6, #1
 8008942:	e7f2      	b.n	800892a <__libc_init_array+0x1e>
 8008944:	08008d20 	.word	0x08008d20
 8008948:	08008d20 	.word	0x08008d20
 800894c:	08008d20 	.word	0x08008d20
 8008950:	08008d24 	.word	0x08008d24

08008954 <__retarget_lock_acquire_recursive>:
 8008954:	4770      	bx	lr

08008956 <__retarget_lock_release_recursive>:
 8008956:	4770      	bx	lr

08008958 <memcpy>:
 8008958:	440a      	add	r2, r1
 800895a:	4291      	cmp	r1, r2
 800895c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008960:	d100      	bne.n	8008964 <memcpy+0xc>
 8008962:	4770      	bx	lr
 8008964:	b510      	push	{r4, lr}
 8008966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800896a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800896e:	4291      	cmp	r1, r2
 8008970:	d1f9      	bne.n	8008966 <memcpy+0xe>
 8008972:	bd10      	pop	{r4, pc}

08008974 <memset>:
 8008974:	4402      	add	r2, r0
 8008976:	4603      	mov	r3, r0
 8008978:	4293      	cmp	r3, r2
 800897a:	d100      	bne.n	800897e <memset+0xa>
 800897c:	4770      	bx	lr
 800897e:	f803 1b01 	strb.w	r1, [r3], #1
 8008982:	e7f9      	b.n	8008978 <memset+0x4>

08008984 <cleanup_glue>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	460c      	mov	r4, r1
 8008988:	6809      	ldr	r1, [r1, #0]
 800898a:	4605      	mov	r5, r0
 800898c:	b109      	cbz	r1, 8008992 <cleanup_glue+0xe>
 800898e:	f7ff fff9 	bl	8008984 <cleanup_glue>
 8008992:	4621      	mov	r1, r4
 8008994:	4628      	mov	r0, r5
 8008996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800899a:	f000 b869 	b.w	8008a70 <_free_r>
	...

080089a0 <_reclaim_reent>:
 80089a0:	4b2c      	ldr	r3, [pc, #176]	; (8008a54 <_reclaim_reent+0xb4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4283      	cmp	r3, r0
 80089a6:	b570      	push	{r4, r5, r6, lr}
 80089a8:	4604      	mov	r4, r0
 80089aa:	d051      	beq.n	8008a50 <_reclaim_reent+0xb0>
 80089ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80089ae:	b143      	cbz	r3, 80089c2 <_reclaim_reent+0x22>
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d14a      	bne.n	8008a4c <_reclaim_reent+0xac>
 80089b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089b8:	6819      	ldr	r1, [r3, #0]
 80089ba:	b111      	cbz	r1, 80089c2 <_reclaim_reent+0x22>
 80089bc:	4620      	mov	r0, r4
 80089be:	f000 f857 	bl	8008a70 <_free_r>
 80089c2:	6961      	ldr	r1, [r4, #20]
 80089c4:	b111      	cbz	r1, 80089cc <_reclaim_reent+0x2c>
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 f852 	bl	8008a70 <_free_r>
 80089cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80089ce:	b111      	cbz	r1, 80089d6 <_reclaim_reent+0x36>
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 f84d 	bl	8008a70 <_free_r>
 80089d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80089d8:	b111      	cbz	r1, 80089e0 <_reclaim_reent+0x40>
 80089da:	4620      	mov	r0, r4
 80089dc:	f000 f848 	bl	8008a70 <_free_r>
 80089e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80089e2:	b111      	cbz	r1, 80089ea <_reclaim_reent+0x4a>
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 f843 	bl	8008a70 <_free_r>
 80089ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80089ec:	b111      	cbz	r1, 80089f4 <_reclaim_reent+0x54>
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 f83e 	bl	8008a70 <_free_r>
 80089f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80089f6:	b111      	cbz	r1, 80089fe <_reclaim_reent+0x5e>
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 f839 	bl	8008a70 <_free_r>
 80089fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008a00:	b111      	cbz	r1, 8008a08 <_reclaim_reent+0x68>
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 f834 	bl	8008a70 <_free_r>
 8008a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a0a:	b111      	cbz	r1, 8008a12 <_reclaim_reent+0x72>
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f000 f82f 	bl	8008a70 <_free_r>
 8008a12:	69a3      	ldr	r3, [r4, #24]
 8008a14:	b1e3      	cbz	r3, 8008a50 <_reclaim_reent+0xb0>
 8008a16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a18:	4620      	mov	r0, r4
 8008a1a:	4798      	blx	r3
 8008a1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a1e:	b1b9      	cbz	r1, 8008a50 <_reclaim_reent+0xb0>
 8008a20:	4620      	mov	r0, r4
 8008a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a26:	f7ff bfad 	b.w	8008984 <cleanup_glue>
 8008a2a:	5949      	ldr	r1, [r1, r5]
 8008a2c:	b941      	cbnz	r1, 8008a40 <_reclaim_reent+0xa0>
 8008a2e:	3504      	adds	r5, #4
 8008a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a32:	2d80      	cmp	r5, #128	; 0x80
 8008a34:	68d9      	ldr	r1, [r3, #12]
 8008a36:	d1f8      	bne.n	8008a2a <_reclaim_reent+0x8a>
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 f819 	bl	8008a70 <_free_r>
 8008a3e:	e7ba      	b.n	80089b6 <_reclaim_reent+0x16>
 8008a40:	680e      	ldr	r6, [r1, #0]
 8008a42:	4620      	mov	r0, r4
 8008a44:	f000 f814 	bl	8008a70 <_free_r>
 8008a48:	4631      	mov	r1, r6
 8008a4a:	e7ef      	b.n	8008a2c <_reclaim_reent+0x8c>
 8008a4c:	2500      	movs	r5, #0
 8008a4e:	e7ef      	b.n	8008a30 <_reclaim_reent+0x90>
 8008a50:	bd70      	pop	{r4, r5, r6, pc}
 8008a52:	bf00      	nop
 8008a54:	20000010 	.word	0x20000010

08008a58 <__malloc_lock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__malloc_lock+0x8>)
 8008a5a:	f7ff bf7b 	b.w	8008954 <__retarget_lock_acquire_recursive>
 8008a5e:	bf00      	nop
 8008a60:	20005df4 	.word	0x20005df4

08008a64 <__malloc_unlock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_unlock+0x8>)
 8008a66:	f7ff bf76 	b.w	8008956 <__retarget_lock_release_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20005df4 	.word	0x20005df4

08008a70 <_free_r>:
 8008a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a72:	2900      	cmp	r1, #0
 8008a74:	d044      	beq.n	8008b00 <_free_r+0x90>
 8008a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a7a:	9001      	str	r0, [sp, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a82:	bfb8      	it	lt
 8008a84:	18e4      	addlt	r4, r4, r3
 8008a86:	f7ff ffe7 	bl	8008a58 <__malloc_lock>
 8008a8a:	4a1e      	ldr	r2, [pc, #120]	; (8008b04 <_free_r+0x94>)
 8008a8c:	9801      	ldr	r0, [sp, #4]
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	b933      	cbnz	r3, 8008aa0 <_free_r+0x30>
 8008a92:	6063      	str	r3, [r4, #4]
 8008a94:	6014      	str	r4, [r2, #0]
 8008a96:	b003      	add	sp, #12
 8008a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a9c:	f7ff bfe2 	b.w	8008a64 <__malloc_unlock>
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	d908      	bls.n	8008ab6 <_free_r+0x46>
 8008aa4:	6825      	ldr	r5, [r4, #0]
 8008aa6:	1961      	adds	r1, r4, r5
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	bf01      	itttt	eq
 8008aac:	6819      	ldreq	r1, [r3, #0]
 8008aae:	685b      	ldreq	r3, [r3, #4]
 8008ab0:	1949      	addeq	r1, r1, r5
 8008ab2:	6021      	streq	r1, [r4, #0]
 8008ab4:	e7ed      	b.n	8008a92 <_free_r+0x22>
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	b10b      	cbz	r3, 8008ac0 <_free_r+0x50>
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	d9fa      	bls.n	8008ab6 <_free_r+0x46>
 8008ac0:	6811      	ldr	r1, [r2, #0]
 8008ac2:	1855      	adds	r5, r2, r1
 8008ac4:	42a5      	cmp	r5, r4
 8008ac6:	d10b      	bne.n	8008ae0 <_free_r+0x70>
 8008ac8:	6824      	ldr	r4, [r4, #0]
 8008aca:	4421      	add	r1, r4
 8008acc:	1854      	adds	r4, r2, r1
 8008ace:	42a3      	cmp	r3, r4
 8008ad0:	6011      	str	r1, [r2, #0]
 8008ad2:	d1e0      	bne.n	8008a96 <_free_r+0x26>
 8008ad4:	681c      	ldr	r4, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	6053      	str	r3, [r2, #4]
 8008ada:	4421      	add	r1, r4
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	e7da      	b.n	8008a96 <_free_r+0x26>
 8008ae0:	d902      	bls.n	8008ae8 <_free_r+0x78>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	6003      	str	r3, [r0, #0]
 8008ae6:	e7d6      	b.n	8008a96 <_free_r+0x26>
 8008ae8:	6825      	ldr	r5, [r4, #0]
 8008aea:	1961      	adds	r1, r4, r5
 8008aec:	428b      	cmp	r3, r1
 8008aee:	bf04      	itt	eq
 8008af0:	6819      	ldreq	r1, [r3, #0]
 8008af2:	685b      	ldreq	r3, [r3, #4]
 8008af4:	6063      	str	r3, [r4, #4]
 8008af6:	bf04      	itt	eq
 8008af8:	1949      	addeq	r1, r1, r5
 8008afa:	6021      	streq	r1, [r4, #0]
 8008afc:	6054      	str	r4, [r2, #4]
 8008afe:	e7ca      	b.n	8008a96 <_free_r+0x26>
 8008b00:	b003      	add	sp, #12
 8008b02:	bd30      	pop	{r4, r5, pc}
 8008b04:	20005df8 	.word	0x20005df8

08008b08 <_init>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	bf00      	nop
 8008b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0e:	bc08      	pop	{r3}
 8008b10:	469e      	mov	lr, r3
 8008b12:	4770      	bx	lr

08008b14 <_fini>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	bf00      	nop
 8008b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1a:	bc08      	pop	{r3}
 8008b1c:	469e      	mov	lr, r3
 8008b1e:	4770      	bx	lr
