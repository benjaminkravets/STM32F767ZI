
STM32F767ZI-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080020a8  080020a8  000030a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080020d4  080020d4  000030d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080020dc  080020dc  000030dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080020e0  080020e0  000030e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  080020e4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b8  20000090  08002174  00004090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000248  08002174  00004248  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b269  00000000  00000000  000040be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002090  00000000  00000000  0000f327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00002a57  00000000  00000000  000113b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000780  00000000  00000000  00013e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000007b8  00000000  00000000  00014590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00025e4e  00000000  00000000  00014d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c142  00000000  00000000  0003ab96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000eaf0e  00000000  00000000  00046cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00131be6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001368  00000000  00000000  00131c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000b3  00000000  00000000  00132f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000090 	.word	0x20000090
 8000214:	00000000 	.word	0x00000000
 8000218:	08002090 	.word	0x08002090

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000094 	.word	0x20000094
 8000234:	08002090 	.word	0x08002090

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <BSP_LED_Init>:
void BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000528:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <BSP_LED_Init+0x50>)
 800052a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800052c:	f042 0202 	orr.w	r2, r2, #2
{
 8000530:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000532:	631a      	str	r2, [r3, #48]	@ 0x30
{
 8000534:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE(Led);
 8000536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	b9c8      	cbnz	r0, 8000572 <BSP_LED_Init+0x4a>
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <BSP_LED_Init+0x54>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2600      	movs	r6, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000546:	4c0e      	ldr	r4, [pc, #56]	@ (8000580 <BSP_LED_Init+0x58>)
 8000548:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800054a:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000550:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000554:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000556:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000560:	f000 fb58 	bl	8000c14 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000564:	4632      	mov	r2, r6
 8000566:	4629      	mov	r1, r5
 8000568:	6860      	ldr	r0, [r4, #4]
 800056a:	f000 fc3d 	bl	8000de8 <HAL_GPIO_WritePin>
}
 800056e:	b008      	add	sp, #32
 8000570:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000572:	9302      	str	r3, [sp, #8]
 8000574:	9b02      	ldr	r3, [sp, #8]
 8000576:	e7e4      	b.n	8000542 <BSP_LED_Init+0x1a>
 8000578:	40023800 	.word	0x40023800
 800057c:	080020a8 	.word	0x080020a8
 8000580:	20000000 	.word	0x20000000

08000584 <BSP_LED_On>:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000584:	4b04      	ldr	r3, [pc, #16]	@ (8000598 <BSP_LED_On+0x14>)
 8000586:	2201      	movs	r2, #1
 8000588:	4904      	ldr	r1, [pc, #16]	@ (800059c <BSP_LED_On+0x18>)
 800058a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800058e:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8000592:	6858      	ldr	r0, [r3, #4]
 8000594:	f000 bc28 	b.w	8000de8 <HAL_GPIO_WritePin>
 8000598:	20000000 	.word	0x20000000
 800059c:	080020a8 	.word	0x080020a8

080005a0 <BSP_LED_Off>:
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <BSP_LED_Off+0x14>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	4904      	ldr	r1, [pc, #16]	@ (80005b8 <BSP_LED_Off+0x18>)
 80005a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80005aa:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 80005ae:	6858      	ldr	r0, [r3, #4]
 80005b0:	f000 bc1a 	b.w	8000de8 <HAL_GPIO_WritePin>
 80005b4:	20000000 	.word	0x20000000
 80005b8:	080020a8 	.word	0x080020a8

080005bc <BSP_LED_Toggle>:
  *     @arg  LED3 
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80005bc:	4b04      	ldr	r3, [pc, #16]	@ (80005d0 <BSP_LED_Toggle+0x14>)
 80005be:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <BSP_LED_Toggle+0x18>)
 80005c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80005c4:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 80005c8:	6858      	ldr	r0, [r3, #4]
 80005ca:	f000 bc12 	b.w	8000df2 <HAL_GPIO_TogglePin>
 80005ce:	bf00      	nop
 80005d0:	20000000 	.word	0x20000000
 80005d4:	080020a8 	.word	0x080020a8

080005d8 <BSP_PB_Init>:
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80005d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <BSP_PB_Init+0x70>)
 80005da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005dc:	f042 0204 	orr.w	r2, r2, #4
{
 80005e0:	b510      	push	{r4, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80005e2:	631a      	str	r2, [r3, #48]	@ 0x30
{
 80005e4:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80005e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80005f0:	b981      	cbnz	r1, 8000614 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80005f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f6:	2202      	movs	r2, #2
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fc:	2303      	movs	r3, #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80005fe:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <BSP_PB_Init+0x74>)
 8000606:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800060a:	6918      	ldr	r0, [r3, #16]
 800060c:	f000 fb02 	bl	8000c14 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8000610:	b006      	add	sp, #24
 8000612:	bd10      	pop	{r4, pc}
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000614:	2901      	cmp	r1, #1
 8000616:	d1fb      	bne.n	8000610 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800061c:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800061e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000620:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000622:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000626:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <BSP_PB_Init+0x74>)
 800062c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000630:	6918      	ldr	r0, [r3, #16]
 8000632:	f000 faef 	bl	8000c14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000636:	4622      	mov	r2, r4
 8000638:	210f      	movs	r1, #15
 800063a:	2028      	movs	r0, #40	@ 0x28
 800063c:	f000 f8aa 	bl	8000794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000640:	2028      	movs	r0, #40	@ 0x28
 8000642:	f000 f8d9 	bl	80007f8 <HAL_NVIC_EnableIRQ>
}
 8000646:	e7e3      	b.n	8000610 <BSP_PB_Init+0x38>
 8000648:	40023800 	.word	0x40023800
 800064c:	20000000 	.word	0x20000000

08000650 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000650:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000652:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <BSP_PB_GetState+0x14>)
 8000654:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800065c:	6900      	ldr	r0, [r0, #16]
 800065e:	f000 fbbd 	bl	8000ddc <HAL_GPIO_ReadPin>
}
 8000662:	bd08      	pop	{r3, pc}
 8000664:	20000000 	.word	0x20000000

08000668 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	490f      	ldr	r1, [pc, #60]	@ (80006a8 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800066a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800066c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <SystemInit+0x44>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	f042 0201 	orr.w	r2, r2, #1
 8000680:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000682:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 800068a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800068e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000690:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <SystemInit+0x48>)
 8000692:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800069a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800069c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800069e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80006a2:	608b      	str	r3, [r1, #8]
#endif
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00
 80006ac:	40023800 	.word	0x40023800
 80006b0:	24003010 	.word	0x24003010

080006b4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80006b4:	4770      	bx	lr
	...

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ba:	4e0e      	ldr	r6, [pc, #56]	@ (80006f4 <HAL_InitTick+0x3c>)
 80006bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 80006c0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c2:	7832      	ldrb	r2, [r6, #0]
 80006c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80006c8:	4a0b      	ldr	r2, [pc, #44]	@ (80006f8 <HAL_InitTick+0x40>)
 80006ca:	6810      	ldr	r0, [r2, #0]
 80006cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80006d0:	f000 f8a0 	bl	8000814 <HAL_SYSTICK_Config>
 80006d4:	4604      	mov	r4, r0
 80006d6:	b950      	cbnz	r0, 80006ee <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d8:	2d0f      	cmp	r5, #15
 80006da:	d808      	bhi.n	80006ee <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006dc:	4602      	mov	r2, r0
 80006de:	4629      	mov	r1, r5
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
 80006e4:	f000 f856 	bl	8000794 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e8:	4620      	mov	r0, r4
 80006ea:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80006ee:	2001      	movs	r0, #1
 80006f0:	e7fc      	b.n	80006ec <HAL_InitTick+0x34>
 80006f2:	bf00      	nop
 80006f4:	20000018 	.word	0x20000018
 80006f8:	20000014 	.word	0x20000014

080006fc <HAL_Init>:
{
 80006fc:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000708:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000710:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000712:	f000 f82d 	bl	8000770 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff ffce 	bl	80006b8 <HAL_InitTick>
  HAL_MspInit();
 800071c:	f7ff ffca 	bl	80006b4 <HAL_MspInit>
}
 8000720:	2000      	movs	r0, #0
 8000722:	bd08      	pop	{r3, pc}
 8000724:	40023c00 	.word	0x40023c00

08000728 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000728:	4a03      	ldr	r2, [pc, #12]	@ (8000738 <HAL_IncTick+0x10>)
 800072a:	4b04      	ldr	r3, [pc, #16]	@ (800073c <HAL_IncTick+0x14>)
 800072c:	6811      	ldr	r1, [r2, #0]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	440b      	add	r3, r1
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	200000ac 	.word	0x200000ac
 800073c:	20000018 	.word	0x20000018

08000740 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000740:	4b01      	ldr	r3, [pc, #4]	@ (8000748 <HAL_GetTick+0x8>)
 8000742:	6818      	ldr	r0, [r3, #0]
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	200000ac 	.word	0x200000ac

0800074c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800074c:	b538      	push	{r3, r4, r5, lr}
 800074e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000750:	f7ff fff6 	bl	8000740 <HAL_GetTick>
 8000754:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000756:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000758:	bf1e      	ittt	ne
 800075a:	4b04      	ldrne	r3, [pc, #16]	@ (800076c <HAL_Delay+0x20>)
 800075c:	781b      	ldrbne	r3, [r3, #0]
 800075e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000760:	f7ff ffee 	bl	8000740 <HAL_GetTick>
 8000764:	1b43      	subs	r3, r0, r5
 8000766:	42a3      	cmp	r3, r4
 8000768:	d3fa      	bcc.n	8000760 <HAL_Delay+0x14>
  {
  }
}
 800076a:	bd38      	pop	{r3, r4, r5, pc}
 800076c:	20000018 	.word	0x20000018

08000770 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000770:	4907      	ldr	r1, [pc, #28]	@ (8000790 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000772:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000776:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800077e:	0412      	lsls	r2, r2, #16
 8000780:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800078c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000796:	b530      	push	{r4, r5, lr}
 8000798:	68dc      	ldr	r4, [r3, #12]
 800079a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	bf28      	it	cs
 80007a8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b0:	bf8c      	ite	hi
 80007b2:	3c03      	subhi	r4, #3
 80007b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80007ba:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007bc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	fa03 f304 	lsl.w	r3, r3, r4
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80007d4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80007d6:	db06      	blt.n	80007e6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80007dc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80007e0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007e4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e6:	f000 000f 	and.w	r0, r0, #15
 80007ea:	4a02      	ldr	r2, [pc, #8]	@ (80007f4 <HAL_NVIC_SetPriority+0x60>)
 80007ec:	5413      	strb	r3, [r2, r0]
 80007ee:	e7f9      	b.n	80007e4 <HAL_NVIC_SetPriority+0x50>
 80007f0:	e000ed00 	.word	0xe000ed00
 80007f4:	e000ed14 	.word	0xe000ed14

080007f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007f8:	2800      	cmp	r0, #0
 80007fa:	db07      	blt.n	800080c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007fc:	0941      	lsrs	r1, r0, #5
 80007fe:	2301      	movs	r3, #1
 8000800:	f000 001f 	and.w	r0, r0, #31
 8000804:	4a02      	ldr	r2, [pc, #8]	@ (8000810 <HAL_NVIC_EnableIRQ+0x18>)
 8000806:	4083      	lsls	r3, r0
 8000808:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100

08000814 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	3801      	subs	r0, #1
 8000816:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800081a:	d20b      	bcs.n	8000834 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000820:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <HAL_SYSTICK_Config+0x24>)
 8000822:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000824:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000826:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000830:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000832:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000834:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800083c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000840:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <HAL_MPU_Disable+0x18>)
 8000842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000844:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000848:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800084a:	2200      	movs	r2, #0
 800084c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_MPU_Enable+0x1c>)
 800085a:	f040 0001 	orr.w	r0, r0, #1
 800085e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000862:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000864:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800086a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800086e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000878:	7843      	ldrb	r3, [r0, #1]
 800087a:	4a14      	ldr	r2, [pc, #80]	@ (80008cc <HAL_MPU_ConfigRegion+0x54>)
{
 800087c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800087e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 8000882:	7801      	ldrb	r1, [r0, #0]
 8000884:	b1e9      	cbz	r1, 80008c2 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000886:	6843      	ldr	r3, [r0, #4]
 8000888:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800088c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800088e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000890:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000892:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000896:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000898:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800089a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800089e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80008a0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80008a4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80008a6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80008aa:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80008ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80008b0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80008b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80008b6:	7a01      	ldrb	r1, [r0, #8]
 80008b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008bc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80008c0:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80008c2:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 80008c6:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 80008ca:	e7f9      	b.n	80008c0 <HAL_MPU_ConfigRegion+0x48>
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008d0:	6803      	ldr	r3, [r0, #0]
{
 80008d2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008d4:	2018      	movs	r0, #24
 80008d6:	b2d9      	uxtb	r1, r3
 80008d8:	3910      	subs	r1, #16
 80008da:	fbb1 f0f0 	udiv	r0, r1, r0
{
 80008de:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80008e0:	4c05      	ldr	r4, [pc, #20]	@ (80008f8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80008e2:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80008e4:	5c20      	ldrb	r0, [r4, r0]
 80008e6:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80008e8:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 80008ec:	f020 0003 	bic.w	r0, r0, #3
 80008f0:	bf88      	it	hi
 80008f2:	3004      	addhi	r0, #4
 80008f4:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80008f6:	bd10      	pop	{r4, pc}
 80008f8:	080020ca 	.word	0x080020ca

080008fc <HAL_DMA_Init>:
{
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000900:	f7ff ff1e 	bl	8000740 <HAL_GetTick>
 8000904:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000906:	2c00      	cmp	r4, #0
 8000908:	d060      	beq.n	80009cc <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 800090a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 800090c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800090e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8000912:	2300      	movs	r3, #0
 8000914:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8000918:	6813      	ldr	r3, [r2, #0]
 800091a:	f023 0301 	bic.w	r3, r3, #1
 800091e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000920:	6822      	ldr	r2, [r4, #0]
 8000922:	6813      	ldr	r3, [r2, #0]
 8000924:	07d8      	lsls	r0, r3, #31
 8000926:	d42e      	bmi.n	8000986 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8000928:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800092a:	4832      	ldr	r0, [pc, #200]	@ (80009f4 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800092c:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800092e:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000930:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8000934:	432b      	orrs	r3, r5
 8000936:	68e5      	ldr	r5, [r4, #12]
 8000938:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800093a:	6925      	ldr	r5, [r4, #16]
 800093c:	432b      	orrs	r3, r5
 800093e:	6965      	ldr	r5, [r4, #20]
 8000940:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000942:	69e5      	ldr	r5, [r4, #28]
 8000944:	430b      	orrs	r3, r1
 8000946:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000948:	6a25      	ldr	r5, [r4, #32]
 800094a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800094c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800094e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000950:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000952:	bf02      	ittt	eq
 8000954:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8000958:	4335      	orreq	r5, r6
 800095a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800095c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 800095e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8000960:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000962:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000966:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800096a:	d135      	bne.n	80009d8 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 800096c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800096e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000970:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000972:	b38d      	cbz	r5, 80009d8 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000974:	b991      	cbnz	r1, 800099c <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8000976:	2801      	cmp	r0, #1
 8000978:	d020      	beq.n	80009bc <HAL_DMA_Init+0xc0>
 800097a:	f030 0102 	bics.w	r1, r0, #2
 800097e:	d12b      	bne.n	80009d8 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000980:	01e9      	lsls	r1, r5, #7
 8000982:	d529      	bpl.n	80009d8 <HAL_DMA_Init+0xdc>
 8000984:	e01d      	b.n	80009c2 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000986:	f7ff fedb 	bl	8000740 <HAL_GetTick>
 800098a:	1b40      	subs	r0, r0, r5
 800098c:	2805      	cmp	r0, #5
 800098e:	d9c7      	bls.n	8000920 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000990:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000992:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000994:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000996:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800099a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800099c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80009a0:	d116      	bne.n	80009d0 <HAL_DMA_Init+0xd4>
    switch (tmp)
 80009a2:	2803      	cmp	r0, #3
 80009a4:	d818      	bhi.n	80009d8 <HAL_DMA_Init+0xdc>
 80009a6:	a101      	add	r1, pc, #4	@ (adr r1, 80009ac <HAL_DMA_Init+0xb0>)
 80009a8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80009ac:	080009c3 	.word	0x080009c3
 80009b0:	08000981 	.word	0x08000981
 80009b4:	080009c3 	.word	0x080009c3
 80009b8:	080009bd 	.word	0x080009bd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80009bc:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80009c0:	d10a      	bne.n	80009d8 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009c2:	2340      	movs	r3, #64	@ 0x40
 80009c4:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80009c6:	2301      	movs	r3, #1
 80009c8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80009cc:	2001      	movs	r0, #1
 80009ce:	e7e4      	b.n	800099a <HAL_DMA_Init+0x9e>
    switch (tmp)
 80009d0:	2802      	cmp	r0, #2
 80009d2:	d9f6      	bls.n	80009c2 <HAL_DMA_Init+0xc6>
 80009d4:	2803      	cmp	r0, #3
 80009d6:	d0d3      	beq.n	8000980 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 80009d8:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009da:	4620      	mov	r0, r4
 80009dc:	f7ff ff78 	bl	80008d0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009e0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80009e2:	233f      	movs	r3, #63	@ 0x3f
 80009e4:	4093      	lsls	r3, r2
 80009e6:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009e8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80009ea:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ec:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80009ee:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80009f2:	e7d2      	b.n	800099a <HAL_DMA_Init+0x9e>
 80009f4:	e010803f 	.word	0xe010803f

080009f8 <HAL_DMA_Start_IT>:
{
 80009f8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80009fa:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009fe:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8000a00:	2c01      	cmp	r4, #1
 8000a02:	d034      	beq.n	8000a6e <HAL_DMA_Start_IT+0x76>
 8000a04:	2401      	movs	r4, #1
 8000a06:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a0a:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8000a0e:	2c01      	cmp	r4, #1
 8000a10:	f04f 0400 	mov.w	r4, #0
 8000a14:	d129      	bne.n	8000a6a <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a16:	2502      	movs	r5, #2
 8000a18:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a1c:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a1e:	6804      	ldr	r4, [r0, #0]
 8000a20:	6825      	ldr	r5, [r4, #0]
 8000a22:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8000a26:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000a28:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a2a:	6883      	ldr	r3, [r0, #8]
 8000a2c:	2b40      	cmp	r3, #64	@ 0x40
 8000a2e:	d119      	bne.n	8000a64 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8000a30:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000a32:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a34:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000a36:	233f      	movs	r3, #63	@ 0x3f
 8000a38:	4093      	lsls	r3, r2
 8000a3a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	f043 0316 	orr.w	r3, r3, #22
 8000a42:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a44:	6963      	ldr	r3, [r4, #20]
 8000a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000a4c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8000a4e:	b11b      	cbz	r3, 8000a58 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000a58:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a5a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6023      	str	r3, [r4, #0]
}
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8000a64:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000a66:	60e2      	str	r2, [r4, #12]
 8000a68:	e7e4      	b.n	8000a34 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000a6a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8000a6e:	2002      	movs	r0, #2
 8000a70:	e7f7      	b.n	8000a62 <HAL_DMA_Start_IT+0x6a>

08000a72 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a72:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d003      	beq.n	8000a82 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8000a7e:	2001      	movs	r0, #1
 8000a80:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000a82:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000a84:	2305      	movs	r3, #5
 8000a86:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  return HAL_OK;
 8000a8a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8000a8c:	6813      	ldr	r3, [r2, #0]
 8000a8e:	f023 0301 	bic.w	r3, r3, #1
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	4770      	bx	lr
	...

08000a98 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000a98:	2300      	movs	r3, #0
{
 8000a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000a9c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a9e:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8000c10 <HAL_DMA_IRQHandler+0x178>)
{
 8000aa2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000aa4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000aa6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8000aaa:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aac:	409a      	lsls	r2, r3
 8000aae:	4232      	tst	r2, r6
 8000ab0:	d00c      	beq.n	8000acc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ab2:	6801      	ldr	r1, [r0, #0]
 8000ab4:	6808      	ldr	r0, [r1, #0]
 8000ab6:	0740      	lsls	r0, r0, #29
 8000ab8:	d508      	bpl.n	8000acc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000aba:	6808      	ldr	r0, [r1, #0]
 8000abc:	f020 0004 	bic.w	r0, r0, #4
 8000ac0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ac2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000ac6:	f042 0201 	orr.w	r2, r2, #1
 8000aca:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000acc:	2201      	movs	r2, #1
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	4232      	tst	r2, r6
 8000ad2:	d008      	beq.n	8000ae6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ad4:	6821      	ldr	r1, [r4, #0]
 8000ad6:	6949      	ldr	r1, [r1, #20]
 8000ad8:	0609      	lsls	r1, r1, #24
 8000ada:	d504      	bpl.n	8000ae6 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000adc:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ade:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000ae0:	f042 0202 	orr.w	r2, r2, #2
 8000ae4:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	4232      	tst	r2, r6
 8000aec:	d008      	beq.n	8000b00 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aee:	6821      	ldr	r1, [r4, #0]
 8000af0:	6809      	ldr	r1, [r1, #0]
 8000af2:	0788      	lsls	r0, r1, #30
 8000af4:	d504      	bpl.n	8000b00 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000af6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000af8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000afa:	f042 0204 	orr.w	r2, r2, #4
 8000afe:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b00:	2210      	movs	r2, #16
 8000b02:	409a      	lsls	r2, r3
 8000b04:	4232      	tst	r2, r6
 8000b06:	d010      	beq.n	8000b2a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	6819      	ldr	r1, [r3, #0]
 8000b0c:	0709      	lsls	r1, r1, #28
 8000b0e:	d50c      	bpl.n	8000b2a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b10:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	0350      	lsls	r0, r2, #13
 8000b16:	d537      	bpl.n	8000b88 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	0319      	lsls	r1, r3, #12
 8000b1c:	d401      	bmi.n	8000b22 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000b1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000b20:	e000      	b.n	8000b24 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b22:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000b24:	b10b      	cbz	r3, 8000b2a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000b26:	4620      	mov	r0, r4
 8000b28:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b2a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8000b2c:	2220      	movs	r2, #32
 8000b2e:	408a      	lsls	r2, r1
 8000b30:	4232      	tst	r2, r6
 8000b32:	d03a      	beq.n	8000baa <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b34:	6823      	ldr	r3, [r4, #0]
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	06c6      	lsls	r6, r0, #27
 8000b3a:	d536      	bpl.n	8000baa <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b3c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b3e:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8000b42:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b44:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b46:	d127      	bne.n	8000b98 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b48:	f022 0216 	bic.w	r2, r2, #22
 8000b4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b4e:	695a      	ldr	r2, [r3, #20]
 8000b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b54:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b56:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000b58:	b90a      	cbnz	r2, 8000b5e <HAL_DMA_IRQHandler+0xc6>
 8000b5a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8000b5c:	b11a      	cbz	r2, 8000b66 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	f022 0208 	bic.w	r2, r2, #8
 8000b64:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b66:	233f      	movs	r3, #63	@ 0x3f
 8000b68:	408b      	lsls	r3, r1
 8000b6a:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8000b72:	2300      	movs	r3, #0
 8000b74:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8000b78:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d045      	beq.n	8000c0a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000b7e:	4620      	mov	r0, r4
}
 8000b80:	b003      	add	sp, #12
 8000b82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000b86:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	05d2      	lsls	r2, r2, #23
 8000b8c:	d4c7      	bmi.n	8000b1e <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	f022 0208 	bic.w	r2, r2, #8
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e7c2      	b.n	8000b1e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b98:	0350      	lsls	r0, r2, #13
 8000b9a:	d527      	bpl.n	8000bec <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0319      	lsls	r1, r3, #12
 8000ba0:	d431      	bmi.n	8000c06 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000ba2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 8000ba4:	b10b      	cbz	r3, 8000baa <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000baa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000bac:	b36b      	cbz	r3, 8000c0a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000bae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000bb0:	07da      	lsls	r2, r3, #31
 8000bb2:	d519      	bpl.n	8000be8 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8000bb4:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 8000bb8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000bba:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8000bc4:	6813      	ldr	r3, [r2, #0]
 8000bc6:	f023 0301 	bic.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000bcc:	9b01      	ldr	r3, [sp, #4]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	42bb      	cmp	r3, r7
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	d802      	bhi.n	8000bdc <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000bd6:	6813      	ldr	r3, [r2, #0]
 8000bd8:	07db      	lsls	r3, r3, #31
 8000bda:	d4f7      	bmi.n	8000bcc <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8000be2:	2300      	movs	r3, #0
 8000be4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8000be8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000bea:	e7c6      	b.n	8000b7a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8000bf2:	d108      	bne.n	8000c06 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000bf4:	6819      	ldr	r1, [r3, #0]
 8000bf6:	f021 0110 	bic.w	r1, r1, #16
 8000bfa:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000bfc:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000bfe:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000c02:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8000c06:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000c08:	e7cc      	b.n	8000ba4 <HAL_DMA_IRQHandler+0x10c>
}
 8000c0a:	b003      	add	sp, #12
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000014 	.word	0x20000014

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c18:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8000dd8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c1e:	4a6c      	ldr	r2, [pc, #432]	@ (8000dd0 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8000c20:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000c24:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8000c2a:	43ac      	bics	r4, r5
 8000c2c:	f040 80b7 	bne.w	8000d9e <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c30:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c32:	2703      	movs	r7, #3
 8000c34:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c38:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c3c:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c40:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c42:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c46:	2f01      	cmp	r7, #1
 8000c48:	d834      	bhi.n	8000cb4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000c4a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c4c:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c50:	68cf      	ldr	r7, [r1, #12]
 8000c52:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c56:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 8000c5a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c5c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5e:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c62:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000c66:	409f      	lsls	r7, r3
 8000c68:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8000c6c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000c6e:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c70:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c72:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c76:	688f      	ldr	r7, [r1, #8]
 8000c78:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c7c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8000c80:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c82:	d119      	bne.n	8000cb8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8000c84:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c88:	f003 0a07 	and.w	sl, r3, #7
 8000c8c:	f04f 0b0f 	mov.w	fp, #15
 8000c90:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8000c94:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000c98:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c9c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000ca0:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ca4:	690f      	ldr	r7, [r1, #16]
 8000ca6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000caa:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8000cae:	f8c8 7020 	str.w	r7, [r8, #32]
 8000cb2:	e001      	b.n	8000cb8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb4:	2c03      	cmp	r4, #3
 8000cb6:	d1da      	bne.n	8000c6e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000cb8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cba:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cbe:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000cc2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000cc6:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8000cca:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ccc:	d067      	beq.n	8000d9e <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8000cd2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cd6:	f003 0c03 	and.w	ip, r3, #3
 8000cda:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000ce2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ce6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8000cee:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8000cf2:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cf6:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8000cfe:	9401      	str	r4, [sp, #4]
 8000d00:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d02:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d04:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d08:	4c32      	ldr	r4, [pc, #200]	@ (8000dd4 <HAL_GPIO_Init+0x1c0>)
 8000d0a:	42a0      	cmp	r0, r4
 8000d0c:	d04e      	beq.n	8000dac <HAL_GPIO_Init+0x198>
 8000d0e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d12:	42a0      	cmp	r0, r4
 8000d14:	d04c      	beq.n	8000db0 <HAL_GPIO_Init+0x19c>
 8000d16:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d1a:	42a0      	cmp	r0, r4
 8000d1c:	d04a      	beq.n	8000db4 <HAL_GPIO_Init+0x1a0>
 8000d1e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d22:	42a0      	cmp	r0, r4
 8000d24:	d048      	beq.n	8000db8 <HAL_GPIO_Init+0x1a4>
 8000d26:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d2a:	42a0      	cmp	r0, r4
 8000d2c:	d046      	beq.n	8000dbc <HAL_GPIO_Init+0x1a8>
 8000d2e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d32:	42a0      	cmp	r0, r4
 8000d34:	d044      	beq.n	8000dc0 <HAL_GPIO_Init+0x1ac>
 8000d36:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d3a:	42a0      	cmp	r0, r4
 8000d3c:	d042      	beq.n	8000dc4 <HAL_GPIO_Init+0x1b0>
 8000d3e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d42:	42a0      	cmp	r0, r4
 8000d44:	d040      	beq.n	8000dc8 <HAL_GPIO_Init+0x1b4>
 8000d46:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d4a:	42a0      	cmp	r0, r4
 8000d4c:	d03e      	beq.n	8000dcc <HAL_GPIO_Init+0x1b8>
 8000d4e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000d52:	42a0      	cmp	r0, r4
 8000d54:	bf14      	ite	ne
 8000d56:	240a      	movne	r4, #10
 8000d58:	2409      	moveq	r4, #9
 8000d5a:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d5e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d62:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d66:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8000d6c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d6e:	bf0c      	ite	eq
 8000d70:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000d72:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d74:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8000d78:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8000d7a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	bf0c      	ite	eq
 8000d7e:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000d80:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d82:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8000d86:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8000d88:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d8a:	bf0c      	ite	eq
 8000d8c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8000d8e:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d90:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8000d92:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8000d94:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d96:	bf54      	ite	pl
 8000d98:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8000d9a:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8000d9c:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d9e:	3301      	adds	r3, #1
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	f47f af3d 	bne.w	8000c20 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000da6:	b003      	add	sp, #12
 8000da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dac:	2400      	movs	r4, #0
 8000dae:	e7d4      	b.n	8000d5a <HAL_GPIO_Init+0x146>
 8000db0:	2401      	movs	r4, #1
 8000db2:	e7d2      	b.n	8000d5a <HAL_GPIO_Init+0x146>
 8000db4:	2402      	movs	r4, #2
 8000db6:	e7d0      	b.n	8000d5a <HAL_GPIO_Init+0x146>
 8000db8:	2403      	movs	r4, #3
 8000dba:	e7ce      	b.n	8000d5a <HAL_GPIO_Init+0x146>
 8000dbc:	2404      	movs	r4, #4
 8000dbe:	e7cc      	b.n	8000d5a <HAL_GPIO_Init+0x146>
 8000dc0:	2405      	movs	r4, #5
 8000dc2:	e7ca      	b.n	8000d5a <HAL_GPIO_Init+0x146>
 8000dc4:	2406      	movs	r4, #6
 8000dc6:	e7c8      	b.n	8000d5a <HAL_GPIO_Init+0x146>
 8000dc8:	2407      	movs	r4, #7
 8000dca:	e7c6      	b.n	8000d5a <HAL_GPIO_Init+0x146>
 8000dcc:	2408      	movs	r4, #8
 8000dce:	e7c4      	b.n	8000d5a <HAL_GPIO_Init+0x146>
 8000dd0:	40013c00 	.word	0x40013c00
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ddc:	6903      	ldr	r3, [r0, #16]
 8000dde:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000de0:	bf14      	ite	ne
 8000de2:	2001      	movne	r0, #1
 8000de4:	2000      	moveq	r0, #0
 8000de6:	4770      	bx	lr

08000de8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000de8:	b10a      	cbz	r2, 8000dee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000dea:	6181      	str	r1, [r0, #24]
  }
}
 8000dec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000dee:	0409      	lsls	r1, r1, #16
 8000df0:	e7fb      	b.n	8000dea <HAL_GPIO_WritePin+0x2>

08000df2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000df2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000df4:	ea01 0203 	and.w	r2, r1, r3
 8000df8:	ea21 0103 	bic.w	r1, r1, r3
 8000dfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e00:	6181      	str	r1, [r0, #24]
}
 8000e02:	4770      	bx	lr

08000e04 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000e06:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e0a:	4c19      	ldr	r4, [pc, #100]	@ (8000e70 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e10:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e22:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e24:	f7ff fc8c 	bl	8000740 <HAL_GetTick>
 8000e28:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e2a:	6863      	ldr	r3, [r4, #4]
 8000e2c:	03da      	lsls	r2, r3, #15
 8000e2e:	d50c      	bpl.n	8000e4a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e30:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e32:	4d0f      	ldr	r5, [pc, #60]	@ (8000e70 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e38:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8000e3a:	f7ff fc81 	bl	8000740 <HAL_GetTick>
 8000e3e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000e40:	686b      	ldr	r3, [r5, #4]
 8000e42:	039b      	lsls	r3, r3, #14
 8000e44:	d50a      	bpl.n	8000e5c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000e46:	2000      	movs	r0, #0
 8000e48:	e006      	b.n	8000e58 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e4a:	f7ff fc79 	bl	8000740 <HAL_GetTick>
 8000e4e:	1b40      	subs	r0, r0, r5
 8000e50:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000e54:	d9e9      	bls.n	8000e2a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000e56:	2003      	movs	r0, #3
}
 8000e58:	b003      	add	sp, #12
 8000e5a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e5c:	f7ff fc70 	bl	8000740 <HAL_GetTick>
 8000e60:	1b00      	subs	r0, r0, r4
 8000e62:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000e66:	d9eb      	bls.n	8000e40 <HAL_PWREx_EnableOverDrive+0x3c>
 8000e68:	e7f5      	b.n	8000e56 <HAL_PWREx_EnableOverDrive+0x52>
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e78:	4604      	mov	r4, r0
 8000e7a:	b918      	cbnz	r0, 8000e84 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000e7c:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8000e7e:	b002      	add	sp, #8
 8000e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e84:	6803      	ldr	r3, [r0, #0]
 8000e86:	07de      	lsls	r6, r3, #31
 8000e88:	d410      	bmi.n	8000eac <HAL_RCC_OscConfig+0x38>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	079d      	lsls	r5, r3, #30
 8000e8e:	d45e      	bmi.n	8000f4e <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	0719      	lsls	r1, r3, #28
 8000e94:	f100 80a3 	bmi.w	8000fde <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	075a      	lsls	r2, r3, #29
 8000e9c:	f100 80c4 	bmi.w	8001028 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ea0:	69a2      	ldr	r2, [r4, #24]
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	f040 812e 	bne.w	8001104 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	e7e8      	b.n	8000e7e <HAL_RCC_OscConfig+0xa>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eac:	4b93      	ldr	r3, [pc, #588]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	f002 020c 	and.w	r2, r2, #12
 8000eb4:	2a04      	cmp	r2, #4
 8000eb6:	d007      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x54>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	f002 020c 	and.w	r2, r2, #12
 8000ebe:	2a08      	cmp	r2, #8
 8000ec0:	d10a      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x64>
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	0259      	lsls	r1, r3, #9
 8000ec6:	d507      	bpl.n	8000ed8 <HAL_RCC_OscConfig+0x64>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	039a      	lsls	r2, r3, #14
 8000ece:	d5dc      	bpl.n	8000e8a <HAL_RCC_OscConfig+0x16>
 8000ed0:	6863      	ldr	r3, [r4, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1d9      	bne.n	8000e8a <HAL_RCC_OscConfig+0x16>
 8000ed6:	e7d1      	b.n	8000e7c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed8:	6863      	ldr	r3, [r4, #4]
 8000eda:	4d88      	ldr	r5, [pc, #544]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 8000edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ee0:	d111      	bne.n	8000f06 <HAL_RCC_OscConfig+0x92>
 8000ee2:	682b      	ldr	r3, [r5, #0]
 8000ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000eea:	f7ff fc29 	bl	8000740 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eee:	4e83      	ldr	r6, [pc, #524]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000ef0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef2:	6833      	ldr	r3, [r6, #0]
 8000ef4:	039b      	lsls	r3, r3, #14
 8000ef6:	d4c8      	bmi.n	8000e8a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef8:	f7ff fc22 	bl	8000740 <HAL_GetTick>
 8000efc:	1b40      	subs	r0, r0, r5
 8000efe:	2864      	cmp	r0, #100	@ 0x64
 8000f00:	d9f7      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000f02:	2003      	movs	r0, #3
 8000f04:	e7bb      	b.n	8000e7e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f06:	b99b      	cbnz	r3, 8000f30 <HAL_RCC_OscConfig+0xbc>
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f0e:	602b      	str	r3, [r5, #0]
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f18:	f7ff fc12 	bl	8000740 <HAL_GetTick>
 8000f1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	039f      	lsls	r7, r3, #14
 8000f22:	d5b2      	bpl.n	8000e8a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fc0c 	bl	8000740 <HAL_GetTick>
 8000f28:	1b80      	subs	r0, r0, r6
 8000f2a:	2864      	cmp	r0, #100	@ 0x64
 8000f2c:	d9f7      	bls.n	8000f1e <HAL_RCC_OscConfig+0xaa>
 8000f2e:	e7e8      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	d103      	bne.n	8000f40 <HAL_RCC_OscConfig+0xcc>
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f3c:	602b      	str	r3, [r5, #0]
 8000f3e:	e7d0      	b.n	8000ee2 <HAL_RCC_OscConfig+0x6e>
 8000f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f44:	602b      	str	r3, [r5, #0]
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f4c:	e7cc      	b.n	8000ee8 <HAL_RCC_OscConfig+0x74>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f4e:	4b6b      	ldr	r3, [pc, #428]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	f012 0f0c 	tst.w	r2, #12
 8000f56:	d007      	beq.n	8000f68 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	f002 020c 	and.w	r2, r2, #12
 8000f5e:	2a08      	cmp	r2, #8
 8000f60:	d111      	bne.n	8000f86 <HAL_RCC_OscConfig+0x112>
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	025d      	lsls	r5, r3, #9
 8000f66:	d40e      	bmi.n	8000f86 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f68:	4a64      	ldr	r2, [pc, #400]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	0799      	lsls	r1, r3, #30
 8000f6e:	d502      	bpl.n	8000f76 <HAL_RCC_OscConfig+0x102>
 8000f70:	68e3      	ldr	r3, [r4, #12]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d182      	bne.n	8000e7c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f76:	6813      	ldr	r3, [r2, #0]
 8000f78:	6921      	ldr	r1, [r4, #16]
 8000f7a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000f7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f82:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f84:	e784      	b.n	8000e90 <HAL_RCC_OscConfig+0x1c>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f86:	68e3      	ldr	r3, [r4, #12]
 8000f88:	4d5c      	ldr	r5, [pc, #368]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 8000f8a:	b1bb      	cbz	r3, 8000fbc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f94:	f7ff fbd4 	bl	8000740 <HAL_GetTick>
 8000f98:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	079b      	lsls	r3, r3, #30
 8000f9e:	d507      	bpl.n	8000fb0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	6922      	ldr	r2, [r4, #16]
 8000fa4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000fa8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fac:	602b      	str	r3, [r5, #0]
 8000fae:	e76f      	b.n	8000e90 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fbc6 	bl	8000740 <HAL_GetTick>
 8000fb4:	1b80      	subs	r0, r0, r6
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9ef      	bls.n	8000f9a <HAL_RCC_OscConfig+0x126>
 8000fba:	e7a2      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fbbc 	bl	8000740 <HAL_GetTick>
 8000fc8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	079f      	lsls	r7, r3, #30
 8000fce:	f57f af5f 	bpl.w	8000e90 <HAL_RCC_OscConfig+0x1c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fbb5 	bl	8000740 <HAL_GetTick>
 8000fd6:	1b80      	subs	r0, r0, r6
 8000fd8:	2802      	cmp	r0, #2
 8000fda:	d9f6      	bls.n	8000fca <HAL_RCC_OscConfig+0x156>
 8000fdc:	e791      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000fde:	6963      	ldr	r3, [r4, #20]
 8000fe0:	4d46      	ldr	r5, [pc, #280]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 8000fe2:	b183      	cbz	r3, 8001006 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000fe4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8000fec:	f7ff fba8 	bl	8000740 <HAL_GetTick>
 8000ff0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8000ff4:	079b      	lsls	r3, r3, #30
 8000ff6:	f53f af4f 	bmi.w	8000e98 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fba1 	bl	8000740 <HAL_GetTick>
 8000ffe:	1b80      	subs	r0, r0, r6
 8001000:	2802      	cmp	r0, #2
 8001002:	d9f6      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x17e>
 8001004:	e77d      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001006:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800100e:	f7ff fb97 	bl	8000740 <HAL_GetTick>
 8001012:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001014:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001016:	079f      	lsls	r7, r3, #30
 8001018:	f57f af3e 	bpl.w	8000e98 <HAL_RCC_OscConfig+0x24>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800101c:	f7ff fb90 	bl	8000740 <HAL_GetTick>
 8001020:	1b80      	subs	r0, r0, r6
 8001022:	2802      	cmp	r0, #2
 8001024:	d9f6      	bls.n	8001014 <HAL_RCC_OscConfig+0x1a0>
 8001026:	e76c      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001028:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 800102a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800102c:	00d5      	lsls	r5, r2, #3
 800102e:	d427      	bmi.n	8001080 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8001032:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001038:	641a      	str	r2, [r3, #64]	@ 0x40
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001044:	4d2e      	ldr	r5, [pc, #184]	@ (8001100 <HAL_RCC_OscConfig+0x28c>)
 8001046:	682b      	ldr	r3, [r5, #0]
 8001048:	05d8      	lsls	r0, r3, #23
 800104a:	d51b      	bpl.n	8001084 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	68a3      	ldr	r3, [r4, #8]
 800104e:	4d2b      	ldr	r5, [pc, #172]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 8001050:	2b01      	cmp	r3, #1
 8001052:	d127      	bne.n	80010a4 <HAL_RCC_OscConfig+0x230>
 8001054:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001060:	f7ff fb6e 	bl	8000740 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	4e25      	ldr	r6, [pc, #148]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001066:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001068:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800106a:	079a      	lsls	r2, r3, #30
 800106c:	d53f      	bpl.n	80010ee <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 800106e:	2f00      	cmp	r7, #0
 8001070:	f43f af16 	beq.w	8000ea0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001074:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <HAL_RCC_OscConfig+0x288>)
 8001076:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	e70f      	b.n	8000ea0 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001080:	2700      	movs	r7, #0
 8001082:	e7df      	b.n	8001044 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800108c:	f7ff fb58 	bl	8000740 <HAL_GetTick>
 8001090:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001092:	682b      	ldr	r3, [r5, #0]
 8001094:	05d9      	lsls	r1, r3, #23
 8001096:	d4d9      	bmi.n	800104c <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001098:	f7ff fb52 	bl	8000740 <HAL_GetTick>
 800109c:	1b80      	subs	r0, r0, r6
 800109e:	2864      	cmp	r0, #100	@ 0x64
 80010a0:	d9f7      	bls.n	8001092 <HAL_RCC_OscConfig+0x21e>
 80010a2:	e72e      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a4:	b9ab      	cbnz	r3, 80010d2 <HAL_RCC_OscConfig+0x25e>
 80010a6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a8:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	672b      	str	r3, [r5, #112]	@ 0x70
 80010b2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb41 	bl	8000740 <HAL_GetTick>
 80010be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80010c2:	079b      	lsls	r3, r3, #30
 80010c4:	d5d3      	bpl.n	800106e <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c6:	f7ff fb3b 	bl	8000740 <HAL_GetTick>
 80010ca:	1b80      	subs	r0, r0, r6
 80010cc:	4540      	cmp	r0, r8
 80010ce:	d9f7      	bls.n	80010c0 <HAL_RCC_OscConfig+0x24c>
 80010d0:	e717      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80010d6:	d103      	bne.n	80010e0 <HAL_RCC_OscConfig+0x26c>
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	672b      	str	r3, [r5, #112]	@ 0x70
 80010de:	e7b9      	b.n	8001054 <HAL_RCC_OscConfig+0x1e0>
 80010e0:	f023 0301 	bic.w	r3, r3, #1
 80010e4:	672b      	str	r3, [r5, #112]	@ 0x70
 80010e6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80010e8:	f023 0304 	bic.w	r3, r3, #4
 80010ec:	e7b5      	b.n	800105a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fb27 	bl	8000740 <HAL_GetTick>
 80010f2:	1b40      	subs	r0, r0, r5
 80010f4:	4540      	cmp	r0, r8
 80010f6:	d9b7      	bls.n	8001068 <HAL_RCC_OscConfig+0x1f4>
 80010f8:	e703      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001104:	4d3c      	ldr	r5, [pc, #240]	@ (80011f8 <HAL_RCC_OscConfig+0x384>)
 8001106:	68ab      	ldr	r3, [r5, #8]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d042      	beq.n	8001196 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8001110:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001112:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001118:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800111a:	d12f      	bne.n	800117c <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800111c:	f7ff fb10 	bl	8000740 <HAL_GetTick>
 8001120:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	0199      	lsls	r1, r3, #6
 8001126:	d423      	bmi.n	8001170 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001128:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800112c:	4313      	orrs	r3, r2
 800112e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001130:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001134:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001136:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800113a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800113c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001140:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001142:	0852      	lsrs	r2, r2, #1
 8001144:	3a01      	subs	r2, #1
 8001146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800114a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800114c:	682b      	ldr	r3, [r5, #0]
 800114e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001152:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001154:	f7ff faf4 	bl	8000740 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001158:	4d27      	ldr	r5, [pc, #156]	@ (80011f8 <HAL_RCC_OscConfig+0x384>)
        tickstart = HAL_GetTick();
 800115a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	019a      	lsls	r2, r3, #6
 8001160:	f53f aea2 	bmi.w	8000ea8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001164:	f7ff faec 	bl	8000740 <HAL_GetTick>
 8001168:	1b00      	subs	r0, r0, r4
 800116a:	2802      	cmp	r0, #2
 800116c:	d9f6      	bls.n	800115c <HAL_RCC_OscConfig+0x2e8>
 800116e:	e6c8      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001170:	f7ff fae6 	bl	8000740 <HAL_GetTick>
 8001174:	1b80      	subs	r0, r0, r6
 8001176:	2802      	cmp	r0, #2
 8001178:	d9d3      	bls.n	8001122 <HAL_RCC_OscConfig+0x2ae>
 800117a:	e6c2      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800117c:	f7ff fae0 	bl	8000740 <HAL_GetTick>
 8001180:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	019b      	lsls	r3, r3, #6
 8001186:	f57f ae8f 	bpl.w	8000ea8 <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118a:	f7ff fad9 	bl	8000740 <HAL_GetTick>
 800118e:	1b00      	subs	r0, r0, r4
 8001190:	2802      	cmp	r0, #2
 8001192:	d9f6      	bls.n	8001182 <HAL_RCC_OscConfig+0x30e>
 8001194:	e6b5      	b.n	8000f02 <HAL_RCC_OscConfig+0x8e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001196:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8001198:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800119a:	f43f ae6f 	beq.w	8000e7c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800119e:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011a2:	69e1      	ldr	r1, [r4, #28]
 80011a4:	428a      	cmp	r2, r1
 80011a6:	f47f ae69 	bne.w	8000e7c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ae:	6a21      	ldr	r1, [r4, #32]
 80011b0:	428a      	cmp	r2, r1
 80011b2:	f47f ae63 	bne.w	8000e7c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011b6:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80011bc:	401a      	ands	r2, r3
 80011be:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80011c2:	f47f ae5b 	bne.w	8000e7c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80011c6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80011c8:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80011cc:	0852      	lsrs	r2, r2, #1
 80011ce:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011d0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80011d4:	f47f ae52 	bne.w	8000e7c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011d8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80011dc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80011de:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80011e2:	f47f ae4b 	bne.w	8000e7c <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80011e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80011e8:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011ec:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80011f0:	bf14      	ite	ne
 80011f2:	2001      	movne	r0, #1
 80011f4:	2000      	moveq	r0, #0
 80011f6:	e642      	b.n	8000e7e <HAL_RCC_OscConfig+0xa>
 80011f8:	40023800 	.word	0x40023800

080011fc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011fc:	4913      	ldr	r1, [pc, #76]	@ (800124c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80011fe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001200:	688b      	ldr	r3, [r1, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b04      	cmp	r3, #4
 8001208:	d01b      	beq.n	8001242 <HAL_RCC_GetSysClockFreq+0x46>
 800120a:	2b08      	cmp	r3, #8
 800120c:	d11b      	bne.n	8001246 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800120e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001210:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001212:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001214:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001218:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800121c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001220:	bf1a      	itte	ne
 8001222:	480b      	ldrne	r0, [pc, #44]	@ (8001250 <HAL_RCC_GetSysClockFreq+0x54>)
 8001224:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001226:	480b      	ldreq	r0, [pc, #44]	@ (8001254 <HAL_RCC_GetSysClockFreq+0x58>)
 8001228:	fba1 0100 	umull	r0, r1, r1, r0
 800122c:	f7ff f804 	bl	8000238 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_RCC_GetSysClockFreq+0x50>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001238:	3301      	adds	r3, #1
 800123a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800123c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001240:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001242:	4803      	ldr	r0, [pc, #12]	@ (8001250 <HAL_RCC_GetSysClockFreq+0x54>)
 8001244:	e7fc      	b.n	8001240 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001246:	4803      	ldr	r0, [pc, #12]	@ (8001254 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001248:	e7fa      	b.n	8001240 <HAL_RCC_GetSysClockFreq+0x44>
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	007a1200 	.word	0x007a1200
 8001254:	00f42400 	.word	0x00f42400

08001258 <HAL_RCC_ClockConfig>:
{
 8001258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800125c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800125e:	4604      	mov	r4, r0
 8001260:	b910      	cbnz	r0, 8001268 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
}
 8001264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4a45      	ldr	r2, [pc, #276]	@ (8001380 <HAL_RCC_ClockConfig+0x128>)
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	428b      	cmp	r3, r1
 8001272:	d328      	bcc.n	80012c6 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001274:	6821      	ldr	r1, [r4, #0]
 8001276:	078f      	lsls	r7, r1, #30
 8001278:	d430      	bmi.n	80012dc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127a:	07c8      	lsls	r0, r1, #31
 800127c:	d443      	bmi.n	8001306 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800127e:	4a40      	ldr	r2, [pc, #256]	@ (8001380 <HAL_RCC_ClockConfig+0x128>)
 8001280:	6813      	ldr	r3, [r2, #0]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	42ab      	cmp	r3, r5
 8001288:	d866      	bhi.n	8001358 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800128a:	6822      	ldr	r2, [r4, #0]
 800128c:	0751      	lsls	r1, r2, #29
 800128e:	d46f      	bmi.n	8001370 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001290:	0713      	lsls	r3, r2, #28
 8001292:	d507      	bpl.n	80012a4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001294:	4a3b      	ldr	r2, [pc, #236]	@ (8001384 <HAL_RCC_ClockConfig+0x12c>)
 8001296:	6921      	ldr	r1, [r4, #16]
 8001298:	6893      	ldr	r3, [r2, #8]
 800129a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800129e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012a2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012a4:	f7ff ffaa 	bl	80011fc <HAL_RCC_GetSysClockFreq>
 80012a8:	4b36      	ldr	r3, [pc, #216]	@ (8001384 <HAL_RCC_ClockConfig+0x12c>)
 80012aa:	4a37      	ldr	r2, [pc, #220]	@ (8001388 <HAL_RCC_ClockConfig+0x130>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012b2:	5cd3      	ldrb	r3, [r2, r3]
 80012b4:	40d8      	lsrs	r0, r3
 80012b6:	4b35      	ldr	r3, [pc, #212]	@ (800138c <HAL_RCC_ClockConfig+0x134>)
 80012b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80012ba:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <HAL_RCC_ClockConfig+0x138>)
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	f7ff f9fb 	bl	80006b8 <HAL_InitTick>
  return HAL_OK;
 80012c2:	2000      	movs	r0, #0
 80012c4:	e7ce      	b.n	8001264 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f023 030f 	bic.w	r3, r3, #15
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d0:	6813      	ldr	r3, [r2, #0]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	428b      	cmp	r3, r1
 80012d8:	d1c3      	bne.n	8001262 <HAL_RCC_ClockConfig+0xa>
 80012da:	e7cb      	b.n	8001274 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012dc:	f011 0f04 	tst.w	r1, #4
 80012e0:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <HAL_RCC_ClockConfig+0x12c>)
 80012e2:	d003      	beq.n	80012ec <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80012ea:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ec:	070e      	lsls	r6, r1, #28
 80012ee:	d503      	bpl.n	80012f8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80012f6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	68a0      	ldr	r0, [r4, #8]
 80012fc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001300:	4302      	orrs	r2, r0
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	e7b9      	b.n	800127a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001306:	6861      	ldr	r1, [r4, #4]
 8001308:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <HAL_RCC_ClockConfig+0x12c>)
 800130a:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130c:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130e:	d11b      	bne.n	8001348 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001310:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	d0a5      	beq.n	8001262 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001316:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001318:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131c:	4f19      	ldr	r7, [pc, #100]	@ (8001384 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800131e:	f022 0203 	bic.w	r2, r2, #3
 8001322:	430a      	orrs	r2, r1
 8001324:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001326:	f7ff fa0b 	bl	8000740 <HAL_GetTick>
 800132a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	6862      	ldr	r2, [r4, #4]
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001338:	d0a1      	beq.n	800127e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800133a:	f7ff fa01 	bl	8000740 <HAL_GetTick>
 800133e:	1b80      	subs	r0, r0, r6
 8001340:	4540      	cmp	r0, r8
 8001342:	d9f3      	bls.n	800132c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001344:	2003      	movs	r0, #3
 8001346:	e78d      	b.n	8001264 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001348:	2902      	cmp	r1, #2
 800134a:	d102      	bne.n	8001352 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001350:	e7e0      	b.n	8001314 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	f012 0f02 	tst.w	r2, #2
 8001356:	e7dd      	b.n	8001314 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001358:	6813      	ldr	r3, [r2, #0]
 800135a:	f023 030f 	bic.w	r3, r3, #15
 800135e:	432b      	orrs	r3, r5
 8001360:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001362:	6813      	ldr	r3, [r2, #0]
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	42ab      	cmp	r3, r5
 800136a:	f47f af7a 	bne.w	8001262 <HAL_RCC_ClockConfig+0xa>
 800136e:	e78c      	b.n	800128a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001370:	4904      	ldr	r1, [pc, #16]	@ (8001384 <HAL_RCC_ClockConfig+0x12c>)
 8001372:	68e0      	ldr	r0, [r4, #12]
 8001374:	688b      	ldr	r3, [r1, #8]
 8001376:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800137a:	4303      	orrs	r3, r0
 800137c:	608b      	str	r3, [r1, #8]
 800137e:	e787      	b.n	8001290 <HAL_RCC_ClockConfig+0x38>
 8001380:	40023c00 	.word	0x40023c00
 8001384:	40023800 	.word	0x40023800
 8001388:	080020b2 	.word	0x080020b2
 800138c:	20000014 	.word	0x20000014
 8001390:	2000001c 	.word	0x2000001c

08001394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001394:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001398:	461f      	mov	r7, r3
 800139a:	4689      	mov	r9, r1
 800139c:	4690      	mov	r8, r2
 800139e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80013a0:	f7ff f9ce 	bl	8000740 <HAL_GetTick>
 80013a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80013a6:	443d      	add	r5, r7
 80013a8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80013aa:	f7ff f9c9 	bl	8000740 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80013ae:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <SPI_WaitFlagStateUntilTimeout+0xb4>)
  tmp_tickstart = HAL_GetTick();
 80013b0:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80013b2:	681e      	ldr	r6, [r3, #0]
 80013b4:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 80013b8:	436e      	muls	r6, r5
 80013ba:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80013bc:	6822      	ldr	r2, [r4, #0]
 80013be:	6893      	ldr	r3, [r2, #8]
 80013c0:	ea39 0303 	bics.w	r3, r9, r3
 80013c4:	bf0c      	ite	eq
 80013c6:	2301      	moveq	r3, #1
 80013c8:	2300      	movne	r3, #0
 80013ca:	4543      	cmp	r3, r8
 80013cc:	d101      	bne.n	80013d2 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 80013ce:	2000      	movs	r0, #0
 80013d0:	e02e      	b.n	8001430 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 80013d2:	1c7b      	adds	r3, r7, #1
 80013d4:	d0f3      	beq.n	80013be <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80013d6:	f7ff f9b3 	bl	8000740 <HAL_GetTick>
 80013da:	eba0 000a 	sub.w	r0, r0, sl
 80013de:	42a8      	cmp	r0, r5
 80013e0:	d329      	bcc.n	8001436 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80013ea:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013ec:	6862      	ldr	r2, [r4, #4]
 80013ee:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80013f2:	d10a      	bne.n	800140a <SPI_WaitFlagStateUntilTimeout+0x76>
 80013f4:	68a2      	ldr	r2, [r4, #8]
 80013f6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80013fa:	d002      	beq.n	8001402 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80013fc:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8001400:	d103      	bne.n	800140a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001408:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800140a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800140c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001410:	d107      	bne.n	8001422 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001420:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001422:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8001426:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800142a:	2300      	movs	r3, #0
 800142c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8001430:	b002      	add	sp, #8
 8001432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8001436:	9a01      	ldr	r2, [sp, #4]
      count--;
 8001438:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 800143a:	2a00      	cmp	r2, #0
      count--;
 800143c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001440:	bf08      	it	eq
 8001442:	4615      	moveq	r5, r2
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	e7b9      	b.n	80013bc <SPI_WaitFlagStateUntilTimeout+0x28>
 8001448:	20000014 	.word	0x20000014

0800144c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800144c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001450:	4699      	mov	r9, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001452:	2300      	movs	r3, #0
{
 8001454:	4604      	mov	r4, r0
 8001456:	4688      	mov	r8, r1
  __IO uint8_t  tmpreg8 = 0;
 8001458:	f88d 3003 	strb.w	r3, [sp, #3]
{
 800145c:	4617      	mov	r7, r2

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800145e:	f7ff f96f 	bl	8000740 <HAL_GetTick>
 8001462:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8001464:	444d      	add	r5, r9
 8001466:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001468:	f7ff f96a 	bl	8000740 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800146c:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <SPI_WaitFifoStateUntilTimeout+0xd4>)
  tmp_tickstart = HAL_GetTick();
 800146e:	4682      	mov	sl, r0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001470:	f8d4 b000 	ldr.w	fp, [r4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001474:	681e      	ldr	r6, [r3, #0]
 8001476:	2323      	movs	r3, #35	@ 0x23
 8001478:	435e      	muls	r6, r3
 800147a:	0d36      	lsrs	r6, r6, #20
 800147c:	436e      	muls	r6, r5
 800147e:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8001480:	6822      	ldr	r2, [r4, #0]
 8001482:	6893      	ldr	r3, [r2, #8]
 8001484:	ea03 0308 	and.w	r3, r3, r8
 8001488:	42bb      	cmp	r3, r7
 800148a:	d101      	bne.n	8001490 <SPI_WaitFifoStateUntilTimeout+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 800148c:	2000      	movs	r0, #0
 800148e:	e03a      	b.n	8001506 <SPI_WaitFifoStateUntilTimeout+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001490:	f5b8 6fc0 	cmp.w	r8, #1536	@ 0x600
 8001494:	d107      	bne.n	80014a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8001496:	b937      	cbnz	r7, 80014a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
      tmpreg8 = *ptmpreg8;
 8001498:	f89b 300c 	ldrb.w	r3, [fp, #12]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80014a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 80014a6:	f1b9 3fff 	cmp.w	r9, #4294967295
 80014aa:	d0ea      	beq.n	8001482 <SPI_WaitFifoStateUntilTimeout+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80014ac:	f7ff f948 	bl	8000740 <HAL_GetTick>
 80014b0:	eba0 000a 	sub.w	r0, r0, sl
 80014b4:	42a8      	cmp	r0, r5
 80014b6:	d329      	bcc.n	800150c <SPI_WaitFifoStateUntilTimeout+0xc0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80014c0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014c2:	6862      	ldr	r2, [r4, #4]
 80014c4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80014c8:	d10a      	bne.n	80014e0 <SPI_WaitFifoStateUntilTimeout+0x94>
 80014ca:	68a2      	ldr	r2, [r4, #8]
 80014cc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80014d0:	d002      	beq.n	80014d8 <SPI_WaitFifoStateUntilTimeout+0x8c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80014d2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80014d6:	d103      	bne.n	80014e0 <SPI_WaitFifoStateUntilTimeout+0x94>
          __HAL_SPI_DISABLE(hspi);
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014de:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80014e0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80014e2:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80014e6:	d107      	bne.n	80014f8 <SPI_WaitFifoStateUntilTimeout+0xac>
          SPI_RESET_CRC(hspi);
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014f6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80014f8:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 80014fa:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80014fc:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001500:	2300      	movs	r3, #0
 8001502:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8001506:	b003      	add	sp, #12
 8001508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (count == 0U)
 800150c:	9a01      	ldr	r2, [sp, #4]
      count--;
 800150e:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8001510:	2a00      	cmp	r2, #0
      count--;
 8001512:	f103 33ff 	add.w	r3, r3, #4294967295
 8001516:	bf08      	it	eq
 8001518:	4615      	moveq	r5, r2
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	e7b0      	b.n	8001480 <SPI_WaitFifoStateUntilTimeout+0x34>
 800151e:	bf00      	nop
 8001520:	20000014 	.word	0x20000014

08001524 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001524:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001526:	460b      	mov	r3, r1
 8001528:	9200      	str	r2, [sp, #0]
{
 800152a:	460d      	mov	r5, r1
 800152c:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800152e:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001532:	2200      	movs	r2, #0
{
 8001534:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001536:	f7ff ff89 	bl	800144c <SPI_WaitFifoStateUntilTimeout>
 800153a:	4602      	mov	r2, r0
 800153c:	b130      	cbz	r0, 800154c <SPI_EndRxTxTransaction+0x28>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800153e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	6623      	str	r3, [r4, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8001548:	b004      	add	sp, #16
 800154a:	bd70      	pop	{r4, r5, r6, pc}
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <SPI_EndRxTxTransaction+0x80>)
 800154e:	4916      	ldr	r1, [pc, #88]	@ (80015a8 <SPI_EndRxTxTransaction+0x84>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800155a:	434b      	muls	r3, r1
 800155c:	9303      	str	r3, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800155e:	6863      	ldr	r3, [r4, #4]
 8001560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001564:	d112      	bne.n	800158c <SPI_EndRxTxTransaction+0x68>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001566:	462b      	mov	r3, r5
 8001568:	2180      	movs	r1, #128	@ 0x80
 800156a:	4620      	mov	r0, r4
 800156c:	9600      	str	r6, [sp, #0]
 800156e:	f7ff ff11 	bl	8001394 <SPI_WaitFlagStateUntilTimeout>
 8001572:	2800      	cmp	r0, #0
 8001574:	d1e3      	bne.n	800153e <SPI_EndRxTxTransaction+0x1a>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001576:	462b      	mov	r3, r5
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800157e:	4620      	mov	r0, r4
 8001580:	9600      	str	r6, [sp, #0]
 8001582:	f7ff ff63 	bl	800144c <SPI_WaitFifoStateUntilTimeout>
 8001586:	2800      	cmp	r0, #0
 8001588:	d0de      	beq.n	8001548 <SPI_EndRxTxTransaction+0x24>
 800158a:	e7d8      	b.n	800153e <SPI_EndRxTxTransaction+0x1a>
      if (count == 0U)
 800158c:	9b03      	ldr	r3, [sp, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f1      	beq.n	8001576 <SPI_EndRxTxTransaction+0x52>
      count--;
 8001592:	9b03      	ldr	r3, [sp, #12]
 8001594:	3b01      	subs	r3, #1
 8001596:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	d4f5      	bmi.n	800158c <SPI_EndRxTxTransaction+0x68>
 80015a0:	e7e9      	b.n	8001576 <SPI_EndRxTxTransaction+0x52>
 80015a2:	bf00      	nop
 80015a4:	20000014 	.word	0x20000014
 80015a8:	016e3600 	.word	0x016e3600

080015ac <SPI_EndRxTransaction>:
{
 80015ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015ae:	6843      	ldr	r3, [r0, #4]
{
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80015ba:	d012      	beq.n	80015e2 <SPI_EndRxTransaction+0x36>
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80015bc:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <SPI_EndRxTransaction+0x9c>)
 80015be:	4a23      	ldr	r2, [pc, #140]	@ (800164c <SPI_EndRxTransaction+0xa0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80015c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ca:	4353      	muls	r3, r2
 80015cc:	9303      	str	r3, [sp, #12]
      if (count == 0U)
 80015ce:	9b03      	ldr	r3, [sp, #12]
 80015d0:	b1fb      	cbz	r3, 8001612 <SPI_EndRxTransaction+0x66>
      count--;
 80015d2:	9b03      	ldr	r3, [sp, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	d4f6      	bmi.n	80015ce <SPI_EndRxTransaction+0x22>
 80015e0:	e017      	b.n	8001612 <SPI_EndRxTransaction+0x66>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015e2:	6883      	ldr	r3, [r0, #8]
 80015e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015e8:	d002      	beq.n	80015f0 <SPI_EndRxTransaction+0x44>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ee:	d104      	bne.n	80015fa <SPI_EndRxTransaction+0x4e>
    __HAL_SPI_DISABLE(hspi);
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	6813      	ldr	r3, [r2, #0]
 80015f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80015f8:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80015fa:	462b      	mov	r3, r5
 80015fc:	2200      	movs	r2, #0
 80015fe:	2180      	movs	r1, #128	@ 0x80
 8001600:	4620      	mov	r0, r4
 8001602:	9600      	str	r6, [sp, #0]
 8001604:	f7ff fec6 	bl	8001394 <SPI_WaitFlagStateUntilTimeout>
 8001608:	b9b8      	cbnz	r0, 800163a <SPI_EndRxTransaction+0x8e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800160a:	6863      	ldr	r3, [r4, #4]
 800160c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001610:	d002      	beq.n	8001618 <SPI_EndRxTransaction+0x6c>
  return HAL_OK;
 8001612:	2000      	movs	r0, #0
}
 8001614:	b004      	add	sp, #16
 8001616:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001618:	68a3      	ldr	r3, [r4, #8]
 800161a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800161e:	d002      	beq.n	8001626 <SPI_EndRxTransaction+0x7a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001624:	d1f5      	bne.n	8001612 <SPI_EndRxTransaction+0x66>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001626:	462b      	mov	r3, r5
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800162e:	4620      	mov	r0, r4
 8001630:	9600      	str	r6, [sp, #0]
 8001632:	f7ff ff0b 	bl	800144c <SPI_WaitFifoStateUntilTimeout>
 8001636:	2800      	cmp	r0, #0
 8001638:	d0eb      	beq.n	8001612 <SPI_EndRxTransaction+0x66>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800163a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 800163c:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800163e:	f043 0320 	orr.w	r3, r3, #32
 8001642:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 8001644:	e7e6      	b.n	8001614 <SPI_EndRxTransaction+0x68>
 8001646:	bf00      	nop
 8001648:	20000014 	.word	0x20000014
 800164c:	016e3600 	.word	0x016e3600

08001650 <HAL_SPI_Init>:
{
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8001652:	4604      	mov	r4, r0
 8001654:	2800      	cmp	r0, #0
 8001656:	f000 808a 	beq.w	800176e <HAL_SPI_Init+0x11e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800165a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800165c:	2b00      	cmp	r3, #0
 800165e:	d157      	bne.n	8001710 <HAL_SPI_Init+0xc0>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001660:	6842      	ldr	r2, [r0, #4]
 8001662:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8001666:	d000      	beq.n	800166a <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001668:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800166a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800166e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001672:	b923      	cbnz	r3, 800167e <HAL_SPI_Init+0x2e>
    HAL_SPI_MspInit(hspi);
 8001674:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001676:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 800167a:	f000 fc1f 	bl	8001ebc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800167e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001680:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001682:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001684:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001688:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800168a:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 800168e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001692:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	d93e      	bls.n	8001718 <HAL_SPI_Init+0xc8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800169a:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800169c:	f5b0 6f70 	cmp.w	r0, #3840	@ 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a0:	bf18      	it	ne
 80016a2:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016a4:	68a7      	ldr	r7, [r4, #8]
 80016a6:	6863      	ldr	r3, [r4, #4]
 80016a8:	f407 4704 	and.w	r7, r7, #33792	@ 0x8400
 80016ac:	69a1      	ldr	r1, [r4, #24]
 80016ae:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80016b2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80016b4:	433b      	orrs	r3, r7
 80016b6:	6927      	ldr	r7, [r4, #16]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016b8:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016bc:	f007 0702 	and.w	r7, r7, #2
 80016c0:	ea43 0307 	orr.w	r3, r3, r7
 80016c4:	6967      	ldr	r7, [r4, #20]
 80016c6:	f007 0701 	and.w	r7, r7, #1
 80016ca:	ea43 0307 	orr.w	r3, r3, r7
 80016ce:	f401 7700 	and.w	r7, r1, #512	@ 0x200
 80016d2:	ea43 0307 	orr.w	r3, r3, r7
 80016d6:	69e7      	ldr	r7, [r4, #28]
 80016d8:	f007 0738 	and.w	r7, r7, #56	@ 0x38
 80016dc:	ea43 0307 	orr.w	r3, r3, r7
 80016e0:	6a27      	ldr	r7, [r4, #32]
 80016e2:	f007 0780 	and.w	r7, r7, #128	@ 0x80
 80016e6:	ea43 0307 	orr.w	r3, r3, r7
 80016ea:	f406 5700 	and.w	r7, r6, #8192	@ 0x2000
 80016ee:	ea43 0307 	orr.w	r3, r3, r7
 80016f2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016f4:	d115      	bne.n	8001722 <HAL_SPI_Init+0xd2>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80016f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d135      	bne.n	8001768 <HAL_SPI_Init+0x118>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016fc:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8001700:	d90d      	bls.n	800171e <HAL_SPI_Init+0xce>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001702:	2302      	movs	r3, #2
 8001704:	6323      	str	r3, [r4, #48]	@ 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8001706:	6813      	ldr	r3, [r2, #0]
 8001708:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e008      	b.n	8001722 <HAL_SPI_Init+0xd2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001710:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001716:	e7a8      	b.n	800166a <HAL_SPI_Init+0x1a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001718:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800171c:	e7c0      	b.n	80016a0 <HAL_SPI_Init+0x50>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800171e:	2301      	movs	r3, #1
 8001720:	6323      	str	r3, [r4, #48]	@ 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001722:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001724:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8001728:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 800172a:	0c09      	lsrs	r1, r1, #16
 800172c:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001730:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001734:	f007 0708 	and.w	r7, r7, #8
 8001738:	f001 0104 	and.w	r1, r1, #4
 800173c:	ea43 0307 	orr.w	r3, r3, r7
 8001740:	ea43 0300 	orr.w	r3, r3, r0
 8001744:	ea43 0301 	orr.w	r3, r3, r1
 8001748:	ea43 0305 	orr.w	r3, r3, r5
 800174c:	6053      	str	r3, [r2, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800174e:	d101      	bne.n	8001754 <HAL_SPI_Init+0x104>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001750:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8001752:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001754:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001756:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001758:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800175c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800175e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001760:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001762:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8001766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8001768:	2b02      	cmp	r3, #2
 800176a:	d1da      	bne.n	8001722 <HAL_SPI_Init+0xd2>
 800176c:	e7cb      	b.n	8001706 <HAL_SPI_Init+0xb6>
    return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
 8001770:	e7f9      	b.n	8001766 <HAL_SPI_Init+0x116>
	...

08001774 <HAL_SPI_TransmitReceive_DMA>:
{
 8001774:	b570      	push	{r4, r5, r6, lr}
 8001776:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001778:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
 800177c:	2801      	cmp	r0, #1
 800177e:	f000 80d0 	beq.w	8001922 <HAL_SPI_TransmitReceive_DMA+0x1ae>
 8001782:	2001      	movs	r0, #1
  tmp_mode            = hspi->Init.Mode;
 8001784:	6866      	ldr	r6, [r4, #4]
  __HAL_LOCK(hspi);
 8001786:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  tmp_state           = hspi->State;
 800178a:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800178e:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8001790:	b2c5      	uxtb	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001792:	d00a      	beq.n	80017aa <HAL_SPI_TransmitReceive_DMA+0x36>
 8001794:	f5b6 7f82 	cmp.w	r6, #260	@ 0x104
 8001798:	f040 80c1 	bne.w	800191e <HAL_SPI_TransmitReceive_DMA+0x1aa>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800179c:	68a0      	ldr	r0, [r4, #8]
 800179e:	2800      	cmp	r0, #0
 80017a0:	f040 80bd 	bne.w	800191e <HAL_SPI_TransmitReceive_DMA+0x1aa>
 80017a4:	2d04      	cmp	r5, #4
 80017a6:	f040 80ba 	bne.w	800191e <HAL_SPI_TransmitReceive_DMA+0x1aa>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80017aa:	2900      	cmp	r1, #0
 80017ac:	d051      	beq.n	8001852 <HAL_SPI_TransmitReceive_DMA+0xde>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d04f      	beq.n	8001852 <HAL_SPI_TransmitReceive_DMA+0xde>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d04d      	beq.n	8001852 <HAL_SPI_TransmitReceive_DMA+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80017b6:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
 80017ba:	2804      	cmp	r0, #4
 80017bc:	d002      	beq.n	80017c4 <HAL_SPI_TransmitReceive_DMA+0x50>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80017be:	2005      	movs	r0, #5
 80017c0:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017c4:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017c6:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80017c8:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017ca:	6620      	str	r0, [r4, #96]	@ 0x60
    SPI_RESET_CRC(hspi);
 80017cc:	6821      	ldr	r1, [r4, #0]
  hspi->TxXferCount = Size;
 80017ce:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80017d0:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80017d2:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80017d6:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80017da:	e9c4 0013 	strd	r0, r0, [r4, #76]	@ 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017de:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80017e0:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 80017e4:	d107      	bne.n	80017f6 <HAL_SPI_TransmitReceive_DMA+0x82>
    SPI_RESET_CRC(hspi);
 80017e6:	6808      	ldr	r0, [r1, #0]
 80017e8:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 80017ec:	6008      	str	r0, [r1, #0]
 80017ee:	6808      	ldr	r0, [r1, #0]
 80017f0:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 80017f4:	6008      	str	r0, [r1, #0]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80017f6:	6848      	ldr	r0, [r1, #4]
 80017f8:	f420 40c0 	bic.w	r0, r0, #24576	@ 0x6000
 80017fc:	6048      	str	r0, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017fe:	68e0      	ldr	r0, [r4, #12]
 8001800:	f5b0 6fe0 	cmp.w	r0, #1792	@ 0x700
 8001804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001806:	d929      	bls.n	800185c <HAL_SPI_TransmitReceive_DMA+0xe8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001808:	684b      	ldr	r3, [r1, #4]
 800180a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800180e:	604b      	str	r3, [r1, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001810:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001814:	310c      	adds	r1, #12
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001816:	4e44      	ldr	r6, [pc, #272]	@ (8001928 <HAL_SPI_TransmitReceive_DMA+0x1b4>)
 8001818:	2b04      	cmp	r3, #4
 800181a:	4b44      	ldr	r3, [pc, #272]	@ (800192c <HAL_SPI_TransmitReceive_DMA+0x1b8>)
 800181c:	4d44      	ldr	r5, [pc, #272]	@ (8001930 <HAL_SPI_TransmitReceive_DMA+0x1bc>)
 800181e:	bf18      	it	ne
 8001820:	461d      	movne	r5, r3
 8001822:	4b44      	ldr	r3, [pc, #272]	@ (8001934 <HAL_SPI_TransmitReceive_DMA+0x1c0>)
 8001824:	bf18      	it	ne
 8001826:	4633      	movne	r3, r6
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001828:	e9c0 350f 	strd	r3, r5, [r0, #60]	@ 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800182c:	4b42      	ldr	r3, [pc, #264]	@ (8001938 <HAL_SPI_TransmitReceive_DMA+0x1c4>)
 800182e:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8001830:	2300      	movs	r3, #0
 8001832:	6503      	str	r3, [r0, #80]	@ 0x50
                                 hspi->RxXferCount))
 8001834:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001838:	b29b      	uxth	r3, r3
 800183a:	f7ff f8dd 	bl	80009f8 <HAL_DMA_Start_IT>
 800183e:	4603      	mov	r3, r0
 8001840:	2800      	cmp	r0, #0
 8001842:	d048      	beq.n	80018d6 <HAL_SPI_TransmitReceive_DMA+0x162>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001844:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800184c:	2301      	movs	r3, #1
 800184e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    errorcode = HAL_ERROR;
 8001852:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8001854:	2300      	movs	r3, #0
 8001856:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 800185a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800185c:	684d      	ldr	r5, [r1, #4]
 800185e:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
 8001862:	604d      	str	r5, [r1, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001864:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8001866:	69ad      	ldr	r5, [r5, #24]
 8001868:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 800186c:	d10a      	bne.n	8001884 <HAL_SPI_TransmitReceive_DMA+0x110>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800186e:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001872:	684b      	ldr	r3, [r1, #4]
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8001874:	d11e      	bne.n	80018b4 <HAL_SPI_TransmitReceive_DMA+0x140>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800187a:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800187c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800187e:	f3c3 034e 	ubfx	r3, r3, #1, #15
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8001882:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001884:	6983      	ldr	r3, [r0, #24]
 8001886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800188a:	d1c1      	bne.n	8001810 <HAL_SPI_TransmitReceive_DMA+0x9c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800188c:	684b      	ldr	r3, [r1, #4]
 800188e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001892:	604b      	str	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8001894:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8001898:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800189c:	684b      	ldr	r3, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800189e:	d111      	bne.n	80018c4 <HAL_SPI_TransmitReceive_DMA+0x150>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80018a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80018a4:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80018a6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80018aa:	f3c3 034e 	ubfx	r3, r3, #1, #15
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80018ae:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 80018b2:	e7ad      	b.n	8001810 <HAL_SPI_TransmitReceive_DMA+0x9c>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b8:	604b      	str	r3, [r1, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80018ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80018bc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80018c0:	3301      	adds	r3, #1
 80018c2:	e7de      	b.n	8001882 <HAL_SPI_TransmitReceive_DMA+0x10e>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80018c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018c8:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80018ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80018ce:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80018d2:	3301      	adds	r3, #1
 80018d4:	e7eb      	b.n	80018ae <HAL_SPI_TransmitReceive_DMA+0x13a>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80018d6:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80018d8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80018da:	6851      	ldr	r1, [r2, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80018dc:	320c      	adds	r2, #12
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80018de:	f041 0101 	orr.w	r1, r1, #1
 80018e2:	f842 1c08 	str.w	r1, [r2, #-8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80018e6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  hspi->hdmatx->XferCpltCallback     = NULL;
 80018e8:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80018ec:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
                                 hspi->TxXferCount))
 80018f0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f7ff f880 	bl	80009f8 <HAL_DMA_Start_IT>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d1a3      	bne.n	8001844 <HAL_SPI_TransmitReceive_DMA+0xd0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	0652      	lsls	r2, r2, #25
 8001902:	d403      	bmi.n	800190c <HAL_SPI_TransmitReceive_DMA+0x198>
    __HAL_SPI_ENABLE(hspi);
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800190a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	f042 0220 	orr.w	r2, r2, #32
 8001912:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	f042 0202 	orr.w	r2, r2, #2
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	e79a      	b.n	8001854 <HAL_SPI_TransmitReceive_DMA+0xe0>
    errorcode = HAL_BUSY;
 800191e:	2002      	movs	r0, #2
 8001920:	e798      	b.n	8001854 <HAL_SPI_TransmitReceive_DMA+0xe0>
  __HAL_LOCK(hspi);
 8001922:	2002      	movs	r0, #2
 8001924:	e799      	b.n	800185a <HAL_SPI_TransmitReceive_DMA+0xe6>
 8001926:	bf00      	nop
 8001928:	08001a6f 	.word	0x08001a6f
 800192c:	0800194d 	.word	0x0800194d
 8001930:	08001941 	.word	0x08001941
 8001934:	08001979 	.word	0x08001979
 8001938:	08001957 	.word	0x08001957

0800193c <HAL_SPI_RxCpltCallback>:
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
 800193c:	4770      	bx	lr

0800193e <HAL_SPI_RxHalfCpltCallback>:
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 800193e:	4770      	bx	lr

08001940 <SPI_DMAHalfReceiveCplt>:
  HAL_SPI_RxHalfCpltCallback(hspi);
 8001940:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001942:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8001944:	f7ff fffb 	bl	800193e <HAL_SPI_RxHalfCpltCallback>
}
 8001948:	bd08      	pop	{r3, pc}

0800194a <HAL_SPI_TxRxHalfCpltCallback>:
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 800194a:	4770      	bx	lr

0800194c <SPI_DMAHalfTransmitReceiveCplt>:
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800194c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800194e:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001950:	f7ff fffb 	bl	800194a <HAL_SPI_TxRxHalfCpltCallback>
}
 8001954:	bd08      	pop	{r3, pc}

08001956 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001956:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001958:	6802      	ldr	r2, [r0, #0]
{
 800195a:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800195c:	6853      	ldr	r3, [r2, #4]
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001964:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	6603      	str	r3, [r0, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800196c:	2301      	movs	r3, #1
 800196e:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8001972:	f000 fa9b 	bl	8001eac <HAL_SPI_ErrorCallback>
}
 8001976:	bd08      	pop	{r3, pc}

08001978 <SPI_DMAReceiveCplt>:
{
 8001978:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  __IO uint32_t tmpreg = 0U;
 800197a:	2300      	movs	r3, #0
{
 800197c:	4606      	mov	r6, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800197e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __IO uint32_t tmpreg = 0U;
 8001980:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8001982:	f88d 300b 	strb.w	r3, [sp, #11]
  tickstart = HAL_GetTick();
 8001986:	f7fe fedb 	bl	8000740 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800198a:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 800198c:	4605      	mov	r5, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	05da      	lsls	r2, r3, #23
 8001992:	d468      	bmi.n	8001a66 <SPI_DMAReceiveCplt+0xee>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001994:	6822      	ldr	r2, [r4, #0]
 8001996:	6853      	ldr	r3, [r2, #4]
 8001998:	f023 0320 	bic.w	r3, r3, #32
 800199c:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800199e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80019a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019a4:	d113      	bne.n	80019ce <SPI_DMAReceiveCplt+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80019a6:	2201      	movs	r2, #1
 80019a8:	9000      	str	r0, [sp, #0]
 80019aa:	2364      	movs	r3, #100	@ 0x64
 80019ac:	4620      	mov	r0, r4
 80019ae:	4611      	mov	r1, r2
 80019b0:	f7ff fcf0 	bl	8001394 <SPI_WaitFlagStateUntilTimeout>
 80019b4:	b118      	cbz	r0, 80019be <SPI_DMAReceiveCplt+0x46>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80019b6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6623      	str	r3, [r4, #96]	@ 0x60
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019be:	68e3      	ldr	r3, [r4, #12]
        tmpreg = READ_REG(hspi->Instance->DR);
 80019c0:	6826      	ldr	r6, [r4, #0]
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80019c6:	d92e      	bls.n	8001a26 <SPI_DMAReceiveCplt+0xae>
        tmpreg = READ_REG(hspi->Instance->DR);
 80019c8:	68f3      	ldr	r3, [r6, #12]
 80019ca:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 80019cc:	9b03      	ldr	r3, [sp, #12]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80019ce:	68a2      	ldr	r2, [r4, #8]
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80019d0:	6823      	ldr	r3, [r4, #0]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d143      	bne.n	8001a5e <SPI_DMAReceiveCplt+0xe6>
 80019d6:	6862      	ldr	r2, [r4, #4]
 80019d8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80019dc:	d13f      	bne.n	8001a5e <SPI_DMAReceiveCplt+0xe6>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	f022 0203 	bic.w	r2, r2, #3
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80019e4:	605a      	str	r2, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80019e6:	2164      	movs	r1, #100	@ 0x64
 80019e8:	462a      	mov	r2, r5
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff fdde 	bl	80015ac <SPI_EndRxTransaction>
 80019f0:	b108      	cbz	r0, 80019f6 <SPI_DMAReceiveCplt+0x7e>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019f2:	2320      	movs	r3, #32
 80019f4:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->RxXferCount = 0U;
 80019f6:	2300      	movs	r3, #0
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80019f8:	6822      	ldr	r2, [r4, #0]
    hspi->RxXferCount = 0U;
 80019fa:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8001a04:	6893      	ldr	r3, [r2, #8]
 8001a06:	06db      	lsls	r3, r3, #27
 8001a08:	d506      	bpl.n	8001a18 <SPI_DMAReceiveCplt+0xa0>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001a0a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6623      	str	r3, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8001a12:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8001a16:	6093      	str	r3, [r2, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a18:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001a1a:	b323      	cbz	r3, 8001a66 <SPI_DMAReceiveCplt+0xee>
      HAL_SPI_ErrorCallback(hspi);
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f000 fa45 	bl	8001eac <HAL_SPI_ErrorCallback>
}
 8001a22:	b004      	add	sp, #16
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
        tmpreg8 = *ptmpreg8;
 8001a26:	7b33      	ldrb	r3, [r6, #12]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8001a2e:	f89d 300b 	ldrb.w	r3, [sp, #11]
        if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8001a32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d1ca      	bne.n	80019ce <SPI_DMAReceiveCplt+0x56>
          if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2364      	movs	r3, #100	@ 0x64
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	9500      	str	r5, [sp, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	f7ff fca7 	bl	8001394 <SPI_WaitFlagStateUntilTimeout>
 8001a46:	b118      	cbz	r0, 8001a50 <SPI_DMAReceiveCplt+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001a48:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	6623      	str	r3, [r4, #96]	@ 0x60
          tmpreg8 = *ptmpreg8;
 8001a50:	7b33      	ldrb	r3, [r6, #12]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f88d 300b 	strb.w	r3, [sp, #11]
          UNUSED(tmpreg8);
 8001a58:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001a5c:	e7b7      	b.n	80019ce <SPI_DMAReceiveCplt+0x56>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	e7be      	b.n	80019e4 <SPI_DMAReceiveCplt+0x6c>
  HAL_SPI_RxCpltCallback(hspi);
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff ff68 	bl	800193c <HAL_SPI_RxCpltCallback>
 8001a6c:	e7d9      	b.n	8001a22 <SPI_DMAReceiveCplt+0xaa>

08001a6e <SPI_DMATransmitReceiveCplt>:
{
 8001a6e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  __IO uint32_t tmpreg = 0U;
 8001a70:	2300      	movs	r3, #0
{
 8001a72:	4606      	mov	r6, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001a74:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  __IO uint32_t tmpreg = 0U;
 8001a76:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8001a78:	f88d 300b 	strb.w	r3, [sp, #11]
  tickstart = HAL_GetTick();
 8001a7c:	f7fe fe60 	bl	8000740 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8001a80:	6833      	ldr	r3, [r6, #0]
  tickstart = HAL_GetTick();
 8001a82:	4605      	mov	r5, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	05d9      	lsls	r1, r3, #23
 8001a88:	d45e      	bmi.n	8001b48 <SPI_DMATransmitReceiveCplt+0xda>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001a8a:	6822      	ldr	r2, [r4, #0]
 8001a8c:	6853      	ldr	r3, [r2, #4]
 8001a8e:	f023 0320 	bic.w	r3, r3, #32
 8001a92:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a94:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a9a:	d11b      	bne.n	8001ad4 <SPI_DMATransmitReceiveCplt+0x66>
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BIT))
 8001a9c:	68e3      	ldr	r3, [r4, #12]
 8001a9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001aa2:	d13e      	bne.n	8001b22 <SPI_DMATransmitReceiveCplt+0xb4>
 8001aa4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d13b      	bne.n	8001b22 <SPI_DMATransmitReceiveCplt+0xb4>
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT_TIMEOUT,
 8001aaa:	9000      	str	r0, [sp, #0]
 8001aac:	2364      	movs	r3, #100	@ 0x64
 8001aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff fcc8 	bl	800144c <SPI_WaitFifoStateUntilTimeout>
 8001abc:	b118      	cbz	r0, 8001ac6 <SPI_DMATransmitReceiveCplt+0x58>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001abe:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6623      	str	r3, [r4, #96]	@ 0x60
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001ac6:	6823      	ldr	r3, [r4, #0]
        tmpreg8 = *ptmpreg8;
 8001ac8:	7b1b      	ldrb	r3, [r3, #12]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8001ad0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001ad4:	462a      	mov	r2, r5
 8001ad6:	2164      	movs	r1, #100	@ 0x64
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff fd23 	bl	8001524 <SPI_EndRxTxTransaction>
 8001ade:	b118      	cbz	r0, 8001ae8 <SPI_DMATransmitReceiveCplt+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ae0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001ae2:	f043 0320 	orr.w	r3, r3, #32
 8001ae6:	6623      	str	r3, [r4, #96]	@ 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	f022 0203 	bic.w	r2, r2, #3
 8001af0:	605a      	str	r2, [r3, #4]
    hspi->TxXferCount = 0U;
 8001af2:	2200      	movs	r2, #0
 8001af4:	87e2      	strh	r2, [r4, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8001af6:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8001afa:	2201      	movs	r2, #1
 8001afc:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	06d2      	lsls	r2, r2, #27
 8001b04:	d506      	bpl.n	8001b14 <SPI_DMATransmitReceiveCplt+0xa6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001b06:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001b08:	f042 0202 	orr.w	r2, r2, #2
 8001b0c:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8001b0e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8001b12:	609a      	str	r2, [r3, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b14:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001b16:	b1bb      	cbz	r3, 8001b48 <SPI_DMATransmitReceiveCplt+0xda>
      HAL_SPI_ErrorCallback(hspi);
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f000 f9c7 	bl	8001eac <HAL_SPI_ErrorCallback>
}
 8001b1e:	b004      	add	sp, #16
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001b22:	2364      	movs	r3, #100	@ 0x64
 8001b24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b28:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	9500      	str	r5, [sp, #0]
 8001b30:	f7ff fc8c 	bl	800144c <SPI_WaitFifoStateUntilTimeout>
 8001b34:	b118      	cbz	r0, 8001b3e <SPI_DMATransmitReceiveCplt+0xd0>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001b36:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6623      	str	r3, [r4, #96]	@ 0x60
        tmpreg = READ_REG(hspi->Instance->DR);
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8001b44:	9b03      	ldr	r3, [sp, #12]
 8001b46:	e7c5      	b.n	8001ad4 <SPI_DMATransmitReceiveCplt+0x66>
  HAL_SPI_TxRxCpltCallback(hspi);
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f000 f9a1 	bl	8001e90 <HAL_SPI_TxRxCpltCallback>
 8001b4e:	e7e6      	b.n	8001b1e <SPI_DMATransmitReceiveCplt+0xb0>

08001b50 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8001b50:	6803      	ldr	r3, [r0, #0]
 8001b52:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001b54:	689a      	ldr	r2, [r3, #8]
{
 8001b56:	b530      	push	{r4, r5, lr}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001b58:	f002 0541 	and.w	r5, r2, #65	@ 0x41
{
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001b60:	2d01      	cmp	r5, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001b64:	064d      	lsls	r5, r1, #25
 8001b66:	d504      	bpl.n	8001b72 <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 8001b68:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
}
 8001b6a:	b005      	add	sp, #20
 8001b6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 8001b70:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001b72:	0795      	lsls	r5, r2, #30
 8001b74:	d504      	bpl.n	8001b80 <HAL_SPI_IRQHandler+0x30>
 8001b76:	0608      	lsls	r0, r1, #24
 8001b78:	d502      	bpl.n	8001b80 <HAL_SPI_IRQHandler+0x30>
    hspi->TxISR(hspi);
 8001b7a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	e7f4      	b.n	8001b6a <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001b80:	f412 7fb0 	tst.w	r2, #352	@ 0x160
 8001b84:	d058      	beq.n	8001c38 <HAL_SPI_IRQHandler+0xe8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001b86:	068d      	lsls	r5, r1, #26
 8001b88:	d556      	bpl.n	8001c38 <HAL_SPI_IRQHandler+0xe8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001b8a:	0650      	lsls	r0, r2, #25
 8001b8c:	d50e      	bpl.n	8001bac <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001b8e:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
 8001b92:	2500      	movs	r5, #0
 8001b94:	2803      	cmp	r0, #3
 8001b96:	d049      	beq.n	8001c2c <HAL_SPI_IRQHandler+0xdc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001b98:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8001b9a:	f040 0004 	orr.w	r0, r0, #4
 8001b9e:	6620      	str	r0, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ba0:	9500      	str	r5, [sp, #0]
 8001ba2:	68d8      	ldr	r0, [r3, #12]
 8001ba4:	9000      	str	r0, [sp, #0]
 8001ba6:	6898      	ldr	r0, [r3, #8]
 8001ba8:	9000      	str	r0, [sp, #0]
 8001baa:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001bac:	0695      	lsls	r5, r2, #26
 8001bae:	d50c      	bpl.n	8001bca <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001bb0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8001bb2:	f040 0001 	orr.w	r0, r0, #1
 8001bb6:	6620      	str	r0, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	9002      	str	r0, [sp, #8]
 8001bbc:	6898      	ldr	r0, [r3, #8]
 8001bbe:	9002      	str	r0, [sp, #8]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8001bc6:	6018      	str	r0, [r3, #0]
 8001bc8:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001bca:	05d0      	lsls	r0, r2, #23
 8001bcc:	d508      	bpl.n	8001be0 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001bce:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001bd0:	f042 0208 	orr.w	r2, r2, #8
 8001bd4:	6622      	str	r2, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	9203      	str	r2, [sp, #12]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	9203      	str	r2, [sp, #12]
 8001bde:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001be0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001be2:	b34a      	cbz	r2, 8001c38 <HAL_SPI_IRQHandler+0xe8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001bea:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001bec:	2201      	movs	r2, #1
 8001bee:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001bf2:	078a      	lsls	r2, r1, #30
 8001bf4:	d022      	beq.n	8001c3c <HAL_SPI_IRQHandler+0xec>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001bf6:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001bfa:	f022 0203 	bic.w	r2, r2, #3
 8001bfe:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001c00:	b140      	cbz	r0, 8001c14 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <HAL_SPI_IRQHandler+0xf4>)
 8001c04:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001c06:	f7fe ff34 	bl	8000a72 <HAL_DMA_Abort_IT>
 8001c0a:	b118      	cbz	r0, 8001c14 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001c0c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c12:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8001c14:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8001c16:	b178      	cbz	r0, 8001c38 <HAL_SPI_IRQHandler+0xe8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_SPI_IRQHandler+0xf4>)
 8001c1a:	6503      	str	r3, [r0, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001c1c:	f7fe ff29 	bl	8000a72 <HAL_DMA_Abort_IT>
 8001c20:	b150      	cbz	r0, 8001c38 <HAL_SPI_IRQHandler+0xe8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001c22:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c28:	6623      	str	r3, [r4, #96]	@ 0x60
 8001c2a:	e005      	b.n	8001c38 <HAL_SPI_IRQHandler+0xe8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c2c:	9501      	str	r5, [sp, #4]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	9201      	str	r2, [sp, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	9b01      	ldr	r3, [sp, #4]
}
 8001c38:	b005      	add	sp, #20
 8001c3a:	bd30      	pop	{r4, r5, pc}
        HAL_SPI_ErrorCallback(hspi);
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f000 f935 	bl	8001eac <HAL_SPI_ErrorCallback>
 8001c42:	e7f9      	b.n	8001c38 <HAL_SPI_IRQHandler+0xe8>
 8001c44:	08001c49 	.word	0x08001c49

08001c48 <SPI_DMAAbortOnError>:
{
 8001c48:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001c4a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspi->RxXferCount = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8001c52:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8001c54:	f000 f92a 	bl	8001eac <HAL_SPI_ErrorCallback>
}
 8001c58:	bd08      	pop	{r3, pc}
	...

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c62:	e003      	b.n	8001c6c <LoopCopyDataInit>

08001c64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c6a:	3104      	adds	r1, #4

08001c6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c6c:	480b      	ldr	r0, [pc, #44]	@ (8001c9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c74:	d3f6      	bcc.n	8001c64 <CopyDataInit>
  ldr  r2, =_sbss
 8001c76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c78:	e002      	b.n	8001c80 <LoopFillZerobss>

08001c7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c7c:	f842 3b04 	str.w	r3, [r2], #4

08001c80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c84:	d3f9      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c86:	f7fe fcef 	bl	8000668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f000 f9dd 	bl	8002048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f000 f849 	bl	8001d24 <main>
  bx  lr    
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c94:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001c98:	080020e4 	.word	0x080020e4
  ldr  r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ca0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001ca4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001ca8:	20000248 	.word	0x20000248

08001cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC_IRQHandler>

08001cae <Error_Handler>:
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
  BSP_LED_Off(LED1);
 8001cae:	2000      	movs	r0, #0
{
 8001cb0:	b508      	push	{r3, lr}
  BSP_LED_Off(LED1);
 8001cb2:	f7fe fc75 	bl	80005a0 <BSP_LED_Off>
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7fe fc64 	bl	8000584 <BSP_LED_On>
  while(1)
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0xe>

08001cbe <SystemClock_Config>:
{
 8001cbe:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
{
 8001cc4:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc6:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001cca:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001ccc:	2507      	movs	r5, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cce:	940f      	str	r4, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd0:	e9cd 1305 	strd	r1, r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cd8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cdc:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 432;  
 8001ce0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001ce4:	e9cd 030d 	strd	r0, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001ce8:	2309      	movs	r3, #9
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cea:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = 7;
 8001cec:	e9cd 3510 	strd	r3, r5, [sp, #64]	@ 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf0:	f7ff f8c0 	bl	8000e74 <HAL_RCC_OscConfig>
 8001cf4:	b100      	cbz	r0, 8001cf8 <SystemClock_Config+0x3a>
    while(1) {};
 8001cf6:	e7fe      	b.n	8001cf6 <SystemClock_Config+0x38>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cf8:	f7ff f884 	bl	8000e04 <HAL_PWREx_EnableOverDrive>
 8001cfc:	b100      	cbz	r0, 8001d00 <SystemClock_Config+0x42>
    while(1) {};
 8001cfe:	e7fe      	b.n	8001cfe <SystemClock_Config+0x40>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001d00:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001d02:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d06:	9002      	str	r0, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d08:	4629      	mov	r1, r5
 8001d0a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0c:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d14:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d18:	f7ff fa9e 	bl	8001258 <HAL_RCC_ClockConfig>
 8001d1c:	b100      	cbz	r0, 8001d20 <SystemClock_Config+0x62>
    while(1) {};
 8001d1e:	e7fe      	b.n	8001d1e <SystemClock_Config+0x60>
}
 8001d20:	b013      	add	sp, #76	@ 0x4c
 8001d22:	bd30      	pop	{r4, r5, pc}

08001d24 <main>:
{
 8001d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
static void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8001d26:	f7fe fd89 	bl	800083c <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d2a:	2301      	movs	r3, #1
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d2c:	2400      	movs	r4, #0
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d2e:	4668      	mov	r0, sp
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d30:	f8ad 3000 	strh.w	r3, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d34:	f248 731f 	movw	r3, #34591	@ 0x871f
 8001d38:	e9cd 4301 	strd	r4, r3, [sp, #4]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d3c:	f240 1301 	movw	r3, #257	@ 0x101
 8001d40:	9303      	str	r3, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d42:	f7fe fd99 	bl	8000878 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d46:	2004      	movs	r0, #4
 8001d48:	f7fe fd86 	bl	8000858 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d50:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d54:	4a49      	ldr	r2, [pc, #292]	@ (8001e7c <main+0x158>)
 8001d56:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d5e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d62:	6953      	ldr	r3, [r2, #20]
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d68:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d6e:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001d72:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d76:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001d7a:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d7e:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d82:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d86:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001d8a:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d8c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d90:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d92:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8001d96:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d98:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8001d9c:	d2f9      	bcs.n	8001d92 <main+0x6e>
    } while(sets-- != 0U);
 8001d9e:	3b20      	subs	r3, #32
 8001da0:	f113 0f20 	cmn.w	r3, #32
 8001da4:	d1f2      	bne.n	8001d8c <main+0x68>
 8001da6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001daa:	6953      	ldr	r3, [r2, #20]
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db0:	6153      	str	r3, [r2, #20]
 8001db2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001db6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001dba:	f7fe fc9f 	bl	80006fc <HAL_Init>
  SpiHandle.Instance               = SPIx;
 8001dbe:	4c30      	ldr	r4, [pc, #192]	@ (8001e80 <main+0x15c>)
  SystemClock_Config();
 8001dc0:	f7ff ff7d 	bl	8001cbe <SystemClock_Config>
  BSP_LED_Init(LED1);
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7fe fbaf 	bl	8000528 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f7fe fbac 	bl	8000528 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f7fe fba9 	bl	8000528 <BSP_LED_Init>
  SpiHandle.Instance               = SPIx;
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <main+0x160>)
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001dd8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 8001ddc:	4620      	mov	r0, r4
  SpiHandle.Instance               = SPIx;
 8001dde:	6023      	str	r3, [r4, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001de0:	2320      	movs	r3, #32
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001de2:	60e2      	str	r2, [r4, #12]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001de4:	61e3      	str	r3, [r4, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60a3      	str	r3, [r4, #8]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001dea:	62a3      	str	r3, [r4, #40]	@ 0x28
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001dec:	e9c4 3304 	strd	r3, r3, [r4, #16]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001df0:	e9c4 3308 	strd	r3, r3, [r4, #32]
  SpiHandle.Init.CRCPolynomial     = 7;
 8001df4:	2307      	movs	r3, #7
 8001df6:	62e3      	str	r3, [r4, #44]	@ 0x2c
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001df8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dfc:	61a3      	str	r3, [r4, #24]
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001dfe:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001e02:	6063      	str	r3, [r4, #4]
  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 8001e04:	f7ff fc24 	bl	8001650 <HAL_SPI_Init>
 8001e08:	4601      	mov	r1, r0
 8001e0a:	b108      	cbz	r0, 8001e10 <main+0xec>
      Error_Handler();
 8001e0c:	f7ff ff4f 	bl	8001cae <Error_Handler>
  BSP_PB_Init(BUTTON_USER,BUTTON_MODE_GPIO);
 8001e10:	f7fe fbe2 	bl	80005d8 <BSP_PB_Init>
  while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_SET)
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe fc1b 	bl	8000650 <BSP_PB_GetState>
 8001e1a:	2801      	cmp	r0, #1
    BSP_LED_Toggle(LED1);
 8001e1c:	f04f 0000 	mov.w	r0, #0
  while (BSP_PB_GetState(BUTTON_USER) != GPIO_PIN_SET)
 8001e20:	d122      	bne.n	8001e68 <main+0x144>
  BSP_LED_Off(LED1);
 8001e22:	f7fe fbbd 	bl	80005a0 <BSP_LED_Off>
  if(HAL_SPI_TransmitReceive_DMA(&SpiHandle, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 8001e26:	4a18      	ldr	r2, [pc, #96]	@ (8001e88 <main+0x164>)
 8001e28:	236f      	movs	r3, #111	@ 0x6f
 8001e2a:	4918      	ldr	r1, [pc, #96]	@ (8001e8c <main+0x168>)
 8001e2c:	f1a2 0064 	sub.w	r0, r2, #100	@ 0x64
 8001e30:	f7ff fca0 	bl	8001774 <HAL_SPI_TransmitReceive_DMA>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d1e9      	bne.n	8001e0c <main+0xe8>
  while (wTransferState == TRANSFER_WAIT)
 8001e38:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0fb      	beq.n	8001e38 <main+0x114>
  switch(wTransferState)
 8001e40:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d1e1      	bne.n	8001e0c <main+0xe8>
 8001e48:	4910      	ldr	r1, [pc, #64]	@ (8001e8c <main+0x168>)
  while (BufferLength--)
 8001e4a:	236e      	movs	r3, #110	@ 0x6e
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e88 <main+0x164>)
 8001e4e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
    if((*pBuffer1) != *pBuffer2)
 8001e52:	f811 5b01 	ldrb.w	r5, [r1], #1
 8001e56:	f812 4b01 	ldrb.w	r4, [r2], #1
 8001e5a:	42a5      	cmp	r5, r4
 8001e5c:	d10a      	bne.n	8001e74 <main+0x150>
  while (BufferLength--)
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4283      	cmp	r3, r0
 8001e64:	d1f5      	bne.n	8001e52 <main+0x12e>
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <main+0x142>
    BSP_LED_Toggle(LED1);
 8001e68:	f7fe fba8 	bl	80005bc <BSP_LED_Toggle>
    HAL_Delay(100);
 8001e6c:	2064      	movs	r0, #100	@ 0x64
 8001e6e:	f7fe fc6d 	bl	800074c <HAL_Delay>
 8001e72:	e7cf      	b.n	8001e14 <main+0xf0>
      if(Buffercmp((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE))
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f6      	beq.n	8001e66 <main+0x142>
 8001e78:	e7c8      	b.n	8001e0c <main+0xe8>
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00
 8001e80:	200000b0 	.word	0x200000b0
 8001e84:	40013000 	.word	0x40013000
 8001e88:	20000114 	.word	0x20000114
 8001e8c:	20000020 	.word	0x20000020

08001e90 <HAL_SPI_TxRxCpltCallback>:
{
 8001e90:	b508      	push	{r3, lr}
  BSP_LED_On(LED1);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7fe fb76 	bl	8000584 <BSP_LED_On>
  BSP_LED_On(LED2);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f7fe fb73 	bl	8000584 <BSP_LED_On>
  wTransferState = TRANSFER_COMPLETE;
 8001e9e:	4b02      	ldr	r3, [pc, #8]	@ (8001ea8 <HAL_SPI_TxRxCpltCallback+0x18>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
}
 8001ea6:	bd08      	pop	{r3, pc}
 8001ea8:	200000b0 	.word	0x200000b0

08001eac <HAL_SPI_ErrorCallback>:
  wTransferState = TRANSFER_ERROR;
 8001eac:	4b02      	ldr	r3, [pc, #8]	@ (8001eb8 <HAL_SPI_ErrorCallback+0xc>)
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200000b0 	.word	0x200000b0

08001ebc <HAL_SPI_MspInit>:
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
GPIO_InitTypeDef  GPIO_InitStruct;
	
  if (hspi->Instance == SPIx)
 8001ebc:	6802      	ldr	r2, [r0, #0]
 8001ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8001ff8 <HAL_SPI_MspInit+0x13c>)
 8001ec0:	429a      	cmp	r2, r3
{
 8001ec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec6:	4606      	mov	r6, r0
 8001ec8:	b08b      	sub	sp, #44	@ 0x2c
  if (hspi->Instance == SPIx)
 8001eca:	f040 8091 	bne.w	8001ff0 <HAL_SPI_MspInit+0x134>
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001ece:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8001ed2:	2405      	movs	r4, #5
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);

    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8001ed4:	2740      	movs	r7, #64	@ 0x40
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001ed6:	a905      	add	r1, sp, #20
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
    /*##-3- Configure the DMA ##################################################*/
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = SPIx_TX_DMA_STREAM;
    hdma_tx.Init.Channel             = SPIx_TX_DMA_CHANNEL;
    hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
    hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001eda:	2500      	movs	r5, #0
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001edc:	4847      	ldr	r0, [pc, #284]	@ (8001ffc <HAL_SPI_MspInit+0x140>)
    hdma_tx.Init.Channel             = SPIx_TX_DMA_CHANNEL;
 8001ede:	f04f 6bc0 	mov.w	fp, #100663296	@ 0x6000000
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001ee2:	f042 0202 	orr.w	r2, r2, #2
    hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ee6:	f04f 0a03 	mov.w	sl, #3
    hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
    hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001eea:	f44f 0900 	mov.w	r9, #8388608	@ 0x800000
 8001eee:	f44f 1800 	mov.w	r8, #2097152	@ 0x200000
    SPIx_SCK_GPIO_CLK_ENABLE();
 8001ef2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ef6:	f002 0202 	and.w	r2, r2, #2
 8001efa:	9200      	str	r2, [sp, #0]
 8001efc:	9a00      	ldr	r2, [sp, #0]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8001efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f08:	f002 0201 	and.w	r2, r2, #1
 8001f0c:	9201      	str	r2, [sp, #4]
 8001f0e:	9a01      	ldr	r2, [sp, #4]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8001f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f1a:	f002 0201 	and.w	r2, r2, #1
 8001f1e:	9202      	str	r2, [sp, #8]
 8001f20:	9a02      	ldr	r2, [sp, #8]
    SPIx_CLK_ENABLE();
 8001f22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001f28:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f2c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001f30:	9203      	str	r2, [sp, #12]
 8001f32:	9a03      	ldr	r2, [sp, #12]
    DMAx_CLK_ENABLE();
 8001f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f36:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001f3c:	2208      	movs	r2, #8
    DMAx_CLK_ENABLE();
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8001f40:	9409      	str	r4, [sp, #36]	@ 0x24
    DMAx_CLK_ENABLE();
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f46:	9304      	str	r3, [sp, #16]
 8001f48:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001f50:	e9cd 3307 	strd	r3, r3, [sp, #28]
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001f54:	f7fe fe5e 	bl	8000c14 <HAL_GPIO_Init>
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001f58:	a905      	add	r1, sp, #20
 8001f5a:	4829      	ldr	r0, [pc, #164]	@ (8002000 <HAL_SPI_MspInit+0x144>)
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8001f5c:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8001f5e:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001f60:	f7fe fe58 	bl	8000c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8001f64:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8001f66:	9409      	str	r4, [sp, #36]	@ 0x24
    hdma_tx.Instance                 = SPIx_TX_DMA_STREAM;
 8001f68:	4c26      	ldr	r4, [pc, #152]	@ (8002004 <HAL_SPI_MspInit+0x148>)
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001f6a:	a905      	add	r1, sp, #20
 8001f6c:	4824      	ldr	r0, [pc, #144]	@ (8002000 <HAL_SPI_MspInit+0x144>)
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8001f6e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001f70:	f7fe fe50 	bl	8000c14 <HAL_GPIO_Init>
    hdma_tx.Init.Channel             = SPIx_TX_DMA_CHANNEL;
 8001f74:	4b24      	ldr	r3, [pc, #144]	@ (8002008 <HAL_SPI_MspInit+0x14c>)
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_tx.Init.Mode                = DMA_NORMAL;
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

    HAL_DMA_Init(&hdma_tx);
 8001f76:	4620      	mov	r0, r4
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8001f78:	6225      	str	r5, [r4, #32]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001f7a:	e9c4 7502 	strd	r7, r5, [r4, #8]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001f7e:	f44f 6780 	mov.w	r7, #1024	@ 0x400
    hdma_tx.Init.Channel             = SPIx_TX_DMA_CHANNEL;
 8001f82:	e9c4 3b00 	strd	r3, fp, [r4]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f86:	e9c4 7504 	strd	r7, r5, [r4, #16]
    hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001f8a:	e9c4 5a09 	strd	r5, sl, [r4, #36]	@ 0x24
    hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001f8e:	e9c4 980b 	strd	r9, r8, [r4, #44]	@ 0x2c
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8001f92:	e9c4 5506 	strd	r5, r5, [r4, #24]
    HAL_DMA_Init(&hdma_tx);
 8001f96:	f7fe fcb1 	bl	80008fc <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the the SPI handle */
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);

    /* Configure the DMA handler for Transmission process */
    hdma_rx.Instance                 = SPIx_RX_DMA_STREAM;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <HAL_SPI_MspInit+0x150>)
    __HAL_LINKDMA(hspi, hdmatx, hdma_tx);
 8001f9c:	6574      	str	r4, [r6, #84]	@ 0x54
 8001f9e:	63a6      	str	r6, [r4, #56]	@ 0x38
    hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
    hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
    hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa0:	e9c4 751c 	strd	r7, r5, [r4, #112]	@ 0x70
    hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_rx.Init.Mode                = DMA_NORMAL;
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;

    HAL_DMA_Init(&hdma_rx);
 8001fa4:	f104 0760 	add.w	r7, r4, #96	@ 0x60
    hdma_rx.Init.Channel             = SPIx_RX_DMA_CHANNEL;
 8001fa8:	e9c4 3b18 	strd	r3, fp, [r4, #96]	@ 0x60
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001fac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    HAL_DMA_Init(&hdma_rx);
 8001fb0:	4638      	mov	r0, r7
    hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001fb2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001fb6:	e9c4 5a21 	strd	r5, sl, [r4, #132]	@ 0x84
    hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8001fba:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
    hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001fbe:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
    hdma_rx.Init.Mode                = DMA_NORMAL;
 8001fc2:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
    HAL_DMA_Init(&hdma_rx);
 8001fc6:	f7fe fc99 	bl	80008fc <HAL_DMA_Init>
    /* Associate the initialized DMA handle to the the SPI handle */
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx);
    
    /*##-4- Configure the NVIC for DMA #########################################*/ 
    /* NVIC configuration for DMA transfer complete interrupt (SPI1_TX) */
    HAL_NVIC_SetPriority(SPIx_DMA_TX_IRQn, 1, 1);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	203b      	movs	r0, #59	@ 0x3b
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx);
 8001fce:	65b7      	str	r7, [r6, #88]	@ 0x58
    HAL_NVIC_SetPriority(SPIx_DMA_TX_IRQn, 1, 1);
 8001fd0:	4611      	mov	r1, r2
    __HAL_LINKDMA(hspi, hdmarx, hdma_rx);
 8001fd2:	f8c4 6098 	str.w	r6, [r4, #152]	@ 0x98
    HAL_NVIC_SetPriority(SPIx_DMA_TX_IRQn, 1, 1);
 8001fd6:	f7fe fbdd 	bl	8000794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPIx_DMA_TX_IRQn);
 8001fda:	203b      	movs	r0, #59	@ 0x3b
 8001fdc:	f7fe fc0c 	bl	80007f8 <HAL_NVIC_EnableIRQ>
    
    /* NVIC configuration for DMA transfer complete interrupt (SPI1_RX) */
    HAL_NVIC_SetPriority(SPIx_DMA_RX_IRQn, 1, 0);
 8001fe0:	203a      	movs	r0, #58	@ 0x3a
 8001fe2:	462a      	mov	r2, r5
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	f7fe fbd5 	bl	8000794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPIx_DMA_RX_IRQn);
 8001fea:	203a      	movs	r0, #58	@ 0x3a
 8001fec:	f7fe fc04 	bl	80007f8 <HAL_NVIC_EnableIRQ>
  }
}
 8001ff0:	b00b      	add	sp, #44	@ 0x2c
 8001ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40013000 	.word	0x40013000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020000 	.word	0x40020000
 8002004:	20000188 	.word	0x20000188
 8002008:	40026458 	.word	0x40026458
 800200c:	40026440 	.word	0x40026440

08002010 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8002010:	4770      	bx	lr

08002012 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002012:	e7fe      	b.n	8002012 <HardFault_Handler>

08002014 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler>

08002016 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002016:	e7fe      	b.n	8002016 <BusFault_Handler>

08002018 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler>

0800201a <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 800201a:	4770      	bx	lr

0800201c <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 800201c:	4770      	bx	lr

0800201e <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 800201e:	4770      	bx	lr

08002020 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8002020:	f7fe bb82 	b.w	8000728 <HAL_IncTick>

08002024 <DMA2_Stream2_IRQHandler>:
  * @param  None
  * @retval None
  */
void SPIx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(SpiHandle.hdmarx);
 8002024:	4b01      	ldr	r3, [pc, #4]	@ (800202c <DMA2_Stream2_IRQHandler+0x8>)
 8002026:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002028:	f7fe bd36 	b.w	8000a98 <HAL_DMA_IRQHandler>
 800202c:	200000b0 	.word	0x200000b0

08002030 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void SPIx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(SpiHandle.hdmatx);
 8002030:	4b01      	ldr	r3, [pc, #4]	@ (8002038 <DMA2_Stream3_IRQHandler+0x8>)
 8002032:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002034:	f7fe bd30 	b.w	8000a98 <HAL_DMA_IRQHandler>
 8002038:	200000b0 	.word	0x200000b0

0800203c <SPI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void SPIx_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&SpiHandle);
 800203c:	4801      	ldr	r0, [pc, #4]	@ (8002044 <SPI2_IRQHandler+0x8>)
 800203e:	f7ff bd87 	b.w	8001b50 <HAL_SPI_IRQHandler>
 8002042:	bf00      	nop
 8002044:	200000b0 	.word	0x200000b0

08002048 <__libc_init_array>:
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	4d0d      	ldr	r5, [pc, #52]	@ (8002080 <__libc_init_array+0x38>)
 800204c:	4c0d      	ldr	r4, [pc, #52]	@ (8002084 <__libc_init_array+0x3c>)
 800204e:	1b64      	subs	r4, r4, r5
 8002050:	10a4      	asrs	r4, r4, #2
 8002052:	2600      	movs	r6, #0
 8002054:	42a6      	cmp	r6, r4
 8002056:	d109      	bne.n	800206c <__libc_init_array+0x24>
 8002058:	4d0b      	ldr	r5, [pc, #44]	@ (8002088 <__libc_init_array+0x40>)
 800205a:	4c0c      	ldr	r4, [pc, #48]	@ (800208c <__libc_init_array+0x44>)
 800205c:	f000 f818 	bl	8002090 <_init>
 8002060:	1b64      	subs	r4, r4, r5
 8002062:	10a4      	asrs	r4, r4, #2
 8002064:	2600      	movs	r6, #0
 8002066:	42a6      	cmp	r6, r4
 8002068:	d105      	bne.n	8002076 <__libc_init_array+0x2e>
 800206a:	bd70      	pop	{r4, r5, r6, pc}
 800206c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002070:	4798      	blx	r3
 8002072:	3601      	adds	r6, #1
 8002074:	e7ee      	b.n	8002054 <__libc_init_array+0xc>
 8002076:	f855 3b04 	ldr.w	r3, [r5], #4
 800207a:	4798      	blx	r3
 800207c:	3601      	adds	r6, #1
 800207e:	e7f2      	b.n	8002066 <__libc_init_array+0x1e>
 8002080:	080020dc 	.word	0x080020dc
 8002084:	080020dc 	.word	0x080020dc
 8002088:	080020dc 	.word	0x080020dc
 800208c:	080020e0 	.word	0x080020e0

08002090 <_init>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	bf00      	nop
 8002094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002096:	bc08      	pop	{r3}
 8002098:	469e      	mov	lr, r3
 800209a:	4770      	bx	lr

0800209c <_fini>:
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	bf00      	nop
 80020a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a2:	bc08      	pop	{r3}
 80020a4:	469e      	mov	lr, r3
 80020a6:	4770      	bx	lr
