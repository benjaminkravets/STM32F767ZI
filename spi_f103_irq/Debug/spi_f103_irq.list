
spi_f103_irq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ca4  08002ca4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ca4  08002ca4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ca4  08002ca4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ca4  08002ca4  00012ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ca8  08002ca8  00012ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000005c  08002d08  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08002d08  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d84  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c9  00000000  00000000  00028e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068c  00000000  00000000  0002afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001665a  00000000  00000000  0002b62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4a0  00000000  00000000  00041c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081ed6  00000000  00000000  0004c126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002738  00000000  00000000  000cdffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d0734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c18 	.word	0x08002c18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002c18 	.word	0x08002c18

0800014c <HAL_SPI_RxCpltCallback>:
/* USER CODE BEGIN 0 */
#define BUFFER_SIZE 100
uint8_t RX_Buffer[BUFFER_SIZE] = {0};
uint8_t RX_dummy[BUFFER_SIZE] = {0};

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000158:	4805      	ldr	r0, [pc, #20]	; (8000170 <HAL_SPI_RxCpltCallback+0x24>)
 800015a:	f000 fdff 	bl	8000d5c <HAL_GPIO_TogglePin>
	HAL_SPI_Receive_IT(&hspi1, RX_Buffer, BUFFER_SIZE);
 800015e:	2264      	movs	r2, #100	; 0x64
 8000160:	4904      	ldr	r1, [pc, #16]	; (8000174 <HAL_SPI_RxCpltCallback+0x28>)
 8000162:	4805      	ldr	r0, [pc, #20]	; (8000178 <HAL_SPI_RxCpltCallback+0x2c>)
 8000164:	f001 faa8 	bl	80016b8 <HAL_SPI_Receive_IT>
	//HAL_UART_Transmit_IT(&huart1, RX_Buffer, BUFFER_SIZE);
}
 8000168:	bf00      	nop
 800016a:	3708      	adds	r7, #8
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	40011000 	.word	0x40011000
 8000174:	20000118 	.word	0x20000118
 8000178:	20000078 	.word	0x20000078

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 fa68 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f820 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000188:	f000 f8ba 	bl	8000300 <MX_GPIO_Init>
  MX_SPI1_Init();
 800018c:	f000 f85c 	bl	8000248 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000190:	f000 f88c 	bl	80002ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_IT(&hspi1, RX_dummy, BUFFER_SIZE);
 8000194:	2264      	movs	r2, #100	; 0x64
 8000196:	4907      	ldr	r1, [pc, #28]	; (80001b4 <main+0x38>)
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <main+0x3c>)
 800019a:	f001 fa8d 	bl	80016b8 <HAL_SPI_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	sprintf(RX_Buffer, "SPI Transfer \r\n\n\n\n\n");
 800019e:	4907      	ldr	r1, [pc, #28]	; (80001bc <main+0x40>)
 80001a0:	4807      	ldr	r0, [pc, #28]	; (80001c0 <main+0x44>)
 80001a2:	f002 f887 	bl	80022b4 <siprintf>
	//HAL_UART_Transmit(&huart1, RX_Buffer, sizeof(RX_Buffer), 100);
	HAL_UART_Transmit_IT(&huart1, RX_Buffer, BUFFER_SIZE);
 80001a6:	2264      	movs	r2, #100	; 0x64
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <main+0x44>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <main+0x48>)
 80001ac:	f001 ffbf 	bl	800212e <HAL_UART_Transmit_IT>
  {
 80001b0:	e7f5      	b.n	800019e <main+0x22>
 80001b2:	bf00      	nop
 80001b4:	2000017c 	.word	0x2000017c
 80001b8:	20000078 	.word	0x20000078
 80001bc:	08002c30 	.word	0x08002c30
 80001c0:	20000118 	.word	0x20000118
 80001c4:	200000d0 	.word	0x200000d0

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 f88c 	bl	80022f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2310      	movs	r3, #16
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f6:	2302      	movs	r3, #2
 80001f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001fa:	2300      	movs	r3, #0
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fdc1 	bl	8000d90 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000214:	f000 f8b4 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2101      	movs	r1, #1
 8000230:	4618      	mov	r0, r3
 8000232:	f001 f82f 	bl	8001294 <HAL_RCC_ClockConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800023c:	f000 f8a0 	bl	8000380 <Error_Handler>
  }
}
 8000240:	bf00      	nop
 8000242:	3740      	adds	r7, #64	; 0x40
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <MX_SPI1_Init+0x5c>)
 800024e:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <MX_SPI1_Init+0x60>)
 8000250:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_SPI1_Init+0x5c>)
 8000254:	2200      	movs	r2, #0
 8000256:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <MX_SPI1_Init+0x5c>)
 800025a:	2200      	movs	r2, #0
 800025c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <MX_SPI1_Init+0x5c>)
 8000260:	2200      	movs	r2, #0
 8000262:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <MX_SPI1_Init+0x5c>)
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <MX_SPI1_Init+0x5c>)
 800026c:	2200      	movs	r2, #0
 800026e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <MX_SPI1_Init+0x5c>)
 8000272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000276:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <MX_SPI1_Init+0x5c>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <MX_SPI1_Init+0x5c>)
 8000280:	2200      	movs	r2, #0
 8000282:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <MX_SPI1_Init+0x5c>)
 8000286:	2200      	movs	r2, #0
 8000288:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <MX_SPI1_Init+0x5c>)
 800028c:	220a      	movs	r2, #10
 800028e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000290:	4804      	ldr	r0, [pc, #16]	; (80002a4 <MX_SPI1_Init+0x5c>)
 8000292:	f001 f98d 	bl	80015b0 <HAL_SPI_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 800029c:	f000 f870 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000078 	.word	0x20000078
 80002a8:	40013000 	.word	0x40013000

080002ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_USART1_UART_Init+0x4c>)
 80002b2:	4a12      	ldr	r2, [pc, #72]	; (80002fc <MX_USART1_UART_Init+0x50>)
 80002b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <MX_USART1_UART_Init+0x4c>)
 80002b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_USART1_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_USART1_UART_Init+0x4c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <MX_USART1_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d0:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_USART1_UART_Init+0x4c>)
 80002d2:	220c      	movs	r2, #12
 80002d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <MX_USART1_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_USART1_UART_Init+0x4c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_USART1_UART_Init+0x4c>)
 80002e4:	f001 fed3 	bl	800208e <HAL_UART_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002ee:	f000 f847 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	200000d0 	.word	0x200000d0
 80002fc:	40013800 	.word	0x40013800

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_GPIO_Init+0x78>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_GPIO_Init+0x78>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_GPIO_Init+0x78>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_GPIO_Init+0x78>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a11      	ldr	r2, [pc, #68]	; (8000378 <MX_GPIO_Init+0x78>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_GPIO_Init+0x78>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	603b      	str	r3, [r7, #0]
 8000342:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034a:	480c      	ldr	r0, [pc, #48]	; (800037c <MX_GPIO_Init+0x7c>)
 800034c:	f000 fcee 	bl	8000d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2302      	movs	r3, #2
 8000360:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000362:	f107 0308 	add.w	r3, r7, #8
 8000366:	4619      	mov	r1, r3
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0x7c>)
 800036a:	f000 fb5b 	bl	8000a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800036e:	bf00      	nop
 8000370:	3718      	adds	r7, #24
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40011000 	.word	0x40011000

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	e7fe      	b.n	8000388 <Error_Handler+0x8>
	...

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a1f      	ldr	r2, [pc, #124]	; (8000488 <HAL_SPI_MspInit+0x98>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d137      	bne.n	8000480 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <HAL_SPI_MspInit+0x9c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1d      	ldr	r2, [pc, #116]	; (800048c <HAL_SPI_MspInit+0x9c>)
 8000416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <HAL_SPI_MspInit+0x9c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b18      	ldr	r3, [pc, #96]	; (800048c <HAL_SPI_MspInit+0x9c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a17      	ldr	r2, [pc, #92]	; (800048c <HAL_SPI_MspInit+0x9c>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <HAL_SPI_MspInit+0x9c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000440:	23a0      	movs	r3, #160	; 0xa0
 8000442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000444:	2300      	movs	r3, #0
 8000446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	480f      	ldr	r0, [pc, #60]	; (8000490 <HAL_SPI_MspInit+0xa0>)
 8000454:	f000 fae6 	bl	8000a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000458:	2340      	movs	r3, #64	; 0x40
 800045a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045c:	2302      	movs	r3, #2
 800045e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000460:	2303      	movs	r3, #3
 8000462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	4809      	ldr	r0, [pc, #36]	; (8000490 <HAL_SPI_MspInit+0xa0>)
 800046c:	f000 fada 	bl	8000a24 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000470:	2200      	movs	r2, #0
 8000472:	2100      	movs	r1, #0
 8000474:	2023      	movs	r0, #35	; 0x23
 8000476:	f000 fa26 	bl	80008c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800047a:	2023      	movs	r0, #35	; 0x23
 800047c:	f000 fa3f 	bl	80008fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000480:	bf00      	nop
 8000482:	3720      	adds	r7, #32
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40013000 	.word	0x40013000
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800

08000494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a1c      	ldr	r2, [pc, #112]	; (8000520 <HAL_UART_MspInit+0x8c>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d131      	bne.n	8000518 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <HAL_UART_MspInit+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1a      	ldr	r2, [pc, #104]	; (8000524 <HAL_UART_MspInit+0x90>)
 80004ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <HAL_UART_MspInit+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_UART_MspInit+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a14      	ldr	r2, [pc, #80]	; (8000524 <HAL_UART_MspInit+0x90>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <HAL_UART_MspInit+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ea:	2302      	movs	r3, #2
 80004ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ee:	2303      	movs	r3, #3
 80004f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <HAL_UART_MspInit+0x94>)
 80004fa:	f000 fa93 	bl	8000a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <HAL_UART_MspInit+0x94>)
 8000514:	f000 fa86 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40013800 	.word	0x40013800
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000530:	e7fe      	b.n	8000530 <NMI_Handler+0x4>

08000532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <HardFault_Handler+0x4>

08000538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <MemManage_Handler+0x4>

0800053e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <BusFault_Handler+0x4>

08000544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <UsageFault_Handler+0x4>

0800054a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000572:	f000 f8b5 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <SPI1_IRQHandler+0x10>)
 8000582:	f001 f9cb 	bl	800191c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000078 	.word	0x20000078

08000590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <_sbrk+0x5c>)
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <_sbrk+0x60>)
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <_sbrk+0x64>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <_sbrk+0x64>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <_sbrk+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <_sbrk+0x64>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d207      	bcs.n	80005d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c0:	f001 fea0 	bl	8002304 <__errno>
 80005c4:	4603      	mov	r3, r0
 80005c6:	220c      	movs	r2, #12
 80005c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	e009      	b.n	80005e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <_sbrk+0x64>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <_sbrk+0x64>)
 80005e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20005000 	.word	0x20005000
 80005f0:	00000400 	.word	0x00000400
 80005f4:	200001e0 	.word	0x200001e0
 80005f8:	20000330 	.word	0x20000330

080005fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000608:	f7ff fff8 	bl	80005fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800060e:	490c      	ldr	r1, [pc, #48]	; (8000640 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000610:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000614:	e002      	b.n	800061c <LoopCopyDataInit>

08000616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061a:	3304      	adds	r3, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800061c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000620:	d3f9      	bcc.n	8000616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000624:	4c09      	ldr	r4, [pc, #36]	; (800064c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000628:	e001      	b.n	800062e <LoopFillZerobss>

0800062a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062c:	3204      	adds	r2, #4

0800062e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000630:	d3fb      	bcc.n	800062a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000632:	f001 fe6d 	bl	8002310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000636:	f7ff fda1 	bl	800017c <main>
  bx lr
 800063a:	4770      	bx	lr
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000644:	08002cac 	.word	0x08002cac
  ldr r2, =_sbss
 8000648:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800064c:	20000330 	.word	0x20000330

08000650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
	...

08000654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x28>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f923 	bl	80008b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	200f      	movs	r0, #15
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f7ff fe8c 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f93b 	bl	800091a <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f000 f903 	bl	80008c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000004 	.word	0x20000004

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <HAL_IncTick+0x20>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000008 	.word	0x20000008
 8000700:	200001e4 	.word	0x200001e4

08000704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <HAL_GetTick+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	200001e4 	.word	0x200001e4

08000718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_GetPriorityGrouping+0x18>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	f003 0307 	and.w	r3, r3, #7
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	db0b      	blt.n	80007a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f003 021f 	and.w	r2, r3, #31
 8000794:	4906      	ldr	r1, [pc, #24]	; (80007b0 <__NVIC_EnableIRQ+0x34>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	095b      	lsrs	r3, r3, #5
 800079c:	2001      	movs	r0, #1
 800079e:	fa00 f202 	lsl.w	r2, r0, r2
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db0a      	blt.n	80007de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	490c      	ldr	r1, [pc, #48]	; (8000800 <__NVIC_SetPriority+0x4c>)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007dc:	e00a      	b.n	80007f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <__NVIC_SetPriority+0x50>)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	3b04      	subs	r3, #4
 80007ec:	0112      	lsls	r2, r2, #4
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	440b      	add	r3, r1
 80007f2:	761a      	strb	r2, [r3, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000e100 	.word	0xe000e100
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f1c3 0307 	rsb	r3, r3, #7
 8000822:	2b04      	cmp	r3, #4
 8000824:	bf28      	it	cs
 8000826:	2304      	movcs	r3, #4
 8000828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3304      	adds	r3, #4
 800082e:	2b06      	cmp	r3, #6
 8000830:	d902      	bls.n	8000838 <NVIC_EncodePriority+0x30>
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3b03      	subs	r3, #3
 8000836:	e000      	b.n	800083a <NVIC_EncodePriority+0x32>
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	f04f 32ff 	mov.w	r2, #4294967295
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43da      	mvns	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	401a      	ands	r2, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000850:	f04f 31ff 	mov.w	r1, #4294967295
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43d9      	mvns	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	4313      	orrs	r3, r2
         );
}
 8000862:	4618      	mov	r0, r3
 8000864:	3724      	adds	r7, #36	; 0x24
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b01      	subs	r3, #1
 8000878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800087c:	d301      	bcc.n	8000882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800087e:	2301      	movs	r3, #1
 8000880:	e00f      	b.n	80008a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <SysTick_Config+0x40>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088a:	210f      	movs	r1, #15
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f7ff ff90 	bl	80007b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <SysTick_Config+0x40>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <SysTick_Config+0x40>)
 800089c:	2207      	movs	r2, #7
 800089e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff2d 	bl	8000718 <__NVIC_SetPriorityGrouping>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d8:	f7ff ff42 	bl	8000760 <__NVIC_GetPriorityGrouping>
 80008dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	6978      	ldr	r0, [r7, #20]
 80008e4:	f7ff ff90 	bl	8000808 <NVIC_EncodePriority>
 80008e8:	4602      	mov	r2, r0
 80008ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff5f 	bl	80007b4 <__NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff35 	bl	800077c <__NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffa2 	bl	800086c <SysTick_Config>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b02      	cmp	r3, #2
 800094a:	d005      	beq.n	8000958 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2204      	movs	r2, #4
 8000950:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e051      	b.n	80009fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f022 020e 	bic.w	r2, r2, #14
 8000966:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f022 0201 	bic.w	r2, r2, #1
 8000976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <HAL_DMA_Abort_IT+0xd4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d029      	beq.n	80009d6 <HAL_DMA_Abort_IT+0xa2>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <HAL_DMA_Abort_IT+0xd8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d022      	beq.n	80009d2 <HAL_DMA_Abort_IT+0x9e>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <HAL_DMA_Abort_IT+0xdc>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d01a      	beq.n	80009cc <HAL_DMA_Abort_IT+0x98>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <HAL_DMA_Abort_IT+0xe0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d012      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x92>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <HAL_DMA_Abort_IT+0xe4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d00a      	beq.n	80009c0 <HAL_DMA_Abort_IT+0x8c>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <HAL_DMA_Abort_IT+0xe8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d102      	bne.n	80009ba <HAL_DMA_Abort_IT+0x86>
 80009b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009b8:	e00e      	b.n	80009d8 <HAL_DMA_Abort_IT+0xa4>
 80009ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009be:	e00b      	b.n	80009d8 <HAL_DMA_Abort_IT+0xa4>
 80009c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c4:	e008      	b.n	80009d8 <HAL_DMA_Abort_IT+0xa4>
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	e005      	b.n	80009d8 <HAL_DMA_Abort_IT+0xa4>
 80009cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d0:	e002      	b.n	80009d8 <HAL_DMA_Abort_IT+0xa4>
 80009d2:	2310      	movs	r3, #16
 80009d4:	e000      	b.n	80009d8 <HAL_DMA_Abort_IT+0xa4>
 80009d6:	2301      	movs	r3, #1
 80009d8:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_DMA_Abort_IT+0xec>)
 80009da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	4798      	blx	r3
    } 
  }
  return status;
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020008 	.word	0x40020008
 8000a0c:	4002001c 	.word	0x4002001c
 8000a10:	40020030 	.word	0x40020030
 8000a14:	40020044 	.word	0x40020044
 8000a18:	40020058 	.word	0x40020058
 8000a1c:	4002006c 	.word	0x4002006c
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b08b      	sub	sp, #44	; 0x2c
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a36:	e169      	b.n	8000d0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	f040 8158 	bne.w	8000d06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a9a      	ldr	r2, [pc, #616]	; (8000cc4 <HAL_GPIO_Init+0x2a0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d05e      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a60:	4a98      	ldr	r2, [pc, #608]	; (8000cc4 <HAL_GPIO_Init+0x2a0>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d875      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a66:	4a98      	ldr	r2, [pc, #608]	; (8000cc8 <HAL_GPIO_Init+0x2a4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d058      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a6c:	4a96      	ldr	r2, [pc, #600]	; (8000cc8 <HAL_GPIO_Init+0x2a4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d86f      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a72:	4a96      	ldr	r2, [pc, #600]	; (8000ccc <HAL_GPIO_Init+0x2a8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d052      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a78:	4a94      	ldr	r2, [pc, #592]	; (8000ccc <HAL_GPIO_Init+0x2a8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d869      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a7e:	4a94      	ldr	r2, [pc, #592]	; (8000cd0 <HAL_GPIO_Init+0x2ac>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d04c      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a84:	4a92      	ldr	r2, [pc, #584]	; (8000cd0 <HAL_GPIO_Init+0x2ac>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d863      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a8a:	4a92      	ldr	r2, [pc, #584]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d046      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
 8000a90:	4a90      	ldr	r2, [pc, #576]	; (8000cd4 <HAL_GPIO_Init+0x2b0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d85d      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a96:	2b12      	cmp	r3, #18
 8000a98:	d82a      	bhi.n	8000af0 <HAL_GPIO_Init+0xcc>
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d859      	bhi.n	8000b52 <HAL_GPIO_Init+0x12e>
 8000a9e:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <HAL_GPIO_Init+0x80>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000b1f 	.word	0x08000b1f
 8000aa8:	08000af9 	.word	0x08000af9
 8000aac:	08000b0b 	.word	0x08000b0b
 8000ab0:	08000b4d 	.word	0x08000b4d
 8000ab4:	08000b53 	.word	0x08000b53
 8000ab8:	08000b53 	.word	0x08000b53
 8000abc:	08000b53 	.word	0x08000b53
 8000ac0:	08000b53 	.word	0x08000b53
 8000ac4:	08000b53 	.word	0x08000b53
 8000ac8:	08000b53 	.word	0x08000b53
 8000acc:	08000b53 	.word	0x08000b53
 8000ad0:	08000b53 	.word	0x08000b53
 8000ad4:	08000b53 	.word	0x08000b53
 8000ad8:	08000b53 	.word	0x08000b53
 8000adc:	08000b53 	.word	0x08000b53
 8000ae0:	08000b53 	.word	0x08000b53
 8000ae4:	08000b53 	.word	0x08000b53
 8000ae8:	08000b01 	.word	0x08000b01
 8000aec:	08000b15 	.word	0x08000b15
 8000af0:	4a79      	ldr	r2, [pc, #484]	; (8000cd8 <HAL_GPIO_Init+0x2b4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d013      	beq.n	8000b1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000af6:	e02c      	b.n	8000b52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	623b      	str	r3, [r7, #32]
          break;
 8000afe:	e029      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	3304      	adds	r3, #4
 8000b06:	623b      	str	r3, [r7, #32]
          break;
 8000b08:	e024      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	3308      	adds	r3, #8
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e01f      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	330c      	adds	r3, #12
 8000b1a:	623b      	str	r3, [r7, #32]
          break;
 8000b1c:	e01a      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b26:	2304      	movs	r3, #4
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e013      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d105      	bne.n	8000b40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	611a      	str	r2, [r3, #16]
          break;
 8000b3e:	e009      	b.n	8000b54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b40:	2308      	movs	r3, #8
 8000b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	615a      	str	r2, [r3, #20]
          break;
 8000b4a:	e003      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
          break;
 8000b50:	e000      	b.n	8000b54 <HAL_GPIO_Init+0x130>
          break;
 8000b52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2bff      	cmp	r3, #255	; 0xff
 8000b58:	d801      	bhi.n	8000b5e <HAL_GPIO_Init+0x13a>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	e001      	b.n	8000b62 <HAL_GPIO_Init+0x13e>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3304      	adds	r3, #4
 8000b62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	2bff      	cmp	r3, #255	; 0xff
 8000b68:	d802      	bhi.n	8000b70 <HAL_GPIO_Init+0x14c>
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	e002      	b.n	8000b76 <HAL_GPIO_Init+0x152>
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	3b08      	subs	r3, #8
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	401a      	ands	r2, r3
 8000b88:	6a39      	ldr	r1, [r7, #32]
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b90:	431a      	orrs	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 80b1 	beq.w	8000d06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba4:	4b4d      	ldr	r3, [pc, #308]	; (8000cdc <HAL_GPIO_Init+0x2b8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a4c      	ldr	r2, [pc, #304]	; (8000cdc <HAL_GPIO_Init+0x2b8>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <HAL_GPIO_Init+0x2b8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bbc:	4a48      	ldr	r2, [pc, #288]	; (8000ce0 <HAL_GPIO_Init+0x2bc>)
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a40      	ldr	r2, [pc, #256]	; (8000ce4 <HAL_GPIO_Init+0x2c0>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d013      	beq.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a3f      	ldr	r2, [pc, #252]	; (8000ce8 <HAL_GPIO_Init+0x2c4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d00d      	beq.n	8000c0c <HAL_GPIO_Init+0x1e8>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a3e      	ldr	r2, [pc, #248]	; (8000cec <HAL_GPIO_Init+0x2c8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d007      	beq.n	8000c08 <HAL_GPIO_Init+0x1e4>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a3d      	ldr	r2, [pc, #244]	; (8000cf0 <HAL_GPIO_Init+0x2cc>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d101      	bne.n	8000c04 <HAL_GPIO_Init+0x1e0>
 8000c00:	2303      	movs	r3, #3
 8000c02:	e006      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c04:	2304      	movs	r3, #4
 8000c06:	e004      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e002      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e000      	b.n	8000c12 <HAL_GPIO_Init+0x1ee>
 8000c10:	2300      	movs	r3, #0
 8000c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c14:	f002 0203 	and.w	r2, r2, #3
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	4093      	lsls	r3, r2
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c22:	492f      	ldr	r1, [pc, #188]	; (8000ce0 <HAL_GPIO_Init+0x2bc>)
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	3302      	adds	r3, #2
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d006      	beq.n	8000c4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	492c      	ldr	r1, [pc, #176]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	608b      	str	r3, [r1, #8]
 8000c48:	e006      	b.n	8000c58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4928      	ldr	r1, [pc, #160]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c64:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	4922      	ldr	r1, [pc, #136]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	60cb      	str	r3, [r1, #12]
 8000c70:	e006      	b.n	8000c80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c74:	68da      	ldr	r2, [r3, #12]
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	491e      	ldr	r1, [pc, #120]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	4918      	ldr	r1, [pc, #96]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	604b      	str	r3, [r1, #4]
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4914      	ldr	r1, [pc, #80]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d021      	beq.n	8000cf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <HAL_GPIO_Init+0x2d0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
 8000cc0:	e021      	b.n	8000d06 <HAL_GPIO_Init+0x2e2>
 8000cc2:	bf00      	nop
 8000cc4:	10320000 	.word	0x10320000
 8000cc8:	10310000 	.word	0x10310000
 8000ccc:	10220000 	.word	0x10220000
 8000cd0:	10210000 	.word	0x10210000
 8000cd4:	10120000 	.word	0x10120000
 8000cd8:	10110000 	.word	0x10110000
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40011400 	.word	0x40011400
 8000cf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_GPIO_Init+0x304>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4909      	ldr	r1, [pc, #36]	; (8000d28 <HAL_GPIO_Init+0x304>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	3301      	adds	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	fa22 f303 	lsr.w	r3, r2, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f47f ae8e 	bne.w	8000a38 <HAL_GPIO_Init+0x14>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	372c      	adds	r7, #44	; 0x2c
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40010400 	.word	0x40010400

08000d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d3c:	787b      	ldrb	r3, [r7, #1]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d42:	887a      	ldrh	r2, [r7, #2]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d48:	e003      	b.n	8000d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4a:	887b      	ldrh	r3, [r7, #2]
 8000d4c:	041a      	lsls	r2, r3, #16
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	611a      	str	r2, [r3, #16]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4013      	ands	r3, r2
 8000d74:	041a      	lsls	r2, r3, #16
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43d9      	mvns	r1, r3
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	611a      	str	r2, [r3, #16]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
	...

08000d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e272      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8087 	beq.w	8000ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db0:	4b92      	ldr	r3, [pc, #584]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d00c      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dbc:	4b8f      	ldr	r3, [pc, #572]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d112      	bne.n	8000dee <HAL_RCC_OscConfig+0x5e>
 8000dc8:	4b8c      	ldr	r3, [pc, #560]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd4:	d10b      	bne.n	8000dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd6:	4b89      	ldr	r3, [pc, #548]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d06c      	beq.n	8000ebc <HAL_RCC_OscConfig+0x12c>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d168      	bne.n	8000ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e24c      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df6:	d106      	bne.n	8000e06 <HAL_RCC_OscConfig+0x76>
 8000df8:	4b80      	ldr	r3, [pc, #512]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a7f      	ldr	r2, [pc, #508]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e02e      	b.n	8000e64 <HAL_RCC_OscConfig+0xd4>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x98>
 8000e0e:	4b7b      	ldr	r3, [pc, #492]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7a      	ldr	r2, [pc, #488]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b78      	ldr	r3, [pc, #480]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a77      	ldr	r2, [pc, #476]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e01d      	b.n	8000e64 <HAL_RCC_OscConfig+0xd4>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e30:	d10c      	bne.n	8000e4c <HAL_RCC_OscConfig+0xbc>
 8000e32:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a71      	ldr	r2, [pc, #452]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	4b6f      	ldr	r3, [pc, #444]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a6e      	ldr	r2, [pc, #440]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e00b      	b.n	8000e64 <HAL_RCC_OscConfig+0xd4>
 8000e4c:	4b6b      	ldr	r3, [pc, #428]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a6a      	ldr	r2, [pc, #424]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	4b68      	ldr	r3, [pc, #416]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a67      	ldr	r2, [pc, #412]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d013      	beq.n	8000e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fc4a 	bl	8000704 <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e74:	f7ff fc46 	bl	8000704 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b64      	cmp	r3, #100	; 0x64
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e200      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e86:	4b5d      	ldr	r3, [pc, #372]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0xe4>
 8000e92:	e014      	b.n	8000ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc36 	bl	8000704 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fc32 	bl	8000704 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	; 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e1ec      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eae:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f0      	bne.n	8000e9c <HAL_RCC_OscConfig+0x10c>
 8000eba:	e000      	b.n	8000ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d063      	beq.n	8000f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eca:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00b      	beq.n	8000eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ed6:	4b49      	ldr	r3, [pc, #292]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d11c      	bne.n	8000f1c <HAL_RCC_OscConfig+0x18c>
 8000ee2:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d116      	bne.n	8000f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eee:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <HAL_RCC_OscConfig+0x176>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d001      	beq.n	8000f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e1c0      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4939      	ldr	r1, [pc, #228]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1a:	e03a      	b.n	8000f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d020      	beq.n	8000f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_RCC_OscConfig+0x270>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fbeb 	bl	8000704 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f32:	f7ff fbe7 	bl	8000704 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e1a1      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f44:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d0f0      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	4927      	ldr	r1, [pc, #156]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	600b      	str	r3, [r1, #0]
 8000f64:	e015      	b.n	8000f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <HAL_RCC_OscConfig+0x270>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fbca 	bl	8000704 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f74:	f7ff fbc6 	bl	8000704 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e180      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f0      	bne.n	8000f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d03a      	beq.n	8001014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d019      	beq.n	8000fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_RCC_OscConfig+0x274>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fbaa 	bl	8000704 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fba6 	bl	8000704 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e160      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 face 	bl	8001574 <RCC_Delay>
 8000fd8:	e01c      	b.n	8001014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_RCC_OscConfig+0x274>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe0:	f7ff fb90 	bl	8000704 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe6:	e00f      	b.n	8001008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fb8c 	bl	8000704 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d908      	bls.n	8001008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e146      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	42420000 	.word	0x42420000
 8001004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001008:	4b92      	ldr	r3, [pc, #584]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1e9      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a6 	beq.w	800116e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001026:	4b8b      	ldr	r3, [pc, #556]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10d      	bne.n	800104e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b88      	ldr	r3, [pc, #544]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a87      	ldr	r2, [pc, #540]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b85      	ldr	r3, [pc, #532]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800104a:	2301      	movs	r3, #1
 800104c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104e:	4b82      	ldr	r3, [pc, #520]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d118      	bne.n	800108c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800105a:	4b7f      	ldr	r3, [pc, #508]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a7e      	ldr	r2, [pc, #504]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001066:	f7ff fb4d 	bl	8000704 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800106e:	f7ff fb49 	bl	8000704 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b64      	cmp	r3, #100	; 0x64
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e103      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001080:	4b75      	ldr	r3, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x4c8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x312>
 8001094:	4b6f      	ldr	r3, [pc, #444]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a6e      	ldr	r2, [pc, #440]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	e02d      	b.n	80010fe <HAL_RCC_OscConfig+0x36e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x334>
 80010aa:	4b6a      	ldr	r3, [pc, #424]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a69      	ldr	r2, [pc, #420]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6213      	str	r3, [r2, #32]
 80010b6:	4b67      	ldr	r3, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a66      	ldr	r2, [pc, #408]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	6213      	str	r3, [r2, #32]
 80010c2:	e01c      	b.n	80010fe <HAL_RCC_OscConfig+0x36e>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d10c      	bne.n	80010e6 <HAL_RCC_OscConfig+0x356>
 80010cc:	4b61      	ldr	r3, [pc, #388]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a60      	ldr	r2, [pc, #384]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6213      	str	r3, [r2, #32]
 80010d8:	4b5e      	ldr	r3, [pc, #376]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4a5d      	ldr	r2, [pc, #372]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6213      	str	r3, [r2, #32]
 80010e4:	e00b      	b.n	80010fe <HAL_RCC_OscConfig+0x36e>
 80010e6:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4a5a      	ldr	r2, [pc, #360]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	6213      	str	r3, [r2, #32]
 80010f2:	4b58      	ldr	r3, [pc, #352]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4a57      	ldr	r2, [pc, #348]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	f023 0304 	bic.w	r3, r3, #4
 80010fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d015      	beq.n	8001132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fafd 	bl	8000704 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110c:	e00a      	b.n	8001124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110e:	f7ff faf9 	bl	8000704 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	f241 3288 	movw	r2, #5000	; 0x1388
 800111c:	4293      	cmp	r3, r2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e0b1      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0ee      	beq.n	800110e <HAL_RCC_OscConfig+0x37e>
 8001130:	e014      	b.n	800115c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001132:	f7ff fae7 	bl	8000704 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001138:	e00a      	b.n	8001150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800113a:	f7ff fae3 	bl	8000704 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	4293      	cmp	r3, r2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e09b      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001150:	4b40      	ldr	r3, [pc, #256]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1ee      	bne.n	800113a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d105      	bne.n	800116e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a3b      	ldr	r2, [pc, #236]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8087 	beq.w	8001286 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d061      	beq.n	8001248 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d146      	bne.n	800121a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <HAL_RCC_OscConfig+0x4cc>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fab7 	bl	8000704 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fab3 	bl	8000704 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e06d      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f0      	bne.n	800119a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c0:	d108      	bne.n	80011d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	4921      	ldr	r1, [pc, #132]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a19      	ldr	r1, [r3, #32]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	430b      	orrs	r3, r1
 80011e6:	491b      	ldr	r1, [pc, #108]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_RCC_OscConfig+0x4cc>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f2:	f7ff fa87 	bl	8000704 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011fa:	f7ff fa83 	bl	8000704 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e03d      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x46a>
 8001218:	e035      	b.n	8001286 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_RCC_OscConfig+0x4cc>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fa70 	bl	8000704 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001228:	f7ff fa6c 	bl	8000704 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e026      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_RCC_OscConfig+0x4c4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x498>
 8001246:	e01e      	b.n	8001286 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d107      	bne.n	8001260 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e019      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
 8001254:	40021000 	.word	0x40021000
 8001258:	40007000 	.word	0x40007000
 800125c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_OscConfig+0x500>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	429a      	cmp	r2, r3
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127e:	429a      	cmp	r2, r3
 8001280:	d001      	beq.n	8001286 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0d0      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012a8:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d910      	bls.n	80012d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 0207 	bic.w	r2, r3, #7
 80012be:	4965      	ldr	r1, [pc, #404]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b63      	ldr	r3, [pc, #396]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0b8      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001312:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	494d      	ldr	r1, [pc, #308]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d040      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d115      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e07f      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d107      	bne.n	8001362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e073      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001362:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e06b      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f023 0203 	bic.w	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4936      	ldr	r1, [pc, #216]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001384:	f7ff f9be 	bl	8000704 <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	e00a      	b.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138c:	f7ff f9ba 	bl	8000704 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	; 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e053      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 020c 	and.w	r2, r3, #12
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d1eb      	bne.n	800138c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d210      	bcs.n	80013e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 0207 	bic.w	r2, r3, #7
 80013ca:	4922      	ldr	r1, [pc, #136]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e032      	b.n	800144a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4916      	ldr	r1, [pc, #88]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001422:	f000 f821 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 8001426:	4602      	mov	r2, r0
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	490a      	ldr	r1, [pc, #40]	; (800145c <HAL_RCC_ClockConfig+0x1c8>)
 8001434:	5ccb      	ldrb	r3, [r1, r3]
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_RCC_ClockConfig+0x1cc>)
 800143c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1d0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f91c 	bl	8000680 <HAL_InitTick>

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000
 8001458:	40021000 	.word	0x40021000
 800145c:	08002c44 	.word	0x08002c44
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_RCC_GetSysClockFreq+0x94>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b04      	cmp	r3, #4
 8001490:	d002      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x30>
 8001492:	2b08      	cmp	r3, #8
 8001494:	d003      	beq.n	800149e <HAL_RCC_GetSysClockFreq+0x36>
 8001496:	e027      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_RCC_GetSysClockFreq+0x98>)
 800149a:	613b      	str	r3, [r7, #16]
      break;
 800149c:	e027      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	0c9b      	lsrs	r3, r3, #18
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d010      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_GetSysClockFreq+0x94>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	0c5b      	lsrs	r3, r3, #17
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ca:	fb03 f202 	mul.w	r2, r3, r2
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e004      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a0c      	ldr	r2, [pc, #48]	; (800150c <HAL_RCC_GetSysClockFreq+0xa4>)
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
 80014e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	613b      	str	r3, [r7, #16]
      break;
 80014e6:	e002      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_RCC_GetSysClockFreq+0x98>)
 80014ea:	613b      	str	r3, [r7, #16]
      break;
 80014ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ee:	693b      	ldr	r3, [r7, #16]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	007a1200 	.word	0x007a1200
 8001504:	08002c5c 	.word	0x08002c5c
 8001508:	08002c6c 	.word	0x08002c6c
 800150c:	003d0900 	.word	0x003d0900

08001510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001514:	4b02      	ldr	r3, [pc, #8]	; (8001520 <HAL_RCC_GetHCLKFreq+0x10>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000000 	.word	0x20000000

08001524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001528:	f7ff fff2 	bl	8001510 <HAL_RCC_GetHCLKFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4903      	ldr	r1, [pc, #12]	; (8001548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	08002c54 	.word	0x08002c54

0800154c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001550:	f7ff ffde 	bl	8001510 <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	0adb      	lsrs	r3, r3, #11
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	4903      	ldr	r1, [pc, #12]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000
 8001570:	08002c54 	.word	0x08002c54

08001574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <RCC_Delay+0x34>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <RCC_Delay+0x38>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a5b      	lsrs	r3, r3, #9
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001590:	bf00      	nop
  }
  while (Delay --);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	60fa      	str	r2, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f9      	bne.n	8001590 <RCC_Delay+0x1c>
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	20000000 	.word	0x20000000
 80015ac:	10624dd3 	.word	0x10624dd3

080015b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e076      	b.n	80016b0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d108      	bne.n	80015dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015d2:	d009      	beq.n	80015e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
 80015da:	e005      	b.n	80015e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d106      	bne.n	8001608 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7fe fef4 	bl	80003f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800161e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166c:	ea42 0103 	orr.w	r1, r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	0c1a      	lsrs	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f002 0204 	and.w	r2, r2, #4
 800168e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800169e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	4613      	mov	r3, r2
 80016c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d002      	beq.n	80016dc <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80016da:	e07d      	b.n	80017d8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d110      	bne.n	8001706 <HAL_SPI_Receive_IT+0x4e>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016ec:	d10b      	bne.n	8001706 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2204      	movs	r2, #4
 80016f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 f879 	bl	80017f4 <HAL_SPI_TransmitReceive_IT>
 8001702:	4603      	mov	r3, r0
 8001704:	e06d      	b.n	80017e2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_SPI_Receive_IT+0x5c>
 8001710:	2302      	movs	r3, #2
 8001712:	e066      	b.n	80017e2 <HAL_SPI_Receive_IT+0x12a>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_SPI_Receive_IT+0x70>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800172c:	e054      	b.n	80017d8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2204      	movs	r2, #4
 8001732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	88fa      	ldrh	r2, [r7, #6]
 8001746:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <HAL_SPI_Receive_IT+0x134>)
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
 8001774:	e002      	b.n	800177c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <HAL_SPI_Receive_IT+0x138>)
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001784:	d10f      	bne.n	80017a6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001794:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80017b4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c0:	2b40      	cmp	r3, #64	; 0x40
 80017c2:	d008      	beq.n	80017d6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e000      	b.n	80017d8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80017d6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	08001cf1 	.word	0x08001cf1
 80017f0:	08001ca7 	.word	0x08001ca7

080017f4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_SPI_TransmitReceive_IT+0x20>
 8001810:	2302      	movs	r3, #2
 8001812:	e075      	b.n	8001900 <HAL_SPI_TransmitReceive_IT+0x10c>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001822:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800182a:	7dbb      	ldrb	r3, [r7, #22]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d00d      	beq.n	800184c <HAL_SPI_TransmitReceive_IT+0x58>
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001836:	d106      	bne.n	8001846 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <HAL_SPI_TransmitReceive_IT+0x52>
 8001840:	7dbb      	ldrb	r3, [r7, #22]
 8001842:	2b04      	cmp	r3, #4
 8001844:	d002      	beq.n	800184c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001846:	2302      	movs	r3, #2
 8001848:	75fb      	strb	r3, [r7, #23]
    goto error;
 800184a:	e054      	b.n	80018f6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001862:	e048      	b.n	80018f6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b04      	cmp	r3, #4
 800186e:	d003      	beq.n	8001878 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2205      	movs	r2, #5
 8001874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4a17      	ldr	r2, [pc, #92]	; (800190c <HAL_SPI_TransmitReceive_IT+0x118>)
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
 80018b6:	e005      	b.n	80018c4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_SPI_TransmitReceive_IT+0x120>)
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <HAL_SPI_TransmitReceive_IT+0x124>)
 80018c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80018d2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018de:	2b40      	cmp	r3, #64	; 0x40
 80018e0:	d008      	beq.n	80018f4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80018f4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001900:	4618      	mov	r0, r3
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	08001be9 	.word	0x08001be9
 8001910:	08001c49 	.word	0x08001c49
 8001914:	08001b25 	.word	0x08001b25
 8001918:	08001b89 	.word	0x08001b89

0800191c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10e      	bne.n	800195c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	4798      	blx	r3
    return;
 800195a:	e0b7      	b.n	8001acc <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_SPI_IRQHandler+0x5e>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196c:	2b00      	cmp	r3, #0
 800196e:	d004      	beq.n	800197a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
    return;
 8001978:	e0a8      	b.n	8001acc <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_SPI_IRQHandler+0x74>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 809e 	beq.w	8001acc <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0320 	and.w	r3, r3, #32
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8098 	beq.w	8001acc <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d023      	beq.n	80019ee <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d011      	beq.n	80019d6 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	f043 0204 	orr.w	r2, r3, #4
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	e00b      	b.n	80019ee <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
        return;
 80019ec:	e06e      	b.n	8001acc <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d014      	beq.n	8001a22 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d04f      	beq.n	8001aca <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d104      	bne.n	8001a56 <HAL_SPI_IRQHandler+0x13a>
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d034      	beq.n	8001ac0 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0203 	bic.w	r2, r2, #3
 8001a64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d011      	beq.n	8001a92 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_SPI_IRQHandler+0x1b8>)
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe ff5a 	bl	8000934 <HAL_DMA_Abort_IT>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d016      	beq.n	8001ac8 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <HAL_SPI_IRQHandler+0x1b8>)
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe ff44 	bl	8000934 <HAL_DMA_Abort_IT>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001abe:	e003      	b.n	8001ac8 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f812 	bl	8001aea <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001ac6:	e000      	b.n	8001aca <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8001ac8:	bf00      	nop
    return;
 8001aca:	bf00      	nop
  }
}
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	08001afd 	.word	0x08001afd

08001ad8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff ffe7 	bl	8001aea <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f103 020c 	add.w	r2, r3, #12
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10f      	bne.n	8001b80 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b6e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f9d4 	bl	8001f28 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	330c      	adds	r3, #12
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10f      	bne.n	8001be0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f9a4 	bl	8001f28 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	1c9a      	adds	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10f      	bne.n	8001c40 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c2e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f974 	bl	8001f28 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	881a      	ldrh	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	1c9a      	adds	r2, r3, #2
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f945 	bl	8001f28 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f103 020c 	add.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	7812      	ldrb	r2, [r2, #0]
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f994 	bl	8002010 <SPI_CloseRx_ISR>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	b292      	uxth	r2, r2
 8001d04:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	1c9a      	adds	r2, r3, #2
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f971 	bl	8002010 <SPI_CloseRx_ISR>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d48:	f7fe fcdc 	bl	8000704 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d58:	f7fe fcd4 	bl	8000704 <HAL_GetTick>
 8001d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d5e:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	015b      	lsls	r3, r3, #5
 8001d64:	0d1b      	lsrs	r3, r3, #20
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d6e:	e054      	b.n	8001e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d050      	beq.n	8001e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d78:	f7fe fcc4 	bl	8000704 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d902      	bls.n	8001d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d13d      	bne.n	8001e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001da6:	d111      	bne.n	8001dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db0:	d004      	beq.n	8001dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dba:	d107      	bne.n	8001dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd4:	d10f      	bne.n	8001df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e017      	b.n	8001e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4013      	ands	r3, r2
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d19b      	bne.n	8001d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000

08001e48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e5c:	d111      	bne.n	8001e82 <SPI_EndRxTransaction+0x3a>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e66:	d004      	beq.n	8001e72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e70:	d107      	bne.n	8001e82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e80:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e8a:	d117      	bne.n	8001ebc <SPI_EndRxTransaction+0x74>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e94:	d112      	bne.n	8001ebc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7ff ff49 	bl	8001d38 <SPI_WaitFlagStateUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01a      	beq.n	8001ee2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	f043 0220 	orr.w	r2, r3, #32
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e013      	b.n	8001ee4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f7ff ff36 	bl	8001d38 <SPI_WaitFlagStateUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	f043 0220 	orr.w	r2, r3, #32
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e000      	b.n	8001ee4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2200      	movs	r2, #0
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff ff18 	bl	8001d38 <SPI_WaitFlagStateUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f043 0220 	orr.w	r2, r3, #32
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e000      	b.n	8001f20 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <SPI_CloseRxTx_ISR+0xe0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a35      	ldr	r2, [pc, #212]	; (800200c <SPI_CloseRxTx_ISR+0xe4>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a5b      	lsrs	r3, r3, #9
 8001f3c:	2264      	movs	r2, #100	; 0x64
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001f44:	f7fe fbde 	bl	8000704 <HAL_GetTick>
 8001f48:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0220 	bic.w	r2, r2, #32
 8001f58:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d106      	bne.n	8001f6e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f043 0220 	orr.w	r2, r3, #32
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001f6c:	e009      	b.n	8001f82 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0eb      	beq.n	8001f5a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	2164      	movs	r1, #100	; 0x64
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffb0 	bl	8001eec <SPI_EndRxTxTransaction>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10a      	bne.n	8001fbc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d115      	bne.n	8001ff0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d107      	bne.n	8001fe0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7fe f8b7 	bl	800014c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8001fde:	e00e      	b.n	8001ffe <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff fd75 	bl	8001ad8 <HAL_SPI_TxRxCpltCallback>
}
 8001fee:	e006      	b.n	8001ffe <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fd76 	bl	8001aea <HAL_SPI_ErrorCallback>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000
 800200c:	057619f1 	.word	0x057619f1

08002010 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002026:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002028:	f7fe fb6c 	bl	8000704 <HAL_GetTick>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	2164      	movs	r1, #100	; 0x64
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ff08 	bl	8001e48 <SPI_EndRxTransaction>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7fe f867 	bl	800014c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800207e:	e002      	b.n	8002086 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fd32 	bl	8001aea <HAL_SPI_ErrorCallback>
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e042      	b.n	8002126 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d106      	bne.n	80020ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7fe f9ed 	bl	8000494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2224      	movs	r2, #36	; 0x24
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f860 	bl	8002198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002106:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	4613      	mov	r3, r2
 800213a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b20      	cmp	r3, #32
 8002146:	d121      	bne.n	800218c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_UART_Transmit_IT+0x26>
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e01a      	b.n	800218e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	88fa      	ldrh	r2, [r7, #6]
 8002162:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	88fa      	ldrh	r2, [r7, #6]
 8002168:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2221      	movs	r2, #33	; 0x21
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002186:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021d2:	f023 030c 	bic.w	r3, r3, #12
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	430b      	orrs	r3, r1
 80021de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <UART_SetConfig+0x114>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d103      	bne.n	8002208 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002200:	f7ff f9a4 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	e002      	b.n	800220e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002208:	f7ff f98c 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
 800220c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	009a      	lsls	r2, r3, #2
 8002218:	441a      	add	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <UART_SetConfig+0x118>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	0119      	lsls	r1, r3, #4
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	009a      	lsls	r2, r3, #2
 8002238:	441a      	add	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fbb2 f2f3 	udiv	r2, r2, r3
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <UART_SetConfig+0x118>)
 8002246:	fba3 0302 	umull	r0, r3, r3, r2
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2064      	movs	r0, #100	; 0x64
 800224e:	fb00 f303 	mul.w	r3, r0, r3
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	3332      	adds	r3, #50	; 0x32
 8002258:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <UART_SetConfig+0x118>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002264:	4419      	add	r1, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	009a      	lsls	r2, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fbb2 f2f3 	udiv	r2, r2, r3
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <UART_SetConfig+0x118>)
 800227e:	fba3 0302 	umull	r0, r3, r3, r2
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2064      	movs	r0, #100	; 0x64
 8002286:	fb00 f303 	mul.w	r3, r0, r3
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	3332      	adds	r3, #50	; 0x32
 8002290:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <UART_SetConfig+0x118>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	f003 020f 	and.w	r2, r3, #15
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	440a      	add	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40013800 	.word	0x40013800
 80022b0:	51eb851f 	.word	0x51eb851f

080022b4 <siprintf>:
 80022b4:	b40e      	push	{r1, r2, r3}
 80022b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022ba:	b500      	push	{lr}
 80022bc:	b09c      	sub	sp, #112	; 0x70
 80022be:	ab1d      	add	r3, sp, #116	; 0x74
 80022c0:	9002      	str	r0, [sp, #8]
 80022c2:	9006      	str	r0, [sp, #24]
 80022c4:	9107      	str	r1, [sp, #28]
 80022c6:	9104      	str	r1, [sp, #16]
 80022c8:	4808      	ldr	r0, [pc, #32]	; (80022ec <siprintf+0x38>)
 80022ca:	4909      	ldr	r1, [pc, #36]	; (80022f0 <siprintf+0x3c>)
 80022cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80022d0:	9105      	str	r1, [sp, #20]
 80022d2:	6800      	ldr	r0, [r0, #0]
 80022d4:	a902      	add	r1, sp, #8
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	f000 f98e 	bl	80025f8 <_svfiprintf_r>
 80022dc:	2200      	movs	r2, #0
 80022de:	9b02      	ldr	r3, [sp, #8]
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	b01c      	add	sp, #112	; 0x70
 80022e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80022e8:	b003      	add	sp, #12
 80022ea:	4770      	bx	lr
 80022ec:	20000058 	.word	0x20000058
 80022f0:	ffff0208 	.word	0xffff0208

080022f4 <memset>:
 80022f4:	4603      	mov	r3, r0
 80022f6:	4402      	add	r2, r0
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d100      	bne.n	80022fe <memset+0xa>
 80022fc:	4770      	bx	lr
 80022fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002302:	e7f9      	b.n	80022f8 <memset+0x4>

08002304 <__errno>:
 8002304:	4b01      	ldr	r3, [pc, #4]	; (800230c <__errno+0x8>)
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000058 	.word	0x20000058

08002310 <__libc_init_array>:
 8002310:	b570      	push	{r4, r5, r6, lr}
 8002312:	2600      	movs	r6, #0
 8002314:	4d0c      	ldr	r5, [pc, #48]	; (8002348 <__libc_init_array+0x38>)
 8002316:	4c0d      	ldr	r4, [pc, #52]	; (800234c <__libc_init_array+0x3c>)
 8002318:	1b64      	subs	r4, r4, r5
 800231a:	10a4      	asrs	r4, r4, #2
 800231c:	42a6      	cmp	r6, r4
 800231e:	d109      	bne.n	8002334 <__libc_init_array+0x24>
 8002320:	f000 fc7a 	bl	8002c18 <_init>
 8002324:	2600      	movs	r6, #0
 8002326:	4d0a      	ldr	r5, [pc, #40]	; (8002350 <__libc_init_array+0x40>)
 8002328:	4c0a      	ldr	r4, [pc, #40]	; (8002354 <__libc_init_array+0x44>)
 800232a:	1b64      	subs	r4, r4, r5
 800232c:	10a4      	asrs	r4, r4, #2
 800232e:	42a6      	cmp	r6, r4
 8002330:	d105      	bne.n	800233e <__libc_init_array+0x2e>
 8002332:	bd70      	pop	{r4, r5, r6, pc}
 8002334:	f855 3b04 	ldr.w	r3, [r5], #4
 8002338:	4798      	blx	r3
 800233a:	3601      	adds	r6, #1
 800233c:	e7ee      	b.n	800231c <__libc_init_array+0xc>
 800233e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002342:	4798      	blx	r3
 8002344:	3601      	adds	r6, #1
 8002346:	e7f2      	b.n	800232e <__libc_init_array+0x1e>
 8002348:	08002ca4 	.word	0x08002ca4
 800234c:	08002ca4 	.word	0x08002ca4
 8002350:	08002ca4 	.word	0x08002ca4
 8002354:	08002ca8 	.word	0x08002ca8

08002358 <__retarget_lock_acquire_recursive>:
 8002358:	4770      	bx	lr

0800235a <__retarget_lock_release_recursive>:
 800235a:	4770      	bx	lr

0800235c <_free_r>:
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4605      	mov	r5, r0
 8002360:	2900      	cmp	r1, #0
 8002362:	d040      	beq.n	80023e6 <_free_r+0x8a>
 8002364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002368:	1f0c      	subs	r4, r1, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	bfb8      	it	lt
 800236e:	18e4      	addlt	r4, r4, r3
 8002370:	f000 f8dc 	bl	800252c <__malloc_lock>
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <_free_r+0x8c>)
 8002376:	6813      	ldr	r3, [r2, #0]
 8002378:	b933      	cbnz	r3, 8002388 <_free_r+0x2c>
 800237a:	6063      	str	r3, [r4, #4]
 800237c:	6014      	str	r4, [r2, #0]
 800237e:	4628      	mov	r0, r5
 8002380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002384:	f000 b8d8 	b.w	8002538 <__malloc_unlock>
 8002388:	42a3      	cmp	r3, r4
 800238a:	d908      	bls.n	800239e <_free_r+0x42>
 800238c:	6820      	ldr	r0, [r4, #0]
 800238e:	1821      	adds	r1, r4, r0
 8002390:	428b      	cmp	r3, r1
 8002392:	bf01      	itttt	eq
 8002394:	6819      	ldreq	r1, [r3, #0]
 8002396:	685b      	ldreq	r3, [r3, #4]
 8002398:	1809      	addeq	r1, r1, r0
 800239a:	6021      	streq	r1, [r4, #0]
 800239c:	e7ed      	b.n	800237a <_free_r+0x1e>
 800239e:	461a      	mov	r2, r3
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	b10b      	cbz	r3, 80023a8 <_free_r+0x4c>
 80023a4:	42a3      	cmp	r3, r4
 80023a6:	d9fa      	bls.n	800239e <_free_r+0x42>
 80023a8:	6811      	ldr	r1, [r2, #0]
 80023aa:	1850      	adds	r0, r2, r1
 80023ac:	42a0      	cmp	r0, r4
 80023ae:	d10b      	bne.n	80023c8 <_free_r+0x6c>
 80023b0:	6820      	ldr	r0, [r4, #0]
 80023b2:	4401      	add	r1, r0
 80023b4:	1850      	adds	r0, r2, r1
 80023b6:	4283      	cmp	r3, r0
 80023b8:	6011      	str	r1, [r2, #0]
 80023ba:	d1e0      	bne.n	800237e <_free_r+0x22>
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4408      	add	r0, r1
 80023c2:	6010      	str	r0, [r2, #0]
 80023c4:	6053      	str	r3, [r2, #4]
 80023c6:	e7da      	b.n	800237e <_free_r+0x22>
 80023c8:	d902      	bls.n	80023d0 <_free_r+0x74>
 80023ca:	230c      	movs	r3, #12
 80023cc:	602b      	str	r3, [r5, #0]
 80023ce:	e7d6      	b.n	800237e <_free_r+0x22>
 80023d0:	6820      	ldr	r0, [r4, #0]
 80023d2:	1821      	adds	r1, r4, r0
 80023d4:	428b      	cmp	r3, r1
 80023d6:	bf01      	itttt	eq
 80023d8:	6819      	ldreq	r1, [r3, #0]
 80023da:	685b      	ldreq	r3, [r3, #4]
 80023dc:	1809      	addeq	r1, r1, r0
 80023de:	6021      	streq	r1, [r4, #0]
 80023e0:	6063      	str	r3, [r4, #4]
 80023e2:	6054      	str	r4, [r2, #4]
 80023e4:	e7cb      	b.n	800237e <_free_r+0x22>
 80023e6:	bd38      	pop	{r3, r4, r5, pc}
 80023e8:	20000328 	.word	0x20000328

080023ec <sbrk_aligned>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	4e0e      	ldr	r6, [pc, #56]	; (8002428 <sbrk_aligned+0x3c>)
 80023f0:	460c      	mov	r4, r1
 80023f2:	6831      	ldr	r1, [r6, #0]
 80023f4:	4605      	mov	r5, r0
 80023f6:	b911      	cbnz	r1, 80023fe <sbrk_aligned+0x12>
 80023f8:	f000 fbaa 	bl	8002b50 <_sbrk_r>
 80023fc:	6030      	str	r0, [r6, #0]
 80023fe:	4621      	mov	r1, r4
 8002400:	4628      	mov	r0, r5
 8002402:	f000 fba5 	bl	8002b50 <_sbrk_r>
 8002406:	1c43      	adds	r3, r0, #1
 8002408:	d00a      	beq.n	8002420 <sbrk_aligned+0x34>
 800240a:	1cc4      	adds	r4, r0, #3
 800240c:	f024 0403 	bic.w	r4, r4, #3
 8002410:	42a0      	cmp	r0, r4
 8002412:	d007      	beq.n	8002424 <sbrk_aligned+0x38>
 8002414:	1a21      	subs	r1, r4, r0
 8002416:	4628      	mov	r0, r5
 8002418:	f000 fb9a 	bl	8002b50 <_sbrk_r>
 800241c:	3001      	adds	r0, #1
 800241e:	d101      	bne.n	8002424 <sbrk_aligned+0x38>
 8002420:	f04f 34ff 	mov.w	r4, #4294967295
 8002424:	4620      	mov	r0, r4
 8002426:	bd70      	pop	{r4, r5, r6, pc}
 8002428:	2000032c 	.word	0x2000032c

0800242c <_malloc_r>:
 800242c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002430:	1ccd      	adds	r5, r1, #3
 8002432:	f025 0503 	bic.w	r5, r5, #3
 8002436:	3508      	adds	r5, #8
 8002438:	2d0c      	cmp	r5, #12
 800243a:	bf38      	it	cc
 800243c:	250c      	movcc	r5, #12
 800243e:	2d00      	cmp	r5, #0
 8002440:	4607      	mov	r7, r0
 8002442:	db01      	blt.n	8002448 <_malloc_r+0x1c>
 8002444:	42a9      	cmp	r1, r5
 8002446:	d905      	bls.n	8002454 <_malloc_r+0x28>
 8002448:	230c      	movs	r3, #12
 800244a:	2600      	movs	r6, #0
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4630      	mov	r0, r6
 8002450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002454:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002528 <_malloc_r+0xfc>
 8002458:	f000 f868 	bl	800252c <__malloc_lock>
 800245c:	f8d8 3000 	ldr.w	r3, [r8]
 8002460:	461c      	mov	r4, r3
 8002462:	bb5c      	cbnz	r4, 80024bc <_malloc_r+0x90>
 8002464:	4629      	mov	r1, r5
 8002466:	4638      	mov	r0, r7
 8002468:	f7ff ffc0 	bl	80023ec <sbrk_aligned>
 800246c:	1c43      	adds	r3, r0, #1
 800246e:	4604      	mov	r4, r0
 8002470:	d155      	bne.n	800251e <_malloc_r+0xf2>
 8002472:	f8d8 4000 	ldr.w	r4, [r8]
 8002476:	4626      	mov	r6, r4
 8002478:	2e00      	cmp	r6, #0
 800247a:	d145      	bne.n	8002508 <_malloc_r+0xdc>
 800247c:	2c00      	cmp	r4, #0
 800247e:	d048      	beq.n	8002512 <_malloc_r+0xe6>
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	4631      	mov	r1, r6
 8002484:	4638      	mov	r0, r7
 8002486:	eb04 0903 	add.w	r9, r4, r3
 800248a:	f000 fb61 	bl	8002b50 <_sbrk_r>
 800248e:	4581      	cmp	r9, r0
 8002490:	d13f      	bne.n	8002512 <_malloc_r+0xe6>
 8002492:	6821      	ldr	r1, [r4, #0]
 8002494:	4638      	mov	r0, r7
 8002496:	1a6d      	subs	r5, r5, r1
 8002498:	4629      	mov	r1, r5
 800249a:	f7ff ffa7 	bl	80023ec <sbrk_aligned>
 800249e:	3001      	adds	r0, #1
 80024a0:	d037      	beq.n	8002512 <_malloc_r+0xe6>
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	442b      	add	r3, r5
 80024a6:	6023      	str	r3, [r4, #0]
 80024a8:	f8d8 3000 	ldr.w	r3, [r8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d038      	beq.n	8002522 <_malloc_r+0xf6>
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	42a2      	cmp	r2, r4
 80024b4:	d12b      	bne.n	800250e <_malloc_r+0xe2>
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	e00f      	b.n	80024dc <_malloc_r+0xb0>
 80024bc:	6822      	ldr	r2, [r4, #0]
 80024be:	1b52      	subs	r2, r2, r5
 80024c0:	d41f      	bmi.n	8002502 <_malloc_r+0xd6>
 80024c2:	2a0b      	cmp	r2, #11
 80024c4:	d917      	bls.n	80024f6 <_malloc_r+0xca>
 80024c6:	1961      	adds	r1, r4, r5
 80024c8:	42a3      	cmp	r3, r4
 80024ca:	6025      	str	r5, [r4, #0]
 80024cc:	bf18      	it	ne
 80024ce:	6059      	strne	r1, [r3, #4]
 80024d0:	6863      	ldr	r3, [r4, #4]
 80024d2:	bf08      	it	eq
 80024d4:	f8c8 1000 	streq.w	r1, [r8]
 80024d8:	5162      	str	r2, [r4, r5]
 80024da:	604b      	str	r3, [r1, #4]
 80024dc:	4638      	mov	r0, r7
 80024de:	f104 060b 	add.w	r6, r4, #11
 80024e2:	f000 f829 	bl	8002538 <__malloc_unlock>
 80024e6:	f026 0607 	bic.w	r6, r6, #7
 80024ea:	1d23      	adds	r3, r4, #4
 80024ec:	1af2      	subs	r2, r6, r3
 80024ee:	d0ae      	beq.n	800244e <_malloc_r+0x22>
 80024f0:	1b9b      	subs	r3, r3, r6
 80024f2:	50a3      	str	r3, [r4, r2]
 80024f4:	e7ab      	b.n	800244e <_malloc_r+0x22>
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	6862      	ldr	r2, [r4, #4]
 80024fa:	d1dd      	bne.n	80024b8 <_malloc_r+0x8c>
 80024fc:	f8c8 2000 	str.w	r2, [r8]
 8002500:	e7ec      	b.n	80024dc <_malloc_r+0xb0>
 8002502:	4623      	mov	r3, r4
 8002504:	6864      	ldr	r4, [r4, #4]
 8002506:	e7ac      	b.n	8002462 <_malloc_r+0x36>
 8002508:	4634      	mov	r4, r6
 800250a:	6876      	ldr	r6, [r6, #4]
 800250c:	e7b4      	b.n	8002478 <_malloc_r+0x4c>
 800250e:	4613      	mov	r3, r2
 8002510:	e7cc      	b.n	80024ac <_malloc_r+0x80>
 8002512:	230c      	movs	r3, #12
 8002514:	4638      	mov	r0, r7
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	f000 f80e 	bl	8002538 <__malloc_unlock>
 800251c:	e797      	b.n	800244e <_malloc_r+0x22>
 800251e:	6025      	str	r5, [r4, #0]
 8002520:	e7dc      	b.n	80024dc <_malloc_r+0xb0>
 8002522:	605b      	str	r3, [r3, #4]
 8002524:	deff      	udf	#255	; 0xff
 8002526:	bf00      	nop
 8002528:	20000328 	.word	0x20000328

0800252c <__malloc_lock>:
 800252c:	4801      	ldr	r0, [pc, #4]	; (8002534 <__malloc_lock+0x8>)
 800252e:	f7ff bf13 	b.w	8002358 <__retarget_lock_acquire_recursive>
 8002532:	bf00      	nop
 8002534:	20000324 	.word	0x20000324

08002538 <__malloc_unlock>:
 8002538:	4801      	ldr	r0, [pc, #4]	; (8002540 <__malloc_unlock+0x8>)
 800253a:	f7ff bf0e 	b.w	800235a <__retarget_lock_release_recursive>
 800253e:	bf00      	nop
 8002540:	20000324 	.word	0x20000324

08002544 <__ssputs_r>:
 8002544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002548:	461f      	mov	r7, r3
 800254a:	688e      	ldr	r6, [r1, #8]
 800254c:	4682      	mov	sl, r0
 800254e:	42be      	cmp	r6, r7
 8002550:	460c      	mov	r4, r1
 8002552:	4690      	mov	r8, r2
 8002554:	680b      	ldr	r3, [r1, #0]
 8002556:	d82c      	bhi.n	80025b2 <__ssputs_r+0x6e>
 8002558:	898a      	ldrh	r2, [r1, #12]
 800255a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800255e:	d026      	beq.n	80025ae <__ssputs_r+0x6a>
 8002560:	6965      	ldr	r5, [r4, #20]
 8002562:	6909      	ldr	r1, [r1, #16]
 8002564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002568:	eba3 0901 	sub.w	r9, r3, r1
 800256c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002570:	1c7b      	adds	r3, r7, #1
 8002572:	444b      	add	r3, r9
 8002574:	106d      	asrs	r5, r5, #1
 8002576:	429d      	cmp	r5, r3
 8002578:	bf38      	it	cc
 800257a:	461d      	movcc	r5, r3
 800257c:	0553      	lsls	r3, r2, #21
 800257e:	d527      	bpl.n	80025d0 <__ssputs_r+0x8c>
 8002580:	4629      	mov	r1, r5
 8002582:	f7ff ff53 	bl	800242c <_malloc_r>
 8002586:	4606      	mov	r6, r0
 8002588:	b360      	cbz	r0, 80025e4 <__ssputs_r+0xa0>
 800258a:	464a      	mov	r2, r9
 800258c:	6921      	ldr	r1, [r4, #16]
 800258e:	f000 fafd 	bl	8002b8c <memcpy>
 8002592:	89a3      	ldrh	r3, [r4, #12]
 8002594:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259c:	81a3      	strh	r3, [r4, #12]
 800259e:	6126      	str	r6, [r4, #16]
 80025a0:	444e      	add	r6, r9
 80025a2:	6026      	str	r6, [r4, #0]
 80025a4:	463e      	mov	r6, r7
 80025a6:	6165      	str	r5, [r4, #20]
 80025a8:	eba5 0509 	sub.w	r5, r5, r9
 80025ac:	60a5      	str	r5, [r4, #8]
 80025ae:	42be      	cmp	r6, r7
 80025b0:	d900      	bls.n	80025b4 <__ssputs_r+0x70>
 80025b2:	463e      	mov	r6, r7
 80025b4:	4632      	mov	r2, r6
 80025b6:	4641      	mov	r1, r8
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	f000 faaf 	bl	8002b1c <memmove>
 80025be:	2000      	movs	r0, #0
 80025c0:	68a3      	ldr	r3, [r4, #8]
 80025c2:	1b9b      	subs	r3, r3, r6
 80025c4:	60a3      	str	r3, [r4, #8]
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	4433      	add	r3, r6
 80025ca:	6023      	str	r3, [r4, #0]
 80025cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d0:	462a      	mov	r2, r5
 80025d2:	f000 fae9 	bl	8002ba8 <_realloc_r>
 80025d6:	4606      	mov	r6, r0
 80025d8:	2800      	cmp	r0, #0
 80025da:	d1e0      	bne.n	800259e <__ssputs_r+0x5a>
 80025dc:	4650      	mov	r0, sl
 80025de:	6921      	ldr	r1, [r4, #16]
 80025e0:	f7ff febc 	bl	800235c <_free_r>
 80025e4:	230c      	movs	r3, #12
 80025e6:	f8ca 3000 	str.w	r3, [sl]
 80025ea:	89a3      	ldrh	r3, [r4, #12]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f4:	81a3      	strh	r3, [r4, #12]
 80025f6:	e7e9      	b.n	80025cc <__ssputs_r+0x88>

080025f8 <_svfiprintf_r>:
 80025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fc:	4698      	mov	r8, r3
 80025fe:	898b      	ldrh	r3, [r1, #12]
 8002600:	4607      	mov	r7, r0
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	460d      	mov	r5, r1
 8002606:	4614      	mov	r4, r2
 8002608:	b09d      	sub	sp, #116	; 0x74
 800260a:	d50e      	bpl.n	800262a <_svfiprintf_r+0x32>
 800260c:	690b      	ldr	r3, [r1, #16]
 800260e:	b963      	cbnz	r3, 800262a <_svfiprintf_r+0x32>
 8002610:	2140      	movs	r1, #64	; 0x40
 8002612:	f7ff ff0b 	bl	800242c <_malloc_r>
 8002616:	6028      	str	r0, [r5, #0]
 8002618:	6128      	str	r0, [r5, #16]
 800261a:	b920      	cbnz	r0, 8002626 <_svfiprintf_r+0x2e>
 800261c:	230c      	movs	r3, #12
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	e0d0      	b.n	80027c8 <_svfiprintf_r+0x1d0>
 8002626:	2340      	movs	r3, #64	; 0x40
 8002628:	616b      	str	r3, [r5, #20]
 800262a:	2300      	movs	r3, #0
 800262c:	9309      	str	r3, [sp, #36]	; 0x24
 800262e:	2320      	movs	r3, #32
 8002630:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002634:	2330      	movs	r3, #48	; 0x30
 8002636:	f04f 0901 	mov.w	r9, #1
 800263a:	f8cd 800c 	str.w	r8, [sp, #12]
 800263e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80027e0 <_svfiprintf_r+0x1e8>
 8002642:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002646:	4623      	mov	r3, r4
 8002648:	469a      	mov	sl, r3
 800264a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800264e:	b10a      	cbz	r2, 8002654 <_svfiprintf_r+0x5c>
 8002650:	2a25      	cmp	r2, #37	; 0x25
 8002652:	d1f9      	bne.n	8002648 <_svfiprintf_r+0x50>
 8002654:	ebba 0b04 	subs.w	fp, sl, r4
 8002658:	d00b      	beq.n	8002672 <_svfiprintf_r+0x7a>
 800265a:	465b      	mov	r3, fp
 800265c:	4622      	mov	r2, r4
 800265e:	4629      	mov	r1, r5
 8002660:	4638      	mov	r0, r7
 8002662:	f7ff ff6f 	bl	8002544 <__ssputs_r>
 8002666:	3001      	adds	r0, #1
 8002668:	f000 80a9 	beq.w	80027be <_svfiprintf_r+0x1c6>
 800266c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800266e:	445a      	add	r2, fp
 8002670:	9209      	str	r2, [sp, #36]	; 0x24
 8002672:	f89a 3000 	ldrb.w	r3, [sl]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80a1 	beq.w	80027be <_svfiprintf_r+0x1c6>
 800267c:	2300      	movs	r3, #0
 800267e:	f04f 32ff 	mov.w	r2, #4294967295
 8002682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002686:	f10a 0a01 	add.w	sl, sl, #1
 800268a:	9304      	str	r3, [sp, #16]
 800268c:	9307      	str	r3, [sp, #28]
 800268e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002692:	931a      	str	r3, [sp, #104]	; 0x68
 8002694:	4654      	mov	r4, sl
 8002696:	2205      	movs	r2, #5
 8002698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800269c:	4850      	ldr	r0, [pc, #320]	; (80027e0 <_svfiprintf_r+0x1e8>)
 800269e:	f000 fa67 	bl	8002b70 <memchr>
 80026a2:	9a04      	ldr	r2, [sp, #16]
 80026a4:	b9d8      	cbnz	r0, 80026de <_svfiprintf_r+0xe6>
 80026a6:	06d0      	lsls	r0, r2, #27
 80026a8:	bf44      	itt	mi
 80026aa:	2320      	movmi	r3, #32
 80026ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026b0:	0711      	lsls	r1, r2, #28
 80026b2:	bf44      	itt	mi
 80026b4:	232b      	movmi	r3, #43	; 0x2b
 80026b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ba:	f89a 3000 	ldrb.w	r3, [sl]
 80026be:	2b2a      	cmp	r3, #42	; 0x2a
 80026c0:	d015      	beq.n	80026ee <_svfiprintf_r+0xf6>
 80026c2:	4654      	mov	r4, sl
 80026c4:	2000      	movs	r0, #0
 80026c6:	f04f 0c0a 	mov.w	ip, #10
 80026ca:	9a07      	ldr	r2, [sp, #28]
 80026cc:	4621      	mov	r1, r4
 80026ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026d2:	3b30      	subs	r3, #48	; 0x30
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	d94d      	bls.n	8002774 <_svfiprintf_r+0x17c>
 80026d8:	b1b0      	cbz	r0, 8002708 <_svfiprintf_r+0x110>
 80026da:	9207      	str	r2, [sp, #28]
 80026dc:	e014      	b.n	8002708 <_svfiprintf_r+0x110>
 80026de:	eba0 0308 	sub.w	r3, r0, r8
 80026e2:	fa09 f303 	lsl.w	r3, r9, r3
 80026e6:	4313      	orrs	r3, r2
 80026e8:	46a2      	mov	sl, r4
 80026ea:	9304      	str	r3, [sp, #16]
 80026ec:	e7d2      	b.n	8002694 <_svfiprintf_r+0x9c>
 80026ee:	9b03      	ldr	r3, [sp, #12]
 80026f0:	1d19      	adds	r1, r3, #4
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	9103      	str	r1, [sp, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bfbb      	ittet	lt
 80026fa:	425b      	neglt	r3, r3
 80026fc:	f042 0202 	orrlt.w	r2, r2, #2
 8002700:	9307      	strge	r3, [sp, #28]
 8002702:	9307      	strlt	r3, [sp, #28]
 8002704:	bfb8      	it	lt
 8002706:	9204      	strlt	r2, [sp, #16]
 8002708:	7823      	ldrb	r3, [r4, #0]
 800270a:	2b2e      	cmp	r3, #46	; 0x2e
 800270c:	d10c      	bne.n	8002728 <_svfiprintf_r+0x130>
 800270e:	7863      	ldrb	r3, [r4, #1]
 8002710:	2b2a      	cmp	r3, #42	; 0x2a
 8002712:	d134      	bne.n	800277e <_svfiprintf_r+0x186>
 8002714:	9b03      	ldr	r3, [sp, #12]
 8002716:	3402      	adds	r4, #2
 8002718:	1d1a      	adds	r2, r3, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	9203      	str	r2, [sp, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	bfb8      	it	lt
 8002722:	f04f 33ff 	movlt.w	r3, #4294967295
 8002726:	9305      	str	r3, [sp, #20]
 8002728:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80027e4 <_svfiprintf_r+0x1ec>
 800272c:	2203      	movs	r2, #3
 800272e:	4650      	mov	r0, sl
 8002730:	7821      	ldrb	r1, [r4, #0]
 8002732:	f000 fa1d 	bl	8002b70 <memchr>
 8002736:	b138      	cbz	r0, 8002748 <_svfiprintf_r+0x150>
 8002738:	2240      	movs	r2, #64	; 0x40
 800273a:	9b04      	ldr	r3, [sp, #16]
 800273c:	eba0 000a 	sub.w	r0, r0, sl
 8002740:	4082      	lsls	r2, r0
 8002742:	4313      	orrs	r3, r2
 8002744:	3401      	adds	r4, #1
 8002746:	9304      	str	r3, [sp, #16]
 8002748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800274c:	2206      	movs	r2, #6
 800274e:	4826      	ldr	r0, [pc, #152]	; (80027e8 <_svfiprintf_r+0x1f0>)
 8002750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002754:	f000 fa0c 	bl	8002b70 <memchr>
 8002758:	2800      	cmp	r0, #0
 800275a:	d038      	beq.n	80027ce <_svfiprintf_r+0x1d6>
 800275c:	4b23      	ldr	r3, [pc, #140]	; (80027ec <_svfiprintf_r+0x1f4>)
 800275e:	bb1b      	cbnz	r3, 80027a8 <_svfiprintf_r+0x1b0>
 8002760:	9b03      	ldr	r3, [sp, #12]
 8002762:	3307      	adds	r3, #7
 8002764:	f023 0307 	bic.w	r3, r3, #7
 8002768:	3308      	adds	r3, #8
 800276a:	9303      	str	r3, [sp, #12]
 800276c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800276e:	4433      	add	r3, r6
 8002770:	9309      	str	r3, [sp, #36]	; 0x24
 8002772:	e768      	b.n	8002646 <_svfiprintf_r+0x4e>
 8002774:	460c      	mov	r4, r1
 8002776:	2001      	movs	r0, #1
 8002778:	fb0c 3202 	mla	r2, ip, r2, r3
 800277c:	e7a6      	b.n	80026cc <_svfiprintf_r+0xd4>
 800277e:	2300      	movs	r3, #0
 8002780:	f04f 0c0a 	mov.w	ip, #10
 8002784:	4619      	mov	r1, r3
 8002786:	3401      	adds	r4, #1
 8002788:	9305      	str	r3, [sp, #20]
 800278a:	4620      	mov	r0, r4
 800278c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002790:	3a30      	subs	r2, #48	; 0x30
 8002792:	2a09      	cmp	r2, #9
 8002794:	d903      	bls.n	800279e <_svfiprintf_r+0x1a6>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0c6      	beq.n	8002728 <_svfiprintf_r+0x130>
 800279a:	9105      	str	r1, [sp, #20]
 800279c:	e7c4      	b.n	8002728 <_svfiprintf_r+0x130>
 800279e:	4604      	mov	r4, r0
 80027a0:	2301      	movs	r3, #1
 80027a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80027a6:	e7f0      	b.n	800278a <_svfiprintf_r+0x192>
 80027a8:	ab03      	add	r3, sp, #12
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	462a      	mov	r2, r5
 80027ae:	4638      	mov	r0, r7
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <_svfiprintf_r+0x1f8>)
 80027b2:	a904      	add	r1, sp, #16
 80027b4:	f3af 8000 	nop.w
 80027b8:	1c42      	adds	r2, r0, #1
 80027ba:	4606      	mov	r6, r0
 80027bc:	d1d6      	bne.n	800276c <_svfiprintf_r+0x174>
 80027be:	89ab      	ldrh	r3, [r5, #12]
 80027c0:	065b      	lsls	r3, r3, #25
 80027c2:	f53f af2d 	bmi.w	8002620 <_svfiprintf_r+0x28>
 80027c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027c8:	b01d      	add	sp, #116	; 0x74
 80027ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ce:	ab03      	add	r3, sp, #12
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	462a      	mov	r2, r5
 80027d4:	4638      	mov	r0, r7
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <_svfiprintf_r+0x1f8>)
 80027d8:	a904      	add	r1, sp, #16
 80027da:	f000 f87d 	bl	80028d8 <_printf_i>
 80027de:	e7eb      	b.n	80027b8 <_svfiprintf_r+0x1c0>
 80027e0:	08002c6e 	.word	0x08002c6e
 80027e4:	08002c74 	.word	0x08002c74
 80027e8:	08002c78 	.word	0x08002c78
 80027ec:	00000000 	.word	0x00000000
 80027f0:	08002545 	.word	0x08002545

080027f4 <_printf_common>:
 80027f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f8:	4616      	mov	r6, r2
 80027fa:	4699      	mov	r9, r3
 80027fc:	688a      	ldr	r2, [r1, #8]
 80027fe:	690b      	ldr	r3, [r1, #16]
 8002800:	4607      	mov	r7, r0
 8002802:	4293      	cmp	r3, r2
 8002804:	bfb8      	it	lt
 8002806:	4613      	movlt	r3, r2
 8002808:	6033      	str	r3, [r6, #0]
 800280a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800280e:	460c      	mov	r4, r1
 8002810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002814:	b10a      	cbz	r2, 800281a <_printf_common+0x26>
 8002816:	3301      	adds	r3, #1
 8002818:	6033      	str	r3, [r6, #0]
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	0699      	lsls	r1, r3, #26
 800281e:	bf42      	ittt	mi
 8002820:	6833      	ldrmi	r3, [r6, #0]
 8002822:	3302      	addmi	r3, #2
 8002824:	6033      	strmi	r3, [r6, #0]
 8002826:	6825      	ldr	r5, [r4, #0]
 8002828:	f015 0506 	ands.w	r5, r5, #6
 800282c:	d106      	bne.n	800283c <_printf_common+0x48>
 800282e:	f104 0a19 	add.w	sl, r4, #25
 8002832:	68e3      	ldr	r3, [r4, #12]
 8002834:	6832      	ldr	r2, [r6, #0]
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	42ab      	cmp	r3, r5
 800283a:	dc2b      	bgt.n	8002894 <_printf_common+0xa0>
 800283c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002840:	1e13      	subs	r3, r2, #0
 8002842:	6822      	ldr	r2, [r4, #0]
 8002844:	bf18      	it	ne
 8002846:	2301      	movne	r3, #1
 8002848:	0692      	lsls	r2, r2, #26
 800284a:	d430      	bmi.n	80028ae <_printf_common+0xba>
 800284c:	4649      	mov	r1, r9
 800284e:	4638      	mov	r0, r7
 8002850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002854:	47c0      	blx	r8
 8002856:	3001      	adds	r0, #1
 8002858:	d023      	beq.n	80028a2 <_printf_common+0xae>
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	6922      	ldr	r2, [r4, #16]
 800285e:	f003 0306 	and.w	r3, r3, #6
 8002862:	2b04      	cmp	r3, #4
 8002864:	bf14      	ite	ne
 8002866:	2500      	movne	r5, #0
 8002868:	6833      	ldreq	r3, [r6, #0]
 800286a:	f04f 0600 	mov.w	r6, #0
 800286e:	bf08      	it	eq
 8002870:	68e5      	ldreq	r5, [r4, #12]
 8002872:	f104 041a 	add.w	r4, r4, #26
 8002876:	bf08      	it	eq
 8002878:	1aed      	subeq	r5, r5, r3
 800287a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800287e:	bf08      	it	eq
 8002880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002884:	4293      	cmp	r3, r2
 8002886:	bfc4      	itt	gt
 8002888:	1a9b      	subgt	r3, r3, r2
 800288a:	18ed      	addgt	r5, r5, r3
 800288c:	42b5      	cmp	r5, r6
 800288e:	d11a      	bne.n	80028c6 <_printf_common+0xd2>
 8002890:	2000      	movs	r0, #0
 8002892:	e008      	b.n	80028a6 <_printf_common+0xb2>
 8002894:	2301      	movs	r3, #1
 8002896:	4652      	mov	r2, sl
 8002898:	4649      	mov	r1, r9
 800289a:	4638      	mov	r0, r7
 800289c:	47c0      	blx	r8
 800289e:	3001      	adds	r0, #1
 80028a0:	d103      	bne.n	80028aa <_printf_common+0xb6>
 80028a2:	f04f 30ff 	mov.w	r0, #4294967295
 80028a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028aa:	3501      	adds	r5, #1
 80028ac:	e7c1      	b.n	8002832 <_printf_common+0x3e>
 80028ae:	2030      	movs	r0, #48	; 0x30
 80028b0:	18e1      	adds	r1, r4, r3
 80028b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028bc:	4422      	add	r2, r4
 80028be:	3302      	adds	r3, #2
 80028c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028c4:	e7c2      	b.n	800284c <_printf_common+0x58>
 80028c6:	2301      	movs	r3, #1
 80028c8:	4622      	mov	r2, r4
 80028ca:	4649      	mov	r1, r9
 80028cc:	4638      	mov	r0, r7
 80028ce:	47c0      	blx	r8
 80028d0:	3001      	adds	r0, #1
 80028d2:	d0e6      	beq.n	80028a2 <_printf_common+0xae>
 80028d4:	3601      	adds	r6, #1
 80028d6:	e7d9      	b.n	800288c <_printf_common+0x98>

080028d8 <_printf_i>:
 80028d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028dc:	7e0f      	ldrb	r7, [r1, #24]
 80028de:	4691      	mov	r9, r2
 80028e0:	2f78      	cmp	r7, #120	; 0x78
 80028e2:	4680      	mov	r8, r0
 80028e4:	460c      	mov	r4, r1
 80028e6:	469a      	mov	sl, r3
 80028e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028ee:	d807      	bhi.n	8002900 <_printf_i+0x28>
 80028f0:	2f62      	cmp	r7, #98	; 0x62
 80028f2:	d80a      	bhi.n	800290a <_printf_i+0x32>
 80028f4:	2f00      	cmp	r7, #0
 80028f6:	f000 80d5 	beq.w	8002aa4 <_printf_i+0x1cc>
 80028fa:	2f58      	cmp	r7, #88	; 0x58
 80028fc:	f000 80c1 	beq.w	8002a82 <_printf_i+0x1aa>
 8002900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002908:	e03a      	b.n	8002980 <_printf_i+0xa8>
 800290a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800290e:	2b15      	cmp	r3, #21
 8002910:	d8f6      	bhi.n	8002900 <_printf_i+0x28>
 8002912:	a101      	add	r1, pc, #4	; (adr r1, 8002918 <_printf_i+0x40>)
 8002914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002918:	08002971 	.word	0x08002971
 800291c:	08002985 	.word	0x08002985
 8002920:	08002901 	.word	0x08002901
 8002924:	08002901 	.word	0x08002901
 8002928:	08002901 	.word	0x08002901
 800292c:	08002901 	.word	0x08002901
 8002930:	08002985 	.word	0x08002985
 8002934:	08002901 	.word	0x08002901
 8002938:	08002901 	.word	0x08002901
 800293c:	08002901 	.word	0x08002901
 8002940:	08002901 	.word	0x08002901
 8002944:	08002a8b 	.word	0x08002a8b
 8002948:	080029b1 	.word	0x080029b1
 800294c:	08002a45 	.word	0x08002a45
 8002950:	08002901 	.word	0x08002901
 8002954:	08002901 	.word	0x08002901
 8002958:	08002aad 	.word	0x08002aad
 800295c:	08002901 	.word	0x08002901
 8002960:	080029b1 	.word	0x080029b1
 8002964:	08002901 	.word	0x08002901
 8002968:	08002901 	.word	0x08002901
 800296c:	08002a4d 	.word	0x08002a4d
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	1d1a      	adds	r2, r3, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	602a      	str	r2, [r5, #0]
 8002978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800297c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002980:	2301      	movs	r3, #1
 8002982:	e0a0      	b.n	8002ac6 <_printf_i+0x1ee>
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	682b      	ldr	r3, [r5, #0]
 8002988:	0607      	lsls	r7, r0, #24
 800298a:	f103 0104 	add.w	r1, r3, #4
 800298e:	6029      	str	r1, [r5, #0]
 8002990:	d501      	bpl.n	8002996 <_printf_i+0xbe>
 8002992:	681e      	ldr	r6, [r3, #0]
 8002994:	e003      	b.n	800299e <_printf_i+0xc6>
 8002996:	0646      	lsls	r6, r0, #25
 8002998:	d5fb      	bpl.n	8002992 <_printf_i+0xba>
 800299a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800299e:	2e00      	cmp	r6, #0
 80029a0:	da03      	bge.n	80029aa <_printf_i+0xd2>
 80029a2:	232d      	movs	r3, #45	; 0x2d
 80029a4:	4276      	negs	r6, r6
 80029a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029aa:	230a      	movs	r3, #10
 80029ac:	4859      	ldr	r0, [pc, #356]	; (8002b14 <_printf_i+0x23c>)
 80029ae:	e012      	b.n	80029d6 <_printf_i+0xfe>
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	6820      	ldr	r0, [r4, #0]
 80029b4:	1d19      	adds	r1, r3, #4
 80029b6:	6029      	str	r1, [r5, #0]
 80029b8:	0605      	lsls	r5, r0, #24
 80029ba:	d501      	bpl.n	80029c0 <_printf_i+0xe8>
 80029bc:	681e      	ldr	r6, [r3, #0]
 80029be:	e002      	b.n	80029c6 <_printf_i+0xee>
 80029c0:	0641      	lsls	r1, r0, #25
 80029c2:	d5fb      	bpl.n	80029bc <_printf_i+0xe4>
 80029c4:	881e      	ldrh	r6, [r3, #0]
 80029c6:	2f6f      	cmp	r7, #111	; 0x6f
 80029c8:	bf0c      	ite	eq
 80029ca:	2308      	moveq	r3, #8
 80029cc:	230a      	movne	r3, #10
 80029ce:	4851      	ldr	r0, [pc, #324]	; (8002b14 <_printf_i+0x23c>)
 80029d0:	2100      	movs	r1, #0
 80029d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029d6:	6865      	ldr	r5, [r4, #4]
 80029d8:	2d00      	cmp	r5, #0
 80029da:	bfa8      	it	ge
 80029dc:	6821      	ldrge	r1, [r4, #0]
 80029de:	60a5      	str	r5, [r4, #8]
 80029e0:	bfa4      	itt	ge
 80029e2:	f021 0104 	bicge.w	r1, r1, #4
 80029e6:	6021      	strge	r1, [r4, #0]
 80029e8:	b90e      	cbnz	r6, 80029ee <_printf_i+0x116>
 80029ea:	2d00      	cmp	r5, #0
 80029ec:	d04b      	beq.n	8002a86 <_printf_i+0x1ae>
 80029ee:	4615      	mov	r5, r2
 80029f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80029f4:	fb03 6711 	mls	r7, r3, r1, r6
 80029f8:	5dc7      	ldrb	r7, [r0, r7]
 80029fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029fe:	4637      	mov	r7, r6
 8002a00:	42bb      	cmp	r3, r7
 8002a02:	460e      	mov	r6, r1
 8002a04:	d9f4      	bls.n	80029f0 <_printf_i+0x118>
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d10b      	bne.n	8002a22 <_printf_i+0x14a>
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	07de      	lsls	r6, r3, #31
 8002a0e:	d508      	bpl.n	8002a22 <_printf_i+0x14a>
 8002a10:	6923      	ldr	r3, [r4, #16]
 8002a12:	6861      	ldr	r1, [r4, #4]
 8002a14:	4299      	cmp	r1, r3
 8002a16:	bfde      	ittt	le
 8002a18:	2330      	movle	r3, #48	; 0x30
 8002a1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a22:	1b52      	subs	r2, r2, r5
 8002a24:	6122      	str	r2, [r4, #16]
 8002a26:	464b      	mov	r3, r9
 8002a28:	4621      	mov	r1, r4
 8002a2a:	4640      	mov	r0, r8
 8002a2c:	f8cd a000 	str.w	sl, [sp]
 8002a30:	aa03      	add	r2, sp, #12
 8002a32:	f7ff fedf 	bl	80027f4 <_printf_common>
 8002a36:	3001      	adds	r0, #1
 8002a38:	d14a      	bne.n	8002ad0 <_printf_i+0x1f8>
 8002a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3e:	b004      	add	sp, #16
 8002a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	f043 0320 	orr.w	r3, r3, #32
 8002a4a:	6023      	str	r3, [r4, #0]
 8002a4c:	2778      	movs	r7, #120	; 0x78
 8002a4e:	4832      	ldr	r0, [pc, #200]	; (8002b18 <_printf_i+0x240>)
 8002a50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	6829      	ldr	r1, [r5, #0]
 8002a58:	061f      	lsls	r7, r3, #24
 8002a5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a5e:	d402      	bmi.n	8002a66 <_printf_i+0x18e>
 8002a60:	065f      	lsls	r7, r3, #25
 8002a62:	bf48      	it	mi
 8002a64:	b2b6      	uxthmi	r6, r6
 8002a66:	07df      	lsls	r7, r3, #31
 8002a68:	bf48      	it	mi
 8002a6a:	f043 0320 	orrmi.w	r3, r3, #32
 8002a6e:	6029      	str	r1, [r5, #0]
 8002a70:	bf48      	it	mi
 8002a72:	6023      	strmi	r3, [r4, #0]
 8002a74:	b91e      	cbnz	r6, 8002a7e <_printf_i+0x1a6>
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	f023 0320 	bic.w	r3, r3, #32
 8002a7c:	6023      	str	r3, [r4, #0]
 8002a7e:	2310      	movs	r3, #16
 8002a80:	e7a6      	b.n	80029d0 <_printf_i+0xf8>
 8002a82:	4824      	ldr	r0, [pc, #144]	; (8002b14 <_printf_i+0x23c>)
 8002a84:	e7e4      	b.n	8002a50 <_printf_i+0x178>
 8002a86:	4615      	mov	r5, r2
 8002a88:	e7bd      	b.n	8002a06 <_printf_i+0x12e>
 8002a8a:	682b      	ldr	r3, [r5, #0]
 8002a8c:	6826      	ldr	r6, [r4, #0]
 8002a8e:	1d18      	adds	r0, r3, #4
 8002a90:	6961      	ldr	r1, [r4, #20]
 8002a92:	6028      	str	r0, [r5, #0]
 8002a94:	0635      	lsls	r5, r6, #24
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	d501      	bpl.n	8002a9e <_printf_i+0x1c6>
 8002a9a:	6019      	str	r1, [r3, #0]
 8002a9c:	e002      	b.n	8002aa4 <_printf_i+0x1cc>
 8002a9e:	0670      	lsls	r0, r6, #25
 8002aa0:	d5fb      	bpl.n	8002a9a <_printf_i+0x1c2>
 8002aa2:	8019      	strh	r1, [r3, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4615      	mov	r5, r2
 8002aa8:	6123      	str	r3, [r4, #16]
 8002aaa:	e7bc      	b.n	8002a26 <_printf_i+0x14e>
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	2100      	movs	r1, #0
 8002ab0:	1d1a      	adds	r2, r3, #4
 8002ab2:	602a      	str	r2, [r5, #0]
 8002ab4:	681d      	ldr	r5, [r3, #0]
 8002ab6:	6862      	ldr	r2, [r4, #4]
 8002ab8:	4628      	mov	r0, r5
 8002aba:	f000 f859 	bl	8002b70 <memchr>
 8002abe:	b108      	cbz	r0, 8002ac4 <_printf_i+0x1ec>
 8002ac0:	1b40      	subs	r0, r0, r5
 8002ac2:	6060      	str	r0, [r4, #4]
 8002ac4:	6863      	ldr	r3, [r4, #4]
 8002ac6:	6123      	str	r3, [r4, #16]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ace:	e7aa      	b.n	8002a26 <_printf_i+0x14e>
 8002ad0:	462a      	mov	r2, r5
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	4640      	mov	r0, r8
 8002ad6:	6923      	ldr	r3, [r4, #16]
 8002ad8:	47d0      	blx	sl
 8002ada:	3001      	adds	r0, #1
 8002adc:	d0ad      	beq.n	8002a3a <_printf_i+0x162>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	079b      	lsls	r3, r3, #30
 8002ae2:	d413      	bmi.n	8002b0c <_printf_i+0x234>
 8002ae4:	68e0      	ldr	r0, [r4, #12]
 8002ae6:	9b03      	ldr	r3, [sp, #12]
 8002ae8:	4298      	cmp	r0, r3
 8002aea:	bfb8      	it	lt
 8002aec:	4618      	movlt	r0, r3
 8002aee:	e7a6      	b.n	8002a3e <_printf_i+0x166>
 8002af0:	2301      	movs	r3, #1
 8002af2:	4632      	mov	r2, r6
 8002af4:	4649      	mov	r1, r9
 8002af6:	4640      	mov	r0, r8
 8002af8:	47d0      	blx	sl
 8002afa:	3001      	adds	r0, #1
 8002afc:	d09d      	beq.n	8002a3a <_printf_i+0x162>
 8002afe:	3501      	adds	r5, #1
 8002b00:	68e3      	ldr	r3, [r4, #12]
 8002b02:	9903      	ldr	r1, [sp, #12]
 8002b04:	1a5b      	subs	r3, r3, r1
 8002b06:	42ab      	cmp	r3, r5
 8002b08:	dcf2      	bgt.n	8002af0 <_printf_i+0x218>
 8002b0a:	e7eb      	b.n	8002ae4 <_printf_i+0x20c>
 8002b0c:	2500      	movs	r5, #0
 8002b0e:	f104 0619 	add.w	r6, r4, #25
 8002b12:	e7f5      	b.n	8002b00 <_printf_i+0x228>
 8002b14:	08002c7f 	.word	0x08002c7f
 8002b18:	08002c90 	.word	0x08002c90

08002b1c <memmove>:
 8002b1c:	4288      	cmp	r0, r1
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	eb01 0402 	add.w	r4, r1, r2
 8002b24:	d902      	bls.n	8002b2c <memmove+0x10>
 8002b26:	4284      	cmp	r4, r0
 8002b28:	4623      	mov	r3, r4
 8002b2a:	d807      	bhi.n	8002b3c <memmove+0x20>
 8002b2c:	1e43      	subs	r3, r0, #1
 8002b2e:	42a1      	cmp	r1, r4
 8002b30:	d008      	beq.n	8002b44 <memmove+0x28>
 8002b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b3a:	e7f8      	b.n	8002b2e <memmove+0x12>
 8002b3c:	4601      	mov	r1, r0
 8002b3e:	4402      	add	r2, r0
 8002b40:	428a      	cmp	r2, r1
 8002b42:	d100      	bne.n	8002b46 <memmove+0x2a>
 8002b44:	bd10      	pop	{r4, pc}
 8002b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b4e:	e7f7      	b.n	8002b40 <memmove+0x24>

08002b50 <_sbrk_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	2300      	movs	r3, #0
 8002b54:	4d05      	ldr	r5, [pc, #20]	; (8002b6c <_sbrk_r+0x1c>)
 8002b56:	4604      	mov	r4, r0
 8002b58:	4608      	mov	r0, r1
 8002b5a:	602b      	str	r3, [r5, #0]
 8002b5c:	f7fd fd18 	bl	8000590 <_sbrk>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d102      	bne.n	8002b6a <_sbrk_r+0x1a>
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	b103      	cbz	r3, 8002b6a <_sbrk_r+0x1a>
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	20000320 	.word	0x20000320

08002b70 <memchr>:
 8002b70:	4603      	mov	r3, r0
 8002b72:	b510      	push	{r4, lr}
 8002b74:	b2c9      	uxtb	r1, r1
 8002b76:	4402      	add	r2, r0
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	d101      	bne.n	8002b82 <memchr+0x12>
 8002b7e:	2000      	movs	r0, #0
 8002b80:	e003      	b.n	8002b8a <memchr+0x1a>
 8002b82:	7804      	ldrb	r4, [r0, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	428c      	cmp	r4, r1
 8002b88:	d1f6      	bne.n	8002b78 <memchr+0x8>
 8002b8a:	bd10      	pop	{r4, pc}

08002b8c <memcpy>:
 8002b8c:	440a      	add	r2, r1
 8002b8e:	4291      	cmp	r1, r2
 8002b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b94:	d100      	bne.n	8002b98 <memcpy+0xc>
 8002b96:	4770      	bx	lr
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b9e:	4291      	cmp	r1, r2
 8002ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ba4:	d1f9      	bne.n	8002b9a <memcpy+0xe>
 8002ba6:	bd10      	pop	{r4, pc}

08002ba8 <_realloc_r>:
 8002ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bac:	4680      	mov	r8, r0
 8002bae:	4614      	mov	r4, r2
 8002bb0:	460e      	mov	r6, r1
 8002bb2:	b921      	cbnz	r1, 8002bbe <_realloc_r+0x16>
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bba:	f7ff bc37 	b.w	800242c <_malloc_r>
 8002bbe:	b92a      	cbnz	r2, 8002bcc <_realloc_r+0x24>
 8002bc0:	f7ff fbcc 	bl	800235c <_free_r>
 8002bc4:	4625      	mov	r5, r4
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bcc:	f000 f81b 	bl	8002c06 <_malloc_usable_size_r>
 8002bd0:	4284      	cmp	r4, r0
 8002bd2:	4607      	mov	r7, r0
 8002bd4:	d802      	bhi.n	8002bdc <_realloc_r+0x34>
 8002bd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002bda:	d812      	bhi.n	8002c02 <_realloc_r+0x5a>
 8002bdc:	4621      	mov	r1, r4
 8002bde:	4640      	mov	r0, r8
 8002be0:	f7ff fc24 	bl	800242c <_malloc_r>
 8002be4:	4605      	mov	r5, r0
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d0ed      	beq.n	8002bc6 <_realloc_r+0x1e>
 8002bea:	42bc      	cmp	r4, r7
 8002bec:	4622      	mov	r2, r4
 8002bee:	4631      	mov	r1, r6
 8002bf0:	bf28      	it	cs
 8002bf2:	463a      	movcs	r2, r7
 8002bf4:	f7ff ffca 	bl	8002b8c <memcpy>
 8002bf8:	4631      	mov	r1, r6
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	f7ff fbae 	bl	800235c <_free_r>
 8002c00:	e7e1      	b.n	8002bc6 <_realloc_r+0x1e>
 8002c02:	4635      	mov	r5, r6
 8002c04:	e7df      	b.n	8002bc6 <_realloc_r+0x1e>

08002c06 <_malloc_usable_size_r>:
 8002c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c0a:	1f18      	subs	r0, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bfbc      	itt	lt
 8002c10:	580b      	ldrlt	r3, [r1, r0]
 8002c12:	18c0      	addlt	r0, r0, r3
 8002c14:	4770      	bx	lr
	...

08002c18 <_init>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	bf00      	nop
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr

08002c24 <_fini>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	bf00      	nop
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr
