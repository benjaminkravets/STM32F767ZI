
spi_f103_irq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800373c  0800373c  0000473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037a0  080037a0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  080037a0  080037a0  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037a0  080037a0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037a0  080037a0  000047a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a4  080037a4  000047a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080037a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08003804  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003804  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009036  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e4  00000000  00000000  0000e0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0000f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000692  00000000  00000000  00010230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001667b  00000000  00000000  000108c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a50a  00000000  00000000  00026f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f8a  00000000  00000000  00031447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b33d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002754  00000000  00000000  000b3414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b5b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003724 	.word	0x08003724

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003724 	.word	0x08003724

0800014c <HAL_SPI_RxCpltCallback>:
#define SPI_IRQ_BUFFER_LENGTH 20
uint8_t SPI_IRQ_RX_BUFFER[SPI_IRQ_BUFFER_LENGTH] = {0};
uint8_t newline_buffer[2] = {0};
uint8_t uart_transmit = 0;

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi1, SPI_IRQ_RX_BUFFER, SPI_IRQ_BUFFER_LENGTH);
 8000154:	2214      	movs	r2, #20
 8000156:	4908      	ldr	r1, [pc, #32]	@ (8000178 <HAL_SPI_RxCpltCallback+0x2c>)
 8000158:	4808      	ldr	r0, [pc, #32]	@ (800017c <HAL_SPI_RxCpltCallback+0x30>)
 800015a:	f001 fb25 	bl	80017a8 <HAL_SPI_Receive_IT>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800015e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000162:	4807      	ldr	r0, [pc, #28]	@ (8000180 <HAL_SPI_RxCpltCallback+0x34>)
 8000164:	f000 fe72 	bl	8000e4c <HAL_GPIO_TogglePin>
	uart_transmit = 1;
 8000168:	4b06      	ldr	r3, [pc, #24]	@ (8000184 <HAL_SPI_RxCpltCallback+0x38>)
 800016a:	2201      	movs	r2, #1
 800016c:	701a      	strb	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000118 	.word	0x20000118
 800017c:	20000078 	.word	0x20000078
 8000180:	40011000 	.word	0x40011000
 8000184:	2000012e 	.word	0x2000012e

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 faa0 	bl	80006d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f830 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f8d0 	bl	8000338 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000198:	f000 f872 	bl	8000280 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800019c:	f000 f8a2 	bl	80002e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_IT(&hspi1, SPI_IRQ_RX_BUFFER, SPI_IRQ_BUFFER_LENGTH);
 80001a0:	2214      	movs	r2, #20
 80001a2:	490e      	ldr	r1, [pc, #56]	@ (80001dc <main+0x54>)
 80001a4:	480e      	ldr	r0, [pc, #56]	@ (80001e0 <main+0x58>)
 80001a6:	f001 faff 	bl	80017a8 <HAL_SPI_Receive_IT>
  sprintf(newline_buffer, "\r\n");
 80001aa:	490e      	ldr	r1, [pc, #56]	@ (80001e4 <main+0x5c>)
 80001ac:	480e      	ldr	r0, [pc, #56]	@ (80001e8 <main+0x60>)
 80001ae:	f002 fe09 	bl	8002dc4 <siprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (uart_transmit == 1){
 80001b2:	4b0e      	ldr	r3, [pc, #56]	@ (80001ec <main+0x64>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d1fb      	bne.n	80001b2 <main+0x2a>

		HAL_UART_Transmit(&huart1, &newline_buffer, 2, 100);
 80001ba:	2364      	movs	r3, #100	@ 0x64
 80001bc:	2202      	movs	r2, #2
 80001be:	490a      	ldr	r1, [pc, #40]	@ (80001e8 <main+0x60>)
 80001c0:	480b      	ldr	r0, [pc, #44]	@ (80001f0 <main+0x68>)
 80001c2:	f002 f82c 	bl	800221e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &SPI_IRQ_RX_BUFFER, SPI_IRQ_BUFFER_LENGTH, 100);
 80001c6:	2364      	movs	r3, #100	@ 0x64
 80001c8:	2214      	movs	r2, #20
 80001ca:	4904      	ldr	r1, [pc, #16]	@ (80001dc <main+0x54>)
 80001cc:	4808      	ldr	r0, [pc, #32]	@ (80001f0 <main+0x68>)
 80001ce:	f002 f826 	bl	800221e <HAL_UART_Transmit>
		uart_transmit = 0;
 80001d2:	4b06      	ldr	r3, [pc, #24]	@ (80001ec <main+0x64>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	701a      	strb	r2, [r3, #0]
	if (uart_transmit == 1){
 80001d8:	e7eb      	b.n	80001b2 <main+0x2a>
 80001da:	bf00      	nop
 80001dc:	20000118 	.word	0x20000118
 80001e0:	20000078 	.word	0x20000078
 80001e4:	0800373c 	.word	0x0800373c
 80001e8:	2000012c 	.word	0x2000012c
 80001ec:	2000012e 	.word	0x2000012e
 80001f0:	200000d0 	.word	0x200000d0

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	@ 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fdfe 	bl	8002e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000216:	2301      	movs	r3, #1
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800021e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000230:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000232:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fe1f 	bl	8000e80 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000248:	f000 f8c2 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f88c 	bl	8001384 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000272:	f000 f8ad 	bl	80003d0 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	@ 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000284:	4b15      	ldr	r3, [pc, #84]	@ (80002dc <MX_SPI1_Init+0x5c>)
 8000286:	4a16      	ldr	r2, [pc, #88]	@ (80002e0 <MX_SPI1_Init+0x60>)
 8000288:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800028a:	4b14      	ldr	r3, [pc, #80]	@ (80002dc <MX_SPI1_Init+0x5c>)
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <MX_SPI1_Init+0x5c>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000296:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <MX_SPI1_Init+0x5c>)
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <MX_SPI1_Init+0x5c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <MX_SPI1_Init+0x5c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <MX_SPI1_Init+0x5c>)
 80002aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <MX_SPI1_Init+0x5c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <MX_SPI1_Init+0x5c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002bc:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <MX_SPI1_Init+0x5c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002c2:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <MX_SPI1_Init+0x5c>)
 80002c4:	220a      	movs	r2, #10
 80002c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002c8:	4804      	ldr	r0, [pc, #16]	@ (80002dc <MX_SPI1_Init+0x5c>)
 80002ca:	f001 f9e9 	bl	80016a0 <HAL_SPI_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80002d4:	f000 f87c 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000078 	.word	0x20000078
 80002e0:	40013000 	.word	0x40013000

080002e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e8:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <MX_USART1_UART_Init+0x50>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ee:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	@ (8000330 <MX_USART1_UART_Init+0x4c>)
 800031c:	f001 ff2f 	bl	800217e <HAL_UART_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000326:	f000 f853 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200000d0 	.word	0x200000d0
 8000334:	40013800 	.word	0x40013800

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b1e      	ldr	r3, [pc, #120]	@ (80003c8 <MX_GPIO_Init+0x90>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a1d      	ldr	r2, [pc, #116]	@ (80003c8 <MX_GPIO_Init+0x90>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b1b      	ldr	r3, [pc, #108]	@ (80003c8 <MX_GPIO_Init+0x90>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <MX_GPIO_Init+0x90>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a17      	ldr	r2, [pc, #92]	@ (80003c8 <MX_GPIO_Init+0x90>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <MX_GPIO_Init+0x90>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <MX_GPIO_Init+0x90>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a11      	ldr	r2, [pc, #68]	@ (80003c8 <MX_GPIO_Init+0x90>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_GPIO_Init+0x90>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039a:	480c      	ldr	r0, [pc, #48]	@ (80003cc <MX_GPIO_Init+0x94>)
 800039c:	f000 fd3e 	bl	8000e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	4804      	ldr	r0, [pc, #16]	@ (80003cc <MX_GPIO_Init+0x94>)
 80003ba:	f000 fbab 	bl	8000b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003be:	bf00      	nop
 80003c0:	3720      	adds	r7, #32
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40011000 	.word	0x40011000

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	bf00      	nop
 80003da:	e7fd      	b.n	80003d8 <Error_Handler+0x8>

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	@ (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000412:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a1f      	ldr	r2, [pc, #124]	@ (80004d8 <HAL_SPI_MspInit+0x98>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d137      	bne.n	80004d0 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000460:	4b1e      	ldr	r3, [pc, #120]	@ (80004dc <HAL_SPI_MspInit+0x9c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a1d      	ldr	r2, [pc, #116]	@ (80004dc <HAL_SPI_MspInit+0x9c>)
 8000466:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b1b      	ldr	r3, [pc, #108]	@ (80004dc <HAL_SPI_MspInit+0x9c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b18      	ldr	r3, [pc, #96]	@ (80004dc <HAL_SPI_MspInit+0x9c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a17      	ldr	r2, [pc, #92]	@ (80004dc <HAL_SPI_MspInit+0x9c>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <HAL_SPI_MspInit+0x9c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000490:	23a0      	movs	r3, #160	@ 0xa0
 8000492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	480f      	ldr	r0, [pc, #60]	@ (80004e0 <HAL_SPI_MspInit+0xa0>)
 80004a4:	f000 fb36 	bl	8000b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004a8:	2340      	movs	r3, #64	@ 0x40
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ac:	2302      	movs	r3, #2
 80004ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b0:	2303      	movs	r3, #3
 80004b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4809      	ldr	r0, [pc, #36]	@ (80004e0 <HAL_SPI_MspInit+0xa0>)
 80004bc:	f000 fb2a 	bl	8000b14 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2101      	movs	r1, #1
 80004c4:	2023      	movs	r0, #35	@ 0x23
 80004c6:	f000 fa3c 	bl	8000942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80004ca:	2023      	movs	r0, #35	@ 0x23
 80004cc:	f000 fa55 	bl	800097a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004d0:	bf00      	nop
 80004d2:	3720      	adds	r7, #32
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40013000 	.word	0x40013000
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010800 	.word	0x40010800

080004e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a20      	ldr	r2, [pc, #128]	@ (8000580 <HAL_UART_MspInit+0x9c>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d139      	bne.n	8000578 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000504:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <HAL_UART_MspInit+0xa0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a1e      	ldr	r2, [pc, #120]	@ (8000584 <HAL_UART_MspInit+0xa0>)
 800050a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <HAL_UART_MspInit+0xa0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <HAL_UART_MspInit+0xa0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a18      	ldr	r2, [pc, #96]	@ (8000584 <HAL_UART_MspInit+0xa0>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <HAL_UART_MspInit+0xa0>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000534:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000538:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053e:	2303      	movs	r3, #3
 8000540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	480f      	ldr	r0, [pc, #60]	@ (8000588 <HAL_UART_MspInit+0xa4>)
 800054a:	f000 fae3 	bl	8000b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800054e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4809      	ldr	r0, [pc, #36]	@ (8000588 <HAL_UART_MspInit+0xa4>)
 8000564:	f000 fad6 	bl	8000b14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2101      	movs	r1, #1
 800056c:	2025      	movs	r0, #37	@ 0x25
 800056e:	f000 f9e8 	bl	8000942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000572:	2025      	movs	r0, #37	@ 0x25
 8000574:	f000 fa01 	bl	800097a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013800 	.word	0x40013800
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <NMI_Handler+0x4>

08000594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <MemManage_Handler+0x4>

080005a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <BusFault_Handler+0x4>

080005ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <UsageFault_Handler+0x4>

080005b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005dc:	f000 f8be 	bl	800075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80005e8:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <SPI1_IRQHandler+0x10>)
 80005ea:	f001 fa0f 	bl	8001a0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000078 	.word	0x20000078

080005f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005fc:	4802      	ldr	r0, [pc, #8]	@ (8000608 <USART1_IRQHandler+0x10>)
 80005fe:	f001 fe91 	bl	8002324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000d0 	.word	0x200000d0

0800060c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000614:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <_sbrk+0x5c>)
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <_sbrk+0x60>)
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <_sbrk+0x64>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d102      	bne.n	800062e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <_sbrk+0x64>)
 800062a:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <_sbrk+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	693a      	ldr	r2, [r7, #16]
 8000638:	429a      	cmp	r2, r3
 800063a:	d207      	bcs.n	800064c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800063c:	f002 fbea 	bl	8002e14 <__errno>
 8000640:	4603      	mov	r3, r0
 8000642:	220c      	movs	r2, #12
 8000644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	e009      	b.n	8000660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <_sbrk+0x64>)
 800065c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065e:	68fb      	ldr	r3, [r7, #12]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20005000 	.word	0x20005000
 800066c:	00000400 	.word	0x00000400
 8000670:	20000130 	.word	0x20000130
 8000674:	20000280 	.word	0x20000280

08000678 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000684:	f7ff fff8 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000688:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800068a:	490c      	ldr	r1, [pc, #48]	@ (80006bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800068c:	4a0c      	ldr	r2, [pc, #48]	@ (80006c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000690:	e002      	b.n	8000698 <LoopCopyDataInit>

08000692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000696:	3304      	adds	r3, #4

08000698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800069c:	d3f9      	bcc.n	8000692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069e:	4a09      	ldr	r2, [pc, #36]	@ (80006c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006a0:	4c09      	ldr	r4, [pc, #36]	@ (80006c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a4:	e001      	b.n	80006aa <LoopFillZerobss>

080006a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a8:	3204      	adds	r2, #4

080006aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ac:	d3fb      	bcc.n	80006a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ae:	f002 fbb7 	bl	8002e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b2:	f7ff fd69 	bl	8000188 <main>
  bx lr
 80006b6:	4770      	bx	lr
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006c0:	080037a8 	.word	0x080037a8
  ldr r2, =_sbss
 80006c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006c8:	20000280 	.word	0x20000280

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>
	...

080006d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <HAL_Init+0x28>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a07      	ldr	r2, [pc, #28]	@ (80006f8 <HAL_Init+0x28>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 f923 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e6:	200f      	movs	r0, #15
 80006e8:	f000 f808 	bl	80006fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ec:	f7ff fe76 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40022000 	.word	0x40022000

080006fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <HAL_InitTick+0x54>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <HAL_InitTick+0x58>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000712:	fbb3 f3f1 	udiv	r3, r3, r1
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f93b 	bl	8000996 <HAL_SYSTICK_Config>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e00e      	b.n	8000748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d80a      	bhi.n	8000746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f000 f903 	bl	8000942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800073c:	4a06      	ldr	r2, [pc, #24]	@ (8000758 <HAL_InitTick+0x5c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	e000      	b.n	8000748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000000 	.word	0x20000000
 8000754:	20000008 	.word	0x20000008
 8000758:	20000004 	.word	0x20000004

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <HAL_IncTick+0x1c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b05      	ldr	r3, [pc, #20]	@ (800077c <HAL_IncTick+0x20>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a03      	ldr	r2, [pc, #12]	@ (800077c <HAL_IncTick+0x20>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000008 	.word	0x20000008
 800077c:	20000134 	.word	0x20000134

08000780 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return uwTick;
 8000784:	4b02      	ldr	r3, [pc, #8]	@ (8000790 <HAL_GetTick+0x10>)
 8000786:	681b      	ldr	r3, [r3, #0]
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000134 	.word	0x20000134

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db0b      	blt.n	8000822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 021f 	and.w	r2, r3, #31
 8000810:	4906      	ldr	r1, [pc, #24]	@ (800082c <__NVIC_EnableIRQ+0x34>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	095b      	lsrs	r3, r3, #5
 8000818:	2001      	movs	r0, #1
 800081a:	fa00 f202 	lsl.w	r2, r0, r2
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	e000e100 	.word	0xe000e100

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	@ (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	@ (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	@ 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	@ 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008f8:	d301      	bcc.n	80008fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00f      	b.n	800091e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <SysTick_Config+0x40>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000906:	210f      	movs	r1, #15
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f7ff ff90 	bl	8000830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <SysTick_Config+0x40>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <SysTick_Config+0x40>)
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff2d 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000954:	f7ff ff42 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f7ff ff90 	bl	8000884 <NVIC_EncodePriority>
 8000964:	4602      	mov	r2, r0
 8000966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff5f 	bl	8000830 <__NVIC_SetPriority>
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff35 	bl	80007f8 <__NVIC_EnableIRQ>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ffa2 	bl	80008e8 <SysTick_Config>
 80009a4:	4603      	mov	r3, r0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b085      	sub	sp, #20
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d008      	beq.n	80009d8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2204      	movs	r2, #4
 80009ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e020      	b.n	8000a1a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f022 020e 	bic.w	r2, r2, #14
 80009e6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f022 0201 	bic.w	r2, r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a00:	2101      	movs	r1, #1
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d005      	beq.n	8000a48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2204      	movs	r2, #4
 8000a40:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	73fb      	strb	r3, [r7, #15]
 8000a46:	e051      	b.n	8000aec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f022 020e 	bic.w	r2, r2, #14
 8000a56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f022 0201 	bic.w	r2, r2, #1
 8000a66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a22      	ldr	r2, [pc, #136]	@ (8000af8 <HAL_DMA_Abort_IT+0xd4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d029      	beq.n	8000ac6 <HAL_DMA_Abort_IT+0xa2>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a21      	ldr	r2, [pc, #132]	@ (8000afc <HAL_DMA_Abort_IT+0xd8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d022      	beq.n	8000ac2 <HAL_DMA_Abort_IT+0x9e>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1f      	ldr	r2, [pc, #124]	@ (8000b00 <HAL_DMA_Abort_IT+0xdc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d01a      	beq.n	8000abc <HAL_DMA_Abort_IT+0x98>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000b04 <HAL_DMA_Abort_IT+0xe0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d012      	beq.n	8000ab6 <HAL_DMA_Abort_IT+0x92>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1c      	ldr	r2, [pc, #112]	@ (8000b08 <HAL_DMA_Abort_IT+0xe4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d00a      	beq.n	8000ab0 <HAL_DMA_Abort_IT+0x8c>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b0c <HAL_DMA_Abort_IT+0xe8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d102      	bne.n	8000aaa <HAL_DMA_Abort_IT+0x86>
 8000aa4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000aa8:	e00e      	b.n	8000ac8 <HAL_DMA_Abort_IT+0xa4>
 8000aaa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000aae:	e00b      	b.n	8000ac8 <HAL_DMA_Abort_IT+0xa4>
 8000ab0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab4:	e008      	b.n	8000ac8 <HAL_DMA_Abort_IT+0xa4>
 8000ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aba:	e005      	b.n	8000ac8 <HAL_DMA_Abort_IT+0xa4>
 8000abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac0:	e002      	b.n	8000ac8 <HAL_DMA_Abort_IT+0xa4>
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	e000      	b.n	8000ac8 <HAL_DMA_Abort_IT+0xa4>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	4a11      	ldr	r2, [pc, #68]	@ (8000b10 <HAL_DMA_Abort_IT+0xec>)
 8000aca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	4798      	blx	r3
    } 
  }
  return status;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40020008 	.word	0x40020008
 8000afc:	4002001c 	.word	0x4002001c
 8000b00:	40020030 	.word	0x40020030
 8000b04:	40020044 	.word	0x40020044
 8000b08:	40020058 	.word	0x40020058
 8000b0c:	4002006c 	.word	0x4002006c
 8000b10:	40020000 	.word	0x40020000

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b08b      	sub	sp, #44	@ 0x2c
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b26:	e169      	b.n	8000dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f040 8158 	bne.w	8000df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a9a      	ldr	r2, [pc, #616]	@ (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d05e      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b50:	4a98      	ldr	r2, [pc, #608]	@ (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d875      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b56:	4a98      	ldr	r2, [pc, #608]	@ (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d058      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b5c:	4a96      	ldr	r2, [pc, #600]	@ (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d86f      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b62:	4a96      	ldr	r2, [pc, #600]	@ (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d052      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b68:	4a94      	ldr	r2, [pc, #592]	@ (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d869      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b6e:	4a94      	ldr	r2, [pc, #592]	@ (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d04c      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b74:	4a92      	ldr	r2, [pc, #584]	@ (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d863      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a92      	ldr	r2, [pc, #584]	@ (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d046      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b80:	4a90      	ldr	r2, [pc, #576]	@ (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d85d      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d82a      	bhi.n	8000be0 <HAL_GPIO_Init+0xcc>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d859      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b94 <HAL_GPIO_Init+0x80>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000be9 	.word	0x08000be9
 8000b9c:	08000bfb 	.word	0x08000bfb
 8000ba0:	08000c3d 	.word	0x08000c3d
 8000ba4:	08000c43 	.word	0x08000c43
 8000ba8:	08000c43 	.word	0x08000c43
 8000bac:	08000c43 	.word	0x08000c43
 8000bb0:	08000c43 	.word	0x08000c43
 8000bb4:	08000c43 	.word	0x08000c43
 8000bb8:	08000c43 	.word	0x08000c43
 8000bbc:	08000c43 	.word	0x08000c43
 8000bc0:	08000c43 	.word	0x08000c43
 8000bc4:	08000c43 	.word	0x08000c43
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c43 	.word	0x08000c43
 8000bd0:	08000c43 	.word	0x08000c43
 8000bd4:	08000c43 	.word	0x08000c43
 8000bd8:	08000bf1 	.word	0x08000bf1
 8000bdc:	08000c05 	.word	0x08000c05
 8000be0:	4a79      	ldr	r2, [pc, #484]	@ (8000dc8 <HAL_GPIO_Init+0x2b4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d013      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be6:	e02c      	b.n	8000c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e029      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e024      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e01f      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	330c      	adds	r3, #12
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e01a      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c16:	2304      	movs	r3, #4
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e013      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d105      	bne.n	8000c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c24:	2308      	movs	r3, #8
 8000c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	611a      	str	r2, [r3, #16]
          break;
 8000c2e:	e009      	b.n	8000c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c30:	2308      	movs	r3, #8
 8000c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	615a      	str	r2, [r3, #20]
          break;
 8000c3a:	e003      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e000      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          break;
 8000c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2bff      	cmp	r3, #255	@ 0xff
 8000c48:	d801      	bhi.n	8000c4e <HAL_GPIO_Init+0x13a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	e001      	b.n	8000c52 <HAL_GPIO_Init+0x13e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3304      	adds	r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2bff      	cmp	r3, #255	@ 0xff
 8000c58:	d802      	bhi.n	8000c60 <HAL_GPIO_Init+0x14c>
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x152>
 8000c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c62:	3b08      	subs	r3, #8
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	401a      	ands	r2, r3
 8000c78:	6a39      	ldr	r1, [r7, #32]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c94:	4b4d      	ldr	r3, [pc, #308]	@ (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a4c      	ldr	r2, [pc, #304]	@ (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cac:	4a48      	ldr	r2, [pc, #288]	@ (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a40      	ldr	r2, [pc, #256]	@ (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d013      	beq.n	8000d00 <HAL_GPIO_Init+0x1ec>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3f      	ldr	r2, [pc, #252]	@ (8000dd8 <HAL_GPIO_Init+0x2c4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d00d      	beq.n	8000cfc <HAL_GPIO_Init+0x1e8>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3e      	ldr	r2, [pc, #248]	@ (8000ddc <HAL_GPIO_Init+0x2c8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d007      	beq.n	8000cf8 <HAL_GPIO_Init+0x1e4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3d      	ldr	r2, [pc, #244]	@ (8000de0 <HAL_GPIO_Init+0x2cc>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d101      	bne.n	8000cf4 <HAL_GPIO_Init+0x1e0>
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e006      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	e004      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e002      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e000      	b.n	8000d02 <HAL_GPIO_Init+0x1ee>
 8000d00:	2300      	movs	r3, #0
 8000d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d04:	f002 0203 	and.w	r2, r2, #3
 8000d08:	0092      	lsls	r2, r2, #2
 8000d0a:	4093      	lsls	r3, r2
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d12:	492f      	ldr	r1, [pc, #188]	@ (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d16:	089b      	lsrs	r3, r3, #2
 8000d18:	3302      	adds	r3, #2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d006      	beq.n	8000d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	492c      	ldr	r1, [pc, #176]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	608b      	str	r3, [r1, #8]
 8000d38:	e006      	b.n	8000d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4928      	ldr	r1, [pc, #160]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d54:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	4922      	ldr	r1, [pc, #136]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	60cb      	str	r3, [r1, #12]
 8000d60:	e006      	b.n	8000d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d64:	68da      	ldr	r2, [r3, #12]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	491e      	ldr	r1, [pc, #120]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	4918      	ldr	r1, [pc, #96]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d8a:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4914      	ldr	r1, [pc, #80]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d021      	beq.n	8000de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	490e      	ldr	r1, [pc, #56]	@ (8000de4 <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
 8000db0:	e021      	b.n	8000df6 <HAL_GPIO_Init+0x2e2>
 8000db2:	bf00      	nop
 8000db4:	10320000 	.word	0x10320000
 8000db8:	10310000 	.word	0x10310000
 8000dbc:	10220000 	.word	0x10220000
 8000dc0:	10210000 	.word	0x10210000
 8000dc4:	10120000 	.word	0x10120000
 8000dc8:	10110000 	.word	0x10110000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40011400 	.word	0x40011400
 8000de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <HAL_GPIO_Init+0x304>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4909      	ldr	r1, [pc, #36]	@ (8000e18 <HAL_GPIO_Init+0x304>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df8:	3301      	adds	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e02:	fa22 f303 	lsr.w	r3, r2, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f47f ae8e 	bne.w	8000b28 <HAL_GPIO_Init+0x14>
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	372c      	adds	r7, #44	@ 0x2c
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e2c:	787b      	ldrb	r3, [r7, #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e38:	e003      	b.n	8000e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3a:	887b      	ldrh	r3, [r7, #2]
 8000e3c:	041a      	lsls	r2, r3, #16
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4013      	ands	r3, r2
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43d9      	mvns	r1, r3
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
	...

08000e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e272      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8087 	beq.w	8000fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea0:	4b92      	ldr	r3, [pc, #584]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d00c      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eac:	4b8f      	ldr	r3, [pc, #572]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d112      	bne.n	8000ede <HAL_RCC_OscConfig+0x5e>
 8000eb8:	4b8c      	ldr	r3, [pc, #560]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ec4:	d10b      	bne.n	8000ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec6:	4b89      	ldr	r3, [pc, #548]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d06c      	beq.n	8000fac <HAL_RCC_OscConfig+0x12c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d168      	bne.n	8000fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e24c      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ee6:	d106      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x76>
 8000ee8:	4b80      	ldr	r3, [pc, #512]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a7f      	ldr	r2, [pc, #508]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	e02e      	b.n	8000f54 <HAL_RCC_OscConfig+0xd4>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x98>
 8000efe:	4b7b      	ldr	r3, [pc, #492]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a7a      	ldr	r2, [pc, #488]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b78      	ldr	r3, [pc, #480]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a77      	ldr	r2, [pc, #476]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e01d      	b.n	8000f54 <HAL_RCC_OscConfig+0xd4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0xbc>
 8000f22:	4b72      	ldr	r3, [pc, #456]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a71      	ldr	r2, [pc, #452]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a6e      	ldr	r2, [pc, #440]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e00b      	b.n	8000f54 <HAL_RCC_OscConfig+0xd4>
 8000f3c:	4b6b      	ldr	r3, [pc, #428]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a6a      	ldr	r2, [pc, #424]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b68      	ldr	r3, [pc, #416]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a67      	ldr	r2, [pc, #412]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d013      	beq.n	8000f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fc10 	bl	8000780 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fc0c 	bl	8000780 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	@ 0x64
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e200      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f76:	4b5d      	ldr	r3, [pc, #372]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0xe4>
 8000f82:	e014      	b.n	8000fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fbfc 	bl	8000780 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fbf8 	bl	8000780 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	@ 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e1ec      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9e:	4b53      	ldr	r3, [pc, #332]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x10c>
 8000faa:	e000      	b.n	8000fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d063      	beq.n	8001082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fba:	4b4c      	ldr	r3, [pc, #304]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fc6:	4b49      	ldr	r3, [pc, #292]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d11c      	bne.n	800100c <HAL_RCC_OscConfig+0x18c>
 8000fd2:	4b46      	ldr	r3, [pc, #280]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d116      	bne.n	800100c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	4b43      	ldr	r3, [pc, #268]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x176>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d001      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e1c0      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4939      	ldr	r1, [pc, #228]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001006:	4313      	orrs	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100a:	e03a      	b.n	8001082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d020      	beq.n	8001056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001014:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fbb1 	bl	8000780 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001022:	f7ff fbad 	bl	8000780 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e1a1      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001034:	4b2d      	ldr	r3, [pc, #180]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4927      	ldr	r1, [pc, #156]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001050:	4313      	orrs	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
 8001054:	e015      	b.n	8001082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fb90 	bl	8000780 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001064:	f7ff fb8c 	bl	8000780 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e180      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d03a      	beq.n	8001104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d019      	beq.n	80010ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <HAL_RCC_OscConfig+0x274>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109c:	f7ff fb70 	bl	8000780 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fb6c 	bl	8000780 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e160      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <HAL_RCC_OscConfig+0x26c>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 face 	bl	8001664 <RCC_Delay>
 80010c8:	e01c      	b.n	8001104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <HAL_RCC_OscConfig+0x274>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d0:	f7ff fb56 	bl	8000780 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d6:	e00f      	b.n	80010f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fb52 	bl	8000780 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d908      	bls.n	80010f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e146      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	42420000 	.word	0x42420000
 80010f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f8:	4b92      	ldr	r3, [pc, #584]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1e9      	bne.n	80010d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80a6 	beq.w	800125e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001116:	4b8b      	ldr	r3, [pc, #556]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10d      	bne.n	800113e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	4b88      	ldr	r3, [pc, #544]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a87      	ldr	r2, [pc, #540]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b85      	ldr	r3, [pc, #532]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800113a:	2301      	movs	r3, #1
 800113c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113e:	4b82      	ldr	r3, [pc, #520]	@ (8001348 <HAL_RCC_OscConfig+0x4c8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001146:	2b00      	cmp	r3, #0
 8001148:	d118      	bne.n	800117c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114a:	4b7f      	ldr	r3, [pc, #508]	@ (8001348 <HAL_RCC_OscConfig+0x4c8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7e      	ldr	r2, [pc, #504]	@ (8001348 <HAL_RCC_OscConfig+0x4c8>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001156:	f7ff fb13 	bl	8000780 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115e:	f7ff fb0f 	bl	8000780 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b64      	cmp	r3, #100	@ 0x64
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e103      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	4b75      	ldr	r3, [pc, #468]	@ (8001348 <HAL_RCC_OscConfig+0x4c8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x312>
 8001184:	4b6f      	ldr	r3, [pc, #444]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a6e      	ldr	r2, [pc, #440]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6213      	str	r3, [r2, #32]
 8001190:	e02d      	b.n	80011ee <HAL_RCC_OscConfig+0x36e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x334>
 800119a:	4b6a      	ldr	r3, [pc, #424]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	4a69      	ldr	r2, [pc, #420]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6213      	str	r3, [r2, #32]
 80011a6:	4b67      	ldr	r3, [pc, #412]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a66      	ldr	r2, [pc, #408]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f023 0304 	bic.w	r3, r3, #4
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	e01c      	b.n	80011ee <HAL_RCC_OscConfig+0x36e>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x356>
 80011bc:	4b61      	ldr	r3, [pc, #388]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4a60      	ldr	r2, [pc, #384]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6213      	str	r3, [r2, #32]
 80011c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	e00b      	b.n	80011ee <HAL_RCC_OscConfig+0x36e>
 80011d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a5a      	ldr	r2, [pc, #360]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	6213      	str	r3, [r2, #32]
 80011e2:	4b58      	ldr	r3, [pc, #352]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a57      	ldr	r2, [pc, #348]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0304 	bic.w	r3, r3, #4
 80011ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d015      	beq.n	8001222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fac3 	bl	8000780 <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff fabf 	bl	8000780 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800120c:	4293      	cmp	r3, r2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e0b1      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	4b4b      	ldr	r3, [pc, #300]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ee      	beq.n	80011fe <HAL_RCC_OscConfig+0x37e>
 8001220:	e014      	b.n	800124c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001222:	f7ff faad 	bl	8000780 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff faa9 	bl	8000780 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e09b      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	4b40      	ldr	r3, [pc, #256]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1ee      	bne.n	800122a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d105      	bne.n	800125e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001252:	4b3c      	ldr	r3, [pc, #240]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a3b      	ldr	r2, [pc, #236]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800125c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8087 	beq.w	8001376 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001268:	4b36      	ldr	r3, [pc, #216]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	d061      	beq.n	8001338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d146      	bne.n	800130a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127c:	4b33      	ldr	r3, [pc, #204]	@ (800134c <HAL_RCC_OscConfig+0x4cc>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fa7d 	bl	8000780 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff fa79 	bl	8000780 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e06d      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129c:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b0:	d108      	bne.n	80012c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012b2:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4921      	ldr	r1, [pc, #132]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a19      	ldr	r1, [r3, #32]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d4:	430b      	orrs	r3, r1
 80012d6:	491b      	ldr	r1, [pc, #108]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_RCC_OscConfig+0x4cc>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fa4d 	bl	8000780 <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff fa49 	bl	8000780 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e03d      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x46a>
 8001308:	e035      	b.n	8001376 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_RCC_OscConfig+0x4cc>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fa36 	bl	8000780 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff fa32 	bl	8000780 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e026      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x498>
 8001336:	e01e      	b.n	8001376 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d107      	bne.n	8001350 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e019      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
 8001344:	40021000 	.word	0x40021000
 8001348:	40007000 	.word	0x40007000
 800134c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_RCC_OscConfig+0x500>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	429a      	cmp	r2, r3
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	429a      	cmp	r2, r3
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0d0      	b.n	800153a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001398:	4b6a      	ldr	r3, [pc, #424]	@ (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d910      	bls.n	80013c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a6:	4b67      	ldr	r3, [pc, #412]	@ (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 0207 	bic.w	r2, r3, #7
 80013ae:	4965      	ldr	r1, [pc, #404]	@ (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b6:	4b63      	ldr	r3, [pc, #396]	@ (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d001      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0b8      	b.n	800153a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d020      	beq.n	8001416 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e0:	4b59      	ldr	r3, [pc, #356]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4a58      	ldr	r2, [pc, #352]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80013ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f8:	4b53      	ldr	r3, [pc, #332]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a52      	ldr	r2, [pc, #328]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001402:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001404:	4b50      	ldr	r3, [pc, #320]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	494d      	ldr	r1, [pc, #308]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	4313      	orrs	r3, r2
 8001414:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d040      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b47      	ldr	r3, [pc, #284]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d115      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e07f      	b.n	800153a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b41      	ldr	r3, [pc, #260]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e073      	b.n	800153a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001452:	4b3d      	ldr	r3, [pc, #244]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e06b      	b.n	800153a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001462:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f023 0203 	bic.w	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4936      	ldr	r1, [pc, #216]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001474:	f7ff f984 	bl	8000780 <HAL_GetTick>
 8001478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147a:	e00a      	b.n	8001492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800147c:	f7ff f980 	bl	8000780 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148a:	4293      	cmp	r3, r2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e053      	b.n	800153a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001492:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 020c 	and.w	r2, r3, #12
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1eb      	bne.n	800147c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d210      	bcs.n	80014d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 0207 	bic.w	r2, r3, #7
 80014ba:	4922      	ldr	r1, [pc, #136]	@ (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e032      	b.n	800153a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e0:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	4916      	ldr	r1, [pc, #88]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d009      	beq.n	8001512 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014fe:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	490e      	ldr	r1, [pc, #56]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001512:	f000 f821 	bl	8001558 <HAL_RCC_GetSysClockFreq>
 8001516:	4602      	mov	r2, r0
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	490a      	ldr	r1, [pc, #40]	@ (800154c <HAL_RCC_ClockConfig+0x1c8>)
 8001524:	5ccb      	ldrb	r3, [r1, r3]
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <HAL_RCC_ClockConfig+0x1cc>)
 800152c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_RCC_ClockConfig+0x1d0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f8e2 	bl	80006fc <HAL_InitTick>

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40022000 	.word	0x40022000
 8001548:	40021000 	.word	0x40021000
 800154c:	08003740 	.word	0x08003740
 8001550:	20000000 	.word	0x20000000
 8001554:	20000004 	.word	0x20000004

08001558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001572:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x94>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b04      	cmp	r3, #4
 8001580:	d002      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0x30>
 8001582:	2b08      	cmp	r3, #8
 8001584:	d003      	beq.n	800158e <HAL_RCC_GetSysClockFreq+0x36>
 8001586:	e027      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001588:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800158a:	613b      	str	r3, [r7, #16]
      break;
 800158c:	e027      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	0c9b      	lsrs	r3, r3, #18
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	4a17      	ldr	r2, [pc, #92]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d010      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_RCC_GetSysClockFreq+0x94>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	0c5b      	lsrs	r3, r3, #17
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	4a11      	ldr	r2, [pc, #68]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80015ba:	fb03 f202 	mul.w	r2, r3, r2
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e004      	b.n	80015d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a0c      	ldr	r2, [pc, #48]	@ (80015fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	613b      	str	r3, [r7, #16]
      break;
 80015d6:	e002      	b.n	80015de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80015da:	613b      	str	r3, [r7, #16]
      break;
 80015dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015de:	693b      	ldr	r3, [r7, #16]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	371c      	adds	r7, #28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	007a1200 	.word	0x007a1200
 80015f4:	08003758 	.word	0x08003758
 80015f8:	08003768 	.word	0x08003768
 80015fc:	003d0900 	.word	0x003d0900

08001600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001604:	4b02      	ldr	r3, [pc, #8]	@ (8001610 <HAL_RCC_GetHCLKFreq+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	20000000 	.word	0x20000000

08001614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001618:	f7ff fff2 	bl	8001600 <HAL_RCC_GetHCLKFreq>
 800161c:	4602      	mov	r2, r0
 800161e:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	4903      	ldr	r1, [pc, #12]	@ (8001638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800162a:	5ccb      	ldrb	r3, [r1, r3]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	08003750 	.word	0x08003750

0800163c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001640:	f7ff ffde 	bl	8001600 <HAL_RCC_GetHCLKFreq>
 8001644:	4602      	mov	r2, r0
 8001646:	4b05      	ldr	r3, [pc, #20]	@ (800165c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	0adb      	lsrs	r3, r3, #11
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	4903      	ldr	r1, [pc, #12]	@ (8001660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001652:	5ccb      	ldrb	r3, [r1, r3]
 8001654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001658:	4618      	mov	r0, r3
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	08003750 	.word	0x08003750

08001664 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <RCC_Delay+0x34>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <RCC_Delay+0x38>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0a5b      	lsrs	r3, r3, #9
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001680:	bf00      	nop
  }
  while (Delay --);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1e5a      	subs	r2, r3, #1
 8001686:	60fa      	str	r2, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f9      	bne.n	8001680 <RCC_Delay+0x1c>
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	20000000 	.word	0x20000000
 800169c:	10624dd3 	.word	0x10624dd3

080016a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e076      	b.n	80017a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80016c2:	d009      	beq.n	80016d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
 80016ca:	e005      	b.n	80016d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d106      	bne.n	80016f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe fea4 	bl	8000440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800170e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800175c:	ea42 0103 	orr.w	r1, r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001764:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	0c1a      	lsrs	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f002 0204 	and.w	r2, r2, #4
 800177e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	4613      	mov	r3, r2
 80017b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d002      	beq.n	80017cc <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
 80017c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80017ca:	e07d      	b.n	80018c8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d110      	bne.n	80017f6 <HAL_SPI_Receive_IT+0x4e>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80017dc:	d10b      	bne.n	80017f6 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2204      	movs	r2, #4
 80017e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 f879 	bl	80018e4 <HAL_SPI_TransmitReceive_IT>
 80017f2:	4603      	mov	r3, r0
 80017f4:	e06d      	b.n	80018d2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_SPI_Receive_IT+0x5c>
 8001800:	2302      	movs	r3, #2
 8001802:	e066      	b.n	80018d2 <HAL_SPI_Receive_IT+0x12a>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_SPI_Receive_IT+0x70>
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800181c:	e054      	b.n	80018c8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2204      	movs	r2, #4
 8001822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	88fa      	ldrh	r2, [r7, #6]
 8001836:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	88fa      	ldrh	r2, [r7, #6]
 800183c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2200      	movs	r2, #0
 8001854:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a1e      	ldr	r2, [pc, #120]	@ (80018dc <HAL_SPI_Receive_IT+0x134>)
 8001862:	641a      	str	r2, [r3, #64]	@ 0x40
 8001864:	e002      	b.n	800186c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4a1d      	ldr	r2, [pc, #116]	@ (80018e0 <HAL_SPI_Receive_IT+0x138>)
 800186a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001874:	d10f      	bne.n	8001896 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001884:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001894:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80018a4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b0:	2b40      	cmp	r3, #64	@ 0x40
 80018b2:	d008      	beq.n	80018c6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e000      	b.n	80018c8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80018c6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	08001de1 	.word	0x08001de1
 80018e0:	08001d97 	.word	0x08001d97

080018e4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_SPI_TransmitReceive_IT+0x20>
 8001900:	2302      	movs	r3, #2
 8001902:	e075      	b.n	80019f0 <HAL_SPI_TransmitReceive_IT+0x10c>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001912:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d00d      	beq.n	800193c <HAL_SPI_TransmitReceive_IT+0x58>
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001926:	d106      	bne.n	8001936 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <HAL_SPI_TransmitReceive_IT+0x52>
 8001930:	7dbb      	ldrb	r3, [r7, #22]
 8001932:	2b04      	cmp	r3, #4
 8001934:	d002      	beq.n	800193c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001936:	2302      	movs	r3, #2
 8001938:	75fb      	strb	r3, [r7, #23]
    goto error;
 800193a:	e054      	b.n	80019e6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <HAL_SPI_TransmitReceive_IT+0x6a>
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001952:	e048      	b.n	80019e6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b04      	cmp	r3, #4
 800195e:	d003      	beq.n	8001968 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2205      	movs	r2, #5
 8001964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	887a      	ldrh	r2, [r7, #2]
 800198a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <HAL_SPI_TransmitReceive_IT+0x118>)
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80019a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80019a6:	e005      	b.n	80019b4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4a16      	ldr	r2, [pc, #88]	@ (8001a04 <HAL_SPI_TransmitReceive_IT+0x120>)
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a15      	ldr	r2, [pc, #84]	@ (8001a08 <HAL_SPI_TransmitReceive_IT+0x124>)
 80019b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80019c2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ce:	2b40      	cmp	r3, #64	@ 0x40
 80019d0:	d008      	beq.n	80019e4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e000      	b.n	80019e6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80019e4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	08001cd9 	.word	0x08001cd9
 8001a00:	08001d39 	.word	0x08001d39
 8001a04:	08001c15 	.word	0x08001c15
 8001a08:	08001c79 	.word	0x08001c79

08001a0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
    return;
 8001a4a:	e0b7      	b.n	8001bbc <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_SPI_IRQHandler+0x5e>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
    return;
 8001a68:	e0a8      	b.n	8001bbc <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_SPI_IRQHandler+0x74>
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 809e 	beq.w	8001bbc <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8098 	beq.w	8001bbc <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d023      	beq.n	8001ade <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d011      	beq.n	8001ac6 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa6:	f043 0204 	orr.w	r2, r3, #4
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	e00b      	b.n	8001ade <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
        return;
 8001adc:	e06e      	b.n	8001bbc <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d014      	beq.n	8001b12 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d04f      	beq.n	8001bba <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001b28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d104      	bne.n	8001b46 <HAL_SPI_IRQHandler+0x13a>
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d034      	beq.n	8001bb0 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0203 	bic.w	r2, r2, #3
 8001b54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d011      	beq.n	8001b82 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	4a18      	ldr	r2, [pc, #96]	@ (8001bc4 <HAL_SPI_IRQHandler+0x1b8>)
 8001b64:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe ff5a 	bl	8000a24 <HAL_DMA_Abort_IT>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d016      	beq.n	8001bb8 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc4 <HAL_SPI_IRQHandler+0x1b8>)
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe ff44 	bl	8000a24 <HAL_DMA_Abort_IT>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8001bae:	e003      	b.n	8001bb8 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f812 	bl	8001bda <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001bb6:	e000      	b.n	8001bba <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8001bb8:	bf00      	nop
    return;
 8001bba:	bf00      	nop
  }
}
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	08001bed 	.word	0x08001bed

08001bc8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff ffe7 	bl	8001bda <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f103 020c 	add.w	r2, r3, #12
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10f      	bne.n	8001c70 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c5e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f9d4 	bl	8002018 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	7812      	ldrb	r2, [r2, #0]
 8001c8c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10f      	bne.n	8001cd0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cbe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f9a4 	bl	8002018 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cea:	b292      	uxth	r2, r2
 8001cec:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf2:	1c9a      	adds	r2, r3, #2
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10f      	bne.n	8001d30 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d1e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f974 	bl	8002018 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	881a      	ldrh	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d50:	1c9a      	adds	r2, r3, #2
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10f      	bne.n	8001d8e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d7c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f945 	bl	8002018 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f103 020c 	add.w	r2, r3, #12
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f994 	bl	8002100 <SPI_CloseRx_ISR>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df2:	b292      	uxth	r2, r2
 8001df4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfa:	1c9a      	adds	r2, r3, #2
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f971 	bl	8002100 <SPI_CloseRx_ISR>
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e38:	f7fe fca2 	bl	8000780 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e48:	f7fe fc9a 	bl	8000780 <HAL_GetTick>
 8001e4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e4e:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	015b      	lsls	r3, r3, #5
 8001e54:	0d1b      	lsrs	r3, r3, #20
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e5e:	e054      	b.n	8001f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e66:	d050      	beq.n	8001f0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e68:	f7fe fc8a 	bl	8000780 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d902      	bls.n	8001e7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d13d      	bne.n	8001efa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001e8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e96:	d111      	bne.n	8001ebc <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ea0:	d004      	beq.n	8001eac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eaa:	d107      	bne.n	8001ebc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ec4:	d10f      	bne.n	8001ee6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ee4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e017      	b.n	8001f2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4013      	ands	r3, r2
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	bf0c      	ite	eq
 8001f1a:	2301      	moveq	r3, #1
 8001f1c:	2300      	movne	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d19b      	bne.n	8001e60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000

08001f38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f4c:	d111      	bne.n	8001f72 <SPI_EndRxTransaction+0x3a>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f56:	d004      	beq.n	8001f62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f60:	d107      	bne.n	8001f72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f70:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f7a:	d117      	bne.n	8001fac <SPI_EndRxTransaction+0x74>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f84:	d112      	bne.n	8001fac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2101      	movs	r1, #1
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff ff49 	bl	8001e28 <SPI_WaitFlagStateUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01a      	beq.n	8001fd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e013      	b.n	8001fd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff ff36 	bl	8001e28 <SPI_WaitFlagStateUntilTimeout>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc6:	f043 0220 	orr.w	r2, r3, #32
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e000      	b.n	8001fd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2180      	movs	r1, #128	@ 0x80
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff ff18 	bl	8001e28 <SPI_WaitFlagStateUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d007      	beq.n	800200e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002002:	f043 0220 	orr.w	r2, r3, #32
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e000      	b.n	8002010 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002020:	4b35      	ldr	r3, [pc, #212]	@ (80020f8 <SPI_CloseRxTx_ISR+0xe0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a35      	ldr	r2, [pc, #212]	@ (80020fc <SPI_CloseRxTx_ISR+0xe4>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0a5b      	lsrs	r3, r3, #9
 800202c:	2264      	movs	r2, #100	@ 0x64
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002034:	f7fe fba4 	bl	8000780 <HAL_GetTick>
 8002038:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0220 	bic.w	r2, r2, #32
 8002048:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800205c:	e009      	b.n	8002072 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	3b01      	subs	r3, #1
 8002062:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0eb      	beq.n	800204a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	2164      	movs	r1, #100	@ 0x64
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffb0 	bl	8001fdc <SPI_EndRxTxTransaction>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002086:	f043 0220 	orr.w	r2, r3, #32
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d115      	bne.n	80020e0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d107      	bne.n	80020d0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7fe f83f 	bl	800014c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80020ce:	e00e      	b.n	80020ee <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fd75 	bl	8001bc8 <HAL_SPI_TxRxCpltCallback>
}
 80020de:	e006      	b.n	80020ee <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fd76 	bl	8001bda <HAL_SPI_ErrorCallback>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000000 	.word	0x20000000
 80020fc:	057619f1 	.word	0x057619f1

08002100 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002116:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002118:	f7fe fb32 	bl	8000780 <HAL_GetTick>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	2164      	movs	r1, #100	@ 0x64
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff08 	bl	8001f38 <SPI_EndRxTransaction>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	2b00      	cmp	r3, #0
 8002166:	d103      	bne.n	8002170 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7fd ffef 	bl	800014c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800216e:	e002      	b.n	8002176 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fd32 	bl	8001bda <HAL_SPI_ErrorCallback>
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e042      	b.n	8002216 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d106      	bne.n	80021aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7fe f99d 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2224      	movs	r2, #36	@ 0x24
 80021ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fd70 	bl	8002ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b08a      	sub	sp, #40	@ 0x28
 8002222:	af02      	add	r7, sp, #8
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b20      	cmp	r3, #32
 800223c:	d16d      	bne.n	800231a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_UART_Transmit+0x2c>
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e066      	b.n	800231c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2221      	movs	r2, #33	@ 0x21
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800225c:	f7fe fa90 	bl	8000780 <HAL_GetTick>
 8002260:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	88fa      	ldrh	r2, [r7, #6]
 800226c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002276:	d108      	bne.n	800228a <HAL_UART_Transmit+0x6c>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	e003      	b.n	8002292 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002292:	e02a      	b.n	80022ea <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2200      	movs	r2, #0
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 faf8 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e036      	b.n	800231c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3302      	adds	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	e007      	b.n	80022dc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1cf      	bne.n	8002294 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2140      	movs	r1, #64	@ 0x40
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fac8 	bl	8002894 <UART_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e006      	b.n	800231c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0ba      	sub	sp, #232	@ 0xe8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800236a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_UART_IRQHandler+0x66>
 8002376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fbd1 	bl	8002b2a <UART_Receive_IT>
      return;
 8002388:	e25b      	b.n	8002842 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800238a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80de 	beq.w	8002550 <HAL_UART_IRQHandler+0x22c>
 8002394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d106      	bne.n	80023ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80d1 	beq.w	8002550 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_UART_IRQHandler+0xae>
 80023ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_UART_IRQHandler+0xd2>
 80023de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	f043 0202 	orr.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_UART_IRQHandler+0xf6>
 8002402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	f043 0204 	orr.w	r2, r3, #4
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800241a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <HAL_UART_IRQHandler+0x126>
 8002426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	f043 0208 	orr.w	r2, r3, #8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 81f2 	beq.w	8002838 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_UART_IRQHandler+0x14e>
 8002460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fb5c 	bl	8002b2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf14      	ite	ne
 8002480:	2301      	movne	r3, #1
 8002482:	2300      	moveq	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <HAL_UART_IRQHandler+0x17a>
 8002496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d04f      	beq.n	800253e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa66 	bl	8002970 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d041      	beq.n	8002536 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3314      	adds	r3, #20
 80024b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024c0:	e853 3f00 	ldrex	r3, [r3]
 80024c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80024c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3314      	adds	r3, #20
 80024da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80024de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80024e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80024ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80024ee:	e841 2300 	strex	r3, r2, [r1]
 80024f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80024f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1d9      	bne.n	80024b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d013      	beq.n	800252e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250a:	4a7e      	ldr	r2, [pc, #504]	@ (8002704 <HAL_UART_IRQHandler+0x3e0>)
 800250c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fa86 	bl	8000a24 <HAL_DMA_Abort_IT>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002528:	4610      	mov	r0, r2
 800252a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252c:	e00e      	b.n	800254c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f99c 	bl	800286c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002534:	e00a      	b.n	800254c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f998 	bl	800286c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800253c:	e006      	b.n	800254c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f994 	bl	800286c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800254a:	e175      	b.n	8002838 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800254c:	bf00      	nop
    return;
 800254e:	e173      	b.n	8002838 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	2b01      	cmp	r3, #1
 8002556:	f040 814f 	bne.w	80027f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800255a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8148 	beq.w	80027f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8141 	beq.w	80027f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80b6 	beq.w	8002708 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8145 	beq.w	800283c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025ba:	429a      	cmp	r2, r3
 80025bc:	f080 813e 	bcs.w	800283c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	f000 8088 	beq.w	80026e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025e2:	e853 3f00 	ldrex	r3, [r3]
 80025e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80025ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	330c      	adds	r3, #12
 80025fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002600:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002604:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002608:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800260c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002610:	e841 2300 	strex	r3, r2, [r1]
 8002614:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1d9      	bne.n	80025d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800262a:	e853 3f00 	ldrex	r3, [r3]
 800262e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002630:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3314      	adds	r3, #20
 8002640:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002644:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002648:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800264c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002650:	e841 2300 	strex	r3, r2, [r1]
 8002654:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e1      	bne.n	8002620 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3314      	adds	r3, #20
 8002662:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002666:	e853 3f00 	ldrex	r3, [r3]
 800266a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800266c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800266e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3314      	adds	r3, #20
 800267c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002680:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002682:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002684:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002686:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002688:	e841 2300 	strex	r3, r2, [r1]
 800268c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800268e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e3      	bne.n	800265c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80026b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026b4:	f023 0310 	bic.w	r3, r3, #16
 80026b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80026c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80026c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80026d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e3      	bne.n	80026a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe f965 	bl	80009ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8bf 	bl	800287e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002700:	e09c      	b.n	800283c <HAL_UART_IRQHandler+0x518>
 8002702:	bf00      	nop
 8002704:	08002a35 	.word	0x08002a35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002710:	b29b      	uxth	r3, r3
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 808e 	beq.w	8002840 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8089 	beq.w	8002840 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	330c      	adds	r3, #12
 8002734:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002744:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	330c      	adds	r3, #12
 800274e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002752:	647a      	str	r2, [r7, #68]	@ 0x44
 8002754:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002758:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e3      	bne.n	800272e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3314      	adds	r3, #20
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	e853 3f00 	ldrex	r3, [r3]
 8002774:	623b      	str	r3, [r7, #32]
   return(result);
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3314      	adds	r3, #20
 8002786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800278a:	633a      	str	r2, [r7, #48]	@ 0x30
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002792:	e841 2300 	strex	r3, r2, [r1]
 8002796:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1e3      	bne.n	8002766 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	e853 3f00 	ldrex	r3, [r3]
 80027ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0310 	bic.w	r3, r3, #16
 80027c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80027d0:	61fa      	str	r2, [r7, #28]
 80027d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d4:	69b9      	ldr	r1, [r7, #24]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	e841 2300 	strex	r3, r2, [r1]
 80027dc:	617b      	str	r3, [r7, #20]
   return(result);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e3      	bne.n	80027ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027ee:	4619      	mov	r1, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f844 	bl	800287e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f6:	e023      	b.n	8002840 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <HAL_UART_IRQHandler+0x4f4>
 8002804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f923 	bl	8002a5c <UART_Transmit_IT>
    return;
 8002816:	e014      	b.n	8002842 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800281c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00e      	beq.n	8002842 <HAL_UART_IRQHandler+0x51e>
 8002824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f962 	bl	8002afa <UART_EndTransmit_IT>
    return;
 8002836:	e004      	b.n	8002842 <HAL_UART_IRQHandler+0x51e>
    return;
 8002838:	bf00      	nop
 800283a:	e002      	b.n	8002842 <HAL_UART_IRQHandler+0x51e>
      return;
 800283c:	bf00      	nop
 800283e:	e000      	b.n	8002842 <HAL_UART_IRQHandler+0x51e>
      return;
 8002840:	bf00      	nop
  }
}
 8002842:	37e8      	adds	r7, #232	@ 0xe8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b090      	sub	sp, #64	@ 0x40
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a4:	e050      	b.n	8002948 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d04c      	beq.n	8002948 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80028b4:	f7fd ff64 	bl	8000780 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d241      	bcs.n	8002948 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	330c      	adds	r3, #12
 80028ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	e853 3f00 	ldrex	r3, [r3]
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80028da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	330c      	adds	r3, #12
 80028e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80028e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028ec:	e841 2300 	strex	r3, r2, [r1]
 80028f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80028f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e5      	bne.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3314      	adds	r3, #20
 80028fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	e853 3f00 	ldrex	r3, [r3]
 8002906:	613b      	str	r3, [r7, #16]
   return(result);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3314      	adds	r3, #20
 8002916:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002918:	623a      	str	r2, [r7, #32]
 800291a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291c:	69f9      	ldr	r1, [r7, #28]
 800291e:	6a3a      	ldr	r2, [r7, #32]
 8002920:	e841 2300 	strex	r3, r2, [r1]
 8002924:	61bb      	str	r3, [r7, #24]
   return(result);
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1e5      	bne.n	80028f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e00f      	b.n	8002968 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4013      	ands	r3, r2
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	429a      	cmp	r2, r3
 8002964:	d09f      	beq.n	80028a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3740      	adds	r7, #64	@ 0x40
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002970:	b480      	push	{r7}
 8002972:	b095      	sub	sp, #84	@ 0x54
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	e853 3f00 	ldrex	r3, [r3]
 8002986:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800298e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002998:	643a      	str	r2, [r7, #64]	@ 0x40
 800299a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800299e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e5      	bne.n	8002978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3314      	adds	r3, #20
 80029b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	e853 3f00 	ldrex	r3, [r3]
 80029ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3314      	adds	r3, #20
 80029ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029d4:	e841 2300 	strex	r3, r2, [r1]
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e5      	bne.n	80029ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d119      	bne.n	8002a1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	e853 3f00 	ldrex	r3, [r3]
 80029f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f023 0310 	bic.w	r3, r3, #16
 80029fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a08:	61ba      	str	r2, [r7, #24]
 8002a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0c:	6979      	ldr	r1, [r7, #20]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	e841 2300 	strex	r3, r2, [r1]
 8002a14:	613b      	str	r3, [r7, #16]
   return(result);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e5      	bne.n	80029e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a2a:	bf00      	nop
 8002a2c:	3754      	adds	r7, #84	@ 0x54
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7ff ff0c 	bl	800286c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b21      	cmp	r3, #33	@ 0x21
 8002a6e:	d13e      	bne.n	8002aee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a78:	d114      	bne.n	8002aa4 <UART_Transmit_IT+0x48>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d110      	bne.n	8002aa4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	1c9a      	adds	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	621a      	str	r2, [r3, #32]
 8002aa2:	e008      	b.n	8002ab6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	1c59      	adds	r1, r3, #1
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6211      	str	r1, [r2, #32]
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ad8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ae8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fe94 	bl	8002848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b08c      	sub	sp, #48	@ 0x30
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b22      	cmp	r3, #34	@ 0x22
 8002b3c:	f040 80ae 	bne.w	8002c9c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b48:	d117      	bne.n	8002b7a <UART_Receive_IT+0x50>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d113      	bne.n	8002b7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b72:	1c9a      	adds	r2, r3, #2
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b78:	e026      	b.n	8002bc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8c:	d007      	beq.n	8002b9e <UART_Receive_IT+0x74>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <UART_Receive_IT+0x82>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e008      	b.n	8002bbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d15d      	bne.n	8002c98 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0220 	bic.w	r2, r2, #32
 8002bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d135      	bne.n	8002c8e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	e853 3f00 	ldrex	r3, [r3]
 8002c36:	613b      	str	r3, [r7, #16]
   return(result);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f023 0310 	bic.w	r3, r3, #16
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c48:	623a      	str	r2, [r7, #32]
 8002c4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4c:	69f9      	ldr	r1, [r7, #28]
 8002c4e:	6a3a      	ldr	r2, [r7, #32]
 8002c50:	e841 2300 	strex	r3, r2, [r1]
 8002c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e5      	bne.n	8002c28 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d10a      	bne.n	8002c80 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fdf9 	bl	800287e <HAL_UARTEx_RxEventCallback>
 8002c8c:	e002      	b.n	8002c94 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fde3 	bl	800285a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e002      	b.n	8002c9e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3730      	adds	r7, #48	@ 0x30
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002ce2:	f023 030c 	bic.w	r3, r3, #12
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002dbc <UART_SetConfig+0x114>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d103      	bne.n	8002d18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d10:	f7fe fc94 	bl	800163c <HAL_RCC_GetPCLK2Freq>
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	e002      	b.n	8002d1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d18:	f7fe fc7c 	bl	8001614 <HAL_RCC_GetPCLK1Freq>
 8002d1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009a      	lsls	r2, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <UART_SetConfig+0x118>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	0119      	lsls	r1, r3, #4
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	441a      	add	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d54:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc0 <UART_SetConfig+0x118>)
 8002d56:	fba3 0302 	umull	r0, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2064      	movs	r0, #100	@ 0x64
 8002d5e:	fb00 f303 	mul.w	r3, r0, r3
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	3332      	adds	r3, #50	@ 0x32
 8002d68:	4a15      	ldr	r2, [pc, #84]	@ (8002dc0 <UART_SetConfig+0x118>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d74:	4419      	add	r1, r3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009a      	lsls	r2, r3, #2
 8002d80:	441a      	add	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <UART_SetConfig+0x118>)
 8002d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2064      	movs	r0, #100	@ 0x64
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	3332      	adds	r3, #50	@ 0x32
 8002da0:	4a07      	ldr	r2, [pc, #28]	@ (8002dc0 <UART_SetConfig+0x118>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	440a      	add	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40013800 	.word	0x40013800
 8002dc0:	51eb851f 	.word	0x51eb851f

08002dc4 <siprintf>:
 8002dc4:	b40e      	push	{r1, r2, r3}
 8002dc6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002dca:	b500      	push	{lr}
 8002dcc:	b09c      	sub	sp, #112	@ 0x70
 8002dce:	ab1d      	add	r3, sp, #116	@ 0x74
 8002dd0:	9002      	str	r0, [sp, #8]
 8002dd2:	9006      	str	r0, [sp, #24]
 8002dd4:	9107      	str	r1, [sp, #28]
 8002dd6:	9104      	str	r1, [sp, #16]
 8002dd8:	4808      	ldr	r0, [pc, #32]	@ (8002dfc <siprintf+0x38>)
 8002dda:	4909      	ldr	r1, [pc, #36]	@ (8002e00 <siprintf+0x3c>)
 8002ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002de0:	9105      	str	r1, [sp, #20]
 8002de2:	6800      	ldr	r0, [r0, #0]
 8002de4:	a902      	add	r1, sp, #8
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	f000 f992 	bl	8003110 <_svfiprintf_r>
 8002dec:	2200      	movs	r2, #0
 8002dee:	9b02      	ldr	r3, [sp, #8]
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	b01c      	add	sp, #112	@ 0x70
 8002df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002df8:	b003      	add	sp, #12
 8002dfa:	4770      	bx	lr
 8002dfc:	2000000c 	.word	0x2000000c
 8002e00:	ffff0208 	.word	0xffff0208

08002e04 <memset>:
 8002e04:	4603      	mov	r3, r0
 8002e06:	4402      	add	r2, r0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <memset+0xa>
 8002e0c:	4770      	bx	lr
 8002e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e12:	e7f9      	b.n	8002e08 <memset+0x4>

08002e14 <__errno>:
 8002e14:	4b01      	ldr	r3, [pc, #4]	@ (8002e1c <__errno+0x8>)
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	2000000c 	.word	0x2000000c

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2600      	movs	r6, #0
 8002e24:	4d0c      	ldr	r5, [pc, #48]	@ (8002e58 <__libc_init_array+0x38>)
 8002e26:	4c0d      	ldr	r4, [pc, #52]	@ (8002e5c <__libc_init_array+0x3c>)
 8002e28:	1b64      	subs	r4, r4, r5
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d109      	bne.n	8002e44 <__libc_init_array+0x24>
 8002e30:	f000 fc78 	bl	8003724 <_init>
 8002e34:	2600      	movs	r6, #0
 8002e36:	4d0a      	ldr	r5, [pc, #40]	@ (8002e60 <__libc_init_array+0x40>)
 8002e38:	4c0a      	ldr	r4, [pc, #40]	@ (8002e64 <__libc_init_array+0x44>)
 8002e3a:	1b64      	subs	r4, r4, r5
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	42a6      	cmp	r6, r4
 8002e40:	d105      	bne.n	8002e4e <__libc_init_array+0x2e>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e48:	4798      	blx	r3
 8002e4a:	3601      	adds	r6, #1
 8002e4c:	e7ee      	b.n	8002e2c <__libc_init_array+0xc>
 8002e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e52:	4798      	blx	r3
 8002e54:	3601      	adds	r6, #1
 8002e56:	e7f2      	b.n	8002e3e <__libc_init_array+0x1e>
 8002e58:	080037a0 	.word	0x080037a0
 8002e5c:	080037a0 	.word	0x080037a0
 8002e60:	080037a0 	.word	0x080037a0
 8002e64:	080037a4 	.word	0x080037a4

08002e68 <__retarget_lock_acquire_recursive>:
 8002e68:	4770      	bx	lr

08002e6a <__retarget_lock_release_recursive>:
 8002e6a:	4770      	bx	lr

08002e6c <_free_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	4605      	mov	r5, r0
 8002e70:	2900      	cmp	r1, #0
 8002e72:	d040      	beq.n	8002ef6 <_free_r+0x8a>
 8002e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e78:	1f0c      	subs	r4, r1, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bfb8      	it	lt
 8002e7e:	18e4      	addlt	r4, r4, r3
 8002e80:	f000 f8de 	bl	8003040 <__malloc_lock>
 8002e84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <_free_r+0x8c>)
 8002e86:	6813      	ldr	r3, [r2, #0]
 8002e88:	b933      	cbnz	r3, 8002e98 <_free_r+0x2c>
 8002e8a:	6063      	str	r3, [r4, #4]
 8002e8c:	6014      	str	r4, [r2, #0]
 8002e8e:	4628      	mov	r0, r5
 8002e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e94:	f000 b8da 	b.w	800304c <__malloc_unlock>
 8002e98:	42a3      	cmp	r3, r4
 8002e9a:	d908      	bls.n	8002eae <_free_r+0x42>
 8002e9c:	6820      	ldr	r0, [r4, #0]
 8002e9e:	1821      	adds	r1, r4, r0
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	bf01      	itttt	eq
 8002ea4:	6819      	ldreq	r1, [r3, #0]
 8002ea6:	685b      	ldreq	r3, [r3, #4]
 8002ea8:	1809      	addeq	r1, r1, r0
 8002eaa:	6021      	streq	r1, [r4, #0]
 8002eac:	e7ed      	b.n	8002e8a <_free_r+0x1e>
 8002eae:	461a      	mov	r2, r3
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	b10b      	cbz	r3, 8002eb8 <_free_r+0x4c>
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	d9fa      	bls.n	8002eae <_free_r+0x42>
 8002eb8:	6811      	ldr	r1, [r2, #0]
 8002eba:	1850      	adds	r0, r2, r1
 8002ebc:	42a0      	cmp	r0, r4
 8002ebe:	d10b      	bne.n	8002ed8 <_free_r+0x6c>
 8002ec0:	6820      	ldr	r0, [r4, #0]
 8002ec2:	4401      	add	r1, r0
 8002ec4:	1850      	adds	r0, r2, r1
 8002ec6:	4283      	cmp	r3, r0
 8002ec8:	6011      	str	r1, [r2, #0]
 8002eca:	d1e0      	bne.n	8002e8e <_free_r+0x22>
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4408      	add	r0, r1
 8002ed2:	6010      	str	r0, [r2, #0]
 8002ed4:	6053      	str	r3, [r2, #4]
 8002ed6:	e7da      	b.n	8002e8e <_free_r+0x22>
 8002ed8:	d902      	bls.n	8002ee0 <_free_r+0x74>
 8002eda:	230c      	movs	r3, #12
 8002edc:	602b      	str	r3, [r5, #0]
 8002ede:	e7d6      	b.n	8002e8e <_free_r+0x22>
 8002ee0:	6820      	ldr	r0, [r4, #0]
 8002ee2:	1821      	adds	r1, r4, r0
 8002ee4:	428b      	cmp	r3, r1
 8002ee6:	bf01      	itttt	eq
 8002ee8:	6819      	ldreq	r1, [r3, #0]
 8002eea:	685b      	ldreq	r3, [r3, #4]
 8002eec:	1809      	addeq	r1, r1, r0
 8002eee:	6021      	streq	r1, [r4, #0]
 8002ef0:	6063      	str	r3, [r4, #4]
 8002ef2:	6054      	str	r4, [r2, #4]
 8002ef4:	e7cb      	b.n	8002e8e <_free_r+0x22>
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	2000027c 	.word	0x2000027c

08002efc <sbrk_aligned>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4e0f      	ldr	r6, [pc, #60]	@ (8002f3c <sbrk_aligned+0x40>)
 8002f00:	460c      	mov	r4, r1
 8002f02:	6831      	ldr	r1, [r6, #0]
 8002f04:	4605      	mov	r5, r0
 8002f06:	b911      	cbnz	r1, 8002f0e <sbrk_aligned+0x12>
 8002f08:	f000 fbaa 	bl	8003660 <_sbrk_r>
 8002f0c:	6030      	str	r0, [r6, #0]
 8002f0e:	4621      	mov	r1, r4
 8002f10:	4628      	mov	r0, r5
 8002f12:	f000 fba5 	bl	8003660 <_sbrk_r>
 8002f16:	1c43      	adds	r3, r0, #1
 8002f18:	d103      	bne.n	8002f22 <sbrk_aligned+0x26>
 8002f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8002f1e:	4620      	mov	r0, r4
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
 8002f22:	1cc4      	adds	r4, r0, #3
 8002f24:	f024 0403 	bic.w	r4, r4, #3
 8002f28:	42a0      	cmp	r0, r4
 8002f2a:	d0f8      	beq.n	8002f1e <sbrk_aligned+0x22>
 8002f2c:	1a21      	subs	r1, r4, r0
 8002f2e:	4628      	mov	r0, r5
 8002f30:	f000 fb96 	bl	8003660 <_sbrk_r>
 8002f34:	3001      	adds	r0, #1
 8002f36:	d1f2      	bne.n	8002f1e <sbrk_aligned+0x22>
 8002f38:	e7ef      	b.n	8002f1a <sbrk_aligned+0x1e>
 8002f3a:	bf00      	nop
 8002f3c:	20000278 	.word	0x20000278

08002f40 <_malloc_r>:
 8002f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f44:	1ccd      	adds	r5, r1, #3
 8002f46:	f025 0503 	bic.w	r5, r5, #3
 8002f4a:	3508      	adds	r5, #8
 8002f4c:	2d0c      	cmp	r5, #12
 8002f4e:	bf38      	it	cc
 8002f50:	250c      	movcc	r5, #12
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	4606      	mov	r6, r0
 8002f56:	db01      	blt.n	8002f5c <_malloc_r+0x1c>
 8002f58:	42a9      	cmp	r1, r5
 8002f5a:	d904      	bls.n	8002f66 <_malloc_r+0x26>
 8002f5c:	230c      	movs	r3, #12
 8002f5e:	6033      	str	r3, [r6, #0]
 8002f60:	2000      	movs	r0, #0
 8002f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800303c <_malloc_r+0xfc>
 8002f6a:	f000 f869 	bl	8003040 <__malloc_lock>
 8002f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f72:	461c      	mov	r4, r3
 8002f74:	bb44      	cbnz	r4, 8002fc8 <_malloc_r+0x88>
 8002f76:	4629      	mov	r1, r5
 8002f78:	4630      	mov	r0, r6
 8002f7a:	f7ff ffbf 	bl	8002efc <sbrk_aligned>
 8002f7e:	1c43      	adds	r3, r0, #1
 8002f80:	4604      	mov	r4, r0
 8002f82:	d158      	bne.n	8003036 <_malloc_r+0xf6>
 8002f84:	f8d8 4000 	ldr.w	r4, [r8]
 8002f88:	4627      	mov	r7, r4
 8002f8a:	2f00      	cmp	r7, #0
 8002f8c:	d143      	bne.n	8003016 <_malloc_r+0xd6>
 8002f8e:	2c00      	cmp	r4, #0
 8002f90:	d04b      	beq.n	800302a <_malloc_r+0xea>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	4639      	mov	r1, r7
 8002f96:	4630      	mov	r0, r6
 8002f98:	eb04 0903 	add.w	r9, r4, r3
 8002f9c:	f000 fb60 	bl	8003660 <_sbrk_r>
 8002fa0:	4581      	cmp	r9, r0
 8002fa2:	d142      	bne.n	800302a <_malloc_r+0xea>
 8002fa4:	6821      	ldr	r1, [r4, #0]
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	1a6d      	subs	r5, r5, r1
 8002faa:	4629      	mov	r1, r5
 8002fac:	f7ff ffa6 	bl	8002efc <sbrk_aligned>
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d03a      	beq.n	800302a <_malloc_r+0xea>
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	442b      	add	r3, r5
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	f8d8 3000 	ldr.w	r3, [r8]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	bb62      	cbnz	r2, 800301c <_malloc_r+0xdc>
 8002fc2:	f8c8 7000 	str.w	r7, [r8]
 8002fc6:	e00f      	b.n	8002fe8 <_malloc_r+0xa8>
 8002fc8:	6822      	ldr	r2, [r4, #0]
 8002fca:	1b52      	subs	r2, r2, r5
 8002fcc:	d420      	bmi.n	8003010 <_malloc_r+0xd0>
 8002fce:	2a0b      	cmp	r2, #11
 8002fd0:	d917      	bls.n	8003002 <_malloc_r+0xc2>
 8002fd2:	1961      	adds	r1, r4, r5
 8002fd4:	42a3      	cmp	r3, r4
 8002fd6:	6025      	str	r5, [r4, #0]
 8002fd8:	bf18      	it	ne
 8002fda:	6059      	strne	r1, [r3, #4]
 8002fdc:	6863      	ldr	r3, [r4, #4]
 8002fde:	bf08      	it	eq
 8002fe0:	f8c8 1000 	streq.w	r1, [r8]
 8002fe4:	5162      	str	r2, [r4, r5]
 8002fe6:	604b      	str	r3, [r1, #4]
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f000 f82f 	bl	800304c <__malloc_unlock>
 8002fee:	f104 000b 	add.w	r0, r4, #11
 8002ff2:	1d23      	adds	r3, r4, #4
 8002ff4:	f020 0007 	bic.w	r0, r0, #7
 8002ff8:	1ac2      	subs	r2, r0, r3
 8002ffa:	bf1c      	itt	ne
 8002ffc:	1a1b      	subne	r3, r3, r0
 8002ffe:	50a3      	strne	r3, [r4, r2]
 8003000:	e7af      	b.n	8002f62 <_malloc_r+0x22>
 8003002:	6862      	ldr	r2, [r4, #4]
 8003004:	42a3      	cmp	r3, r4
 8003006:	bf0c      	ite	eq
 8003008:	f8c8 2000 	streq.w	r2, [r8]
 800300c:	605a      	strne	r2, [r3, #4]
 800300e:	e7eb      	b.n	8002fe8 <_malloc_r+0xa8>
 8003010:	4623      	mov	r3, r4
 8003012:	6864      	ldr	r4, [r4, #4]
 8003014:	e7ae      	b.n	8002f74 <_malloc_r+0x34>
 8003016:	463c      	mov	r4, r7
 8003018:	687f      	ldr	r7, [r7, #4]
 800301a:	e7b6      	b.n	8002f8a <_malloc_r+0x4a>
 800301c:	461a      	mov	r2, r3
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	42a3      	cmp	r3, r4
 8003022:	d1fb      	bne.n	800301c <_malloc_r+0xdc>
 8003024:	2300      	movs	r3, #0
 8003026:	6053      	str	r3, [r2, #4]
 8003028:	e7de      	b.n	8002fe8 <_malloc_r+0xa8>
 800302a:	230c      	movs	r3, #12
 800302c:	4630      	mov	r0, r6
 800302e:	6033      	str	r3, [r6, #0]
 8003030:	f000 f80c 	bl	800304c <__malloc_unlock>
 8003034:	e794      	b.n	8002f60 <_malloc_r+0x20>
 8003036:	6005      	str	r5, [r0, #0]
 8003038:	e7d6      	b.n	8002fe8 <_malloc_r+0xa8>
 800303a:	bf00      	nop
 800303c:	2000027c 	.word	0x2000027c

08003040 <__malloc_lock>:
 8003040:	4801      	ldr	r0, [pc, #4]	@ (8003048 <__malloc_lock+0x8>)
 8003042:	f7ff bf11 	b.w	8002e68 <__retarget_lock_acquire_recursive>
 8003046:	bf00      	nop
 8003048:	20000274 	.word	0x20000274

0800304c <__malloc_unlock>:
 800304c:	4801      	ldr	r0, [pc, #4]	@ (8003054 <__malloc_unlock+0x8>)
 800304e:	f7ff bf0c 	b.w	8002e6a <__retarget_lock_release_recursive>
 8003052:	bf00      	nop
 8003054:	20000274 	.word	0x20000274

08003058 <__ssputs_r>:
 8003058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800305c:	461f      	mov	r7, r3
 800305e:	688e      	ldr	r6, [r1, #8]
 8003060:	4682      	mov	sl, r0
 8003062:	42be      	cmp	r6, r7
 8003064:	460c      	mov	r4, r1
 8003066:	4690      	mov	r8, r2
 8003068:	680b      	ldr	r3, [r1, #0]
 800306a:	d82d      	bhi.n	80030c8 <__ssputs_r+0x70>
 800306c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003070:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003074:	d026      	beq.n	80030c4 <__ssputs_r+0x6c>
 8003076:	6965      	ldr	r5, [r4, #20]
 8003078:	6909      	ldr	r1, [r1, #16]
 800307a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800307e:	eba3 0901 	sub.w	r9, r3, r1
 8003082:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003086:	1c7b      	adds	r3, r7, #1
 8003088:	444b      	add	r3, r9
 800308a:	106d      	asrs	r5, r5, #1
 800308c:	429d      	cmp	r5, r3
 800308e:	bf38      	it	cc
 8003090:	461d      	movcc	r5, r3
 8003092:	0553      	lsls	r3, r2, #21
 8003094:	d527      	bpl.n	80030e6 <__ssputs_r+0x8e>
 8003096:	4629      	mov	r1, r5
 8003098:	f7ff ff52 	bl	8002f40 <_malloc_r>
 800309c:	4606      	mov	r6, r0
 800309e:	b360      	cbz	r0, 80030fa <__ssputs_r+0xa2>
 80030a0:	464a      	mov	r2, r9
 80030a2:	6921      	ldr	r1, [r4, #16]
 80030a4:	f000 fafa 	bl	800369c <memcpy>
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030b2:	81a3      	strh	r3, [r4, #12]
 80030b4:	6126      	str	r6, [r4, #16]
 80030b6:	444e      	add	r6, r9
 80030b8:	6026      	str	r6, [r4, #0]
 80030ba:	463e      	mov	r6, r7
 80030bc:	6165      	str	r5, [r4, #20]
 80030be:	eba5 0509 	sub.w	r5, r5, r9
 80030c2:	60a5      	str	r5, [r4, #8]
 80030c4:	42be      	cmp	r6, r7
 80030c6:	d900      	bls.n	80030ca <__ssputs_r+0x72>
 80030c8:	463e      	mov	r6, r7
 80030ca:	4632      	mov	r2, r6
 80030cc:	4641      	mov	r1, r8
 80030ce:	6820      	ldr	r0, [r4, #0]
 80030d0:	f000 faac 	bl	800362c <memmove>
 80030d4:	2000      	movs	r0, #0
 80030d6:	68a3      	ldr	r3, [r4, #8]
 80030d8:	1b9b      	subs	r3, r3, r6
 80030da:	60a3      	str	r3, [r4, #8]
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	4433      	add	r3, r6
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e6:	462a      	mov	r2, r5
 80030e8:	f000 fae6 	bl	80036b8 <_realloc_r>
 80030ec:	4606      	mov	r6, r0
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d1e0      	bne.n	80030b4 <__ssputs_r+0x5c>
 80030f2:	4650      	mov	r0, sl
 80030f4:	6921      	ldr	r1, [r4, #16]
 80030f6:	f7ff feb9 	bl	8002e6c <_free_r>
 80030fa:	230c      	movs	r3, #12
 80030fc:	f8ca 3000 	str.w	r3, [sl]
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	f04f 30ff 	mov.w	r0, #4294967295
 8003106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800310a:	81a3      	strh	r3, [r4, #12]
 800310c:	e7e9      	b.n	80030e2 <__ssputs_r+0x8a>
	...

08003110 <_svfiprintf_r>:
 8003110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003114:	4698      	mov	r8, r3
 8003116:	898b      	ldrh	r3, [r1, #12]
 8003118:	4607      	mov	r7, r0
 800311a:	061b      	lsls	r3, r3, #24
 800311c:	460d      	mov	r5, r1
 800311e:	4614      	mov	r4, r2
 8003120:	b09d      	sub	sp, #116	@ 0x74
 8003122:	d510      	bpl.n	8003146 <_svfiprintf_r+0x36>
 8003124:	690b      	ldr	r3, [r1, #16]
 8003126:	b973      	cbnz	r3, 8003146 <_svfiprintf_r+0x36>
 8003128:	2140      	movs	r1, #64	@ 0x40
 800312a:	f7ff ff09 	bl	8002f40 <_malloc_r>
 800312e:	6028      	str	r0, [r5, #0]
 8003130:	6128      	str	r0, [r5, #16]
 8003132:	b930      	cbnz	r0, 8003142 <_svfiprintf_r+0x32>
 8003134:	230c      	movs	r3, #12
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	b01d      	add	sp, #116	@ 0x74
 800313e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003142:	2340      	movs	r3, #64	@ 0x40
 8003144:	616b      	str	r3, [r5, #20]
 8003146:	2300      	movs	r3, #0
 8003148:	9309      	str	r3, [sp, #36]	@ 0x24
 800314a:	2320      	movs	r3, #32
 800314c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003150:	2330      	movs	r3, #48	@ 0x30
 8003152:	f04f 0901 	mov.w	r9, #1
 8003156:	f8cd 800c 	str.w	r8, [sp, #12]
 800315a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80032f4 <_svfiprintf_r+0x1e4>
 800315e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003162:	4623      	mov	r3, r4
 8003164:	469a      	mov	sl, r3
 8003166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800316a:	b10a      	cbz	r2, 8003170 <_svfiprintf_r+0x60>
 800316c:	2a25      	cmp	r2, #37	@ 0x25
 800316e:	d1f9      	bne.n	8003164 <_svfiprintf_r+0x54>
 8003170:	ebba 0b04 	subs.w	fp, sl, r4
 8003174:	d00b      	beq.n	800318e <_svfiprintf_r+0x7e>
 8003176:	465b      	mov	r3, fp
 8003178:	4622      	mov	r2, r4
 800317a:	4629      	mov	r1, r5
 800317c:	4638      	mov	r0, r7
 800317e:	f7ff ff6b 	bl	8003058 <__ssputs_r>
 8003182:	3001      	adds	r0, #1
 8003184:	f000 80a7 	beq.w	80032d6 <_svfiprintf_r+0x1c6>
 8003188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800318a:	445a      	add	r2, fp
 800318c:	9209      	str	r2, [sp, #36]	@ 0x24
 800318e:	f89a 3000 	ldrb.w	r3, [sl]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 809f 	beq.w	80032d6 <_svfiprintf_r+0x1c6>
 8003198:	2300      	movs	r3, #0
 800319a:	f04f 32ff 	mov.w	r2, #4294967295
 800319e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031a2:	f10a 0a01 	add.w	sl, sl, #1
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	9307      	str	r3, [sp, #28]
 80031aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80031b0:	4654      	mov	r4, sl
 80031b2:	2205      	movs	r2, #5
 80031b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b8:	484e      	ldr	r0, [pc, #312]	@ (80032f4 <_svfiprintf_r+0x1e4>)
 80031ba:	f000 fa61 	bl	8003680 <memchr>
 80031be:	9a04      	ldr	r2, [sp, #16]
 80031c0:	b9d8      	cbnz	r0, 80031fa <_svfiprintf_r+0xea>
 80031c2:	06d0      	lsls	r0, r2, #27
 80031c4:	bf44      	itt	mi
 80031c6:	2320      	movmi	r3, #32
 80031c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031cc:	0711      	lsls	r1, r2, #28
 80031ce:	bf44      	itt	mi
 80031d0:	232b      	movmi	r3, #43	@ 0x2b
 80031d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031d6:	f89a 3000 	ldrb.w	r3, [sl]
 80031da:	2b2a      	cmp	r3, #42	@ 0x2a
 80031dc:	d015      	beq.n	800320a <_svfiprintf_r+0xfa>
 80031de:	4654      	mov	r4, sl
 80031e0:	2000      	movs	r0, #0
 80031e2:	f04f 0c0a 	mov.w	ip, #10
 80031e6:	9a07      	ldr	r2, [sp, #28]
 80031e8:	4621      	mov	r1, r4
 80031ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031ee:	3b30      	subs	r3, #48	@ 0x30
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	d94b      	bls.n	800328c <_svfiprintf_r+0x17c>
 80031f4:	b1b0      	cbz	r0, 8003224 <_svfiprintf_r+0x114>
 80031f6:	9207      	str	r2, [sp, #28]
 80031f8:	e014      	b.n	8003224 <_svfiprintf_r+0x114>
 80031fa:	eba0 0308 	sub.w	r3, r0, r8
 80031fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003202:	4313      	orrs	r3, r2
 8003204:	46a2      	mov	sl, r4
 8003206:	9304      	str	r3, [sp, #16]
 8003208:	e7d2      	b.n	80031b0 <_svfiprintf_r+0xa0>
 800320a:	9b03      	ldr	r3, [sp, #12]
 800320c:	1d19      	adds	r1, r3, #4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	9103      	str	r1, [sp, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	bfbb      	ittet	lt
 8003216:	425b      	neglt	r3, r3
 8003218:	f042 0202 	orrlt.w	r2, r2, #2
 800321c:	9307      	strge	r3, [sp, #28]
 800321e:	9307      	strlt	r3, [sp, #28]
 8003220:	bfb8      	it	lt
 8003222:	9204      	strlt	r2, [sp, #16]
 8003224:	7823      	ldrb	r3, [r4, #0]
 8003226:	2b2e      	cmp	r3, #46	@ 0x2e
 8003228:	d10a      	bne.n	8003240 <_svfiprintf_r+0x130>
 800322a:	7863      	ldrb	r3, [r4, #1]
 800322c:	2b2a      	cmp	r3, #42	@ 0x2a
 800322e:	d132      	bne.n	8003296 <_svfiprintf_r+0x186>
 8003230:	9b03      	ldr	r3, [sp, #12]
 8003232:	3402      	adds	r4, #2
 8003234:	1d1a      	adds	r2, r3, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	9203      	str	r2, [sp, #12]
 800323a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800323e:	9305      	str	r3, [sp, #20]
 8003240:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80032f8 <_svfiprintf_r+0x1e8>
 8003244:	2203      	movs	r2, #3
 8003246:	4650      	mov	r0, sl
 8003248:	7821      	ldrb	r1, [r4, #0]
 800324a:	f000 fa19 	bl	8003680 <memchr>
 800324e:	b138      	cbz	r0, 8003260 <_svfiprintf_r+0x150>
 8003250:	2240      	movs	r2, #64	@ 0x40
 8003252:	9b04      	ldr	r3, [sp, #16]
 8003254:	eba0 000a 	sub.w	r0, r0, sl
 8003258:	4082      	lsls	r2, r0
 800325a:	4313      	orrs	r3, r2
 800325c:	3401      	adds	r4, #1
 800325e:	9304      	str	r3, [sp, #16]
 8003260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003264:	2206      	movs	r2, #6
 8003266:	4825      	ldr	r0, [pc, #148]	@ (80032fc <_svfiprintf_r+0x1ec>)
 8003268:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800326c:	f000 fa08 	bl	8003680 <memchr>
 8003270:	2800      	cmp	r0, #0
 8003272:	d036      	beq.n	80032e2 <_svfiprintf_r+0x1d2>
 8003274:	4b22      	ldr	r3, [pc, #136]	@ (8003300 <_svfiprintf_r+0x1f0>)
 8003276:	bb1b      	cbnz	r3, 80032c0 <_svfiprintf_r+0x1b0>
 8003278:	9b03      	ldr	r3, [sp, #12]
 800327a:	3307      	adds	r3, #7
 800327c:	f023 0307 	bic.w	r3, r3, #7
 8003280:	3308      	adds	r3, #8
 8003282:	9303      	str	r3, [sp, #12]
 8003284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003286:	4433      	add	r3, r6
 8003288:	9309      	str	r3, [sp, #36]	@ 0x24
 800328a:	e76a      	b.n	8003162 <_svfiprintf_r+0x52>
 800328c:	460c      	mov	r4, r1
 800328e:	2001      	movs	r0, #1
 8003290:	fb0c 3202 	mla	r2, ip, r2, r3
 8003294:	e7a8      	b.n	80031e8 <_svfiprintf_r+0xd8>
 8003296:	2300      	movs	r3, #0
 8003298:	f04f 0c0a 	mov.w	ip, #10
 800329c:	4619      	mov	r1, r3
 800329e:	3401      	adds	r4, #1
 80032a0:	9305      	str	r3, [sp, #20]
 80032a2:	4620      	mov	r0, r4
 80032a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032a8:	3a30      	subs	r2, #48	@ 0x30
 80032aa:	2a09      	cmp	r2, #9
 80032ac:	d903      	bls.n	80032b6 <_svfiprintf_r+0x1a6>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0c6      	beq.n	8003240 <_svfiprintf_r+0x130>
 80032b2:	9105      	str	r1, [sp, #20]
 80032b4:	e7c4      	b.n	8003240 <_svfiprintf_r+0x130>
 80032b6:	4604      	mov	r4, r0
 80032b8:	2301      	movs	r3, #1
 80032ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80032be:	e7f0      	b.n	80032a2 <_svfiprintf_r+0x192>
 80032c0:	ab03      	add	r3, sp, #12
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	462a      	mov	r2, r5
 80032c6:	4638      	mov	r0, r7
 80032c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <_svfiprintf_r+0x1f4>)
 80032ca:	a904      	add	r1, sp, #16
 80032cc:	f3af 8000 	nop.w
 80032d0:	1c42      	adds	r2, r0, #1
 80032d2:	4606      	mov	r6, r0
 80032d4:	d1d6      	bne.n	8003284 <_svfiprintf_r+0x174>
 80032d6:	89ab      	ldrh	r3, [r5, #12]
 80032d8:	065b      	lsls	r3, r3, #25
 80032da:	f53f af2d 	bmi.w	8003138 <_svfiprintf_r+0x28>
 80032de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032e0:	e72c      	b.n	800313c <_svfiprintf_r+0x2c>
 80032e2:	ab03      	add	r3, sp, #12
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	462a      	mov	r2, r5
 80032e8:	4638      	mov	r0, r7
 80032ea:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <_svfiprintf_r+0x1f4>)
 80032ec:	a904      	add	r1, sp, #16
 80032ee:	f000 f87d 	bl	80033ec <_printf_i>
 80032f2:	e7ed      	b.n	80032d0 <_svfiprintf_r+0x1c0>
 80032f4:	0800376a 	.word	0x0800376a
 80032f8:	08003770 	.word	0x08003770
 80032fc:	08003774 	.word	0x08003774
 8003300:	00000000 	.word	0x00000000
 8003304:	08003059 	.word	0x08003059

08003308 <_printf_common>:
 8003308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800330c:	4616      	mov	r6, r2
 800330e:	4698      	mov	r8, r3
 8003310:	688a      	ldr	r2, [r1, #8]
 8003312:	690b      	ldr	r3, [r1, #16]
 8003314:	4607      	mov	r7, r0
 8003316:	4293      	cmp	r3, r2
 8003318:	bfb8      	it	lt
 800331a:	4613      	movlt	r3, r2
 800331c:	6033      	str	r3, [r6, #0]
 800331e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003322:	460c      	mov	r4, r1
 8003324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003328:	b10a      	cbz	r2, 800332e <_printf_common+0x26>
 800332a:	3301      	adds	r3, #1
 800332c:	6033      	str	r3, [r6, #0]
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	0699      	lsls	r1, r3, #26
 8003332:	bf42      	ittt	mi
 8003334:	6833      	ldrmi	r3, [r6, #0]
 8003336:	3302      	addmi	r3, #2
 8003338:	6033      	strmi	r3, [r6, #0]
 800333a:	6825      	ldr	r5, [r4, #0]
 800333c:	f015 0506 	ands.w	r5, r5, #6
 8003340:	d106      	bne.n	8003350 <_printf_common+0x48>
 8003342:	f104 0a19 	add.w	sl, r4, #25
 8003346:	68e3      	ldr	r3, [r4, #12]
 8003348:	6832      	ldr	r2, [r6, #0]
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	42ab      	cmp	r3, r5
 800334e:	dc2b      	bgt.n	80033a8 <_printf_common+0xa0>
 8003350:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	3b00      	subs	r3, #0
 8003358:	bf18      	it	ne
 800335a:	2301      	movne	r3, #1
 800335c:	0692      	lsls	r2, r2, #26
 800335e:	d430      	bmi.n	80033c2 <_printf_common+0xba>
 8003360:	4641      	mov	r1, r8
 8003362:	4638      	mov	r0, r7
 8003364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003368:	47c8      	blx	r9
 800336a:	3001      	adds	r0, #1
 800336c:	d023      	beq.n	80033b6 <_printf_common+0xae>
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	6922      	ldr	r2, [r4, #16]
 8003372:	f003 0306 	and.w	r3, r3, #6
 8003376:	2b04      	cmp	r3, #4
 8003378:	bf14      	ite	ne
 800337a:	2500      	movne	r5, #0
 800337c:	6833      	ldreq	r3, [r6, #0]
 800337e:	f04f 0600 	mov.w	r6, #0
 8003382:	bf08      	it	eq
 8003384:	68e5      	ldreq	r5, [r4, #12]
 8003386:	f104 041a 	add.w	r4, r4, #26
 800338a:	bf08      	it	eq
 800338c:	1aed      	subeq	r5, r5, r3
 800338e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003392:	bf08      	it	eq
 8003394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003398:	4293      	cmp	r3, r2
 800339a:	bfc4      	itt	gt
 800339c:	1a9b      	subgt	r3, r3, r2
 800339e:	18ed      	addgt	r5, r5, r3
 80033a0:	42b5      	cmp	r5, r6
 80033a2:	d11a      	bne.n	80033da <_printf_common+0xd2>
 80033a4:	2000      	movs	r0, #0
 80033a6:	e008      	b.n	80033ba <_printf_common+0xb2>
 80033a8:	2301      	movs	r3, #1
 80033aa:	4652      	mov	r2, sl
 80033ac:	4641      	mov	r1, r8
 80033ae:	4638      	mov	r0, r7
 80033b0:	47c8      	blx	r9
 80033b2:	3001      	adds	r0, #1
 80033b4:	d103      	bne.n	80033be <_printf_common+0xb6>
 80033b6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033be:	3501      	adds	r5, #1
 80033c0:	e7c1      	b.n	8003346 <_printf_common+0x3e>
 80033c2:	2030      	movs	r0, #48	@ 0x30
 80033c4:	18e1      	adds	r1, r4, r3
 80033c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033d0:	4422      	add	r2, r4
 80033d2:	3302      	adds	r3, #2
 80033d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033d8:	e7c2      	b.n	8003360 <_printf_common+0x58>
 80033da:	2301      	movs	r3, #1
 80033dc:	4622      	mov	r2, r4
 80033de:	4641      	mov	r1, r8
 80033e0:	4638      	mov	r0, r7
 80033e2:	47c8      	blx	r9
 80033e4:	3001      	adds	r0, #1
 80033e6:	d0e6      	beq.n	80033b6 <_printf_common+0xae>
 80033e8:	3601      	adds	r6, #1
 80033ea:	e7d9      	b.n	80033a0 <_printf_common+0x98>

080033ec <_printf_i>:
 80033ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033f0:	7e0f      	ldrb	r7, [r1, #24]
 80033f2:	4691      	mov	r9, r2
 80033f4:	2f78      	cmp	r7, #120	@ 0x78
 80033f6:	4680      	mov	r8, r0
 80033f8:	460c      	mov	r4, r1
 80033fa:	469a      	mov	sl, r3
 80033fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003402:	d807      	bhi.n	8003414 <_printf_i+0x28>
 8003404:	2f62      	cmp	r7, #98	@ 0x62
 8003406:	d80a      	bhi.n	800341e <_printf_i+0x32>
 8003408:	2f00      	cmp	r7, #0
 800340a:	f000 80d3 	beq.w	80035b4 <_printf_i+0x1c8>
 800340e:	2f58      	cmp	r7, #88	@ 0x58
 8003410:	f000 80ba 	beq.w	8003588 <_printf_i+0x19c>
 8003414:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003418:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800341c:	e03a      	b.n	8003494 <_printf_i+0xa8>
 800341e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003422:	2b15      	cmp	r3, #21
 8003424:	d8f6      	bhi.n	8003414 <_printf_i+0x28>
 8003426:	a101      	add	r1, pc, #4	@ (adr r1, 800342c <_printf_i+0x40>)
 8003428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800342c:	08003485 	.word	0x08003485
 8003430:	08003499 	.word	0x08003499
 8003434:	08003415 	.word	0x08003415
 8003438:	08003415 	.word	0x08003415
 800343c:	08003415 	.word	0x08003415
 8003440:	08003415 	.word	0x08003415
 8003444:	08003499 	.word	0x08003499
 8003448:	08003415 	.word	0x08003415
 800344c:	08003415 	.word	0x08003415
 8003450:	08003415 	.word	0x08003415
 8003454:	08003415 	.word	0x08003415
 8003458:	0800359b 	.word	0x0800359b
 800345c:	080034c3 	.word	0x080034c3
 8003460:	08003555 	.word	0x08003555
 8003464:	08003415 	.word	0x08003415
 8003468:	08003415 	.word	0x08003415
 800346c:	080035bd 	.word	0x080035bd
 8003470:	08003415 	.word	0x08003415
 8003474:	080034c3 	.word	0x080034c3
 8003478:	08003415 	.word	0x08003415
 800347c:	08003415 	.word	0x08003415
 8003480:	0800355d 	.word	0x0800355d
 8003484:	6833      	ldr	r3, [r6, #0]
 8003486:	1d1a      	adds	r2, r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6032      	str	r2, [r6, #0]
 800348c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003490:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003494:	2301      	movs	r3, #1
 8003496:	e09e      	b.n	80035d6 <_printf_i+0x1ea>
 8003498:	6833      	ldr	r3, [r6, #0]
 800349a:	6820      	ldr	r0, [r4, #0]
 800349c:	1d19      	adds	r1, r3, #4
 800349e:	6031      	str	r1, [r6, #0]
 80034a0:	0606      	lsls	r6, r0, #24
 80034a2:	d501      	bpl.n	80034a8 <_printf_i+0xbc>
 80034a4:	681d      	ldr	r5, [r3, #0]
 80034a6:	e003      	b.n	80034b0 <_printf_i+0xc4>
 80034a8:	0645      	lsls	r5, r0, #25
 80034aa:	d5fb      	bpl.n	80034a4 <_printf_i+0xb8>
 80034ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034b0:	2d00      	cmp	r5, #0
 80034b2:	da03      	bge.n	80034bc <_printf_i+0xd0>
 80034b4:	232d      	movs	r3, #45	@ 0x2d
 80034b6:	426d      	negs	r5, r5
 80034b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034bc:	230a      	movs	r3, #10
 80034be:	4859      	ldr	r0, [pc, #356]	@ (8003624 <_printf_i+0x238>)
 80034c0:	e011      	b.n	80034e6 <_printf_i+0xfa>
 80034c2:	6821      	ldr	r1, [r4, #0]
 80034c4:	6833      	ldr	r3, [r6, #0]
 80034c6:	0608      	lsls	r0, r1, #24
 80034c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80034cc:	d402      	bmi.n	80034d4 <_printf_i+0xe8>
 80034ce:	0649      	lsls	r1, r1, #25
 80034d0:	bf48      	it	mi
 80034d2:	b2ad      	uxthmi	r5, r5
 80034d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80034d6:	6033      	str	r3, [r6, #0]
 80034d8:	bf14      	ite	ne
 80034da:	230a      	movne	r3, #10
 80034dc:	2308      	moveq	r3, #8
 80034de:	4851      	ldr	r0, [pc, #324]	@ (8003624 <_printf_i+0x238>)
 80034e0:	2100      	movs	r1, #0
 80034e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034e6:	6866      	ldr	r6, [r4, #4]
 80034e8:	2e00      	cmp	r6, #0
 80034ea:	bfa8      	it	ge
 80034ec:	6821      	ldrge	r1, [r4, #0]
 80034ee:	60a6      	str	r6, [r4, #8]
 80034f0:	bfa4      	itt	ge
 80034f2:	f021 0104 	bicge.w	r1, r1, #4
 80034f6:	6021      	strge	r1, [r4, #0]
 80034f8:	b90d      	cbnz	r5, 80034fe <_printf_i+0x112>
 80034fa:	2e00      	cmp	r6, #0
 80034fc:	d04b      	beq.n	8003596 <_printf_i+0x1aa>
 80034fe:	4616      	mov	r6, r2
 8003500:	fbb5 f1f3 	udiv	r1, r5, r3
 8003504:	fb03 5711 	mls	r7, r3, r1, r5
 8003508:	5dc7      	ldrb	r7, [r0, r7]
 800350a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800350e:	462f      	mov	r7, r5
 8003510:	42bb      	cmp	r3, r7
 8003512:	460d      	mov	r5, r1
 8003514:	d9f4      	bls.n	8003500 <_printf_i+0x114>
 8003516:	2b08      	cmp	r3, #8
 8003518:	d10b      	bne.n	8003532 <_printf_i+0x146>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	07df      	lsls	r7, r3, #31
 800351e:	d508      	bpl.n	8003532 <_printf_i+0x146>
 8003520:	6923      	ldr	r3, [r4, #16]
 8003522:	6861      	ldr	r1, [r4, #4]
 8003524:	4299      	cmp	r1, r3
 8003526:	bfde      	ittt	le
 8003528:	2330      	movle	r3, #48	@ 0x30
 800352a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800352e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003532:	1b92      	subs	r2, r2, r6
 8003534:	6122      	str	r2, [r4, #16]
 8003536:	464b      	mov	r3, r9
 8003538:	4621      	mov	r1, r4
 800353a:	4640      	mov	r0, r8
 800353c:	f8cd a000 	str.w	sl, [sp]
 8003540:	aa03      	add	r2, sp, #12
 8003542:	f7ff fee1 	bl	8003308 <_printf_common>
 8003546:	3001      	adds	r0, #1
 8003548:	d14a      	bne.n	80035e0 <_printf_i+0x1f4>
 800354a:	f04f 30ff 	mov.w	r0, #4294967295
 800354e:	b004      	add	sp, #16
 8003550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	f043 0320 	orr.w	r3, r3, #32
 800355a:	6023      	str	r3, [r4, #0]
 800355c:	2778      	movs	r7, #120	@ 0x78
 800355e:	4832      	ldr	r0, [pc, #200]	@ (8003628 <_printf_i+0x23c>)
 8003560:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	6831      	ldr	r1, [r6, #0]
 8003568:	061f      	lsls	r7, r3, #24
 800356a:	f851 5b04 	ldr.w	r5, [r1], #4
 800356e:	d402      	bmi.n	8003576 <_printf_i+0x18a>
 8003570:	065f      	lsls	r7, r3, #25
 8003572:	bf48      	it	mi
 8003574:	b2ad      	uxthmi	r5, r5
 8003576:	6031      	str	r1, [r6, #0]
 8003578:	07d9      	lsls	r1, r3, #31
 800357a:	bf44      	itt	mi
 800357c:	f043 0320 	orrmi.w	r3, r3, #32
 8003580:	6023      	strmi	r3, [r4, #0]
 8003582:	b11d      	cbz	r5, 800358c <_printf_i+0x1a0>
 8003584:	2310      	movs	r3, #16
 8003586:	e7ab      	b.n	80034e0 <_printf_i+0xf4>
 8003588:	4826      	ldr	r0, [pc, #152]	@ (8003624 <_printf_i+0x238>)
 800358a:	e7e9      	b.n	8003560 <_printf_i+0x174>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	f023 0320 	bic.w	r3, r3, #32
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	e7f6      	b.n	8003584 <_printf_i+0x198>
 8003596:	4616      	mov	r6, r2
 8003598:	e7bd      	b.n	8003516 <_printf_i+0x12a>
 800359a:	6833      	ldr	r3, [r6, #0]
 800359c:	6825      	ldr	r5, [r4, #0]
 800359e:	1d18      	adds	r0, r3, #4
 80035a0:	6961      	ldr	r1, [r4, #20]
 80035a2:	6030      	str	r0, [r6, #0]
 80035a4:	062e      	lsls	r6, r5, #24
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	d501      	bpl.n	80035ae <_printf_i+0x1c2>
 80035aa:	6019      	str	r1, [r3, #0]
 80035ac:	e002      	b.n	80035b4 <_printf_i+0x1c8>
 80035ae:	0668      	lsls	r0, r5, #25
 80035b0:	d5fb      	bpl.n	80035aa <_printf_i+0x1be>
 80035b2:	8019      	strh	r1, [r3, #0]
 80035b4:	2300      	movs	r3, #0
 80035b6:	4616      	mov	r6, r2
 80035b8:	6123      	str	r3, [r4, #16]
 80035ba:	e7bc      	b.n	8003536 <_printf_i+0x14a>
 80035bc:	6833      	ldr	r3, [r6, #0]
 80035be:	2100      	movs	r1, #0
 80035c0:	1d1a      	adds	r2, r3, #4
 80035c2:	6032      	str	r2, [r6, #0]
 80035c4:	681e      	ldr	r6, [r3, #0]
 80035c6:	6862      	ldr	r2, [r4, #4]
 80035c8:	4630      	mov	r0, r6
 80035ca:	f000 f859 	bl	8003680 <memchr>
 80035ce:	b108      	cbz	r0, 80035d4 <_printf_i+0x1e8>
 80035d0:	1b80      	subs	r0, r0, r6
 80035d2:	6060      	str	r0, [r4, #4]
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	6123      	str	r3, [r4, #16]
 80035d8:	2300      	movs	r3, #0
 80035da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035de:	e7aa      	b.n	8003536 <_printf_i+0x14a>
 80035e0:	4632      	mov	r2, r6
 80035e2:	4649      	mov	r1, r9
 80035e4:	4640      	mov	r0, r8
 80035e6:	6923      	ldr	r3, [r4, #16]
 80035e8:	47d0      	blx	sl
 80035ea:	3001      	adds	r0, #1
 80035ec:	d0ad      	beq.n	800354a <_printf_i+0x15e>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	079b      	lsls	r3, r3, #30
 80035f2:	d413      	bmi.n	800361c <_printf_i+0x230>
 80035f4:	68e0      	ldr	r0, [r4, #12]
 80035f6:	9b03      	ldr	r3, [sp, #12]
 80035f8:	4298      	cmp	r0, r3
 80035fa:	bfb8      	it	lt
 80035fc:	4618      	movlt	r0, r3
 80035fe:	e7a6      	b.n	800354e <_printf_i+0x162>
 8003600:	2301      	movs	r3, #1
 8003602:	4632      	mov	r2, r6
 8003604:	4649      	mov	r1, r9
 8003606:	4640      	mov	r0, r8
 8003608:	47d0      	blx	sl
 800360a:	3001      	adds	r0, #1
 800360c:	d09d      	beq.n	800354a <_printf_i+0x15e>
 800360e:	3501      	adds	r5, #1
 8003610:	68e3      	ldr	r3, [r4, #12]
 8003612:	9903      	ldr	r1, [sp, #12]
 8003614:	1a5b      	subs	r3, r3, r1
 8003616:	42ab      	cmp	r3, r5
 8003618:	dcf2      	bgt.n	8003600 <_printf_i+0x214>
 800361a:	e7eb      	b.n	80035f4 <_printf_i+0x208>
 800361c:	2500      	movs	r5, #0
 800361e:	f104 0619 	add.w	r6, r4, #25
 8003622:	e7f5      	b.n	8003610 <_printf_i+0x224>
 8003624:	0800377b 	.word	0x0800377b
 8003628:	0800378c 	.word	0x0800378c

0800362c <memmove>:
 800362c:	4288      	cmp	r0, r1
 800362e:	b510      	push	{r4, lr}
 8003630:	eb01 0402 	add.w	r4, r1, r2
 8003634:	d902      	bls.n	800363c <memmove+0x10>
 8003636:	4284      	cmp	r4, r0
 8003638:	4623      	mov	r3, r4
 800363a:	d807      	bhi.n	800364c <memmove+0x20>
 800363c:	1e43      	subs	r3, r0, #1
 800363e:	42a1      	cmp	r1, r4
 8003640:	d008      	beq.n	8003654 <memmove+0x28>
 8003642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800364a:	e7f8      	b.n	800363e <memmove+0x12>
 800364c:	4601      	mov	r1, r0
 800364e:	4402      	add	r2, r0
 8003650:	428a      	cmp	r2, r1
 8003652:	d100      	bne.n	8003656 <memmove+0x2a>
 8003654:	bd10      	pop	{r4, pc}
 8003656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800365a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800365e:	e7f7      	b.n	8003650 <memmove+0x24>

08003660 <_sbrk_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	2300      	movs	r3, #0
 8003664:	4d05      	ldr	r5, [pc, #20]	@ (800367c <_sbrk_r+0x1c>)
 8003666:	4604      	mov	r4, r0
 8003668:	4608      	mov	r0, r1
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	f7fc ffce 	bl	800060c <_sbrk>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d102      	bne.n	800367a <_sbrk_r+0x1a>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	b103      	cbz	r3, 800367a <_sbrk_r+0x1a>
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	bd38      	pop	{r3, r4, r5, pc}
 800367c:	20000270 	.word	0x20000270

08003680 <memchr>:
 8003680:	4603      	mov	r3, r0
 8003682:	b510      	push	{r4, lr}
 8003684:	b2c9      	uxtb	r1, r1
 8003686:	4402      	add	r2, r0
 8003688:	4293      	cmp	r3, r2
 800368a:	4618      	mov	r0, r3
 800368c:	d101      	bne.n	8003692 <memchr+0x12>
 800368e:	2000      	movs	r0, #0
 8003690:	e003      	b.n	800369a <memchr+0x1a>
 8003692:	7804      	ldrb	r4, [r0, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	428c      	cmp	r4, r1
 8003698:	d1f6      	bne.n	8003688 <memchr+0x8>
 800369a:	bd10      	pop	{r4, pc}

0800369c <memcpy>:
 800369c:	440a      	add	r2, r1
 800369e:	4291      	cmp	r1, r2
 80036a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80036a4:	d100      	bne.n	80036a8 <memcpy+0xc>
 80036a6:	4770      	bx	lr
 80036a8:	b510      	push	{r4, lr}
 80036aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ae:	4291      	cmp	r1, r2
 80036b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036b4:	d1f9      	bne.n	80036aa <memcpy+0xe>
 80036b6:	bd10      	pop	{r4, pc}

080036b8 <_realloc_r>:
 80036b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036bc:	4680      	mov	r8, r0
 80036be:	4615      	mov	r5, r2
 80036c0:	460c      	mov	r4, r1
 80036c2:	b921      	cbnz	r1, 80036ce <_realloc_r+0x16>
 80036c4:	4611      	mov	r1, r2
 80036c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ca:	f7ff bc39 	b.w	8002f40 <_malloc_r>
 80036ce:	b92a      	cbnz	r2, 80036dc <_realloc_r+0x24>
 80036d0:	f7ff fbcc 	bl	8002e6c <_free_r>
 80036d4:	2400      	movs	r4, #0
 80036d6:	4620      	mov	r0, r4
 80036d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036dc:	f000 f81a 	bl	8003714 <_malloc_usable_size_r>
 80036e0:	4285      	cmp	r5, r0
 80036e2:	4606      	mov	r6, r0
 80036e4:	d802      	bhi.n	80036ec <_realloc_r+0x34>
 80036e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80036ea:	d8f4      	bhi.n	80036d6 <_realloc_r+0x1e>
 80036ec:	4629      	mov	r1, r5
 80036ee:	4640      	mov	r0, r8
 80036f0:	f7ff fc26 	bl	8002f40 <_malloc_r>
 80036f4:	4607      	mov	r7, r0
 80036f6:	2800      	cmp	r0, #0
 80036f8:	d0ec      	beq.n	80036d4 <_realloc_r+0x1c>
 80036fa:	42b5      	cmp	r5, r6
 80036fc:	462a      	mov	r2, r5
 80036fe:	4621      	mov	r1, r4
 8003700:	bf28      	it	cs
 8003702:	4632      	movcs	r2, r6
 8003704:	f7ff ffca 	bl	800369c <memcpy>
 8003708:	4621      	mov	r1, r4
 800370a:	4640      	mov	r0, r8
 800370c:	f7ff fbae 	bl	8002e6c <_free_r>
 8003710:	463c      	mov	r4, r7
 8003712:	e7e0      	b.n	80036d6 <_realloc_r+0x1e>

08003714 <_malloc_usable_size_r>:
 8003714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003718:	1f18      	subs	r0, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	bfbc      	itt	lt
 800371e:	580b      	ldrlt	r3, [r1, r0]
 8003720:	18c0      	addlt	r0, r0, r3
 8003722:	4770      	bx	lr

08003724 <_init>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	bf00      	nop
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr

08003730 <_fini>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	bf00      	nop
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr
