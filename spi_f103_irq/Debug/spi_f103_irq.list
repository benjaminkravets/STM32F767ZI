
spi_f103_irq.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000362c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800379c  0800379c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800379c  0800379c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800379c  0800379c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080037a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08003800  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003800  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018d2  00000000  00000000  000290f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0002a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000692  00000000  00000000  0002b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001665a  00000000  00000000  0002b8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4c0  00000000  00000000  00041f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081f0d  00000000  00000000  0004c404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002754  00000000  00000000  000ce314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d0a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003720 	.word	0x08003720

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003720 	.word	0x08003720

0800014c <HAL_SPI_RxCpltCallback>:
#define SPI_IRQ_BUFFER_LENGTH 20
uint8_t SPI_IRQ_RX_BUFFER[SPI_IRQ_BUFFER_LENGTH] = {0};
uint8_t newline_buffer[2] = {0};
uint8_t uart_transmit = 0;

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi1, SPI_IRQ_RX_BUFFER, SPI_IRQ_BUFFER_LENGTH);
 8000154:	2214      	movs	r2, #20
 8000156:	4908      	ldr	r1, [pc, #32]	; (8000178 <HAL_SPI_RxCpltCallback+0x2c>)
 8000158:	4808      	ldr	r0, [pc, #32]	; (800017c <HAL_SPI_RxCpltCallback+0x30>)
 800015a:	f001 fb21 	bl	80017a0 <HAL_SPI_Receive_IT>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800015e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000162:	4807      	ldr	r0, [pc, #28]	; (8000180 <HAL_SPI_RxCpltCallback+0x34>)
 8000164:	f000 fe6e 	bl	8000e44 <HAL_GPIO_TogglePin>
	uart_transmit = 1;
 8000168:	4b06      	ldr	r3, [pc, #24]	; (8000184 <HAL_SPI_RxCpltCallback+0x38>)
 800016a:	2201      	movs	r2, #1
 800016c:	701a      	strb	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000118 	.word	0x20000118
 800017c:	20000078 	.word	0x20000078
 8000180:	40011000 	.word	0x40011000
 8000184:	2000012e 	.word	0x2000012e

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fa9c 	bl	80006c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f830 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f8d0 	bl	8000338 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000198:	f000 f872 	bl	8000280 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800019c:	f000 f8a2 	bl	80002e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_IT(&hspi1, SPI_IRQ_RX_BUFFER, SPI_IRQ_BUFFER_LENGTH);
 80001a0:	2214      	movs	r2, #20
 80001a2:	490e      	ldr	r1, [pc, #56]	; (80001dc <main+0x54>)
 80001a4:	480e      	ldr	r0, [pc, #56]	; (80001e0 <main+0x58>)
 80001a6:	f001 fafb 	bl	80017a0 <HAL_SPI_Receive_IT>
  sprintf(newline_buffer, "\r\n");
 80001aa:	490e      	ldr	r1, [pc, #56]	; (80001e4 <main+0x5c>)
 80001ac:	480e      	ldr	r0, [pc, #56]	; (80001e8 <main+0x60>)
 80001ae:	f002 fe05 	bl	8002dbc <siprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (uart_transmit == 1){
 80001b2:	4b0e      	ldr	r3, [pc, #56]	; (80001ec <main+0x64>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d1fb      	bne.n	80001b2 <main+0x2a>

		HAL_UART_Transmit(&huart1, &newline_buffer, 2, 100);
 80001ba:	2364      	movs	r3, #100	; 0x64
 80001bc:	2202      	movs	r2, #2
 80001be:	490a      	ldr	r1, [pc, #40]	; (80001e8 <main+0x60>)
 80001c0:	480b      	ldr	r0, [pc, #44]	; (80001f0 <main+0x68>)
 80001c2:	f002 f828 	bl	8002216 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, &SPI_IRQ_RX_BUFFER, SPI_IRQ_BUFFER_LENGTH, 100);
 80001c6:	2364      	movs	r3, #100	; 0x64
 80001c8:	2214      	movs	r2, #20
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <main+0x54>)
 80001cc:	4808      	ldr	r0, [pc, #32]	; (80001f0 <main+0x68>)
 80001ce:	f002 f822 	bl	8002216 <HAL_UART_Transmit>
		uart_transmit = 0;
 80001d2:	4b06      	ldr	r3, [pc, #24]	; (80001ec <main+0x64>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	701a      	strb	r2, [r3, #0]
	if (uart_transmit == 1){
 80001d8:	e7eb      	b.n	80001b2 <main+0x2a>
 80001da:	bf00      	nop
 80001dc:	20000118 	.word	0x20000118
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08003738 	.word	0x08003738
 80001e8:	2000012c 	.word	0x2000012c
 80001ec:	2000012e 	.word	0x2000012e
 80001f0:	200000d0 	.word	0x200000d0

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fdfa 	bl	8002dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000216:	2301      	movs	r3, #1
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000232:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fe1b 	bl	8000e78 <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000248:	f000 f8c2 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f888 	bl	800137c <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000272:	f000 f8ad 	bl	80003d0 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	; 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_SPI1_Init+0x5c>)
 8000286:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <MX_SPI1_Init+0x60>)
 8000288:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_SPI1_Init+0x5c>)
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_SPI1_Init+0x5c>)
 8000292:	2200      	movs	r2, #0
 8000294:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_SPI1_Init+0x5c>)
 8000298:	2200      	movs	r2, #0
 800029a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_SPI1_Init+0x5c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_SPI1_Init+0x5c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_SPI1_Init+0x5c>)
 80002aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <MX_SPI1_Init+0x5c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_SPI1_Init+0x5c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <MX_SPI1_Init+0x5c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_SPI1_Init+0x5c>)
 80002c4:	220a      	movs	r2, #10
 80002c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <MX_SPI1_Init+0x5c>)
 80002ca:	f001 f9e5 	bl	8001698 <HAL_SPI_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80002d4:	f000 f87c 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000078 	.word	0x20000078
 80002e0:	40013000 	.word	0x40013000

080002e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	; (8000334 <MX_USART1_UART_Init+0x50>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_USART1_UART_Init+0x4c>)
 800031c:	f001 ff2b 	bl	8002176 <HAL_UART_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000326:	f000 f853 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200000d0 	.word	0x200000d0
 8000334:	40013800 	.word	0x40013800

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <MX_GPIO_Init+0x90>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a1d      	ldr	r2, [pc, #116]	; (80003c8 <MX_GPIO_Init+0x90>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_GPIO_Init+0x90>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_GPIO_Init+0x90>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <MX_GPIO_Init+0x90>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_GPIO_Init+0x90>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_GPIO_Init+0x90>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <MX_GPIO_Init+0x90>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_GPIO_Init+0x90>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039a:	480c      	ldr	r0, [pc, #48]	; (80003cc <MX_GPIO_Init+0x94>)
 800039c:	f000 fd3a 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <MX_GPIO_Init+0x94>)
 80003ba:	f000 fba7 	bl	8000b0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003be:	bf00      	nop
 80003c0:	3720      	adds	r7, #32
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40011000 	.word	0x40011000

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <Error_Handler+0x8>
	...

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a1f      	ldr	r2, [pc, #124]	; (80004d8 <HAL_SPI_MspInit+0x98>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d137      	bne.n	80004d0 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <HAL_SPI_MspInit+0x9c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a1d      	ldr	r2, [pc, #116]	; (80004dc <HAL_SPI_MspInit+0x9c>)
 8000466:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <HAL_SPI_MspInit+0x9c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <HAL_SPI_MspInit+0x9c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a17      	ldr	r2, [pc, #92]	; (80004dc <HAL_SPI_MspInit+0x9c>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_SPI_MspInit+0x9c>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0304 	and.w	r3, r3, #4
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000490:	23a0      	movs	r3, #160	; 0xa0
 8000492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	480f      	ldr	r0, [pc, #60]	; (80004e0 <HAL_SPI_MspInit+0xa0>)
 80004a4:	f000 fb32 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ac:	2302      	movs	r3, #2
 80004ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b0:	2303      	movs	r3, #3
 80004b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4809      	ldr	r0, [pc, #36]	; (80004e0 <HAL_SPI_MspInit+0xa0>)
 80004bc:	f000 fb26 	bl	8000b0c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2101      	movs	r1, #1
 80004c4:	2023      	movs	r0, #35	; 0x23
 80004c6:	f000 fa38 	bl	800093a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80004ca:	2023      	movs	r0, #35	; 0x23
 80004cc:	f000 fa51 	bl	8000972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004d0:	bf00      	nop
 80004d2:	3720      	adds	r7, #32
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40013000 	.word	0x40013000
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010800 	.word	0x40010800

080004e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a20      	ldr	r2, [pc, #128]	; (8000580 <HAL_UART_MspInit+0x9c>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d139      	bne.n	8000578 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <HAL_UART_MspInit+0xa0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <HAL_UART_MspInit+0xa0>)
 800050a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <HAL_UART_MspInit+0xa0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <HAL_UART_MspInit+0xa0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a18      	ldr	r2, [pc, #96]	; (8000584 <HAL_UART_MspInit+0xa0>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <HAL_UART_MspInit+0xa0>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000538:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053e:	2303      	movs	r3, #3
 8000540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	480f      	ldr	r0, [pc, #60]	; (8000588 <HAL_UART_MspInit+0xa4>)
 800054a:	f000 fadf 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800054e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <HAL_UART_MspInit+0xa4>)
 8000564:	f000 fad2 	bl	8000b0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2101      	movs	r1, #1
 800056c:	2025      	movs	r0, #37	; 0x25
 800056e:	f000 f9e4 	bl	800093a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000572:	2025      	movs	r0, #37	; 0x25
 8000574:	f000 f9fd 	bl	8000972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013800 	.word	0x40013800
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f8bf 	bl	8000754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <SPI1_IRQHandler+0x10>)
 80005e2:	f001 fa0f 	bl	8001a04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000078 	.word	0x20000078

080005f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <USART1_IRQHandler+0x10>)
 80005f6:	f001 fe91 	bl	800231c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000d0 	.word	0x200000d0

08000604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <_sbrk+0x5c>)
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <_sbrk+0x60>)
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <_sbrk+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <_sbrk+0x64>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <_sbrk+0x68>)
 8000624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <_sbrk+0x64>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	429a      	cmp	r2, r3
 8000632:	d207      	bcs.n	8000644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000634:	f002 fbea 	bl	8002e0c <__errno>
 8000638:	4603      	mov	r3, r0
 800063a:	220c      	movs	r2, #12
 800063c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	e009      	b.n	8000658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <_sbrk+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <_sbrk+0x64>)
 8000654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20005000 	.word	0x20005000
 8000664:	00000400 	.word	0x00000400
 8000668:	20000130 	.word	0x20000130
 800066c:	20000280 	.word	0x20000280

08000670 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800067c:	f7ff fff8 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000680:	480b      	ldr	r0, [pc, #44]	; (80006b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000682:	490c      	ldr	r1, [pc, #48]	; (80006b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000698:	4c09      	ldr	r4, [pc, #36]	; (80006c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006a6:	f002 fbb7 	bl	8002e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006aa:	f7ff fd6d 	bl	8000188 <main>
  bx lr
 80006ae:	4770      	bx	lr
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006b8:	080037a4 	.word	0x080037a4
  ldr r2, =_sbss
 80006bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006c0:	20000280 	.word	0x20000280

080006c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_2_IRQHandler>
	...

080006c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_Init+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_Init+0x28>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f923 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	200f      	movs	r0, #15
 80006e0:	f000 f808 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f7ff fe7a 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f93b 	bl	800098e <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f903 	bl	800093a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x1c>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x20>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a03      	ldr	r2, [pc, #12]	; (8000774 <HAL_IncTick+0x20>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000008 	.word	0x20000008
 8000774:	20000134 	.word	0x20000134

08000778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return uwTick;
 800077c:	4b02      	ldr	r3, [pc, #8]	; (8000788 <HAL_GetTick+0x10>)
 800077e:	681b      	ldr	r3, [r3, #0]
}
 8000780:	4618      	mov	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000134 	.word	0x20000134

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db0b      	blt.n	800081a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f003 021f 	and.w	r2, r3, #31
 8000808:	4906      	ldr	r1, [pc, #24]	; (8000824 <__NVIC_EnableIRQ+0x34>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	095b      	lsrs	r3, r3, #5
 8000810:	2001      	movs	r0, #1
 8000812:	fa00 f202 	lsl.w	r2, r0, r2
 8000816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100

08000828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	db0a      	blt.n	8000852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	b2da      	uxtb	r2, r3
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <__NVIC_SetPriority+0x4c>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	0112      	lsls	r2, r2, #4
 8000848:	b2d2      	uxtb	r2, r2
 800084a:	440b      	add	r3, r1
 800084c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000850:	e00a      	b.n	8000868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4908      	ldr	r1, [pc, #32]	; (8000878 <__NVIC_SetPriority+0x50>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	3b04      	subs	r3, #4
 8000860:	0112      	lsls	r2, r2, #4
 8000862:	b2d2      	uxtb	r2, r2
 8000864:	440b      	add	r3, r1
 8000866:	761a      	strb	r2, [r3, #24]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000e100 	.word	0xe000e100
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087c:	b480      	push	{r7}
 800087e:	b089      	sub	sp, #36	; 0x24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	f1c3 0307 	rsb	r3, r3, #7
 8000896:	2b04      	cmp	r3, #4
 8000898:	bf28      	it	cs
 800089a:	2304      	movcs	r3, #4
 800089c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3304      	adds	r3, #4
 80008a2:	2b06      	cmp	r3, #6
 80008a4:	d902      	bls.n	80008ac <NVIC_EncodePriority+0x30>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3b03      	subs	r3, #3
 80008aa:	e000      	b.n	80008ae <NVIC_EncodePriority+0x32>
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	f04f 32ff 	mov.w	r2, #4294967295
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43da      	mvns	r2, r3
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	401a      	ands	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43d9      	mvns	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	4313      	orrs	r3, r2
         );
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3724      	adds	r7, #36	; 0x24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f0:	d301      	bcc.n	80008f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00f      	b.n	8000916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <SysTick_Config+0x40>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008fe:	210f      	movs	r1, #15
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f7ff ff90 	bl	8000828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <SysTick_Config+0x40>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SysTick_Config+0x40>)
 8000910:	2207      	movs	r2, #7
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff2d 	bl	800078c <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff42 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ff90 	bl	800087c <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff5f 	bl	8000828 <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff35 	bl	80007f0 <__NVIC_EnableIRQ>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffa2 	bl	80008e0 <SysTick_Config>
 800099c:	4603      	mov	r3, r0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b085      	sub	sp, #20
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d008      	beq.n	80009d0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2204      	movs	r2, #4
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e020      	b.n	8000a12 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f022 020e 	bic.w	r2, r2, #14
 80009de:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 0201 	bic.w	r2, r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f8:	2101      	movs	r1, #1
 80009fa:	fa01 f202 	lsl.w	r2, r1, r2
 80009fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d005      	beq.n	8000a40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2204      	movs	r2, #4
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
 8000a3e:	e051      	b.n	8000ae4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f022 020e 	bic.w	r2, r2, #14
 8000a4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 0201 	bic.w	r2, r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <HAL_DMA_Abort_IT+0xd4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d029      	beq.n	8000abe <HAL_DMA_Abort_IT+0xa2>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <HAL_DMA_Abort_IT+0xd8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d022      	beq.n	8000aba <HAL_DMA_Abort_IT+0x9e>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_DMA_Abort_IT+0xdc>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d01a      	beq.n	8000ab4 <HAL_DMA_Abort_IT+0x98>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <HAL_DMA_Abort_IT+0xe0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d012      	beq.n	8000aae <HAL_DMA_Abort_IT+0x92>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <HAL_DMA_Abort_IT+0xe4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00a      	beq.n	8000aa8 <HAL_DMA_Abort_IT+0x8c>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <HAL_DMA_Abort_IT+0xe8>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d102      	bne.n	8000aa2 <HAL_DMA_Abort_IT+0x86>
 8000a9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aa0:	e00e      	b.n	8000ac0 <HAL_DMA_Abort_IT+0xa4>
 8000aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa6:	e00b      	b.n	8000ac0 <HAL_DMA_Abort_IT+0xa4>
 8000aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aac:	e008      	b.n	8000ac0 <HAL_DMA_Abort_IT+0xa4>
 8000aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab2:	e005      	b.n	8000ac0 <HAL_DMA_Abort_IT+0xa4>
 8000ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab8:	e002      	b.n	8000ac0 <HAL_DMA_Abort_IT+0xa4>
 8000aba:	2310      	movs	r3, #16
 8000abc:	e000      	b.n	8000ac0 <HAL_DMA_Abort_IT+0xa4>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <HAL_DMA_Abort_IT+0xec>)
 8000ac2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	4798      	blx	r3
    } 
  }
  return status;
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40020008 	.word	0x40020008
 8000af4:	4002001c 	.word	0x4002001c
 8000af8:	40020030 	.word	0x40020030
 8000afc:	40020044 	.word	0x40020044
 8000b00:	40020058 	.word	0x40020058
 8000b04:	4002006c 	.word	0x4002006c
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	e169      	b.n	8000df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b20:	2201      	movs	r2, #1
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8158 	bne.w	8000dee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a9a      	ldr	r2, [pc, #616]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d05e      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b48:	4a98      	ldr	r2, [pc, #608]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d875      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b4e:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d058      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b54:	4a96      	ldr	r2, [pc, #600]	; (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d86f      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b5a:	4a96      	ldr	r2, [pc, #600]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d052      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b60:	4a94      	ldr	r2, [pc, #592]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d869      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b66:	4a94      	ldr	r2, [pc, #592]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d04c      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a92      	ldr	r2, [pc, #584]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d863      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b72:	4a92      	ldr	r2, [pc, #584]	; (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d046      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b78:	4a90      	ldr	r2, [pc, #576]	; (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d85d      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d82a      	bhi.n	8000bd8 <HAL_GPIO_Init+0xcc>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d859      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_Init+0x80>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000be1 	.word	0x08000be1
 8000b94:	08000bf3 	.word	0x08000bf3
 8000b98:	08000c35 	.word	0x08000c35
 8000b9c:	08000c3b 	.word	0x08000c3b
 8000ba0:	08000c3b 	.word	0x08000c3b
 8000ba4:	08000c3b 	.word	0x08000c3b
 8000ba8:	08000c3b 	.word	0x08000c3b
 8000bac:	08000c3b 	.word	0x08000c3b
 8000bb0:	08000c3b 	.word	0x08000c3b
 8000bb4:	08000c3b 	.word	0x08000c3b
 8000bb8:	08000c3b 	.word	0x08000c3b
 8000bbc:	08000c3b 	.word	0x08000c3b
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c3b 	.word	0x08000c3b
 8000bc8:	08000c3b 	.word	0x08000c3b
 8000bcc:	08000c3b 	.word	0x08000c3b
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000bfd 	.word	0x08000bfd
 8000bd8:	4a79      	ldr	r2, [pc, #484]	; (8000dc0 <HAL_GPIO_Init+0x2b4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bde:	e02c      	b.n	8000c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e029      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	3304      	adds	r3, #4
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e024      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e01f      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	330c      	adds	r3, #12
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e01a      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e013      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	611a      	str	r2, [r3, #16]
          break;
 8000c26:	e009      	b.n	8000c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	615a      	str	r2, [r3, #20]
          break;
 8000c32:	e003      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          break;
 8000c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2bff      	cmp	r3, #255	; 0xff
 8000c40:	d801      	bhi.n	8000c46 <HAL_GPIO_Init+0x13a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	e001      	b.n	8000c4a <HAL_GPIO_Init+0x13e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d802      	bhi.n	8000c58 <HAL_GPIO_Init+0x14c>
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x152>
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	3b08      	subs	r3, #8
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	210f      	movs	r1, #15
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	6a39      	ldr	r1, [r7, #32]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80b1 	beq.w	8000dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8c:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a4c      	ldr	r2, [pc, #304]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca4:	4a48      	ldr	r2, [pc, #288]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a40      	ldr	r2, [pc, #256]	; (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d013      	beq.n	8000cf8 <HAL_GPIO_Init+0x1ec>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3f      	ldr	r2, [pc, #252]	; (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e8>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x1e4>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_GPIO_Init+0x1e0>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e006      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cec:	2304      	movs	r3, #4
 8000cee:	e004      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e002      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cfc:	f002 0203 	and.w	r2, r2, #3
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	4093      	lsls	r3, r2
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d0a:	492f      	ldr	r1, [pc, #188]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	492c      	ldr	r1, [pc, #176]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	608b      	str	r3, [r1, #8]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4928      	ldr	r1, [pc, #160]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	4922      	ldr	r1, [pc, #136]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60cb      	str	r3, [r1, #12]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	491e      	ldr	r1, [pc, #120]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	4918      	ldr	r1, [pc, #96]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4914      	ldr	r1, [pc, #80]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d021      	beq.n	8000de0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	490e      	ldr	r1, [pc, #56]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	e021      	b.n	8000dee <HAL_GPIO_Init+0x2e2>
 8000daa:	bf00      	nop
 8000dac:	10320000 	.word	0x10320000
 8000db0:	10310000 	.word	0x10310000
 8000db4:	10220000 	.word	0x10220000
 8000db8:	10210000 	.word	0x10210000
 8000dbc:	10120000 	.word	0x10120000
 8000dc0:	10110000 	.word	0x10110000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40011400 	.word	0x40011400
 8000ddc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_GPIO_Init+0x304>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	4909      	ldr	r1, [pc, #36]	; (8000e10 <HAL_GPIO_Init+0x304>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	3301      	adds	r3, #1
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f47f ae8e 	bne.w	8000b20 <HAL_GPIO_Init+0x14>
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	372c      	adds	r7, #44	; 0x2c
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e30:	e003      	b.n	8000e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	041a      	lsls	r2, r3, #16
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	611a      	str	r2, [r3, #16]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	041a      	lsls	r2, r3, #16
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43d9      	mvns	r1, r3
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	400b      	ands	r3, r1
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	611a      	str	r2, [r3, #16]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
	...

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e272      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8087 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e98:	4b92      	ldr	r3, [pc, #584]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 030c 	and.w	r3, r3, #12
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	d00c      	beq.n	8000ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea4:	4b8f      	ldr	r3, [pc, #572]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	d112      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
 8000eb0:	4b8c      	ldr	r3, [pc, #560]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebe:	4b89      	ldr	r3, [pc, #548]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d06c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d168      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e24c      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x76>
 8000ee0:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a7f      	ldr	r2, [pc, #508]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e02e      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x98>
 8000ef6:	4b7b      	ldr	r3, [pc, #492]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7a      	ldr	r2, [pc, #488]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b78      	ldr	r3, [pc, #480]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a77      	ldr	r2, [pc, #476]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e01d      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0xbc>
 8000f1a:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a71      	ldr	r2, [pc, #452]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a6e      	ldr	r2, [pc, #440]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f34:	4b6b      	ldr	r3, [pc, #428]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a6a      	ldr	r2, [pc, #424]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a67      	ldr	r2, [pc, #412]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc10 	bl	8000778 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fc0c 	bl	8000778 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e200      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0xe4>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fbfc 	bl	8000778 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fbf8 	bl	8000778 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e1ec      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x10c>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d063      	beq.n	800107a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d11c      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d116      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d001      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e1c0      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4939      	ldr	r1, [pc, #228]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	e03a      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d020      	beq.n	800104e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fbb1 	bl	8000778 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fbad 	bl	8000778 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e1a1      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e015      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fb90 	bl	8000778 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105c:	f7ff fb8c 	bl	8000778 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e180      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d03a      	beq.n	80010fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d019      	beq.n	80010c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fb70 	bl	8000778 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff fb6c 	bl	8000778 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e160      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 face 	bl	800165c <RCC_Delay>
 80010c0:	e01c      	b.n	80010fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fb56 	bl	8000778 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ce:	e00f      	b.n	80010f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d0:	f7ff fb52 	bl	8000778 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d908      	bls.n	80010f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e146      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	42420000 	.word	0x42420000
 80010ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	4b92      	ldr	r3, [pc, #584]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e9      	bne.n	80010d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80a6 	beq.w	8001256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110e:	4b8b      	ldr	r3, [pc, #556]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10d      	bne.n	8001136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b88      	ldr	r3, [pc, #544]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a87      	ldr	r2, [pc, #540]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b85      	ldr	r3, [pc, #532]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001132:	2301      	movs	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	4b82      	ldr	r3, [pc, #520]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d118      	bne.n	8001174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001142:	4b7f      	ldr	r3, [pc, #508]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a7e      	ldr	r2, [pc, #504]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114e:	f7ff fb13 	bl	8000778 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001156:	f7ff fb0f 	bl	8000778 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b64      	cmp	r3, #100	; 0x64
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e103      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	4b75      	ldr	r3, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x4c8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x312>
 800117c:	4b6f      	ldr	r3, [pc, #444]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a6e      	ldr	r2, [pc, #440]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	e02d      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x334>
 8001192:	4b6a      	ldr	r3, [pc, #424]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a69      	ldr	r2, [pc, #420]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b67      	ldr	r3, [pc, #412]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a66      	ldr	r2, [pc, #408]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	e01c      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d10c      	bne.n	80011ce <HAL_RCC_OscConfig+0x356>
 80011b4:	4b61      	ldr	r3, [pc, #388]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a60      	ldr	r2, [pc, #384]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6213      	str	r3, [r2, #32]
 80011c0:	4b5e      	ldr	r3, [pc, #376]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a5d      	ldr	r2, [pc, #372]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6213      	str	r3, [r2, #32]
 80011cc:	e00b      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a5a      	ldr	r2, [pc, #360]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	4b58      	ldr	r3, [pc, #352]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4a57      	ldr	r2, [pc, #348]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d015      	beq.n	800121a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fac3 	bl	8000778 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fabf 	bl	8000778 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0b1      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	4b4b      	ldr	r3, [pc, #300]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0ee      	beq.n	80011f6 <HAL_RCC_OscConfig+0x37e>
 8001218:	e014      	b.n	8001244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff faad 	bl	8000778 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff faa9 	bl	8000778 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e09b      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	4b40      	ldr	r3, [pc, #256]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ee      	bne.n	8001222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d105      	bne.n	8001256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a3b      	ldr	r2, [pc, #236]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8087 	beq.w	800136e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001260:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d061      	beq.n	8001330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d146      	bne.n	8001302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_RCC_OscConfig+0x4cc>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fa7d 	bl	8000778 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff fa79 	bl	8000778 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e06d      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d108      	bne.n	80012bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4921      	ldr	r1, [pc, #132]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a19      	ldr	r1, [r3, #32]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	430b      	orrs	r3, r1
 80012ce:	491b      	ldr	r1, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_RCC_OscConfig+0x4cc>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fa4d 	bl	8000778 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff fa49 	bl	8000778 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e03d      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x46a>
 8001300:	e035      	b.n	800136e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_RCC_OscConfig+0x4cc>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fa36 	bl	8000778 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fa32 	bl	8000778 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e026      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_RCC_OscConfig+0x4c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x498>
 800132e:	e01e      	b.n	800136e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d107      	bne.n	8001348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e019      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
 800133c:	40021000 	.word	0x40021000
 8001340:	40007000 	.word	0x40007000
 8001344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_OscConfig+0x500>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	429a      	cmp	r2, r3
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001366:	429a      	cmp	r2, r3
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0d0      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d910      	bls.n	80013c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 0207 	bic.w	r2, r3, #7
 80013a6:	4965      	ldr	r1, [pc, #404]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0b8      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d8:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a58      	ldr	r2, [pc, #352]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f0:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a52      	ldr	r2, [pc, #328]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013fc:	4b50      	ldr	r3, [pc, #320]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	494d      	ldr	r1, [pc, #308]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d040      	beq.n	800149c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d115      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e07f      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d107      	bne.n	800144a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143a:	4b41      	ldr	r3, [pc, #260]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e073      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e06b      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145a:	4b39      	ldr	r3, [pc, #228]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f023 0203 	bic.w	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4936      	ldr	r1, [pc, #216]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800146c:	f7ff f984 	bl	8000778 <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001472:	e00a      	b.n	800148a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001474:	f7ff f980 	bl	8000778 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e053      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 020c 	and.w	r2, r3, #12
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	429a      	cmp	r2, r3
 800149a:	d1eb      	bne.n	8001474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d210      	bcs.n	80014cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 0207 	bic.w	r2, r3, #7
 80014b2:	4922      	ldr	r1, [pc, #136]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e032      	b.n	8001532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4916      	ldr	r1, [pc, #88]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	490e      	ldr	r1, [pc, #56]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150a:	f000 f821 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 800150e:	4602      	mov	r2, r0
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	490a      	ldr	r1, [pc, #40]	; (8001544 <HAL_RCC_ClockConfig+0x1c8>)
 800151c:	5ccb      	ldrb	r3, [r1, r3]
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1cc>)
 8001524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1d0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f8e2 	bl	80006f4 <HAL_InitTick>

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40022000 	.word	0x40022000
 8001540:	40021000 	.word	0x40021000
 8001544:	0800373c 	.word	0x0800373c
 8001548:	20000000 	.word	0x20000000
 800154c:	20000004 	.word	0x20000004

08001550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b04      	cmp	r3, #4
 8001578:	d002      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x30>
 800157a:	2b08      	cmp	r3, #8
 800157c:	d003      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x36>
 800157e:	e027      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001582:	613b      	str	r3, [r7, #16]
      break;
 8001584:	e027      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	0c5b      	lsrs	r3, r3, #17
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
 80015ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015b2:	fb03 f202 	mul.w	r2, r3, r2
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e004      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	613b      	str	r3, [r7, #16]
      break;
 80015ce:	e002      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80015d2:	613b      	str	r3, [r7, #16]
      break;
 80015d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015d6:	693b      	ldr	r3, [r7, #16]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	007a1200 	.word	0x007a1200
 80015ec:	08003754 	.word	0x08003754
 80015f0:	08003764 	.word	0x08003764
 80015f4:	003d0900 	.word	0x003d0900

080015f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <HAL_RCC_GetHCLKFreq+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000000 	.word	0x20000000

0800160c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001610:	f7ff fff2 	bl	80015f8 <HAL_RCC_GetHCLKFreq>
 8001614:	4602      	mov	r2, r0
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	4903      	ldr	r1, [pc, #12]	; (8001630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	0800374c 	.word	0x0800374c

08001634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001638:	f7ff ffde 	bl	80015f8 <HAL_RCC_GetHCLKFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0adb      	lsrs	r3, r3, #11
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	0800374c 	.word	0x0800374c

0800165c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <RCC_Delay+0x34>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <RCC_Delay+0x38>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0a5b      	lsrs	r3, r3, #9
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001678:	bf00      	nop
  }
  while (Delay --);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	60fa      	str	r2, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f9      	bne.n	8001678 <RCC_Delay+0x1c>
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20000000 	.word	0x20000000
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e076      	b.n	8001798 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016ba:	d009      	beq.n	80016d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
 80016c2:	e005      	b.n	80016d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7fe fea8 	bl	8000440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001754:	ea42 0103 	orr.w	r1, r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	0c1a      	lsrs	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f002 0204 	and.w	r2, r2, #4
 8001776:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	4613      	mov	r3, r2
 80017ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d002      	beq.n	80017c4 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80017be:	2302      	movs	r3, #2
 80017c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80017c2:	e07d      	b.n	80018c0 <HAL_SPI_Receive_IT+0x120>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d110      	bne.n	80017ee <HAL_SPI_Receive_IT+0x4e>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017d4:	d10b      	bne.n	80017ee <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2204      	movs	r2, #4
 80017da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f879 	bl	80018dc <HAL_SPI_TransmitReceive_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	e06d      	b.n	80018ca <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_SPI_Receive_IT+0x5c>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e066      	b.n	80018ca <HAL_SPI_Receive_IT+0x12a>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_SPI_Receive_IT+0x70>
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001814:	e054      	b.n	80018c0 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2204      	movs	r2, #4
 800181a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	88fa      	ldrh	r2, [r7, #6]
 8001834:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <HAL_SPI_Receive_IT+0x134>)
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
 800185c:	e002      	b.n	8001864 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_SPI_Receive_IT+0x138>)
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800186c:	d10f      	bne.n	800188e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800187c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800188c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800189c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a8:	2b40      	cmp	r3, #64	; 0x40
 80018aa:	d008      	beq.n	80018be <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e000      	b.n	80018c0 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80018be:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08001dd9 	.word	0x08001dd9
 80018d8:	08001d8f 	.word	0x08001d8f

080018dc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_SPI_TransmitReceive_IT+0x20>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e075      	b.n	80019e8 <HAL_SPI_TransmitReceive_IT+0x10c>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800190a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001912:	7dbb      	ldrb	r3, [r7, #22]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d00d      	beq.n	8001934 <HAL_SPI_TransmitReceive_IT+0x58>
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800191e:	d106      	bne.n	800192e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <HAL_SPI_TransmitReceive_IT+0x52>
 8001928:	7dbb      	ldrb	r3, [r7, #22]
 800192a:	2b04      	cmp	r3, #4
 800192c:	d002      	beq.n	8001934 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800192e:	2302      	movs	r3, #2
 8001930:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001932:	e054      	b.n	80019de <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <HAL_SPI_TransmitReceive_IT+0x6a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <HAL_SPI_TransmitReceive_IT+0x6a>
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	75fb      	strb	r3, [r7, #23]
    goto error;
 800194a:	e048      	b.n	80019de <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b04      	cmp	r3, #4
 8001956:	d003      	beq.n	8001960 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2205      	movs	r2, #5
 800195c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	887a      	ldrh	r2, [r7, #2]
 8001976:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	887a      	ldrh	r2, [r7, #2]
 8001982:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800199c:	645a      	str	r2, [r3, #68]	; 0x44
 800199e:	e005      	b.n	80019ac <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a16      	ldr	r2, [pc, #88]	; (80019fc <HAL_SPI_TransmitReceive_IT+0x120>)
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4a15      	ldr	r2, [pc, #84]	; (8001a00 <HAL_SPI_TransmitReceive_IT+0x124>)
 80019aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80019ba:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c6:	2b40      	cmp	r3, #64	; 0x40
 80019c8:	d008      	beq.n	80019dc <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e000      	b.n	80019de <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80019dc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	08001cd1 	.word	0x08001cd1
 80019f8:	08001d31 	.word	0x08001d31
 80019fc:	08001c0d 	.word	0x08001c0d
 8001a00:	08001c71 	.word	0x08001c71

08001a04 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10e      	bne.n	8001a44 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d009      	beq.n	8001a44 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4798      	blx	r3
    return;
 8001a42:	e0b7      	b.n	8001bb4 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_SPI_IRQHandler+0x5e>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
    return;
 8001a60:	e0a8      	b.n	8001bb4 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d105      	bne.n	8001a78 <HAL_SPI_IRQHandler+0x74>
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 809e 	beq.w	8001bb4 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8098 	beq.w	8001bb4 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d023      	beq.n	8001ad6 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d011      	beq.n	8001abe <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	f043 0204 	orr.w	r2, r3, #4
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	e00b      	b.n	8001ad6 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]
        return;
 8001ad4:	e06e      	b.n	8001bb4 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d014      	beq.n	8001b0a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae4:	f043 0201 	orr.w	r2, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d04f      	beq.n	8001bb2 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d104      	bne.n	8001b3e <HAL_SPI_IRQHandler+0x13a>
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d034      	beq.n	8001ba8 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0203 	bic.w	r2, r2, #3
 8001b4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d011      	beq.n	8001b7a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <HAL_SPI_IRQHandler+0x1b8>)
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe ff5a 	bl	8000a1c <HAL_DMA_Abort_IT>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d016      	beq.n	8001bb0 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b86:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_SPI_IRQHandler+0x1b8>)
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe ff44 	bl	8000a1c <HAL_DMA_Abort_IT>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00a      	beq.n	8001bb0 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001ba6:	e003      	b.n	8001bb0 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f812 	bl	8001bd2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001bae:	e000      	b.n	8001bb2 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8001bb0:	bf00      	nop
    return;
 8001bb2:	bf00      	nop
  }
}
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	08001be5 	.word	0x08001be5

08001bc0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7ff ffe7 	bl	8001bd2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f103 020c 	add.w	r2, r3, #12
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10f      	bne.n	8001c68 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c56:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f9d4 	bl	8002010 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	330c      	adds	r3, #12
 8001c82:	7812      	ldrb	r2, [r2, #0]
 8001c84:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10f      	bne.n	8001cc8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f9a4 	bl	8002010 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	1c9a      	adds	r2, r3, #2
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10f      	bne.n	8001d28 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d16:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d102      	bne.n	8001d28 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f974 	bl	8002010 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	881a      	ldrh	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	1c9a      	adds	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10f      	bne.n	8001d86 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d74:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f945 	bl	8002010 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f103 020c 	add.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f994 	bl	80020f8 <SPI_CloseRx_ISR>
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	b292      	uxth	r2, r2
 8001dec:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	1c9a      	adds	r2, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f971 	bl	80020f8 <SPI_CloseRx_ISR>
  }
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e30:	f7fe fca2 	bl	8000778 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e40:	f7fe fc9a 	bl	8000778 <HAL_GetTick>
 8001e44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e46:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	015b      	lsls	r3, r3, #5
 8001e4c:	0d1b      	lsrs	r3, r3, #20
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e56:	e054      	b.n	8001f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5e:	d050      	beq.n	8001f02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e60:	f7fe fc8a 	bl	8000778 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d902      	bls.n	8001e76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d13d      	bne.n	8001ef2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e8e:	d111      	bne.n	8001eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e98:	d004      	beq.n	8001ea4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea2:	d107      	bne.n	8001eb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ebc:	d10f      	bne.n	8001ede <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001edc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e017      	b.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d19b      	bne.n	8001e58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000000 	.word	0x20000000

08001f30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f44:	d111      	bne.n	8001f6a <SPI_EndRxTransaction+0x3a>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f4e:	d004      	beq.n	8001f5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f58:	d107      	bne.n	8001f6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f68:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f72:	d117      	bne.n	8001fa4 <SPI_EndRxTransaction+0x74>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7c:	d112      	bne.n	8001fa4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2101      	movs	r1, #1
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f7ff ff49 	bl	8001e20 <SPI_WaitFlagStateUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01a      	beq.n	8001fca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e013      	b.n	8001fcc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2200      	movs	r2, #0
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff ff36 	bl	8001e20 <SPI_WaitFlagStateUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e000      	b.n	8001fcc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7ff ff18 	bl	8001e20 <SPI_WaitFlagStateUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0220 	orr.w	r2, r3, #32
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e000      	b.n	8002008 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <SPI_CloseRxTx_ISR+0xe0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a35      	ldr	r2, [pc, #212]	; (80020f4 <SPI_CloseRxTx_ISR+0xe4>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	0a5b      	lsrs	r3, r3, #9
 8002024:	2264      	movs	r2, #100	; 0x64
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800202c:	f7fe fba4 	bl	8000778 <HAL_GetTick>
 8002030:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0220 	bic.w	r2, r2, #32
 8002040:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002054:	e009      	b.n	800206a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	3b01      	subs	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0eb      	beq.n	8002042 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	2164      	movs	r1, #100	; 0x64
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffb0 	bl	8001fd4 <SPI_EndRxTxTransaction>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	f043 0220 	orr.w	r2, r3, #32
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d115      	bne.n	80020d8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d107      	bne.n	80020c8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe f843 	bl	800014c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80020c6:	e00e      	b.n	80020e6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fd75 	bl	8001bc0 <HAL_SPI_TxRxCpltCallback>
}
 80020d6:	e006      	b.n	80020e6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fd76 	bl	8001bd2 <HAL_SPI_ErrorCallback>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000
 80020f4:	057619f1 	.word	0x057619f1

080020f8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800210e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002110:	f7fe fb32 	bl	8000778 <HAL_GetTick>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	2164      	movs	r1, #100	; 0x64
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff08 	bl	8001f30 <SPI_EndRxTransaction>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10a      	bne.n	8002150 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215c:	2b00      	cmp	r3, #0
 800215e:	d103      	bne.n	8002168 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7fd fff3 	bl	800014c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002166:	e002      	b.n	800216e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fd32 	bl	8001bd2 <HAL_SPI_ErrorCallback>
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e042      	b.n	800220e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d106      	bne.n	80021a2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7fe f9a1 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2224      	movs	r2, #36	; 0x24
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021b8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fd70 	bl	8002ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021de:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b08a      	sub	sp, #40	; 0x28
 800221a:	af02      	add	r7, sp, #8
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b20      	cmp	r3, #32
 8002234:	d16d      	bne.n	8002312 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_UART_Transmit+0x2c>
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e066      	b.n	8002314 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2221      	movs	r2, #33	; 0x21
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002254:	f7fe fa90 	bl	8000778 <HAL_GetTick>
 8002258:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226e:	d108      	bne.n	8002282 <HAL_UART_Transmit+0x6c>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	e003      	b.n	800228a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800228a:	e02a      	b.n	80022e2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2200      	movs	r2, #0
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 faf8 	bl	800288c <UART_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e036      	b.n	8002314 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	3302      	adds	r3, #2
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	e007      	b.n	80022d4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1cf      	bne.n	800228c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2200      	movs	r2, #0
 80022f4:	2140      	movs	r1, #64	; 0x40
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fac8 	bl	800288c <UART_WaitOnFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e006      	b.n	8002314 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002312:	2302      	movs	r3, #2
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b0ba      	sub	sp, #232	; 0xe8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800234e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800235a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10f      	bne.n	8002382 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_UART_IRQHandler+0x66>
 800236e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fbd1 	bl	8002b22 <UART_Receive_IT>
      return;
 8002380:	e25b      	b.n	800283a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80de 	beq.w	8002548 <HAL_UART_IRQHandler+0x22c>
 800238c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d106      	bne.n	80023a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800239c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80d1 	beq.w	8002548 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00b      	beq.n	80023ca <HAL_UART_IRQHandler+0xae>
 80023b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_UART_IRQHandler+0xd2>
 80023d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_UART_IRQHandler+0xf6>
 80023fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f043 0204 	orr.w	r2, r3, #4
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d011      	beq.n	8002442 <HAL_UART_IRQHandler+0x126>
 800241e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800242a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f043 0208 	orr.w	r2, r3, #8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 81f2 	beq.w	8002830 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800244c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_UART_IRQHandler+0x14e>
 8002458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fb5c 	bl	8002b22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_UART_IRQHandler+0x17a>
 800248e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d04f      	beq.n	8002536 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa66 	bl	8002968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d041      	beq.n	800252e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3314      	adds	r3, #20
 80024b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3314      	adds	r3, #20
 80024d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024e6:	e841 2300 	strex	r3, r2, [r1]
 80024ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1d9      	bne.n	80024aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d013      	beq.n	8002526 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_UART_IRQHandler+0x3e0>)
 8002504:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fa86 	bl	8000a1c <HAL_DMA_Abort_IT>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002520:	4610      	mov	r0, r2
 8002522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002524:	e00e      	b.n	8002544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f99c 	bl	8002864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252c:	e00a      	b.n	8002544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f998 	bl	8002864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002534:	e006      	b.n	8002544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f994 	bl	8002864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002542:	e175      	b.n	8002830 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002544:	bf00      	nop
    return;
 8002546:	e173      	b.n	8002830 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	2b01      	cmp	r3, #1
 800254e:	f040 814f 	bne.w	80027f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8148 	beq.w	80027f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8141 	beq.w	80027f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80b6 	beq.w	8002700 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 8145 	beq.w	8002834 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025b2:	429a      	cmp	r2, r3
 80025b4:	f080 813e 	bcs.w	8002834 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	f000 8088 	beq.w	80026dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	330c      	adds	r3, #12
 80025d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	330c      	adds	r3, #12
 80025f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002604:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002608:	e841 2300 	strex	r3, r2, [r1]
 800260c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1d9      	bne.n	80025cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3314      	adds	r3, #20
 800261e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002622:	e853 3f00 	ldrex	r3, [r3]
 8002626:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3314      	adds	r3, #20
 8002638:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800263c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002640:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002644:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800264e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e1      	bne.n	8002618 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3314      	adds	r3, #20
 800265a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800265e:	e853 3f00 	ldrex	r3, [r3]
 8002662:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800266a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3314      	adds	r3, #20
 8002674:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002678:	66fa      	str	r2, [r7, #108]	; 0x6c
 800267a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800267e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002680:	e841 2300 	strex	r3, r2, [r1]
 8002684:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1e3      	bne.n	8002654 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a4:	e853 3f00 	ldrex	r3, [r3]
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ac:	f023 0310 	bic.w	r3, r3, #16
 80026b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	330c      	adds	r3, #12
 80026ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026be:	65ba      	str	r2, [r7, #88]	; 0x58
 80026c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026c6:	e841 2300 	strex	r3, r2, [r1]
 80026ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e3      	bne.n	800269a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f965 	bl	80009a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8bf 	bl	8002876 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026f8:	e09c      	b.n	8002834 <HAL_UART_IRQHandler+0x518>
 80026fa:	bf00      	nop
 80026fc:	08002a2d 	.word	0x08002a2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002708:	b29b      	uxth	r3, r3
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 808e 	beq.w	8002838 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800271c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8089 	beq.w	8002838 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	330c      	adds	r3, #12
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	e853 3f00 	ldrex	r3, [r3]
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800273c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800274a:	647a      	str	r2, [r7, #68]	; 0x44
 800274c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002752:	e841 2300 	strex	r3, r2, [r1]
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1e3      	bne.n	8002726 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3314      	adds	r3, #20
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	e853 3f00 	ldrex	r3, [r3]
 800276c:	623b      	str	r3, [r7, #32]
   return(result);
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002782:	633a      	str	r2, [r7, #48]	; 0x30
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800278a:	e841 2300 	strex	r3, r2, [r1]
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e3      	bne.n	800275e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	e853 3f00 	ldrex	r3, [r3]
 80027b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0310 	bic.w	r3, r3, #16
 80027ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027c8:	61fa      	str	r2, [r7, #28]
 80027ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027cc:	69b9      	ldr	r1, [r7, #24]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	e841 2300 	strex	r3, r2, [r1]
 80027d4:	617b      	str	r3, [r7, #20]
   return(result);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e3      	bne.n	80027a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f844 	bl	8002876 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027ee:	e023      	b.n	8002838 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d009      	beq.n	8002810 <HAL_UART_IRQHandler+0x4f4>
 80027fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f923 	bl	8002a54 <UART_Transmit_IT>
    return;
 800280e:	e014      	b.n	800283a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00e      	beq.n	800283a <HAL_UART_IRQHandler+0x51e>
 800281c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f962 	bl	8002af2 <UART_EndTransmit_IT>
    return;
 800282e:	e004      	b.n	800283a <HAL_UART_IRQHandler+0x51e>
    return;
 8002830:	bf00      	nop
 8002832:	e002      	b.n	800283a <HAL_UART_IRQHandler+0x51e>
      return;
 8002834:	bf00      	nop
 8002836:	e000      	b.n	800283a <HAL_UART_IRQHandler+0x51e>
      return;
 8002838:	bf00      	nop
  }
}
 800283a:	37e8      	adds	r7, #232	; 0xe8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b090      	sub	sp, #64	; 0x40
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289c:	e050      	b.n	8002940 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d04c      	beq.n	8002940 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <UART_WaitOnFlagUntilTimeout+0x30>
 80028ac:	f7fd ff64 	bl	8000778 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d241      	bcs.n	8002940 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	e853 3f00 	ldrex	r3, [r3]
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028dc:	637a      	str	r2, [r7, #52]	; 0x34
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e4:	e841 2300 	strex	r3, r2, [r1]
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e5      	bne.n	80028bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3314      	adds	r3, #20
 80028f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	613b      	str	r3, [r7, #16]
   return(result);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3314      	adds	r3, #20
 800290e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002910:	623a      	str	r2, [r7, #32]
 8002912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	69f9      	ldr	r1, [r7, #28]
 8002916:	6a3a      	ldr	r2, [r7, #32]
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	61bb      	str	r3, [r7, #24]
   return(result);
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e5      	bne.n	80028f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e00f      	b.n	8002960 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4013      	ands	r3, r2
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	429a      	cmp	r2, r3
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	429a      	cmp	r2, r3
 800295c:	d09f      	beq.n	800289e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3740      	adds	r7, #64	; 0x40
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002968:	b480      	push	{r7}
 800296a:	b095      	sub	sp, #84	; 0x54
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002990:	643a      	str	r2, [r7, #64]	; 0x40
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e5      	bne.n	8002970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3314      	adds	r3, #20
 80029aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	e853 3f00 	ldrex	r3, [r3]
 80029b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3314      	adds	r3, #20
 80029c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029cc:	e841 2300 	strex	r3, r2, [r1]
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e5      	bne.n	80029a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d119      	bne.n	8002a14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	330c      	adds	r3, #12
 80029e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	e853 3f00 	ldrex	r3, [r3]
 80029ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f023 0310 	bic.w	r3, r3, #16
 80029f6:	647b      	str	r3, [r7, #68]	; 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	330c      	adds	r3, #12
 80029fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a00:	61ba      	str	r2, [r7, #24]
 8002a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a04:	6979      	ldr	r1, [r7, #20]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	e841 2300 	strex	r3, r2, [r1]
 8002a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e5      	bne.n	80029e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a22:	bf00      	nop
 8002a24:	3754      	adds	r7, #84	; 0x54
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff ff0c 	bl	8002864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b21      	cmp	r3, #33	; 0x21
 8002a66:	d13e      	bne.n	8002ae6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a70:	d114      	bne.n	8002a9c <UART_Transmit_IT+0x48>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d110      	bne.n	8002a9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	1c9a      	adds	r2, r3, #2
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	621a      	str	r2, [r3, #32]
 8002a9a:	e008      	b.n	8002aae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	1c59      	adds	r1, r3, #1
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6211      	str	r1, [r2, #32]
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4619      	mov	r1, r3
 8002abc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ad0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff fe94 	bl	8002840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b08c      	sub	sp, #48	; 0x30
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b22      	cmp	r3, #34	; 0x22
 8002b34:	f040 80ae 	bne.w	8002c94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b40:	d117      	bne.n	8002b72 <UART_Receive_IT+0x50>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d113      	bne.n	8002b72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	1c9a      	adds	r2, r3, #2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b70:	e026      	b.n	8002bc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b84:	d007      	beq.n	8002b96 <UART_Receive_IT+0x74>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <UART_Receive_IT+0x82>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e008      	b.n	8002bb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d15d      	bne.n	8002c90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0220 	bic.w	r2, r2, #32
 8002be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d135      	bne.n	8002c86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	e853 3f00 	ldrex	r3, [r3]
 8002c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f023 0310 	bic.w	r3, r3, #16
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c40:	623a      	str	r2, [r7, #32]
 8002c42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	69f9      	ldr	r1, [r7, #28]
 8002c46:	6a3a      	ldr	r2, [r7, #32]
 8002c48:	e841 2300 	strex	r3, r2, [r1]
 8002c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e5      	bne.n	8002c20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d10a      	bne.n	8002c78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff fdf9 	bl	8002876 <HAL_UARTEx_RxEventCallback>
 8002c84:	e002      	b.n	8002c8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fde3 	bl	8002852 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e002      	b.n	8002c96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3730      	adds	r7, #48	; 0x30
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cda:	f023 030c 	bic.w	r3, r3, #12
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2c      	ldr	r2, [pc, #176]	; (8002db4 <UART_SetConfig+0x114>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d08:	f7fe fc94 	bl	8001634 <HAL_RCC_GetPCLK2Freq>
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	e002      	b.n	8002d16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d10:	f7fe fc7c 	bl	800160c <HAL_RCC_GetPCLK1Freq>
 8002d14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009a      	lsls	r2, r3, #2
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <UART_SetConfig+0x118>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	0119      	lsls	r1, r3, #4
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009a      	lsls	r2, r3, #2
 8002d40:	441a      	add	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <UART_SetConfig+0x118>)
 8002d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2064      	movs	r0, #100	; 0x64
 8002d56:	fb00 f303 	mul.w	r3, r0, r3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	3332      	adds	r3, #50	; 0x32
 8002d60:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <UART_SetConfig+0x118>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6c:	4419      	add	r1, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009a      	lsls	r2, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <UART_SetConfig+0x118>)
 8002d86:	fba3 0302 	umull	r0, r3, r3, r2
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2064      	movs	r0, #100	; 0x64
 8002d8e:	fb00 f303 	mul.w	r3, r0, r3
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	3332      	adds	r3, #50	; 0x32
 8002d98:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <UART_SetConfig+0x118>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	f003 020f 	and.w	r2, r3, #15
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	440a      	add	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40013800 	.word	0x40013800
 8002db8:	51eb851f 	.word	0x51eb851f

08002dbc <siprintf>:
 8002dbc:	b40e      	push	{r1, r2, r3}
 8002dbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dc2:	b500      	push	{lr}
 8002dc4:	b09c      	sub	sp, #112	; 0x70
 8002dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8002dc8:	9002      	str	r0, [sp, #8]
 8002dca:	9006      	str	r0, [sp, #24]
 8002dcc:	9107      	str	r1, [sp, #28]
 8002dce:	9104      	str	r1, [sp, #16]
 8002dd0:	4808      	ldr	r0, [pc, #32]	; (8002df4 <siprintf+0x38>)
 8002dd2:	4909      	ldr	r1, [pc, #36]	; (8002df8 <siprintf+0x3c>)
 8002dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dd8:	9105      	str	r1, [sp, #20]
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	a902      	add	r1, sp, #8
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	f000 f98e 	bl	8003100 <_svfiprintf_r>
 8002de4:	2200      	movs	r2, #0
 8002de6:	9b02      	ldr	r3, [sp, #8]
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	b01c      	add	sp, #112	; 0x70
 8002dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8002df0:	b003      	add	sp, #12
 8002df2:	4770      	bx	lr
 8002df4:	20000058 	.word	0x20000058
 8002df8:	ffff0208 	.word	0xffff0208

08002dfc <memset>:
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4402      	add	r2, r0
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d100      	bne.n	8002e06 <memset+0xa>
 8002e04:	4770      	bx	lr
 8002e06:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0a:	e7f9      	b.n	8002e00 <memset+0x4>

08002e0c <__errno>:
 8002e0c:	4b01      	ldr	r3, [pc, #4]	; (8002e14 <__errno+0x8>)
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000058 	.word	0x20000058

08002e18 <__libc_init_array>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	2600      	movs	r6, #0
 8002e1c:	4d0c      	ldr	r5, [pc, #48]	; (8002e50 <__libc_init_array+0x38>)
 8002e1e:	4c0d      	ldr	r4, [pc, #52]	; (8002e54 <__libc_init_array+0x3c>)
 8002e20:	1b64      	subs	r4, r4, r5
 8002e22:	10a4      	asrs	r4, r4, #2
 8002e24:	42a6      	cmp	r6, r4
 8002e26:	d109      	bne.n	8002e3c <__libc_init_array+0x24>
 8002e28:	f000 fc7a 	bl	8003720 <_init>
 8002e2c:	2600      	movs	r6, #0
 8002e2e:	4d0a      	ldr	r5, [pc, #40]	; (8002e58 <__libc_init_array+0x40>)
 8002e30:	4c0a      	ldr	r4, [pc, #40]	; (8002e5c <__libc_init_array+0x44>)
 8002e32:	1b64      	subs	r4, r4, r5
 8002e34:	10a4      	asrs	r4, r4, #2
 8002e36:	42a6      	cmp	r6, r4
 8002e38:	d105      	bne.n	8002e46 <__libc_init_array+0x2e>
 8002e3a:	bd70      	pop	{r4, r5, r6, pc}
 8002e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e40:	4798      	blx	r3
 8002e42:	3601      	adds	r6, #1
 8002e44:	e7ee      	b.n	8002e24 <__libc_init_array+0xc>
 8002e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4a:	4798      	blx	r3
 8002e4c:	3601      	adds	r6, #1
 8002e4e:	e7f2      	b.n	8002e36 <__libc_init_array+0x1e>
 8002e50:	0800379c 	.word	0x0800379c
 8002e54:	0800379c 	.word	0x0800379c
 8002e58:	0800379c 	.word	0x0800379c
 8002e5c:	080037a0 	.word	0x080037a0

08002e60 <__retarget_lock_acquire_recursive>:
 8002e60:	4770      	bx	lr

08002e62 <__retarget_lock_release_recursive>:
 8002e62:	4770      	bx	lr

08002e64 <_free_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4605      	mov	r5, r0
 8002e68:	2900      	cmp	r1, #0
 8002e6a:	d040      	beq.n	8002eee <_free_r+0x8a>
 8002e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e70:	1f0c      	subs	r4, r1, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bfb8      	it	lt
 8002e76:	18e4      	addlt	r4, r4, r3
 8002e78:	f000 f8dc 	bl	8003034 <__malloc_lock>
 8002e7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ef0 <_free_r+0x8c>)
 8002e7e:	6813      	ldr	r3, [r2, #0]
 8002e80:	b933      	cbnz	r3, 8002e90 <_free_r+0x2c>
 8002e82:	6063      	str	r3, [r4, #4]
 8002e84:	6014      	str	r4, [r2, #0]
 8002e86:	4628      	mov	r0, r5
 8002e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e8c:	f000 b8d8 	b.w	8003040 <__malloc_unlock>
 8002e90:	42a3      	cmp	r3, r4
 8002e92:	d908      	bls.n	8002ea6 <_free_r+0x42>
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	1821      	adds	r1, r4, r0
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	bf01      	itttt	eq
 8002e9c:	6819      	ldreq	r1, [r3, #0]
 8002e9e:	685b      	ldreq	r3, [r3, #4]
 8002ea0:	1809      	addeq	r1, r1, r0
 8002ea2:	6021      	streq	r1, [r4, #0]
 8002ea4:	e7ed      	b.n	8002e82 <_free_r+0x1e>
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	b10b      	cbz	r3, 8002eb0 <_free_r+0x4c>
 8002eac:	42a3      	cmp	r3, r4
 8002eae:	d9fa      	bls.n	8002ea6 <_free_r+0x42>
 8002eb0:	6811      	ldr	r1, [r2, #0]
 8002eb2:	1850      	adds	r0, r2, r1
 8002eb4:	42a0      	cmp	r0, r4
 8002eb6:	d10b      	bne.n	8002ed0 <_free_r+0x6c>
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	4401      	add	r1, r0
 8002ebc:	1850      	adds	r0, r2, r1
 8002ebe:	4283      	cmp	r3, r0
 8002ec0:	6011      	str	r1, [r2, #0]
 8002ec2:	d1e0      	bne.n	8002e86 <_free_r+0x22>
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4408      	add	r0, r1
 8002eca:	6010      	str	r0, [r2, #0]
 8002ecc:	6053      	str	r3, [r2, #4]
 8002ece:	e7da      	b.n	8002e86 <_free_r+0x22>
 8002ed0:	d902      	bls.n	8002ed8 <_free_r+0x74>
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	602b      	str	r3, [r5, #0]
 8002ed6:	e7d6      	b.n	8002e86 <_free_r+0x22>
 8002ed8:	6820      	ldr	r0, [r4, #0]
 8002eda:	1821      	adds	r1, r4, r0
 8002edc:	428b      	cmp	r3, r1
 8002ede:	bf01      	itttt	eq
 8002ee0:	6819      	ldreq	r1, [r3, #0]
 8002ee2:	685b      	ldreq	r3, [r3, #4]
 8002ee4:	1809      	addeq	r1, r1, r0
 8002ee6:	6021      	streq	r1, [r4, #0]
 8002ee8:	6063      	str	r3, [r4, #4]
 8002eea:	6054      	str	r4, [r2, #4]
 8002eec:	e7cb      	b.n	8002e86 <_free_r+0x22>
 8002eee:	bd38      	pop	{r3, r4, r5, pc}
 8002ef0:	20000278 	.word	0x20000278

08002ef4 <sbrk_aligned>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	4e0e      	ldr	r6, [pc, #56]	; (8002f30 <sbrk_aligned+0x3c>)
 8002ef8:	460c      	mov	r4, r1
 8002efa:	6831      	ldr	r1, [r6, #0]
 8002efc:	4605      	mov	r5, r0
 8002efe:	b911      	cbnz	r1, 8002f06 <sbrk_aligned+0x12>
 8002f00:	f000 fbaa 	bl	8003658 <_sbrk_r>
 8002f04:	6030      	str	r0, [r6, #0]
 8002f06:	4621      	mov	r1, r4
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f000 fba5 	bl	8003658 <_sbrk_r>
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	d00a      	beq.n	8002f28 <sbrk_aligned+0x34>
 8002f12:	1cc4      	adds	r4, r0, #3
 8002f14:	f024 0403 	bic.w	r4, r4, #3
 8002f18:	42a0      	cmp	r0, r4
 8002f1a:	d007      	beq.n	8002f2c <sbrk_aligned+0x38>
 8002f1c:	1a21      	subs	r1, r4, r0
 8002f1e:	4628      	mov	r0, r5
 8002f20:	f000 fb9a 	bl	8003658 <_sbrk_r>
 8002f24:	3001      	adds	r0, #1
 8002f26:	d101      	bne.n	8002f2c <sbrk_aligned+0x38>
 8002f28:	f04f 34ff 	mov.w	r4, #4294967295
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
 8002f30:	2000027c 	.word	0x2000027c

08002f34 <_malloc_r>:
 8002f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f38:	1ccd      	adds	r5, r1, #3
 8002f3a:	f025 0503 	bic.w	r5, r5, #3
 8002f3e:	3508      	adds	r5, #8
 8002f40:	2d0c      	cmp	r5, #12
 8002f42:	bf38      	it	cc
 8002f44:	250c      	movcc	r5, #12
 8002f46:	2d00      	cmp	r5, #0
 8002f48:	4607      	mov	r7, r0
 8002f4a:	db01      	blt.n	8002f50 <_malloc_r+0x1c>
 8002f4c:	42a9      	cmp	r1, r5
 8002f4e:	d905      	bls.n	8002f5c <_malloc_r+0x28>
 8002f50:	230c      	movs	r3, #12
 8002f52:	2600      	movs	r6, #0
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4630      	mov	r0, r6
 8002f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003030 <_malloc_r+0xfc>
 8002f60:	f000 f868 	bl	8003034 <__malloc_lock>
 8002f64:	f8d8 3000 	ldr.w	r3, [r8]
 8002f68:	461c      	mov	r4, r3
 8002f6a:	bb5c      	cbnz	r4, 8002fc4 <_malloc_r+0x90>
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4638      	mov	r0, r7
 8002f70:	f7ff ffc0 	bl	8002ef4 <sbrk_aligned>
 8002f74:	1c43      	adds	r3, r0, #1
 8002f76:	4604      	mov	r4, r0
 8002f78:	d155      	bne.n	8003026 <_malloc_r+0xf2>
 8002f7a:	f8d8 4000 	ldr.w	r4, [r8]
 8002f7e:	4626      	mov	r6, r4
 8002f80:	2e00      	cmp	r6, #0
 8002f82:	d145      	bne.n	8003010 <_malloc_r+0xdc>
 8002f84:	2c00      	cmp	r4, #0
 8002f86:	d048      	beq.n	800301a <_malloc_r+0xe6>
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	4638      	mov	r0, r7
 8002f8e:	eb04 0903 	add.w	r9, r4, r3
 8002f92:	f000 fb61 	bl	8003658 <_sbrk_r>
 8002f96:	4581      	cmp	r9, r0
 8002f98:	d13f      	bne.n	800301a <_malloc_r+0xe6>
 8002f9a:	6821      	ldr	r1, [r4, #0]
 8002f9c:	4638      	mov	r0, r7
 8002f9e:	1a6d      	subs	r5, r5, r1
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	f7ff ffa7 	bl	8002ef4 <sbrk_aligned>
 8002fa6:	3001      	adds	r0, #1
 8002fa8:	d037      	beq.n	800301a <_malloc_r+0xe6>
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	442b      	add	r3, r5
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d038      	beq.n	800302a <_malloc_r+0xf6>
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	42a2      	cmp	r2, r4
 8002fbc:	d12b      	bne.n	8003016 <_malloc_r+0xe2>
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	e00f      	b.n	8002fe4 <_malloc_r+0xb0>
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	1b52      	subs	r2, r2, r5
 8002fc8:	d41f      	bmi.n	800300a <_malloc_r+0xd6>
 8002fca:	2a0b      	cmp	r2, #11
 8002fcc:	d917      	bls.n	8002ffe <_malloc_r+0xca>
 8002fce:	1961      	adds	r1, r4, r5
 8002fd0:	42a3      	cmp	r3, r4
 8002fd2:	6025      	str	r5, [r4, #0]
 8002fd4:	bf18      	it	ne
 8002fd6:	6059      	strne	r1, [r3, #4]
 8002fd8:	6863      	ldr	r3, [r4, #4]
 8002fda:	bf08      	it	eq
 8002fdc:	f8c8 1000 	streq.w	r1, [r8]
 8002fe0:	5162      	str	r2, [r4, r5]
 8002fe2:	604b      	str	r3, [r1, #4]
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	f104 060b 	add.w	r6, r4, #11
 8002fea:	f000 f829 	bl	8003040 <__malloc_unlock>
 8002fee:	f026 0607 	bic.w	r6, r6, #7
 8002ff2:	1d23      	adds	r3, r4, #4
 8002ff4:	1af2      	subs	r2, r6, r3
 8002ff6:	d0ae      	beq.n	8002f56 <_malloc_r+0x22>
 8002ff8:	1b9b      	subs	r3, r3, r6
 8002ffa:	50a3      	str	r3, [r4, r2]
 8002ffc:	e7ab      	b.n	8002f56 <_malloc_r+0x22>
 8002ffe:	42a3      	cmp	r3, r4
 8003000:	6862      	ldr	r2, [r4, #4]
 8003002:	d1dd      	bne.n	8002fc0 <_malloc_r+0x8c>
 8003004:	f8c8 2000 	str.w	r2, [r8]
 8003008:	e7ec      	b.n	8002fe4 <_malloc_r+0xb0>
 800300a:	4623      	mov	r3, r4
 800300c:	6864      	ldr	r4, [r4, #4]
 800300e:	e7ac      	b.n	8002f6a <_malloc_r+0x36>
 8003010:	4634      	mov	r4, r6
 8003012:	6876      	ldr	r6, [r6, #4]
 8003014:	e7b4      	b.n	8002f80 <_malloc_r+0x4c>
 8003016:	4613      	mov	r3, r2
 8003018:	e7cc      	b.n	8002fb4 <_malloc_r+0x80>
 800301a:	230c      	movs	r3, #12
 800301c:	4638      	mov	r0, r7
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	f000 f80e 	bl	8003040 <__malloc_unlock>
 8003024:	e797      	b.n	8002f56 <_malloc_r+0x22>
 8003026:	6025      	str	r5, [r4, #0]
 8003028:	e7dc      	b.n	8002fe4 <_malloc_r+0xb0>
 800302a:	605b      	str	r3, [r3, #4]
 800302c:	deff      	udf	#255	; 0xff
 800302e:	bf00      	nop
 8003030:	20000278 	.word	0x20000278

08003034 <__malloc_lock>:
 8003034:	4801      	ldr	r0, [pc, #4]	; (800303c <__malloc_lock+0x8>)
 8003036:	f7ff bf13 	b.w	8002e60 <__retarget_lock_acquire_recursive>
 800303a:	bf00      	nop
 800303c:	20000274 	.word	0x20000274

08003040 <__malloc_unlock>:
 8003040:	4801      	ldr	r0, [pc, #4]	; (8003048 <__malloc_unlock+0x8>)
 8003042:	f7ff bf0e 	b.w	8002e62 <__retarget_lock_release_recursive>
 8003046:	bf00      	nop
 8003048:	20000274 	.word	0x20000274

0800304c <__ssputs_r>:
 800304c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003050:	461f      	mov	r7, r3
 8003052:	688e      	ldr	r6, [r1, #8]
 8003054:	4682      	mov	sl, r0
 8003056:	42be      	cmp	r6, r7
 8003058:	460c      	mov	r4, r1
 800305a:	4690      	mov	r8, r2
 800305c:	680b      	ldr	r3, [r1, #0]
 800305e:	d82c      	bhi.n	80030ba <__ssputs_r+0x6e>
 8003060:	898a      	ldrh	r2, [r1, #12]
 8003062:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003066:	d026      	beq.n	80030b6 <__ssputs_r+0x6a>
 8003068:	6965      	ldr	r5, [r4, #20]
 800306a:	6909      	ldr	r1, [r1, #16]
 800306c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003070:	eba3 0901 	sub.w	r9, r3, r1
 8003074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003078:	1c7b      	adds	r3, r7, #1
 800307a:	444b      	add	r3, r9
 800307c:	106d      	asrs	r5, r5, #1
 800307e:	429d      	cmp	r5, r3
 8003080:	bf38      	it	cc
 8003082:	461d      	movcc	r5, r3
 8003084:	0553      	lsls	r3, r2, #21
 8003086:	d527      	bpl.n	80030d8 <__ssputs_r+0x8c>
 8003088:	4629      	mov	r1, r5
 800308a:	f7ff ff53 	bl	8002f34 <_malloc_r>
 800308e:	4606      	mov	r6, r0
 8003090:	b360      	cbz	r0, 80030ec <__ssputs_r+0xa0>
 8003092:	464a      	mov	r2, r9
 8003094:	6921      	ldr	r1, [r4, #16]
 8003096:	f000 fafd 	bl	8003694 <memcpy>
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a4:	81a3      	strh	r3, [r4, #12]
 80030a6:	6126      	str	r6, [r4, #16]
 80030a8:	444e      	add	r6, r9
 80030aa:	6026      	str	r6, [r4, #0]
 80030ac:	463e      	mov	r6, r7
 80030ae:	6165      	str	r5, [r4, #20]
 80030b0:	eba5 0509 	sub.w	r5, r5, r9
 80030b4:	60a5      	str	r5, [r4, #8]
 80030b6:	42be      	cmp	r6, r7
 80030b8:	d900      	bls.n	80030bc <__ssputs_r+0x70>
 80030ba:	463e      	mov	r6, r7
 80030bc:	4632      	mov	r2, r6
 80030be:	4641      	mov	r1, r8
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	f000 faaf 	bl	8003624 <memmove>
 80030c6:	2000      	movs	r0, #0
 80030c8:	68a3      	ldr	r3, [r4, #8]
 80030ca:	1b9b      	subs	r3, r3, r6
 80030cc:	60a3      	str	r3, [r4, #8]
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	4433      	add	r3, r6
 80030d2:	6023      	str	r3, [r4, #0]
 80030d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d8:	462a      	mov	r2, r5
 80030da:	f000 fae9 	bl	80036b0 <_realloc_r>
 80030de:	4606      	mov	r6, r0
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d1e0      	bne.n	80030a6 <__ssputs_r+0x5a>
 80030e4:	4650      	mov	r0, sl
 80030e6:	6921      	ldr	r1, [r4, #16]
 80030e8:	f7ff febc 	bl	8002e64 <_free_r>
 80030ec:	230c      	movs	r3, #12
 80030ee:	f8ca 3000 	str.w	r3, [sl]
 80030f2:	89a3      	ldrh	r3, [r4, #12]
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030fc:	81a3      	strh	r3, [r4, #12]
 80030fe:	e7e9      	b.n	80030d4 <__ssputs_r+0x88>

08003100 <_svfiprintf_r>:
 8003100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003104:	4698      	mov	r8, r3
 8003106:	898b      	ldrh	r3, [r1, #12]
 8003108:	4607      	mov	r7, r0
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	460d      	mov	r5, r1
 800310e:	4614      	mov	r4, r2
 8003110:	b09d      	sub	sp, #116	; 0x74
 8003112:	d50e      	bpl.n	8003132 <_svfiprintf_r+0x32>
 8003114:	690b      	ldr	r3, [r1, #16]
 8003116:	b963      	cbnz	r3, 8003132 <_svfiprintf_r+0x32>
 8003118:	2140      	movs	r1, #64	; 0x40
 800311a:	f7ff ff0b 	bl	8002f34 <_malloc_r>
 800311e:	6028      	str	r0, [r5, #0]
 8003120:	6128      	str	r0, [r5, #16]
 8003122:	b920      	cbnz	r0, 800312e <_svfiprintf_r+0x2e>
 8003124:	230c      	movs	r3, #12
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	e0d0      	b.n	80032d0 <_svfiprintf_r+0x1d0>
 800312e:	2340      	movs	r3, #64	; 0x40
 8003130:	616b      	str	r3, [r5, #20]
 8003132:	2300      	movs	r3, #0
 8003134:	9309      	str	r3, [sp, #36]	; 0x24
 8003136:	2320      	movs	r3, #32
 8003138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800313c:	2330      	movs	r3, #48	; 0x30
 800313e:	f04f 0901 	mov.w	r9, #1
 8003142:	f8cd 800c 	str.w	r8, [sp, #12]
 8003146:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80032e8 <_svfiprintf_r+0x1e8>
 800314a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800314e:	4623      	mov	r3, r4
 8003150:	469a      	mov	sl, r3
 8003152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003156:	b10a      	cbz	r2, 800315c <_svfiprintf_r+0x5c>
 8003158:	2a25      	cmp	r2, #37	; 0x25
 800315a:	d1f9      	bne.n	8003150 <_svfiprintf_r+0x50>
 800315c:	ebba 0b04 	subs.w	fp, sl, r4
 8003160:	d00b      	beq.n	800317a <_svfiprintf_r+0x7a>
 8003162:	465b      	mov	r3, fp
 8003164:	4622      	mov	r2, r4
 8003166:	4629      	mov	r1, r5
 8003168:	4638      	mov	r0, r7
 800316a:	f7ff ff6f 	bl	800304c <__ssputs_r>
 800316e:	3001      	adds	r0, #1
 8003170:	f000 80a9 	beq.w	80032c6 <_svfiprintf_r+0x1c6>
 8003174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003176:	445a      	add	r2, fp
 8003178:	9209      	str	r2, [sp, #36]	; 0x24
 800317a:	f89a 3000 	ldrb.w	r3, [sl]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80a1 	beq.w	80032c6 <_svfiprintf_r+0x1c6>
 8003184:	2300      	movs	r3, #0
 8003186:	f04f 32ff 	mov.w	r2, #4294967295
 800318a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800318e:	f10a 0a01 	add.w	sl, sl, #1
 8003192:	9304      	str	r3, [sp, #16]
 8003194:	9307      	str	r3, [sp, #28]
 8003196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800319a:	931a      	str	r3, [sp, #104]	; 0x68
 800319c:	4654      	mov	r4, sl
 800319e:	2205      	movs	r2, #5
 80031a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a4:	4850      	ldr	r0, [pc, #320]	; (80032e8 <_svfiprintf_r+0x1e8>)
 80031a6:	f000 fa67 	bl	8003678 <memchr>
 80031aa:	9a04      	ldr	r2, [sp, #16]
 80031ac:	b9d8      	cbnz	r0, 80031e6 <_svfiprintf_r+0xe6>
 80031ae:	06d0      	lsls	r0, r2, #27
 80031b0:	bf44      	itt	mi
 80031b2:	2320      	movmi	r3, #32
 80031b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031b8:	0711      	lsls	r1, r2, #28
 80031ba:	bf44      	itt	mi
 80031bc:	232b      	movmi	r3, #43	; 0x2b
 80031be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031c2:	f89a 3000 	ldrb.w	r3, [sl]
 80031c6:	2b2a      	cmp	r3, #42	; 0x2a
 80031c8:	d015      	beq.n	80031f6 <_svfiprintf_r+0xf6>
 80031ca:	4654      	mov	r4, sl
 80031cc:	2000      	movs	r0, #0
 80031ce:	f04f 0c0a 	mov.w	ip, #10
 80031d2:	9a07      	ldr	r2, [sp, #28]
 80031d4:	4621      	mov	r1, r4
 80031d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031da:	3b30      	subs	r3, #48	; 0x30
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d94d      	bls.n	800327c <_svfiprintf_r+0x17c>
 80031e0:	b1b0      	cbz	r0, 8003210 <_svfiprintf_r+0x110>
 80031e2:	9207      	str	r2, [sp, #28]
 80031e4:	e014      	b.n	8003210 <_svfiprintf_r+0x110>
 80031e6:	eba0 0308 	sub.w	r3, r0, r8
 80031ea:	fa09 f303 	lsl.w	r3, r9, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	46a2      	mov	sl, r4
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	e7d2      	b.n	800319c <_svfiprintf_r+0x9c>
 80031f6:	9b03      	ldr	r3, [sp, #12]
 80031f8:	1d19      	adds	r1, r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	9103      	str	r1, [sp, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bfbb      	ittet	lt
 8003202:	425b      	neglt	r3, r3
 8003204:	f042 0202 	orrlt.w	r2, r2, #2
 8003208:	9307      	strge	r3, [sp, #28]
 800320a:	9307      	strlt	r3, [sp, #28]
 800320c:	bfb8      	it	lt
 800320e:	9204      	strlt	r2, [sp, #16]
 8003210:	7823      	ldrb	r3, [r4, #0]
 8003212:	2b2e      	cmp	r3, #46	; 0x2e
 8003214:	d10c      	bne.n	8003230 <_svfiprintf_r+0x130>
 8003216:	7863      	ldrb	r3, [r4, #1]
 8003218:	2b2a      	cmp	r3, #42	; 0x2a
 800321a:	d134      	bne.n	8003286 <_svfiprintf_r+0x186>
 800321c:	9b03      	ldr	r3, [sp, #12]
 800321e:	3402      	adds	r4, #2
 8003220:	1d1a      	adds	r2, r3, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	9203      	str	r2, [sp, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfb8      	it	lt
 800322a:	f04f 33ff 	movlt.w	r3, #4294967295
 800322e:	9305      	str	r3, [sp, #20]
 8003230:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80032ec <_svfiprintf_r+0x1ec>
 8003234:	2203      	movs	r2, #3
 8003236:	4650      	mov	r0, sl
 8003238:	7821      	ldrb	r1, [r4, #0]
 800323a:	f000 fa1d 	bl	8003678 <memchr>
 800323e:	b138      	cbz	r0, 8003250 <_svfiprintf_r+0x150>
 8003240:	2240      	movs	r2, #64	; 0x40
 8003242:	9b04      	ldr	r3, [sp, #16]
 8003244:	eba0 000a 	sub.w	r0, r0, sl
 8003248:	4082      	lsls	r2, r0
 800324a:	4313      	orrs	r3, r2
 800324c:	3401      	adds	r4, #1
 800324e:	9304      	str	r3, [sp, #16]
 8003250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003254:	2206      	movs	r2, #6
 8003256:	4826      	ldr	r0, [pc, #152]	; (80032f0 <_svfiprintf_r+0x1f0>)
 8003258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800325c:	f000 fa0c 	bl	8003678 <memchr>
 8003260:	2800      	cmp	r0, #0
 8003262:	d038      	beq.n	80032d6 <_svfiprintf_r+0x1d6>
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <_svfiprintf_r+0x1f4>)
 8003266:	bb1b      	cbnz	r3, 80032b0 <_svfiprintf_r+0x1b0>
 8003268:	9b03      	ldr	r3, [sp, #12]
 800326a:	3307      	adds	r3, #7
 800326c:	f023 0307 	bic.w	r3, r3, #7
 8003270:	3308      	adds	r3, #8
 8003272:	9303      	str	r3, [sp, #12]
 8003274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003276:	4433      	add	r3, r6
 8003278:	9309      	str	r3, [sp, #36]	; 0x24
 800327a:	e768      	b.n	800314e <_svfiprintf_r+0x4e>
 800327c:	460c      	mov	r4, r1
 800327e:	2001      	movs	r0, #1
 8003280:	fb0c 3202 	mla	r2, ip, r2, r3
 8003284:	e7a6      	b.n	80031d4 <_svfiprintf_r+0xd4>
 8003286:	2300      	movs	r3, #0
 8003288:	f04f 0c0a 	mov.w	ip, #10
 800328c:	4619      	mov	r1, r3
 800328e:	3401      	adds	r4, #1
 8003290:	9305      	str	r3, [sp, #20]
 8003292:	4620      	mov	r0, r4
 8003294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003298:	3a30      	subs	r2, #48	; 0x30
 800329a:	2a09      	cmp	r2, #9
 800329c:	d903      	bls.n	80032a6 <_svfiprintf_r+0x1a6>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0c6      	beq.n	8003230 <_svfiprintf_r+0x130>
 80032a2:	9105      	str	r1, [sp, #20]
 80032a4:	e7c4      	b.n	8003230 <_svfiprintf_r+0x130>
 80032a6:	4604      	mov	r4, r0
 80032a8:	2301      	movs	r3, #1
 80032aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80032ae:	e7f0      	b.n	8003292 <_svfiprintf_r+0x192>
 80032b0:	ab03      	add	r3, sp, #12
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	462a      	mov	r2, r5
 80032b6:	4638      	mov	r0, r7
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <_svfiprintf_r+0x1f8>)
 80032ba:	a904      	add	r1, sp, #16
 80032bc:	f3af 8000 	nop.w
 80032c0:	1c42      	adds	r2, r0, #1
 80032c2:	4606      	mov	r6, r0
 80032c4:	d1d6      	bne.n	8003274 <_svfiprintf_r+0x174>
 80032c6:	89ab      	ldrh	r3, [r5, #12]
 80032c8:	065b      	lsls	r3, r3, #25
 80032ca:	f53f af2d 	bmi.w	8003128 <_svfiprintf_r+0x28>
 80032ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032d0:	b01d      	add	sp, #116	; 0x74
 80032d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d6:	ab03      	add	r3, sp, #12
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	462a      	mov	r2, r5
 80032dc:	4638      	mov	r0, r7
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <_svfiprintf_r+0x1f8>)
 80032e0:	a904      	add	r1, sp, #16
 80032e2:	f000 f87d 	bl	80033e0 <_printf_i>
 80032e6:	e7eb      	b.n	80032c0 <_svfiprintf_r+0x1c0>
 80032e8:	08003766 	.word	0x08003766
 80032ec:	0800376c 	.word	0x0800376c
 80032f0:	08003770 	.word	0x08003770
 80032f4:	00000000 	.word	0x00000000
 80032f8:	0800304d 	.word	0x0800304d

080032fc <_printf_common>:
 80032fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003300:	4616      	mov	r6, r2
 8003302:	4699      	mov	r9, r3
 8003304:	688a      	ldr	r2, [r1, #8]
 8003306:	690b      	ldr	r3, [r1, #16]
 8003308:	4607      	mov	r7, r0
 800330a:	4293      	cmp	r3, r2
 800330c:	bfb8      	it	lt
 800330e:	4613      	movlt	r3, r2
 8003310:	6033      	str	r3, [r6, #0]
 8003312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003316:	460c      	mov	r4, r1
 8003318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800331c:	b10a      	cbz	r2, 8003322 <_printf_common+0x26>
 800331e:	3301      	adds	r3, #1
 8003320:	6033      	str	r3, [r6, #0]
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	0699      	lsls	r1, r3, #26
 8003326:	bf42      	ittt	mi
 8003328:	6833      	ldrmi	r3, [r6, #0]
 800332a:	3302      	addmi	r3, #2
 800332c:	6033      	strmi	r3, [r6, #0]
 800332e:	6825      	ldr	r5, [r4, #0]
 8003330:	f015 0506 	ands.w	r5, r5, #6
 8003334:	d106      	bne.n	8003344 <_printf_common+0x48>
 8003336:	f104 0a19 	add.w	sl, r4, #25
 800333a:	68e3      	ldr	r3, [r4, #12]
 800333c:	6832      	ldr	r2, [r6, #0]
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	42ab      	cmp	r3, r5
 8003342:	dc2b      	bgt.n	800339c <_printf_common+0xa0>
 8003344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003348:	1e13      	subs	r3, r2, #0
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	bf18      	it	ne
 800334e:	2301      	movne	r3, #1
 8003350:	0692      	lsls	r2, r2, #26
 8003352:	d430      	bmi.n	80033b6 <_printf_common+0xba>
 8003354:	4649      	mov	r1, r9
 8003356:	4638      	mov	r0, r7
 8003358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800335c:	47c0      	blx	r8
 800335e:	3001      	adds	r0, #1
 8003360:	d023      	beq.n	80033aa <_printf_common+0xae>
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	6922      	ldr	r2, [r4, #16]
 8003366:	f003 0306 	and.w	r3, r3, #6
 800336a:	2b04      	cmp	r3, #4
 800336c:	bf14      	ite	ne
 800336e:	2500      	movne	r5, #0
 8003370:	6833      	ldreq	r3, [r6, #0]
 8003372:	f04f 0600 	mov.w	r6, #0
 8003376:	bf08      	it	eq
 8003378:	68e5      	ldreq	r5, [r4, #12]
 800337a:	f104 041a 	add.w	r4, r4, #26
 800337e:	bf08      	it	eq
 8003380:	1aed      	subeq	r5, r5, r3
 8003382:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003386:	bf08      	it	eq
 8003388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800338c:	4293      	cmp	r3, r2
 800338e:	bfc4      	itt	gt
 8003390:	1a9b      	subgt	r3, r3, r2
 8003392:	18ed      	addgt	r5, r5, r3
 8003394:	42b5      	cmp	r5, r6
 8003396:	d11a      	bne.n	80033ce <_printf_common+0xd2>
 8003398:	2000      	movs	r0, #0
 800339a:	e008      	b.n	80033ae <_printf_common+0xb2>
 800339c:	2301      	movs	r3, #1
 800339e:	4652      	mov	r2, sl
 80033a0:	4649      	mov	r1, r9
 80033a2:	4638      	mov	r0, r7
 80033a4:	47c0      	blx	r8
 80033a6:	3001      	adds	r0, #1
 80033a8:	d103      	bne.n	80033b2 <_printf_common+0xb6>
 80033aa:	f04f 30ff 	mov.w	r0, #4294967295
 80033ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b2:	3501      	adds	r5, #1
 80033b4:	e7c1      	b.n	800333a <_printf_common+0x3e>
 80033b6:	2030      	movs	r0, #48	; 0x30
 80033b8:	18e1      	adds	r1, r4, r3
 80033ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033c4:	4422      	add	r2, r4
 80033c6:	3302      	adds	r3, #2
 80033c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033cc:	e7c2      	b.n	8003354 <_printf_common+0x58>
 80033ce:	2301      	movs	r3, #1
 80033d0:	4622      	mov	r2, r4
 80033d2:	4649      	mov	r1, r9
 80033d4:	4638      	mov	r0, r7
 80033d6:	47c0      	blx	r8
 80033d8:	3001      	adds	r0, #1
 80033da:	d0e6      	beq.n	80033aa <_printf_common+0xae>
 80033dc:	3601      	adds	r6, #1
 80033de:	e7d9      	b.n	8003394 <_printf_common+0x98>

080033e0 <_printf_i>:
 80033e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	7e0f      	ldrb	r7, [r1, #24]
 80033e6:	4691      	mov	r9, r2
 80033e8:	2f78      	cmp	r7, #120	; 0x78
 80033ea:	4680      	mov	r8, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	469a      	mov	sl, r3
 80033f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033f6:	d807      	bhi.n	8003408 <_printf_i+0x28>
 80033f8:	2f62      	cmp	r7, #98	; 0x62
 80033fa:	d80a      	bhi.n	8003412 <_printf_i+0x32>
 80033fc:	2f00      	cmp	r7, #0
 80033fe:	f000 80d5 	beq.w	80035ac <_printf_i+0x1cc>
 8003402:	2f58      	cmp	r7, #88	; 0x58
 8003404:	f000 80c1 	beq.w	800358a <_printf_i+0x1aa>
 8003408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800340c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003410:	e03a      	b.n	8003488 <_printf_i+0xa8>
 8003412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003416:	2b15      	cmp	r3, #21
 8003418:	d8f6      	bhi.n	8003408 <_printf_i+0x28>
 800341a:	a101      	add	r1, pc, #4	; (adr r1, 8003420 <_printf_i+0x40>)
 800341c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003420:	08003479 	.word	0x08003479
 8003424:	0800348d 	.word	0x0800348d
 8003428:	08003409 	.word	0x08003409
 800342c:	08003409 	.word	0x08003409
 8003430:	08003409 	.word	0x08003409
 8003434:	08003409 	.word	0x08003409
 8003438:	0800348d 	.word	0x0800348d
 800343c:	08003409 	.word	0x08003409
 8003440:	08003409 	.word	0x08003409
 8003444:	08003409 	.word	0x08003409
 8003448:	08003409 	.word	0x08003409
 800344c:	08003593 	.word	0x08003593
 8003450:	080034b9 	.word	0x080034b9
 8003454:	0800354d 	.word	0x0800354d
 8003458:	08003409 	.word	0x08003409
 800345c:	08003409 	.word	0x08003409
 8003460:	080035b5 	.word	0x080035b5
 8003464:	08003409 	.word	0x08003409
 8003468:	080034b9 	.word	0x080034b9
 800346c:	08003409 	.word	0x08003409
 8003470:	08003409 	.word	0x08003409
 8003474:	08003555 	.word	0x08003555
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	1d1a      	adds	r2, r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	602a      	str	r2, [r5, #0]
 8003480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003488:	2301      	movs	r3, #1
 800348a:	e0a0      	b.n	80035ce <_printf_i+0x1ee>
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	0607      	lsls	r7, r0, #24
 8003492:	f103 0104 	add.w	r1, r3, #4
 8003496:	6029      	str	r1, [r5, #0]
 8003498:	d501      	bpl.n	800349e <_printf_i+0xbe>
 800349a:	681e      	ldr	r6, [r3, #0]
 800349c:	e003      	b.n	80034a6 <_printf_i+0xc6>
 800349e:	0646      	lsls	r6, r0, #25
 80034a0:	d5fb      	bpl.n	800349a <_printf_i+0xba>
 80034a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80034a6:	2e00      	cmp	r6, #0
 80034a8:	da03      	bge.n	80034b2 <_printf_i+0xd2>
 80034aa:	232d      	movs	r3, #45	; 0x2d
 80034ac:	4276      	negs	r6, r6
 80034ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034b2:	230a      	movs	r3, #10
 80034b4:	4859      	ldr	r0, [pc, #356]	; (800361c <_printf_i+0x23c>)
 80034b6:	e012      	b.n	80034de <_printf_i+0xfe>
 80034b8:	682b      	ldr	r3, [r5, #0]
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	1d19      	adds	r1, r3, #4
 80034be:	6029      	str	r1, [r5, #0]
 80034c0:	0605      	lsls	r5, r0, #24
 80034c2:	d501      	bpl.n	80034c8 <_printf_i+0xe8>
 80034c4:	681e      	ldr	r6, [r3, #0]
 80034c6:	e002      	b.n	80034ce <_printf_i+0xee>
 80034c8:	0641      	lsls	r1, r0, #25
 80034ca:	d5fb      	bpl.n	80034c4 <_printf_i+0xe4>
 80034cc:	881e      	ldrh	r6, [r3, #0]
 80034ce:	2f6f      	cmp	r7, #111	; 0x6f
 80034d0:	bf0c      	ite	eq
 80034d2:	2308      	moveq	r3, #8
 80034d4:	230a      	movne	r3, #10
 80034d6:	4851      	ldr	r0, [pc, #324]	; (800361c <_printf_i+0x23c>)
 80034d8:	2100      	movs	r1, #0
 80034da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034de:	6865      	ldr	r5, [r4, #4]
 80034e0:	2d00      	cmp	r5, #0
 80034e2:	bfa8      	it	ge
 80034e4:	6821      	ldrge	r1, [r4, #0]
 80034e6:	60a5      	str	r5, [r4, #8]
 80034e8:	bfa4      	itt	ge
 80034ea:	f021 0104 	bicge.w	r1, r1, #4
 80034ee:	6021      	strge	r1, [r4, #0]
 80034f0:	b90e      	cbnz	r6, 80034f6 <_printf_i+0x116>
 80034f2:	2d00      	cmp	r5, #0
 80034f4:	d04b      	beq.n	800358e <_printf_i+0x1ae>
 80034f6:	4615      	mov	r5, r2
 80034f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80034fc:	fb03 6711 	mls	r7, r3, r1, r6
 8003500:	5dc7      	ldrb	r7, [r0, r7]
 8003502:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003506:	4637      	mov	r7, r6
 8003508:	42bb      	cmp	r3, r7
 800350a:	460e      	mov	r6, r1
 800350c:	d9f4      	bls.n	80034f8 <_printf_i+0x118>
 800350e:	2b08      	cmp	r3, #8
 8003510:	d10b      	bne.n	800352a <_printf_i+0x14a>
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	07de      	lsls	r6, r3, #31
 8003516:	d508      	bpl.n	800352a <_printf_i+0x14a>
 8003518:	6923      	ldr	r3, [r4, #16]
 800351a:	6861      	ldr	r1, [r4, #4]
 800351c:	4299      	cmp	r1, r3
 800351e:	bfde      	ittt	le
 8003520:	2330      	movle	r3, #48	; 0x30
 8003522:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003526:	f105 35ff 	addle.w	r5, r5, #4294967295
 800352a:	1b52      	subs	r2, r2, r5
 800352c:	6122      	str	r2, [r4, #16]
 800352e:	464b      	mov	r3, r9
 8003530:	4621      	mov	r1, r4
 8003532:	4640      	mov	r0, r8
 8003534:	f8cd a000 	str.w	sl, [sp]
 8003538:	aa03      	add	r2, sp, #12
 800353a:	f7ff fedf 	bl	80032fc <_printf_common>
 800353e:	3001      	adds	r0, #1
 8003540:	d14a      	bne.n	80035d8 <_printf_i+0x1f8>
 8003542:	f04f 30ff 	mov.w	r0, #4294967295
 8003546:	b004      	add	sp, #16
 8003548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	f043 0320 	orr.w	r3, r3, #32
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	2778      	movs	r7, #120	; 0x78
 8003556:	4832      	ldr	r0, [pc, #200]	; (8003620 <_printf_i+0x240>)
 8003558:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	6829      	ldr	r1, [r5, #0]
 8003560:	061f      	lsls	r7, r3, #24
 8003562:	f851 6b04 	ldr.w	r6, [r1], #4
 8003566:	d402      	bmi.n	800356e <_printf_i+0x18e>
 8003568:	065f      	lsls	r7, r3, #25
 800356a:	bf48      	it	mi
 800356c:	b2b6      	uxthmi	r6, r6
 800356e:	07df      	lsls	r7, r3, #31
 8003570:	bf48      	it	mi
 8003572:	f043 0320 	orrmi.w	r3, r3, #32
 8003576:	6029      	str	r1, [r5, #0]
 8003578:	bf48      	it	mi
 800357a:	6023      	strmi	r3, [r4, #0]
 800357c:	b91e      	cbnz	r6, 8003586 <_printf_i+0x1a6>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	f023 0320 	bic.w	r3, r3, #32
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	2310      	movs	r3, #16
 8003588:	e7a6      	b.n	80034d8 <_printf_i+0xf8>
 800358a:	4824      	ldr	r0, [pc, #144]	; (800361c <_printf_i+0x23c>)
 800358c:	e7e4      	b.n	8003558 <_printf_i+0x178>
 800358e:	4615      	mov	r5, r2
 8003590:	e7bd      	b.n	800350e <_printf_i+0x12e>
 8003592:	682b      	ldr	r3, [r5, #0]
 8003594:	6826      	ldr	r6, [r4, #0]
 8003596:	1d18      	adds	r0, r3, #4
 8003598:	6961      	ldr	r1, [r4, #20]
 800359a:	6028      	str	r0, [r5, #0]
 800359c:	0635      	lsls	r5, r6, #24
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	d501      	bpl.n	80035a6 <_printf_i+0x1c6>
 80035a2:	6019      	str	r1, [r3, #0]
 80035a4:	e002      	b.n	80035ac <_printf_i+0x1cc>
 80035a6:	0670      	lsls	r0, r6, #25
 80035a8:	d5fb      	bpl.n	80035a2 <_printf_i+0x1c2>
 80035aa:	8019      	strh	r1, [r3, #0]
 80035ac:	2300      	movs	r3, #0
 80035ae:	4615      	mov	r5, r2
 80035b0:	6123      	str	r3, [r4, #16]
 80035b2:	e7bc      	b.n	800352e <_printf_i+0x14e>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	2100      	movs	r1, #0
 80035b8:	1d1a      	adds	r2, r3, #4
 80035ba:	602a      	str	r2, [r5, #0]
 80035bc:	681d      	ldr	r5, [r3, #0]
 80035be:	6862      	ldr	r2, [r4, #4]
 80035c0:	4628      	mov	r0, r5
 80035c2:	f000 f859 	bl	8003678 <memchr>
 80035c6:	b108      	cbz	r0, 80035cc <_printf_i+0x1ec>
 80035c8:	1b40      	subs	r0, r0, r5
 80035ca:	6060      	str	r0, [r4, #4]
 80035cc:	6863      	ldr	r3, [r4, #4]
 80035ce:	6123      	str	r3, [r4, #16]
 80035d0:	2300      	movs	r3, #0
 80035d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d6:	e7aa      	b.n	800352e <_printf_i+0x14e>
 80035d8:	462a      	mov	r2, r5
 80035da:	4649      	mov	r1, r9
 80035dc:	4640      	mov	r0, r8
 80035de:	6923      	ldr	r3, [r4, #16]
 80035e0:	47d0      	blx	sl
 80035e2:	3001      	adds	r0, #1
 80035e4:	d0ad      	beq.n	8003542 <_printf_i+0x162>
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	079b      	lsls	r3, r3, #30
 80035ea:	d413      	bmi.n	8003614 <_printf_i+0x234>
 80035ec:	68e0      	ldr	r0, [r4, #12]
 80035ee:	9b03      	ldr	r3, [sp, #12]
 80035f0:	4298      	cmp	r0, r3
 80035f2:	bfb8      	it	lt
 80035f4:	4618      	movlt	r0, r3
 80035f6:	e7a6      	b.n	8003546 <_printf_i+0x166>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4632      	mov	r2, r6
 80035fc:	4649      	mov	r1, r9
 80035fe:	4640      	mov	r0, r8
 8003600:	47d0      	blx	sl
 8003602:	3001      	adds	r0, #1
 8003604:	d09d      	beq.n	8003542 <_printf_i+0x162>
 8003606:	3501      	adds	r5, #1
 8003608:	68e3      	ldr	r3, [r4, #12]
 800360a:	9903      	ldr	r1, [sp, #12]
 800360c:	1a5b      	subs	r3, r3, r1
 800360e:	42ab      	cmp	r3, r5
 8003610:	dcf2      	bgt.n	80035f8 <_printf_i+0x218>
 8003612:	e7eb      	b.n	80035ec <_printf_i+0x20c>
 8003614:	2500      	movs	r5, #0
 8003616:	f104 0619 	add.w	r6, r4, #25
 800361a:	e7f5      	b.n	8003608 <_printf_i+0x228>
 800361c:	08003777 	.word	0x08003777
 8003620:	08003788 	.word	0x08003788

08003624 <memmove>:
 8003624:	4288      	cmp	r0, r1
 8003626:	b510      	push	{r4, lr}
 8003628:	eb01 0402 	add.w	r4, r1, r2
 800362c:	d902      	bls.n	8003634 <memmove+0x10>
 800362e:	4284      	cmp	r4, r0
 8003630:	4623      	mov	r3, r4
 8003632:	d807      	bhi.n	8003644 <memmove+0x20>
 8003634:	1e43      	subs	r3, r0, #1
 8003636:	42a1      	cmp	r1, r4
 8003638:	d008      	beq.n	800364c <memmove+0x28>
 800363a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800363e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003642:	e7f8      	b.n	8003636 <memmove+0x12>
 8003644:	4601      	mov	r1, r0
 8003646:	4402      	add	r2, r0
 8003648:	428a      	cmp	r2, r1
 800364a:	d100      	bne.n	800364e <memmove+0x2a>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003656:	e7f7      	b.n	8003648 <memmove+0x24>

08003658 <_sbrk_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	2300      	movs	r3, #0
 800365c:	4d05      	ldr	r5, [pc, #20]	; (8003674 <_sbrk_r+0x1c>)
 800365e:	4604      	mov	r4, r0
 8003660:	4608      	mov	r0, r1
 8003662:	602b      	str	r3, [r5, #0]
 8003664:	f7fc ffce 	bl	8000604 <_sbrk>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	d102      	bne.n	8003672 <_sbrk_r+0x1a>
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	b103      	cbz	r3, 8003672 <_sbrk_r+0x1a>
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	20000270 	.word	0x20000270

08003678 <memchr>:
 8003678:	4603      	mov	r3, r0
 800367a:	b510      	push	{r4, lr}
 800367c:	b2c9      	uxtb	r1, r1
 800367e:	4402      	add	r2, r0
 8003680:	4293      	cmp	r3, r2
 8003682:	4618      	mov	r0, r3
 8003684:	d101      	bne.n	800368a <memchr+0x12>
 8003686:	2000      	movs	r0, #0
 8003688:	e003      	b.n	8003692 <memchr+0x1a>
 800368a:	7804      	ldrb	r4, [r0, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	428c      	cmp	r4, r1
 8003690:	d1f6      	bne.n	8003680 <memchr+0x8>
 8003692:	bd10      	pop	{r4, pc}

08003694 <memcpy>:
 8003694:	440a      	add	r2, r1
 8003696:	4291      	cmp	r1, r2
 8003698:	f100 33ff 	add.w	r3, r0, #4294967295
 800369c:	d100      	bne.n	80036a0 <memcpy+0xc>
 800369e:	4770      	bx	lr
 80036a0:	b510      	push	{r4, lr}
 80036a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036a6:	4291      	cmp	r1, r2
 80036a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ac:	d1f9      	bne.n	80036a2 <memcpy+0xe>
 80036ae:	bd10      	pop	{r4, pc}

080036b0 <_realloc_r>:
 80036b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b4:	4680      	mov	r8, r0
 80036b6:	4614      	mov	r4, r2
 80036b8:	460e      	mov	r6, r1
 80036ba:	b921      	cbnz	r1, 80036c6 <_realloc_r+0x16>
 80036bc:	4611      	mov	r1, r2
 80036be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036c2:	f7ff bc37 	b.w	8002f34 <_malloc_r>
 80036c6:	b92a      	cbnz	r2, 80036d4 <_realloc_r+0x24>
 80036c8:	f7ff fbcc 	bl	8002e64 <_free_r>
 80036cc:	4625      	mov	r5, r4
 80036ce:	4628      	mov	r0, r5
 80036d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d4:	f000 f81b 	bl	800370e <_malloc_usable_size_r>
 80036d8:	4284      	cmp	r4, r0
 80036da:	4607      	mov	r7, r0
 80036dc:	d802      	bhi.n	80036e4 <_realloc_r+0x34>
 80036de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036e2:	d812      	bhi.n	800370a <_realloc_r+0x5a>
 80036e4:	4621      	mov	r1, r4
 80036e6:	4640      	mov	r0, r8
 80036e8:	f7ff fc24 	bl	8002f34 <_malloc_r>
 80036ec:	4605      	mov	r5, r0
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d0ed      	beq.n	80036ce <_realloc_r+0x1e>
 80036f2:	42bc      	cmp	r4, r7
 80036f4:	4622      	mov	r2, r4
 80036f6:	4631      	mov	r1, r6
 80036f8:	bf28      	it	cs
 80036fa:	463a      	movcs	r2, r7
 80036fc:	f7ff ffca 	bl	8003694 <memcpy>
 8003700:	4631      	mov	r1, r6
 8003702:	4640      	mov	r0, r8
 8003704:	f7ff fbae 	bl	8002e64 <_free_r>
 8003708:	e7e1      	b.n	80036ce <_realloc_r+0x1e>
 800370a:	4635      	mov	r5, r6
 800370c:	e7df      	b.n	80036ce <_realloc_r+0x1e>

0800370e <_malloc_usable_size_r>:
 800370e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003712:	1f18      	subs	r0, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	bfbc      	itt	lt
 8003718:	580b      	ldrlt	r3, [r1, r0]
 800371a:	18c0      	addlt	r0, r0, r3
 800371c:	4770      	bx	lr
	...

08003720 <_init>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr

0800372c <_fini>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	bf00      	nop
 8003730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003732:	bc08      	pop	{r3}
 8003734:	469e      	mov	lr, r3
 8003736:	4770      	bx	lr
