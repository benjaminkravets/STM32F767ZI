
mpu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080045b8  080045b8  000055b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004610  08004610  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004610  08004610  00005610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004618  08004618  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004618  08004618  00005618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800461c  0800461c  0000561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004620  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000496c  20000010  08004630  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000497c  08004630  0000697c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d85a  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002435  00000000  00000000  00013898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00015cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ba  00000000  00000000  00016858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023bc  00000000  00000000  00017112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5ca  00000000  00000000  000194ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5242  00000000  00000000  00026a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bcda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e6c  00000000  00000000  0011bd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0011eb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	080045a0 	.word	0x080045a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	080045a0 	.word	0x080045a0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fa2e 	bl	80009d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f81b 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f875 	bl	8000668 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057e:	f001 f9d7 	bl	8001930 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <main+0x38>)
 8000584:	2100      	movs	r1, #0
 8000586:	4808      	ldr	r0, [pc, #32]	@ (80005a8 <main+0x3c>)
 8000588:	f001 fa3c 	bl	8001a04 <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <main+0x40>)
 8000590:	6013      	str	r3, [r2, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000592:	f3ef 8305 	mrs	r3, IPSR
 8000596:	603b      	str	r3, [r7, #0]
  return(result);
 8000598:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  uint32_t a =__get_IPSR();
 800059a:	607b      	str	r3, [r7, #4]

  /* Start scheduler */
  osKernelStart();
 800059c:	f001 f9fc 	bl	8001998 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <main+0x34>
 80005a4:	080045dc 	.word	0x080045dc
 80005a8:	08000895 	.word	0x08000895
 80005ac:	2000002c 	.word	0x2000002c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2234      	movs	r2, #52	@ 0x34
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 ffb4 	bl	800452c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <SystemClock_Config+0xb0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <SystemClock_Config+0xb0>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <SystemClock_Config+0xb0>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <SystemClock_Config+0xb4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <SystemClock_Config+0xb4>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <SystemClock_Config+0xb4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fce1 	bl	8000fe4 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000628:	f000 f941 	bl	80008ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f000 ff79 	bl	8001540 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000654:	f000 f92b 	bl	80008ae <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	@ 0x30
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b7f      	ldr	r3, [pc, #508]	@ (800087c <MX_GPIO_Init+0x214>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a7e      	ldr	r2, [pc, #504]	@ (800087c <MX_GPIO_Init+0x214>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b7c      	ldr	r3, [pc, #496]	@ (800087c <MX_GPIO_Init+0x214>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	61bb      	str	r3, [r7, #24]
 8000694:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	4b79      	ldr	r3, [pc, #484]	@ (800087c <MX_GPIO_Init+0x214>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a78      	ldr	r2, [pc, #480]	@ (800087c <MX_GPIO_Init+0x214>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b76      	ldr	r3, [pc, #472]	@ (800087c <MX_GPIO_Init+0x214>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b73      	ldr	r3, [pc, #460]	@ (800087c <MX_GPIO_Init+0x214>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a72      	ldr	r2, [pc, #456]	@ (800087c <MX_GPIO_Init+0x214>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b70      	ldr	r3, [pc, #448]	@ (800087c <MX_GPIO_Init+0x214>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b6d      	ldr	r3, [pc, #436]	@ (800087c <MX_GPIO_Init+0x214>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a6c      	ldr	r2, [pc, #432]	@ (800087c <MX_GPIO_Init+0x214>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b6a      	ldr	r3, [pc, #424]	@ (800087c <MX_GPIO_Init+0x214>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	4b67      	ldr	r3, [pc, #412]	@ (800087c <MX_GPIO_Init+0x214>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a66      	ldr	r2, [pc, #408]	@ (800087c <MX_GPIO_Init+0x214>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b64      	ldr	r3, [pc, #400]	@ (800087c <MX_GPIO_Init+0x214>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f6:	4b61      	ldr	r3, [pc, #388]	@ (800087c <MX_GPIO_Init+0x214>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a60      	ldr	r2, [pc, #384]	@ (800087c <MX_GPIO_Init+0x214>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b5e      	ldr	r3, [pc, #376]	@ (800087c <MX_GPIO_Init+0x214>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000714:	485a      	ldr	r0, [pc, #360]	@ (8000880 <MX_GPIO_Init+0x218>)
 8000716:	f000 fc4b 	bl	8000fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2140      	movs	r1, #64	@ 0x40
 800071e:	4859      	ldr	r0, [pc, #356]	@ (8000884 <MX_GPIO_Init+0x21c>)
 8000720:	f000 fc46 	bl	8000fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000724:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4853      	ldr	r0, [pc, #332]	@ (8000888 <MX_GPIO_Init+0x220>)
 800073c:	f000 fa8c 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000740:	2332      	movs	r3, #50	@ 0x32
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000750:	230b      	movs	r3, #11
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	484b      	ldr	r0, [pc, #300]	@ (8000888 <MX_GPIO_Init+0x220>)
 800075c:	f000 fa7c 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000760:	2386      	movs	r3, #134	@ 0x86
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000770:	230b      	movs	r3, #11
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	4844      	ldr	r0, [pc, #272]	@ (800088c <MX_GPIO_Init+0x224>)
 800077c:	f000 fa6c 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000780:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4839      	ldr	r0, [pc, #228]	@ (8000880 <MX_GPIO_Init+0x218>)
 800079a:	f000 fa5d 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4831      	ldr	r0, [pc, #196]	@ (8000880 <MX_GPIO_Init+0x218>)
 80007bc:	f000 fa4c 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007d2:	2307      	movs	r3, #7
 80007d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	482c      	ldr	r0, [pc, #176]	@ (8000890 <MX_GPIO_Init+0x228>)
 80007de:	f000 fa3b 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007e2:	2340      	movs	r3, #64	@ 0x40
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4822      	ldr	r0, [pc, #136]	@ (8000884 <MX_GPIO_Init+0x21c>)
 80007fa:	f000 fa2d 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	481c      	ldr	r0, [pc, #112]	@ (8000884 <MX_GPIO_Init+0x21c>)
 8000812:	f000 fa21 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000816:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000828:	230a      	movs	r3, #10
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4816      	ldr	r0, [pc, #88]	@ (800088c <MX_GPIO_Init+0x224>)
 8000834:	f000 fa10 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000838:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	480f      	ldr	r0, [pc, #60]	@ (800088c <MX_GPIO_Init+0x224>)
 800084e:	f000 fa03 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000852:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000864:	230b      	movs	r3, #11
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_GPIO_Init+0x21c>)
 8000870:	f000 f9f2 	bl	8000c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	@ 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020400 	.word	0x40020400
 8000884:	40021800 	.word	0x40021800
 8000888:	40020800 	.word	0x40020800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020c00 	.word	0x40020c00

08000894 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800089c:	f3ef 8305 	mrs	r3, IPSR
 80008a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80008a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint32_t b =__get_IPSR();
 80008a4:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    osDelay(1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f001 f952 	bl	8001b50 <osDelay>
 80008ac:	e7fb      	b.n	80008a6 <StartDefaultTask+0x12>

080008ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008b2:	b672      	cpsid	i
}
 80008b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b6:	bf00      	nop
 80008b8:	e7fd      	b.n	80008b6 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_MspInit+0x4c>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	210f      	movs	r1, #15
 80008f6:	f06f 0001 	mvn.w	r0, #1
 80008fa:	f000 f984 	bl	8000c06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <NMI_Handler+0x4>

08000914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <MemManage_Handler+0x4>

08000924 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <UsageFault_Handler+0x4>

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000946:	f000 f881 	bl	8000a4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800094a:	f002 fd7b 	bl	8003444 <xTaskGetSchedulerState>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d001      	beq.n	8000958 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000954:	f003 fb68 	bl	8004028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	@ (80009cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009ae:	f003 fdc5 	bl	800453c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b2:	f7ff fddb 	bl	800056c <main>
  bx  lr    
 80009b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009c4:	08004620 	.word	0x08004620
  ldr r2, =_sbss
 80009c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009cc:	2000497c 	.word	0x2000497c

080009d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC_IRQHandler>

080009d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 f90a 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009dc:	200f      	movs	r0, #15
 80009de:	f000 f805 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e2:	f7ff ff6b 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_InitTick+0x54>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_InitTick+0x58>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f917 	bl	8000c3e <HAL_SYSTICK_Config>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00e      	b.n	8000a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b0f      	cmp	r3, #15
 8000a1e:	d80a      	bhi.n	8000a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 f8ed 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <HAL_InitTick+0x5c>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e000      	b.n	8000a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000004 	.word	0x20000004

08000a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_IncTick+0x20>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_IncTick+0x24>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000030 	.word	0x20000030

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000030 	.word	0x20000030

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	05fa0000 	.word	0x05fa0000

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	@ (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	@ (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	@ 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	@ 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff8e 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff47 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff5c 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff8e 	bl	8000b44 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffb0 	bl	8000bac <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	e175      	b.n	8000f64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f040 8164 	bne.w	8000f5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d005      	beq.n	8000cae <HAL_GPIO_Init+0x56>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d130      	bne.n	8000d10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	091b      	lsrs	r3, r3, #4
 8000cfa:	f003 0201 	and.w	r2, r3, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d017      	beq.n	8000d4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d123      	bne.n	8000da0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	08da      	lsrs	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3208      	adds	r2, #8
 8000d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	220f      	movs	r2, #15
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	691a      	ldr	r2, [r3, #16]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2203      	movs	r2, #3
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0203 	and.w	r2, r3, #3
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 80be 	beq.w	8000f5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b66      	ldr	r3, [pc, #408]	@ (8000f7c <HAL_GPIO_Init+0x324>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a65      	ldr	r2, [pc, #404]	@ (8000f7c <HAL_GPIO_Init+0x324>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b63      	ldr	r3, [pc, #396]	@ (8000f7c <HAL_GPIO_Init+0x324>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dfa:	4a61      	ldr	r2, [pc, #388]	@ (8000f80 <HAL_GPIO_Init+0x328>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a58      	ldr	r2, [pc, #352]	@ (8000f84 <HAL_GPIO_Init+0x32c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d037      	beq.n	8000e96 <HAL_GPIO_Init+0x23e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a57      	ldr	r2, [pc, #348]	@ (8000f88 <HAL_GPIO_Init+0x330>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d031      	beq.n	8000e92 <HAL_GPIO_Init+0x23a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a56      	ldr	r2, [pc, #344]	@ (8000f8c <HAL_GPIO_Init+0x334>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d02b      	beq.n	8000e8e <HAL_GPIO_Init+0x236>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a55      	ldr	r2, [pc, #340]	@ (8000f90 <HAL_GPIO_Init+0x338>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x232>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a54      	ldr	r2, [pc, #336]	@ (8000f94 <HAL_GPIO_Init+0x33c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x22e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a53      	ldr	r2, [pc, #332]	@ (8000f98 <HAL_GPIO_Init+0x340>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x22a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a52      	ldr	r2, [pc, #328]	@ (8000f9c <HAL_GPIO_Init+0x344>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x226>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a51      	ldr	r2, [pc, #324]	@ (8000fa0 <HAL_GPIO_Init+0x348>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x222>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a50      	ldr	r2, [pc, #320]	@ (8000fa4 <HAL_GPIO_Init+0x34c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x21e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa8 <HAL_GPIO_Init+0x350>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x21a>
 8000e6e:	2309      	movs	r3, #9
 8000e70:	e012      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e72:	230a      	movs	r3, #10
 8000e74:	e010      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e76:	2308      	movs	r3, #8
 8000e78:	e00e      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e00c      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e00a      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e82:	2305      	movs	r3, #5
 8000e84:	e008      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e004      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e002      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <HAL_GPIO_Init+0x240>
 8000e96:	2300      	movs	r3, #0
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	f002 0203 	and.w	r2, r2, #3
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	4093      	lsls	r3, r2
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ea8:	4935      	ldr	r1, [pc, #212]	@ (8000f80 <HAL_GPIO_Init+0x328>)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fac <HAL_GPIO_Init+0x354>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eda:	4a34      	ldr	r2, [pc, #208]	@ (8000fac <HAL_GPIO_Init+0x354>)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee0:	4b32      	ldr	r3, [pc, #200]	@ (8000fac <HAL_GPIO_Init+0x354>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f04:	4a29      	ldr	r2, [pc, #164]	@ (8000fac <HAL_GPIO_Init+0x354>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f0a:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <HAL_GPIO_Init+0x354>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fac <HAL_GPIO_Init+0x354>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <HAL_GPIO_Init+0x354>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f58:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <HAL_GPIO_Init+0x354>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2b0f      	cmp	r3, #15
 8000f68:	f67f ae86 	bls.w	8000c78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40013800 	.word	0x40013800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	40021c00 	.word	0x40021c00
 8000fa4:	40022000 	.word	0x40022000
 8000fa8:	40022400 	.word	0x40022400
 8000fac:	40013c00 	.word	0x40013c00

08000fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000fcc:	e003      	b.n	8000fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e29b      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8087 	beq.w	8001116 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001008:	4b96      	ldr	r3, [pc, #600]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	2b04      	cmp	r3, #4
 8001012:	d00c      	beq.n	800102e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001014:	4b93      	ldr	r3, [pc, #588]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b08      	cmp	r3, #8
 800101e:	d112      	bne.n	8001046 <HAL_RCC_OscConfig+0x62>
 8001020:	4b90      	ldr	r3, [pc, #576]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800102c:	d10b      	bne.n	8001046 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102e:	4b8d      	ldr	r3, [pc, #564]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d06c      	beq.n	8001114 <HAL_RCC_OscConfig+0x130>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d168      	bne.n	8001114 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e275      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800104e:	d106      	bne.n	800105e <HAL_RCC_OscConfig+0x7a>
 8001050:	4b84      	ldr	r3, [pc, #528]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a83      	ldr	r2, [pc, #524]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e02e      	b.n	80010bc <HAL_RCC_OscConfig+0xd8>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x9c>
 8001066:	4b7f      	ldr	r3, [pc, #508]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a7e      	ldr	r2, [pc, #504]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 800106c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b7c      	ldr	r3, [pc, #496]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a7b      	ldr	r2, [pc, #492]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001078:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e01d      	b.n	80010bc <HAL_RCC_OscConfig+0xd8>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0xc0>
 800108a:	4b76      	ldr	r3, [pc, #472]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a75      	ldr	r2, [pc, #468]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b73      	ldr	r3, [pc, #460]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a72      	ldr	r2, [pc, #456]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e00b      	b.n	80010bc <HAL_RCC_OscConfig+0xd8>
 80010a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80010aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80010b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d013      	beq.n	80010ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c4:	f7ff fcd6 	bl	8000a74 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fcd2 	bl	8000a74 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	@ 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e229      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010de:	4b61      	ldr	r3, [pc, #388]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0xe8>
 80010ea:	e014      	b.n	8001116 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fcc2 	bl	8000a74 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fcbe 	bl	8000a74 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	@ 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e215      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001106:	4b57      	ldr	r3, [pc, #348]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f0      	bne.n	80010f4 <HAL_RCC_OscConfig+0x110>
 8001112:	e000      	b.n	8001116 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d069      	beq.n	80011f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001122:	4b50      	ldr	r3, [pc, #320]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00b      	beq.n	8001146 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800112e:	4b4d      	ldr	r3, [pc, #308]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b08      	cmp	r3, #8
 8001138:	d11c      	bne.n	8001174 <HAL_RCC_OscConfig+0x190>
 800113a:	4b4a      	ldr	r3, [pc, #296]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d116      	bne.n	8001174 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	4b47      	ldr	r3, [pc, #284]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <HAL_RCC_OscConfig+0x17a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d001      	beq.n	800115e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e1e9      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b41      	ldr	r3, [pc, #260]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	493d      	ldr	r1, [pc, #244]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	e040      	b.n	80011f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800117c:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a38      	ldr	r2, [pc, #224]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001188:	f7ff fc74 	bl	8000a74 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001190:	f7ff fc70 	bl	8000a74 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e1c7      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a2:	4b30      	ldr	r3, [pc, #192]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4929      	ldr	r1, [pc, #164]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
 80011c2:	e018      	b.n	80011f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a26      	ldr	r2, [pc, #152]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc50 	bl	8000a74 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc4c 	bl	8000a74 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1a3      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d038      	beq.n	8001274 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d019      	beq.n	800123e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 800120c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800120e:	4a15      	ldr	r2, [pc, #84]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001216:	f7ff fc2d 	bl	8000a74 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff fc29 	bl	8000a74 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e180      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x23a>
 800123c:	e01a      	b.n	8001274 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001242:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <HAL_RCC_OscConfig+0x280>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff fc13 	bl	8000a74 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001252:	f7ff fc0f 	bl	8000a74 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d903      	bls.n	8001268 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e166      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
 8001264:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001268:	4b92      	ldr	r3, [pc, #584]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 800126a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ee      	bne.n	8001252 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 80a4 	beq.w	80013ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001282:	4b8c      	ldr	r3, [pc, #560]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10d      	bne.n	80012aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b89      	ldr	r3, [pc, #548]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	4a88      	ldr	r2, [pc, #544]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	@ 0x40
 800129a:	4b86      	ldr	r3, [pc, #536]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012a6:	2301      	movs	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012aa:	4b83      	ldr	r3, [pc, #524]	@ (80014b8 <HAL_RCC_OscConfig+0x4d4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d118      	bne.n	80012e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80012b6:	4b80      	ldr	r3, [pc, #512]	@ (80014b8 <HAL_RCC_OscConfig+0x4d4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a7f      	ldr	r2, [pc, #508]	@ (80014b8 <HAL_RCC_OscConfig+0x4d4>)
 80012bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fbd7 	bl	8000a74 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ca:	f7ff fbd3 	bl	8000a74 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b64      	cmp	r3, #100	@ 0x64
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e12a      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012dc:	4b76      	ldr	r3, [pc, #472]	@ (80014b8 <HAL_RCC_OscConfig+0x4d4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d106      	bne.n	80012fe <HAL_RCC_OscConfig+0x31a>
 80012f0:	4b70      	ldr	r3, [pc, #448]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f4:	4a6f      	ldr	r2, [pc, #444]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80012fc:	e02d      	b.n	800135a <HAL_RCC_OscConfig+0x376>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x33c>
 8001306:	4b6b      	ldr	r3, [pc, #428]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800130a:	4a6a      	ldr	r2, [pc, #424]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 800130c:	f023 0301 	bic.w	r3, r3, #1
 8001310:	6713      	str	r3, [r2, #112]	@ 0x70
 8001312:	4b68      	ldr	r3, [pc, #416]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001316:	4a67      	ldr	r2, [pc, #412]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001318:	f023 0304 	bic.w	r3, r3, #4
 800131c:	6713      	str	r3, [r2, #112]	@ 0x70
 800131e:	e01c      	b.n	800135a <HAL_RCC_OscConfig+0x376>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b05      	cmp	r3, #5
 8001326:	d10c      	bne.n	8001342 <HAL_RCC_OscConfig+0x35e>
 8001328:	4b62      	ldr	r3, [pc, #392]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 800132a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800132c:	4a61      	ldr	r2, [pc, #388]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6713      	str	r3, [r2, #112]	@ 0x70
 8001334:	4b5f      	ldr	r3, [pc, #380]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001338:	4a5e      	ldr	r2, [pc, #376]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001340:	e00b      	b.n	800135a <HAL_RCC_OscConfig+0x376>
 8001342:	4b5c      	ldr	r3, [pc, #368]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001346:	4a5b      	ldr	r2, [pc, #364]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6713      	str	r3, [r2, #112]	@ 0x70
 800134e:	4b59      	ldr	r3, [pc, #356]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001352:	4a58      	ldr	r2, [pc, #352]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d015      	beq.n	800138e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001362:	f7ff fb87 	bl	8000a74 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001368:	e00a      	b.n	8001380 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136a:	f7ff fb83 	bl	8000a74 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001378:	4293      	cmp	r3, r2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e0d8      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	4b4c      	ldr	r3, [pc, #304]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0ee      	beq.n	800136a <HAL_RCC_OscConfig+0x386>
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138e:	f7ff fb71 	bl	8000a74 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fb6d 	bl	8000a74 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0c2      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ac:	4b41      	ldr	r3, [pc, #260]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1ee      	bne.n	8001396 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d105      	bne.n	80013ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013be:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a3c      	ldr	r2, [pc, #240]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 80013c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80ae 	beq.w	8001530 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d06d      	beq.n	80014bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d14b      	bne.n	8001480 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e8:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a31      	ldr	r2, [pc, #196]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 80013ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fb3e 	bl	8000a74 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff fb3a 	bl	8000a74 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e091      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140e:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69da      	ldr	r2, [r3, #28]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	019b      	lsls	r3, r3, #6
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001430:	085b      	lsrs	r3, r3, #1
 8001432:	3b01      	subs	r3, #1
 8001434:	041b      	lsls	r3, r3, #16
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143c:	061b      	lsls	r3, r3, #24
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001444:	071b      	lsls	r3, r3, #28
 8001446:	491b      	ldr	r1, [pc, #108]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a18      	ldr	r2, [pc, #96]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fb0c 	bl	8000a74 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff fb08 	bl	8000a74 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e05f      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x47c>
 800147e:	e057      	b.n	8001530 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0b      	ldr	r2, [pc, #44]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 8001486:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800148a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff faf2 	bl	8000a74 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff faee 	bl	8000a74 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e045      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a6:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_RCC_OscConfig+0x4d0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x4b0>
 80014b2:	e03d      	b.n	8001530 <HAL_RCC_OscConfig+0x54c>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	@ (800153c <HAL_RCC_OscConfig+0x558>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d030      	beq.n	800152c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d129      	bne.n	800152c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d122      	bne.n	800152c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014ec:	4013      	ands	r3, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d119      	bne.n	800152c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001502:	085b      	lsrs	r3, r3, #1
 8001504:	3b01      	subs	r3, #1
 8001506:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001508:	429a      	cmp	r2, r3
 800150a:	d10f      	bne.n	800152c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001516:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d107      	bne.n	800152c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0d0      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b6a      	ldr	r3, [pc, #424]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d910      	bls.n	8001588 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b67      	ldr	r3, [pc, #412]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 020f 	bic.w	r2, r3, #15
 800156e:	4965      	ldr	r1, [pc, #404]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b63      	ldr	r3, [pc, #396]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0b8      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a0:	4b59      	ldr	r3, [pc, #356]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a58      	ldr	r2, [pc, #352]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80015a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b8:	4b53      	ldr	r3, [pc, #332]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a52      	ldr	r2, [pc, #328]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80015be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	494d      	ldr	r1, [pc, #308]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d040      	beq.n	8001664 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b47      	ldr	r3, [pc, #284]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d115      	bne.n	8001622 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e07f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	4b41      	ldr	r3, [pc, #260]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e073      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06b      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b39      	ldr	r3, [pc, #228]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4936      	ldr	r1, [pc, #216]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001634:	f7ff fa1e 	bl	8000a74 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	e00a      	b.n	8001652 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7ff fa1a 	bl	8000a74 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e053      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 020c 	and.w	r2, r3, #12
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1eb      	bne.n	800163c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d210      	bcs.n	8001694 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 020f 	bic.w	r2, r3, #15
 800167a:	4922      	ldr	r1, [pc, #136]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e032      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4916      	ldr	r1, [pc, #88]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	490e      	ldr	r1, [pc, #56]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016d2:	f000 f821 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_RCC_ClockConfig+0x1c8>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	490a      	ldr	r1, [pc, #40]	@ (800170c <HAL_RCC_ClockConfig+0x1cc>)
 80016e4:	5ccb      	ldrb	r3, [r1, r3]
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <HAL_RCC_ClockConfig+0x1d0>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x1d4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f97a 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00
 8001708:	40023800 	.word	0x40023800
 800170c:	08004600 	.word	0x08004600
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b094      	sub	sp, #80	@ 0x50
 800171e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	647b      	str	r3, [r7, #68]	@ 0x44
 8001724:	2300      	movs	r3, #0
 8001726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001728:	2300      	movs	r3, #0
 800172a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001730:	4b79      	ldr	r3, [pc, #484]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d00d      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x40>
 800173c:	2b08      	cmp	r3, #8
 800173e:	f200 80e1 	bhi.w	8001904 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x34>
 8001746:	2b04      	cmp	r3, #4
 8001748:	d003      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x3a>
 800174a:	e0db      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b73      	ldr	r3, [pc, #460]	@ (800191c <HAL_RCC_GetSysClockFreq+0x204>)
 800174e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001750:	e0db      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001752:	4b72      	ldr	r3, [pc, #456]	@ (800191c <HAL_RCC_GetSysClockFreq+0x204>)
 8001754:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001756:	e0d8      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001758:	4b6f      	ldr	r3, [pc, #444]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001760:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001762:	4b6d      	ldr	r3, [pc, #436]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d063      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176e:	4b6a      	ldr	r3, [pc, #424]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	099b      	lsrs	r3, r3, #6
 8001774:	2200      	movs	r2, #0
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001778:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800177a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800177c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001780:	633b      	str	r3, [r7, #48]	@ 0x30
 8001782:	2300      	movs	r3, #0
 8001784:	637b      	str	r3, [r7, #52]	@ 0x34
 8001786:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800178a:	4622      	mov	r2, r4
 800178c:	462b      	mov	r3, r5
 800178e:	f04f 0000 	mov.w	r0, #0
 8001792:	f04f 0100 	mov.w	r1, #0
 8001796:	0159      	lsls	r1, r3, #5
 8001798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800179c:	0150      	lsls	r0, r2, #5
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4621      	mov	r1, r4
 80017a4:	1a51      	subs	r1, r2, r1
 80017a6:	6139      	str	r1, [r7, #16]
 80017a8:	4629      	mov	r1, r5
 80017aa:	eb63 0301 	sbc.w	r3, r3, r1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017bc:	4659      	mov	r1, fp
 80017be:	018b      	lsls	r3, r1, #6
 80017c0:	4651      	mov	r1, sl
 80017c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017c6:	4651      	mov	r1, sl
 80017c8:	018a      	lsls	r2, r1, #6
 80017ca:	4651      	mov	r1, sl
 80017cc:	ebb2 0801 	subs.w	r8, r2, r1
 80017d0:	4659      	mov	r1, fp
 80017d2:	eb63 0901 	sbc.w	r9, r3, r1
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ea:	4690      	mov	r8, r2
 80017ec:	4699      	mov	r9, r3
 80017ee:	4623      	mov	r3, r4
 80017f0:	eb18 0303 	adds.w	r3, r8, r3
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	462b      	mov	r3, r5
 80017f8:	eb49 0303 	adc.w	r3, r9, r3
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800180a:	4629      	mov	r1, r5
 800180c:	028b      	lsls	r3, r1, #10
 800180e:	4621      	mov	r1, r4
 8001810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001814:	4621      	mov	r1, r4
 8001816:	028a      	lsls	r2, r1, #10
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800181e:	2200      	movs	r2, #0
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001828:	f7fe fd0a 	bl	8000240 <__aeabi_uldivmod>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4613      	mov	r3, r2
 8001832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001834:	e058      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001836:	4b38      	ldr	r3, [pc, #224]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	099b      	lsrs	r3, r3, #6
 800183c:	2200      	movs	r2, #0
 800183e:	4618      	mov	r0, r3
 8001840:	4611      	mov	r1, r2
 8001842:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
 800184c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001850:	4642      	mov	r2, r8
 8001852:	464b      	mov	r3, r9
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	0159      	lsls	r1, r3, #5
 800185e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001862:	0150      	lsls	r0, r2, #5
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4641      	mov	r1, r8
 800186a:	ebb2 0a01 	subs.w	sl, r2, r1
 800186e:	4649      	mov	r1, r9
 8001870:	eb63 0b01 	sbc.w	fp, r3, r1
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001888:	ebb2 040a 	subs.w	r4, r2, sl
 800188c:	eb63 050b 	sbc.w	r5, r3, fp
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	00eb      	lsls	r3, r5, #3
 800189a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800189e:	00e2      	lsls	r2, r4, #3
 80018a0:	4614      	mov	r4, r2
 80018a2:	461d      	mov	r5, r3
 80018a4:	4643      	mov	r3, r8
 80018a6:	18e3      	adds	r3, r4, r3
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	464b      	mov	r3, r9
 80018ac:	eb45 0303 	adc.w	r3, r5, r3
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018be:	4629      	mov	r1, r5
 80018c0:	028b      	lsls	r3, r1, #10
 80018c2:	4621      	mov	r1, r4
 80018c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c8:	4621      	mov	r1, r4
 80018ca:	028a      	lsls	r2, r1, #10
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018d2:	2200      	movs	r2, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	61fa      	str	r2, [r7, #28]
 80018d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018dc:	f7fe fcb0 	bl	8000240 <__aeabi_uldivmod>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4613      	mov	r3, r2
 80018e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	3301      	adds	r3, #1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80018f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001902:	e002      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_RCC_GetSysClockFreq+0x204>)
 8001906:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800190c:	4618      	mov	r0, r3
 800190e:	3750      	adds	r7, #80	@ 0x50
 8001910:	46bd      	mov	sp, r7
 8001912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	00f42400 	.word	0x00f42400

08001920 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001936:	f3ef 8305 	mrs	r3, IPSR
 800193a:	60bb      	str	r3, [r7, #8]
  return(result);
 800193c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10f      	bne.n	8001962 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001942:	f3ef 8310 	mrs	r3, PRIMASK
 8001946:	607b      	str	r3, [r7, #4]
  return(result);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800194e:	f3ef 8311 	mrs	r3, BASEPRI
 8001952:	603b      	str	r3, [r7, #0]
  return(result);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <osKernelInitialize+0x3a>
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <osKernelInitialize+0x64>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d103      	bne.n	800196a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001962:	f06f 0305 	mvn.w	r3, #5
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e00c      	b.n	8001984 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800196a:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <osKernelInitialize+0x64>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001972:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <osKernelInitialize+0x64>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e002      	b.n	8001984 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001984:	68fb      	ldr	r3, [r7, #12]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000034 	.word	0x20000034

08001998 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800199e:	f3ef 8305 	mrs	r3, IPSR
 80019a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80019a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10f      	bne.n	80019ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019aa:	f3ef 8310 	mrs	r3, PRIMASK
 80019ae:	607b      	str	r3, [r7, #4]
  return(result);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d105      	bne.n	80019c2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019b6:	f3ef 8311 	mrs	r3, BASEPRI
 80019ba:	603b      	str	r3, [r7, #0]
  return(result);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d007      	beq.n	80019d2 <osKernelStart+0x3a>
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <osKernelStart+0x68>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d103      	bne.n	80019d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80019ca:	f06f 0305 	mvn.w	r3, #5
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e010      	b.n	80019f4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <osKernelStart+0x68>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d109      	bne.n	80019ee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80019da:	f7ff ffa1 	bl	8001920 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80019de:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <osKernelStart+0x68>)
 80019e0:	2202      	movs	r2, #2
 80019e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80019e4:	f001 f8ca 	bl	8002b7c <vTaskStartScheduler>
      stat = osOK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e002      	b.n	80019f4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000034 	.word	0x20000034

08001a04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b090      	sub	sp, #64	@ 0x40
 8001a08:	af04      	add	r7, sp, #16
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a14:	f3ef 8305 	mrs	r3, IPSR
 8001a18:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a1a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 808f 	bne.w	8001b40 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a22:	f3ef 8310 	mrs	r3, PRIMASK
 8001a26:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d105      	bne.n	8001a3a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8001a32:	617b      	str	r3, [r7, #20]
  return(result);
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <osThreadNew+0x3e>
 8001a3a:	4b44      	ldr	r3, [pc, #272]	@ (8001b4c <osThreadNew+0x148>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d07e      	beq.n	8001b40 <osThreadNew+0x13c>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d07b      	beq.n	8001b40 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001a4c:	2318      	movs	r3, #24
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d045      	beq.n	8001aec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <osThreadNew+0x6a>
        name = attr->name;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <osThreadNew+0x90>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	2b38      	cmp	r3, #56	@ 0x38
 8001a86:	d805      	bhi.n	8001a94 <osThreadNew+0x90>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <osThreadNew+0x94>
        return (NULL);
 8001a94:	2300      	movs	r3, #0
 8001a96:	e054      	b.n	8001b42 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00e      	beq.n	8001ace <osThreadNew+0xca>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b5b      	cmp	r3, #91	@ 0x5b
 8001ab6:	d90a      	bls.n	8001ace <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <osThreadNew+0xca>
        mem = 1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	623b      	str	r3, [r7, #32]
 8001acc:	e010      	b.n	8001af0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <osThreadNew+0xec>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d108      	bne.n	8001af0 <osThreadNew+0xec>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <osThreadNew+0xec>
          mem = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
 8001aea:	e001      	b.n	8001af0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d110      	bne.n	8001b18 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001afe:	9202      	str	r2, [sp, #8]
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fe4f 	bl	80027b0 <xTaskCreateStatic>
 8001b12:	4603      	mov	r3, r0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	e013      	b.n	8001b40 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d110      	bne.n	8001b40 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	f107 0310 	add.w	r3, r7, #16
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fea3 	bl	800287c <xTaskCreate>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d001      	beq.n	8001b40 <osThreadNew+0x13c>
          hTask = NULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b40:	693b      	ldr	r3, [r7, #16]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3730      	adds	r7, #48	@ 0x30
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000034 	.word	0x20000034

08001b50 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b58:	f3ef 8305 	mrs	r3, IPSR
 8001b5c:	613b      	str	r3, [r7, #16]
  return(result);
 8001b5e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10f      	bne.n	8001b84 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b64:	f3ef 8310 	mrs	r3, PRIMASK
 8001b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b70:	f3ef 8311 	mrs	r3, BASEPRI
 8001b74:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <osDelay+0x3c>
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <osDelay+0x58>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d103      	bne.n	8001b8c <osDelay+0x3c>
    stat = osErrorISR;
 8001b84:	f06f 0305 	mvn.w	r3, #5
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e007      	b.n	8001b9c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 ffb8 	bl	8002b0c <vTaskDelay>
    }
  }

  return (stat);
 8001b9c:	697b      	ldr	r3, [r7, #20]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000034 	.word	0x20000034

08001bac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001bbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4a06      	ldr	r2, [pc, #24]	@ (8001bdc <vApplicationGetIdleTaskMemory+0x30>)
 8001bc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2280      	movs	r2, #128	@ 0x80
 8001bc8:	601a      	str	r2, [r3, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000038 	.word	0x20000038
 8001bdc:	20000094 	.word	0x20000094

08001be0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <vApplicationGetTimerTaskMemory+0x2c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4a06      	ldr	r2, [pc, #24]	@ (8001c10 <vApplicationGetTimerTaskMemory+0x30>)
 8001bf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20000294 	.word	0x20000294
 8001c10:	200002f0 	.word	0x200002f0

08001c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f103 0208 	add.w	r2, r3, #8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f103 0208 	add.w	r2, r3, #8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0208 	add.w	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d103      	bne.n	8001cd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e00c      	b.n	8001cf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3308      	adds	r3, #8
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e002      	b.n	8001ce4 <vListInsert+0x2e>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d2f6      	bcs.n	8001cde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6892      	ldr	r2, [r2, #8]
 8001d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6852      	ldr	r2, [r2, #4]
 8001d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d103      	bne.n	8001d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	1e5a      	subs	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10d      	bne.n	8001dac <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d94:	b672      	cpsid	i
 8001d96:	f383 8811 	msr	BASEPRI, r3
 8001d9a:	f3bf 8f6f 	isb	sy
 8001d9e:	f3bf 8f4f 	dsb	sy
 8001da2:	b662      	cpsie	i
 8001da4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8001dac:	f002 f8a6 	bl	8003efc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	441a      	add	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	68f9      	ldr	r1, [r7, #12]
 8001de0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	441a      	add	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	22ff      	movs	r2, #255	@ 0xff
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	22ff      	movs	r2, #255	@ 0xff
 8001df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d114      	bne.n	8001e2c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01a      	beq.n	8001e40 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3310      	adds	r3, #16
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 f950 	bl	80030b4 <xTaskRemoveFromEventList>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d012      	beq.n	8001e40 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <xQueueGenericReset+0xd4>)
 8001e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	f3bf 8f6f 	isb	sy
 8001e2a:	e009      	b.n	8001e40 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3310      	adds	r3, #16
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff feef 	bl	8001c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3324      	adds	r3, #36	@ 0x24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff feea 	bl	8001c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e40:	f002 f892 	bl	8003f68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000ed04 	.word	0xe000ed04

08001e54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08e      	sub	sp, #56	@ 0x38
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8001e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e6c:	b672      	cpsid	i
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	b662      	cpsie	i
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10d      	bne.n	8001ea6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8001e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e8e:	b672      	cpsid	i
 8001e90:	f383 8811 	msr	BASEPRI, r3
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	b662      	cpsie	i
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	e7fd      	b.n	8001ea2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <xQueueGenericCreateStatic+0x5e>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <xQueueGenericCreateStatic+0x62>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <xQueueGenericCreateStatic+0x64>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10d      	bne.n	8001ed8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8001ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec0:	b672      	cpsid	i
 8001ec2:	f383 8811 	msr	BASEPRI, r3
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	b662      	cpsie	i
 8001ed0:	623b      	str	r3, [r7, #32]
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <xQueueGenericCreateStatic+0x90>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <xQueueGenericCreateStatic+0x94>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <xQueueGenericCreateStatic+0x96>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10d      	bne.n	8001f0a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8001eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ef2:	b672      	cpsid	i
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	b662      	cpsie	i
 8001f02:	61fb      	str	r3, [r7, #28]
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	e7fd      	b.n	8001f06 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001f0a:	2350      	movs	r3, #80	@ 0x50
 8001f0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b50      	cmp	r3, #80	@ 0x50
 8001f12:	d00d      	beq.n	8001f30 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8001f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f18:	b672      	cpsid	i
 8001f1a:	f383 8811 	msr	BASEPRI, r3
 8001f1e:	f3bf 8f6f 	isb	sy
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	b662      	cpsie	i
 8001f28:	61bb      	str	r3, [r7, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001f30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f805 	bl	8001f62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3730      	adds	r7, #48	@ 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d103      	bne.n	8001f7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e002      	b.n	8001f84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f90:	2101      	movs	r1, #1
 8001f92:	69b8      	ldr	r0, [r7, #24]
 8001f94:	f7ff fef2 	bl	8001d7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08e      	sub	sp, #56	@ 0x38
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <xQueueGenericSend+0x38>
	__asm volatile
 8001fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc8:	b672      	cpsid	i
 8001fca:	f383 8811 	msr	BASEPRI, r3
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f3bf 8f4f 	dsb	sy
 8001fd6:	b662      	cpsie	i
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <xQueueGenericSend+0x46>
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <xQueueGenericSend+0x4a>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <xQueueGenericSend+0x4c>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <xQueueGenericSend+0x6c>
	__asm volatile
 8001ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ffc:	b672      	cpsid	i
 8001ffe:	f383 8811 	msr	BASEPRI, r3
 8002002:	f3bf 8f6f 	isb	sy
 8002006:	f3bf 8f4f 	dsb	sy
 800200a:	b662      	cpsie	i
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800200e:	bf00      	nop
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d103      	bne.n	8002022 <xQueueGenericSend+0x7a>
 800201a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <xQueueGenericSend+0x7e>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <xQueueGenericSend+0x80>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <xQueueGenericSend+0xa0>
	__asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002030:	b672      	cpsid	i
 8002032:	f383 8811 	msr	BASEPRI, r3
 8002036:	f3bf 8f6f 	isb	sy
 800203a:	f3bf 8f4f 	dsb	sy
 800203e:	b662      	cpsie	i
 8002040:	623b      	str	r3, [r7, #32]
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002048:	f001 f9fc 	bl	8003444 <xTaskGetSchedulerState>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <xQueueGenericSend+0xb0>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <xQueueGenericSend+0xb4>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <xQueueGenericSend+0xb6>
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10d      	bne.n	800207e <xQueueGenericSend+0xd6>
	__asm volatile
 8002062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002066:	b672      	cpsid	i
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	b662      	cpsie	i
 8002076:	61fb      	str	r3, [r7, #28]
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	e7fd      	b.n	800207a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800207e:	f001 ff3d 	bl	8003efc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <xQueueGenericSend+0xec>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d129      	bne.n	80020e8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800209a:	f000 fa1b 	bl	80024d4 <prvCopyDataToQueue>
 800209e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020aa:	3324      	adds	r3, #36	@ 0x24
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 f801 	bl	80030b4 <xTaskRemoveFromEventList>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80020b8:	4b3f      	ldr	r3, [pc, #252]	@ (80021b8 <xQueueGenericSend+0x210>)
 80020ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	f3bf 8f4f 	dsb	sy
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	e00a      	b.n	80020e0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80020ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80020d0:	4b39      	ldr	r3, [pc, #228]	@ (80021b8 <xQueueGenericSend+0x210>)
 80020d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f3bf 8f4f 	dsb	sy
 80020dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80020e0:	f001 ff42 	bl	8003f68 <vPortExitCritical>
				return pdPASS;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e063      	b.n	80021b0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d103      	bne.n	80020f6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020ee:	f001 ff3b 	bl	8003f68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e05c      	b.n	80021b0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d106      	bne.n	800210a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4618      	mov	r0, r3
 8002102:	f001 f83d 	bl	8003180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002106:	2301      	movs	r3, #1
 8002108:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800210a:	f001 ff2d 	bl	8003f68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800210e:	f000 fda1 	bl	8002c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002112:	f001 fef3 	bl	8003efc <vPortEnterCritical>
 8002116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800211c:	b25b      	sxtb	r3, r3
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d103      	bne.n	800212c <xQueueGenericSend+0x184>
 8002124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800212c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002132:	b25b      	sxtb	r3, r3
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d103      	bne.n	8002142 <xQueueGenericSend+0x19a>
 800213a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002142:	f001 ff11 	bl	8003f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002146:	1d3a      	adds	r2, r7, #4
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f001 f82c 	bl	80031ac <xTaskCheckForTimeOut>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d124      	bne.n	80021a4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800215a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800215c:	f000 fab2 	bl	80026c4 <prvIsQueueFull>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d018      	beq.n	8002198 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002168:	3310      	adds	r3, #16
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f000 ff4a 	bl	8003008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002176:	f000 fa3d 	bl	80025f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800217a:	f000 fd79 	bl	8002c70 <xTaskResumeAll>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	f47f af7c 	bne.w	800207e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8002186:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <xQueueGenericSend+0x210>)
 8002188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	f3bf 8f6f 	isb	sy
 8002196:	e772      	b.n	800207e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800219a:	f000 fa2b 	bl	80025f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800219e:	f000 fd67 	bl	8002c70 <xTaskResumeAll>
 80021a2:	e76c      	b.n	800207e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021a6:	f000 fa25 	bl	80025f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021aa:	f000 fd61 	bl	8002c70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80021ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3738      	adds	r7, #56	@ 0x38
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	e000ed04 	.word	0xe000ed04

080021bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	@ 0x38
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80021ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10d      	bne.n	80021f0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d8:	b672      	cpsid	i
 80021da:	f383 8811 	msr	BASEPRI, r3
 80021de:	f3bf 8f6f 	isb	sy
 80021e2:	f3bf 8f4f 	dsb	sy
 80021e6:	b662      	cpsie	i
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80021ea:	bf00      	nop
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <xQueueGenericSendFromISR+0x42>
 80021f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <xQueueGenericSendFromISR+0x46>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <xQueueGenericSendFromISR+0x48>
 8002202:	2300      	movs	r3, #0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10d      	bne.n	8002224 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8002208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800220c:	b672      	cpsid	i
 800220e:	f383 8811 	msr	BASEPRI, r3
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	f3bf 8f4f 	dsb	sy
 800221a:	b662      	cpsie	i
 800221c:	623b      	str	r3, [r7, #32]
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d103      	bne.n	8002232 <xQueueGenericSendFromISR+0x76>
 800222a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <xQueueGenericSendFromISR+0x7a>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <xQueueGenericSendFromISR+0x7c>
 8002236:	2300      	movs	r3, #0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10d      	bne.n	8002258 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800223c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002240:	b672      	cpsid	i
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	b662      	cpsie	i
 8002250:	61fb      	str	r3, [r7, #28]
}
 8002252:	bf00      	nop
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002258:	f001 ff38 	bl	80040cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800225c:	f3ef 8211 	mrs	r2, BASEPRI
 8002260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002264:	b672      	cpsid	i
 8002266:	f383 8811 	msr	BASEPRI, r3
 800226a:	f3bf 8f6f 	isb	sy
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	b662      	cpsie	i
 8002274:	61ba      	str	r2, [r7, #24]
 8002276:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002278:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800227c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002284:	429a      	cmp	r2, r3
 8002286:	d302      	bcc.n	800228e <xQueueGenericSendFromISR+0xd2>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d12c      	bne.n	80022e8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002294:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800229e:	f000 f919 	bl	80024d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80022a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022aa:	d112      	bne.n	80022d2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d016      	beq.n	80022e2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b6:	3324      	adds	r3, #36	@ 0x24
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fefb 	bl	80030b4 <xTaskRemoveFromEventList>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e007      	b.n	80022e2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	b25a      	sxtb	r2, r3
 80022dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80022e2:	2301      	movs	r3, #1
 80022e4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80022e6:	e001      	b.n	80022ec <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3738      	adds	r7, #56	@ 0x38
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	@ 0x30
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <xQueueReceive+0x36>
	__asm volatile
 800231e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002322:	b672      	cpsid	i
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	b662      	cpsie	i
 8002332:	623b      	str	r3, [r7, #32]
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	e7fd      	b.n	8002336 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d103      	bne.n	8002348 <xQueueReceive+0x44>
 8002340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <xQueueReceive+0x48>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <xQueueReceive+0x4a>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <xQueueReceive+0x6a>
	__asm volatile
 8002352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002356:	b672      	cpsid	i
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	b662      	cpsie	i
 8002366:	61fb      	str	r3, [r7, #28]
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	e7fd      	b.n	800236a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800236e:	f001 f869 	bl	8003444 <xTaskGetSchedulerState>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <xQueueReceive+0x7a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <xQueueReceive+0x7e>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <xQueueReceive+0x80>
 8002382:	2300      	movs	r3, #0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <xQueueReceive+0xa0>
	__asm volatile
 8002388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800238c:	b672      	cpsid	i
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	b662      	cpsie	i
 800239c:	61bb      	str	r3, [r7, #24]
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023a4:	f001 fdaa 	bl	8003efc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01f      	beq.n	80023f4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023b8:	f000 f8f6 	bl	80025a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00f      	beq.n	80023ec <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ce:	3310      	adds	r3, #16
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fe6f 	bl	80030b4 <xTaskRemoveFromEventList>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023dc:	4b3c      	ldr	r3, [pc, #240]	@ (80024d0 <xQueueReceive+0x1cc>)
 80023de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023ec:	f001 fdbc 	bl	8003f68 <vPortExitCritical>
				return pdPASS;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e069      	b.n	80024c8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023fa:	f001 fdb5 	bl	8003f68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023fe:	2300      	movs	r3, #0
 8002400:	e062      	b.n	80024c8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d106      	bne.n	8002416 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	4618      	mov	r0, r3
 800240e:	f000 feb7 	bl	8003180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002412:	2301      	movs	r3, #1
 8002414:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002416:	f001 fda7 	bl	8003f68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800241a:	f000 fc1b 	bl	8002c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800241e:	f001 fd6d 	bl	8003efc <vPortEnterCritical>
 8002422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002428:	b25b      	sxtb	r3, r3
 800242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242e:	d103      	bne.n	8002438 <xQueueReceive+0x134>
 8002430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800243e:	b25b      	sxtb	r3, r3
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d103      	bne.n	800244e <xQueueReceive+0x14a>
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800244e:	f001 fd8b 	bl	8003f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002452:	1d3a      	adds	r2, r7, #4
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fea6 	bl	80031ac <xTaskCheckForTimeOut>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d123      	bne.n	80024ae <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002468:	f000 f916 	bl	8002698 <prvIsQueueEmpty>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d017      	beq.n	80024a2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002474:	3324      	adds	r3, #36	@ 0x24
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fdc4 	bl	8003008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002482:	f000 f8b7 	bl	80025f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002486:	f000 fbf3 	bl	8002c70 <xTaskResumeAll>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d189      	bne.n	80023a4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <xQueueReceive+0x1cc>)
 8002492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	e780      	b.n	80023a4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80024a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024a4:	f000 f8a6 	bl	80025f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024a8:	f000 fbe2 	bl	8002c70 <xTaskResumeAll>
 80024ac:	e77a      	b.n	80023a4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80024ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024b0:	f000 f8a0 	bl	80025f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024b4:	f000 fbdc 	bl	8002c70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024ba:	f000 f8ed 	bl	8002698 <prvIsQueueEmpty>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f43f af6f 	beq.w	80023a4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3730      	adds	r7, #48	@ 0x30
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	e000ed04 	.word	0xe000ed04

080024d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10d      	bne.n	800250e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d14d      	bne.n	8002596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 ffbe 	bl	8003480 <xTaskPriorityDisinherit>
 8002504:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	e043      	b.n	8002596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d119      	bne.n	8002548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6858      	ldr	r0, [r3, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	461a      	mov	r2, r3
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	f002 f830 	bl	8004584 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	441a      	add	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	d32b      	bcc.n	8002596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	e026      	b.n	8002596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	68d8      	ldr	r0, [r3, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	461a      	mov	r2, r3
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	f002 f816 	bl	8004584 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	425b      	negs	r3, r3
 8002562:	441a      	add	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d207      	bcs.n	8002584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	425b      	negs	r3, r3
 800257e:	441a      	add	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d105      	bne.n	8002596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	3b01      	subs	r3, #1
 8002594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800259e:	697b      	ldr	r3, [r7, #20]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d018      	beq.n	80025ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	441a      	add	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d303      	bcc.n	80025dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	461a      	mov	r2, r3
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	f001 ffcc 	bl	8004584 <memcpy>
	}
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80025fc:	f001 fc7e 	bl	8003efc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002608:	e011      	b.n	800262e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	2b00      	cmp	r3, #0
 8002610:	d012      	beq.n	8002638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3324      	adds	r3, #36	@ 0x24
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fd4c 	bl	80030b4 <xTaskRemoveFromEventList>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002622:	f000 fe2b 	bl	800327c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	3b01      	subs	r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	2b00      	cmp	r3, #0
 8002634:	dce9      	bgt.n	800260a <prvUnlockQueue+0x16>
 8002636:	e000      	b.n	800263a <prvUnlockQueue+0x46>
					break;
 8002638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	22ff      	movs	r2, #255	@ 0xff
 800263e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002642:	f001 fc91 	bl	8003f68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002646:	f001 fc59 	bl	8003efc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002652:	e011      	b.n	8002678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d012      	beq.n	8002682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3310      	adds	r3, #16
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fd27 	bl	80030b4 <xTaskRemoveFromEventList>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800266c:	f000 fe06 	bl	800327c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002670:	7bbb      	ldrb	r3, [r7, #14]
 8002672:	3b01      	subs	r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800267c:	2b00      	cmp	r3, #0
 800267e:	dce9      	bgt.n	8002654 <prvUnlockQueue+0x60>
 8002680:	e000      	b.n	8002684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	22ff      	movs	r2, #255	@ 0xff
 8002688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800268c:	f001 fc6c 	bl	8003f68 <vPortExitCritical>
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026a0:	f001 fc2c 	bl	8003efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e001      	b.n	80026b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026b6:	f001 fc57 	bl	8003f68 <vPortExitCritical>

	return xReturn;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80026cc:	f001 fc16 	bl	8003efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	429a      	cmp	r2, r3
 80026da:	d102      	bne.n	80026e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80026dc:	2301      	movs	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e001      	b.n	80026e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80026e6:	f001 fc3f 	bl	8003f68 <vPortExitCritical>

	return xReturn;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e014      	b.n	800272e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002704:	4a0f      	ldr	r2, [pc, #60]	@ (8002744 <vQueueAddToRegistry+0x50>)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002710:	490c      	ldr	r1, [pc, #48]	@ (8002744 <vQueueAddToRegistry+0x50>)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <vQueueAddToRegistry+0x50>)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002726:	e006      	b.n	8002736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3301      	adds	r3, #1
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b07      	cmp	r3, #7
 8002732:	d9e7      	bls.n	8002704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	200006f0 	.word	0x200006f0

08002748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002758:	f001 fbd0 	bl	8003efc <vPortEnterCritical>
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002762:	b25b      	sxtb	r3, r3
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d103      	bne.n	8002772 <vQueueWaitForMessageRestricted+0x2a>
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002778:	b25b      	sxtb	r3, r3
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d103      	bne.n	8002788 <vQueueWaitForMessageRestricted+0x40>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002788:	f001 fbee 	bl	8003f68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3324      	adds	r3, #36	@ 0x24
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fc5b 	bl	8003058 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff26 	bl	80025f4 <prvUnlockQueue>
	}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	@ 0x38
 80027b4:	af04      	add	r7, sp, #16
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10d      	bne.n	80027e0 <xTaskCreateStatic+0x30>
	__asm volatile
 80027c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c8:	b672      	cpsid	i
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	b662      	cpsie	i
 80027d8:	623b      	str	r3, [r7, #32]
}
 80027da:	bf00      	nop
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80027e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10d      	bne.n	8002802 <xTaskCreateStatic+0x52>
	__asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ea:	b672      	cpsid	i
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	b662      	cpsie	i
 80027fa:	61fb      	str	r3, [r7, #28]
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	e7fd      	b.n	80027fe <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002802:	235c      	movs	r3, #92	@ 0x5c
 8002804:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b5c      	cmp	r3, #92	@ 0x5c
 800280a:	d00d      	beq.n	8002828 <xTaskCreateStatic+0x78>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002810:	b672      	cpsid	i
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	b662      	cpsie	i
 8002820:	61bb      	str	r3, [r7, #24]
}
 8002822:	bf00      	nop
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002828:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800282a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01e      	beq.n	800286e <xTaskCreateStatic+0xbe>
 8002830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01b      	beq.n	800286e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002848:	2300      	movs	r3, #0
 800284a:	9303      	str	r3, [sp, #12]
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	9302      	str	r3, [sp, #8]
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f850 	bl	8002906 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002866:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002868:	f000 f8e0 	bl	8002a2c <prvAddNewTaskToReadyList>
 800286c:	e001      	b.n	8002872 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002872:	697b      	ldr	r3, [r7, #20]
	}
 8002874:	4618      	mov	r0, r3
 8002876:	3728      	adds	r7, #40	@ 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	@ 0x30
 8002880:	af04      	add	r7, sp, #16
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f001 fc61 	bl	8004158 <pvPortMalloc>
 8002896:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00e      	beq.n	80028bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800289e:	205c      	movs	r0, #92	@ 0x5c
 80028a0:	f001 fc5a 	bl	8004158 <pvPortMalloc>
 80028a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b2:	e005      	b.n	80028c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80028b4:	6978      	ldr	r0, [r7, #20]
 80028b6:	f001 fd1d 	bl	80042f4 <vPortFree>
 80028ba:	e001      	b.n	80028c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d017      	beq.n	80028f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	2300      	movs	r3, #0
 80028d2:	9303      	str	r3, [sp, #12]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	9302      	str	r3, [sp, #8]
 80028d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f80e 	bl	8002906 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028ea:	69f8      	ldr	r0, [r7, #28]
 80028ec:	f000 f89e 	bl	8002a2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028f0:	2301      	movs	r3, #1
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	e002      	b.n	80028fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028fc:	69bb      	ldr	r3, [r7, #24]
	}
 80028fe:	4618      	mov	r0, r3
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b088      	sub	sp, #32
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002916:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	461a      	mov	r2, r3
 800291e:	21a5      	movs	r1, #165	@ 0xa5
 8002920:	f001 fe04 	bl	800452c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800292e:	440b      	add	r3, r1
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f023 0307 	bic.w	r3, r3, #7
 800293c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294c:	b672      	cpsid	i
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	b662      	cpsie	i
 800295c:	617b      	str	r3, [r7, #20]
}
 800295e:	bf00      	nop
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01f      	beq.n	80029aa <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	e012      	b.n	8002996 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	7819      	ldrb	r1, [r3, #0]
 8002978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	4413      	add	r3, r2
 800297e:	3334      	adds	r3, #52	@ 0x34
 8002980:	460a      	mov	r2, r1
 8002982:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3301      	adds	r3, #1
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d9e9      	bls.n	8002970 <prvInitialiseNewTask+0x6a>
 800299c:	e000      	b.n	80029a0 <prvInitialiseNewTask+0x9a>
			{
				break;
 800299e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029a8:	e003      	b.n	80029b2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b4:	2b37      	cmp	r3, #55	@ 0x37
 80029b6:	d901      	bls.n	80029bc <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029b8:	2337      	movs	r3, #55	@ 0x37
 80029ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029c6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80029c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ca:	2200      	movs	r2, #0
 80029cc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d0:	3304      	adds	r3, #4
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f93e 	bl	8001c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029da:	3318      	adds	r3, #24
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f939 	bl	8001c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029f6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fa:	2200      	movs	r2, #0
 80029fc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	69b8      	ldr	r0, [r7, #24]
 8002a0c:	f001 f968 	bl	8003ce0 <pxPortInitialiseStack>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a22:	bf00      	nop
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a34:	f001 fa62 	bl	8003efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a38:	4b2d      	ldr	r3, [pc, #180]	@ (8002af0 <prvAddNewTaskToReadyList+0xc4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002af0 <prvAddNewTaskToReadyList+0xc4>)
 8002a40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a42:	4b2c      	ldr	r3, [pc, #176]	@ (8002af4 <prvAddNewTaskToReadyList+0xc8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002af4 <prvAddNewTaskToReadyList+0xc8>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a50:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <prvAddNewTaskToReadyList+0xc4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d110      	bne.n	8002a7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a58:	f000 fc34 	bl	80032c4 <prvInitialiseTaskLists>
 8002a5c:	e00d      	b.n	8002a7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a5e:	4b26      	ldr	r3, [pc, #152]	@ (8002af8 <prvAddNewTaskToReadyList+0xcc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d109      	bne.n	8002a7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a66:	4b23      	ldr	r3, [pc, #140]	@ (8002af4 <prvAddNewTaskToReadyList+0xc8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d802      	bhi.n	8002a7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a74:	4a1f      	ldr	r2, [pc, #124]	@ (8002af4 <prvAddNewTaskToReadyList+0xc8>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a7a:	4b20      	ldr	r3, [pc, #128]	@ (8002afc <prvAddNewTaskToReadyList+0xd0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	4a1e      	ldr	r2, [pc, #120]	@ (8002afc <prvAddNewTaskToReadyList+0xd0>)
 8002a82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <prvAddNewTaskToReadyList+0xd0>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a90:	4b1b      	ldr	r3, [pc, #108]	@ (8002b00 <prvAddNewTaskToReadyList+0xd4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d903      	bls.n	8002aa0 <prvAddNewTaskToReadyList+0x74>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	4a18      	ldr	r2, [pc, #96]	@ (8002b00 <prvAddNewTaskToReadyList+0xd4>)
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4a15      	ldr	r2, [pc, #84]	@ (8002b04 <prvAddNewTaskToReadyList+0xd8>)
 8002aae:	441a      	add	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f7ff f8d9 	bl	8001c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002abc:	f001 fa54 	bl	8003f68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <prvAddNewTaskToReadyList+0xcc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <prvAddNewTaskToReadyList+0xc8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d207      	bcs.n	8002ae6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <prvAddNewTaskToReadyList+0xdc>)
 8002ad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000c04 	.word	0x20000c04
 8002af4:	20000730 	.word	0x20000730
 8002af8:	20000c10 	.word	0x20000c10
 8002afc:	20000c20 	.word	0x20000c20
 8002b00:	20000c0c 	.word	0x20000c0c
 8002b04:	20000734 	.word	0x20000734
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01a      	beq.n	8002b54 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <vTaskDelay+0x68>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <vTaskDelay+0x36>
	__asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2a:	b672      	cpsid	i
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	b662      	cpsie	i
 8002b3a:	60bb      	str	r3, [r7, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	e7fd      	b.n	8002b3e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8002b42:	f000 f887 	bl	8002c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b46:	2100      	movs	r1, #0
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fd0d 	bl	8003568 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b4e:	f000 f88f 	bl	8002c70 <xTaskResumeAll>
 8002b52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d107      	bne.n	8002b6a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8002b5a:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <vTaskDelay+0x6c>)
 8002b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000c2c 	.word	0x20000c2c
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	@ 0x28
 8002b80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b8a:	463a      	mov	r2, r7
 8002b8c:	1d39      	adds	r1, r7, #4
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f80a 	bl	8001bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b98:	6839      	ldr	r1, [r7, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	9202      	str	r2, [sp, #8]
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	460a      	mov	r2, r1
 8002baa:	4924      	ldr	r1, [pc, #144]	@ (8002c3c <vTaskStartScheduler+0xc0>)
 8002bac:	4824      	ldr	r0, [pc, #144]	@ (8002c40 <vTaskStartScheduler+0xc4>)
 8002bae:	f7ff fdff 	bl	80027b0 <xTaskCreateStatic>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a23      	ldr	r2, [pc, #140]	@ (8002c44 <vTaskStartScheduler+0xc8>)
 8002bb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002bb8:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <vTaskStartScheduler+0xc8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e001      	b.n	8002bca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d102      	bne.n	8002bd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002bd0:	f000 fd1e 	bl	8003610 <xTimerCreateTimerTask>
 8002bd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d118      	bne.n	8002c0e <vTaskStartScheduler+0x92>
	__asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be0:	b672      	cpsid	i
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	b662      	cpsie	i
 8002bf0:	613b      	str	r3, [r7, #16]
}
 8002bf2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bf4:	4b14      	ldr	r3, [pc, #80]	@ (8002c48 <vTaskStartScheduler+0xcc>)
 8002bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <vTaskStartScheduler+0xd0>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c02:	4b13      	ldr	r3, [pc, #76]	@ (8002c50 <vTaskStartScheduler+0xd4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c08:	f001 f8fa 	bl	8003e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c0c:	e011      	b.n	8002c32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d10d      	bne.n	8002c32 <vTaskStartScheduler+0xb6>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1a:	b672      	cpsid	i
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	b662      	cpsie	i
 8002c2a:	60fb      	str	r3, [r7, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	e7fd      	b.n	8002c2e <vTaskStartScheduler+0xb2>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	080045c4 	.word	0x080045c4
 8002c40:	08003295 	.word	0x08003295
 8002c44:	20000c28 	.word	0x20000c28
 8002c48:	20000c24 	.word	0x20000c24
 8002c4c:	20000c10 	.word	0x20000c10
 8002c50:	20000c08 	.word	0x20000c08

08002c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002c58:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <vTaskSuspendAll+0x18>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	4a03      	ldr	r2, [pc, #12]	@ (8002c6c <vTaskSuspendAll+0x18>)
 8002c60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	20000c2c 	.word	0x20000c2c

08002c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c7e:	4b43      	ldr	r3, [pc, #268]	@ (8002d8c <xTaskResumeAll+0x11c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <xTaskResumeAll+0x32>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	b672      	cpsid	i
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	b662      	cpsie	i
 8002c9a:	603b      	str	r3, [r7, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	e7fd      	b.n	8002c9e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ca2:	f001 f92b 	bl	8003efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ca6:	4b39      	ldr	r3, [pc, #228]	@ (8002d8c <xTaskResumeAll+0x11c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	4a37      	ldr	r2, [pc, #220]	@ (8002d8c <xTaskResumeAll+0x11c>)
 8002cae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cb0:	4b36      	ldr	r3, [pc, #216]	@ (8002d8c <xTaskResumeAll+0x11c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d162      	bne.n	8002d7e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cb8:	4b35      	ldr	r3, [pc, #212]	@ (8002d90 <xTaskResumeAll+0x120>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d05e      	beq.n	8002d7e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cc0:	e02f      	b.n	8002d22 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc2:	4b34      	ldr	r3, [pc, #208]	@ (8002d94 <xTaskResumeAll+0x124>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3318      	adds	r3, #24
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff f82a 	bl	8001d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff f825 	bl	8001d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d98 <xTaskResumeAll+0x128>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d903      	bls.n	8002cf2 <xTaskResumeAll+0x82>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cee:	4a2a      	ldr	r2, [pc, #168]	@ (8002d98 <xTaskResumeAll+0x128>)
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4a27      	ldr	r2, [pc, #156]	@ (8002d9c <xTaskResumeAll+0x12c>)
 8002d00:	441a      	add	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f7fe ffb0 	bl	8001c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d12:	4b23      	ldr	r3, [pc, #140]	@ (8002da0 <xTaskResumeAll+0x130>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8002d1c:	4b21      	ldr	r3, [pc, #132]	@ (8002da4 <xTaskResumeAll+0x134>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d22:	4b1c      	ldr	r3, [pc, #112]	@ (8002d94 <xTaskResumeAll+0x124>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1cb      	bne.n	8002cc2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d30:	f000 fb68 	bl	8003404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002d34:	4b1c      	ldr	r3, [pc, #112]	@ (8002da8 <xTaskResumeAll+0x138>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d010      	beq.n	8002d62 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d40:	f000 f846 	bl	8002dd0 <xTaskIncrementTick>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8002d4a:	4b16      	ldr	r3, [pc, #88]	@ (8002da4 <xTaskResumeAll+0x134>)
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f1      	bne.n	8002d40 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8002d5c:	4b12      	ldr	r3, [pc, #72]	@ (8002da8 <xTaskResumeAll+0x138>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d62:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <xTaskResumeAll+0x134>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <xTaskResumeAll+0x13c>)
 8002d70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d7e:	f001 f8f3 	bl	8003f68 <vPortExitCritical>

	return xAlreadyYielded;
 8002d82:	68bb      	ldr	r3, [r7, #8]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000c2c 	.word	0x20000c2c
 8002d90:	20000c04 	.word	0x20000c04
 8002d94:	20000bc4 	.word	0x20000bc4
 8002d98:	20000c0c 	.word	0x20000c0c
 8002d9c:	20000734 	.word	0x20000734
 8002da0:	20000730 	.word	0x20000730
 8002da4:	20000c18 	.word	0x20000c18
 8002da8:	20000c14 	.word	0x20000c14
 8002dac:	e000ed04 	.word	0xe000ed04

08002db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002db6:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <xTaskGetTickCount+0x1c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002dbc:	687b      	ldr	r3, [r7, #4]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000c08 	.word	0x20000c08

08002dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dda:	4b50      	ldr	r3, [pc, #320]	@ (8002f1c <xTaskIncrementTick+0x14c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f040 808c 	bne.w	8002efc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002de4:	4b4e      	ldr	r3, [pc, #312]	@ (8002f20 <xTaskIncrementTick+0x150>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002dec:	4a4c      	ldr	r2, [pc, #304]	@ (8002f20 <xTaskIncrementTick+0x150>)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d123      	bne.n	8002e40 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8002df8:	4b4a      	ldr	r3, [pc, #296]	@ (8002f24 <xTaskIncrementTick+0x154>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <xTaskIncrementTick+0x4e>
	__asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e06:	b672      	cpsid	i
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	b662      	cpsie	i
 8002e16:	603b      	str	r3, [r7, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	e7fd      	b.n	8002e1a <xTaskIncrementTick+0x4a>
 8002e1e:	4b41      	ldr	r3, [pc, #260]	@ (8002f24 <xTaskIncrementTick+0x154>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	4b40      	ldr	r3, [pc, #256]	@ (8002f28 <xTaskIncrementTick+0x158>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3e      	ldr	r2, [pc, #248]	@ (8002f24 <xTaskIncrementTick+0x154>)
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8002f28 <xTaskIncrementTick+0x158>)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b3e      	ldr	r3, [pc, #248]	@ (8002f2c <xTaskIncrementTick+0x15c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	4a3c      	ldr	r2, [pc, #240]	@ (8002f2c <xTaskIncrementTick+0x15c>)
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	f000 fae2 	bl	8003404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e40:	4b3b      	ldr	r3, [pc, #236]	@ (8002f30 <xTaskIncrementTick+0x160>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d349      	bcc.n	8002ede <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e4a:	4b36      	ldr	r3, [pc, #216]	@ (8002f24 <xTaskIncrementTick+0x154>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e54:	4b36      	ldr	r3, [pc, #216]	@ (8002f30 <xTaskIncrementTick+0x160>)
 8002e56:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5a:	601a      	str	r2, [r3, #0]
					break;
 8002e5c:	e03f      	b.n	8002ede <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e5e:	4b31      	ldr	r3, [pc, #196]	@ (8002f24 <xTaskIncrementTick+0x154>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d203      	bcs.n	8002e7e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e76:	4a2e      	ldr	r2, [pc, #184]	@ (8002f30 <xTaskIncrementTick+0x160>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e7c:	e02f      	b.n	8002ede <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe ff50 	bl	8001d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3318      	adds	r3, #24
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ff47 	bl	8001d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9e:	4b25      	ldr	r3, [pc, #148]	@ (8002f34 <xTaskIncrementTick+0x164>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d903      	bls.n	8002eae <xTaskIncrementTick+0xde>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	4a22      	ldr	r2, [pc, #136]	@ (8002f34 <xTaskIncrementTick+0x164>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4a1f      	ldr	r2, [pc, #124]	@ (8002f38 <xTaskIncrementTick+0x168>)
 8002ebc:	441a      	add	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f7fe fed2 	bl	8001c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ece:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <xTaskIncrementTick+0x16c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d3b8      	bcc.n	8002e4a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002edc:	e7b5      	b.n	8002e4a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ede:	4b17      	ldr	r3, [pc, #92]	@ (8002f3c <xTaskIncrementTick+0x16c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee4:	4914      	ldr	r1, [pc, #80]	@ (8002f38 <xTaskIncrementTick+0x168>)
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d907      	bls.n	8002f06 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	e004      	b.n	8002f06 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002efc:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <xTaskIncrementTick+0x170>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	4a0f      	ldr	r2, [pc, #60]	@ (8002f40 <xTaskIncrementTick+0x170>)
 8002f04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002f06:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <xTaskIncrementTick+0x174>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002f12:	697b      	ldr	r3, [r7, #20]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000c2c 	.word	0x20000c2c
 8002f20:	20000c08 	.word	0x20000c08
 8002f24:	20000bbc 	.word	0x20000bbc
 8002f28:	20000bc0 	.word	0x20000bc0
 8002f2c:	20000c1c 	.word	0x20000c1c
 8002f30:	20000c24 	.word	0x20000c24
 8002f34:	20000c0c 	.word	0x20000c0c
 8002f38:	20000734 	.word	0x20000734
 8002f3c:	20000730 	.word	0x20000730
 8002f40:	20000c14 	.word	0x20000c14
 8002f44:	20000c18 	.word	0x20000c18

08002f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f4e:	4b29      	ldr	r3, [pc, #164]	@ (8002ff4 <vTaskSwitchContext+0xac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f56:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <vTaskSwitchContext+0xb0>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f5c:	e044      	b.n	8002fe8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002f5e:	4b26      	ldr	r3, [pc, #152]	@ (8002ff8 <vTaskSwitchContext+0xb0>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f64:	4b25      	ldr	r3, [pc, #148]	@ (8002ffc <vTaskSwitchContext+0xb4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e013      	b.n	8002f94 <vTaskSwitchContext+0x4c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <vTaskSwitchContext+0x46>
	__asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f76:	b672      	cpsid	i
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	b662      	cpsie	i
 8002f86:	607b      	str	r3, [r7, #4]
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	e7fd      	b.n	8002f8a <vTaskSwitchContext+0x42>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	491a      	ldr	r1, [pc, #104]	@ (8003000 <vTaskSwitchContext+0xb8>)
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0e1      	beq.n	8002f6c <vTaskSwitchContext+0x24>
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <vTaskSwitchContext+0xb8>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d104      	bne.n	8002fd8 <vTaskSwitchContext+0x90>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	4a09      	ldr	r2, [pc, #36]	@ (8003004 <vTaskSwitchContext+0xbc>)
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4a06      	ldr	r2, [pc, #24]	@ (8002ffc <vTaskSwitchContext+0xb4>)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	20000c2c 	.word	0x20000c2c
 8002ff8:	20000c18 	.word	0x20000c18
 8002ffc:	20000c0c 	.word	0x20000c0c
 8003000:	20000734 	.word	0x20000734
 8003004:	20000730 	.word	0x20000730

08003008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10d      	bne.n	8003034 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	b672      	cpsid	i
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	b662      	cpsie	i
 800302c:	60fb      	str	r3, [r7, #12]
}
 800302e:	bf00      	nop
 8003030:	bf00      	nop
 8003032:	e7fd      	b.n	8003030 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003034:	4b07      	ldr	r3, [pc, #28]	@ (8003054 <vTaskPlaceOnEventList+0x4c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3318      	adds	r3, #24
 800303a:	4619      	mov	r1, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fe fe3a 	bl	8001cb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003042:	2101      	movs	r1, #1
 8003044:	6838      	ldr	r0, [r7, #0]
 8003046:	f000 fa8f 	bl	8003568 <prvAddCurrentTaskToDelayedList>
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000730 	.word	0x20000730

08003058 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306e:	b672      	cpsid	i
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	b662      	cpsie	i
 800307e:	617b      	str	r3, [r7, #20]
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	e7fd      	b.n	8003082 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003086:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <vTaskPlaceOnEventListRestricted+0x58>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3318      	adds	r3, #24
 800308c:	4619      	mov	r1, r3
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7fe fded 	bl	8001c6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800309a:	f04f 33ff 	mov.w	r3, #4294967295
 800309e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	68b8      	ldr	r0, [r7, #8]
 80030a4:	f000 fa60 	bl	8003568 <prvAddCurrentTaskToDelayedList>
	}
 80030a8:	bf00      	nop
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000730 	.word	0x20000730

080030b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ce:	b672      	cpsid	i
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	b662      	cpsie	i
 80030de:	60fb      	str	r3, [r7, #12]
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	e7fd      	b.n	80030e2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	3318      	adds	r3, #24
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fe1c 	bl	8001d28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <xTaskRemoveFromEventList+0xb4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d11d      	bne.n	8003134 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe fe13 	bl	8001d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003106:	4b19      	ldr	r3, [pc, #100]	@ (800316c <xTaskRemoveFromEventList+0xb8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d903      	bls.n	8003116 <xTaskRemoveFromEventList+0x62>
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	4a16      	ldr	r2, [pc, #88]	@ (800316c <xTaskRemoveFromEventList+0xb8>)
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4a13      	ldr	r2, [pc, #76]	@ (8003170 <xTaskRemoveFromEventList+0xbc>)
 8003124:	441a      	add	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7fe fd9e 	bl	8001c6e <vListInsertEnd>
 8003132:	e005      	b.n	8003140 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	3318      	adds	r3, #24
 8003138:	4619      	mov	r1, r3
 800313a:	480e      	ldr	r0, [pc, #56]	@ (8003174 <xTaskRemoveFromEventList+0xc0>)
 800313c:	f7fe fd97 	bl	8001c6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003144:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <xTaskRemoveFromEventList+0xc4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	429a      	cmp	r2, r3
 800314c:	d905      	bls.n	800315a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800314e:	2301      	movs	r3, #1
 8003150:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003152:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <xTaskRemoveFromEventList+0xc8>)
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e001      	b.n	800315e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800315e:	697b      	ldr	r3, [r7, #20]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000c2c 	.word	0x20000c2c
 800316c:	20000c0c 	.word	0x20000c0c
 8003170:	20000734 	.word	0x20000734
 8003174:	20000bc4 	.word	0x20000bc4
 8003178:	20000730 	.word	0x20000730
 800317c:	20000c18 	.word	0x20000c18

08003180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <vTaskInternalSetTimeOutState+0x24>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <vTaskInternalSetTimeOutState+0x28>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	605a      	str	r2, [r3, #4]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000c1c 	.word	0x20000c1c
 80031a8:	20000c08 	.word	0x20000c08

080031ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c0:	b672      	cpsid	i
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	b662      	cpsie	i
 80031d0:	613b      	str	r3, [r7, #16]
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10d      	bne.n	80031fa <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e2:	b672      	cpsid	i
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	b662      	cpsie	i
 80031f2:	60fb      	str	r3, [r7, #12]
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	e7fd      	b.n	80031f6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80031fa:	f000 fe7f 	bl	8003efc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80031fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003274 <xTaskCheckForTimeOut+0xc8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d102      	bne.n	800321e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	e023      	b.n	8003266 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4b15      	ldr	r3, [pc, #84]	@ (8003278 <xTaskCheckForTimeOut+0xcc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d007      	beq.n	800323a <xTaskCheckForTimeOut+0x8e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	429a      	cmp	r2, r3
 8003232:	d302      	bcc.n	800323a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003234:	2301      	movs	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	e015      	b.n	8003266 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	d20b      	bcs.n	800325c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff95 	bl	8003180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e004      	b.n	8003266 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003262:	2301      	movs	r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003266:	f000 fe7f 	bl	8003f68 <vPortExitCritical>

	return xReturn;
 800326a:	69fb      	ldr	r3, [r7, #28]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000c08 	.word	0x20000c08
 8003278:	20000c1c 	.word	0x20000c1c

0800327c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003280:	4b03      	ldr	r3, [pc, #12]	@ (8003290 <vTaskMissedYield+0x14>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]
}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	20000c18 	.word	0x20000c18

08003294 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800329c:	f000 f852 	bl	8003344 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032a0:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <prvIdleTask+0x28>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d9f9      	bls.n	800329c <prvIdleTask+0x8>
			{
				taskYIELD();
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <prvIdleTask+0x2c>)
 80032aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032b8:	e7f0      	b.n	800329c <prvIdleTask+0x8>
 80032ba:	bf00      	nop
 80032bc:	20000734 	.word	0x20000734
 80032c0:	e000ed04 	.word	0xe000ed04

080032c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	e00c      	b.n	80032ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4a12      	ldr	r2, [pc, #72]	@ (8003324 <prvInitialiseTaskLists+0x60>)
 80032dc:	4413      	add	r3, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fc98 	bl	8001c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3301      	adds	r3, #1
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b37      	cmp	r3, #55	@ 0x37
 80032ee:	d9ef      	bls.n	80032d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032f0:	480d      	ldr	r0, [pc, #52]	@ (8003328 <prvInitialiseTaskLists+0x64>)
 80032f2:	f7fe fc8f 	bl	8001c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032f6:	480d      	ldr	r0, [pc, #52]	@ (800332c <prvInitialiseTaskLists+0x68>)
 80032f8:	f7fe fc8c 	bl	8001c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032fc:	480c      	ldr	r0, [pc, #48]	@ (8003330 <prvInitialiseTaskLists+0x6c>)
 80032fe:	f7fe fc89 	bl	8001c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003302:	480c      	ldr	r0, [pc, #48]	@ (8003334 <prvInitialiseTaskLists+0x70>)
 8003304:	f7fe fc86 	bl	8001c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003308:	480b      	ldr	r0, [pc, #44]	@ (8003338 <prvInitialiseTaskLists+0x74>)
 800330a:	f7fe fc83 	bl	8001c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800330e:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <prvInitialiseTaskLists+0x78>)
 8003310:	4a05      	ldr	r2, [pc, #20]	@ (8003328 <prvInitialiseTaskLists+0x64>)
 8003312:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003314:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <prvInitialiseTaskLists+0x7c>)
 8003316:	4a05      	ldr	r2, [pc, #20]	@ (800332c <prvInitialiseTaskLists+0x68>)
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000734 	.word	0x20000734
 8003328:	20000b94 	.word	0x20000b94
 800332c:	20000ba8 	.word	0x20000ba8
 8003330:	20000bc4 	.word	0x20000bc4
 8003334:	20000bd8 	.word	0x20000bd8
 8003338:	20000bf0 	.word	0x20000bf0
 800333c:	20000bbc 	.word	0x20000bbc
 8003340:	20000bc0 	.word	0x20000bc0

08003344 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800334a:	e019      	b.n	8003380 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800334c:	f000 fdd6 	bl	8003efc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <prvCheckTasksWaitingTermination+0x50>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fce3 	bl	8001d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <prvCheckTasksWaitingTermination+0x54>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3b01      	subs	r3, #1
 8003368:	4a0b      	ldr	r2, [pc, #44]	@ (8003398 <prvCheckTasksWaitingTermination+0x54>)
 800336a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <prvCheckTasksWaitingTermination+0x58>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3b01      	subs	r3, #1
 8003372:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <prvCheckTasksWaitingTermination+0x58>)
 8003374:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003376:	f000 fdf7 	bl	8003f68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f810 	bl	80033a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <prvCheckTasksWaitingTermination+0x58>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e1      	bne.n	800334c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000bd8 	.word	0x20000bd8
 8003398:	20000c04 	.word	0x20000c04
 800339c:	20000bec 	.word	0x20000bec

080033a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d108      	bne.n	80033c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 ff9c 	bl	80042f4 <vPortFree>
				vPortFree( pxTCB );
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 ff99 	bl	80042f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033c2:	e01b      	b.n	80033fc <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d103      	bne.n	80033d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 ff90 	bl	80042f4 <vPortFree>
	}
 80033d4:	e012      	b.n	80033fc <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d00d      	beq.n	80033fc <prvDeleteTCB+0x5c>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e4:	b672      	cpsid	i
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	b662      	cpsie	i
 80033f4:	60fb      	str	r3, [r7, #12]
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	e7fd      	b.n	80033f8 <prvDeleteTCB+0x58>
	}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800340a:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <prvResetNextTaskUnblockTime+0x38>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003414:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <prvResetNextTaskUnblockTime+0x3c>)
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800341c:	e008      	b.n	8003430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800341e:	4b07      	ldr	r3, [pc, #28]	@ (800343c <prvResetNextTaskUnblockTime+0x38>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <prvResetNextTaskUnblockTime+0x3c>)
 800342e:	6013      	str	r3, [r2, #0]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	20000bbc 	.word	0x20000bbc
 8003440:	20000c24 	.word	0x20000c24

08003444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800344a:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <xTaskGetSchedulerState+0x34>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003452:	2301      	movs	r3, #1
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	e008      	b.n	800346a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003458:	4b08      	ldr	r3, [pc, #32]	@ (800347c <xTaskGetSchedulerState+0x38>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003460:	2302      	movs	r3, #2
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	e001      	b.n	800346a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800346a:	687b      	ldr	r3, [r7, #4]
	}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	20000c10 	.word	0x20000c10
 800347c:	20000c2c 	.word	0x20000c2c

08003480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d05c      	beq.n	8003550 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003496:	4b31      	ldr	r3, [pc, #196]	@ (800355c <xTaskPriorityDisinherit+0xdc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d00d      	beq.n	80034bc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a4:	b672      	cpsid	i
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	b662      	cpsie	i
 80034b4:	60fb      	str	r3, [r7, #12]
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c8:	b672      	cpsid	i
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	b662      	cpsie	i
 80034d8:	60bb      	str	r3, [r7, #8]
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d02c      	beq.n	8003550 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d128      	bne.n	8003550 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	3304      	adds	r3, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fc10 	bl	8001d28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003520:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <xTaskPriorityDisinherit+0xe0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d903      	bls.n	8003530 <xTaskPriorityDisinherit+0xb0>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <xTaskPriorityDisinherit+0xe0>)
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4a09      	ldr	r2, [pc, #36]	@ (8003564 <xTaskPriorityDisinherit+0xe4>)
 800353e:	441a      	add	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	3304      	adds	r3, #4
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f7fe fb91 	bl	8001c6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800354c:	2301      	movs	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003550:	697b      	ldr	r3, [r7, #20]
	}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000730 	.word	0x20000730
 8003560:	20000c0c 	.word	0x20000c0c
 8003564:	20000734 	.word	0x20000734

08003568 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003572:	4b21      	ldr	r3, [pc, #132]	@ (80035f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003578:	4b20      	ldr	r3, [pc, #128]	@ (80035fc <prvAddCurrentTaskToDelayedList+0x94>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3304      	adds	r3, #4
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fbd2 	bl	8001d28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d10a      	bne.n	80035a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003592:	4b1a      	ldr	r3, [pc, #104]	@ (80035fc <prvAddCurrentTaskToDelayedList+0x94>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4819      	ldr	r0, [pc, #100]	@ (8003600 <prvAddCurrentTaskToDelayedList+0x98>)
 800359c:	f7fe fb67 	bl	8001c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035a0:	e026      	b.n	80035f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035aa:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <prvAddCurrentTaskToDelayedList+0x94>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d209      	bcs.n	80035ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035ba:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <prvAddCurrentTaskToDelayedList+0x9c>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b0f      	ldr	r3, [pc, #60]	@ (80035fc <prvAddCurrentTaskToDelayedList+0x94>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f7fe fb75 	bl	8001cb6 <vListInsert>
}
 80035cc:	e010      	b.n	80035f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003608 <prvAddCurrentTaskToDelayedList+0xa0>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <prvAddCurrentTaskToDelayedList+0x94>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7fe fb6b 	bl	8001cb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035e0:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <prvAddCurrentTaskToDelayedList+0xa4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d202      	bcs.n	80035f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80035ea:	4a08      	ldr	r2, [pc, #32]	@ (800360c <prvAddCurrentTaskToDelayedList+0xa4>)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	6013      	str	r3, [r2, #0]
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20000c08 	.word	0x20000c08
 80035fc:	20000730 	.word	0x20000730
 8003600:	20000bf0 	.word	0x20000bf0
 8003604:	20000bc0 	.word	0x20000bc0
 8003608:	20000bbc 	.word	0x20000bbc
 800360c:	20000c24 	.word	0x20000c24

08003610 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	@ 0x28
 8003614:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800361a:	f000 fb21 	bl	8003c60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800361e:	4b1e      	ldr	r3, [pc, #120]	@ (8003698 <xTimerCreateTimerTask+0x88>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d021      	beq.n	800366a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800362e:	1d3a      	adds	r2, r7, #4
 8003630:	f107 0108 	add.w	r1, r7, #8
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fad1 	bl	8001be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	9202      	str	r2, [sp, #8]
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	2302      	movs	r3, #2
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2300      	movs	r3, #0
 800364e:	460a      	mov	r2, r1
 8003650:	4912      	ldr	r1, [pc, #72]	@ (800369c <xTimerCreateTimerTask+0x8c>)
 8003652:	4813      	ldr	r0, [pc, #76]	@ (80036a0 <xTimerCreateTimerTask+0x90>)
 8003654:	f7ff f8ac 	bl	80027b0 <xTaskCreateStatic>
 8003658:	4603      	mov	r3, r0
 800365a:	4a12      	ldr	r2, [pc, #72]	@ (80036a4 <xTimerCreateTimerTask+0x94>)
 800365c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800365e:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <xTimerCreateTimerTask+0x94>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003666:	2301      	movs	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10d      	bne.n	800368c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	b672      	cpsid	i
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	b662      	cpsie	i
 8003684:	613b      	str	r3, [r7, #16]
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800368c:	697b      	ldr	r3, [r7, #20]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000c60 	.word	0x20000c60
 800369c:	080045cc 	.word	0x080045cc
 80036a0:	080037e9 	.word	0x080037e9
 80036a4:	20000c64 	.word	0x20000c64

080036a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	@ 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10d      	bne.n	80036dc <xTimerGenericCommand+0x34>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c4:	b672      	cpsid	i
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	b662      	cpsie	i
 80036d4:	623b      	str	r3, [r7, #32]
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	e7fd      	b.n	80036d8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80036dc:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <xTimerGenericCommand+0x9c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d02a      	beq.n	800373a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b05      	cmp	r3, #5
 80036f4:	dc18      	bgt.n	8003728 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80036f6:	f7ff fea5 	bl	8003444 <xTaskGetSchedulerState>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d109      	bne.n	8003714 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003700:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <xTimerGenericCommand+0x9c>)
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	f107 0110 	add.w	r1, r7, #16
 8003708:	2300      	movs	r3, #0
 800370a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370c:	f7fe fc4c 	bl	8001fa8 <xQueueGenericSend>
 8003710:	6278      	str	r0, [r7, #36]	@ 0x24
 8003712:	e012      	b.n	800373a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <xTimerGenericCommand+0x9c>)
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	f107 0110 	add.w	r1, r7, #16
 800371c:	2300      	movs	r3, #0
 800371e:	2200      	movs	r2, #0
 8003720:	f7fe fc42 	bl	8001fa8 <xQueueGenericSend>
 8003724:	6278      	str	r0, [r7, #36]	@ 0x24
 8003726:	e008      	b.n	800373a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <xTimerGenericCommand+0x9c>)
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	f107 0110 	add.w	r1, r7, #16
 8003730:	2300      	movs	r3, #0
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	f7fe fd42 	bl	80021bc <xQueueGenericSendFromISR>
 8003738:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800373c:	4618      	mov	r0, r3
 800373e:	3728      	adds	r7, #40	@ 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000c60 	.word	0x20000c60

08003748 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003752:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <prvProcessExpiredTimer+0x9c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3304      	adds	r3, #4
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fae1 	bl	8001d28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d025      	beq.n	80037c0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	18d1      	adds	r1, r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	6978      	ldr	r0, [r7, #20]
 8003782:	f000 f8d7 	bl	8003934 <prvInsertTimerInActiveList>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d022      	beq.n	80037d2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800378c:	2300      	movs	r3, #0
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	2300      	movs	r3, #0
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	2100      	movs	r1, #0
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff86 	bl	80036a8 <xTimerGenericCommand>
 800379c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d116      	bne.n	80037d2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a8:	b672      	cpsid	i
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	b662      	cpsie	i
 80037b8:	60fb      	str	r3, [r7, #12]
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	e7fd      	b.n	80037bc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	6978      	ldr	r0, [r7, #20]
 80037d8:	4798      	blx	r3
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000c58 	.word	0x20000c58

080037e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037f0:	f107 0308 	add.w	r3, r7, #8
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 f859 	bl	80038ac <prvGetNextExpireTime>
 80037fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4619      	mov	r1, r3
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f805 	bl	8003810 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003806:	f000 f8d7 	bl	80039b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800380a:	bf00      	nop
 800380c:	e7f0      	b.n	80037f0 <prvTimerTask+0x8>
	...

08003810 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800381a:	f7ff fa1b 	bl	8002c54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800381e:	f107 0308 	add.w	r3, r7, #8
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f866 	bl	80038f4 <prvSampleTimeNow>
 8003828:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d130      	bne.n	8003892 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <prvProcessTimerOrBlockTask+0x3c>
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	429a      	cmp	r2, r3
 800383c:	d806      	bhi.n	800384c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800383e:	f7ff fa17 	bl	8002c70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff7f 	bl	8003748 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800384a:	e024      	b.n	8003896 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003852:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <prvProcessTimerOrBlockTask+0x90>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <prvProcessTimerOrBlockTask+0x50>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <prvProcessTimerOrBlockTask+0x52>
 8003860:	2300      	movs	r3, #0
 8003862:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <prvProcessTimerOrBlockTask+0x94>)
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4619      	mov	r1, r3
 8003872:	f7fe ff69 	bl	8002748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003876:	f7ff f9fb 	bl	8002c70 <xTaskResumeAll>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003880:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <prvProcessTimerOrBlockTask+0x98>)
 8003882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	f3bf 8f6f 	isb	sy
}
 8003890:	e001      	b.n	8003896 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003892:	f7ff f9ed 	bl	8002c70 <xTaskResumeAll>
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000c5c 	.word	0x20000c5c
 80038a4:	20000c60 	.word	0x20000c60
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80038b4:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <prvGetNextExpireTime+0x44>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <prvGetNextExpireTime+0x16>
 80038be:	2201      	movs	r2, #1
 80038c0:	e000      	b.n	80038c4 <prvGetNextExpireTime+0x18>
 80038c2:	2200      	movs	r2, #0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d105      	bne.n	80038dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038d0:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <prvGetNextExpireTime+0x44>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	e001      	b.n	80038e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80038e0:	68fb      	ldr	r3, [r7, #12]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000c58 	.word	0x20000c58

080038f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80038fc:	f7ff fa58 	bl	8002db0 <xTaskGetTickCount>
 8003900:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003902:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <prvSampleTimeNow+0x3c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	429a      	cmp	r2, r3
 800390a:	d205      	bcs.n	8003918 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800390c:	f000 f940 	bl	8003b90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e002      	b.n	800391e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800391e:	4a04      	ldr	r2, [pc, #16]	@ (8003930 <prvSampleTimeNow+0x3c>)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003924:	68fb      	ldr	r3, [r7, #12]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000c68 	.word	0x20000c68

08003934 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d812      	bhi.n	8003980 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	429a      	cmp	r2, r3
 8003966:	d302      	bcc.n	800396e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	e01b      	b.n	80039a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800396e:	4b10      	ldr	r3, [pc, #64]	@ (80039b0 <prvInsertTimerInActiveList+0x7c>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3304      	adds	r3, #4
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f7fe f99c 	bl	8001cb6 <vListInsert>
 800397e:	e012      	b.n	80039a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d206      	bcs.n	8003996 <prvInsertTimerInActiveList+0x62>
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d302      	bcc.n	8003996 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003990:	2301      	movs	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e007      	b.n	80039a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003996:	4b07      	ldr	r3, [pc, #28]	@ (80039b4 <prvInsertTimerInActiveList+0x80>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3304      	adds	r3, #4
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f7fe f988 	bl	8001cb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80039a6:	697b      	ldr	r3, [r7, #20]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000c5c 	.word	0x20000c5c
 80039b4:	20000c58 	.word	0x20000c58

080039b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08e      	sub	sp, #56	@ 0x38
 80039bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039be:	e0d4      	b.n	8003b6a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	da1b      	bge.n	80039fe <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80039c6:	1d3b      	adds	r3, r7, #4
 80039c8:	3304      	adds	r3, #4
 80039ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80039cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <prvProcessReceivedCommands+0x36>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d6:	b672      	cpsid	i
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	b662      	cpsie	i
 80039e6:	61fb      	str	r3, [r7, #28]
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	e7fd      	b.n	80039ea <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80039ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f4:	6850      	ldr	r0, [r2, #4]
 80039f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f8:	6892      	ldr	r2, [r2, #8]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f2c0 80b2 	blt.w	8003b6a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	3304      	adds	r3, #4
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe f986 	bl	8001d28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff68 	bl	80038f4 <prvSampleTimeNow>
 8003a24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b09      	cmp	r3, #9
 8003a2a:	f200 809b 	bhi.w	8003b64 <prvProcessReceivedCommands+0x1ac>
 8003a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <prvProcessReceivedCommands+0x7c>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a5d 	.word	0x08003a5d
 8003a40:	08003ad7 	.word	0x08003ad7
 8003a44:	08003aeb 	.word	0x08003aeb
 8003a48:	08003b3b 	.word	0x08003b3b
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a5d 	.word	0x08003a5d
 8003a54:	08003ad7 	.word	0x08003ad7
 8003a58:	08003aeb 	.word	0x08003aeb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	18d1      	adds	r1, r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a7c:	f7ff ff5a 	bl	8003934 <prvInsertTimerInActiveList>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d070      	beq.n	8003b68 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d065      	beq.n	8003b68 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	441a      	add	r2, r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aae:	f7ff fdfb 	bl	80036a8 <xTimerGenericCommand>
 8003ab2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d156      	bne.n	8003b68 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abe:	b672      	cpsid	i
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	b662      	cpsie	i
 8003ace:	61bb      	str	r3, [r7, #24]
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	e7fd      	b.n	8003ad2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003ae8:	e03f      	b.n	8003b6a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0e:	b672      	cpsid	i
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	b662      	cpsie	i
 8003b1e:	617b      	str	r3, [r7, #20]
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	e7fd      	b.n	8003b22 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	18d1      	adds	r1, r2, r3
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b34:	f7ff fefe 	bl	8003934 <prvInsertTimerInActiveList>
					break;
 8003b38:	e017      	b.n	8003b6a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8003b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b4a:	f000 fbd3 	bl	80042f4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003b4e:	e00c      	b.n	8003b6a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003b62:	e002      	b.n	8003b6a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8003b64:	bf00      	nop
 8003b66:	e000      	b.n	8003b6a <prvProcessReceivedCommands+0x1b2>
					break;
 8003b68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b6a:	4b08      	ldr	r3, [pc, #32]	@ (8003b8c <prvProcessReceivedCommands+0x1d4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1d39      	adds	r1, r7, #4
 8003b70:	2200      	movs	r2, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fbc6 	bl	8002304 <xQueueReceive>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f47f af20 	bne.w	80039c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3730      	adds	r7, #48	@ 0x30
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000c60 	.word	0x20000c60

08003b90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b96:	e04b      	b.n	8003c30 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b98:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <prvSwitchTimerLists+0xc8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <prvSwitchTimerLists+0xc8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe f8b9 	bl	8001d28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d031      	beq.n	8003c30 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d90e      	bls.n	8003bfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bea:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <prvSwitchTimerLists+0xc8>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7fe f85e 	bl	8001cb6 <vListInsert>
 8003bfa:	e019      	b.n	8003c30 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	2100      	movs	r1, #0
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff fd4e 	bl	80036a8 <xTimerGenericCommand>
 8003c0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10d      	bne.n	8003c30 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c18:	b672      	cpsid	i
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	b662      	cpsie	i
 8003c28:	603b      	str	r3, [r7, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <prvSwitchTimerLists+0xc8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ae      	bne.n	8003b98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c3a:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <prvSwitchTimerLists+0xc8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c40:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <prvSwitchTimerLists+0xcc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <prvSwitchTimerLists+0xc8>)
 8003c46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003c48:	4a04      	ldr	r2, [pc, #16]	@ (8003c5c <prvSwitchTimerLists+0xcc>)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	6013      	str	r3, [r2, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000c58 	.word	0x20000c58
 8003c5c:	20000c5c 	.word	0x20000c5c

08003c60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003c66:	f000 f949 	bl	8003efc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003c6a:	4b15      	ldr	r3, [pc, #84]	@ (8003cc0 <prvCheckForValidListAndQueue+0x60>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d120      	bne.n	8003cb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003c72:	4814      	ldr	r0, [pc, #80]	@ (8003cc4 <prvCheckForValidListAndQueue+0x64>)
 8003c74:	f7fd ffce 	bl	8001c14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003c78:	4813      	ldr	r0, [pc, #76]	@ (8003cc8 <prvCheckForValidListAndQueue+0x68>)
 8003c7a:	f7fd ffcb 	bl	8001c14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003c7e:	4b13      	ldr	r3, [pc, #76]	@ (8003ccc <prvCheckForValidListAndQueue+0x6c>)
 8003c80:	4a10      	ldr	r2, [pc, #64]	@ (8003cc4 <prvCheckForValidListAndQueue+0x64>)
 8003c82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003c84:	4b12      	ldr	r3, [pc, #72]	@ (8003cd0 <prvCheckForValidListAndQueue+0x70>)
 8003c86:	4a10      	ldr	r2, [pc, #64]	@ (8003cc8 <prvCheckForValidListAndQueue+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <prvCheckForValidListAndQueue+0x74>)
 8003c90:	4a11      	ldr	r2, [pc, #68]	@ (8003cd8 <prvCheckForValidListAndQueue+0x78>)
 8003c92:	2110      	movs	r1, #16
 8003c94:	200a      	movs	r0, #10
 8003c96:	f7fe f8dd 	bl	8001e54 <xQueueGenericCreateStatic>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4a08      	ldr	r2, [pc, #32]	@ (8003cc0 <prvCheckForValidListAndQueue+0x60>)
 8003c9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ca0:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <prvCheckForValidListAndQueue+0x60>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <prvCheckForValidListAndQueue+0x60>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	490b      	ldr	r1, [pc, #44]	@ (8003cdc <prvCheckForValidListAndQueue+0x7c>)
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe fd20 	bl	80026f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cb4:	f000 f958 	bl	8003f68 <vPortExitCritical>
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000c60 	.word	0x20000c60
 8003cc4:	20000c30 	.word	0x20000c30
 8003cc8:	20000c44 	.word	0x20000c44
 8003ccc:	20000c58 	.word	0x20000c58
 8003cd0:	20000c5c 	.word	0x20000c5c
 8003cd4:	20000d0c 	.word	0x20000d0c
 8003cd8:	20000c6c 	.word	0x20000c6c
 8003cdc:	080045d4 	.word	0x080045d4

08003ce0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3b04      	subs	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003cf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b04      	subs	r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f023 0201 	bic.w	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	3b04      	subs	r3, #4
 8003d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d10:	4a0c      	ldr	r2, [pc, #48]	@ (8003d44 <pxPortInitialiseStack+0x64>)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3b14      	subs	r3, #20
 8003d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3b04      	subs	r3, #4
 8003d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f06f 0202 	mvn.w	r2, #2
 8003d2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3b20      	subs	r3, #32
 8003d34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	08003d49 	.word	0x08003d49

08003d48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d52:	4b15      	ldr	r3, [pc, #84]	@ (8003da8 <prvTaskExitError+0x60>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d00d      	beq.n	8003d78 <prvTaskExitError+0x30>
	__asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d60:	b672      	cpsid	i
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	b662      	cpsie	i
 8003d70:	60fb      	str	r3, [r7, #12]
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <prvTaskExitError+0x2c>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	b672      	cpsid	i
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	b662      	cpsie	i
 8003d8c:	60bb      	str	r3, [r7, #8]
}
 8003d8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d90:	bf00      	nop
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0fc      	beq.n	8003d92 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	2000000c 	.word	0x2000000c
 8003dac:	00000000 	.word	0x00000000

08003db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <pxCurrentTCBConst2>)
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	6808      	ldr	r0, [r1, #0]
 8003db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dba:	f380 8809 	msr	PSP, r0
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	f380 8811 	msr	BASEPRI, r0
 8003dca:	4770      	bx	lr
 8003dcc:	f3af 8000 	nop.w

08003dd0 <pxCurrentTCBConst2>:
 8003dd0:	20000730 	.word	0x20000730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop

08003dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003dd8:	4808      	ldr	r0, [pc, #32]	@ (8003dfc <prvPortStartFirstTask+0x24>)
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	6800      	ldr	r0, [r0, #0]
 8003dde:	f380 8808 	msr	MSP, r0
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f380 8814 	msr	CONTROL, r0
 8003dea:	b662      	cpsie	i
 8003dec:	b661      	cpsie	f
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	df00      	svc	0
 8003df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003dfa:	bf00      	nop
 8003dfc:	e000ed08 	.word	0xe000ed08

08003e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e06:	4b37      	ldr	r3, [pc, #220]	@ (8003ee4 <xPortStartScheduler+0xe4>)
 8003e08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	22ff      	movs	r2, #255	@ 0xff
 8003e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee8 <xPortStartScheduler+0xe8>)
 8003e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003eec <xPortStartScheduler+0xec>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e34:	e009      	b.n	8003e4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003e36:	4b2d      	ldr	r3, [pc, #180]	@ (8003eec <xPortStartScheduler+0xec>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003eec <xPortStartScheduler+0xec>)
 8003e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e52:	2b80      	cmp	r3, #128	@ 0x80
 8003e54:	d0ef      	beq.n	8003e36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e56:	4b25      	ldr	r3, [pc, #148]	@ (8003eec <xPortStartScheduler+0xec>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f1c3 0307 	rsb	r3, r3, #7
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d00d      	beq.n	8003e7e <xPortStartScheduler+0x7e>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e66:	b672      	cpsid	i
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	b662      	cpsie	i
 8003e76:	60bb      	str	r3, [r7, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	e7fd      	b.n	8003e7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003eec <xPortStartScheduler+0xec>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	4a19      	ldr	r2, [pc, #100]	@ (8003eec <xPortStartScheduler+0xec>)
 8003e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e88:	4b18      	ldr	r3, [pc, #96]	@ (8003eec <xPortStartScheduler+0xec>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e90:	4a16      	ldr	r2, [pc, #88]	@ (8003eec <xPortStartScheduler+0xec>)
 8003e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ef0 <xPortStartScheduler+0xf0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	@ (8003ef0 <xPortStartScheduler+0xf0>)
 8003ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ea8:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <xPortStartScheduler+0xf0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a10      	ldr	r2, [pc, #64]	@ (8003ef0 <xPortStartScheduler+0xf0>)
 8003eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003eb4:	f000 f8dc 	bl	8004070 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef4 <xPortStartScheduler+0xf4>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ebe:	f000 f8fb 	bl	80040b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <xPortStartScheduler+0xf8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef8 <xPortStartScheduler+0xf8>)
 8003ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ece:	f7ff ff83 	bl	8003dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ed2:	f7ff f839 	bl	8002f48 <vTaskSwitchContext>
	prvTaskExitError();
 8003ed6:	f7ff ff37 	bl	8003d48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	e000e400 	.word	0xe000e400
 8003ee8:	20000d5c 	.word	0x20000d5c
 8003eec:	20000d60 	.word	0x20000d60
 8003ef0:	e000ed20 	.word	0xe000ed20
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	e000ef34 	.word	0xe000ef34

08003efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f06:	b672      	cpsid	i
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	b662      	cpsie	i
 8003f16:	607b      	str	r3, [r7, #4]
}
 8003f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f1a:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <vPortEnterCritical+0x64>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4a0f      	ldr	r2, [pc, #60]	@ (8003f60 <vPortEnterCritical+0x64>)
 8003f22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f24:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <vPortEnterCritical+0x64>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d112      	bne.n	8003f52 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <vPortEnterCritical+0x68>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <vPortEnterCritical+0x56>
	__asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3a:	b672      	cpsid	i
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	b662      	cpsie	i
 8003f4a:	603b      	str	r3, [r7, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	e7fd      	b.n	8003f4e <vPortEnterCritical+0x52>
	}
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	2000000c 	.word	0x2000000c
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f6e:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <vPortExitCritical+0x54>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <vPortExitCritical+0x2a>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7a:	b672      	cpsid	i
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	b662      	cpsie	i
 8003f8a:	607b      	str	r3, [r7, #4]
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8003f92:	4b0a      	ldr	r3, [pc, #40]	@ (8003fbc <vPortExitCritical+0x54>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	4a08      	ldr	r2, [pc, #32]	@ (8003fbc <vPortExitCritical+0x54>)
 8003f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f9c:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <vPortExitCritical+0x54>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <vPortExitCritical+0x48>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f383 8811 	msr	BASEPRI, r3
}
 8003fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	2000000c 	.word	0x2000000c

08003fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003fc0:	f3ef 8009 	mrs	r0, PSP
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <pxCurrentTCBConst>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	f01e 0f10 	tst.w	lr, #16
 8003fd0:	bf08      	it	eq
 8003fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fda:	6010      	str	r0, [r2, #0]
 8003fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003fe4:	b672      	cpsid	i
 8003fe6:	f380 8811 	msr	BASEPRI, r0
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	b662      	cpsie	i
 8003ff4:	f7fe ffa8 	bl	8002f48 <vTaskSwitchContext>
 8003ff8:	f04f 0000 	mov.w	r0, #0
 8003ffc:	f380 8811 	msr	BASEPRI, r0
 8004000:	bc09      	pop	{r0, r3}
 8004002:	6819      	ldr	r1, [r3, #0]
 8004004:	6808      	ldr	r0, [r1, #0]
 8004006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400a:	f01e 0f10 	tst.w	lr, #16
 800400e:	bf08      	it	eq
 8004010:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004014:	f380 8809 	msr	PSP, r0
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop

08004020 <pxCurrentTCBConst>:
 8004020:	20000730 	.word	0x20000730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop

08004028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004032:	b672      	cpsid	i
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	b662      	cpsie	i
 8004042:	607b      	str	r3, [r7, #4]
}
 8004044:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004046:	f7fe fec3 	bl	8002dd0 <xTaskIncrementTick>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004050:	4b06      	ldr	r3, [pc, #24]	@ (800406c <xPortSysTickHandler+0x44>)
 8004052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f383 8811 	msr	BASEPRI, r3
}
 8004062:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004074:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <vPortSetupTimerInterrupt+0x34>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800407a:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <vPortSetupTimerInterrupt+0x38>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004080:	4b0a      	ldr	r3, [pc, #40]	@ (80040ac <vPortSetupTimerInterrupt+0x3c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0a      	ldr	r2, [pc, #40]	@ (80040b0 <vPortSetupTimerInterrupt+0x40>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	099b      	lsrs	r3, r3, #6
 800408c:	4a09      	ldr	r2, [pc, #36]	@ (80040b4 <vPortSetupTimerInterrupt+0x44>)
 800408e:	3b01      	subs	r3, #1
 8004090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004092:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <vPortSetupTimerInterrupt+0x34>)
 8004094:	2207      	movs	r2, #7
 8004096:	601a      	str	r2, [r3, #0]
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000e010 	.word	0xe000e010
 80040a8:	e000e018 	.word	0xe000e018
 80040ac:	20000000 	.word	0x20000000
 80040b0:	10624dd3 	.word	0x10624dd3
 80040b4:	e000e014 	.word	0xe000e014

080040b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80040b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80040c8 <vPortEnableVFP+0x10>
 80040bc:	6801      	ldr	r1, [r0, #0]
 80040be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80040c2:	6001      	str	r1, [r0, #0]
 80040c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80040c6:	bf00      	nop
 80040c8:	e000ed88 	.word	0xe000ed88

080040cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80040d2:	f3ef 8305 	mrs	r3, IPSR
 80040d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b0f      	cmp	r3, #15
 80040dc:	d917      	bls.n	800410e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040de:	4a1a      	ldr	r2, [pc, #104]	@ (8004148 <vPortValidateInterruptPriority+0x7c>)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040e8:	4b18      	ldr	r3, [pc, #96]	@ (800414c <vPortValidateInterruptPriority+0x80>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	7afa      	ldrb	r2, [r7, #11]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d20d      	bcs.n	800410e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f6:	b672      	cpsid	i
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	b662      	cpsie	i
 8004106:	607b      	str	r3, [r7, #4]
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	e7fd      	b.n	800410a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800410e:	4b10      	ldr	r3, [pc, #64]	@ (8004150 <vPortValidateInterruptPriority+0x84>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004116:	4b0f      	ldr	r3, [pc, #60]	@ (8004154 <vPortValidateInterruptPriority+0x88>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d90d      	bls.n	800413a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004122:	b672      	cpsid	i
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	b662      	cpsie	i
 8004132:	603b      	str	r3, [r7, #0]
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	e7fd      	b.n	8004136 <vPortValidateInterruptPriority+0x6a>
	}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	e000e3f0 	.word	0xe000e3f0
 800414c:	20000d5c 	.word	0x20000d5c
 8004150:	e000ed0c 	.word	0xe000ed0c
 8004154:	20000d60 	.word	0x20000d60

08004158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08a      	sub	sp, #40	@ 0x28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004164:	f7fe fd76 	bl	8002c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004168:	4b5d      	ldr	r3, [pc, #372]	@ (80042e0 <pvPortMalloc+0x188>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004170:	f000 f920 	bl	80043b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004174:	4b5b      	ldr	r3, [pc, #364]	@ (80042e4 <pvPortMalloc+0x18c>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 8094 	bne.w	80042aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8004188:	2208      	movs	r2, #8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	2b00      	cmp	r3, #0
 8004198:	d017      	beq.n	80041ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f023 0307 	bic.w	r3, r3, #7
 80041a0:	3308      	adds	r3, #8
 80041a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <pvPortMalloc+0x72>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b2:	b672      	cpsid	i
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	b662      	cpsie	i
 80041c2:	617b      	str	r3, [r7, #20]
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	e7fd      	b.n	80041c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d06c      	beq.n	80042aa <pvPortMalloc+0x152>
 80041d0:	4b45      	ldr	r3, [pc, #276]	@ (80042e8 <pvPortMalloc+0x190>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d867      	bhi.n	80042aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041da:	4b44      	ldr	r3, [pc, #272]	@ (80042ec <pvPortMalloc+0x194>)
 80041dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041de:	4b43      	ldr	r3, [pc, #268]	@ (80042ec <pvPortMalloc+0x194>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041e4:	e004      	b.n	80041f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d903      	bls.n	8004202 <pvPortMalloc+0xaa>
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f1      	bne.n	80041e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004202:	4b37      	ldr	r3, [pc, #220]	@ (80042e0 <pvPortMalloc+0x188>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004208:	429a      	cmp	r2, r3
 800420a:	d04e      	beq.n	80042aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2208      	movs	r2, #8
 8004212:	4413      	add	r3, r2
 8004214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	1ad2      	subs	r2, r2, r3
 8004226:	2308      	movs	r3, #8
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	429a      	cmp	r2, r3
 800422c:	d922      	bls.n	8004274 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800422e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <pvPortMalloc+0x104>
	__asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	b672      	cpsid	i
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	b662      	cpsie	i
 8004254:	613b      	str	r3, [r7, #16]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1ad2      	subs	r2, r2, r3
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800426e:	69b8      	ldr	r0, [r7, #24]
 8004270:	f000 f902 	bl	8004478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004274:	4b1c      	ldr	r3, [pc, #112]	@ (80042e8 <pvPortMalloc+0x190>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	4a1a      	ldr	r2, [pc, #104]	@ (80042e8 <pvPortMalloc+0x190>)
 8004280:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004282:	4b19      	ldr	r3, [pc, #100]	@ (80042e8 <pvPortMalloc+0x190>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <pvPortMalloc+0x198>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d203      	bcs.n	8004296 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800428e:	4b16      	ldr	r3, [pc, #88]	@ (80042e8 <pvPortMalloc+0x190>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a17      	ldr	r2, [pc, #92]	@ (80042f0 <pvPortMalloc+0x198>)
 8004294:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <pvPortMalloc+0x18c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	431a      	orrs	r2, r3
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042aa:	f7fe fce1 	bl	8002c70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <pvPortMalloc+0x17c>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	b672      	cpsid	i
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	b662      	cpsie	i
 80042cc:	60fb      	str	r3, [r7, #12]
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <pvPortMalloc+0x178>
	return pvReturn;
 80042d4:	69fb      	ldr	r3, [r7, #28]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3728      	adds	r7, #40	@ 0x28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	2000496c 	.word	0x2000496c
 80042e4:	20004978 	.word	0x20004978
 80042e8:	20004970 	.word	0x20004970
 80042ec:	20004964 	.word	0x20004964
 80042f0:	20004974 	.word	0x20004974

080042f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04e      	beq.n	80043a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004306:	2308      	movs	r3, #8
 8004308:	425b      	negs	r3, r3
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4413      	add	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <vPortFree+0xb8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <vPortFree+0x4a>
	__asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004326:	b672      	cpsid	i
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	b662      	cpsie	i
 8004336:	60fb      	str	r3, [r7, #12]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <vPortFree+0x6e>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	b672      	cpsid	i
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	b662      	cpsie	i
 800435a:	60bb      	str	r3, [r7, #8]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <vPortFree+0xb8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d019      	beq.n	80043a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d115      	bne.n	80043a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <vPortFree+0xb8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	43db      	mvns	r3, r3
 8004382:	401a      	ands	r2, r3
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004388:	f7fe fc64 	bl	8002c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <vPortFree+0xbc>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4413      	add	r3, r2
 8004396:	4a06      	ldr	r2, [pc, #24]	@ (80043b0 <vPortFree+0xbc>)
 8004398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800439a:	6938      	ldr	r0, [r7, #16]
 800439c:	f000 f86c 	bl	8004478 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043a0:	f7fe fc66 	bl	8002c70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043a4:	bf00      	nop
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20004978 	.word	0x20004978
 80043b0:	20004970 	.word	0x20004970

080043b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80043be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043c0:	4b27      	ldr	r3, [pc, #156]	@ (8004460 <prvHeapInit+0xac>)
 80043c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3307      	adds	r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <prvHeapInit+0xac>)
 80043e4:	4413      	add	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004464 <prvHeapInit+0xb0>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004464 <prvHeapInit+0xb0>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4413      	add	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004400:	2208      	movs	r2, #8
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0307 	bic.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a15      	ldr	r2, [pc, #84]	@ (8004468 <prvHeapInit+0xb4>)
 8004414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004416:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <prvHeapInit+0xb4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800441e:	4b12      	ldr	r3, [pc, #72]	@ (8004468 <prvHeapInit+0xb4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <prvHeapInit+0xb4>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4a0a      	ldr	r2, [pc, #40]	@ (800446c <prvHeapInit+0xb8>)
 8004442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a09      	ldr	r2, [pc, #36]	@ (8004470 <prvHeapInit+0xbc>)
 800444a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <prvHeapInit+0xc0>)
 800444e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004452:	601a      	str	r2, [r3, #0]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	20000d64 	.word	0x20000d64
 8004464:	20004964 	.word	0x20004964
 8004468:	2000496c 	.word	0x2000496c
 800446c:	20004974 	.word	0x20004974
 8004470:	20004970 	.word	0x20004970
 8004474:	20004978 	.word	0x20004978

08004478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004480:	4b28      	ldr	r3, [pc, #160]	@ (8004524 <prvInsertBlockIntoFreeList+0xac>)
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e002      	b.n	800448c <prvInsertBlockIntoFreeList+0x14>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	d8f7      	bhi.n	8004486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4413      	add	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d108      	bne.n	80044ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	441a      	add	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	441a      	add	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d118      	bne.n	8004500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <prvInsertBlockIntoFreeList+0xb0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d00d      	beq.n	80044f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e008      	b.n	8004508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <prvInsertBlockIntoFreeList+0xb0>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e003      	b.n	8004508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d002      	beq.n	8004516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20004964 	.word	0x20004964
 8004528:	2000496c 	.word	0x2000496c

0800452c <memset>:
 800452c:	4402      	add	r2, r0
 800452e:	4603      	mov	r3, r0
 8004530:	4293      	cmp	r3, r2
 8004532:	d100      	bne.n	8004536 <memset+0xa>
 8004534:	4770      	bx	lr
 8004536:	f803 1b01 	strb.w	r1, [r3], #1
 800453a:	e7f9      	b.n	8004530 <memset+0x4>

0800453c <__libc_init_array>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4d0d      	ldr	r5, [pc, #52]	@ (8004574 <__libc_init_array+0x38>)
 8004540:	4c0d      	ldr	r4, [pc, #52]	@ (8004578 <__libc_init_array+0x3c>)
 8004542:	1b64      	subs	r4, r4, r5
 8004544:	10a4      	asrs	r4, r4, #2
 8004546:	2600      	movs	r6, #0
 8004548:	42a6      	cmp	r6, r4
 800454a:	d109      	bne.n	8004560 <__libc_init_array+0x24>
 800454c:	4d0b      	ldr	r5, [pc, #44]	@ (800457c <__libc_init_array+0x40>)
 800454e:	4c0c      	ldr	r4, [pc, #48]	@ (8004580 <__libc_init_array+0x44>)
 8004550:	f000 f826 	bl	80045a0 <_init>
 8004554:	1b64      	subs	r4, r4, r5
 8004556:	10a4      	asrs	r4, r4, #2
 8004558:	2600      	movs	r6, #0
 800455a:	42a6      	cmp	r6, r4
 800455c:	d105      	bne.n	800456a <__libc_init_array+0x2e>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	f855 3b04 	ldr.w	r3, [r5], #4
 8004564:	4798      	blx	r3
 8004566:	3601      	adds	r6, #1
 8004568:	e7ee      	b.n	8004548 <__libc_init_array+0xc>
 800456a:	f855 3b04 	ldr.w	r3, [r5], #4
 800456e:	4798      	blx	r3
 8004570:	3601      	adds	r6, #1
 8004572:	e7f2      	b.n	800455a <__libc_init_array+0x1e>
 8004574:	08004618 	.word	0x08004618
 8004578:	08004618 	.word	0x08004618
 800457c:	08004618 	.word	0x08004618
 8004580:	0800461c 	.word	0x0800461c

08004584 <memcpy>:
 8004584:	440a      	add	r2, r1
 8004586:	4291      	cmp	r1, r2
 8004588:	f100 33ff 	add.w	r3, r0, #4294967295
 800458c:	d100      	bne.n	8004590 <memcpy+0xc>
 800458e:	4770      	bx	lr
 8004590:	b510      	push	{r4, lr}
 8004592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800459a:	4291      	cmp	r1, r2
 800459c:	d1f9      	bne.n	8004592 <memcpy+0xe>
 800459e:	bd10      	pop	{r4, pc}

080045a0 <_init>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr

080045ac <_fini>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr
