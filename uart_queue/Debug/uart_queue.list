
uart_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008928  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cd4  08008cd4  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008cd4  08008cd4  00018cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cdc  08008cdc  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000060  08008d44  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000100  08008de4  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005d5c  200001a0  08008e84  000201a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005efc  08008e84  00025efc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ce  2**0
                  CONTENTS, READONLY
 15 .debug_info   00021f1d  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004149  00000000  00000000  0004212e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001948  00000000  00000000  00046278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001381  00000000  00000000  00047bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000072d6  00000000  00000000  00048f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001cbbc  00000000  00000000  00050217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010a819  00000000  00000000  0006cdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006d34  00000000  00000000  001775ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000080  00000000  00000000  0017e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a0 	.word	0x200001a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08008b10 	.word	0x08008b10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a4 	.word	0x200001a4
 800023c:	08008b10 	.word	0x08008b10

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001bc 	.word	0x200001bc

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b970 	b.w	80005cc <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9e08      	ldr	r6, [sp, #32]
 800030a:	460d      	mov	r5, r1
 800030c:	4604      	mov	r4, r0
 800030e:	460f      	mov	r7, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14a      	bne.n	80003aa <__udivmoddi4+0xa6>
 8000314:	428a      	cmp	r2, r1
 8000316:	4694      	mov	ip, r2
 8000318:	d965      	bls.n	80003e6 <__udivmoddi4+0xe2>
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	b143      	cbz	r3, 8000332 <__udivmoddi4+0x2e>
 8000320:	fa02 fc03 	lsl.w	ip, r2, r3
 8000324:	f1c3 0220 	rsb	r2, r3, #32
 8000328:	409f      	lsls	r7, r3
 800032a:	fa20 f202 	lsr.w	r2, r0, r2
 800032e:	4317      	orrs	r7, r2
 8000330:	409c      	lsls	r4, r3
 8000332:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000336:	fa1f f58c 	uxth.w	r5, ip
 800033a:	fbb7 f1fe 	udiv	r1, r7, lr
 800033e:	0c22      	lsrs	r2, r4, #16
 8000340:	fb0e 7711 	mls	r7, lr, r1, r7
 8000344:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000348:	fb01 f005 	mul.w	r0, r1, r5
 800034c:	4290      	cmp	r0, r2
 800034e:	d90a      	bls.n	8000366 <__udivmoddi4+0x62>
 8000350:	eb1c 0202 	adds.w	r2, ip, r2
 8000354:	f101 37ff 	add.w	r7, r1, #4294967295
 8000358:	f080 811c 	bcs.w	8000594 <__udivmoddi4+0x290>
 800035c:	4290      	cmp	r0, r2
 800035e:	f240 8119 	bls.w	8000594 <__udivmoddi4+0x290>
 8000362:	3902      	subs	r1, #2
 8000364:	4462      	add	r2, ip
 8000366:	1a12      	subs	r2, r2, r0
 8000368:	b2a4      	uxth	r4, r4
 800036a:	fbb2 f0fe 	udiv	r0, r2, lr
 800036e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000372:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000376:	fb00 f505 	mul.w	r5, r0, r5
 800037a:	42a5      	cmp	r5, r4
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x90>
 800037e:	eb1c 0404 	adds.w	r4, ip, r4
 8000382:	f100 32ff 	add.w	r2, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x294>
 800038a:	42a5      	cmp	r5, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x294>
 8000390:	4464      	add	r4, ip
 8000392:	3802      	subs	r0, #2
 8000394:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	2100      	movs	r1, #0
 800039c:	b11e      	cbz	r6, 80003a6 <__udivmoddi4+0xa2>
 800039e:	40dc      	lsrs	r4, r3
 80003a0:	2300      	movs	r3, #0
 80003a2:	e9c6 4300 	strd	r4, r3, [r6]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0xbc>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	f000 80ed 	beq.w	800058e <__udivmoddi4+0x28a>
 80003b4:	2100      	movs	r1, #0
 80003b6:	e9c6 0500 	strd	r0, r5, [r6]
 80003ba:	4608      	mov	r0, r1
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	fab3 f183 	clz	r1, r3
 80003c4:	2900      	cmp	r1, #0
 80003c6:	d149      	bne.n	800045c <__udivmoddi4+0x158>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d302      	bcc.n	80003d2 <__udivmoddi4+0xce>
 80003cc:	4282      	cmp	r2, r0
 80003ce:	f200 80f8 	bhi.w	80005c2 <__udivmoddi4+0x2be>
 80003d2:	1a84      	subs	r4, r0, r2
 80003d4:	eb65 0203 	sbc.w	r2, r5, r3
 80003d8:	2001      	movs	r0, #1
 80003da:	4617      	mov	r7, r2
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d0e2      	beq.n	80003a6 <__udivmoddi4+0xa2>
 80003e0:	e9c6 4700 	strd	r4, r7, [r6]
 80003e4:	e7df      	b.n	80003a6 <__udivmoddi4+0xa2>
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xe6>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f382 	clz	r3, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x210>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	2101      	movs	r1, #1
 8000400:	fbb2 f5f7 	udiv	r5, r2, r7
 8000404:	fb07 2015 	mls	r0, r7, r5, r2
 8000408:	0c22      	lsrs	r2, r4, #16
 800040a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040e:	fb0e f005 	mul.w	r0, lr, r5
 8000412:	4290      	cmp	r0, r2
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x124>
 8000416:	eb1c 0202 	adds.w	r2, ip, r2
 800041a:	f105 38ff 	add.w	r8, r5, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x122>
 8000420:	4290      	cmp	r0, r2
 8000422:	f200 80cb 	bhi.w	80005bc <__udivmoddi4+0x2b8>
 8000426:	4645      	mov	r5, r8
 8000428:	1a12      	subs	r2, r2, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000430:	fb07 2210 	mls	r2, r7, r0, r2
 8000434:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000438:	fb0e fe00 	mul.w	lr, lr, r0
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x14e>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 32ff 	add.w	r2, r0, #4294967295
 8000448:	d202      	bcs.n	8000450 <__udivmoddi4+0x14c>
 800044a:	45a6      	cmp	lr, r4
 800044c:	f200 80bb 	bhi.w	80005c6 <__udivmoddi4+0x2c2>
 8000450:	4610      	mov	r0, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045a:	e79f      	b.n	800039c <__udivmoddi4+0x98>
 800045c:	f1c1 0720 	rsb	r7, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 fc07 	lsr.w	ip, r2, r7
 8000466:	ea4c 0c03 	orr.w	ip, ip, r3
 800046a:	fa05 f401 	lsl.w	r4, r5, r1
 800046e:	fa20 f307 	lsr.w	r3, r0, r7
 8000472:	40fd      	lsrs	r5, r7
 8000474:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fbb5 f8f9 	udiv	r8, r5, r9
 800047e:	fa1f fe8c 	uxth.w	lr, ip
 8000482:	fb09 5518 	mls	r5, r9, r8, r5
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800048c:	fb08 f50e 	mul.w	r5, r8, lr
 8000490:	42a5      	cmp	r5, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	fa00 f001 	lsl.w	r0, r0, r1
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x1b0>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a4:	f080 8088 	bcs.w	80005b8 <__udivmoddi4+0x2b4>
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	f240 8085 	bls.w	80005b8 <__udivmoddi4+0x2b4>
 80004ae:	f1a8 0802 	sub.w	r8, r8, #2
 80004b2:	4464      	add	r4, ip
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	b29d      	uxth	r5, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1da>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d4:	d26c      	bcs.n	80005b0 <__udivmoddi4+0x2ac>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	d96a      	bls.n	80005b0 <__udivmoddi4+0x2ac>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4464      	add	r4, ip
 80004de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e2:	fba3 9502 	umull	r9, r5, r3, r2
 80004e6:	eba4 040e 	sub.w	r4, r4, lr
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	46c8      	mov	r8, r9
 80004ee:	46ae      	mov	lr, r5
 80004f0:	d356      	bcc.n	80005a0 <__udivmoddi4+0x29c>
 80004f2:	d053      	beq.n	800059c <__udivmoddi4+0x298>
 80004f4:	b156      	cbz	r6, 800050c <__udivmoddi4+0x208>
 80004f6:	ebb0 0208 	subs.w	r2, r0, r8
 80004fa:	eb64 040e 	sbc.w	r4, r4, lr
 80004fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000502:	40ca      	lsrs	r2, r1
 8000504:	40cc      	lsrs	r4, r1
 8000506:	4317      	orrs	r7, r2
 8000508:	e9c6 7400 	strd	r7, r4, [r6]
 800050c:	4618      	mov	r0, r3
 800050e:	2100      	movs	r1, #0
 8000510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000514:	f1c3 0120 	rsb	r1, r3, #32
 8000518:	fa02 fc03 	lsl.w	ip, r2, r3
 800051c:	fa20 f201 	lsr.w	r2, r0, r1
 8000520:	fa25 f101 	lsr.w	r1, r5, r1
 8000524:	409d      	lsls	r5, r3
 8000526:	432a      	orrs	r2, r5
 8000528:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800052c:	fa1f fe8c 	uxth.w	lr, ip
 8000530:	fbb1 f0f7 	udiv	r0, r1, r7
 8000534:	fb07 1510 	mls	r5, r7, r0, r1
 8000538:	0c11      	lsrs	r1, r2, #16
 800053a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053e:	fb00 f50e 	mul.w	r5, r0, lr
 8000542:	428d      	cmp	r5, r1
 8000544:	fa04 f403 	lsl.w	r4, r4, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x258>
 800054a:	eb1c 0101 	adds.w	r1, ip, r1
 800054e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000552:	d22f      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000554:	428d      	cmp	r5, r1
 8000556:	d92d      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 8000558:	3802      	subs	r0, #2
 800055a:	4461      	add	r1, ip
 800055c:	1b49      	subs	r1, r1, r5
 800055e:	b292      	uxth	r2, r2
 8000560:	fbb1 f5f7 	udiv	r5, r1, r7
 8000564:	fb07 1115 	mls	r1, r7, r5, r1
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	fb05 f10e 	mul.w	r1, r5, lr
 8000570:	4291      	cmp	r1, r2
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x282>
 8000574:	eb1c 0202 	adds.w	r2, ip, r2
 8000578:	f105 38ff 	add.w	r8, r5, #4294967295
 800057c:	d216      	bcs.n	80005ac <__udivmoddi4+0x2a8>
 800057e:	4291      	cmp	r1, r2
 8000580:	d914      	bls.n	80005ac <__udivmoddi4+0x2a8>
 8000582:	3d02      	subs	r5, #2
 8000584:	4462      	add	r2, ip
 8000586:	1a52      	subs	r2, r2, r1
 8000588:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800058c:	e738      	b.n	8000400 <__udivmoddi4+0xfc>
 800058e:	4631      	mov	r1, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xa2>
 8000594:	4639      	mov	r1, r7
 8000596:	e6e6      	b.n	8000366 <__udivmoddi4+0x62>
 8000598:	4610      	mov	r0, r2
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x90>
 800059c:	4548      	cmp	r0, r9
 800059e:	d2a9      	bcs.n	80004f4 <__udivmoddi4+0x1f0>
 80005a0:	ebb9 0802 	subs.w	r8, r9, r2
 80005a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a8:	3b01      	subs	r3, #1
 80005aa:	e7a3      	b.n	80004f4 <__udivmoddi4+0x1f0>
 80005ac:	4645      	mov	r5, r8
 80005ae:	e7ea      	b.n	8000586 <__udivmoddi4+0x282>
 80005b0:	462b      	mov	r3, r5
 80005b2:	e794      	b.n	80004de <__udivmoddi4+0x1da>
 80005b4:	4640      	mov	r0, r8
 80005b6:	e7d1      	b.n	800055c <__udivmoddi4+0x258>
 80005b8:	46d0      	mov	r8, sl
 80005ba:	e77b      	b.n	80004b4 <__udivmoddi4+0x1b0>
 80005bc:	3d02      	subs	r5, #2
 80005be:	4462      	add	r2, ip
 80005c0:	e732      	b.n	8000428 <__udivmoddi4+0x124>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e70a      	b.n	80003dc <__udivmoddi4+0xd8>
 80005c6:	4464      	add	r4, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e742      	b.n	8000452 <__udivmoddi4+0x14e>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <_DoInit+0xa0>)
 80005d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005da:	22a8      	movs	r2, #168	; 0xa8
 80005dc:	2100      	movs	r1, #0
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f008 f9ac 	bl	800893c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	2203      	movs	r2, #3
 80005e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2203      	movs	r2, #3
 80005ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	4a20      	ldr	r2, [pc, #128]	; (8000674 <_DoInit+0xa4>)
 80005f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <_DoInit+0xa8>)
 80005fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000602:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2200      	movs	r2, #0
 8000608:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <_DoInit+0xa4>)
 800061a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <_DoInit+0xac>)
 8000620:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2210      	movs	r2, #16
 8000626:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2200      	movs	r2, #0
 800062c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2200      	movs	r2, #0
 8000632:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2200      	movs	r2, #0
 8000638:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800063a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e00c      	b.n	800065e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f1c3 030f 	rsb	r3, r3, #15
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <_DoInit+0xb0>)
 800064c:	5cd1      	ldrb	r1, [r2, r3]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	460a      	mov	r2, r1
 8000656:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d9ef      	bls.n	8000644 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000664:	f3bf 8f5f 	dmb	sy
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200001bc 	.word	0x200001bc
 8000674:	08008b28 	.word	0x08008b28
 8000678:	20000264 	.word	0x20000264
 800067c:	20000664 	.word	0x20000664
 8000680:	08008bfc 	.word	0x08008bfc

08000684 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	; 0x30
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 8000692:	623b      	str	r3, [r7, #32]
 8000694:	6a3b      	ldr	r3, [r7, #32]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <SEGGER_RTT_ReadNoLock+0x1e>
 800069e:	f7ff ff97 	bl	80005d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4613      	mov	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	3360      	adds	r3, #96	; 0x60
 80006ae:	4a37      	ldr	r2, [pc, #220]	; (800078c <SEGGER_RTT_ReadNoLock+0x108>)
 80006b0:	4413      	add	r3, r2
 80006b2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d92b      	bls.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4293      	cmp	r3, r2
 80006e0:	bf28      	it	cs
 80006e2:	4613      	movcs	r3, r2
 80006e4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	685a      	ldr	r2, [r3, #4]
 80006ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ec:	4413      	add	r3, r2
 80006ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f6:	f008 f9a5 	bl	8008a44 <memcpy>
    NumBytesRead += NumBytesRem;
 80006fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	4413      	add	r3, r2
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	4413      	add	r3, r2
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000720:	429a      	cmp	r2, r3
 8000722:	d101      	bne.n	8000728 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4293      	cmp	r3, r2
 8000736:	bf28      	it	cs
 8000738:	4613      	movcs	r3, r2
 800073a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d019      	beq.n	8000776 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	4413      	add	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	6939      	ldr	r1, [r7, #16]
 8000750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000752:	f008 f977 	bl	8008a44 <memcpy>
    NumBytesRead += NumBytesRem;
 8000756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	4413      	add	r3, r2
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800075e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800076e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	4413      	add	r3, r2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	2b00      	cmp	r3, #0
 800077a:	d002      	beq.n	8000782 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000780:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000784:	4618      	mov	r0, r3
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001bc 	.word	0x200001bc

08000790 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007ac:	f7ff ff10 	bl	80005d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b0:	f3ef 8311 	mrs	r3, BASEPRI
 80007b4:	f04f 0120 	mov.w	r1, #32
 80007b8:	f381 8811 	msr	BASEPRI, r1
 80007bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007be:	4b35      	ldr	r3, [pc, #212]	; (8000894 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007c6:	6939      	ldr	r1, [r7, #16]
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3304      	adds	r3, #4
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3301      	adds	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbeb      	blt.n	80007c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80007ee:	e000      	b.n	80007f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	da3f      	bge.n	800087c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80007fc:	6939      	ldr	r1, [r7, #16]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000810:	6939      	ldr	r1, [r7, #16]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000826:	6939      	ldr	r1, [r7, #16]
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	4613      	mov	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	3320      	adds	r3, #32
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800083a:	6939      	ldr	r1, [r7, #16]
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	4613      	mov	r3, r2
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	4413      	add	r3, r2
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	440b      	add	r3, r1
 8000848:	3328      	adds	r3, #40	; 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800084e:	6939      	ldr	r1, [r7, #16]
 8000850:	69fa      	ldr	r2, [r7, #28]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3324      	adds	r3, #36	; 0x24
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000862:	6939      	ldr	r1, [r7, #16]
 8000864:	69fa      	ldr	r2, [r7, #28]
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	332c      	adds	r3, #44	; 0x2c
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000876:	f3bf 8f5f 	dmb	sy
 800087a:	e002      	b.n	8000882 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000888:	69fb      	ldr	r3, [r7, #28]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001bc 	.word	0x200001bc

08000898 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008a8:	623b      	str	r3, [r7, #32]
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008b4:	f7ff fe8c 	bl	80005d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d82c      	bhi.n	800091c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008c2:	f3ef 8311 	mrs	r3, BASEPRI
 80008c6:	f04f 0120 	mov.w	r1, #32
 80008ca:	f381 8811 	msr	BASEPRI, r1
 80008ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	3360      	adds	r3, #96	; 0x60
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4413      	add	r3, r2
 80008e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d00e      	beq.n	8000906 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800090a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800090c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
 800091a:	e002      	b.n	8000922 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000924:	4618      	mov	r0, r3
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001bc 	.word	0x200001bc

08000930 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60fa      	str	r2, [r7, #12]
 8000946:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b80      	cmp	r3, #128	; 0x80
 800094c:	d90a      	bls.n	8000964 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000952:	e007      	b.n	8000964 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	1c53      	adds	r3, r2, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1c59      	adds	r1, r3, #1
 800095e:	60f9      	str	r1, [r7, #12]
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <_EncodeStr+0x46>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1ee      	bne.n	8000954 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3307      	adds	r3, #7
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 80009b0:	7e1b      	ldrb	r3, [r3, #24]
 80009b2:	4618      	mov	r0, r3
 80009b4:	1cfb      	adds	r3, r7, #3
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff fe63 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 80009be:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d057      	beq.n	8000a76 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b80      	cmp	r3, #128	; 0x80
 80009ca:	d031      	beq.n	8000a30 <_HandleIncomingPacket+0x88>
 80009cc:	2b80      	cmp	r3, #128	; 0x80
 80009ce:	dc40      	bgt.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	dc15      	bgt.n	8000a00 <_HandleIncomingPacket+0x58>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd3c      	ble.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009d8:	3b01      	subs	r3, #1
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d839      	bhi.n	8000a52 <_HandleIncomingPacket+0xaa>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <_HandleIncomingPacket+0x3c>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a07 	.word	0x08000a07
 80009e8:	08000a0d 	.word	0x08000a0d
 80009ec:	08000a13 	.word	0x08000a13
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	08000a1f 	.word	0x08000a1f
 80009f8:	08000a25 	.word	0x08000a25
 80009fc:	08000a2b 	.word	0x08000a2b
 8000a00:	2b7f      	cmp	r3, #127	; 0x7f
 8000a02:	d033      	beq.n	8000a6c <_HandleIncomingPacket+0xc4>
 8000a04:	e025      	b.n	8000a52 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a06:	f000 fbe3 	bl	80011d0 <SEGGER_SYSVIEW_Start>
      break;
 8000a0a:	e034      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a0c:	f000 fc9a 	bl	8001344 <SEGGER_SYSVIEW_Stop>
      break;
 8000a10:	e031      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a12:	f000 fe73 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a16:	e02e      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a18:	f000 fe38 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a1c:	e02b      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a1e:	f000 fcb7 	bl	8001390 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a22:	e028      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a24:	f000 ff44 	bl	80018b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a28:	e025      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a2a:	f000 ff23 	bl	8001874 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a2e:	e022      	b.n	8000a76 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a32:	7e1b      	ldrb	r3, [r3, #24]
 8000a34:	4618      	mov	r0, r3
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fe22 	bl	8000684 <SEGGER_RTT_ReadNoLock>
 8000a40:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fe88 	bl	8001760 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a50:	e00e      	b.n	8000a70 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da0c      	bge.n	8000a74 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <_HandleIncomingPacket+0xd8>)
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	1cfb      	adds	r3, r7, #3
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f7ff fe0d 	bl	8000684 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a6a:	e003      	b.n	8000a74 <_HandleIncomingPacket+0xcc>
      break;
 8000a6c:	bf00      	nop
 8000a6e:	e002      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a70:	bf00      	nop
 8000a72:	e000      	b.n	8000a76 <_HandleIncomingPacket+0xce>
      break;
 8000a74:	bf00      	nop
    }
  }
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000a7c 	.word	0x20000a7c

08000a84 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	3301      	adds	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a98:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9e:	e00b      	b.n	8000ab8 <_TrySendOverflowPacket+0x34>
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	09db      	lsrs	r3, r3, #7
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aba:	2b7f      	cmp	r3, #127	; 0x7f
 8000abc:	d8f0      	bhi.n	8000aa0 <_TrySendOverflowPacket+0x1c>
 8000abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <_TrySendOverflowPacket+0xe0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	e00b      	b.n	8000b00 <_TrySendOverflowPacket+0x7c>
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	1c59      	adds	r1, r3, #1
 8000af0:	6279      	str	r1, [r7, #36]	; 0x24
 8000af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	09db      	lsrs	r3, r3, #7
 8000afe:	623b      	str	r3, [r7, #32]
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	2b7f      	cmp	r3, #127	; 0x7f
 8000b04:	d8f0      	bhi.n	8000ae8 <_TrySendOverflowPacket+0x64>
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8000b0c:	6a3a      	ldr	r2, [r7, #32]
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff fb8a 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d009      	beq.n	8000b4a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e004      	b.n	8000b54 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <_TrySendOverflowPacket+0xdc>)
 8000b52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b54:	693b      	ldr	r3, [r7, #16]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3730      	adds	r7, #48	; 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000a7c 	.word	0x20000a7c
 8000b64:	e0001004 	.word	0xe0001004

08000b68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b74:	4b98      	ldr	r3, [pc, #608]	; (8000dd8 <_SendPacket+0x270>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d010      	beq.n	8000b9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b7c:	4b96      	ldr	r3, [pc, #600]	; (8000dd8 <_SendPacket+0x270>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 812d 	beq.w	8000de0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b86:	4b94      	ldr	r3, [pc, #592]	; (8000dd8 <_SendPacket+0x270>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d109      	bne.n	8000ba2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b8e:	f7ff ff79 	bl	8000a84 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b92:	4b91      	ldr	r3, [pc, #580]	; (8000dd8 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	f040 8124 	bne.w	8000de4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000b9c:	e001      	b.n	8000ba2 <_SendPacket+0x3a>
    goto Send;
 8000b9e:	bf00      	nop
 8000ba0:	e000      	b.n	8000ba4 <_SendPacket+0x3c>
Send:
 8000ba2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b1f      	cmp	r3, #31
 8000ba8:	d809      	bhi.n	8000bbe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000baa:	4b8b      	ldr	r3, [pc, #556]	; (8000dd8 <_SendPacket+0x270>)
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f040 8115 	bne.w	8000de8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b17      	cmp	r3, #23
 8000bc2:	d807      	bhi.n	8000bd4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e0c4      	b.n	8000d5e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b7f      	cmp	r3, #127	; 0x7f
 8000be0:	d912      	bls.n	8000c08 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	09da      	lsrs	r2, r3, #7
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	60fa      	str	r2, [r7, #12]
 8000bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e006      	b.n	8000c16 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b7e      	cmp	r3, #126	; 0x7e
 8000c1a:	d807      	bhi.n	8000c2c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e098      	b.n	8000d5e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c32:	d212      	bcs.n	8000c5a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	09da      	lsrs	r2, r3, #7
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	3a01      	subs	r2, #1
 8000c4c:	60fa      	str	r2, [r7, #12]
 8000c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e081      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c60:	d21d      	bcs.n	8000c9e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0b9a      	lsrs	r2, r3, #14
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	09db      	lsrs	r3, r3, #7
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	3a01      	subs	r2, #1
 8000c7c:	60fa      	str	r2, [r7, #12]
 8000c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	60fa      	str	r2, [r7, #12]
 8000c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e05f      	b.n	8000d5e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ca4:	d228      	bcs.n	8000cf8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	0d5a      	lsrs	r2, r3, #21
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	0b9b      	lsrs	r3, r3, #14
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	60fa      	str	r2, [r7, #12]
 8000cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	60fa      	str	r2, [r7, #12]
 8000cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e032      	b.n	8000d5e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0f1a      	lsrs	r2, r3, #28
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	0d5b      	lsrs	r3, r3, #21
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	3a01      	subs	r2, #1
 8000d12:	60fa      	str	r2, [r7, #12]
 8000d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	0b9b      	lsrs	r3, r3, #14
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	3a01      	subs	r2, #1
 8000d28:	60fa      	str	r2, [r7, #12]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	3a01      	subs	r2, #1
 8000d3e:	60fa      	str	r2, [r7, #12]
 8000d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	3a01      	subs	r2, #1
 8000d52:	60fa      	str	r2, [r7, #12]
 8000d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <_SendPacket+0x274>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <_SendPacket+0x270>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	623b      	str	r3, [r7, #32]
 8000d76:	e00b      	b.n	8000d90 <_SendPacket+0x228>
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	1c59      	adds	r1, r3, #1
 8000d80:	6279      	str	r1, [r7, #36]	; 0x24
 8000d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]
 8000d8c:	09db      	lsrs	r3, r3, #7
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d8f0      	bhi.n	8000d78 <_SendPacket+0x210>
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	627a      	str	r2, [r7, #36]	; 0x24
 8000d9c:	6a3a      	ldr	r2, [r7, #32]
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <_SendPacket+0x270>)
 8000da8:	785b      	ldrb	r3, [r3, #1]
 8000daa:	4618      	mov	r0, r3
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	f7ff fa43 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_SendPacket+0x270>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	60d3      	str	r3, [r2, #12]
 8000dc8:	e00f      	b.n	8000dea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dca:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <_SendPacket+0x270>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <_SendPacket+0x270>)
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e008      	b.n	8000dea <_SendPacket+0x282>
 8000dd8:	20000a7c 	.word	0x20000a7c
 8000ddc:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000de0:	bf00      	nop
 8000de2:	e002      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <_SendPacket+0x282>
      goto SendDone;
 8000de8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <_SendPacket+0x2d4>)
 8000dec:	7e1b      	ldrb	r3, [r3, #24]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <_SendPacket+0x2d8>)
 8000df2:	460b      	mov	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	440b      	add	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	336c      	adds	r3, #108	; 0x6c
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <_SendPacket+0x2d4>)
 8000e02:	7e1b      	ldrb	r3, [r3, #24]
 8000e04:	4618      	mov	r0, r3
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <_SendPacket+0x2d8>)
 8000e08:	4603      	mov	r3, r0
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4403      	add	r3, r0
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	440b      	add	r3, r1
 8000e12:	3370      	adds	r3, #112	; 0x70
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d00b      	beq.n	8000e32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_SendPacket+0x2d4>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d107      	bne.n	8000e32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <_SendPacket+0x2d4>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e28:	f7ff fdbe 	bl	80009a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <_SendPacket+0x2d4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000a7c 	.word	0x20000a7c
 8000e40:	200001bc 	.word	0x200001bc

08000e44 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0a2      	sub	sp, #136	; 0x88
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01d      	beq.n	8000eaa <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e72:	2b25      	cmp	r3, #37	; 0x25
 8000e74:	d1f1      	bne.n	8000e5a <_VPrintHost+0x16>
      c = *p;
 8000e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1d19      	adds	r1, r3, #4
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6011      	str	r1, [r2, #0]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000e94:	460a      	mov	r2, r1
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3388      	adds	r3, #136	; 0x88
 8000e9a:	443b      	add	r3, r7
 8000e9c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d002      	beq.n	8000eae <_VPrintHost+0x6a>
    c = *p++;
 8000ea8:	e7d7      	b.n	8000e5a <_VPrintHost+0x16>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e000      	b.n	8000eb0 <_VPrintHost+0x6c>
        break;
 8000eae:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8000eb4:	f04f 0120 	mov.w	r1, #32
 8000eb8:	f381 8811 	msr	BASEPRI, r1
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <_VPrintHost+0x178>)
 8000ec0:	f7ff fd66 	bl	8000990 <_PreparePacket>
 8000ec4:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	68f9      	ldr	r1, [r7, #12]
 8000eca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ecc:	f7ff fd30 	bl	8000930 <_EncodeStr>
 8000ed0:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ed4:	677b      	str	r3, [r7, #116]	; 0x74
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8000eda:	e00b      	b.n	8000ef4 <_VPrintHost+0xb0>
 8000edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee2:	1c59      	adds	r1, r3, #1
 8000ee4:	6779      	str	r1, [r7, #116]	; 0x74
 8000ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef0:	09db      	lsrs	r3, r3, #7
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8000ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef8:	d8f0      	bhi.n	8000edc <_VPrintHost+0x98>
 8000efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	677a      	str	r2, [r7, #116]	; 0x74
 8000f00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f14:	e00b      	b.n	8000f2e <_VPrintHost+0xea>
 8000f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f1c:	1c59      	adds	r1, r3, #1
 8000f1e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f2a:	09db      	lsrs	r3, r3, #7
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f30:	2b7f      	cmp	r3, #127	; 0x7f
 8000f32:	d8f0      	bhi.n	8000f16 <_VPrintHost+0xd2>
 8000f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f4c:	e022      	b.n	8000f94 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f50:	667b      	str	r3, [r7, #100]	; 0x64
 8000f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	663b      	str	r3, [r7, #96]	; 0x60
 8000f5a:	e00b      	b.n	8000f74 <_VPrintHost+0x130>
 8000f5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	6679      	str	r1, [r7, #100]	; 0x64
 8000f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f70:	09db      	lsrs	r3, r3, #7
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60
 8000f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f76:	2b7f      	cmp	r3, #127	; 0x7f
 8000f78:	d8f0      	bhi.n	8000f5c <_VPrintHost+0x118>
 8000f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	667a      	str	r2, [r7, #100]	; 0x64
 8000f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f8e:	3304      	adds	r3, #4
 8000f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1d5      	bne.n	8000f4e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fa2:	221a      	movs	r2, #26
 8000fa4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fa6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fa8:	f7ff fdde 	bl	8000b68 <_SendPacket>
    RECORD_END();
 8000fac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fae:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3788      	adds	r7, #136	; 0x88
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000aac 	.word	0x20000aac

08000fc0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd4:	4917      	ldr	r1, [pc, #92]	; (8001034 <SEGGER_SYSVIEW_Init+0x74>)
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000fd8:	f7ff fbda 	bl	8000790 <SEGGER_RTT_AllocUpBuffer>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fe6:	785a      	ldrb	r2, [r3, #1]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	4a11      	ldr	r2, [pc, #68]	; (8001040 <SEGGER_SYSVIEW_Init+0x80>)
 8000ffa:	490f      	ldr	r1, [pc, #60]	; (8001038 <SEGGER_SYSVIEW_Init+0x78>)
 8000ffc:	f7ff fc4c 	bl	8000898 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x84>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800100c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000674 	.word	0x20000674
 8001038:	08008b3c 	.word	0x08008b3c
 800103c:	20000a7c 	.word	0x20000a7c
 8001040:	20000a74 	.word	0x20000a74
 8001044:	e0001004 	.word	0xe0001004

08001048 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6113      	str	r3, [r2, #16]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000a7c 	.word	0x20000a7c

08001068 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001070:	f3ef 8311 	mrs	r3, BASEPRI
 8001074:	f04f 0120 	mov.w	r1, #32
 8001078:	f381 8811 	msr	BASEPRI, r1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001080:	f7ff fc86 	bl	8000990 <_PreparePacket>
 8001084:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	f7ff fd6c 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f383 8811 	msr	BASEPRI, r3
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000aac 	.word	0x20000aac

080010a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ae:	f3ef 8311 	mrs	r3, BASEPRI
 80010b2:	f04f 0120 	mov.w	r1, #32
 80010b6:	f381 8811 	msr	BASEPRI, r1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010be:	f7ff fc67 	bl	8000990 <_PreparePacket>
 80010c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	e00b      	b.n	80010ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	1c59      	adds	r1, r3, #1
 80010da:	61f9      	str	r1, [r7, #28]
 80010dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	09db      	lsrs	r3, r3, #7
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b7f      	cmp	r3, #127	; 0x7f
 80010ee:	d8f0      	bhi.n	80010d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	61fa      	str	r2, [r7, #28]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	6938      	ldr	r0, [r7, #16]
 8001106:	f7ff fd2f 	bl	8000b68 <_SendPacket>
  RECORD_END();
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f383 8811 	msr	BASEPRI, r3
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000aac 	.word	0x20000aac

0800111c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001128:	f3ef 8311 	mrs	r3, BASEPRI
 800112c:	f04f 0120 	mov.w	r1, #32
 8001130:	f381 8811 	msr	BASEPRI, r1
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001138:	f7ff fc2a 	bl	8000990 <_PreparePacket>
 800113c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
 800114a:	e00b      	b.n	8001164 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	b2da      	uxtb	r2, r3
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	1c59      	adds	r1, r3, #1
 8001154:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001156:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	09db      	lsrs	r3, r3, #7
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	2b7f      	cmp	r3, #127	; 0x7f
 8001168:	d8f0      	bhi.n	800114c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	e00b      	b.n	800119c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	6279      	str	r1, [r7, #36]	; 0x24
 800118e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	09db      	lsrs	r3, r3, #7
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	2b7f      	cmp	r3, #127	; 0x7f
 80011a0:	d8f0      	bhi.n	8001184 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	627a      	str	r2, [r7, #36]	; 0x24
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	69b8      	ldr	r0, [r7, #24]
 80011b8:	f7ff fcd6 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f383 8811 	msr	BASEPRI, r3
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000aac 	.word	0x20000aac

080011d0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011dc:	f3ef 8311 	mrs	r3, BASEPRI
 80011e0:	f04f 0120 	mov.w	r1, #32
 80011e4:	f381 8811 	msr	BASEPRI, r1
 80011e8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	220a      	movs	r2, #10
 80011f0:	4952      	ldr	r1, [pc, #328]	; (800133c <SEGGER_SYSVIEW_Start+0x16c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f824 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80011fe:	200a      	movs	r0, #10
 8001200:	f7ff ff32 	bl	8001068 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001204:	f3ef 8311 	mrs	r3, BASEPRI
 8001208:	f04f 0120 	mov.w	r1, #32
 800120c:	f381 8811 	msr	BASEPRI, r1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	484b      	ldr	r0, [pc, #300]	; (8001340 <SEGGER_SYSVIEW_Start+0x170>)
 8001214:	f7ff fbbc 	bl	8000990 <_PreparePacket>
 8001218:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001222:	4b45      	ldr	r3, [pc, #276]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
 8001228:	e00b      	b.n	8001242 <SEGGER_SYSVIEW_Start+0x72>
 800122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122c:	b2da      	uxtb	r2, r3
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	1c59      	adds	r1, r3, #1
 8001232:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	09db      	lsrs	r3, r3, #7
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	2b7f      	cmp	r3, #127	; 0x7f
 8001246:	d8f0      	bhi.n	800122a <SEGGER_SYSVIEW_Start+0x5a>
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800124e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	e00b      	b.n	800127c <SEGGER_SYSVIEW_Start+0xac>
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	1c59      	adds	r1, r3, #1
 800126c:	6279      	str	r1, [r7, #36]	; 0x24
 800126e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	09db      	lsrs	r3, r3, #7
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b7f      	cmp	r3, #127	; 0x7f
 8001280:	d8f0      	bhi.n	8001264 <SEGGER_SYSVIEW_Start+0x94>
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	627a      	str	r2, [r7, #36]	; 0x24
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	e00b      	b.n	80012b6 <SEGGER_SYSVIEW_Start+0xe6>
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	1c59      	adds	r1, r3, #1
 80012a6:	61f9      	str	r1, [r7, #28]
 80012a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	09db      	lsrs	r3, r3, #7
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b7f      	cmp	r3, #127	; 0x7f
 80012ba:	d8f0      	bhi.n	800129e <SEGGER_SYSVIEW_Start+0xce>
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	61fa      	str	r2, [r7, #28]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	e00b      	b.n	80012ee <SEGGER_SYSVIEW_Start+0x11e>
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	1c59      	adds	r1, r3, #1
 80012de:	6179      	str	r1, [r7, #20]
 80012e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	09db      	lsrs	r3, r3, #7
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b7f      	cmp	r3, #127	; 0x7f
 80012f2:	d8f0      	bhi.n	80012d6 <SEGGER_SYSVIEW_Start+0x106>
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	617a      	str	r2, [r7, #20]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001304:	2218      	movs	r2, #24
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc2d 	bl	8000b68 <_SendPacket>
      RECORD_END();
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SEGGER_SYSVIEW_Start+0x168>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8001322:	f000 f9eb 	bl	80016fc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001326:	f000 f9b1 	bl	800168c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800132a:	f000 fac1 	bl	80018b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800132e:	bf00      	nop
 8001330:	3730      	adds	r7, #48	; 0x30
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000a7c 	.word	0x20000a7c
 800133c:	08008c10 	.word	0x08008c10
 8001340:	20000aac 	.word	0x20000aac

08001344 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800134a:	f3ef 8311 	mrs	r3, BASEPRI
 800134e:	f04f 0120 	mov.w	r1, #32
 8001352:	f381 8811 	msr	BASEPRI, r1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <SEGGER_SYSVIEW_Stop+0x44>)
 800135a:	f7ff fb19 	bl	8000990 <_PreparePacket>
 800135e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001368:	220b      	movs	r2, #11
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff fbfb 	bl	8000b68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <SEGGER_SYSVIEW_Stop+0x48>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f383 8811 	msr	BASEPRI, r3
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000aac 	.word	0x20000aac
 800138c:	20000a7c 	.word	0x20000a7c

08001390 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001396:	f3ef 8311 	mrs	r3, BASEPRI
 800139a:	f04f 0120 	mov.w	r1, #32
 800139e:	f381 8811 	msr	BASEPRI, r1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4845      	ldr	r0, [pc, #276]	; (80014bc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013a6:	f7ff faf3 	bl	8000990 <_PreparePacket>
 80013aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	4b42      	ldr	r3, [pc, #264]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ba:	e00b      	b.n	80013d4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	1c59      	adds	r1, r3, #1
 80013c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	09db      	lsrs	r3, r3, #7
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	d8f0      	bhi.n	80013bc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	e00b      	b.n	800140e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	6279      	str	r1, [r7, #36]	; 0x24
 8001400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	09db      	lsrs	r3, r3, #7
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b7f      	cmp	r3, #127	; 0x7f
 8001412:	d8f0      	bhi.n	80013f6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	627a      	str	r2, [r7, #36]	; 0x24
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e00b      	b.n	8001448 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	61f9      	str	r1, [r7, #28]
 800143a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	09db      	lsrs	r3, r3, #7
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2b7f      	cmp	r3, #127	; 0x7f
 800144c:	d8f0      	bhi.n	8001430 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	61fa      	str	r2, [r7, #28]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e00b      	b.n	8001480 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	6179      	str	r1, [r7, #20]
 8001472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d8f0      	bhi.n	8001468 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	617a      	str	r2, [r7, #20]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001496:	2218      	movs	r2, #24
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7ff fb64 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	4798      	blx	r3
  }
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000aac 	.word	0x20000aac
 80014c0:	20000a7c 	.word	0x20000a7c

080014c4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b092      	sub	sp, #72	; 0x48
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014cc:	f3ef 8311 	mrs	r3, BASEPRI
 80014d0:	f04f 0120 	mov.w	r1, #32
 80014d4:	f381 8811 	msr	BASEPRI, r1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	486a      	ldr	r0, [pc, #424]	; (8001684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014dc:	f7ff fa58 	bl	8000990 <_PreparePacket>
 80014e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
 80014f6:	e00b      	b.n	8001510 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80014f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	6479      	str	r1, [r7, #68]	; 0x44
 8001502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
 800150a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150c:	09db      	lsrs	r3, r3, #7
 800150e:	643b      	str	r3, [r7, #64]	; 0x40
 8001510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001512:	2b7f      	cmp	r3, #127	; 0x7f
 8001514:	d8f0      	bhi.n	80014f8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	647a      	str	r2, [r7, #68]	; 0x44
 800151c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001530:	e00b      	b.n	800154a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001534:	b2da      	uxtb	r2, r3
 8001536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800153c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	09db      	lsrs	r3, r3, #7
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
 800154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154c:	2b7f      	cmp	r3, #127	; 0x7f
 800154e:	d8f0      	bhi.n	8001532 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2220      	movs	r2, #32
 8001566:	4619      	mov	r1, r3
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff f9e1 	bl	8000930 <_EncodeStr>
 800156e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001570:	2209      	movs	r2, #9
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6938      	ldr	r0, [r7, #16]
 8001576:	f7ff faf7 	bl	8000b68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b40      	ldr	r3, [pc, #256]	; (8001688 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
 800158e:	e00b      	b.n	80015a8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001592:	b2da      	uxtb	r2, r3
 8001594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	6379      	str	r1, [r7, #52]	; 0x34
 800159a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	09db      	lsrs	r3, r3, #7
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2b7f      	cmp	r3, #127	; 0x7f
 80015ac:	d8f0      	bhi.n	8001590 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	637a      	str	r2, [r7, #52]	; 0x34
 80015b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c8:	e00b      	b.n	80015e2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	09db      	lsrs	r3, r3, #7
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	2b7f      	cmp	r3, #127	; 0x7f
 80015e6:	d8f0      	bhi.n	80015ca <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	623b      	str	r3, [r7, #32]
 8001602:	e00b      	b.n	800161c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	6279      	str	r1, [r7, #36]	; 0x24
 800160e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	09db      	lsrs	r3, r3, #7
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2b7f      	cmp	r3, #127	; 0x7f
 8001620:	d8f0      	bhi.n	8001604 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	627a      	str	r2, [r7, #36]	; 0x24
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	e00b      	b.n	8001654 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	1c59      	adds	r1, r3, #1
 8001644:	61f9      	str	r1, [r7, #28]
 8001646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	09db      	lsrs	r3, r3, #7
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	d8f0      	bhi.n	800163c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	61fa      	str	r2, [r7, #28]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800166a:	2215      	movs	r2, #21
 800166c:	68f9      	ldr	r1, [r7, #12]
 800166e:	6938      	ldr	r0, [r7, #16]
 8001670:	f7ff fa7a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f383 8811 	msr	BASEPRI, r3
}
 800167a:	bf00      	nop
 800167c:	3748      	adds	r7, #72	; 0x48
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000aac 	.word	0x20000aac
 8001688:	20000a7c 	.word	0x20000a7c

0800168c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016a2:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4798      	blx	r3
  }
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000a7c 	.word	0x20000a7c

080016b4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016bc:	f3ef 8311 	mrs	r3, BASEPRI
 80016c0:	f04f 0120 	mov.w	r1, #32
 80016c4:	f381 8811 	msr	BASEPRI, r1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016cc:	f7ff f960 	bl	8000990 <_PreparePacket>
 80016d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	6938      	ldr	r0, [r7, #16]
 80016d8:	f7ff f92a 	bl	8000930 <_EncodeStr>
 80016dc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016de:	220e      	movs	r2, #14
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff fa40 	bl	8000b68 <_SendPacket>
  RECORD_END();
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f383 8811 	msr	BASEPRI, r3
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000aac 	.word	0x20000aac

080016fc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01a      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4798      	blx	r3
 800171c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001720:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	000a      	movs	r2, r1
 8001730:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001732:	4613      	mov	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4621      	mov	r1, r4
 8001738:	200d      	movs	r0, #13
 800173a:	f7ff fcef 	bl	800111c <SEGGER_SYSVIEW_RecordU32x2>
 800173e:	e006      	b.n	800174e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	200c      	movs	r0, #12
 8001748:	f7ff fcac 	bl	80010a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20000a7c 	.word	0x20000a7c
 800175c:	e0001004 	.word	0xe0001004

08001760 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800176a:	4b40      	ldr	r3, [pc, #256]	; (800186c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d077      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001772:	4b3e      	ldr	r3, [pc, #248]	; (800186c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
 800177c:	e008      	b.n	8001790 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001786:	2b00      	cmp	r3, #0
 8001788:	d007      	beq.n	800179a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	3301      	adds	r3, #1
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	429a      	cmp	r2, r3
 8001796:	d3f2      	bcc.n	800177e <SEGGER_SYSVIEW_SendModule+0x1e>
 8001798:	e000      	b.n	800179c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800179a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d055      	beq.n	800184e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80017a2:	f3ef 8311 	mrs	r3, BASEPRI
 80017a6:	f04f 0120 	mov.w	r1, #32
 80017aa:	f381 8811 	msr	BASEPRI, r1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	482f      	ldr	r0, [pc, #188]	; (8001870 <SEGGER_SYSVIEW_SendModule+0x110>)
 80017b2:	f7ff f8ed 	bl	8000990 <_PreparePacket>
 80017b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	e00b      	b.n	80017de <SEGGER_SYSVIEW_SendModule+0x7e>
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	1c59      	adds	r1, r3, #1
 80017ce:	6279      	str	r1, [r7, #36]	; 0x24
 80017d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	09db      	lsrs	r3, r3, #7
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b7f      	cmp	r3, #127	; 0x7f
 80017e2:	d8f0      	bhi.n	80017c6 <SEGGER_SYSVIEW_SendModule+0x66>
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	627a      	str	r2, [r7, #36]	; 0x24
 80017ea:	6a3a      	ldr	r2, [r7, #32]
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	e00b      	b.n	8001818 <SEGGER_SYSVIEW_SendModule+0xb8>
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	61f9      	str	r1, [r7, #28]
 800180a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	09db      	lsrs	r3, r3, #7
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b7f      	cmp	r3, #127	; 0x7f
 800181c:	d8f0      	bhi.n	8001800 <SEGGER_SYSVIEW_SendModule+0xa0>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	61fa      	str	r2, [r7, #28]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	4619      	mov	r1, r3
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff f87a 	bl	8000930 <_EncodeStr>
 800183c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800183e:	2216      	movs	r2, #22
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	6938      	ldr	r0, [r7, #16]
 8001844:	f7ff f990 	bl	8000b68 <_SendPacket>
      RECORD_END();
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4798      	blx	r3
    }
  }
}
 8001862:	bf00      	nop
 8001864:	3730      	adds	r7, #48	; 0x30
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000aa4 	.word	0x20000aa4
 8001870:	20000aac 	.word	0x20000aac

08001874 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00f      	beq.n	80018a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f2      	bne.n	8001888 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000aa4 	.word	0x20000aa4

080018b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018b6:	f3ef 8311 	mrs	r3, BASEPRI
 80018ba:	f04f 0120 	mov.w	r1, #32
 80018be:	f381 8811 	msr	BASEPRI, r1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4817      	ldr	r0, [pc, #92]	; (8001924 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018c6:	f7ff f863 	bl	8000990 <_PreparePacket>
 80018ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e00b      	b.n	80018f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	1c59      	adds	r1, r3, #1
 80018e4:	6179      	str	r1, [r7, #20]
 80018e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	09db      	lsrs	r3, r3, #7
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	2b7f      	cmp	r3, #127	; 0x7f
 80018f8:	d8f0      	bhi.n	80018dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	617a      	str	r2, [r7, #20]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800190a:	221b      	movs	r2, #27
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	68b8      	ldr	r0, [r7, #8]
 8001910:	f7ff f92a 	bl	8000b68 <_SendPacket>
  RECORD_END();
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f383 8811 	msr	BASEPRI, r3
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000aac 	.word	0x20000aac
 8001928:	20000aa8 	.word	0x20000aa8

0800192c <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800192c:	b40f      	push	{r0, r1, r2, r3}
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	461a      	mov	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	6938      	ldr	r0, [r7, #16]
 8001942:	f7ff fa7f 	bl	8000e44 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001950:	b004      	add	sp, #16
 8001952:	4770      	bx	lr

08001954 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001958:	4803      	ldr	r0, [pc, #12]	; (8001968 <_cbSendSystemDesc+0x14>)
 800195a:	f7ff feab 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <_cbSendSystemDesc+0x18>)
 8001960:	f7ff fea8 	bl	80016b4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08008b44 	.word	0x08008b44
 800196c:	08008b78 	.word	0x08008b78

08001970 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SEGGER_SYSVIEW_Conf+0x20>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SEGGER_SYSVIEW_Conf+0x20>)
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SEGGER_SYSVIEW_Conf+0x24>)
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <SEGGER_SYSVIEW_Conf+0x28>)
 8001980:	f7ff fb1e 	bl	8000fc0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001984:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001988:	f7ff fb5e 	bl	8001048 <SEGGER_SYSVIEW_SetRAMBase>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	08001955 	.word	0x08001955
 8001998:	08008c1c 	.word	0x08008c1c

0800199c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	e048      	b.n	8001a3a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80019a8:	4929      	ldr	r1, [pc, #164]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f005 fe2b 	bl	8007614 <uxTaskGetStackHighWaterMark>
 80019be:	4601      	mov	r1, r0
 80019c0:	4823      	ldr	r0, [pc, #140]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4403      	add	r3, r0
 80019ce:	3310      	adds	r3, #16
 80019d0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019d2:	491f      	ldr	r1, [pc, #124]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	3304      	adds	r3, #4
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	4c16      	ldr	r4, [pc, #88]	; (8001a50 <_cbSendTaskList+0xb4>)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4423      	add	r3, r4
 8001a02:	3308      	adds	r3, #8
 8001a04:	681c      	ldr	r4, [r3, #0]
 8001a06:	4d12      	ldr	r5, [pc, #72]	; (8001a50 <_cbSendTaskList+0xb4>)
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	442b      	add	r3, r5
 8001a14:	330c      	adds	r3, #12
 8001a16:	681d      	ldr	r5, [r3, #0]
 8001a18:	4e0d      	ldr	r6, [pc, #52]	; (8001a50 <_cbSendTaskList+0xb4>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4433      	add	r3, r6
 8001a26:	3310      	adds	r3, #16
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	4622      	mov	r2, r4
 8001a30:	f000 f855 	bl	8001ade <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3301      	adds	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <_cbSendTaskList+0xb8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d3b1      	bcc.n	80019a8 <_cbSendTaskList+0xc>
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000b90 	.word	0x20000b90
 8001a54:	20000c30 	.word	0x20000c30

08001a58 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a60:	f005 fac0 	bl	8006fe4 <xTaskGetTickCountFromISR>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2200      	movs	r2, #0
 8001a68:	469a      	mov	sl, r3
 8001a6a:	4693      	mov	fp, r2
 8001a6c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	f04f 0a00 	mov.w	sl, #0
 8001a7c:	f04f 0b00 	mov.w	fp, #0
 8001a80:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a84:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a88:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a8c:	4652      	mov	r2, sl
 8001a8e:	465b      	mov	r3, fp
 8001a90:	1a14      	subs	r4, r2, r0
 8001a92:	eb63 0501 	sbc.w	r5, r3, r1
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	00ab      	lsls	r3, r5, #2
 8001aa0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001aa4:	00a2      	lsls	r2, r4, #2
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	eb14 0800 	adds.w	r8, r4, r0
 8001aae:	eb45 0901 	adc.w	r9, r5, r1
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac6:	4690      	mov	r8, r2
 8001ac8:	4699      	mov	r9, r3
 8001aca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ace:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ade <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b08a      	sub	sp, #40	; 0x28
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2214      	movs	r2, #20
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f006 ff21 	bl	800893c <memset>
  TaskInfo.TaskID     = TaskID;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fcd6 	bl	80014c4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b24:	f000 fd85 	bl	8002632 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b28:	f7ff ff22 	bl	8001970 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f85e 	bl	8001bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f000 f9da 	bl	8001ee8 <MX_GPIO_Init>
  MX_ETH_Init();
 8001b34:	f000 f8cc 	bl	8001cd0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001b38:	f000 f978 	bl	8001e2c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b3c:	f000 f9a6 	bl	8001e8c <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001b40:	f000 f914 	bl	8001d6c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001b44:	f000 f942 	bl	8001dcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b48:	f003 fe52 	bl	80057f0 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of sendTimer */
  sendTimerHandle = osTimerNew(sendTimerEntry, osTimerPeriodic, NULL, &sendTimer_attributes);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <main+0x94>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2101      	movs	r1, #1
 8001b52:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <main+0x98>)
 8001b54:	f003 ffa0 	bl	8005a98 <osTimerNew>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <main+0x9c>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(sendTimerHandle, 1000 / portTICK_PERIOD_MS);
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <main+0x9c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 f81a 	bl	8005ba0 <osTimerStart>
  //xTimerStart(sendTimerHandle, 1000 / portTICK_PERIOD_MS);
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart2_queue */
  uart2_queueHandle = osMessageQueueNew (16, sizeof(uint16_t), &uart2_queue_attributes);
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <main+0xa0>)
 8001b6e:	2102      	movs	r1, #2
 8001b70:	2010      	movs	r0, #16
 8001b72:	f004 f855 	bl	8005c20 <osMessageQueueNew>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <main+0xa4>)
 8001b7a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <main+0xa8>)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4812      	ldr	r0, [pc, #72]	; (8001bcc <main+0xac>)
 8001b82:	f003 fe9f 	bl	80058c4 <osThreadNew>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <main+0xb0>)
 8001b8a:	6013      	str	r3, [r2, #0]

  /* creation of uartReceiver */
  uartReceiverHandle = osThreadNew(uartReveiverEntry, NULL, &uartReceiver_attributes);
 8001b8c:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <main+0xb4>)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <main+0xb8>)
 8001b92:	f003 fe97 	bl	80058c4 <osThreadNew>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <main+0xbc>)
 8001b9a:	6013      	str	r3, [r2, #0]

  /* creation of uartPrinter */
  uartPrinterHandle = osThreadNew(uartPrinterEntry, NULL, &uartPrinter_attributes);
 8001b9c:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <main+0xc0>)
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4810      	ldr	r0, [pc, #64]	; (8001be4 <main+0xc4>)
 8001ba2:	f003 fe8f 	bl	80058c4 <osThreadNew>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <main+0xc8>)
 8001baa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001bac:	f003 fe54 	bl	8005858 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <main+0x90>
 8001bb2:	bf00      	nop
 8001bb4:	08008ca8 	.word	0x08008ca8
 8001bb8:	080020b1 	.word	0x080020b1
 8001bbc:	200013cc 	.word	0x200013cc
 8001bc0:	08008c90 	.word	0x08008c90
 8001bc4:	200013c8 	.word	0x200013c8
 8001bc8:	08008c24 	.word	0x08008c24
 8001bcc:	0800202d 	.word	0x0800202d
 8001bd0:	200013bc 	.word	0x200013bc
 8001bd4:	08008c48 	.word	0x08008c48
 8001bd8:	0800203d 	.word	0x0800203d
 8001bdc:	200013c0 	.word	0x200013c0
 8001be0:	08008c6c 	.word	0x08008c6c
 8001be4:	08002081 	.word	0x08002081
 8001be8:	200013c4 	.word	0x200013c4

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b094      	sub	sp, #80	; 0x50
 8001bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	2234      	movs	r2, #52	; 0x34
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 fe9e 	bl	800893c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c00:	f107 0308 	add.w	r3, r7, #8
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c10:	f001 fcaa 	bl	8003568 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <SystemClock_Config+0xdc>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	4a2b      	ldr	r2, [pc, #172]	; (8001cc8 <SystemClock_Config+0xdc>)
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <SystemClock_Config+0xdc>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <SystemClock_Config+0xe0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c34:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <SystemClock_Config+0xe0>)
 8001c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <SystemClock_Config+0xe0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c52:	2302      	movs	r3, #2
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c60:	2360      	movs	r3, #96	; 0x60
 8001c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c64:	2302      	movs	r3, #2
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 fcd7 	bl	8003628 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c80:	f000 fa2e 	bl	80020e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c84:	f001 fc80 	bl	8003588 <HAL_PWREx_EnableOverDrive>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c8e:	f000 fa27 	bl	80020e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c92:	230f      	movs	r3, #15
 8001c94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c96:	2302      	movs	r3, #2
 8001c98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	2103      	movs	r1, #3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 ff68 	bl	8003b84 <HAL_RCC_ClockConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001cba:	f000 fa11 	bl	80020e0 <Error_Handler>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3750      	adds	r7, #80	; 0x50
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <MX_ETH_Init+0x84>)
 8001cd6:	4a20      	ldr	r2, [pc, #128]	; (8001d58 <MX_ETH_Init+0x88>)
 8001cd8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <MX_ETH_Init+0x8c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <MX_ETH_Init+0x8c>)
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <MX_ETH_Init+0x8c>)
 8001ce8:	22e1      	movs	r2, #225	; 0xe1
 8001cea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <MX_ETH_Init+0x8c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_ETH_Init+0x8c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_ETH_Init+0x8c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <MX_ETH_Init+0x84>)
 8001d00:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <MX_ETH_Init+0x8c>)
 8001d02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <MX_ETH_Init+0x84>)
 8001d06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d0a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_ETH_Init+0x84>)
 8001d0e:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <MX_ETH_Init+0x90>)
 8001d10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <MX_ETH_Init+0x84>)
 8001d14:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <MX_ETH_Init+0x94>)
 8001d16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_ETH_Init+0x84>)
 8001d1a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <MX_ETH_Init+0x84>)
 8001d22:	f000 fded 	bl	8002900 <HAL_ETH_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d2c:	f000 f9d8 	bl	80020e0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d30:	2238      	movs	r2, #56	; 0x38
 8001d32:	2100      	movs	r1, #0
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <MX_ETH_Init+0x98>)
 8001d36:	f006 fe01 	bl	800893c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_ETH_Init+0x98>)
 8001d3c:	2221      	movs	r2, #33	; 0x21
 8001d3e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_ETH_Init+0x98>)
 8001d42:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001d46:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <MX_ETH_Init+0x98>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000c6c 	.word	0x20000c6c
 8001d58:	40028000 	.word	0x40028000
 8001d5c:	200013d0 	.word	0x200013d0
 8001d60:	20000100 	.word	0x20000100
 8001d64:	20000060 	.word	0x20000060
 8001d68:	20000c34 	.word	0x20000c34

08001d6c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <MX_UART4_Init+0x5c>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_UART4_Init+0x58>)
 8001db0:	f002 fd36 	bl	8004820 <HAL_UART_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001dba:	f000 f991 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000d1c 	.word	0x20000d1c
 8001dc8:	40004c00 	.word	0x40004c00

08001dcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001dd2:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <MX_USART2_UART_Init+0x5c>)
 8001dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001df2:	220c      	movs	r2, #12
 8001df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USART2_UART_Init+0x58>)
 8001e10:	f002 fd06 	bl	8004820 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e1a:	f000 f961 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000da4 	.word	0x20000da4
 8001e28:	40004400 	.word	0x40004400

08001e2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e32:	4a15      	ldr	r2, [pc, #84]	; (8001e88 <MX_USART3_UART_Init+0x5c>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_USART3_UART_Init+0x58>)
 8001e70:	f002 fcd6 	bl	8004820 <HAL_UART_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e7a:	f000 f931 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000e2c 	.word	0x20000e2c
 8001e88:	40004800 	.word	0x40004800

08001e8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e9a:	2206      	movs	r2, #6
 8001e9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eac:	2202      	movs	r2, #2
 8001eae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ed0:	f001 fa01 	bl	80032d6 <HAL_PCD_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001eda:	f000 f901 	bl	80020e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000eb4 	.word	0x20000eb4

08001ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08c      	sub	sp, #48	; 0x30
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <MX_GPIO_Init+0x134>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a46      	ldr	r2, [pc, #280]	; (800201c <MX_GPIO_Init+0x134>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b44      	ldr	r3, [pc, #272]	; (800201c <MX_GPIO_Init+0x134>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <MX_GPIO_Init+0x134>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a40      	ldr	r2, [pc, #256]	; (800201c <MX_GPIO_Init+0x134>)
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <MX_GPIO_Init+0x134>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	; (800201c <MX_GPIO_Init+0x134>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a3a      	ldr	r2, [pc, #232]	; (800201c <MX_GPIO_Init+0x134>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <MX_GPIO_Init+0x134>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	4b35      	ldr	r3, [pc, #212]	; (800201c <MX_GPIO_Init+0x134>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a34      	ldr	r2, [pc, #208]	; (800201c <MX_GPIO_Init+0x134>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b32      	ldr	r3, [pc, #200]	; (800201c <MX_GPIO_Init+0x134>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	; (800201c <MX_GPIO_Init+0x134>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <MX_GPIO_Init+0x134>)
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <MX_GPIO_Init+0x134>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f76:	4b29      	ldr	r3, [pc, #164]	; (800201c <MX_GPIO_Init+0x134>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a28      	ldr	r2, [pc, #160]	; (800201c <MX_GPIO_Init+0x134>)
 8001f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <MX_GPIO_Init+0x134>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f94:	4822      	ldr	r0, [pc, #136]	; (8002020 <MX_GPIO_Init+0x138>)
 8001f96:	f001 f985 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2140      	movs	r1, #64	; 0x40
 8001f9e:	4821      	ldr	r0, [pc, #132]	; (8002024 <MX_GPIO_Init+0x13c>)
 8001fa0:	f001 f980 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001faa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	481b      	ldr	r0, [pc, #108]	; (8002028 <MX_GPIO_Init+0x140>)
 8001fbc:	f000 ffc6 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001fc0:	f244 0381 	movw	r3, #16513	; 0x4081
 8001fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4811      	ldr	r0, [pc, #68]	; (8002020 <MX_GPIO_Init+0x138>)
 8001fda:	f000 ffb7 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001fde:	2340      	movs	r3, #64	; 0x40
 8001fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480b      	ldr	r0, [pc, #44]	; (8002024 <MX_GPIO_Init+0x13c>)
 8001ff6:	f000 ffa9 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_GPIO_Init+0x13c>)
 800200e:	f000 ff9d 	bl	8002f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002012:	bf00      	nop
 8002014:	3730      	adds	r7, #48	; 0x30
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400
 8002024:	40021800 	.word	0x40021800
 8002028:	40020800 	.word	0x40020800

0800202c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002034:	2001      	movs	r0, #1
 8002036:	f003 fceb 	bl	8005a10 <osDelay>
 800203a:	e7fb      	b.n	8002034 <StartDefaultTask+0x8>

0800203c <uartReveiverEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartReveiverEntry */
void uartReveiverEntry(void *argument)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint8_t nextByte;
  /* Infinite loop */
  for(;;)
  {
	//HAL_UART_Receive(&huart2, &nextbyte, 1, 100);
    while(!(USART2->ISR & USART_ISR_RXNE_Msk));
 8002044:	bf00      	nop
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <uartReveiverEntry+0x38>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f9      	beq.n	8002046 <uartReveiverEntry+0xa>
    nextByte = USART2->RDR;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <uartReveiverEntry+0x38>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	b2db      	uxtb	r3, r3
 8002058:	73fb      	strb	r3, [r7, #15]
    SEGGER_SYSVIEW_PrintfHost("received");
 800205a:	4807      	ldr	r0, [pc, #28]	; (8002078 <uartReveiverEntry+0x3c>)
 800205c:	f7ff fc66 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>
    //SEGGER_SYSVIEW_PrintfHost(&nextByte);
    xQueueSend(uart2_queueHandle, &nextByte,0);
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <uartReveiverEntry+0x40>)
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	f107 010f 	add.w	r1, r7, #15
 8002068:	2300      	movs	r3, #0
 800206a:	2200      	movs	r2, #0
 800206c:	f004 f898 	bl	80061a0 <xQueueGenericSend>
    while(!(USART2->ISR & USART_ISR_RXNE_Msk));
 8002070:	e7e8      	b.n	8002044 <uartReveiverEntry+0x8>
 8002072:	bf00      	nop
 8002074:	40004400 	.word	0x40004400
 8002078:	08008bc8 	.word	0x08008bc8
 800207c:	200013c8 	.word	0x200013c8

08002080 <uartPrinterEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uartPrinterEntry */
void uartPrinterEntry(void *argument)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uartPrinterEntry */
  /* Infinite loop */
  char byteFromQueue;
  for(;;)
  {
    osDelay(1);
 8002088:	2001      	movs	r0, #1
 800208a:	f003 fcc1 	bl	8005a10 <osDelay>
    //SEGGER_SYSVIEW_PrintfHost("printer");
    xQueueReceive(uart2_queueHandle, &byteFromQueue, portMAX_DELAY);
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <uartPrinterEntry+0x2c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f107 010f 	add.w	r1, r7, #15
 8002096:	f04f 32ff 	mov.w	r2, #4294967295
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fa26 	bl	80064ec <xQueueReceive>
    SEGGER_SYSVIEW_PrintfHost(&byteFromQueue);
 80020a0:	f107 030f 	add.w	r3, r7, #15
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fc41 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>
    osDelay(1);
 80020aa:	e7ed      	b.n	8002088 <uartPrinterEntry+0x8>
 80020ac:	200013c8 	.word	0x200013c8

080020b0 <sendTimerEntry>:
  /* USER CODE END uartPrinterEntry */
}

/* sendTimerEntry function */
void sendTimerEntry(void *argument)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTimerEntry */

  SEGGER_SYSVIEW_PrintfHost("timer sender");
 80020b8:	4806      	ldr	r0, [pc, #24]	; (80020d4 <sendTimerEntry+0x24>)
 80020ba:	f7ff fc37 	bl	800192c <SEGGER_SYSVIEW_PrintfHost>
  HAL_UART_Transmit(&huart4, uart4Msg, sizeof(uart4Msg), 100);
 80020be:	2364      	movs	r3, #100	; 0x64
 80020c0:	2201      	movs	r2, #1
 80020c2:	4905      	ldr	r1, [pc, #20]	; (80020d8 <sendTimerEntry+0x28>)
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <sendTimerEntry+0x2c>)
 80020c6:	f002 fbf9 	bl	80048bc <HAL_UART_Transmit>
  /* USER CODE END sendTimerEntry */
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	08008bd4 	.word	0x08008bd4
 80020d8:	08008cb8 	.word	0x08008cb8
 80020dc:	20000d1c 	.word	0x20000d1c

080020e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e4:	b672      	cpsid	i
}
 80020e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <Error_Handler+0x8>
	...

080020ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_MspInit+0x4c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_MspInit+0x4c>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_MspInit+0x4c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_MspInit+0x4c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_MspInit+0x4c>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002114:	6453      	str	r3, [r2, #68]	; 0x44
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_MspInit+0x4c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	210f      	movs	r1, #15
 8002126:	f06f 0001 	mvn.w	r0, #1
 800212a:	f000 fbc0 	bl	80028ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08e      	sub	sp, #56	; 0x38
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_ETH_MspInit+0x158>)
 800215a:	4293      	cmp	r3, r2
 800215c:	f040 8096 	bne.w	800228c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002160:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 8002166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800216a:	6313      	str	r3, [r2, #48]	; 0x30
 800216c:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 800217e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002182:	6313      	str	r3, [r2, #48]	; 0x30
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4a40      	ldr	r2, [pc, #256]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 8002196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800219a:	6313      	str	r3, [r2, #48]	; 0x30
 800219c:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	6313      	str	r3, [r2, #48]	; 0x30
 80021b4:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	4a34      	ldr	r2, [pc, #208]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6313      	str	r3, [r2, #48]	; 0x30
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021de:	f043 0302 	orr.w	r3, r3, #2
 80021e2:	6313      	str	r3, [r2, #48]	; 0x30
 80021e4:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4a28      	ldr	r2, [pc, #160]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021fa:	6313      	str	r3, [r2, #48]	; 0x30
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_ETH_MspInit+0x15c>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002208:	2332      	movs	r3, #50	; 0x32
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002218:	230b      	movs	r3, #11
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	481e      	ldr	r0, [pc, #120]	; (800229c <HAL_ETH_MspInit+0x160>)
 8002224:	f000 fe92 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002228:	2386      	movs	r3, #134	; 0x86
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002238:	230b      	movs	r3, #11
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002240:	4619      	mov	r1, r3
 8002242:	4817      	ldr	r0, [pc, #92]	; (80022a0 <HAL_ETH_MspInit+0x164>)
 8002244:	f000 fe82 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800225a:	230b      	movs	r3, #11
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002262:	4619      	mov	r1, r3
 8002264:	480f      	ldr	r0, [pc, #60]	; (80022a4 <HAL_ETH_MspInit+0x168>)
 8002266:	f000 fe71 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800226a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800227c:	230b      	movs	r3, #11
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002284:	4619      	mov	r1, r3
 8002286:	4808      	ldr	r0, [pc, #32]	; (80022a8 <HAL_ETH_MspInit+0x16c>)
 8002288:	f000 fe60 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800228c:	bf00      	nop
 800228e:	3738      	adds	r7, #56	; 0x38
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40028000 	.word	0x40028000
 8002298:	40023800 	.word	0x40023800
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40021800 	.word	0x40021800

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0b2      	sub	sp, #200	; 0xc8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c8:	2290      	movs	r2, #144	; 0x90
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f006 fb35 	bl	800893c <memset>
  if(huart->Instance==UART4)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a64      	ldr	r2, [pc, #400]	; (8002468 <HAL_UART_MspInit+0x1bc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d13d      	bne.n	8002358 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 fe70 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022f6:	f7ff fef3 	bl	80020e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_UART_MspInit+0x1c0>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a5b      	ldr	r2, [pc, #364]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a55      	ldr	r2, [pc, #340]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800232a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800232e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002344:	2308      	movs	r3, #8
 8002346:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800234e:	4619      	mov	r1, r3
 8002350:	4847      	ldr	r0, [pc, #284]	; (8002470 <HAL_UART_MspInit+0x1c4>)
 8002352:	f000 fdfb 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002356:	e082      	b.n	800245e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a45      	ldr	r2, [pc, #276]	; (8002474 <HAL_UART_MspInit+0x1c8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d13b      	bne.n	80023da <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002366:	2300      	movs	r3, #0
 8002368:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236e:	4618      	mov	r0, r3
 8002370:	f001 fe2e 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800237a:	f7ff feb1 	bl	80020e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a3a      	ldr	r2, [pc, #232]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <HAL_UART_MspInit+0x1c0>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002396:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a34      	ldr	r2, [pc, #208]	; (800246c <HAL_UART_MspInit+0x1c0>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_UART_MspInit+0x1c0>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023ae:	2360      	movs	r3, #96	; 0x60
 80023b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c6:	2307      	movs	r3, #7
 80023c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4829      	ldr	r0, [pc, #164]	; (8002478 <HAL_UART_MspInit+0x1cc>)
 80023d4:	f000 fdba 	bl	8002f4c <HAL_GPIO_Init>
}
 80023d8:	e041      	b.n	800245e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_UART_MspInit+0x1d0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d13c      	bne.n	800245e <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f2:	4618      	mov	r0, r3
 80023f4:	f001 fdec 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_UART_MspInit+0x156>
      Error_Handler();
 80023fe:	f7ff fe6f 	bl	80020e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_UART_MspInit+0x1c0>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a13      	ldr	r2, [pc, #76]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_UART_MspInit+0x1c0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002432:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800244c:	2307      	movs	r3, #7
 800244e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002452:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002456:	4619      	mov	r1, r3
 8002458:	4807      	ldr	r0, [pc, #28]	; (8002478 <HAL_UART_MspInit+0x1cc>)
 800245a:	f000 fd77 	bl	8002f4c <HAL_GPIO_Init>
}
 800245e:	bf00      	nop
 8002460:	37c8      	adds	r7, #200	; 0xc8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40004c00 	.word	0x40004c00
 800246c:	40023800 	.word	0x40023800
 8002470:	40020800 	.word	0x40020800
 8002474:	40004400 	.word	0x40004400
 8002478:	40020c00 	.word	0x40020c00
 800247c:	40004800 	.word	0x40004800

08002480 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b0ae      	sub	sp, #184	; 0xb8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2290      	movs	r2, #144	; 0x90
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f006 fa4b 	bl	800893c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ae:	d159      	bne.n	8002564 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80024b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 fd85 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80024cc:	f7ff fe08 	bl	80020e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_PCD_MspInit+0xec>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4a25      	ldr	r2, [pc, #148]	; (800256c <HAL_PCD_MspInit+0xec>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6313      	str	r3, [r2, #48]	; 0x30
 80024dc:	4b23      	ldr	r3, [pc, #140]	; (800256c <HAL_PCD_MspInit+0xec>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80024e8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80024ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002502:	230a      	movs	r3, #10
 8002504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800250c:	4619      	mov	r1, r3
 800250e:	4818      	ldr	r0, [pc, #96]	; (8002570 <HAL_PCD_MspInit+0xf0>)
 8002510:	f000 fd1c 	bl	8002f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800252c:	4619      	mov	r1, r3
 800252e:	4810      	ldr	r0, [pc, #64]	; (8002570 <HAL_PCD_MspInit+0xf0>)
 8002530:	f000 fd0c 	bl	8002f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_PCD_MspInit+0xec>)
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	4a0c      	ldr	r2, [pc, #48]	; (800256c <HAL_PCD_MspInit+0xec>)
 800253a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253e:	6353      	str	r3, [r2, #52]	; 0x34
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_PCD_MspInit+0xec>)
 8002542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <HAL_PCD_MspInit+0xec>)
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	4a06      	ldr	r2, [pc, #24]	; (800256c <HAL_PCD_MspInit+0xec>)
 8002552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002556:	6453      	str	r3, [r2, #68]	; 0x44
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <HAL_PCD_MspInit+0xec>)
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002564:	bf00      	nop
 8002566:	37b8      	adds	r7, #184	; 0xb8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40023800 	.word	0x40023800
 8002570:	40020000 	.word	0x40020000

08002574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <NMI_Handler+0x4>

0800257a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <HardFault_Handler+0x4>

08002580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <MemManage_Handler+0x4>

08002586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <BusFault_Handler+0x4>

0800258c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <UsageFault_Handler+0x4>

08002592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a4:	f000 f882 	bl	80026ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80025a8:	f005 f8a6 	bl	80076f8 <xTaskGetSchedulerState>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80025b2:	f005 ff49 	bl	8008448 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025e6:	490e      	ldr	r1, [pc, #56]	; (8002620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025e8:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ec:	e002      	b.n	80025f4 <LoopCopyDataInit>

080025ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f2:	3304      	adds	r3, #4

080025f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f8:	d3f9      	bcc.n	80025ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025fc:	4c0b      	ldr	r4, [pc, #44]	; (800262c <LoopFillZerobss+0x26>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002600:	e001      	b.n	8002606 <LoopFillZerobss>

08002602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002604:	3204      	adds	r2, #4

08002606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002608:	d3fb      	bcc.n	8002602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800260a:	f7ff ffd7 	bl	80025bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800260e:	f006 f9f3 	bl	80089f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002612:	f7ff fa85 	bl	8001b20 <main>
  bx  lr    
 8002616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002618:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800261c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002620:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002624:	08008ce4 	.word	0x08008ce4
  ldr r2, =_sbss
 8002628:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 800262c:	20005efc 	.word	0x20005efc

08002630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC_IRQHandler>

08002632 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002636:	2003      	movs	r0, #3
 8002638:	f000 f92e 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263c:	200f      	movs	r0, #15
 800263e:	f000 f805 	bl	800264c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002642:	f7ff fd53 	bl	80020ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_InitTick+0x54>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <HAL_InitTick+0x58>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	4619      	mov	r1, r3
 800265e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002662:	fbb3 f3f1 	udiv	r3, r3, r1
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f93b 	bl	80028e6 <HAL_SYSTICK_Config>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e00e      	b.n	8002698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b0f      	cmp	r3, #15
 800267e:	d80a      	bhi.n	8002696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002680:	2200      	movs	r2, #0
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f000 f911 	bl	80028ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800268c:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <HAL_InitTick+0x5c>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000008 	.word	0x20000008
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_IncTick+0x20>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_IncTick+0x24>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <HAL_IncTick+0x24>)
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000008 	.word	0x20000008
 80026d0:	200013d8 	.word	0x200013d8

080026d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return uwTick;
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_GetTick+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	200013d8 	.word	0x200013d8

080026ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff ffee 	bl	80026d4 <HAL_GetTick>
 80026f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d005      	beq.n	8002712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_Delay+0x44>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002712:	bf00      	nop
 8002714:	f7ff ffde 	bl	80026d4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d8f7      	bhi.n	8002714 <HAL_Delay+0x28>
  {
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000008 	.word	0x20000008

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <__NVIC_SetPriorityGrouping+0x40>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 800275e:	4313      	orrs	r3, r2
 8002760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <__NVIC_SetPriorityGrouping+0x40>)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	60d3      	str	r3, [r2, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00
 8002778:	05fa0000 	.word	0x05fa0000

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	; (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	; (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002864:	d301      	bcc.n	800286a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002866:	2301      	movs	r3, #1
 8002868:	e00f      	b.n	800288a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <SysTick_Config+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002872:	210f      	movs	r1, #15
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f7ff ff8e 	bl	8002798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SysTick_Config+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <SysTick_Config+0x40>)
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ff47 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c0:	f7ff ff5c 	bl	800277c <__NVIC_GetPriorityGrouping>
 80028c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f7ff ff8e 	bl	80027ec <NVIC_EncodePriority>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff5d 	bl	8002798 <__NVIC_SetPriority>
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffb0 	bl	8002854 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06a      	b.n	80029e8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2223      	movs	r2, #35	; 0x23
 8002920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff fc09 	bl	800213c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_ETH_Init+0xf0>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <HAL_ETH_Init+0xf0>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002934:	6453      	str	r3, [r2, #68]	; 0x44
 8002936:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_ETH_Init+0xf0>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002942:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_ETH_Init+0xf4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <HAL_ETH_Init+0xf4>)
 8002948:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800294c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800294e:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_ETH_Init+0xf4>)
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4927      	ldr	r1, [pc, #156]	; (80029f4 <HAL_ETH_Init+0xf4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_ETH_Init+0xf4>)
 800295e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002976:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002978:	f7ff feac 	bl	80026d4 <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800297e:	e011      	b.n	80029a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002980:	f7ff fea8 	bl	80026d4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800298e:	d909      	bls.n	80029a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2204      	movs	r2, #4
 8002994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	22e0      	movs	r2, #224	; 0xe0
 800299c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e021      	b.n	80029e8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e4      	bne.n	8002980 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f958 	bl	8002c6c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f9ff 	bl	8002dc0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fa55 	bl	8002e72 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	461a      	mov	r2, r3
 80029ce:	2100      	movs	r1, #0
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f9bd 	bl	8002d50 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2210      	movs	r2, #16
 80029e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800

080029f8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4b51      	ldr	r3, [pc, #324]	; (8002b54 <ETH_SetMACConfig+0x15c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	7c1b      	ldrb	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <ETH_SetMACConfig+0x28>
 8002a1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a1e:	e000      	b.n	8002a22 <ETH_SetMACConfig+0x2a>
 8002a20:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	7c5b      	ldrb	r3, [r3, #17]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <ETH_SetMACConfig+0x38>
 8002a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a2e:	e000      	b.n	8002a32 <ETH_SetMACConfig+0x3a>
 8002a30:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a32:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	7fdb      	ldrb	r3, [r3, #31]
 8002a3e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a40:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	7f92      	ldrb	r2, [r2, #30]
 8002a4c:	2a00      	cmp	r2, #0
 8002a4e:	d102      	bne.n	8002a56 <ETH_SetMACConfig+0x5e>
 8002a50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a54:	e000      	b.n	8002a58 <ETH_SetMACConfig+0x60>
 8002a56:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	7f1b      	ldrb	r3, [r3, #28]
 8002a5e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a60:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	791b      	ldrb	r3, [r3, #4]
 8002a6c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a76:	2a00      	cmp	r2, #0
 8002a78:	d102      	bne.n	8002a80 <ETH_SetMACConfig+0x88>
 8002a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7e:	e000      	b.n	8002a82 <ETH_SetMACConfig+0x8a>
 8002a80:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	7bdb      	ldrb	r3, [r3, #15]
 8002a88:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a8a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a98:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7ff fe1a 	bl	80026ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002ade:	2a00      	cmp	r2, #0
 8002ae0:	d101      	bne.n	8002ae6 <ETH_SetMACConfig+0xee>
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	e000      	b.n	8002ae8 <ETH_SetMACConfig+0xf0>
 8002ae6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ae8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002aee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002af6:	2a01      	cmp	r2, #1
 8002af8:	d101      	bne.n	8002afe <ETH_SetMACConfig+0x106>
 8002afa:	2208      	movs	r2, #8
 8002afc:	e000      	b.n	8002b00 <ETH_SetMACConfig+0x108>
 8002afe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b00:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b08:	2a01      	cmp	r2, #1
 8002b0a:	d101      	bne.n	8002b10 <ETH_SetMACConfig+0x118>
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	e000      	b.n	8002b12 <ETH_SetMACConfig+0x11a>
 8002b10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b1a:	2a01      	cmp	r2, #1
 8002b1c:	d101      	bne.n	8002b22 <ETH_SetMACConfig+0x12a>
 8002b1e:	2202      	movs	r2, #2
 8002b20:	e000      	b.n	8002b24 <ETH_SetMACConfig+0x12c>
 8002b22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b24:	4313      	orrs	r3, r2
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7ff fdd5 	bl	80026ec <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	619a      	str	r2, [r3, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	ff20810f 	.word	0xff20810f

08002b58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <ETH_SetDMAConfig+0x110>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	7b1b      	ldrb	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <ETH_SetDMAConfig+0x2c>
 8002b7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b82:	e000      	b.n	8002b86 <ETH_SetDMAConfig+0x2e>
 8002b84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	7b5b      	ldrb	r3, [r3, #13]
 8002b8a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b8c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	7f52      	ldrb	r2, [r2, #29]
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	d102      	bne.n	8002b9c <ETH_SetDMAConfig+0x44>
 8002b96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b9a:	e000      	b.n	8002b9e <ETH_SetDMAConfig+0x46>
 8002b9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	7b9b      	ldrb	r3, [r3, #14]
 8002ba4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ba6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	7f1b      	ldrb	r3, [r3, #28]
 8002bb2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002bb4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	7f9b      	ldrb	r3, [r3, #30]
 8002bba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bbc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bc2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f7ff fd7c 	bl	80026ec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	791b      	ldrb	r3, [r3, #4]
 8002c06:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c0c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c12:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c18:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c20:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c22:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c2a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c30:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c3e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f7ff fd4d 	bl	80026ec <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	f8de3f23 	.word	0xf8de3f23

08002c6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0a6      	sub	sp, #152	; 0x98
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002cce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ce0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fe86 	bl	80029f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002cec:	2301      	movs	r3, #1
 8002cee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d20:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ff08 	bl	8002b58 <ETH_SetDMAConfig>
}
 8002d48:	bf00      	nop
 8002d4a:	3798      	adds	r7, #152	; 0x98
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3305      	adds	r3, #5
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	3204      	adds	r2, #4
 8002d68:	7812      	ldrb	r2, [r2, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <ETH_MACAddressConfig+0x68>)
 8002d72:	4413      	add	r3, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3303      	adds	r3, #3
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	061a      	lsls	r2, r3, #24
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3302      	adds	r3, #2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	4313      	orrs	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <ETH_MACAddressConfig+0x6c>)
 8002da2:	4413      	add	r3, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6013      	str	r3, [r2, #0]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40028040 	.word	0x40028040
 8002dbc:	40028044 	.word	0x40028044

08002dc0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e03e      	b.n	8002e4c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68d9      	ldr	r1, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2200      	movs	r2, #0
 8002dea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2200      	movs	r2, #0
 8002df6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	3206      	adds	r2, #6
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d80c      	bhi.n	8002e30 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68d9      	ldr	r1, [r3, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	e004      	b.n	8002e3a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d9bd      	bls.n	8002dce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e64:	611a      	str	r2, [r3, #16]
}
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e046      	b.n	8002f0e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6919      	ldr	r1, [r3, #16]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2200      	movs	r2, #0
 8002eae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ebc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002ec4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	3212      	adds	r2, #18
 8002eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d80c      	bhi.n	8002efe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6919      	ldr	r1, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60da      	str	r2, [r3, #12]
 8002efc:	e004      	b.n	8002f08 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d9b5      	bls.n	8002e80 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f3e:	60da      	str	r2, [r3, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e175      	b.n	8003258 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8164 	bne.w	8003252 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d005      	beq.n	8002fa2 <HAL_GPIO_Init+0x56>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d130      	bne.n	8003004 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd8:	2201      	movs	r2, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 0201 	and.w	r2, r3, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b03      	cmp	r3, #3
 800300e:	d017      	beq.n	8003040 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d123      	bne.n	8003094 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80be 	beq.w	8003252 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_GPIO_Init+0x324>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a65      	ldr	r2, [pc, #404]	; (8003270 <HAL_GPIO_Init+0x324>)
 80030dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_GPIO_Init+0x324>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030ee:	4a61      	ldr	r2, [pc, #388]	; (8003274 <HAL_GPIO_Init+0x328>)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a58      	ldr	r2, [pc, #352]	; (8003278 <HAL_GPIO_Init+0x32c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d037      	beq.n	800318a <HAL_GPIO_Init+0x23e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a57      	ldr	r2, [pc, #348]	; (800327c <HAL_GPIO_Init+0x330>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d031      	beq.n	8003186 <HAL_GPIO_Init+0x23a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a56      	ldr	r2, [pc, #344]	; (8003280 <HAL_GPIO_Init+0x334>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02b      	beq.n	8003182 <HAL_GPIO_Init+0x236>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a55      	ldr	r2, [pc, #340]	; (8003284 <HAL_GPIO_Init+0x338>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d025      	beq.n	800317e <HAL_GPIO_Init+0x232>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a54      	ldr	r2, [pc, #336]	; (8003288 <HAL_GPIO_Init+0x33c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01f      	beq.n	800317a <HAL_GPIO_Init+0x22e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a53      	ldr	r2, [pc, #332]	; (800328c <HAL_GPIO_Init+0x340>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d019      	beq.n	8003176 <HAL_GPIO_Init+0x22a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_GPIO_Init+0x344>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_Init+0x226>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a51      	ldr	r2, [pc, #324]	; (8003294 <HAL_GPIO_Init+0x348>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_GPIO_Init+0x222>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a50      	ldr	r2, [pc, #320]	; (8003298 <HAL_GPIO_Init+0x34c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_Init+0x21e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4f      	ldr	r2, [pc, #316]	; (800329c <HAL_GPIO_Init+0x350>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_GPIO_Init+0x21a>
 8003162:	2309      	movs	r3, #9
 8003164:	e012      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003166:	230a      	movs	r3, #10
 8003168:	e010      	b.n	800318c <HAL_GPIO_Init+0x240>
 800316a:	2308      	movs	r3, #8
 800316c:	e00e      	b.n	800318c <HAL_GPIO_Init+0x240>
 800316e:	2307      	movs	r3, #7
 8003170:	e00c      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003172:	2306      	movs	r3, #6
 8003174:	e00a      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003176:	2305      	movs	r3, #5
 8003178:	e008      	b.n	800318c <HAL_GPIO_Init+0x240>
 800317a:	2304      	movs	r3, #4
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x240>
 800317e:	2303      	movs	r3, #3
 8003180:	e004      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003182:	2302      	movs	r3, #2
 8003184:	e002      	b.n	800318c <HAL_GPIO_Init+0x240>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <HAL_GPIO_Init+0x240>
 800318a:	2300      	movs	r3, #0
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f002 0203 	and.w	r2, r2, #3
 8003192:	0092      	lsls	r2, r2, #2
 8003194:	4093      	lsls	r3, r2
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800319c:	4935      	ldr	r1, [pc, #212]	; (8003274 <HAL_GPIO_Init+0x328>)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_GPIO_Init+0x354>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ce:	4a34      	ldr	r2, [pc, #208]	; (80032a0 <HAL_GPIO_Init+0x354>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_GPIO_Init+0x354>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f8:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <HAL_GPIO_Init+0x354>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031fe:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <HAL_GPIO_Init+0x354>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003222:	4a1f      	ldr	r2, [pc, #124]	; (80032a0 <HAL_GPIO_Init+0x354>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_GPIO_Init+0x354>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_GPIO_Init+0x354>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3301      	adds	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	f67f ae86 	bls.w	8002f6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40013800 	.word	0x40013800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020400 	.word	0x40020400
 8003280:	40020800 	.word	0x40020800
 8003284:	40020c00 	.word	0x40020c00
 8003288:	40021000 	.word	0x40021000
 800328c:	40021400 	.word	0x40021400
 8003290:	40021800 	.word	0x40021800
 8003294:	40021c00 	.word	0x40021c00
 8003298:	40022000 	.word	0x40022000
 800329c:	40022400 	.word	0x40022400
 80032a0:	40013c00 	.word	0x40013c00

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032c0:	e003      	b.n	80032ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	041a      	lsls	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d8:	b08f      	sub	sp, #60	; 0x3c
 80032da:	af0a      	add	r7, sp, #40	; 0x28
 80032dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e116      	b.n	8003516 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff f8bc 	bl	8002480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f001 ffbe 	bl	80052a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	687e      	ldr	r6, [r7, #4]
 8003334:	466d      	mov	r5, sp
 8003336:	f106 0410 	add.w	r4, r6, #16
 800333a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800333c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800333e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003342:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003346:	e885 0003 	stmia.w	r5, {r0, r1}
 800334a:	1d33      	adds	r3, r6, #4
 800334c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800334e:	6838      	ldr	r0, [r7, #0]
 8003350:	f001 ff52 	bl	80051f8 <USB_CoreInit>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0d7      	b.n	8003516 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f001 ffac 	bl	80052ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	e04a      	b.n	800340e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	333d      	adds	r3, #61	; 0x3d
 8003388:	2201      	movs	r2, #1
 800338a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	333c      	adds	r3, #60	; 0x3c
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	b298      	uxth	r0, r3
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3344      	adds	r3, #68	; 0x44
 80033b4:	4602      	mov	r2, r0
 80033b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3340      	adds	r3, #64	; 0x40
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3348      	adds	r3, #72	; 0x48
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	334c      	adds	r3, #76	; 0x4c
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3354      	adds	r3, #84	; 0x54
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	3301      	adds	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d3af      	bcc.n	8003378 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]
 800341c:	e044      	b.n	80034a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	3301      	adds	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d3b5      	bcc.n	800341e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	687e      	ldr	r6, [r7, #4]
 80034ba:	466d      	mov	r5, sp
 80034bc:	f106 0410 	add.w	r4, r6, #16
 80034c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80034d0:	1d33      	adds	r3, r6, #4
 80034d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034d4:	6838      	ldr	r0, [r7, #0]
 80034d6:	f001 ff45 	bl	8005364 <USB_DevInit>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e014      	b.n	8003516 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f80b 	bl	8003520 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f002 f903 	bl	800571a <USB_DevDisconnect>

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003520 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_PCDEx_ActivateLPM+0x44>)
 8003550:	4313      	orrs	r3, r2
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	10000003 	.word	0x10000003

08003568 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40007000 	.word	0x40007000

08003588 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	4b23      	ldr	r3, [pc, #140]	; (8003620 <HAL_PWREx_EnableOverDrive+0x98>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <HAL_PWREx_EnableOverDrive+0x98>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_PWREx_EnableOverDrive+0x98>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b6:	f7ff f88d 	bl	80026d4 <HAL_GetTick>
 80035ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035bc:	e009      	b.n	80035d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035be:	f7ff f889 	bl	80026d4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035cc:	d901      	bls.n	80035d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e022      	b.n	8003618 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035de:	d1ee      	bne.n	80035be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ec:	f7ff f872 	bl	80026d4 <HAL_GetTick>
 80035f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035f2:	e009      	b.n	8003608 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035f4:	f7ff f86e 	bl	80026d4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003602:	d901      	bls.n	8003608 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e007      	b.n	8003618 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_PWREx_EnableOverDrive+0x9c>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003614:	d1ee      	bne.n	80035f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40023800 	.word	0x40023800
 8003624:	40007000 	.word	0x40007000

08003628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003630:	2300      	movs	r3, #0
 8003632:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e29b      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8087 	beq.w	800375a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800364c:	4b96      	ldr	r3, [pc, #600]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030c 	and.w	r3, r3, #12
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00c      	beq.n	8003672 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003658:	4b93      	ldr	r3, [pc, #588]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d112      	bne.n	800368a <HAL_RCC_OscConfig+0x62>
 8003664:	4b90      	ldr	r3, [pc, #576]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003670:	d10b      	bne.n	800368a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003672:	4b8d      	ldr	r3, [pc, #564]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d06c      	beq.n	8003758 <HAL_RCC_OscConfig+0x130>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d168      	bne.n	8003758 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e275      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x7a>
 8003694:	4b84      	ldr	r3, [pc, #528]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a83      	ldr	r2, [pc, #524]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800369a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	e02e      	b.n	8003700 <HAL_RCC_OscConfig+0xd8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x9c>
 80036aa:	4b7f      	ldr	r3, [pc, #508]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7e      	ldr	r2, [pc, #504]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b7c      	ldr	r3, [pc, #496]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7b      	ldr	r2, [pc, #492]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01d      	b.n	8003700 <HAL_RCC_OscConfig+0xd8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0xc0>
 80036ce:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a75      	ldr	r2, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a72      	ldr	r2, [pc, #456]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0xd8>
 80036e8:	4b6f      	ldr	r3, [pc, #444]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6e      	ldr	r2, [pc, #440]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6b      	ldr	r2, [pc, #428]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80036fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe ffe4 	bl	80026d4 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fe ffe0 	bl	80026d4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e229      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b61      	ldr	r3, [pc, #388]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0xe8>
 800372e:	e014      	b.n	800375a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe ffd0 	bl	80026d4 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003738:	f7fe ffcc 	bl	80026d4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e215      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	4b57      	ldr	r3, [pc, #348]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x110>
 8003756:	e000      	b.n	800375a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d069      	beq.n	800383a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003766:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b4d      	ldr	r3, [pc, #308]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b08      	cmp	r3, #8
 800377c:	d11c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x190>
 800377e:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d116      	bne.n	80037b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_RCC_OscConfig+0x17a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e1e9      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	493d      	ldr	r1, [pc, #244]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	e040      	b.n	800383a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d023      	beq.n	8003808 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c0:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a38      	ldr	r2, [pc, #224]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe ff82 	bl	80026d4 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fe ff7e 	bl	80026d4 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e1c7      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f2:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4929      	ldr	r1, [pc, #164]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
 8003806:	e018      	b.n	800383a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003808:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe ff5e 	bl	80026d4 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381c:	f7fe ff5a 	bl	80026d4 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e1a3      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d038      	beq.n	80038b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d019      	beq.n	8003882 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385a:	f7fe ff3b 	bl	80026d4 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003862:	f7fe ff37 	bl	80026d4 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e180      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x23a>
 8003880:	e01a      	b.n	80038b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003886:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <HAL_RCC_OscConfig+0x280>)
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fe ff21 	bl	80026d4 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003896:	f7fe ff1d 	bl	80026d4 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d903      	bls.n	80038ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e166      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
 80038a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b92      	ldr	r3, [pc, #584]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ee      	bne.n	8003896 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a4 	beq.w	8003a0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c6:	4b8c      	ldr	r3, [pc, #560]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	4b89      	ldr	r3, [pc, #548]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a88      	ldr	r2, [pc, #544]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 80038d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
 80038de:	4b86      	ldr	r3, [pc, #536]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ea:	2301      	movs	r3, #1
 80038ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ee:	4b83      	ldr	r3, [pc, #524]	; (8003afc <HAL_RCC_OscConfig+0x4d4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d118      	bne.n	800392c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038fa:	4b80      	ldr	r3, [pc, #512]	; (8003afc <HAL_RCC_OscConfig+0x4d4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a7f      	ldr	r2, [pc, #508]	; (8003afc <HAL_RCC_OscConfig+0x4d4>)
 8003900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003906:	f7fe fee5 	bl	80026d4 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390e:	f7fe fee1 	bl	80026d4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b64      	cmp	r3, #100	; 0x64
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e12a      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003920:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x4d4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d106      	bne.n	8003942 <HAL_RCC_OscConfig+0x31a>
 8003934:	4b70      	ldr	r3, [pc, #448]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a6f      	ldr	r2, [pc, #444]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
 8003940:	e02d      	b.n	800399e <HAL_RCC_OscConfig+0x376>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x33c>
 800394a:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a6a      	ldr	r2, [pc, #424]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a67      	ldr	r2, [pc, #412]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 800395c:	f023 0304 	bic.w	r3, r3, #4
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	e01c      	b.n	800399e <HAL_RCC_OscConfig+0x376>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b05      	cmp	r3, #5
 800396a:	d10c      	bne.n	8003986 <HAL_RCC_OscConfig+0x35e>
 800396c:	4b62      	ldr	r3, [pc, #392]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a61      	ldr	r2, [pc, #388]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
 8003978:	4b5f      	ldr	r3, [pc, #380]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	4a5e      	ldr	r2, [pc, #376]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6713      	str	r3, [r2, #112]	; 0x70
 8003984:	e00b      	b.n	800399e <HAL_RCC_OscConfig+0x376>
 8003986:	4b5c      	ldr	r3, [pc, #368]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	4a5b      	ldr	r2, [pc, #364]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	6713      	str	r3, [r2, #112]	; 0x70
 8003992:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	4a58      	ldr	r2, [pc, #352]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d015      	beq.n	80039d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fe fe95 	bl	80026d4 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fe fe91 	bl	80026d4 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e0d8      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c4:	4b4c      	ldr	r3, [pc, #304]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ee      	beq.n	80039ae <HAL_RCC_OscConfig+0x386>
 80039d0:	e014      	b.n	80039fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fe fe7f 	bl	80026d4 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe fe7b 	bl	80026d4 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e0c2      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f0:	4b41      	ldr	r3, [pc, #260]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ee      	bne.n	80039da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a02:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a3c      	ldr	r2, [pc, #240]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 80ae 	beq.w	8003b74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a18:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d06d      	beq.n	8003b00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d14b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2c:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a31      	ldr	r2, [pc, #196]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe fe4c 	bl	80026d4 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fe fe48 	bl	80026d4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e091      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	3b01      	subs	r3, #1
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	071b      	lsls	r3, r3, #28
 8003a8a:	491b      	ldr	r1, [pc, #108]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fe1a 	bl	80026d4 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fe fe16 	bl	80026d4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e05f      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab6:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x47c>
 8003ac2:	e057      	b.n	8003b74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe fe00 	bl	80026d4 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fe fdfc 	bl	80026d4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e045      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_OscConfig+0x4d0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4b0>
 8003af6:	e03d      	b.n	8003b74 <HAL_RCC_OscConfig+0x54c>
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b00:	4b1f      	ldr	r3, [pc, #124]	; (8003b80 <HAL_RCC_OscConfig+0x558>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d030      	beq.n	8003b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d129      	bne.n	8003b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d122      	bne.n	8003b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d119      	bne.n	8003b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d10f      	bne.n	8003b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800

08003b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0d0      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b6a      	ldr	r3, [pc, #424]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d910      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b67      	ldr	r3, [pc, #412]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 020f 	bic.w	r2, r3, #15
 8003bb2:	4965      	ldr	r1, [pc, #404]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b63      	ldr	r3, [pc, #396]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0b8      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be4:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a58      	ldr	r2, [pc, #352]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bfc:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4a52      	ldr	r2, [pc, #328]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b50      	ldr	r3, [pc, #320]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	494d      	ldr	r1, [pc, #308]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d040      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d115      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e07f      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e073      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b3d      	ldr	r3, [pc, #244]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06b      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4936      	ldr	r1, [pc, #216]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c78:	f7fe fd2c 	bl	80026d4 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fe fd28 	bl	80026d4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e053      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d210      	bcs.n	8003cd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 020f 	bic.w	r2, r3, #15
 8003cbe:	4922      	ldr	r1, [pc, #136]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e032      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4916      	ldr	r1, [pc, #88]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	490e      	ldr	r1, [pc, #56]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d16:	f000 f821 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	490a      	ldr	r1, [pc, #40]	; (8003d50 <HAL_RCC_ClockConfig+0x1cc>)
 8003d28:	5ccb      	ldrb	r3, [r1, r3]
 8003d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2e:	4a09      	ldr	r2, [pc, #36]	; (8003d54 <HAL_RCC_ClockConfig+0x1d0>)
 8003d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1d4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fc88 	bl	800264c <HAL_InitTick>

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	08008cbc 	.word	0x08008cbc
 8003d54:	20000000 	.word	0x20000000
 8003d58:	20000004 	.word	0x20000004

08003d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d60:	b094      	sub	sp, #80	; 0x50
 8003d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	647b      	str	r3, [r7, #68]	; 0x44
 8003d68:	2300      	movs	r3, #0
 8003d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d74:	4b79      	ldr	r3, [pc, #484]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d00d      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x40>
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	f200 80e1 	bhi.w	8003f48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x34>
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d8e:	e0db      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d90:	4b73      	ldr	r3, [pc, #460]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d94:	e0db      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d96:	4b73      	ldr	r3, [pc, #460]	; (8003f64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d9a:	e0d8      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d9c:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003da6:	4b6d      	ldr	r3, [pc, #436]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d063      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db2:	4b6a      	ldr	r3, [pc, #424]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	2200      	movs	r2, #0
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003dca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dce:	4622      	mov	r2, r4
 8003dd0:	462b      	mov	r3, r5
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	0159      	lsls	r1, r3, #5
 8003ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de0:	0150      	lsls	r0, r2, #5
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4621      	mov	r1, r4
 8003de8:	1a51      	subs	r1, r2, r1
 8003dea:	6139      	str	r1, [r7, #16]
 8003dec:	4629      	mov	r1, r5
 8003dee:	eb63 0301 	sbc.w	r3, r3, r1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e00:	4659      	mov	r1, fp
 8003e02:	018b      	lsls	r3, r1, #6
 8003e04:	4651      	mov	r1, sl
 8003e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e0a:	4651      	mov	r1, sl
 8003e0c:	018a      	lsls	r2, r1, #6
 8003e0e:	4651      	mov	r1, sl
 8003e10:	ebb2 0801 	subs.w	r8, r2, r1
 8003e14:	4659      	mov	r1, fp
 8003e16:	eb63 0901 	sbc.w	r9, r3, r1
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e2e:	4690      	mov	r8, r2
 8003e30:	4699      	mov	r9, r3
 8003e32:	4623      	mov	r3, r4
 8003e34:	eb18 0303 	adds.w	r3, r8, r3
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	462b      	mov	r3, r5
 8003e3c:	eb49 0303 	adc.w	r3, r9, r3
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e4e:	4629      	mov	r1, r5
 8003e50:	024b      	lsls	r3, r1, #9
 8003e52:	4621      	mov	r1, r4
 8003e54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e58:	4621      	mov	r1, r4
 8003e5a:	024a      	lsls	r2, r1, #9
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e62:	2200      	movs	r2, #0
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e6c:	f7fc fa32 	bl	80002d4 <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4613      	mov	r3, r2
 8003e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e78:	e058      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7a:	4b38      	ldr	r3, [pc, #224]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	099b      	lsrs	r3, r3, #6
 8003e80:	2200      	movs	r2, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	4611      	mov	r1, r2
 8003e86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	f04f 0000 	mov.w	r0, #0
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	0159      	lsls	r1, r3, #5
 8003ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea6:	0150      	lsls	r0, r2, #5
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4641      	mov	r1, r8
 8003eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8003ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	00eb      	lsls	r3, r5, #3
 8003ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee2:	00e2      	lsls	r2, r4, #3
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	4643      	mov	r3, r8
 8003eea:	18e3      	adds	r3, r4, r3
 8003eec:	603b      	str	r3, [r7, #0]
 8003eee:	464b      	mov	r3, r9
 8003ef0:	eb45 0303 	adc.w	r3, r5, r3
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f02:	4629      	mov	r1, r5
 8003f04:	028b      	lsls	r3, r1, #10
 8003f06:	4621      	mov	r1, r4
 8003f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	028a      	lsls	r2, r1, #10
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f16:	2200      	movs	r2, #0
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	61fa      	str	r2, [r7, #28]
 8003f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f20:	f7fc f9d8 	bl	80002d4 <__aeabi_uldivmod>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4613      	mov	r3, r2
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	3301      	adds	r3, #1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f46:	e002      	b.n	8003f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3750      	adds	r7, #80	; 0x50
 8003f54:	46bd      	mov	sp, r7
 8003f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	007a1200 	.word	0x007a1200

08003f68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000000 	.word	0x20000000

08003f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f84:	f7ff fff0 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	0a9b      	lsrs	r3, r3, #10
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4903      	ldr	r1, [pc, #12]	; (8003fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	08008ccc 	.word	0x08008ccc

08003fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fac:	f7ff ffdc 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	0b5b      	lsrs	r3, r3, #13
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4903      	ldr	r1, [pc, #12]	; (8003fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	08008ccc 	.word	0x08008ccc

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ff8:	4b69      	ldr	r3, [pc, #420]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a68      	ldr	r2, [pc, #416]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004002:	6093      	str	r3, [r2, #8]
 8004004:	4b66      	ldr	r3, [pc, #408]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	4964      	ldr	r1, [pc, #400]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d017      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800402a:	4b5d      	ldr	r3, [pc, #372]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	4959      	ldr	r1, [pc, #356]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004048:	d101      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d017      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004066:	4b4e      	ldr	r3, [pc, #312]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800406c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	494a      	ldr	r1, [pc, #296]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004084:	d101      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004092:	2301      	movs	r3, #1
 8004094:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 808b 	beq.w	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b4:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	4a39      	ldr	r2, [pc, #228]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040be:	6413      	str	r3, [r2, #64]	; 0x40
 80040c0:	4b37      	ldr	r3, [pc, #220]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040cc:	4b35      	ldr	r3, [pc, #212]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fe fafc 	bl	80026d4 <HAL_GetTick>
 80040dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e0:	f7fe faf8 	bl	80026d4 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e38f      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040f2:	4b2c      	ldr	r3, [pc, #176]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040fe:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d035      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	429a      	cmp	r2, r3
 800411a:	d02e      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004124:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004126:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004132:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	4a1a      	ldr	r2, [pc, #104]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800413e:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d114      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe fac0 	bl	80026d4 <HAL_GetTick>
 8004154:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	e00a      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004158:	f7fe fabc 	bl	80026d4 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e351      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0ee      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004186:	d111      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004196:	400b      	ands	r3, r1
 8004198:	4901      	ldr	r1, [pc, #4]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	608b      	str	r3, [r1, #8]
 800419e:	e00b      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40007000 	.word	0x40007000
 80041a8:	0ffffcff 	.word	0x0ffffcff
 80041ac:	4bac      	ldr	r3, [pc, #688]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4aab      	ldr	r2, [pc, #684]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041b6:	6093      	str	r3, [r2, #8]
 80041b8:	4ba9      	ldr	r3, [pc, #676]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c4:	49a6      	ldr	r1, [pc, #664]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d010      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041d6:	4ba2      	ldr	r3, [pc, #648]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041dc:	4aa0      	ldr	r2, [pc, #640]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80041e6:	4b9e      	ldr	r3, [pc, #632]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	499b      	ldr	r1, [pc, #620]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004204:	4b96      	ldr	r3, [pc, #600]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004212:	4993      	ldr	r1, [pc, #588]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004226:	4b8e      	ldr	r3, [pc, #568]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004234:	498a      	ldr	r1, [pc, #552]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004248:	4b85      	ldr	r3, [pc, #532]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004256:	4982      	ldr	r1, [pc, #520]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800426a:	4b7d      	ldr	r3, [pc, #500]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4979      	ldr	r1, [pc, #484]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800428c:	4b74      	ldr	r3, [pc, #464]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	4971      	ldr	r1, [pc, #452]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ae:	4b6c      	ldr	r3, [pc, #432]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f023 020c 	bic.w	r2, r3, #12
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	4968      	ldr	r1, [pc, #416]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042d0:	4b63      	ldr	r3, [pc, #396]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	4960      	ldr	r1, [pc, #384]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042f2:	4b5b      	ldr	r3, [pc, #364]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	4957      	ldr	r1, [pc, #348]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004314:	4b52      	ldr	r3, [pc, #328]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	494f      	ldr	r1, [pc, #316]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004336:	4b4a      	ldr	r3, [pc, #296]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	4946      	ldr	r1, [pc, #280]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004358:	4b41      	ldr	r3, [pc, #260]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004366:	493e      	ldr	r1, [pc, #248]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800437a:	4b39      	ldr	r3, [pc, #228]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004380:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	4935      	ldr	r1, [pc, #212]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800439c:	4b30      	ldr	r3, [pc, #192]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043aa:	492d      	ldr	r1, [pc, #180]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d011      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043be:	4b28      	ldr	r3, [pc, #160]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043cc:	4924      	ldr	r1, [pc, #144]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043dc:	d101      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80043de:	2301      	movs	r3, #1
 80043e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043fe:	4b18      	ldr	r3, [pc, #96]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	4914      	ldr	r1, [pc, #80]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004430:	490b      	ldr	r1, [pc, #44]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00f      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004454:	4902      	ldr	r1, [pc, #8]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800445c:	e002      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004470:	4b8a      	ldr	r3, [pc, #552]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004476:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	4986      	ldr	r1, [pc, #536]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004494:	4b81      	ldr	r3, [pc, #516]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800449a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a4:	497d      	ldr	r1, [pc, #500]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d006      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80d6 	beq.w	800466c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044c0:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a75      	ldr	r2, [pc, #468]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fe f902 	bl	80026d4 <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044d4:	f7fe f8fe 	bl	80026d4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e195      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e6:	4b6d      	ldr	r3, [pc, #436]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d021      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11d      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004506:	4b65      	ldr	r3, [pc, #404]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004514:	4b61      	ldr	r3, [pc, #388]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800451a:	0e1b      	lsrs	r3, r3, #24
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	019a      	lsls	r2, r3, #6
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	431a      	orrs	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	061b      	lsls	r3, r3, #24
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	071b      	lsls	r3, r3, #28
 800453a:	4958      	ldr	r1, [pc, #352]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02e      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456c:	d129      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800456e:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800457c:	4b47      	ldr	r3, [pc, #284]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004582:	0f1b      	lsrs	r3, r3, #28
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	019a      	lsls	r2, r3, #6
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	061b      	lsls	r3, r3, #24
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	071b      	lsls	r3, r3, #28
 80045a2:	493e      	ldr	r1, [pc, #248]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045aa:	4b3c      	ldr	r3, [pc, #240]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b0:	f023 021f 	bic.w	r2, r3, #31
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	3b01      	subs	r3, #1
 80045ba:	4938      	ldr	r1, [pc, #224]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01d      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045ce:	4b33      	ldr	r3, [pc, #204]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d4:	0e1b      	lsrs	r3, r3, #24
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045dc:	4b2f      	ldr	r3, [pc, #188]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e2:	0f1b      	lsrs	r3, r3, #28
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	019a      	lsls	r2, r3, #6
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	431a      	orrs	r2, r3
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	071b      	lsls	r3, r3, #28
 8004602:	4926      	ldr	r1, [pc, #152]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d011      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	019a      	lsls	r2, r3, #6
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	061b      	lsls	r3, r3, #24
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	071b      	lsls	r3, r3, #28
 8004632:	491a      	ldr	r1, [pc, #104]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004640:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004646:	f7fe f845 	bl	80026d4 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800464e:	f7fe f841 	bl	80026d4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b64      	cmp	r3, #100	; 0x64
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0d8      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	f040 80ce 	bne.w	8004810 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a08      	ldr	r2, [pc, #32]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004680:	f7fe f828 	bl	80026d4 <HAL_GetTick>
 8004684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004686:	e00b      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004688:	f7fe f824 	bl	80026d4 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b64      	cmp	r3, #100	; 0x64
 8004694:	d904      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0bb      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046a0:	4b5e      	ldr	r3, [pc, #376]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ac:	d0ec      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02e      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d12a      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046d6:	4b51      	ldr	r3, [pc, #324]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046e4:	4b4d      	ldr	r3, [pc, #308]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	0f1b      	lsrs	r3, r3, #28
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	019a      	lsls	r2, r3, #6
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	431a      	orrs	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	071b      	lsls	r3, r3, #28
 800470a:	4944      	ldr	r1, [pc, #272]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004712:	4b42      	ldr	r3, [pc, #264]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004718:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	3b01      	subs	r3, #1
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	493d      	ldr	r1, [pc, #244]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d022      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004740:	d11d      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004742:	4b36      	ldr	r3, [pc, #216]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	0e1b      	lsrs	r3, r3, #24
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004750:	4b32      	ldr	r3, [pc, #200]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	0f1b      	lsrs	r3, r3, #28
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	019a      	lsls	r2, r3, #6
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	061b      	lsls	r3, r3, #24
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	071b      	lsls	r3, r3, #28
 8004776:	4929      	ldr	r1, [pc, #164]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d028      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800478a:	4b24      	ldr	r3, [pc, #144]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	0e1b      	lsrs	r3, r3, #24
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004798:	4b20      	ldr	r3, [pc, #128]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	0c1b      	lsrs	r3, r3, #16
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	019a      	lsls	r2, r3, #6
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	071b      	lsls	r3, r3, #28
 80047be:	4917      	ldr	r1, [pc, #92]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4911      	ldr	r1, [pc, #68]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047dc:	4b0f      	ldr	r3, [pc, #60]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0e      	ldr	r2, [pc, #56]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e8:	f7fd ff74 	bl	80026d4 <HAL_GetTick>
 80047ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047f0:	f7fd ff70 	bl	80026d4 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	; 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e007      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800480a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800480e:	d1ef      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800

08004820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e040      	b.n	80048b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fd32 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8b0 	bl	80049c4 <UART_SetConfig>
 8004864:	4603      	mov	r3, r0
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e022      	b.n	80048b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fb08 	bl	8004e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800488a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800489a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fb8f 	bl	8004fd0 <UART_CheckIdleState>
 80048b2:	4603      	mov	r3, r0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d171      	bne.n	80049b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_UART_Transmit+0x24>
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e06a      	b.n	80049ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2221      	movs	r2, #33	; 0x21
 80048f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048f2:	f7fd feef 	bl	80026d4 <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	88fa      	ldrh	r2, [r7, #6]
 8004904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004910:	d108      	bne.n	8004924 <HAL_UART_Transmit+0x68>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d104      	bne.n	8004924 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	e003      	b.n	800492c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004928:	2300      	movs	r3, #0
 800492a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800492c:	e02c      	b.n	8004988 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2200      	movs	r2, #0
 8004936:	2180      	movs	r1, #128	; 0x80
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fb96 	bl	800506a <UART_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e038      	b.n	80049ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	3302      	adds	r3, #2
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	e007      	b.n	8004976 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	3301      	adds	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800498e:	b29b      	uxth	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1cc      	bne.n	800492e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2200      	movs	r2, #0
 800499c:	2140      	movs	r1, #64	; 0x40
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fb63 	bl	800506a <UART_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e005      	b.n	80049ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4ba6      	ldr	r3, [pc, #664]	; (8004c88 <UART_SetConfig+0x2c4>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	6979      	ldr	r1, [r7, #20]
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a94      	ldr	r2, [pc, #592]	; (8004c8c <UART_SetConfig+0x2c8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d120      	bne.n	8004a82 <UART_SetConfig+0xbe>
 8004a40:	4b93      	ldr	r3, [pc, #588]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d816      	bhi.n	8004a7c <UART_SetConfig+0xb8>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x90>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a65 	.word	0x08004a65
 8004a58:	08004a71 	.word	0x08004a71
 8004a5c:	08004a6b 	.word	0x08004a6b
 8004a60:	08004a77 	.word	0x08004a77
 8004a64:	2301      	movs	r3, #1
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e150      	b.n	8004d0c <UART_SetConfig+0x348>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e14d      	b.n	8004d0c <UART_SetConfig+0x348>
 8004a70:	2304      	movs	r3, #4
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e14a      	b.n	8004d0c <UART_SetConfig+0x348>
 8004a76:	2308      	movs	r3, #8
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e147      	b.n	8004d0c <UART_SetConfig+0x348>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e144      	b.n	8004d0c <UART_SetConfig+0x348>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <UART_SetConfig+0x2d0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d132      	bne.n	8004af2 <UART_SetConfig+0x12e>
 8004a8c:	4b80      	ldr	r3, [pc, #512]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b0c      	cmp	r3, #12
 8004a98:	d828      	bhi.n	8004aec <UART_SetConfig+0x128>
 8004a9a:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_SetConfig+0xdc>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ad5 	.word	0x08004ad5
 8004aa4:	08004aed 	.word	0x08004aed
 8004aa8:	08004aed 	.word	0x08004aed
 8004aac:	08004aed 	.word	0x08004aed
 8004ab0:	08004ae1 	.word	0x08004ae1
 8004ab4:	08004aed 	.word	0x08004aed
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004aed 	.word	0x08004aed
 8004ac0:	08004adb 	.word	0x08004adb
 8004ac4:	08004aed 	.word	0x08004aed
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004aed 	.word	0x08004aed
 8004ad0:	08004ae7 	.word	0x08004ae7
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e118      	b.n	8004d0c <UART_SetConfig+0x348>
 8004ada:	2302      	movs	r3, #2
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e115      	b.n	8004d0c <UART_SetConfig+0x348>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e112      	b.n	8004d0c <UART_SetConfig+0x348>
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e10f      	b.n	8004d0c <UART_SetConfig+0x348>
 8004aec:	2310      	movs	r3, #16
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e10c      	b.n	8004d0c <UART_SetConfig+0x348>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a68      	ldr	r2, [pc, #416]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d120      	bne.n	8004b3e <UART_SetConfig+0x17a>
 8004afc:	4b64      	ldr	r3, [pc, #400]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b06:	2b30      	cmp	r3, #48	; 0x30
 8004b08:	d013      	beq.n	8004b32 <UART_SetConfig+0x16e>
 8004b0a:	2b30      	cmp	r3, #48	; 0x30
 8004b0c:	d814      	bhi.n	8004b38 <UART_SetConfig+0x174>
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d009      	beq.n	8004b26 <UART_SetConfig+0x162>
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d810      	bhi.n	8004b38 <UART_SetConfig+0x174>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <UART_SetConfig+0x15c>
 8004b1a:	2b10      	cmp	r3, #16
 8004b1c:	d006      	beq.n	8004b2c <UART_SetConfig+0x168>
 8004b1e:	e00b      	b.n	8004b38 <UART_SetConfig+0x174>
 8004b20:	2300      	movs	r3, #0
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e0f2      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b26:	2302      	movs	r3, #2
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e0ef      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e0ec      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b32:	2308      	movs	r3, #8
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e0e9      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e0e6      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a56      	ldr	r2, [pc, #344]	; (8004c9c <UART_SetConfig+0x2d8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d120      	bne.n	8004b8a <UART_SetConfig+0x1c6>
 8004b48:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b52:	2bc0      	cmp	r3, #192	; 0xc0
 8004b54:	d013      	beq.n	8004b7e <UART_SetConfig+0x1ba>
 8004b56:	2bc0      	cmp	r3, #192	; 0xc0
 8004b58:	d814      	bhi.n	8004b84 <UART_SetConfig+0x1c0>
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d009      	beq.n	8004b72 <UART_SetConfig+0x1ae>
 8004b5e:	2b80      	cmp	r3, #128	; 0x80
 8004b60:	d810      	bhi.n	8004b84 <UART_SetConfig+0x1c0>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <UART_SetConfig+0x1a8>
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d006      	beq.n	8004b78 <UART_SetConfig+0x1b4>
 8004b6a:	e00b      	b.n	8004b84 <UART_SetConfig+0x1c0>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	77fb      	strb	r3, [r7, #31]
 8004b70:	e0cc      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b72:	2302      	movs	r3, #2
 8004b74:	77fb      	strb	r3, [r7, #31]
 8004b76:	e0c9      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e0c6      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	77fb      	strb	r3, [r7, #31]
 8004b82:	e0c3      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b84:	2310      	movs	r3, #16
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e0c0      	b.n	8004d0c <UART_SetConfig+0x348>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a44      	ldr	r2, [pc, #272]	; (8004ca0 <UART_SetConfig+0x2dc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d125      	bne.n	8004be0 <UART_SetConfig+0x21c>
 8004b94:	4b3e      	ldr	r3, [pc, #248]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba2:	d017      	beq.n	8004bd4 <UART_SetConfig+0x210>
 8004ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba8:	d817      	bhi.n	8004bda <UART_SetConfig+0x216>
 8004baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bae:	d00b      	beq.n	8004bc8 <UART_SetConfig+0x204>
 8004bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb4:	d811      	bhi.n	8004bda <UART_SetConfig+0x216>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <UART_SetConfig+0x1fe>
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbe:	d006      	beq.n	8004bce <UART_SetConfig+0x20a>
 8004bc0:	e00b      	b.n	8004bda <UART_SetConfig+0x216>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e0a1      	b.n	8004d0c <UART_SetConfig+0x348>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e09e      	b.n	8004d0c <UART_SetConfig+0x348>
 8004bce:	2304      	movs	r3, #4
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e09b      	b.n	8004d0c <UART_SetConfig+0x348>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e098      	b.n	8004d0c <UART_SetConfig+0x348>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e095      	b.n	8004d0c <UART_SetConfig+0x348>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a2f      	ldr	r2, [pc, #188]	; (8004ca4 <UART_SetConfig+0x2e0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d125      	bne.n	8004c36 <UART_SetConfig+0x272>
 8004bea:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf8:	d017      	beq.n	8004c2a <UART_SetConfig+0x266>
 8004bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bfe:	d817      	bhi.n	8004c30 <UART_SetConfig+0x26c>
 8004c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c04:	d00b      	beq.n	8004c1e <UART_SetConfig+0x25a>
 8004c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0a:	d811      	bhi.n	8004c30 <UART_SetConfig+0x26c>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <UART_SetConfig+0x254>
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c14:	d006      	beq.n	8004c24 <UART_SetConfig+0x260>
 8004c16:	e00b      	b.n	8004c30 <UART_SetConfig+0x26c>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e076      	b.n	8004d0c <UART_SetConfig+0x348>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e073      	b.n	8004d0c <UART_SetConfig+0x348>
 8004c24:	2304      	movs	r3, #4
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e070      	b.n	8004d0c <UART_SetConfig+0x348>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e06d      	b.n	8004d0c <UART_SetConfig+0x348>
 8004c30:	2310      	movs	r3, #16
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e06a      	b.n	8004d0c <UART_SetConfig+0x348>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <UART_SetConfig+0x2e4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d138      	bne.n	8004cb2 <UART_SetConfig+0x2ee>
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c4e:	d017      	beq.n	8004c80 <UART_SetConfig+0x2bc>
 8004c50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c54:	d82a      	bhi.n	8004cac <UART_SetConfig+0x2e8>
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5a:	d00b      	beq.n	8004c74 <UART_SetConfig+0x2b0>
 8004c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c60:	d824      	bhi.n	8004cac <UART_SetConfig+0x2e8>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <UART_SetConfig+0x2aa>
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	d006      	beq.n	8004c7a <UART_SetConfig+0x2b6>
 8004c6c:	e01e      	b.n	8004cac <UART_SetConfig+0x2e8>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e04b      	b.n	8004d0c <UART_SetConfig+0x348>
 8004c74:	2302      	movs	r3, #2
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e048      	b.n	8004d0c <UART_SetConfig+0x348>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e045      	b.n	8004d0c <UART_SetConfig+0x348>
 8004c80:	2308      	movs	r3, #8
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e042      	b.n	8004d0c <UART_SetConfig+0x348>
 8004c86:	bf00      	nop
 8004c88:	efff69f3 	.word	0xefff69f3
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40004400 	.word	0x40004400
 8004c98:	40004800 	.word	0x40004800
 8004c9c:	40004c00 	.word	0x40004c00
 8004ca0:	40005000 	.word	0x40005000
 8004ca4:	40011400 	.word	0x40011400
 8004ca8:	40007800 	.word	0x40007800
 8004cac:	2310      	movs	r3, #16
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e02c      	b.n	8004d0c <UART_SetConfig+0x348>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a72      	ldr	r2, [pc, #456]	; (8004e80 <UART_SetConfig+0x4bc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d125      	bne.n	8004d08 <UART_SetConfig+0x344>
 8004cbc:	4b71      	ldr	r3, [pc, #452]	; (8004e84 <UART_SetConfig+0x4c0>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cca:	d017      	beq.n	8004cfc <UART_SetConfig+0x338>
 8004ccc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cd0:	d817      	bhi.n	8004d02 <UART_SetConfig+0x33e>
 8004cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd6:	d00b      	beq.n	8004cf0 <UART_SetConfig+0x32c>
 8004cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cdc:	d811      	bhi.n	8004d02 <UART_SetConfig+0x33e>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <UART_SetConfig+0x326>
 8004ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce6:	d006      	beq.n	8004cf6 <UART_SetConfig+0x332>
 8004ce8:	e00b      	b.n	8004d02 <UART_SetConfig+0x33e>
 8004cea:	2300      	movs	r3, #0
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e00d      	b.n	8004d0c <UART_SetConfig+0x348>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e00a      	b.n	8004d0c <UART_SetConfig+0x348>
 8004cf6:	2304      	movs	r3, #4
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e007      	b.n	8004d0c <UART_SetConfig+0x348>
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e004      	b.n	8004d0c <UART_SetConfig+0x348>
 8004d02:	2310      	movs	r3, #16
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e001      	b.n	8004d0c <UART_SetConfig+0x348>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d14:	d15b      	bne.n	8004dce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d16:	7ffb      	ldrb	r3, [r7, #31]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d828      	bhi.n	8004d6e <UART_SetConfig+0x3aa>
 8004d1c:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0x360>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	08004d6f 	.word	0x08004d6f
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	08004d6f 	.word	0x08004d6f
 8004d3c:	08004d6f 	.word	0x08004d6f
 8004d40:	08004d6f 	.word	0x08004d6f
 8004d44:	08004d67 	.word	0x08004d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d48:	f7ff f91a 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 8004d4c:	61b8      	str	r0, [r7, #24]
        break;
 8004d4e:	e013      	b.n	8004d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7ff f92a 	bl	8003fa8 <HAL_RCC_GetPCLK2Freq>
 8004d54:	61b8      	str	r0, [r7, #24]
        break;
 8004d56:	e00f      	b.n	8004d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d58:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <UART_SetConfig+0x4c4>)
 8004d5a:	61bb      	str	r3, [r7, #24]
        break;
 8004d5c:	e00c      	b.n	8004d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5e:	f7fe fffd 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8004d62:	61b8      	str	r0, [r7, #24]
        break;
 8004d64:	e008      	b.n	8004d78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6a:	61bb      	str	r3, [r7, #24]
        break;
 8004d6c:	e004      	b.n	8004d78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	77bb      	strb	r3, [r7, #30]
        break;
 8004d76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d074      	beq.n	8004e68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	005a      	lsls	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	085b      	lsrs	r3, r3, #1
 8004d88:	441a      	add	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b0f      	cmp	r3, #15
 8004d98:	d916      	bls.n	8004dc8 <UART_SetConfig+0x404>
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da0:	d212      	bcs.n	8004dc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f023 030f 	bic.w	r3, r3, #15
 8004daa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	89fb      	ldrh	r3, [r7, #14]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	89fa      	ldrh	r2, [r7, #14]
 8004dc4:	60da      	str	r2, [r3, #12]
 8004dc6:	e04f      	b.n	8004e68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	77bb      	strb	r3, [r7, #30]
 8004dcc:	e04c      	b.n	8004e68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dce:	7ffb      	ldrb	r3, [r7, #31]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d828      	bhi.n	8004e26 <UART_SetConfig+0x462>
 8004dd4:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <UART_SetConfig+0x418>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004e01 	.word	0x08004e01
 8004de0:	08004e09 	.word	0x08004e09
 8004de4:	08004e11 	.word	0x08004e11
 8004de8:	08004e27 	.word	0x08004e27
 8004dec:	08004e17 	.word	0x08004e17
 8004df0:	08004e27 	.word	0x08004e27
 8004df4:	08004e27 	.word	0x08004e27
 8004df8:	08004e27 	.word	0x08004e27
 8004dfc:	08004e1f 	.word	0x08004e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e00:	f7ff f8be 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 8004e04:	61b8      	str	r0, [r7, #24]
        break;
 8004e06:	e013      	b.n	8004e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7ff f8ce 	bl	8003fa8 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	61b8      	str	r0, [r7, #24]
        break;
 8004e0e:	e00f      	b.n	8004e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <UART_SetConfig+0x4c4>)
 8004e12:	61bb      	str	r3, [r7, #24]
        break;
 8004e14:	e00c      	b.n	8004e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e16:	f7fe ffa1 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8004e1a:	61b8      	str	r0, [r7, #24]
        break;
 8004e1c:	e008      	b.n	8004e30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e22:	61bb      	str	r3, [r7, #24]
        break;
 8004e24:	e004      	b.n	8004e30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e2e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d018      	beq.n	8004e68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085a      	lsrs	r2, r3, #1
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	441a      	add	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b0f      	cmp	r3, #15
 8004e4e:	d909      	bls.n	8004e64 <UART_SetConfig+0x4a0>
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e56:	d205      	bcs.n	8004e64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e001      	b.n	8004e68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e74:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40007c00 	.word	0x40007c00
 8004e84:	40023800 	.word	0x40023800
 8004e88:	00f42400 	.word	0x00f42400

08004e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8a:	d10a      	bne.n	8004fa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fe0:	f7fd fb78 	bl	80026d4 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d10e      	bne.n	8005012 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f831 	bl	800506a <UART_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e027      	b.n	8005062 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b04      	cmp	r3, #4
 800501e:	d10e      	bne.n	800503e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f81b 	bl	800506a <UART_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e011      	b.n	8005062 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b09c      	sub	sp, #112	; 0x70
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	4613      	mov	r3, r2
 8005078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507a:	e0a7      	b.n	80051cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	f000 80a3 	beq.w	80051cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fd fb25 	bl	80026d4 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <UART_WaitOnFlagUntilTimeout+0x32>
 8005096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005098:	2b00      	cmp	r3, #0
 800509a:	d13f      	bne.n	800511c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050b0:	667b      	str	r3, [r7, #100]	; 0x64
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e6      	bne.n	800509c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	663b      	str	r3, [r7, #96]	; 0x60
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80050f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e5      	bne.n	80050ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e068      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d050      	beq.n	80051cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005138:	d148      	bne.n	80051cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005142:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
 8005164:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e6      	bne.n	8005144 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	613b      	str	r3, [r7, #16]
   return(result);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	66bb      	str	r3, [r7, #104]	; 0x68
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3308      	adds	r3, #8
 8005194:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005196:	623a      	str	r2, [r7, #32]
 8005198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	69f9      	ldr	r1, [r7, #28]
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e5      	bne.n	8005176 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e010      	b.n	80051ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4013      	ands	r3, r2
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	429a      	cmp	r2, r3
 80051da:	bf0c      	ite	eq
 80051dc:	2301      	moveq	r3, #1
 80051de:	2300      	movne	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	461a      	mov	r2, r3
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	f43f af48 	beq.w	800507c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3770      	adds	r7, #112	; 0x70
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051f8:	b084      	sub	sp, #16
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	f107 001c 	add.w	r0, r7, #28
 8005206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	2b01      	cmp	r3, #1
 800520e:	d120      	bne.n	8005252 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <USB_CoreInit+0xac>)
 8005222:	4013      	ands	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d105      	bne.n	8005246 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa96 	bl	8005778 <USB_CoreReset>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
 8005250:	e010      	b.n	8005274 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa8a 	bl	8005778 <USB_CoreReset>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	2b01      	cmp	r3, #1
 8005278:	d10b      	bne.n	8005292 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f043 0206 	orr.w	r2, r3, #6
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800529e:	b004      	add	sp, #16
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	ffbdffbf 	.word	0xffbdffbf

080052a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f023 0201 	bic.w	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d115      	bne.n	8005318 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052f8:	2001      	movs	r0, #1
 80052fa:	f7fd f9f7 	bl	80026ec <HAL_Delay>
      ms++;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3301      	adds	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fa29 	bl	800575c <USB_GetMode>
 800530a:	4603      	mov	r3, r0
 800530c:	2b01      	cmp	r3, #1
 800530e:	d01e      	beq.n	800534e <USB_SetCurrentMode+0x84>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b31      	cmp	r3, #49	; 0x31
 8005314:	d9f0      	bls.n	80052f8 <USB_SetCurrentMode+0x2e>
 8005316:	e01a      	b.n	800534e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d115      	bne.n	800534a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800532a:	2001      	movs	r0, #1
 800532c:	f7fd f9de 	bl	80026ec <HAL_Delay>
      ms++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3301      	adds	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa10 	bl	800575c <USB_GetMode>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <USB_SetCurrentMode+0x84>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b31      	cmp	r3, #49	; 0x31
 8005346:	d9f0      	bls.n	800532a <USB_SetCurrentMode+0x60>
 8005348:	e001      	b.n	800534e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e005      	b.n	800535a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b32      	cmp	r3, #50	; 0x32
 8005352:	d101      	bne.n	8005358 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005364:	b084      	sub	sp, #16
 8005366:	b580      	push	{r7, lr}
 8005368:	b086      	sub	sp, #24
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800537e:	2300      	movs	r3, #0
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	e009      	b.n	8005398 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	3340      	adds	r3, #64	; 0x40
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	2200      	movs	r2, #0
 8005390:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	3301      	adds	r3, #1
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b0e      	cmp	r3, #14
 800539c:	d9f2      	bls.n	8005384 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800539e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d11c      	bne.n	80053de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b2:	f043 0302 	orr.w	r3, r3, #2
 80053b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e005      	b.n	80053ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053f0:	461a      	mov	r2, r3
 80053f2:	2300      	movs	r3, #0
 80053f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fc:	4619      	mov	r1, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005404:	461a      	mov	r2, r3
 8005406:	680b      	ldr	r3, [r1, #0]
 8005408:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10c      	bne.n	800542a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005416:	2100      	movs	r1, #0
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f965 	bl	80056e8 <USB_SetDevSpeed>
 800541e:	e008      	b.n	8005432 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005420:	2101      	movs	r1, #1
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f960 	bl	80056e8 <USB_SetDevSpeed>
 8005428:	e003      	b.n	8005432 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800542a:	2103      	movs	r1, #3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f95b 	bl	80056e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005432:	2110      	movs	r1, #16
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8f3 	bl	8005620 <USB_FlushTxFifo>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f91f 	bl	8005688 <USB_FlushRxFifo>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	461a      	mov	r2, r3
 800545c:	2300      	movs	r3, #0
 800545e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	461a      	mov	r2, r3
 8005474:	2300      	movs	r3, #0
 8005476:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	e043      	b.n	8005506 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005494:	d118      	bne.n	80054c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	461a      	mov	r2, r3
 80054aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e013      	b.n	80054da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	461a      	mov	r2, r3
 80054c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e008      	b.n	80054da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	461a      	mov	r2, r3
 80054d6:	2300      	movs	r3, #0
 80054d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	461a      	mov	r2, r3
 80054e8:	2300      	movs	r3, #0
 80054ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	461a      	mov	r2, r3
 80054fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	3301      	adds	r3, #1
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	429a      	cmp	r2, r3
 800550c:	d3b7      	bcc.n	800547e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	e043      	b.n	800559c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800552a:	d118      	bne.n	800555e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	461a      	mov	r2, r3
 8005540:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e013      	b.n	8005570 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	461a      	mov	r2, r3
 8005556:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	e008      	b.n	8005570 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	2300      	movs	r3, #0
 800556e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	461a      	mov	r2, r3
 800557e:	2300      	movs	r3, #0
 8005580:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	461a      	mov	r2, r3
 8005590:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005594:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	3301      	adds	r3, #1
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d3b7      	bcc.n	8005514 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d105      	bne.n	80055d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f043 0210 	orr.w	r2, r3, #16
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <USB_DevInit+0x2b4>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f043 0208 	orr.w	r2, r3, #8
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d105      	bne.n	8005608 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <USB_DevInit+0x2b8>)
 8005602:	4313      	orrs	r3, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005614:	b004      	add	sp, #16
 8005616:	4770      	bx	lr
 8005618:	803c3800 	.word	0x803c3800
 800561c:	40000004 	.word	0x40000004

08005620 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4a13      	ldr	r2, [pc, #76]	; (8005684 <USB_FlushTxFifo+0x64>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e01b      	b.n	8005678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	daf2      	bge.n	800562e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	019b      	lsls	r3, r3, #6
 8005650:	f043 0220 	orr.w	r2, r3, #32
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a08      	ldr	r2, [pc, #32]	; (8005684 <USB_FlushTxFifo+0x64>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e006      	b.n	8005678 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b20      	cmp	r3, #32
 8005674:	d0f0      	beq.n	8005658 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	00030d40 	.word	0x00030d40

08005688 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3301      	adds	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <USB_FlushRxFifo+0x5c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e018      	b.n	80056d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	daf2      	bge.n	8005694 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2210      	movs	r2, #16
 80056b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a08      	ldr	r2, [pc, #32]	; (80056e4 <USB_FlushRxFifo+0x5c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e006      	b.n	80056d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d0f0      	beq.n	80056b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	00030d40 	.word	0x00030d40

080056e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005708:	4313      	orrs	r3, r2
 800570a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005734:	f023 0303 	bic.w	r3, r3, #3
 8005738:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005748:	f043 0302 	orr.w	r3, r3, #2
 800574c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f003 0301 	and.w	r3, r3, #1
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a13      	ldr	r2, [pc, #76]	; (80057dc <USB_CoreReset+0x64>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e01b      	b.n	80057ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	daf2      	bge.n	8005784 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f043 0201 	orr.w	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3301      	adds	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a09      	ldr	r2, [pc, #36]	; (80057dc <USB_CoreReset+0x64>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e006      	b.n	80057ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d0f0      	beq.n	80057ae <USB_CoreReset+0x36>

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	00030d40 	.word	0x00030d40

080057e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f6:	f3ef 8305 	mrs	r3, IPSR
 80057fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80057fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10f      	bne.n	8005822 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005802:	f3ef 8310 	mrs	r3, PRIMASK
 8005806:	607b      	str	r3, [r7, #4]
  return(result);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d105      	bne.n	800581a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800580e:	f3ef 8311 	mrs	r3, BASEPRI
 8005812:	603b      	str	r3, [r7, #0]
  return(result);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <osKernelInitialize+0x3a>
 800581a:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <osKernelInitialize+0x64>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d103      	bne.n	800582a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005822:	f06f 0305 	mvn.w	r3, #5
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e00c      	b.n	8005844 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800582a:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <osKernelInitialize+0x64>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d105      	bne.n	800583e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <osKernelInitialize+0x64>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	e002      	b.n	8005844 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
 8005842:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005844:	68fb      	ldr	r3, [r7, #12]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	200013dc 	.word	0x200013dc

08005858 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585e:	f3ef 8305 	mrs	r3, IPSR
 8005862:	60bb      	str	r3, [r7, #8]
  return(result);
 8005864:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586a:	f3ef 8310 	mrs	r3, PRIMASK
 800586e:	607b      	str	r3, [r7, #4]
  return(result);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005876:	f3ef 8311 	mrs	r3, BASEPRI
 800587a:	603b      	str	r3, [r7, #0]
  return(result);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <osKernelStart+0x3a>
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <osKernelStart+0x68>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d103      	bne.n	8005892 <osKernelStart+0x3a>
    stat = osErrorISR;
 800588a:	f06f 0305 	mvn.w	r3, #5
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e010      	b.n	80058b4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005892:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <osKernelStart+0x68>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d109      	bne.n	80058ae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800589a:	f7ff ffa1 	bl	80057e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <osKernelStart+0x68>)
 80058a0:	2202      	movs	r2, #2
 80058a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058a4:	f001 fa6c 	bl	8006d80 <vTaskStartScheduler>
      stat = osOK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e002      	b.n	80058b4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295
 80058b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80058b4:	68fb      	ldr	r3, [r7, #12]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200013dc 	.word	0x200013dc

080058c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b090      	sub	sp, #64	; 0x40
 80058c8:	af04      	add	r7, sp, #16
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d4:	f3ef 8305 	mrs	r3, IPSR
 80058d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80058da:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f040 808f 	bne.w	8005a00 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e2:	f3ef 8310 	mrs	r3, PRIMASK
 80058e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d105      	bne.n	80058fa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058ee:	f3ef 8311 	mrs	r3, BASEPRI
 80058f2:	617b      	str	r3, [r7, #20]
  return(result);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <osThreadNew+0x3e>
 80058fa:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <osThreadNew+0x148>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d07e      	beq.n	8005a00 <osThreadNew+0x13c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d07b      	beq.n	8005a00 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800590c:	2318      	movs	r3, #24
 800590e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005914:	f04f 33ff 	mov.w	r3, #4294967295
 8005918:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d045      	beq.n	80059ac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <osThreadNew+0x6a>
        name = attr->name;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <osThreadNew+0x90>
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	2b38      	cmp	r3, #56	; 0x38
 8005946:	d805      	bhi.n	8005954 <osThreadNew+0x90>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <osThreadNew+0x94>
        return (NULL);
 8005954:	2300      	movs	r3, #0
 8005956:	e054      	b.n	8005a02 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	089b      	lsrs	r3, r3, #2
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00e      	beq.n	800598e <osThreadNew+0xca>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2ba7      	cmp	r3, #167	; 0xa7
 8005976:	d90a      	bls.n	800598e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800597c:	2b00      	cmp	r3, #0
 800597e:	d006      	beq.n	800598e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <osThreadNew+0xca>
        mem = 1;
 8005988:	2301      	movs	r3, #1
 800598a:	623b      	str	r3, [r7, #32]
 800598c:	e010      	b.n	80059b0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10c      	bne.n	80059b0 <osThreadNew+0xec>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d108      	bne.n	80059b0 <osThreadNew+0xec>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <osThreadNew+0xec>
          mem = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	623b      	str	r3, [r7, #32]
 80059aa:	e001      	b.n	80059b0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d110      	bne.n	80059d8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059be:	9202      	str	r2, [sp, #8]
 80059c0:	9301      	str	r3, [sp, #4]
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 ffe1 	bl	8006994 <xTaskCreateStatic>
 80059d2:	4603      	mov	r3, r0
 80059d4:	613b      	str	r3, [r7, #16]
 80059d6:	e013      	b.n	8005a00 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d110      	bne.n	8005a00 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	f107 0310 	add.w	r3, r7, #16
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f001 f832 	bl	8006a5a <xTaskCreate>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d001      	beq.n	8005a00 <osThreadNew+0x13c>
          hTask = NULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a00:	693b      	ldr	r3, [r7, #16]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3730      	adds	r7, #48	; 0x30
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	200013dc 	.word	0x200013dc

08005a10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a18:	f3ef 8305 	mrs	r3, IPSR
 8005a1c:	613b      	str	r3, [r7, #16]
  return(result);
 8005a1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10f      	bne.n	8005a44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a24:	f3ef 8310 	mrs	r3, PRIMASK
 8005a28:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a30:	f3ef 8311 	mrs	r3, BASEPRI
 8005a34:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <osDelay+0x3c>
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <osDelay+0x58>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d103      	bne.n	8005a4c <osDelay+0x3c>
    stat = osErrorISR;
 8005a44:	f06f 0305 	mvn.w	r3, #5
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e007      	b.n	8005a5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 f95c 	bl	8006d14 <vTaskDelay>
    }
  }

  return (stat);
 8005a5c:	697b      	ldr	r3, [r7, #20]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	200013dc 	.word	0x200013dc

08005a6c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f002 fb1f 	bl	80080b8 <pvTimerGetTimerID>
 8005a7a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <TimerCallback+0x22>
    callb->func (callb->arg);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	6852      	ldr	r2, [r2, #4]
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	4798      	blx	r3
  }
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08e      	sub	sp, #56	; 0x38
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	607a      	str	r2, [r7, #4]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aac:	f3ef 8305 	mrs	r3, IPSR
 8005ab0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ab2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d16a      	bne.n	8005b8e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8005abc:	617b      	str	r3, [r7, #20]
  return(result);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d105      	bne.n	8005ad0 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac8:	613b      	str	r3, [r7, #16]
  return(result);
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <osTimerNew+0x40>
 8005ad0:	4b31      	ldr	r3, [pc, #196]	; (8005b98 <osTimerNew+0x100>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d05a      	beq.n	8005b8e <osTimerNew+0xf6>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d057      	beq.n	8005b8e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005ade:	2008      	movs	r0, #8
 8005ae0:	f002 fd48 	bl	8008574 <pvPortMalloc>
 8005ae4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d050      	beq.n	8005b8e <osTimerNew+0xf6>
      callb->func = func;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005af8:	7afb      	ldrb	r3, [r7, #11]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <osTimerNew+0x6c>
        reload = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
 8005b02:	e001      	b.n	8005b08 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0c:	623b      	str	r3, [r7, #32]
      name = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01c      	beq.n	8005b52 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <osTimerNew+0x8e>
          name = attr->name;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d006      	beq.n	8005b3c <osTimerNew+0xa4>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	2b2b      	cmp	r3, #43	; 0x2b
 8005b34:	d902      	bls.n	8005b3c <osTimerNew+0xa4>
          mem = 1;
 8005b36:	2301      	movs	r3, #1
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	e00c      	b.n	8005b56 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d108      	bne.n	8005b56 <osTimerNew+0xbe>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d104      	bne.n	8005b56 <osTimerNew+0xbe>
            mem = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	623b      	str	r3, [r7, #32]
 8005b50:	e001      	b.n	8005b56 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d10c      	bne.n	8005b76 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <osTimerNew+0x104>)
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b6e:	f001 ff12 	bl	8007996 <xTimerCreateStatic>
 8005b72:	62b8      	str	r0, [r7, #40]	; 0x28
 8005b74:	e00b      	b.n	8005b8e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d108      	bne.n	8005b8e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005b7c:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <osTimerNew+0x104>)
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b84:	2101      	movs	r1, #1
 8005b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b88:	f001 fee4 	bl	8007954 <xTimerCreate>
 8005b8c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3730      	adds	r7, #48	; 0x30
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	200013dc 	.word	0x200013dc
 8005b9c:	08005a6d 	.word	0x08005a6d

08005ba0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bae:	f3ef 8305 	mrs	r3, IPSR
 8005bb2:	617b      	str	r3, [r7, #20]
  return(result);
 8005bb4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10f      	bne.n	8005bda <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bba:	f3ef 8310 	mrs	r3, PRIMASK
 8005bbe:	613b      	str	r3, [r7, #16]
  return(result);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d105      	bne.n	8005bd2 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <osTimerStart+0x42>
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <osTimerStart+0x7c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d103      	bne.n	8005be2 <osTimerStart+0x42>
    stat = osErrorISR;
 8005bda:	f06f 0305 	mvn.w	r3, #5
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e017      	b.n	8005c12 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <osTimerStart+0x50>
    stat = osErrorParameter;
 8005be8:	f06f 0303 	mvn.w	r3, #3
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	e010      	b.n	8005c12 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	2104      	movs	r1, #4
 8005bfa:	69b8      	ldr	r0, [r7, #24]
 8005bfc:	f001 ff4a 	bl	8007a94 <xTimerGenericCommand>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d102      	bne.n	8005c0c <osTimerStart+0x6c>
      stat = osOK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	e002      	b.n	8005c12 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8005c0c:	f06f 0302 	mvn.w	r3, #2
 8005c10:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8005c12:	69fb      	ldr	r3, [r7, #28]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	200013dc 	.word	0x200013dc

08005c20 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08c      	sub	sp, #48	; 0x30
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c30:	f3ef 8305 	mrs	r3, IPSR
 8005c34:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c36:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d16f      	bne.n	8005d1c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c40:	617b      	str	r3, [r7, #20]
  return(result);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c48:	f3ef 8311 	mrs	r3, BASEPRI
 8005c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <osMessageQueueNew+0x3c>
 8005c54:	4b34      	ldr	r3, [pc, #208]	; (8005d28 <osMessageQueueNew+0x108>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d05f      	beq.n	8005d1c <osMessageQueueNew+0xfc>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d05c      	beq.n	8005d1c <osMessageQueueNew+0xfc>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d059      	beq.n	8005d1c <osMessageQueueNew+0xfc>
    mem = -1;
 8005c68:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d029      	beq.n	8005cc8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d012      	beq.n	8005ca2 <osMessageQueueNew+0x82>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	2b4f      	cmp	r3, #79	; 0x4f
 8005c82:	d90e      	bls.n	8005ca2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d302      	bcc.n	8005ca2 <osMessageQueueNew+0x82>
        mem = 1;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	623b      	str	r3, [r7, #32]
 8005ca0:	e014      	b.n	8005ccc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d110      	bne.n	8005ccc <osMessageQueueNew+0xac>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10c      	bne.n	8005ccc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d108      	bne.n	8005ccc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d104      	bne.n	8005ccc <osMessageQueueNew+0xac>
          mem = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	623b      	str	r3, [r7, #32]
 8005cc6:	e001      	b.n	8005ccc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d10b      	bne.n	8005cea <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2100      	movs	r1, #0
 8005cdc:	9100      	str	r1, [sp, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f975 	bl	8005fd0 <xQueueGenericCreateStatic>
 8005ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ce8:	e008      	b.n	8005cfc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d105      	bne.n	8005cfc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f9ed 	bl	80060d4 <xQueueGenericCreate>
 8005cfa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00c      	beq.n	8005d1c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	e001      	b.n	8005d14 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d14:	69f9      	ldr	r1, [r7, #28]
 8005d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d18:	f000 fdde 	bl	80068d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3728      	adds	r7, #40	; 0x28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	200013dc 	.word	0x200013dc

08005d2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a07      	ldr	r2, [pc, #28]	; (8005d58 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4a06      	ldr	r2, [pc, #24]	; (8005d5c <vApplicationGetIdleTaskMemory+0x30>)
 8005d42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2280      	movs	r2, #128	; 0x80
 8005d48:	601a      	str	r2, [r3, #0]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	200013e0 	.word	0x200013e0
 8005d5c:	20001488 	.word	0x20001488

08005d60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a07      	ldr	r2, [pc, #28]	; (8005d8c <vApplicationGetTimerTaskMemory+0x2c>)
 8005d70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	4a06      	ldr	r2, [pc, #24]	; (8005d90 <vApplicationGetTimerTaskMemory+0x30>)
 8005d76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d7e:	601a      	str	r2, [r3, #0]
}
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20001688 	.word	0x20001688
 8005d90:	20001730 	.word	0x20001730

08005d94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f103 0208 	add.w	r2, r3, #8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f103 0208 	add.w	r2, r3, #8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f103 0208 	add.w	r2, r3, #8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d103      	bne.n	8005e56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e00c      	b.n	8005e70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e002      	b.n	8005e64 <vListInsert+0x2e>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d2f6      	bcs.n	8005e5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6892      	ldr	r2, [r2, #8]
 8005ebe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6852      	ldr	r2, [r2, #4]
 8005ec8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d103      	bne.n	8005edc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	1e5a      	subs	r2, r3, #1
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10c      	bne.n	8005f2a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	b672      	cpsid	i
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	b662      	cpsie	i
 8005f24:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005f2a:	f002 f9f7 	bl	800831c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f3a:	fb01 f303 	mul.w	r3, r1, r3
 8005f3e:	441a      	add	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	68f9      	ldr	r1, [r7, #12]
 8005f5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	441a      	add	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	22ff      	movs	r2, #255	; 0xff
 8005f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	22ff      	movs	r2, #255	; 0xff
 8005f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d114      	bne.n	8005faa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01a      	beq.n	8005fbe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3310      	adds	r3, #16
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 f9b1 	bl	80072f4 <xTaskRemoveFromEventList>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d012      	beq.n	8005fbe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <xQueueGenericReset+0xd0>)
 8005f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	e009      	b.n	8005fbe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3310      	adds	r3, #16
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fef0 	bl	8005d94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3324      	adds	r3, #36	; 0x24
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff feeb 	bl	8005d94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fbe:	f002 f9e1 	bl	8008384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fc2:	2301      	movs	r3, #1
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	e000ed04 	.word	0xe000ed04

08005fd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08e      	sub	sp, #56	; 0x38
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10c      	bne.n	8005ffe <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	b672      	cpsid	i
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	b662      	cpsie	i
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10c      	bne.n	800601e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	b672      	cpsid	i
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	b662      	cpsie	i
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
}
 800601a:	bf00      	nop
 800601c:	e7fe      	b.n	800601c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <xQueueGenericCreateStatic+0x5a>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <xQueueGenericCreateStatic+0x5e>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <xQueueGenericCreateStatic+0x60>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10c      	bne.n	800604e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	b672      	cpsid	i
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	b662      	cpsie	i
 8006048:	623b      	str	r3, [r7, #32]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <xQueueGenericCreateStatic+0x8a>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <xQueueGenericCreateStatic+0x8e>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <xQueueGenericCreateStatic+0x90>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10c      	bne.n	800607e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	b672      	cpsid	i
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	b662      	cpsie	i
 8006078:	61fb      	str	r3, [r7, #28]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800607e:	2350      	movs	r3, #80	; 0x50
 8006080:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b50      	cmp	r3, #80	; 0x50
 8006086:	d00c      	beq.n	80060a2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	b672      	cpsid	i
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	b662      	cpsie	i
 800609c:	61bb      	str	r3, [r7, #24]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00d      	beq.n	80060ca <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	4613      	mov	r3, r2
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f847 	bl	8006158 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3730      	adds	r7, #48	; 0x30
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	; 0x28
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10c      	bne.n	8006102 <xQueueGenericCreate+0x2e>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	b672      	cpsid	i
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	b662      	cpsie	i
 80060fc:	613b      	str	r3, [r7, #16]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006108:	2300      	movs	r3, #0
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	e004      	b.n	8006118 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	3350      	adds	r3, #80	; 0x50
 800611c:	4618      	mov	r0, r3
 800611e:	f002 fa29 	bl	8008574 <pvPortMalloc>
 8006122:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d011      	beq.n	800614e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	3350      	adds	r3, #80	; 0x50
 8006132:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800613c:	79fa      	ldrb	r2, [r7, #7]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f805 	bl	8006158 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800614e:	69bb      	ldr	r3, [r7, #24]
	}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e002      	b.n	800617a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006186:	2101      	movs	r1, #1
 8006188:	69b8      	ldr	r0, [r7, #24]
 800618a:	f7ff feb7 	bl	8005efc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08e      	sub	sp, #56	; 0x38
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061ae:	2300      	movs	r3, #0
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10c      	bne.n	80061d6 <xQueueGenericSend+0x36>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	b672      	cpsid	i
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	b662      	cpsie	i
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <xQueueGenericSend+0x44>
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <xQueueGenericSend+0x48>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <xQueueGenericSend+0x4a>
 80061e8:	2300      	movs	r3, #0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10c      	bne.n	8006208 <xQueueGenericSend+0x68>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	b672      	cpsid	i
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	b662      	cpsie	i
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d103      	bne.n	8006216 <xQueueGenericSend+0x76>
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <xQueueGenericSend+0x7a>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <xQueueGenericSend+0x7c>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10c      	bne.n	800623a <xQueueGenericSend+0x9a>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	b672      	cpsid	i
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	b662      	cpsie	i
 8006234:	623b      	str	r3, [r7, #32]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800623a:	f001 fa5d 	bl	80076f8 <xTaskGetSchedulerState>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <xQueueGenericSend+0xaa>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <xQueueGenericSend+0xae>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <xQueueGenericSend+0xb0>
 800624e:	2300      	movs	r3, #0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10c      	bne.n	800626e <xQueueGenericSend+0xce>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	b672      	cpsid	i
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	b662      	cpsie	i
 8006268:	61fb      	str	r3, [r7, #28]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800626e:	f002 f855 	bl	800831c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <xQueueGenericSend+0xe4>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d129      	bne.n	80062d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800628a:	f000 fa15 	bl	80066b8 <prvCopyDataToQueue>
 800628e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d010      	beq.n	80062ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	3324      	adds	r3, #36	; 0x24
 800629c:	4618      	mov	r0, r3
 800629e:	f001 f829 	bl	80072f4 <xTaskRemoveFromEventList>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d013      	beq.n	80062d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062a8:	4b3f      	ldr	r3, [pc, #252]	; (80063a8 <xQueueGenericSend+0x208>)
 80062aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	e00a      	b.n	80062d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062c0:	4b39      	ldr	r3, [pc, #228]	; (80063a8 <xQueueGenericSend+0x208>)
 80062c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062d0:	f002 f858 	bl	8008384 <vPortExitCritical>
				return pdPASS;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e063      	b.n	80063a0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d103      	bne.n	80062e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062de:	f002 f851 	bl	8008384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e05c      	b.n	80063a0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062ec:	f107 0314 	add.w	r3, r7, #20
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f865 	bl	80073c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062f6:	2301      	movs	r3, #1
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062fa:	f002 f843 	bl	8008384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062fe:	f000 fdb3 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006302:	f002 f80b 	bl	800831c <vPortEnterCritical>
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800630c:	b25b      	sxtb	r3, r3
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006312:	d103      	bne.n	800631c <xQueueGenericSend+0x17c>
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006322:	b25b      	sxtb	r3, r3
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d103      	bne.n	8006332 <xQueueGenericSend+0x192>
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006332:	f002 f827 	bl	8008384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006336:	1d3a      	adds	r2, r7, #4
 8006338:	f107 0314 	add.w	r3, r7, #20
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f001 f854 	bl	80073ec <xTaskCheckForTimeOut>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d124      	bne.n	8006394 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800634a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634c:	f000 faac 	bl	80068a8 <prvIsQueueFull>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d018      	beq.n	8006388 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	3310      	adds	r3, #16
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4611      	mov	r1, r2
 800635e:	4618      	mov	r0, r3
 8006360:	f000 ff74 	bl	800724c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006366:	f000 fa37 	bl	80067d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800636a:	f000 fd8b 	bl	8006e84 <xTaskResumeAll>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	f47f af7c 	bne.w	800626e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006376:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <xQueueGenericSend+0x208>)
 8006378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	e772      	b.n	800626e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800638a:	f000 fa25 	bl	80067d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800638e:	f000 fd79 	bl	8006e84 <xTaskResumeAll>
 8006392:	e76c      	b.n	800626e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006396:	f000 fa1f 	bl	80067d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800639a:	f000 fd73 	bl	8006e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800639e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3738      	adds	r7, #56	; 0x38
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08e      	sub	sp, #56	; 0x38
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10c      	bne.n	80063de <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	b672      	cpsid	i
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	b662      	cpsie	i
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063da:	bf00      	nop
 80063dc:	e7fe      	b.n	80063dc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <xQueueGenericSendFromISR+0x40>
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <xQueueGenericSendFromISR+0x44>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <xQueueGenericSendFromISR+0x46>
 80063f0:	2300      	movs	r3, #0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	b672      	cpsid	i
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	b662      	cpsie	i
 800640a:	623b      	str	r3, [r7, #32]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d103      	bne.n	800641e <xQueueGenericSendFromISR+0x72>
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <xQueueGenericSendFromISR+0x76>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericSendFromISR+0x78>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10c      	bne.n	8006442 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	b672      	cpsid	i
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	b662      	cpsie	i
 800643c:	61fb      	str	r3, [r7, #28]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006442:	f002 f853 	bl	80084ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006446:	f3ef 8211 	mrs	r2, BASEPRI
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	b672      	cpsid	i
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	b662      	cpsie	i
 800645e:	61ba      	str	r2, [r7, #24]
 8006460:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006462:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646e:	429a      	cmp	r2, r3
 8006470:	d302      	bcc.n	8006478 <xQueueGenericSendFromISR+0xcc>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d12c      	bne.n	80064d2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800647e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006488:	f000 f916 	bl	80066b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800648c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d112      	bne.n	80064bc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	3324      	adds	r3, #36	; 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 ff26 	bl	80072f4 <xTaskRemoveFromEventList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e007      	b.n	80064cc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064c0:	3301      	adds	r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	b25a      	sxtb	r2, r3
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80064d0:	e001      	b.n	80064d6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3738      	adds	r7, #56	; 0x38
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08c      	sub	sp, #48	; 0x30
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10c      	bne.n	8006520 <xQueueReceive+0x34>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	b672      	cpsid	i
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	b662      	cpsie	i
 800651a:	623b      	str	r3, [r7, #32]
}
 800651c:	bf00      	nop
 800651e:	e7fe      	b.n	800651e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d103      	bne.n	800652e <xQueueReceive+0x42>
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <xQueueReceive+0x46>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <xQueueReceive+0x48>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10c      	bne.n	8006552 <xQueueReceive+0x66>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	b672      	cpsid	i
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	b662      	cpsie	i
 800654c:	61fb      	str	r3, [r7, #28]
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006552:	f001 f8d1 	bl	80076f8 <xTaskGetSchedulerState>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d102      	bne.n	8006562 <xQueueReceive+0x76>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <xQueueReceive+0x7a>
 8006562:	2301      	movs	r3, #1
 8006564:	e000      	b.n	8006568 <xQueueReceive+0x7c>
 8006566:	2300      	movs	r3, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10c      	bne.n	8006586 <xQueueReceive+0x9a>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	b672      	cpsid	i
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	b662      	cpsie	i
 8006580:	61bb      	str	r3, [r7, #24]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006586:	f001 fec9 	bl	800831c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01f      	beq.n	80065d6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659a:	f000 f8f7 	bl	800678c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	1e5a      	subs	r2, r3, #1
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00f      	beq.n	80065ce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	3310      	adds	r3, #16
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fe9e 	bl	80072f4 <xTaskRemoveFromEventList>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065be:	4b3d      	ldr	r3, [pc, #244]	; (80066b4 <xQueueReceive+0x1c8>)
 80065c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065ce:	f001 fed9 	bl	8008384 <vPortExitCritical>
				return pdPASS;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e069      	b.n	80066aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d103      	bne.n	80065e4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065dc:	f001 fed2 	bl	8008384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e062      	b.n	80066aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065ea:	f107 0310 	add.w	r3, r7, #16
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fee6 	bl	80073c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065f8:	f001 fec4 	bl	8008384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065fc:	f000 fc34 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006600:	f001 fe8c 	bl	800831c <vPortEnterCritical>
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800660a:	b25b      	sxtb	r3, r3
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d103      	bne.n	800661a <xQueueReceive+0x12e>
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006620:	b25b      	sxtb	r3, r3
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	d103      	bne.n	8006630 <xQueueReceive+0x144>
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006630:	f001 fea8 	bl	8008384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006634:	1d3a      	adds	r2, r7, #4
 8006636:	f107 0310 	add.w	r3, r7, #16
 800663a:	4611      	mov	r1, r2
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fed5 	bl	80073ec <xTaskCheckForTimeOut>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d123      	bne.n	8006690 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800664a:	f000 f917 	bl	800687c <prvIsQueueEmpty>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d017      	beq.n	8006684 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	3324      	adds	r3, #36	; 0x24
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fdf5 	bl	800724c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006664:	f000 f8b8 	bl	80067d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006668:	f000 fc0c 	bl	8006e84 <xTaskResumeAll>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d189      	bne.n	8006586 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006672:	4b10      	ldr	r3, [pc, #64]	; (80066b4 <xQueueReceive+0x1c8>)
 8006674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	e780      	b.n	8006586 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006686:	f000 f8a7 	bl	80067d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800668a:	f000 fbfb 	bl	8006e84 <xTaskResumeAll>
 800668e:	e77a      	b.n	8006586 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006692:	f000 f8a1 	bl	80067d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006696:	f000 fbf5 	bl	8006e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800669a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800669c:	f000 f8ee 	bl	800687c <prvIsQueueEmpty>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f43f af6f 	beq.w	8006586 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3730      	adds	r7, #48	; 0x30
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	e000ed04 	.word	0xe000ed04

080066b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10d      	bne.n	80066f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d14d      	bne.n	800677a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 f826 	bl	8007734 <xTaskPriorityDisinherit>
 80066e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	609a      	str	r2, [r3, #8]
 80066f0:	e043      	b.n	800677a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d119      	bne.n	800672c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6858      	ldr	r0, [r3, #4]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	461a      	mov	r2, r3
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	f002 f99e 	bl	8008a44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	441a      	add	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	429a      	cmp	r2, r3
 8006720:	d32b      	bcc.n	800677a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	e026      	b.n	800677a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68d8      	ldr	r0, [r3, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	461a      	mov	r2, r3
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	f002 f984 	bl	8008a44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	425b      	negs	r3, r3
 8006746:	441a      	add	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	429a      	cmp	r2, r3
 8006756:	d207      	bcs.n	8006768 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	425b      	negs	r3, r3
 8006762:	441a      	add	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d105      	bne.n	800677a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	3b01      	subs	r3, #1
 8006778:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006782:	697b      	ldr	r3, [r7, #20]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d018      	beq.n	80067d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	441a      	add	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d303      	bcc.n	80067c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68d9      	ldr	r1, [r3, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	461a      	mov	r2, r3
 80067ca:	6838      	ldr	r0, [r7, #0]
 80067cc:	f002 f93a 	bl	8008a44 <memcpy>
	}
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067e0:	f001 fd9c 	bl	800831c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ec:	e011      	b.n	8006812 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d012      	beq.n	800681c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3324      	adds	r3, #36	; 0x24
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fd7a 	bl	80072f4 <xTaskRemoveFromEventList>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006806:	f000 fe57 	bl	80074b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	3b01      	subs	r3, #1
 800680e:	b2db      	uxtb	r3, r3
 8006810:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006816:	2b00      	cmp	r3, #0
 8006818:	dce9      	bgt.n	80067ee <prvUnlockQueue+0x16>
 800681a:	e000      	b.n	800681e <prvUnlockQueue+0x46>
					break;
 800681c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	22ff      	movs	r2, #255	; 0xff
 8006822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006826:	f001 fdad 	bl	8008384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800682a:	f001 fd77 	bl	800831c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006834:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006836:	e011      	b.n	800685c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d012      	beq.n	8006866 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3310      	adds	r3, #16
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fd55 	bl	80072f4 <xTaskRemoveFromEventList>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006850:	f000 fe32 	bl	80074b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	3b01      	subs	r3, #1
 8006858:	b2db      	uxtb	r3, r3
 800685a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800685c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006860:	2b00      	cmp	r3, #0
 8006862:	dce9      	bgt.n	8006838 <prvUnlockQueue+0x60>
 8006864:	e000      	b.n	8006868 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006866:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	22ff      	movs	r2, #255	; 0xff
 800686c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006870:	f001 fd88 	bl	8008384 <vPortExitCritical>
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006884:	f001 fd4a 	bl	800831c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e001      	b.n	800689a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800689a:	f001 fd73 	bl	8008384 <vPortExitCritical>

	return xReturn;
 800689e:	68fb      	ldr	r3, [r7, #12]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068b0:	f001 fd34 	bl	800831c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068bc:	429a      	cmp	r2, r3
 80068be:	d102      	bne.n	80068c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068c0:	2301      	movs	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e001      	b.n	80068ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068ca:	f001 fd5b 	bl	8008384 <vPortExitCritical>

	return xReturn;
 80068ce:	68fb      	ldr	r3, [r7, #12]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	e014      	b.n	8006912 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068e8:	4a0f      	ldr	r2, [pc, #60]	; (8006928 <vQueueAddToRegistry+0x50>)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068f4:	490c      	ldr	r1, [pc, #48]	; (8006928 <vQueueAddToRegistry+0x50>)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068fe:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <vQueueAddToRegistry+0x50>)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800690a:	e006      	b.n	800691a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b07      	cmp	r3, #7
 8006916:	d9e7      	bls.n	80068e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20001b30 	.word	0x20001b30

0800692c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800693c:	f001 fcee 	bl	800831c <vPortEnterCritical>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006946:	b25b      	sxtb	r3, r3
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694c:	d103      	bne.n	8006956 <vQueueWaitForMessageRestricted+0x2a>
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800695c:	b25b      	sxtb	r3, r3
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d103      	bne.n	800696c <vQueueWaitForMessageRestricted+0x40>
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800696c:	f001 fd0a 	bl	8008384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	2b00      	cmp	r3, #0
 8006976:	d106      	bne.n	8006986 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3324      	adds	r3, #36	; 0x24
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fc89 	bl	8007298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006986:	6978      	ldr	r0, [r7, #20]
 8006988:	f7ff ff26 	bl	80067d8 <prvUnlockQueue>
	}
 800698c:	bf00      	nop
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08e      	sub	sp, #56	; 0x38
 8006998:	af04      	add	r7, sp, #16
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10c      	bne.n	80069c2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	b672      	cpsid	i
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	b662      	cpsie	i
 80069bc:	623b      	str	r3, [r7, #32]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10c      	bne.n	80069e2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	b672      	cpsid	i
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	b662      	cpsie	i
 80069dc:	61fb      	str	r3, [r7, #28]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069e2:	23a8      	movs	r3, #168	; 0xa8
 80069e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2ba8      	cmp	r3, #168	; 0xa8
 80069ea:	d00c      	beq.n	8006a06 <xTaskCreateStatic+0x72>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	b672      	cpsid	i
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	b662      	cpsie	i
 8006a00:	61bb      	str	r3, [r7, #24]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d01e      	beq.n	8006a4c <xTaskCreateStatic+0xb8>
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01b      	beq.n	8006a4c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a26:	2300      	movs	r3, #0
 8006a28:	9303      	str	r3, [sp, #12]
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	9302      	str	r3, [sp, #8]
 8006a2e:	f107 0314 	add.w	r3, r7, #20
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 f850 	bl	8006ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a46:	f000 f8f5 	bl	8006c34 <prvAddNewTaskToReadyList>
 8006a4a:	e001      	b.n	8006a50 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a50:	697b      	ldr	r3, [r7, #20]
	}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3728      	adds	r7, #40	; 0x28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b08c      	sub	sp, #48	; 0x30
 8006a5e:	af04      	add	r7, sp, #16
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 fd80 	bl	8008574 <pvPortMalloc>
 8006a74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00e      	beq.n	8006a9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a7c:	20a8      	movs	r0, #168	; 0xa8
 8006a7e:	f001 fd79 	bl	8008574 <pvPortMalloc>
 8006a82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a90:	e005      	b.n	8006a9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a92:	6978      	ldr	r0, [r7, #20]
 8006a94:	f001 fe38 	bl	8008708 <vPortFree>
 8006a98:	e001      	b.n	8006a9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d017      	beq.n	8006ad4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9303      	str	r3, [sp, #12]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f80e 	bl	8006ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac8:	69f8      	ldr	r0, [r7, #28]
 8006aca:	f000 f8b3 	bl	8006c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	e002      	b.n	8006ada <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ada:	69bb      	ldr	r3, [r7, #24]
	}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	461a      	mov	r2, r3
 8006afc:	21a5      	movs	r1, #165	; 0xa5
 8006afe:	f001 ff1d 	bl	800893c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006b0c:	440b      	add	r3, r1
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	b672      	cpsid	i
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	b662      	cpsie	i
 8006b3a:	617b      	str	r3, [r7, #20]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01f      	beq.n	8006b86 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b46:	2300      	movs	r3, #0
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	e012      	b.n	8006b72 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	7819      	ldrb	r1, [r3, #0]
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	3334      	adds	r3, #52	; 0x34
 8006b5c:	460a      	mov	r2, r1
 8006b5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d006      	beq.n	8006b7a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b0f      	cmp	r3, #15
 8006b76:	d9e9      	bls.n	8006b4c <prvInitialiseNewTask+0x68>
 8006b78:	e000      	b.n	8006b7c <prvInitialiseNewTask+0x98>
			{
				break;
 8006b7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b84:	e003      	b.n	8006b8e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	2b37      	cmp	r3, #55	; 0x37
 8006b92:	d901      	bls.n	8006b98 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b94:	2337      	movs	r3, #55	; 0x37
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	3304      	adds	r3, #4
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff f910 	bl	8005dd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	3318      	adds	r3, #24
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff f90b 	bl	8005dd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	3354      	adds	r3, #84	; 0x54
 8006be8:	224c      	movs	r2, #76	; 0x4c
 8006bea:	2100      	movs	r1, #0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 fea5 	bl	800893c <memset>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <prvInitialiseNewTask+0x144>)
 8006bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <prvInitialiseNewTask+0x148>)
 8006bfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	4a0b      	ldr	r2, [pc, #44]	; (8006c30 <prvInitialiseNewTask+0x14c>)
 8006c02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	69b8      	ldr	r0, [r7, #24]
 8006c0a:	f001 fa77 	bl	80080fc <pxPortInitialiseStack>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c20:	bf00      	nop
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20005dbc 	.word	0x20005dbc
 8006c2c:	20005e24 	.word	0x20005e24
 8006c30:	20005e8c 	.word	0x20005e8c

08006c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c3c:	f001 fb6e 	bl	800831c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c40:	4b2d      	ldr	r3, [pc, #180]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	4a2c      	ldr	r2, [pc, #176]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c4a:	4b2c      	ldr	r3, [pc, #176]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c52:	4a2a      	ldr	r2, [pc, #168]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c58:	4b27      	ldr	r3, [pc, #156]	; (8006cf8 <prvAddNewTaskToReadyList+0xc4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d110      	bne.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c60:	f000 fc4e 	bl	8007500 <prvInitialiseTaskLists>
 8006c64:	e00d      	b.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c66:	4b26      	ldr	r3, [pc, #152]	; (8006d00 <prvAddNewTaskToReadyList+0xcc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c6e:	4b23      	ldr	r3, [pc, #140]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d802      	bhi.n	8006c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c7c:	4a1f      	ldr	r2, [pc, #124]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c82:	4b20      	ldr	r3, [pc, #128]	; (8006d04 <prvAddNewTaskToReadyList+0xd0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3301      	adds	r3, #1
 8006c88:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <prvAddNewTaskToReadyList+0xd0>)
 8006c8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c8c:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <prvAddNewTaskToReadyList+0xd0>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c98:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <prvAddNewTaskToReadyList+0xd4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d903      	bls.n	8006ca8 <prvAddNewTaskToReadyList+0x74>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	4a18      	ldr	r2, [pc, #96]	; (8006d08 <prvAddNewTaskToReadyList+0xd4>)
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4a15      	ldr	r2, [pc, #84]	; (8006d0c <prvAddNewTaskToReadyList+0xd8>)
 8006cb6:	441a      	add	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f7ff f895 	bl	8005dee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cc4:	f001 fb5e 	bl	8008384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cc8:	4b0d      	ldr	r3, [pc, #52]	; (8006d00 <prvAddNewTaskToReadyList+0xcc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvAddNewTaskToReadyList+0xc8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d207      	bcs.n	8006cee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <prvAddNewTaskToReadyList+0xdc>)
 8006ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cee:	bf00      	nop
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20002044 	.word	0x20002044
 8006cfc:	20001b70 	.word	0x20001b70
 8006d00:	20002050 	.word	0x20002050
 8006d04:	20002060 	.word	0x20002060
 8006d08:	2000204c 	.word	0x2000204c
 8006d0c:	20001b74 	.word	0x20001b74
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d019      	beq.n	8006d5a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d26:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <vTaskDelay+0x64>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00c      	beq.n	8006d48 <vTaskDelay+0x34>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	b672      	cpsid	i
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	b662      	cpsie	i
 8006d42:	60bb      	str	r3, [r7, #8]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006d48:	f000 f88e 	bl	8006e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fd62 	bl	8007818 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d54:	f000 f896 	bl	8006e84 <xTaskResumeAll>
 8006d58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d107      	bne.n	8006d70 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006d60:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <vTaskDelay+0x68>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	2000206c 	.word	0x2000206c
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08a      	sub	sp, #40	; 0x28
 8006d84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d8e:	463a      	mov	r2, r7
 8006d90:	1d39      	adds	r1, r7, #4
 8006d92:	f107 0308 	add.w	r3, r7, #8
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe ffc8 	bl	8005d2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	9202      	str	r2, [sp, #8]
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	2300      	movs	r3, #0
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	2300      	movs	r3, #0
 8006dac:	460a      	mov	r2, r1
 8006dae:	4926      	ldr	r1, [pc, #152]	; (8006e48 <vTaskStartScheduler+0xc8>)
 8006db0:	4826      	ldr	r0, [pc, #152]	; (8006e4c <vTaskStartScheduler+0xcc>)
 8006db2:	f7ff fdef 	bl	8006994 <xTaskCreateStatic>
 8006db6:	4603      	mov	r3, r0
 8006db8:	4a25      	ldr	r2, [pc, #148]	; (8006e50 <vTaskStartScheduler+0xd0>)
 8006dba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dbc:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <vTaskStartScheduler+0xd0>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	617b      	str	r3, [r7, #20]
 8006dc8:	e001      	b.n	8006dce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d102      	bne.n	8006dda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006dd4:	f000 fd74 	bl	80078c0 <xTimerCreateTimerTask>
 8006dd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d11d      	bne.n	8006e1c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	b672      	cpsid	i
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	b662      	cpsie	i
 8006df4:	613b      	str	r3, [r7, #16]
}
 8006df6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006df8:	4b16      	ldr	r3, [pc, #88]	; (8006e54 <vTaskStartScheduler+0xd4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3354      	adds	r3, #84	; 0x54
 8006dfe:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <vTaskStartScheduler+0xd8>)
 8006e00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e02:	4b16      	ldr	r3, [pc, #88]	; (8006e5c <vTaskStartScheduler+0xdc>)
 8006e04:	f04f 32ff 	mov.w	r2, #4294967295
 8006e08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e0a:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <vTaskStartScheduler+0xe0>)
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e10:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <vTaskStartScheduler+0xe4>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e16:	f001 fa03 	bl	8008220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e1a:	e010      	b.n	8006e3e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d10c      	bne.n	8006e3e <vTaskStartScheduler+0xbe>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	b672      	cpsid	i
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	b662      	cpsie	i
 8006e38:	60fb      	str	r3, [r7, #12]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <vTaskStartScheduler+0xbc>
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	08008be4 	.word	0x08008be4
 8006e4c:	080074d1 	.word	0x080074d1
 8006e50:	20002068 	.word	0x20002068
 8006e54:	20001b70 	.word	0x20001b70
 8006e58:	2000005c 	.word	0x2000005c
 8006e5c:	20002064 	.word	0x20002064
 8006e60:	20002050 	.word	0x20002050
 8006e64:	20002048 	.word	0x20002048

08006e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e6c:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <vTaskSuspendAll+0x18>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	4a03      	ldr	r2, [pc, #12]	; (8006e80 <vTaskSuspendAll+0x18>)
 8006e74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006e76:	bf00      	nop
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	2000206c 	.word	0x2000206c

08006e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e92:	4b43      	ldr	r3, [pc, #268]	; (8006fa0 <xTaskResumeAll+0x11c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10c      	bne.n	8006eb4 <xTaskResumeAll+0x30>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	b672      	cpsid	i
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	b662      	cpsie	i
 8006eae:	603b      	str	r3, [r7, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	e7fe      	b.n	8006eb2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006eb4:	f001 fa32 	bl	800831c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006eb8:	4b39      	ldr	r3, [pc, #228]	; (8006fa0 <xTaskResumeAll+0x11c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	4a38      	ldr	r2, [pc, #224]	; (8006fa0 <xTaskResumeAll+0x11c>)
 8006ec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec2:	4b37      	ldr	r3, [pc, #220]	; (8006fa0 <xTaskResumeAll+0x11c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d162      	bne.n	8006f90 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eca:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <xTaskResumeAll+0x120>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d05e      	beq.n	8006f90 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ed2:	e02f      	b.n	8006f34 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed4:	4b34      	ldr	r3, [pc, #208]	; (8006fa8 <xTaskResumeAll+0x124>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3318      	adds	r3, #24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe ffe1 	bl	8005ea8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe ffdc 	bl	8005ea8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4b2d      	ldr	r3, [pc, #180]	; (8006fac <xTaskResumeAll+0x128>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d903      	bls.n	8006f04 <xTaskResumeAll+0x80>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	4a2a      	ldr	r2, [pc, #168]	; (8006fac <xTaskResumeAll+0x128>)
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4a27      	ldr	r2, [pc, #156]	; (8006fb0 <xTaskResumeAll+0x12c>)
 8006f12:	441a      	add	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f7fe ff67 	bl	8005dee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4b23      	ldr	r3, [pc, #140]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d302      	bcc.n	8006f34 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8006f2e:	4b22      	ldr	r3, [pc, #136]	; (8006fb8 <xTaskResumeAll+0x134>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f34:	4b1c      	ldr	r3, [pc, #112]	; (8006fa8 <xTaskResumeAll+0x124>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1cb      	bne.n	8006ed4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f42:	f000 fbb9 	bl	80076b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f46:	4b1d      	ldr	r3, [pc, #116]	; (8006fbc <xTaskResumeAll+0x138>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d010      	beq.n	8006f74 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f52:	f000 f859 	bl	8007008 <xTaskIncrementTick>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8006f5c:	4b16      	ldr	r3, [pc, #88]	; (8006fb8 <xTaskResumeAll+0x134>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f1      	bne.n	8006f52 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8006f6e:	4b13      	ldr	r3, [pc, #76]	; (8006fbc <xTaskResumeAll+0x138>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f74:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <xTaskResumeAll+0x134>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d009      	beq.n	8006f90 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f80:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <xTaskResumeAll+0x13c>)
 8006f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f90:	f001 f9f8 	bl	8008384 <vPortExitCritical>

	return xAlreadyYielded;
 8006f94:	68bb      	ldr	r3, [r7, #8]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2000206c 	.word	0x2000206c
 8006fa4:	20002044 	.word	0x20002044
 8006fa8:	20002004 	.word	0x20002004
 8006fac:	2000204c 	.word	0x2000204c
 8006fb0:	20001b74 	.word	0x20001b74
 8006fb4:	20001b70 	.word	0x20001b70
 8006fb8:	20002058 	.word	0x20002058
 8006fbc:	20002054 	.word	0x20002054
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <xTaskGetTickCount+0x1c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fd0:	687b      	ldr	r3, [r7, #4]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20002048 	.word	0x20002048

08006fe4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fea:	f001 fa7f 	bl	80084ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006fee:	2300      	movs	r3, #0
 8006ff0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006ff2:	4b04      	ldr	r3, [pc, #16]	; (8007004 <xTaskGetTickCountFromISR+0x20>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ff8:	683b      	ldr	r3, [r7, #0]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20002048 	.word	0x20002048

08007008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007012:	4b50      	ldr	r3, [pc, #320]	; (8007154 <xTaskIncrementTick+0x14c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f040 808b 	bne.w	8007132 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800701c:	4b4e      	ldr	r3, [pc, #312]	; (8007158 <xTaskIncrementTick+0x150>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007024:	4a4c      	ldr	r2, [pc, #304]	; (8007158 <xTaskIncrementTick+0x150>)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d122      	bne.n	8007076 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007030:	4b4a      	ldr	r3, [pc, #296]	; (800715c <xTaskIncrementTick+0x154>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00c      	beq.n	8007054 <xTaskIncrementTick+0x4c>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	b672      	cpsid	i
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	b662      	cpsie	i
 800704e:	603b      	str	r3, [r7, #0]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <xTaskIncrementTick+0x4a>
 8007054:	4b41      	ldr	r3, [pc, #260]	; (800715c <xTaskIncrementTick+0x154>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	4b41      	ldr	r3, [pc, #260]	; (8007160 <xTaskIncrementTick+0x158>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a3f      	ldr	r2, [pc, #252]	; (800715c <xTaskIncrementTick+0x154>)
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4a3f      	ldr	r2, [pc, #252]	; (8007160 <xTaskIncrementTick+0x158>)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	4b3e      	ldr	r3, [pc, #248]	; (8007164 <xTaskIncrementTick+0x15c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3301      	adds	r3, #1
 800706e:	4a3d      	ldr	r2, [pc, #244]	; (8007164 <xTaskIncrementTick+0x15c>)
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	f000 fb21 	bl	80076b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007076:	4b3c      	ldr	r3, [pc, #240]	; (8007168 <xTaskIncrementTick+0x160>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	429a      	cmp	r2, r3
 800707e:	d349      	bcc.n	8007114 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007080:	4b36      	ldr	r3, [pc, #216]	; (800715c <xTaskIncrementTick+0x154>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d104      	bne.n	8007094 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800708a:	4b37      	ldr	r3, [pc, #220]	; (8007168 <xTaskIncrementTick+0x160>)
 800708c:	f04f 32ff 	mov.w	r2, #4294967295
 8007090:	601a      	str	r2, [r3, #0]
					break;
 8007092:	e03f      	b.n	8007114 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007094:	4b31      	ldr	r3, [pc, #196]	; (800715c <xTaskIncrementTick+0x154>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d203      	bcs.n	80070b4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070ac:	4a2e      	ldr	r2, [pc, #184]	; (8007168 <xTaskIncrementTick+0x160>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070b2:	e02f      	b.n	8007114 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fef5 	bl	8005ea8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3318      	adds	r3, #24
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe feec 	bl	8005ea8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	4b25      	ldr	r3, [pc, #148]	; (800716c <xTaskIncrementTick+0x164>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d903      	bls.n	80070e4 <xTaskIncrementTick+0xdc>
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	4a22      	ldr	r2, [pc, #136]	; (800716c <xTaskIncrementTick+0x164>)
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4a1f      	ldr	r2, [pc, #124]	; (8007170 <xTaskIncrementTick+0x168>)
 80070f2:	441a      	add	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f7fe fe77 	bl	8005dee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	4b1b      	ldr	r3, [pc, #108]	; (8007174 <xTaskIncrementTick+0x16c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	429a      	cmp	r2, r3
 800710c:	d3b8      	bcc.n	8007080 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800710e:	2301      	movs	r3, #1
 8007110:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007112:	e7b5      	b.n	8007080 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007114:	4b17      	ldr	r3, [pc, #92]	; (8007174 <xTaskIncrementTick+0x16c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711a:	4915      	ldr	r1, [pc, #84]	; (8007170 <xTaskIncrementTick+0x168>)
 800711c:	4613      	mov	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	440b      	add	r3, r1
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d907      	bls.n	800713c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e004      	b.n	800713c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007132:	4b11      	ldr	r3, [pc, #68]	; (8007178 <xTaskIncrementTick+0x170>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	4a0f      	ldr	r2, [pc, #60]	; (8007178 <xTaskIncrementTick+0x170>)
 800713a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800713c:	4b0f      	ldr	r3, [pc, #60]	; (800717c <xTaskIncrementTick+0x174>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007144:	2301      	movs	r3, #1
 8007146:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007148:	697b      	ldr	r3, [r7, #20]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	2000206c 	.word	0x2000206c
 8007158:	20002048 	.word	0x20002048
 800715c:	20001ffc 	.word	0x20001ffc
 8007160:	20002000 	.word	0x20002000
 8007164:	2000205c 	.word	0x2000205c
 8007168:	20002064 	.word	0x20002064
 800716c:	2000204c 	.word	0x2000204c
 8007170:	20001b74 	.word	0x20001b74
 8007174:	20001b70 	.word	0x20001b70
 8007178:	20002054 	.word	0x20002054
 800717c:	20002058 	.word	0x20002058

08007180 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007186:	4b2b      	ldr	r3, [pc, #172]	; (8007234 <vTaskSwitchContext+0xb4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800718e:	4b2a      	ldr	r3, [pc, #168]	; (8007238 <vTaskSwitchContext+0xb8>)
 8007190:	2201      	movs	r2, #1
 8007192:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007194:	e048      	b.n	8007228 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007196:	4b28      	ldr	r3, [pc, #160]	; (8007238 <vTaskSwitchContext+0xb8>)
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800719c:	4b27      	ldr	r3, [pc, #156]	; (800723c <vTaskSwitchContext+0xbc>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e012      	b.n	80071ca <vTaskSwitchContext+0x4a>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10c      	bne.n	80071c4 <vTaskSwitchContext+0x44>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	b672      	cpsid	i
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	b662      	cpsie	i
 80071be:	607b      	str	r3, [r7, #4]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <vTaskSwitchContext+0x42>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	491d      	ldr	r1, [pc, #116]	; (8007240 <vTaskSwitchContext+0xc0>)
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0e2      	beq.n	80071a4 <vTaskSwitchContext+0x24>
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4a15      	ldr	r2, [pc, #84]	; (8007240 <vTaskSwitchContext+0xc0>)
 80071ea:	4413      	add	r3, r2
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	605a      	str	r2, [r3, #4]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	3308      	adds	r3, #8
 8007200:	429a      	cmp	r2, r3
 8007202:	d104      	bne.n	800720e <vTaskSwitchContext+0x8e>
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	605a      	str	r2, [r3, #4]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	4a0b      	ldr	r2, [pc, #44]	; (8007244 <vTaskSwitchContext+0xc4>)
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	4a08      	ldr	r2, [pc, #32]	; (800723c <vTaskSwitchContext+0xbc>)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <vTaskSwitchContext+0xc4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3354      	adds	r3, #84	; 0x54
 8007224:	4a08      	ldr	r2, [pc, #32]	; (8007248 <vTaskSwitchContext+0xc8>)
 8007226:	6013      	str	r3, [r2, #0]
}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	2000206c 	.word	0x2000206c
 8007238:	20002058 	.word	0x20002058
 800723c:	2000204c 	.word	0x2000204c
 8007240:	20001b74 	.word	0x20001b74
 8007244:	20001b70 	.word	0x20001b70
 8007248:	2000005c 	.word	0x2000005c

0800724c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10c      	bne.n	8007276 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	b672      	cpsid	i
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	b662      	cpsie	i
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007276:	4b07      	ldr	r3, [pc, #28]	; (8007294 <vTaskPlaceOnEventList+0x48>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3318      	adds	r3, #24
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fe fdd9 	bl	8005e36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007284:	2101      	movs	r1, #1
 8007286:	6838      	ldr	r0, [r7, #0]
 8007288:	f000 fac6 	bl	8007818 <prvAddCurrentTaskToDelayedList>
}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20001b70 	.word	0x20001b70

08007298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10c      	bne.n	80072c4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	b672      	cpsid	i
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	b662      	cpsie	i
 80072be:	617b      	str	r3, [r7, #20]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072c4:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <vTaskPlaceOnEventListRestricted+0x58>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3318      	adds	r3, #24
 80072ca:	4619      	mov	r1, r3
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7fe fd8e 	bl	8005dee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80072d8:	f04f 33ff 	mov.w	r3, #4294967295
 80072dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	68b8      	ldr	r0, [r7, #8]
 80072e2:	f000 fa99 	bl	8007818 <prvAddCurrentTaskToDelayedList>
	}
 80072e6:	bf00      	nop
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20001b70 	.word	0x20001b70

080072f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10c      	bne.n	8007324 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	b672      	cpsid	i
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	b662      	cpsie	i
 800731e:	60fb      	str	r3, [r7, #12]
}
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3318      	adds	r3, #24
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fdbd 	bl	8005ea8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800732e:	4b1e      	ldr	r3, [pc, #120]	; (80073a8 <xTaskRemoveFromEventList+0xb4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d11d      	bne.n	8007372 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	3304      	adds	r3, #4
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fdb4 	bl	8005ea8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007344:	4b19      	ldr	r3, [pc, #100]	; (80073ac <xTaskRemoveFromEventList+0xb8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d903      	bls.n	8007354 <xTaskRemoveFromEventList+0x60>
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	4a16      	ldr	r2, [pc, #88]	; (80073ac <xTaskRemoveFromEventList+0xb8>)
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4a13      	ldr	r2, [pc, #76]	; (80073b0 <xTaskRemoveFromEventList+0xbc>)
 8007362:	441a      	add	r2, r3
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	3304      	adds	r3, #4
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f7fe fd3f 	bl	8005dee <vListInsertEnd>
 8007370:	e005      	b.n	800737e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	3318      	adds	r3, #24
 8007376:	4619      	mov	r1, r3
 8007378:	480e      	ldr	r0, [pc, #56]	; (80073b4 <xTaskRemoveFromEventList+0xc0>)
 800737a:	f7fe fd38 	bl	8005dee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007382:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <xTaskRemoveFromEventList+0xc4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	429a      	cmp	r2, r3
 800738a:	d905      	bls.n	8007398 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007390:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <xTaskRemoveFromEventList+0xc8>)
 8007392:	2201      	movs	r2, #1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e001      	b.n	800739c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800739c:	697b      	ldr	r3, [r7, #20]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	2000206c 	.word	0x2000206c
 80073ac:	2000204c 	.word	0x2000204c
 80073b0:	20001b74 	.word	0x20001b74
 80073b4:	20002004 	.word	0x20002004
 80073b8:	20001b70 	.word	0x20001b70
 80073bc:	20002058 	.word	0x20002058

080073c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073c8:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <vTaskInternalSetTimeOutState+0x24>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <vTaskInternalSetTimeOutState+0x28>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	605a      	str	r2, [r3, #4]
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	2000205c 	.word	0x2000205c
 80073e8:	20002048 	.word	0x20002048

080073ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10c      	bne.n	8007416 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	b672      	cpsid	i
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	b662      	cpsie	i
 8007410:	613b      	str	r3, [r7, #16]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10c      	bne.n	8007436 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	b672      	cpsid	i
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	b662      	cpsie	i
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007436:	f000 ff71 	bl	800831c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800743a:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <xTaskCheckForTimeOut+0xc4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d102      	bne.n	800745a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e023      	b.n	80074a2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <xTaskCheckForTimeOut+0xc8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d007      	beq.n	8007476 <xTaskCheckForTimeOut+0x8a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	429a      	cmp	r2, r3
 800746e:	d302      	bcc.n	8007476 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007470:	2301      	movs	r3, #1
 8007472:	61fb      	str	r3, [r7, #28]
 8007474:	e015      	b.n	80074a2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	429a      	cmp	r2, r3
 800747e:	d20b      	bcs.n	8007498 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff ff97 	bl	80073c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	e004      	b.n	80074a2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800749e:	2301      	movs	r3, #1
 80074a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074a2:	f000 ff6f 	bl	8008384 <vPortExitCritical>

	return xReturn;
 80074a6:	69fb      	ldr	r3, [r7, #28]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20002048 	.word	0x20002048
 80074b4:	2000205c 	.word	0x2000205c

080074b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074bc:	4b03      	ldr	r3, [pc, #12]	; (80074cc <vTaskMissedYield+0x14>)
 80074be:	2201      	movs	r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
}
 80074c2:	bf00      	nop
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	20002058 	.word	0x20002058

080074d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074d8:	f000 f852 	bl	8007580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <prvIdleTask+0x28>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d9f9      	bls.n	80074d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <prvIdleTask+0x2c>)
 80074e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074f4:	e7f0      	b.n	80074d8 <prvIdleTask+0x8>
 80074f6:	bf00      	nop
 80074f8:	20001b74 	.word	0x20001b74
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007506:	2300      	movs	r3, #0
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	e00c      	b.n	8007526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4a12      	ldr	r2, [pc, #72]	; (8007560 <prvInitialiseTaskLists+0x60>)
 8007518:	4413      	add	r3, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fc3a 	bl	8005d94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3301      	adds	r3, #1
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b37      	cmp	r3, #55	; 0x37
 800752a:	d9ef      	bls.n	800750c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800752c:	480d      	ldr	r0, [pc, #52]	; (8007564 <prvInitialiseTaskLists+0x64>)
 800752e:	f7fe fc31 	bl	8005d94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007532:	480d      	ldr	r0, [pc, #52]	; (8007568 <prvInitialiseTaskLists+0x68>)
 8007534:	f7fe fc2e 	bl	8005d94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007538:	480c      	ldr	r0, [pc, #48]	; (800756c <prvInitialiseTaskLists+0x6c>)
 800753a:	f7fe fc2b 	bl	8005d94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800753e:	480c      	ldr	r0, [pc, #48]	; (8007570 <prvInitialiseTaskLists+0x70>)
 8007540:	f7fe fc28 	bl	8005d94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007544:	480b      	ldr	r0, [pc, #44]	; (8007574 <prvInitialiseTaskLists+0x74>)
 8007546:	f7fe fc25 	bl	8005d94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800754a:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <prvInitialiseTaskLists+0x78>)
 800754c:	4a05      	ldr	r2, [pc, #20]	; (8007564 <prvInitialiseTaskLists+0x64>)
 800754e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007550:	4b0a      	ldr	r3, [pc, #40]	; (800757c <prvInitialiseTaskLists+0x7c>)
 8007552:	4a05      	ldr	r2, [pc, #20]	; (8007568 <prvInitialiseTaskLists+0x68>)
 8007554:	601a      	str	r2, [r3, #0]
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20001b74 	.word	0x20001b74
 8007564:	20001fd4 	.word	0x20001fd4
 8007568:	20001fe8 	.word	0x20001fe8
 800756c:	20002004 	.word	0x20002004
 8007570:	20002018 	.word	0x20002018
 8007574:	20002030 	.word	0x20002030
 8007578:	20001ffc 	.word	0x20001ffc
 800757c:	20002000 	.word	0x20002000

08007580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007586:	e019      	b.n	80075bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007588:	f000 fec8 	bl	800831c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800758c:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <prvCheckTasksWaitingTermination+0x50>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fc85 	bl	8005ea8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800759e:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <prvCheckTasksWaitingTermination+0x54>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	4a0b      	ldr	r2, [pc, #44]	; (80075d4 <prvCheckTasksWaitingTermination+0x54>)
 80075a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075b2:	f000 fee7 	bl	8008384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f848 	bl	800764c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e1      	bne.n	8007588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20002018 	.word	0x20002018
 80075d4:	20002044 	.word	0x20002044
 80075d8:	2000202c 	.word	0x2000202c

080075dc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80075e8:	e005      	b.n	80075f6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3301      	adds	r3, #1
 80075ee:	607b      	str	r3, [r7, #4]
			ulCount++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2ba5      	cmp	r3, #165	; 0xa5
 80075fc:	d0f5      	beq.n	80075ea <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	089b      	lsrs	r3, r3, #2
 8007602:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	b29b      	uxth	r3, r3
	}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <uxTaskGetStackHighWaterMark+0x14>
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <uxTaskGetStackHighWaterMark+0x34>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	e000      	b.n	800762a <uxTaskGetStackHighWaterMark+0x16>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007630:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8007632:	6938      	ldr	r0, [r7, #16]
 8007634:	f7ff ffd2 	bl	80075dc <prvTaskCheckFreeStackSpace>
 8007638:	4603      	mov	r3, r0
 800763a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800763c:	68fb      	ldr	r3, [r7, #12]
	}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20001b70 	.word	0x20001b70

0800764c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3354      	adds	r3, #84	; 0x54
 8007658:	4618      	mov	r0, r3
 800765a:	f001 f977 	bl	800894c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007664:	2b00      	cmp	r3, #0
 8007666:	d108      	bne.n	800767a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766c:	4618      	mov	r0, r3
 800766e:	f001 f84b 	bl	8008708 <vPortFree>
				vPortFree( pxTCB );
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 f848 	bl	8008708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007678:	e01a      	b.n	80076b0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007680:	2b01      	cmp	r3, #1
 8007682:	d103      	bne.n	800768c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f83f 	bl	8008708 <vPortFree>
	}
 800768a:	e011      	b.n	80076b0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007692:	2b02      	cmp	r3, #2
 8007694:	d00c      	beq.n	80076b0 <prvDeleteTCB+0x64>
	__asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	b672      	cpsid	i
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	b662      	cpsie	i
 80076aa:	60fb      	str	r3, [r7, #12]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <prvDeleteTCB+0x62>
	}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <prvResetNextTaskUnblockTime+0x38>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d104      	bne.n	80076d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <prvResetNextTaskUnblockTime+0x3c>)
 80076ca:	f04f 32ff 	mov.w	r2, #4294967295
 80076ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076d0:	e008      	b.n	80076e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d2:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <prvResetNextTaskUnblockTime+0x38>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <prvResetNextTaskUnblockTime+0x3c>)
 80076e2:	6013      	str	r3, [r2, #0]
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	20001ffc 	.word	0x20001ffc
 80076f4:	20002064 	.word	0x20002064

080076f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076fe:	4b0b      	ldr	r3, [pc, #44]	; (800772c <xTaskGetSchedulerState+0x34>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007706:	2301      	movs	r3, #1
 8007708:	607b      	str	r3, [r7, #4]
 800770a:	e008      	b.n	800771e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800770c:	4b08      	ldr	r3, [pc, #32]	; (8007730 <xTaskGetSchedulerState+0x38>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d102      	bne.n	800771a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007714:	2302      	movs	r3, #2
 8007716:	607b      	str	r3, [r7, #4]
 8007718:	e001      	b.n	800771e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800771a:	2300      	movs	r3, #0
 800771c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800771e:	687b      	ldr	r3, [r7, #4]
	}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20002050 	.word	0x20002050
 8007730:	2000206c 	.word	0x2000206c

08007734 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d05a      	beq.n	8007800 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800774a:	4b30      	ldr	r3, [pc, #192]	; (800780c <xTaskPriorityDisinherit+0xd8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	429a      	cmp	r2, r3
 8007752:	d00c      	beq.n	800776e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	b672      	cpsid	i
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	b662      	cpsie	i
 8007768:	60fb      	str	r3, [r7, #12]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10c      	bne.n	8007790 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	b672      	cpsid	i
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	b662      	cpsie	i
 800778a:	60bb      	str	r3, [r7, #8]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007794:	1e5a      	subs	r2, r3, #1
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d02c      	beq.n	8007800 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d128      	bne.n	8007800 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fb78 	bl	8005ea8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <xTaskPriorityDisinherit+0xdc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d903      	bls.n	80077e0 <xTaskPriorityDisinherit+0xac>
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	4a0c      	ldr	r2, [pc, #48]	; (8007810 <xTaskPriorityDisinherit+0xdc>)
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	4613      	mov	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4a09      	ldr	r2, [pc, #36]	; (8007814 <xTaskPriorityDisinherit+0xe0>)
 80077ee:	441a      	add	r2, r3
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f7fe faf9 	bl	8005dee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007800:	697b      	ldr	r3, [r7, #20]
	}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20001b70 	.word	0x20001b70
 8007810:	2000204c 	.word	0x2000204c
 8007814:	20001b74 	.word	0x20001b74

08007818 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007822:	4b21      	ldr	r3, [pc, #132]	; (80078a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007828:	4b20      	ldr	r3, [pc, #128]	; (80078ac <prvAddCurrentTaskToDelayedList+0x94>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3304      	adds	r3, #4
 800782e:	4618      	mov	r0, r3
 8007830:	f7fe fb3a 	bl	8005ea8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783a:	d10a      	bne.n	8007852 <prvAddCurrentTaskToDelayedList+0x3a>
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d007      	beq.n	8007852 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007842:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4819      	ldr	r0, [pc, #100]	; (80078b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800784c:	f7fe facf 	bl	8005dee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007850:	e026      	b.n	80078a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800785a:	4b14      	ldr	r3, [pc, #80]	; (80078ac <prvAddCurrentTaskToDelayedList+0x94>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	429a      	cmp	r2, r3
 8007868:	d209      	bcs.n	800787e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800786a:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3304      	adds	r3, #4
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	f7fe fadd 	bl	8005e36 <vListInsert>
}
 800787c:	e010      	b.n	80078a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800787e:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3304      	adds	r3, #4
 8007888:	4619      	mov	r1, r3
 800788a:	4610      	mov	r0, r2
 800788c:	f7fe fad3 	bl	8005e36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007890:	4b0a      	ldr	r3, [pc, #40]	; (80078bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	429a      	cmp	r2, r3
 8007898:	d202      	bcs.n	80078a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800789a:	4a08      	ldr	r2, [pc, #32]	; (80078bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	6013      	str	r3, [r2, #0]
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20002048 	.word	0x20002048
 80078ac:	20001b70 	.word	0x20001b70
 80078b0:	20002030 	.word	0x20002030
 80078b4:	20002000 	.word	0x20002000
 80078b8:	20001ffc 	.word	0x20001ffc
 80078bc:	20002064 	.word	0x20002064

080078c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	; 0x28
 80078c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078ca:	f000 fbb5 	bl	8008038 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078ce:	4b1d      	ldr	r3, [pc, #116]	; (8007944 <xTimerCreateTimerTask+0x84>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d021      	beq.n	800791a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078de:	1d3a      	adds	r2, r7, #4
 80078e0:	f107 0108 	add.w	r1, r7, #8
 80078e4:	f107 030c 	add.w	r3, r7, #12
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fa39 	bl	8005d60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	9202      	str	r2, [sp, #8]
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	2308      	movs	r3, #8
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	2300      	movs	r3, #0
 80078fe:	460a      	mov	r2, r1
 8007900:	4911      	ldr	r1, [pc, #68]	; (8007948 <xTimerCreateTimerTask+0x88>)
 8007902:	4812      	ldr	r0, [pc, #72]	; (800794c <xTimerCreateTimerTask+0x8c>)
 8007904:	f7ff f846 	bl	8006994 <xTaskCreateStatic>
 8007908:	4603      	mov	r3, r0
 800790a:	4a11      	ldr	r2, [pc, #68]	; (8007950 <xTimerCreateTimerTask+0x90>)
 800790c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800790e:	4b10      	ldr	r3, [pc, #64]	; (8007950 <xTimerCreateTimerTask+0x90>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007916:	2301      	movs	r3, #1
 8007918:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10c      	bne.n	800793a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	b672      	cpsid	i
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	b662      	cpsie	i
 8007934:	613b      	str	r3, [r7, #16]
}
 8007936:	bf00      	nop
 8007938:	e7fe      	b.n	8007938 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800793a:	697b      	ldr	r3, [r7, #20]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	200020a0 	.word	0x200020a0
 8007948:	08008bec 	.word	0x08008bec
 800794c:	08007bd1 	.word	0x08007bd1
 8007950:	200020a4 	.word	0x200020a4

08007954 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af02      	add	r7, sp, #8
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007962:	202c      	movs	r0, #44	; 0x2c
 8007964:	f000 fe06 	bl	8008574 <pvPortMalloc>
 8007968:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00d      	beq.n	800798c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 f847 	bl	8007a1a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800798c:	697b      	ldr	r3, [r7, #20]
	}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007996:	b580      	push	{r7, lr}
 8007998:	b08a      	sub	sp, #40	; 0x28
 800799a:	af02      	add	r7, sp, #8
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
 80079a2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80079a4:	232c      	movs	r3, #44	; 0x2c
 80079a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b2c      	cmp	r3, #44	; 0x2c
 80079ac:	d00c      	beq.n	80079c8 <xTimerCreateStatic+0x32>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	b672      	cpsid	i
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	b662      	cpsie	i
 80079c2:	61bb      	str	r3, [r7, #24]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10c      	bne.n	80079ea <xTimerCreateStatic+0x54>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	b672      	cpsid	i
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	b662      	cpsie	i
 80079e4:	617b      	str	r3, [r7, #20]
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00d      	beq.n	8007a10 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	9301      	str	r3, [sp, #4]
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f805 	bl	8007a1a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007a10:	69fb      	ldr	r3, [r7, #28]
	}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b086      	sub	sp, #24
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	60f8      	str	r0, [r7, #12]
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	607a      	str	r2, [r7, #4]
 8007a26:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10c      	bne.n	8007a48 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	b672      	cpsid	i
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	b662      	cpsie	i
 8007a42:	617b      	str	r3, [r7, #20]
}
 8007a44:	bf00      	nop
 8007a46:	e7fe      	b.n	8007a46 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01e      	beq.n	8007a8c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007a4e:	f000 faf3 	bl	8008038 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	6a3a      	ldr	r2, [r7, #32]
 8007a68:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe f9b0 	bl	8005dd4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d008      	beq.n	8007a8c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a80:	f043 0304 	orr.w	r3, r3, #4
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007a8c:	bf00      	nop
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	; 0x28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10c      	bne.n	8007ac6 <xTimerGenericCommand+0x32>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	b672      	cpsid	i
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	b662      	cpsie	i
 8007ac0:	623b      	str	r3, [r7, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ac6:	4b1a      	ldr	r3, [pc, #104]	; (8007b30 <xTimerGenericCommand+0x9c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d02a      	beq.n	8007b24 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b05      	cmp	r3, #5
 8007ade:	dc18      	bgt.n	8007b12 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ae0:	f7ff fe0a 	bl	80076f8 <xTaskGetSchedulerState>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d109      	bne.n	8007afe <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007aea:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <xTimerGenericCommand+0x9c>)
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	f107 0110 	add.w	r1, r7, #16
 8007af2:	2300      	movs	r3, #0
 8007af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007af6:	f7fe fb53 	bl	80061a0 <xQueueGenericSend>
 8007afa:	6278      	str	r0, [r7, #36]	; 0x24
 8007afc:	e012      	b.n	8007b24 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <xTimerGenericCommand+0x9c>)
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	f107 0110 	add.w	r1, r7, #16
 8007b06:	2300      	movs	r3, #0
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f7fe fb49 	bl	80061a0 <xQueueGenericSend>
 8007b0e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b10:	e008      	b.n	8007b24 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <xTimerGenericCommand+0x9c>)
 8007b14:	6818      	ldr	r0, [r3, #0]
 8007b16:	f107 0110 	add.w	r1, r7, #16
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	f7fe fc45 	bl	80063ac <xQueueGenericSendFromISR>
 8007b22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3728      	adds	r7, #40	; 0x28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	200020a0 	.word	0x200020a0

08007b34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b3e:	4b23      	ldr	r3, [pc, #140]	; (8007bcc <prvProcessExpiredTimer+0x98>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe f9ab 	bl	8005ea8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d024      	beq.n	8007baa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	18d1      	adds	r1, r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	6978      	ldr	r0, [r7, #20]
 8007b6e:	f000 f8d3 	bl	8007d18 <prvInsertTimerInActiveList>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d021      	beq.n	8007bbc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	2100      	movs	r1, #0
 8007b82:	6978      	ldr	r0, [r7, #20]
 8007b84:	f7ff ff86 	bl	8007a94 <xTimerGenericCommand>
 8007b88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d115      	bne.n	8007bbc <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	b672      	cpsid	i
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	b662      	cpsie	i
 8007ba4:	60fb      	str	r3, [r7, #12]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	6978      	ldr	r0, [r7, #20]
 8007bc2:	4798      	blx	r3
}
 8007bc4:	bf00      	nop
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20002098 	.word	0x20002098

08007bd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bd8:	f107 0308 	add.w	r3, r7, #8
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 f857 	bl	8007c90 <prvGetNextExpireTime>
 8007be2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4619      	mov	r1, r3
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f803 	bl	8007bf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bee:	f000 f8d5 	bl	8007d9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bf2:	e7f1      	b.n	8007bd8 <prvTimerTask+0x8>

08007bf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bfe:	f7ff f933 	bl	8006e68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 f866 	bl	8007cd8 <prvSampleTimeNow>
 8007c0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d130      	bne.n	8007c76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <prvProcessTimerOrBlockTask+0x3c>
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d806      	bhi.n	8007c30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c22:	f7ff f92f 	bl	8006e84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c26:	68f9      	ldr	r1, [r7, #12]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff ff83 	bl	8007b34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c2e:	e024      	b.n	8007c7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c36:	4b13      	ldr	r3, [pc, #76]	; (8007c84 <prvProcessTimerOrBlockTask+0x90>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <prvProcessTimerOrBlockTask+0x50>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <prvProcessTimerOrBlockTask+0x52>
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c48:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <prvProcessTimerOrBlockTask+0x94>)
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4619      	mov	r1, r3
 8007c56:	f7fe fe69 	bl	800692c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c5a:	f7ff f913 	bl	8006e84 <xTaskResumeAll>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10a      	bne.n	8007c7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c64:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <prvProcessTimerOrBlockTask+0x98>)
 8007c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	f3bf 8f6f 	isb	sy
}
 8007c74:	e001      	b.n	8007c7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c76:	f7ff f905 	bl	8006e84 <xTaskResumeAll>
}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	2000209c 	.word	0x2000209c
 8007c88:	200020a0 	.word	0x200020a0
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c98:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <prvGetNextExpireTime+0x44>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <prvGetNextExpireTime+0x16>
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	e000      	b.n	8007ca8 <prvGetNextExpireTime+0x18>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d105      	bne.n	8007cc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cb4:	4b07      	ldr	r3, [pc, #28]	; (8007cd4 <prvGetNextExpireTime+0x44>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	e001      	b.n	8007cc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	20002098 	.word	0x20002098

08007cd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ce0:	f7ff f970 	bl	8006fc4 <xTaskGetTickCount>
 8007ce4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <prvSampleTimeNow+0x3c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d205      	bcs.n	8007cfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007cf0:	f000 f93c 	bl	8007f6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	e002      	b.n	8007d02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d02:	4a04      	ldr	r2, [pc, #16]	; (8007d14 <prvSampleTimeNow+0x3c>)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d08:	68fb      	ldr	r3, [r7, #12]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	200020a8 	.word	0x200020a8

08007d18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d812      	bhi.n	8007d64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	1ad2      	subs	r2, r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d302      	bcc.n	8007d52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e01b      	b.n	8007d8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d52:	4b10      	ldr	r3, [pc, #64]	; (8007d94 <prvInsertTimerInActiveList+0x7c>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7fe f86a 	bl	8005e36 <vListInsert>
 8007d62:	e012      	b.n	8007d8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d206      	bcs.n	8007d7a <prvInsertTimerInActiveList+0x62>
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d302      	bcc.n	8007d7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	e007      	b.n	8007d8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d7a:	4b07      	ldr	r3, [pc, #28]	; (8007d98 <prvInsertTimerInActiveList+0x80>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4619      	mov	r1, r3
 8007d84:	4610      	mov	r0, r2
 8007d86:	f7fe f856 	bl	8005e36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d8a:	697b      	ldr	r3, [r7, #20]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	2000209c 	.word	0x2000209c
 8007d98:	20002098 	.word	0x20002098

08007d9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08e      	sub	sp, #56	; 0x38
 8007da0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007da2:	e0d0      	b.n	8007f46 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da1a      	bge.n	8007de0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007daa:	1d3b      	adds	r3, r7, #4
 8007dac:	3304      	adds	r3, #4
 8007dae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10c      	bne.n	8007dd0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	b672      	cpsid	i
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	b662      	cpsie	i
 8007dca:	61fb      	str	r3, [r7, #28]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dd6:	6850      	ldr	r0, [r2, #4]
 8007dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dda:	6892      	ldr	r2, [r2, #8]
 8007ddc:	4611      	mov	r1, r2
 8007dde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f2c0 80af 	blt.w	8007f46 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	3304      	adds	r3, #4
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fe f855 	bl	8005ea8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dfe:	463b      	mov	r3, r7
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff ff69 	bl	8007cd8 <prvSampleTimeNow>
 8007e06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b09      	cmp	r3, #9
 8007e0c:	f200 809a 	bhi.w	8007f44 <prvProcessReceivedCommands+0x1a8>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <prvProcessReceivedCommands+0x7c>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e41 	.word	0x08007e41
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	08007eb9 	.word	0x08007eb9
 8007e28:	08007ecd 	.word	0x08007ecd
 8007e2c:	08007f1b 	.word	0x08007f1b
 8007e30:	08007e41 	.word	0x08007e41
 8007e34:	08007e41 	.word	0x08007e41
 8007e38:	08007eb9 	.word	0x08007eb9
 8007e3c:	08007ecd 	.word	0x08007ecd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e46:	f043 0301 	orr.w	r3, r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	18d1      	adds	r1, r2, r3
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e60:	f7ff ff5a 	bl	8007d18 <prvInsertTimerInActiveList>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d06d      	beq.n	8007f46 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d062      	beq.n	8007f46 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	441a      	add	r2, r3
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e92:	f7ff fdff 	bl	8007a94 <xTimerGenericCommand>
 8007e96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d153      	bne.n	8007f46 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	b672      	cpsid	i
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	b662      	cpsie	i
 8007eb2:	61bb      	str	r3, [r7, #24]
}
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ebe:	f023 0301 	bic.w	r3, r3, #1
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007eca:	e03c      	b.n	8007f46 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10c      	bne.n	8007f06 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	b672      	cpsid	i
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	b662      	cpsie	i
 8007f00:	617b      	str	r3, [r7, #20]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	699a      	ldr	r2, [r3, #24]
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	18d1      	adds	r1, r2, r3
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f14:	f7ff ff00 	bl	8007d18 <prvInsertTimerInActiveList>
					break;
 8007f18:	e015      	b.n	8007f46 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d103      	bne.n	8007f30 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f2a:	f000 fbed 	bl	8008708 <vPortFree>
 8007f2e:	e00a      	b.n	8007f46 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f36:	f023 0301 	bic.w	r3, r3, #1
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f42:	e000      	b.n	8007f46 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8007f44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f46:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <prvProcessReceivedCommands+0x1cc>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	1d39      	adds	r1, r7, #4
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe facc 	bl	80064ec <xQueueReceive>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f47f af24 	bne.w	8007da4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	3730      	adds	r7, #48	; 0x30
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	200020a0 	.word	0x200020a0

08007f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b088      	sub	sp, #32
 8007f70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f72:	e04a      	b.n	800800a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f74:	4b2e      	ldr	r3, [pc, #184]	; (8008030 <prvSwitchTimerLists+0xc4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f7e:	4b2c      	ldr	r3, [pc, #176]	; (8008030 <prvSwitchTimerLists+0xc4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fd ff8b 	bl	8005ea8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d030      	beq.n	800800a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4413      	add	r3, r2
 8007fb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d90e      	bls.n	8007fd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007fc6:	4b1a      	ldr	r3, [pc, #104]	; (8008030 <prvSwitchTimerLists+0xc4>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	f7fd ff30 	bl	8005e36 <vListInsert>
 8007fd6:	e018      	b.n	800800a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fd8:	2300      	movs	r3, #0
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff fd56 	bl	8007a94 <xTimerGenericCommand>
 8007fe8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10c      	bne.n	800800a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	b672      	cpsid	i
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	b662      	cpsie	i
 8008004:	603b      	str	r3, [r7, #0]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800800a:	4b09      	ldr	r3, [pc, #36]	; (8008030 <prvSwitchTimerLists+0xc4>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1af      	bne.n	8007f74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008014:	4b06      	ldr	r3, [pc, #24]	; (8008030 <prvSwitchTimerLists+0xc4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800801a:	4b06      	ldr	r3, [pc, #24]	; (8008034 <prvSwitchTimerLists+0xc8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a04      	ldr	r2, [pc, #16]	; (8008030 <prvSwitchTimerLists+0xc4>)
 8008020:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008022:	4a04      	ldr	r2, [pc, #16]	; (8008034 <prvSwitchTimerLists+0xc8>)
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	6013      	str	r3, [r2, #0]
}
 8008028:	bf00      	nop
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20002098 	.word	0x20002098
 8008034:	2000209c 	.word	0x2000209c

08008038 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800803e:	f000 f96d 	bl	800831c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <prvCheckForValidListAndQueue+0x60>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d120      	bne.n	800808c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800804a:	4814      	ldr	r0, [pc, #80]	; (800809c <prvCheckForValidListAndQueue+0x64>)
 800804c:	f7fd fea2 	bl	8005d94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008050:	4813      	ldr	r0, [pc, #76]	; (80080a0 <prvCheckForValidListAndQueue+0x68>)
 8008052:	f7fd fe9f 	bl	8005d94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008056:	4b13      	ldr	r3, [pc, #76]	; (80080a4 <prvCheckForValidListAndQueue+0x6c>)
 8008058:	4a10      	ldr	r2, [pc, #64]	; (800809c <prvCheckForValidListAndQueue+0x64>)
 800805a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800805c:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <prvCheckForValidListAndQueue+0x70>)
 800805e:	4a10      	ldr	r2, [pc, #64]	; (80080a0 <prvCheckForValidListAndQueue+0x68>)
 8008060:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008062:	2300      	movs	r3, #0
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	4b11      	ldr	r3, [pc, #68]	; (80080ac <prvCheckForValidListAndQueue+0x74>)
 8008068:	4a11      	ldr	r2, [pc, #68]	; (80080b0 <prvCheckForValidListAndQueue+0x78>)
 800806a:	2110      	movs	r1, #16
 800806c:	200a      	movs	r0, #10
 800806e:	f7fd ffaf 	bl	8005fd0 <xQueueGenericCreateStatic>
 8008072:	4603      	mov	r3, r0
 8008074:	4a08      	ldr	r2, [pc, #32]	; (8008098 <prvCheckForValidListAndQueue+0x60>)
 8008076:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008078:	4b07      	ldr	r3, [pc, #28]	; (8008098 <prvCheckForValidListAndQueue+0x60>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <prvCheckForValidListAndQueue+0x60>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	490b      	ldr	r1, [pc, #44]	; (80080b4 <prvCheckForValidListAndQueue+0x7c>)
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe fc26 	bl	80068d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800808c:	f000 f97a 	bl	8008384 <vPortExitCritical>
}
 8008090:	bf00      	nop
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	200020a0 	.word	0x200020a0
 800809c:	20002070 	.word	0x20002070
 80080a0:	20002084 	.word	0x20002084
 80080a4:	20002098 	.word	0x20002098
 80080a8:	2000209c 	.word	0x2000209c
 80080ac:	2000214c 	.word	0x2000214c
 80080b0:	200020ac 	.word	0x200020ac
 80080b4:	08008bf4 	.word	0x08008bf4

080080b8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10c      	bne.n	80080e4 <pvTimerGetTimerID+0x2c>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	b672      	cpsid	i
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	b662      	cpsie	i
 80080de:	60fb      	str	r3, [r7, #12]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 80080e4:	f000 f91a 	bl	800831c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80080ee:	f000 f949 	bl	8008384 <vPortExitCritical>

	return pvReturn;
 80080f2:	693b      	ldr	r3, [r7, #16]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3b04      	subs	r3, #4
 800810c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3b04      	subs	r3, #4
 800811a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f023 0201 	bic.w	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3b04      	subs	r3, #4
 800812a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800812c:	4a0c      	ldr	r2, [pc, #48]	; (8008160 <pxPortInitialiseStack+0x64>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3b14      	subs	r3, #20
 8008136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3b04      	subs	r3, #4
 8008142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f06f 0202 	mvn.w	r2, #2
 800814a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3b20      	subs	r3, #32
 8008150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008152:	68fb      	ldr	r3, [r7, #12]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	08008165 	.word	0x08008165

08008164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800816e:	4b14      	ldr	r3, [pc, #80]	; (80081c0 <prvTaskExitError+0x5c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d00c      	beq.n	8008192 <prvTaskExitError+0x2e>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	b672      	cpsid	i
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	b662      	cpsie	i
 800818c:	60fb      	str	r3, [r7, #12]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <prvTaskExitError+0x2c>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	b672      	cpsid	i
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	b662      	cpsie	i
 80081a6:	60bb      	str	r3, [r7, #8]
}
 80081a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081aa:	bf00      	nop
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d0fc      	beq.n	80081ac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	2000000c 	.word	0x2000000c
	...

080081d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081d0:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <pxCurrentTCBConst2>)
 80081d2:	6819      	ldr	r1, [r3, #0]
 80081d4:	6808      	ldr	r0, [r1, #0]
 80081d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	f380 8809 	msr	PSP, r0
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8811 	msr	BASEPRI, r0
 80081ea:	4770      	bx	lr
 80081ec:	f3af 8000 	nop.w

080081f0 <pxCurrentTCBConst2>:
 80081f0:	20001b70 	.word	0x20001b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081f8:	4808      	ldr	r0, [pc, #32]	; (800821c <prvPortStartFirstTask+0x24>)
 80081fa:	6800      	ldr	r0, [r0, #0]
 80081fc:	6800      	ldr	r0, [r0, #0]
 80081fe:	f380 8808 	msr	MSP, r0
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f380 8814 	msr	CONTROL, r0
 800820a:	b662      	cpsie	i
 800820c:	b661      	cpsie	f
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	df00      	svc	0
 8008218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800821a:	bf00      	nop
 800821c:	e000ed08 	.word	0xe000ed08

08008220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008226:	4b37      	ldr	r3, [pc, #220]	; (8008304 <xPortStartScheduler+0xe4>)
 8008228:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	22ff      	movs	r2, #255	; 0xff
 8008236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008248:	b2da      	uxtb	r2, r3
 800824a:	4b2f      	ldr	r3, [pc, #188]	; (8008308 <xPortStartScheduler+0xe8>)
 800824c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800824e:	4b2f      	ldr	r3, [pc, #188]	; (800830c <xPortStartScheduler+0xec>)
 8008250:	2207      	movs	r2, #7
 8008252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008254:	e009      	b.n	800826a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008256:	4b2d      	ldr	r3, [pc, #180]	; (800830c <xPortStartScheduler+0xec>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3b01      	subs	r3, #1
 800825c:	4a2b      	ldr	r2, [pc, #172]	; (800830c <xPortStartScheduler+0xec>)
 800825e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	b2db      	uxtb	r3, r3
 8008268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008272:	2b80      	cmp	r3, #128	; 0x80
 8008274:	d0ef      	beq.n	8008256 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008276:	4b25      	ldr	r3, [pc, #148]	; (800830c <xPortStartScheduler+0xec>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f1c3 0307 	rsb	r3, r3, #7
 800827e:	2b04      	cmp	r3, #4
 8008280:	d00c      	beq.n	800829c <xPortStartScheduler+0x7c>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	b672      	cpsid	i
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	b662      	cpsie	i
 8008296:	60bb      	str	r3, [r7, #8]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800829c:	4b1b      	ldr	r3, [pc, #108]	; (800830c <xPortStartScheduler+0xec>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	4a1a      	ldr	r2, [pc, #104]	; (800830c <xPortStartScheduler+0xec>)
 80082a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082a6:	4b19      	ldr	r3, [pc, #100]	; (800830c <xPortStartScheduler+0xec>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ae:	4a17      	ldr	r2, [pc, #92]	; (800830c <xPortStartScheduler+0xec>)
 80082b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082ba:	4b15      	ldr	r3, [pc, #84]	; (8008310 <xPortStartScheduler+0xf0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a14      	ldr	r2, [pc, #80]	; (8008310 <xPortStartScheduler+0xf0>)
 80082c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082c6:	4b12      	ldr	r3, [pc, #72]	; (8008310 <xPortStartScheduler+0xf0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a11      	ldr	r2, [pc, #68]	; (8008310 <xPortStartScheduler+0xf0>)
 80082cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082d2:	f000 f8dd 	bl	8008490 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082d6:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <xPortStartScheduler+0xf4>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082dc:	f000 f8fc 	bl	80084d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082e0:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <xPortStartScheduler+0xf8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a0c      	ldr	r2, [pc, #48]	; (8008318 <xPortStartScheduler+0xf8>)
 80082e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082ec:	f7ff ff84 	bl	80081f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082f0:	f7fe ff46 	bl	8007180 <vTaskSwitchContext>
	prvTaskExitError();
 80082f4:	f7ff ff36 	bl	8008164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	e000e400 	.word	0xe000e400
 8008308:	2000219c 	.word	0x2000219c
 800830c:	200021a0 	.word	0x200021a0
 8008310:	e000ed20 	.word	0xe000ed20
 8008314:	2000000c 	.word	0x2000000c
 8008318:	e000ef34 	.word	0xe000ef34

0800831c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	b672      	cpsid	i
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	b662      	cpsie	i
 8008336:	607b      	str	r3, [r7, #4]
}
 8008338:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <vPortEnterCritical+0x60>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3301      	adds	r3, #1
 8008340:	4a0e      	ldr	r2, [pc, #56]	; (800837c <vPortEnterCritical+0x60>)
 8008342:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008344:	4b0d      	ldr	r3, [pc, #52]	; (800837c <vPortEnterCritical+0x60>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d111      	bne.n	8008370 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800834c:	4b0c      	ldr	r3, [pc, #48]	; (8008380 <vPortEnterCritical+0x64>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00c      	beq.n	8008370 <vPortEnterCritical+0x54>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	b672      	cpsid	i
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	b662      	cpsie	i
 800836a:	603b      	str	r3, [r7, #0]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <vPortEnterCritical+0x52>
	}
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	2000000c 	.word	0x2000000c
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800838a:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <vPortExitCritical+0x54>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10c      	bne.n	80083ac <vPortExitCritical+0x28>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	b672      	cpsid	i
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	b662      	cpsie	i
 80083a6:	607b      	str	r3, [r7, #4]
}
 80083a8:	bf00      	nop
 80083aa:	e7fe      	b.n	80083aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <vPortExitCritical+0x54>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	4a09      	ldr	r2, [pc, #36]	; (80083d8 <vPortExitCritical+0x54>)
 80083b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083b6:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <vPortExitCritical+0x54>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d105      	bne.n	80083ca <vPortExitCritical+0x46>
 80083be:	2300      	movs	r3, #0
 80083c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f383 8811 	msr	BASEPRI, r3
}
 80083c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	2000000c 	.word	0x2000000c
 80083dc:	00000000 	.word	0x00000000

080083e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083e0:	f3ef 8009 	mrs	r0, PSP
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <pxCurrentTCBConst>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f01e 0f10 	tst.w	lr, #16
 80083f0:	bf08      	it	eq
 80083f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	6010      	str	r0, [r2, #0]
 80083fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008404:	b672      	cpsid	i
 8008406:	f380 8811 	msr	BASEPRI, r0
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	b662      	cpsie	i
 8008414:	f7fe feb4 	bl	8007180 <vTaskSwitchContext>
 8008418:	f04f 0000 	mov.w	r0, #0
 800841c:	f380 8811 	msr	BASEPRI, r0
 8008420:	bc09      	pop	{r0, r3}
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	6808      	ldr	r0, [r1, #0]
 8008426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	f01e 0f10 	tst.w	lr, #16
 800842e:	bf08      	it	eq
 8008430:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008434:	f380 8809 	msr	PSP, r0
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop

08008440 <pxCurrentTCBConst>:
 8008440:	20001b70 	.word	0x20001b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	b672      	cpsid	i
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	b662      	cpsie	i
 8008462:	607b      	str	r3, [r7, #4]
}
 8008464:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008466:	f7fe fdcf 	bl	8007008 <xTaskIncrementTick>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008470:	4b06      	ldr	r3, [pc, #24]	; (800848c <xPortSysTickHandler+0x44>)
 8008472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	2300      	movs	r3, #0
 800847a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	f383 8811 	msr	BASEPRI, r3
}
 8008482:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	e000ed04 	.word	0xe000ed04

08008490 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008494:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <vPortSetupTimerInterrupt+0x34>)
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <vPortSetupTimerInterrupt+0x38>)
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <vPortSetupTimerInterrupt+0x3c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a0a      	ldr	r2, [pc, #40]	; (80084d0 <vPortSetupTimerInterrupt+0x40>)
 80084a6:	fba2 2303 	umull	r2, r3, r2, r3
 80084aa:	099b      	lsrs	r3, r3, #6
 80084ac:	4a09      	ldr	r2, [pc, #36]	; (80084d4 <vPortSetupTimerInterrupt+0x44>)
 80084ae:	3b01      	subs	r3, #1
 80084b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <vPortSetupTimerInterrupt+0x34>)
 80084b4:	2207      	movs	r2, #7
 80084b6:	601a      	str	r2, [r3, #0]
}
 80084b8:	bf00      	nop
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	e000e010 	.word	0xe000e010
 80084c8:	e000e018 	.word	0xe000e018
 80084cc:	20000000 	.word	0x20000000
 80084d0:	10624dd3 	.word	0x10624dd3
 80084d4:	e000e014 	.word	0xe000e014

080084d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084e8 <vPortEnableVFP+0x10>
 80084dc:	6801      	ldr	r1, [r0, #0]
 80084de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084e2:	6001      	str	r1, [r0, #0]
 80084e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084e6:	bf00      	nop
 80084e8:	e000ed88 	.word	0xe000ed88

080084ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084f2:	f3ef 8305 	mrs	r3, IPSR
 80084f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b0f      	cmp	r3, #15
 80084fc:	d916      	bls.n	800852c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084fe:	4a19      	ldr	r2, [pc, #100]	; (8008564 <vPortValidateInterruptPriority+0x78>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008508:	4b17      	ldr	r3, [pc, #92]	; (8008568 <vPortValidateInterruptPriority+0x7c>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	7afa      	ldrb	r2, [r7, #11]
 800850e:	429a      	cmp	r2, r3
 8008510:	d20c      	bcs.n	800852c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	b672      	cpsid	i
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	b662      	cpsie	i
 8008526:	607b      	str	r3, [r7, #4]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <vPortValidateInterruptPriority+0x80>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008534:	4b0e      	ldr	r3, [pc, #56]	; (8008570 <vPortValidateInterruptPriority+0x84>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d90c      	bls.n	8008556 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	b672      	cpsid	i
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	b662      	cpsie	i
 8008550:	603b      	str	r3, [r7, #0]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <vPortValidateInterruptPriority+0x68>
	}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	e000e3f0 	.word	0xe000e3f0
 8008568:	2000219c 	.word	0x2000219c
 800856c:	e000ed0c 	.word	0xe000ed0c
 8008570:	200021a0 	.word	0x200021a0

08008574 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008580:	f7fe fc72 	bl	8006e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008584:	4b5b      	ldr	r3, [pc, #364]	; (80086f4 <pvPortMalloc+0x180>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800858c:	f000 f91a 	bl	80087c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008590:	4b59      	ldr	r3, [pc, #356]	; (80086f8 <pvPortMalloc+0x184>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4013      	ands	r3, r2
 8008598:	2b00      	cmp	r3, #0
 800859a:	f040 8092 	bne.w	80086c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01f      	beq.n	80085e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80085a4:	2208      	movs	r2, #8
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4413      	add	r3, r2
 80085aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d016      	beq.n	80085e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f023 0307 	bic.w	r3, r3, #7
 80085bc:	3308      	adds	r3, #8
 80085be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <pvPortMalloc+0x70>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	b672      	cpsid	i
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	b662      	cpsie	i
 80085de:	617b      	str	r3, [r7, #20]
}
 80085e0:	bf00      	nop
 80085e2:	e7fe      	b.n	80085e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d06b      	beq.n	80086c2 <pvPortMalloc+0x14e>
 80085ea:	4b44      	ldr	r3, [pc, #272]	; (80086fc <pvPortMalloc+0x188>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d866      	bhi.n	80086c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80085f4:	4b42      	ldr	r3, [pc, #264]	; (8008700 <pvPortMalloc+0x18c>)
 80085f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80085f8:	4b41      	ldr	r3, [pc, #260]	; (8008700 <pvPortMalloc+0x18c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085fe:	e004      	b.n	800860a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	429a      	cmp	r2, r3
 8008612:	d903      	bls.n	800861c <pvPortMalloc+0xa8>
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1f1      	bne.n	8008600 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800861c:	4b35      	ldr	r3, [pc, #212]	; (80086f4 <pvPortMalloc+0x180>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	429a      	cmp	r2, r3
 8008624:	d04d      	beq.n	80086c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2208      	movs	r2, #8
 800862c:	4413      	add	r3, r2
 800862e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	2308      	movs	r3, #8
 8008642:	005b      	lsls	r3, r3, #1
 8008644:	429a      	cmp	r2, r3
 8008646:	d921      	bls.n	800868c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00c      	beq.n	8008674 <pvPortMalloc+0x100>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	b672      	cpsid	i
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	b662      	cpsie	i
 800866e:	613b      	str	r3, [r7, #16]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	1ad2      	subs	r2, r2, r3
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008686:	69b8      	ldr	r0, [r7, #24]
 8008688:	f000 f8fe 	bl	8008888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800868c:	4b1b      	ldr	r3, [pc, #108]	; (80086fc <pvPortMalloc+0x188>)
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	4a19      	ldr	r2, [pc, #100]	; (80086fc <pvPortMalloc+0x188>)
 8008698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800869a:	4b18      	ldr	r3, [pc, #96]	; (80086fc <pvPortMalloc+0x188>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4b19      	ldr	r3, [pc, #100]	; (8008704 <pvPortMalloc+0x190>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d203      	bcs.n	80086ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086a6:	4b15      	ldr	r3, [pc, #84]	; (80086fc <pvPortMalloc+0x188>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a16      	ldr	r2, [pc, #88]	; (8008704 <pvPortMalloc+0x190>)
 80086ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <pvPortMalloc+0x184>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	431a      	orrs	r2, r3
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086c2:	f7fe fbdf 	bl	8006e84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00c      	beq.n	80086ea <pvPortMalloc+0x176>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	b672      	cpsid	i
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	b662      	cpsie	i
 80086e4:	60fb      	str	r3, [r7, #12]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <pvPortMalloc+0x174>
	return pvReturn;
 80086ea:	69fb      	ldr	r3, [r7, #28]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3728      	adds	r7, #40	; 0x28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20005dac 	.word	0x20005dac
 80086f8:	20005db8 	.word	0x20005db8
 80086fc:	20005db0 	.word	0x20005db0
 8008700:	20005da4 	.word	0x20005da4
 8008704:	20005db4 	.word	0x20005db4

08008708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d04c      	beq.n	80087b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800871a:	2308      	movs	r3, #8
 800871c:	425b      	negs	r3, r3
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	4413      	add	r3, r2
 8008722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	4b23      	ldr	r3, [pc, #140]	; (80087bc <vPortFree+0xb4>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4013      	ands	r3, r2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10c      	bne.n	8008750 <vPortFree+0x48>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	b672      	cpsid	i
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	b662      	cpsie	i
 800874a:	60fb      	str	r3, [r7, #12]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00c      	beq.n	8008772 <vPortFree+0x6a>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	b672      	cpsid	i
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	b662      	cpsie	i
 800876c:	60bb      	str	r3, [r7, #8]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	4b11      	ldr	r3, [pc, #68]	; (80087bc <vPortFree+0xb4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d019      	beq.n	80087b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d115      	bne.n	80087b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <vPortFree+0xb4>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	43db      	mvns	r3, r3
 8008792:	401a      	ands	r2, r3
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008798:	f7fe fb66 	bl	8006e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <vPortFree+0xb8>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4413      	add	r3, r2
 80087a6:	4a06      	ldr	r2, [pc, #24]	; (80087c0 <vPortFree+0xb8>)
 80087a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087aa:	6938      	ldr	r0, [r7, #16]
 80087ac:	f000 f86c 	bl	8008888 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087b0:	f7fe fb68 	bl	8006e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087b4:	bf00      	nop
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20005db8 	.word	0x20005db8
 80087c0:	20005db0 	.word	0x20005db0

080087c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087d0:	4b27      	ldr	r3, [pc, #156]	; (8008870 <prvHeapInit+0xac>)
 80087d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00c      	beq.n	80087f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3307      	adds	r3, #7
 80087e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <prvHeapInit+0xac>)
 80087f4:	4413      	add	r3, r2
 80087f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087fc:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <prvHeapInit+0xb0>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <prvHeapInit+0xb0>)
 8008804:	2200      	movs	r2, #0
 8008806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	4413      	add	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008810:	2208      	movs	r2, #8
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0307 	bic.w	r3, r3, #7
 800881e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a15      	ldr	r2, [pc, #84]	; (8008878 <prvHeapInit+0xb4>)
 8008824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <prvHeapInit+0xb4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800882e:	4b12      	ldr	r3, [pc, #72]	; (8008878 <prvHeapInit+0xb4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008844:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvHeapInit+0xb4>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <prvHeapInit+0xb8>)
 8008852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <prvHeapInit+0xbc>)
 800885a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <prvHeapInit+0xc0>)
 800885e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	200021a4 	.word	0x200021a4
 8008874:	20005da4 	.word	0x20005da4
 8008878:	20005dac 	.word	0x20005dac
 800887c:	20005db4 	.word	0x20005db4
 8008880:	20005db0 	.word	0x20005db0
 8008884:	20005db8 	.word	0x20005db8

08008888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008890:	4b28      	ldr	r3, [pc, #160]	; (8008934 <prvInsertBlockIntoFreeList+0xac>)
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e002      	b.n	800889c <prvInsertBlockIntoFreeList+0x14>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d8f7      	bhi.n	8008896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4413      	add	r3, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d108      	bne.n	80088ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	441a      	add	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	441a      	add	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d118      	bne.n	8008910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b15      	ldr	r3, [pc, #84]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d00d      	beq.n	8008906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	441a      	add	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e008      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e003      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d002      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20005da4 	.word	0x20005da4
 8008938:	20005dac 	.word	0x20005dac

0800893c <memset>:
 800893c:	4402      	add	r2, r0
 800893e:	4603      	mov	r3, r0
 8008940:	4293      	cmp	r3, r2
 8008942:	d100      	bne.n	8008946 <memset+0xa>
 8008944:	4770      	bx	lr
 8008946:	f803 1b01 	strb.w	r1, [r3], #1
 800894a:	e7f9      	b.n	8008940 <memset+0x4>

0800894c <_reclaim_reent>:
 800894c:	4b29      	ldr	r3, [pc, #164]	; (80089f4 <_reclaim_reent+0xa8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4283      	cmp	r3, r0
 8008952:	b570      	push	{r4, r5, r6, lr}
 8008954:	4604      	mov	r4, r0
 8008956:	d04b      	beq.n	80089f0 <_reclaim_reent+0xa4>
 8008958:	69c3      	ldr	r3, [r0, #28]
 800895a:	b143      	cbz	r3, 800896e <_reclaim_reent+0x22>
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d144      	bne.n	80089ec <_reclaim_reent+0xa0>
 8008962:	69e3      	ldr	r3, [r4, #28]
 8008964:	6819      	ldr	r1, [r3, #0]
 8008966:	b111      	cbz	r1, 800896e <_reclaim_reent+0x22>
 8008968:	4620      	mov	r0, r4
 800896a:	f000 f879 	bl	8008a60 <_free_r>
 800896e:	6961      	ldr	r1, [r4, #20]
 8008970:	b111      	cbz	r1, 8008978 <_reclaim_reent+0x2c>
 8008972:	4620      	mov	r0, r4
 8008974:	f000 f874 	bl	8008a60 <_free_r>
 8008978:	69e1      	ldr	r1, [r4, #28]
 800897a:	b111      	cbz	r1, 8008982 <_reclaim_reent+0x36>
 800897c:	4620      	mov	r0, r4
 800897e:	f000 f86f 	bl	8008a60 <_free_r>
 8008982:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008984:	b111      	cbz	r1, 800898c <_reclaim_reent+0x40>
 8008986:	4620      	mov	r0, r4
 8008988:	f000 f86a 	bl	8008a60 <_free_r>
 800898c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800898e:	b111      	cbz	r1, 8008996 <_reclaim_reent+0x4a>
 8008990:	4620      	mov	r0, r4
 8008992:	f000 f865 	bl	8008a60 <_free_r>
 8008996:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008998:	b111      	cbz	r1, 80089a0 <_reclaim_reent+0x54>
 800899a:	4620      	mov	r0, r4
 800899c:	f000 f860 	bl	8008a60 <_free_r>
 80089a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80089a2:	b111      	cbz	r1, 80089aa <_reclaim_reent+0x5e>
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 f85b 	bl	8008a60 <_free_r>
 80089aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80089ac:	b111      	cbz	r1, 80089b4 <_reclaim_reent+0x68>
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 f856 	bl	8008a60 <_free_r>
 80089b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80089b6:	b111      	cbz	r1, 80089be <_reclaim_reent+0x72>
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 f851 	bl	8008a60 <_free_r>
 80089be:	6a23      	ldr	r3, [r4, #32]
 80089c0:	b1b3      	cbz	r3, 80089f0 <_reclaim_reent+0xa4>
 80089c2:	4620      	mov	r0, r4
 80089c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089c8:	4718      	bx	r3
 80089ca:	5949      	ldr	r1, [r1, r5]
 80089cc:	b941      	cbnz	r1, 80089e0 <_reclaim_reent+0x94>
 80089ce:	3504      	adds	r5, #4
 80089d0:	69e3      	ldr	r3, [r4, #28]
 80089d2:	2d80      	cmp	r5, #128	; 0x80
 80089d4:	68d9      	ldr	r1, [r3, #12]
 80089d6:	d1f8      	bne.n	80089ca <_reclaim_reent+0x7e>
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 f841 	bl	8008a60 <_free_r>
 80089de:	e7c0      	b.n	8008962 <_reclaim_reent+0x16>
 80089e0:	680e      	ldr	r6, [r1, #0]
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 f83c 	bl	8008a60 <_free_r>
 80089e8:	4631      	mov	r1, r6
 80089ea:	e7ef      	b.n	80089cc <_reclaim_reent+0x80>
 80089ec:	2500      	movs	r5, #0
 80089ee:	e7ef      	b.n	80089d0 <_reclaim_reent+0x84>
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
 80089f2:	bf00      	nop
 80089f4:	2000005c 	.word	0x2000005c

080089f8 <__libc_init_array>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4d0d      	ldr	r5, [pc, #52]	; (8008a30 <__libc_init_array+0x38>)
 80089fc:	4c0d      	ldr	r4, [pc, #52]	; (8008a34 <__libc_init_array+0x3c>)
 80089fe:	1b64      	subs	r4, r4, r5
 8008a00:	10a4      	asrs	r4, r4, #2
 8008a02:	2600      	movs	r6, #0
 8008a04:	42a6      	cmp	r6, r4
 8008a06:	d109      	bne.n	8008a1c <__libc_init_array+0x24>
 8008a08:	4d0b      	ldr	r5, [pc, #44]	; (8008a38 <__libc_init_array+0x40>)
 8008a0a:	4c0c      	ldr	r4, [pc, #48]	; (8008a3c <__libc_init_array+0x44>)
 8008a0c:	f000 f880 	bl	8008b10 <_init>
 8008a10:	1b64      	subs	r4, r4, r5
 8008a12:	10a4      	asrs	r4, r4, #2
 8008a14:	2600      	movs	r6, #0
 8008a16:	42a6      	cmp	r6, r4
 8008a18:	d105      	bne.n	8008a26 <__libc_init_array+0x2e>
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a20:	4798      	blx	r3
 8008a22:	3601      	adds	r6, #1
 8008a24:	e7ee      	b.n	8008a04 <__libc_init_array+0xc>
 8008a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2a:	4798      	blx	r3
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	e7f2      	b.n	8008a16 <__libc_init_array+0x1e>
 8008a30:	08008cdc 	.word	0x08008cdc
 8008a34:	08008cdc 	.word	0x08008cdc
 8008a38:	08008cdc 	.word	0x08008cdc
 8008a3c:	08008ce0 	.word	0x08008ce0

08008a40 <__retarget_lock_acquire_recursive>:
 8008a40:	4770      	bx	lr

08008a42 <__retarget_lock_release_recursive>:
 8008a42:	4770      	bx	lr

08008a44 <memcpy>:
 8008a44:	440a      	add	r2, r1
 8008a46:	4291      	cmp	r1, r2
 8008a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a4c:	d100      	bne.n	8008a50 <memcpy+0xc>
 8008a4e:	4770      	bx	lr
 8008a50:	b510      	push	{r4, lr}
 8008a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	d1f9      	bne.n	8008a52 <memcpy+0xe>
 8008a5e:	bd10      	pop	{r4, pc}

08008a60 <_free_r>:
 8008a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a62:	2900      	cmp	r1, #0
 8008a64:	d044      	beq.n	8008af0 <_free_r+0x90>
 8008a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a6a:	9001      	str	r0, [sp, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a72:	bfb8      	it	lt
 8008a74:	18e4      	addlt	r4, r4, r3
 8008a76:	f000 f83f 	bl	8008af8 <__malloc_lock>
 8008a7a:	4a1e      	ldr	r2, [pc, #120]	; (8008af4 <_free_r+0x94>)
 8008a7c:	9801      	ldr	r0, [sp, #4]
 8008a7e:	6813      	ldr	r3, [r2, #0]
 8008a80:	b933      	cbnz	r3, 8008a90 <_free_r+0x30>
 8008a82:	6063      	str	r3, [r4, #4]
 8008a84:	6014      	str	r4, [r2, #0]
 8008a86:	b003      	add	sp, #12
 8008a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a8c:	f000 b83a 	b.w	8008b04 <__malloc_unlock>
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	d908      	bls.n	8008aa6 <_free_r+0x46>
 8008a94:	6825      	ldr	r5, [r4, #0]
 8008a96:	1961      	adds	r1, r4, r5
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	bf01      	itttt	eq
 8008a9c:	6819      	ldreq	r1, [r3, #0]
 8008a9e:	685b      	ldreq	r3, [r3, #4]
 8008aa0:	1949      	addeq	r1, r1, r5
 8008aa2:	6021      	streq	r1, [r4, #0]
 8008aa4:	e7ed      	b.n	8008a82 <_free_r+0x22>
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	b10b      	cbz	r3, 8008ab0 <_free_r+0x50>
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	d9fa      	bls.n	8008aa6 <_free_r+0x46>
 8008ab0:	6811      	ldr	r1, [r2, #0]
 8008ab2:	1855      	adds	r5, r2, r1
 8008ab4:	42a5      	cmp	r5, r4
 8008ab6:	d10b      	bne.n	8008ad0 <_free_r+0x70>
 8008ab8:	6824      	ldr	r4, [r4, #0]
 8008aba:	4421      	add	r1, r4
 8008abc:	1854      	adds	r4, r2, r1
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	6011      	str	r1, [r2, #0]
 8008ac2:	d1e0      	bne.n	8008a86 <_free_r+0x26>
 8008ac4:	681c      	ldr	r4, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	6053      	str	r3, [r2, #4]
 8008aca:	440c      	add	r4, r1
 8008acc:	6014      	str	r4, [r2, #0]
 8008ace:	e7da      	b.n	8008a86 <_free_r+0x26>
 8008ad0:	d902      	bls.n	8008ad8 <_free_r+0x78>
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	6003      	str	r3, [r0, #0]
 8008ad6:	e7d6      	b.n	8008a86 <_free_r+0x26>
 8008ad8:	6825      	ldr	r5, [r4, #0]
 8008ada:	1961      	adds	r1, r4, r5
 8008adc:	428b      	cmp	r3, r1
 8008ade:	bf04      	itt	eq
 8008ae0:	6819      	ldreq	r1, [r3, #0]
 8008ae2:	685b      	ldreq	r3, [r3, #4]
 8008ae4:	6063      	str	r3, [r4, #4]
 8008ae6:	bf04      	itt	eq
 8008ae8:	1949      	addeq	r1, r1, r5
 8008aea:	6021      	streq	r1, [r4, #0]
 8008aec:	6054      	str	r4, [r2, #4]
 8008aee:	e7ca      	b.n	8008a86 <_free_r+0x26>
 8008af0:	b003      	add	sp, #12
 8008af2:	bd30      	pop	{r4, r5, pc}
 8008af4:	20005ef8 	.word	0x20005ef8

08008af8 <__malloc_lock>:
 8008af8:	4801      	ldr	r0, [pc, #4]	; (8008b00 <__malloc_lock+0x8>)
 8008afa:	f7ff bfa1 	b.w	8008a40 <__retarget_lock_acquire_recursive>
 8008afe:	bf00      	nop
 8008b00:	20005ef4 	.word	0x20005ef4

08008b04 <__malloc_unlock>:
 8008b04:	4801      	ldr	r0, [pc, #4]	; (8008b0c <__malloc_unlock+0x8>)
 8008b06:	f7ff bf9c 	b.w	8008a42 <__retarget_lock_release_recursive>
 8008b0a:	bf00      	nop
 8008b0c:	20005ef4 	.word	0x20005ef4

08008b10 <_init>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr

08008b1c <_fini>:
 8008b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1e:	bf00      	nop
 8008b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b22:	bc08      	pop	{r3}
 8008b24:	469e      	mov	lr, r3
 8008b26:	4770      	bx	lr
