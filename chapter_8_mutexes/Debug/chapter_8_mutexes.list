
chapter_8_mutexes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a40  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006c40  08006c40  00016c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d00  08006d00  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d08  08006d08  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08006d84  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08006e24  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000050b4  200001b4  08006ec4  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005268  08006ec4  00025268  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dab8  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003816  00000000  00000000  0003dc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001478  00000000  00000000  000414b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001330  00000000  00000000  00042928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003cd0  00000000  00000000  00043c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017a55  00000000  00000000  00047928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103931  00000000  00000000  0005f37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00162cae  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000058d4  00000000  00000000  00162d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006c28 	.word	0x08006c28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08006c28 	.word	0x08006c28

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fc22 	bl	8000d92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f839 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f955 	bl	8000800 <MX_GPIO_Init>
  MX_ETH_Init();
 8000556:	f000 f8a7 	bl	80006a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800055a:	f000 f8f3 	bl	8000744 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055e:	f000 f921 	bl	80007a4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  int z = 5;
 8000562:	2305      	movs	r3, #5
 8000564:	607b      	str	r3, [r7, #4]
  for(z = 1; z < 5; ++z)
 8000566:	2301      	movs	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e012      	b.n	8000592 <main+0x4e>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	4810      	ldr	r0, [pc, #64]	; (80005b4 <main+0x70>)
 8000572:	f001 fa47 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000576:	2064      	movs	r0, #100	; 0x64
 8000578:	f000 fc68 	bl	8000e4c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <main+0x70>)
 8000582:	f001 fa3f 	bl	8001a04 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000586:	2064      	movs	r0, #100	; 0x64
 8000588:	f000 fc60 	bl	8000e4c <HAL_Delay>
  for(z = 1; z < 5; ++z)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3301      	adds	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b04      	cmp	r3, #4
 8000596:	dde9      	ble.n	800056c <main+0x28>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000598:	f003 fc56 	bl	8003e48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <main+0x74>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <main+0x78>)
 80005a2:	f003 fcbb 	bl	8003f1c <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <main+0x7c>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f003 fc80 	bl	8003eb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x6c>
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400
 80005b8:	08006c64 	.word	0x08006c64
 80005bc:	08000945 	.word	0x08000945
 80005c0:	20000848 	.word	0x20000848

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2234      	movs	r2, #52	; 0x34
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 fa5e 	bl	8006a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e8:	f001 fb6e 	bl	8001cc8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <SystemClock_Config+0xdc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <SystemClock_Config+0xdc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemClock_Config+0xdc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000604:	4b27      	ldr	r3, [pc, #156]	; (80006a4 <SystemClock_Config+0xe0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800060c:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <SystemClock_Config+0xe0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <SystemClock_Config+0xe0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000628:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000638:	2360      	movs	r3, #96	; 0x60
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fb9b 	bl	8001d88 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000658:	f000 f97c 	bl	8000954 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800065c:	f001 fb44 	bl	8001ce8 <HAL_PWREx_EnableOverDrive>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000666:	f000 f975 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2103      	movs	r1, #3
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fe2c 	bl	80022e4 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000692:	f000 f95f 	bl	8000954 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ETH_Init+0x84>)
 80006ae:	4a20      	ldr	r2, [pc, #128]	; (8000730 <MX_ETH_Init+0x88>)
 80006b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_ETH_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_ETH_Init+0x8c>)
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_ETH_Init+0x8c>)
 80006c0:	22e1      	movs	r2, #225	; 0xe1
 80006c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_ETH_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_ETH_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_ETH_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_ETH_Init+0x84>)
 80006d8:	4a16      	ldr	r2, [pc, #88]	; (8000734 <MX_ETH_Init+0x8c>)
 80006da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ETH_Init+0x84>)
 80006de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_ETH_Init+0x84>)
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <MX_ETH_Init+0x90>)
 80006e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_ETH_Init+0x84>)
 80006ec:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_ETH_Init+0x94>)
 80006ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_ETH_Init+0x84>)
 80006f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_ETH_Init+0x84>)
 80006fa:	f000 fcb1 	bl	8001060 <HAL_ETH_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f926 	bl	8000954 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000708:	2238      	movs	r2, #56	; 0x38
 800070a:	2100      	movs	r1, #0
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_ETH_Init+0x98>)
 800070e:	f006 f9c1 	bl	8006a94 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_ETH_Init+0x98>)
 8000714:	2221      	movs	r2, #33	; 0x21
 8000716:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_ETH_Init+0x98>)
 800071a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800071e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_ETH_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000208 	.word	0x20000208
 8000730:	40028000 	.word	0x40028000
 8000734:	2000084c 	.word	0x2000084c
 8000738:	20000114 	.word	0x20000114
 800073c:	20000074 	.word	0x20000074
 8000740:	200001d0 	.word	0x200001d0

08000744 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART3_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART3_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART3_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART3_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART3_UART_Init+0x58>)
 8000788:	f002 fbfa 	bl	8002f80 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f8df 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200002b8 	.word	0x200002b8
 80007a0:	40004800 	.word	0x40004800

080007a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2206      	movs	r2, #6
 80007b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2201      	movs	r2, #1
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	f001 f925 	bl	8001a36 <HAL_PCD_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f8af 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000340 	.word	0x20000340

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <MX_GPIO_Init+0x134>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a46      	ldr	r2, [pc, #280]	; (8000934 <MX_GPIO_Init+0x134>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b44      	ldr	r3, [pc, #272]	; (8000934 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a40      	ldr	r2, [pc, #256]	; (8000934 <MX_GPIO_Init+0x134>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b3b      	ldr	r3, [pc, #236]	; (8000934 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a3a      	ldr	r2, [pc, #232]	; (8000934 <MX_GPIO_Init+0x134>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b38      	ldr	r3, [pc, #224]	; (8000934 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b35      	ldr	r3, [pc, #212]	; (8000934 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a34      	ldr	r2, [pc, #208]	; (8000934 <MX_GPIO_Init+0x134>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a2e      	ldr	r2, [pc, #184]	; (8000934 <MX_GPIO_Init+0x134>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a28      	ldr	r2, [pc, #160]	; (8000934 <MX_GPIO_Init+0x134>)
 8000894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008ac:	4822      	ldr	r0, [pc, #136]	; (8000938 <MX_GPIO_Init+0x138>)
 80008ae:	f001 f8a9 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	4821      	ldr	r0, [pc, #132]	; (800093c <MX_GPIO_Init+0x13c>)
 80008b8:	f001 f8a4 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	481b      	ldr	r0, [pc, #108]	; (8000940 <MX_GPIO_Init+0x140>)
 80008d4:	f000 feea 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_GPIO_Init+0x138>)
 80008f2:	f000 fedb 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <MX_GPIO_Init+0x13c>)
 800090e:	f000 fecd 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_GPIO_Init+0x13c>)
 8000926:	f000 fec1 	bl	80016ac <HAL_GPIO_Init>

}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400
 800093c:	40021800 	.word	0x40021800
 8000940:	40020800 	.word	0x40020800

08000944 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f003 fb8b 	bl	8004068 <osDelay>
 8000952:	e7fb      	b.n	800094c <StartDefaultTask+0x8>

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	f06f 0001 	mvn.w	r0, #1
 800099e:	f000 fb36 	bl	800100e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <HAL_ETH_MspInit+0x158>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	f040 8096 	bne.w	8000b00 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a4c      	ldr	r2, [pc, #304]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
 80009e0:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e8:	623b      	str	r3, [r7, #32]
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
 80009f8:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1c:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a34      	ldr	r2, [pc, #208]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a7c:	2332      	movs	r3, #50	; 0x32
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8c:	230b      	movs	r3, #11
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	481e      	ldr	r0, [pc, #120]	; (8000b10 <HAL_ETH_MspInit+0x160>)
 8000a98:	f000 fe08 	bl	80016ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a9c:	2386      	movs	r3, #134	; 0x86
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aac:	230b      	movs	r3, #11
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4817      	ldr	r0, [pc, #92]	; (8000b14 <HAL_ETH_MspInit+0x164>)
 8000ab8:	f000 fdf8 	bl	80016ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ace:	230b      	movs	r3, #11
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480f      	ldr	r0, [pc, #60]	; (8000b18 <HAL_ETH_MspInit+0x168>)
 8000ada:	f000 fde7 	bl	80016ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ade:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <HAL_ETH_MspInit+0x16c>)
 8000afc:	f000 fdd6 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3738      	adds	r7, #56	; 0x38
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40028000 	.word	0x40028000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40021800 	.word	0x40021800

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0ae      	sub	sp, #184	; 0xb8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2290      	movs	r2, #144	; 0x90
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 ffa7 	bl	8006a94 <memset>
  if(huart->Instance==USART3)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <HAL_UART_MspInit+0xb4>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d13c      	bne.n	8000bca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 fde6 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b6a:	f7ff fef3 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_UART_MspInit+0xb8>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_UART_MspInit+0xb8>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0xb8>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_UART_MspInit+0xb8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <HAL_UART_MspInit+0xb8>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_UART_MspInit+0xb8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bbe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_UART_MspInit+0xbc>)
 8000bc6:	f000 fd71 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	37b8      	adds	r7, #184	; 0xb8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40004800 	.word	0x40004800
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020c00 	.word	0x40020c00

08000be0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0ae      	sub	sp, #184	; 0xb8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2290      	movs	r2, #144	; 0x90
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 ff47 	bl	8006a94 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c0e:	d159      	bne.n	8000cc4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fd85 	bl	8002730 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c2c:	f7ff fe92 	bl	8000954 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <HAL_PCD_MspInit+0xec>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <HAL_PCD_MspInit+0xec>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <HAL_PCD_MspInit+0xec>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c48:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c62:	230a      	movs	r3, #10
 8000c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <HAL_PCD_MspInit+0xf0>)
 8000c70:	f000 fd1c 	bl	80016ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4810      	ldr	r0, [pc, #64]	; (8000cd0 <HAL_PCD_MspInit+0xf0>)
 8000c90:	f000 fd0c 	bl	80016ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_PCD_MspInit+0xec>)
 8000c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <HAL_PCD_MspInit+0xec>)
 8000c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9e:	6353      	str	r3, [r2, #52]	; 0x34
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_PCD_MspInit+0xec>)
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_PCD_MspInit+0xec>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_PCD_MspInit+0xec>)
 8000cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <HAL_PCD_MspInit+0xec>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	37b8      	adds	r7, #184	; 0xb8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f882 	bl	8000e0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d08:	f004 fe36 	bl	8005978 <xTaskGetSchedulerState>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d001      	beq.n	8000d16 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d12:	f005 fc11 	bl	8006538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d46:	490e      	ldr	r1, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d5c:	4c0b      	ldr	r4, [pc, #44]	; (8000d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6a:	f7ff ffd7 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f005 fe5d 	bl	8006a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fbe7 	bl	8000544 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d84:	08006d10 	.word	0x08006d10
  ldr r2, =_sbss
 8000d88:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8000d8c:	20005268 	.word	0x20005268

08000d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>

08000d92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f000 f92e 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9c:	200f      	movs	r0, #15
 8000d9e:	f000 f805 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da2:	f7ff fddd 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f93b 	bl	8001046 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f911 	bl	800100e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000854 	.word	0x20000854

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000854 	.word	0x20000854

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff ffee 	bl	8000e34 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e72:	bf00      	nop
 8000e74:	f7ff ffde 	bl	8000e34 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000008 	.word	0x20000008

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	05fa0000 	.word	0x05fa0000

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff47 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff5c 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff8e 	bl	8000f4c <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffb0 	bl	8000fb4 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e06a      	b.n	8001148 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001078:	2b00      	cmp	r3, #0
 800107a:	d106      	bne.n	800108a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2223      	movs	r2, #35	; 0x23
 8001080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff fc93 	bl	80009b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_ETH_Init+0xf0>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a30      	ldr	r2, [pc, #192]	; (8001150 <HAL_ETH_Init+0xf0>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <HAL_ETH_Init+0xf0>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010a2:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <HAL_ETH_Init+0xf4>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <HAL_ETH_Init+0xf4>)
 80010a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <HAL_ETH_Init+0xf4>)
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	4927      	ldr	r1, [pc, #156]	; (8001154 <HAL_ETH_Init+0xf4>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <HAL_ETH_Init+0xf4>)
 80010be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80010d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d8:	f7ff feac 	bl	8000e34 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010de:	e011      	b.n	8001104 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010e0:	f7ff fea8 	bl	8000e34 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010ee:	d909      	bls.n	8001104 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2204      	movs	r2, #4
 80010f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	22e0      	movs	r2, #224	; 0xe0
 80010fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e021      	b.n	8001148 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1e4      	bne.n	80010e0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f958 	bl	80013cc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f9ff 	bl	8001520 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 fa55 	bl	80015d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	461a      	mov	r2, r3
 800112e:	2100      	movs	r1, #0
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f9bd 	bl	80014b0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2210      	movs	r2, #16
 8001142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40013800 	.word	0x40013800

08001158 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <ETH_SetMACConfig+0x15c>)
 800116e:	4013      	ands	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	7c1b      	ldrb	r3, [r3, #16]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <ETH_SetMACConfig+0x28>
 800117a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800117e:	e000      	b.n	8001182 <ETH_SetMACConfig+0x2a>
 8001180:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	7c5b      	ldrb	r3, [r3, #17]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <ETH_SetMACConfig+0x38>
 800118a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800118e:	e000      	b.n	8001192 <ETH_SetMACConfig+0x3a>
 8001190:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001192:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001198:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	7fdb      	ldrb	r3, [r3, #31]
 800119e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80011a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	7f92      	ldrb	r2, [r2, #30]
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d102      	bne.n	80011b6 <ETH_SetMACConfig+0x5e>
 80011b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b4:	e000      	b.n	80011b8 <ETH_SetMACConfig+0x60>
 80011b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80011b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	7f1b      	ldrb	r3, [r3, #28]
 80011be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80011ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d102      	bne.n	80011e0 <ETH_SetMACConfig+0x88>
 80011da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011de:	e000      	b.n	80011e2 <ETH_SetMACConfig+0x8a>
 80011e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80011e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	7bdb      	ldrb	r3, [r3, #15]
 80011e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80011ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011fa:	4313      	orrs	r3, r2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff fe1a 	bl	8000e4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800122e:	4013      	ands	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001236:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800123e:	2a00      	cmp	r2, #0
 8001240:	d101      	bne.n	8001246 <ETH_SetMACConfig+0xee>
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	e000      	b.n	8001248 <ETH_SetMACConfig+0xf0>
 8001246:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001248:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800124e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001256:	2a01      	cmp	r2, #1
 8001258:	d101      	bne.n	800125e <ETH_SetMACConfig+0x106>
 800125a:	2208      	movs	r2, #8
 800125c:	e000      	b.n	8001260 <ETH_SetMACConfig+0x108>
 800125e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001260:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001268:	2a01      	cmp	r2, #1
 800126a:	d101      	bne.n	8001270 <ETH_SetMACConfig+0x118>
 800126c:	2204      	movs	r2, #4
 800126e:	e000      	b.n	8001272 <ETH_SetMACConfig+0x11a>
 8001270:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001272:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800127a:	2a01      	cmp	r2, #1
 800127c:	d101      	bne.n	8001282 <ETH_SetMACConfig+0x12a>
 800127e:	2202      	movs	r2, #2
 8001280:	e000      	b.n	8001284 <ETH_SetMACConfig+0x12c>
 8001282:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001284:	4313      	orrs	r3, r2
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff fdd5 	bl	8000e4c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	ff20810f 	.word	0xff20810f

080012b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <ETH_SetDMAConfig+0x110>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <ETH_SetDMAConfig+0x2c>
 80012de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012e2:	e000      	b.n	80012e6 <ETH_SetDMAConfig+0x2e>
 80012e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	7b5b      	ldrb	r3, [r3, #13]
 80012ea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012ec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	7f52      	ldrb	r2, [r2, #29]
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d102      	bne.n	80012fc <ETH_SetDMAConfig+0x44>
 80012f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012fa:	e000      	b.n	80012fe <ETH_SetDMAConfig+0x46>
 80012fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80012fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	7b9b      	ldrb	r3, [r3, #14]
 8001304:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001306:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800130c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	7f1b      	ldrb	r3, [r3, #28]
 8001312:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001314:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	7f9b      	ldrb	r3, [r3, #30]
 800131a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800131c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001322:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800132a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800132c:	4313      	orrs	r3, r2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133c:	461a      	mov	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fd7c 	bl	8000e4c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135c:	461a      	mov	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	791b      	ldrb	r3, [r3, #4]
 8001366:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800136c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001372:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001378:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001380:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001382:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800138a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001390:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800139a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800139e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff fd4d 	bl	8000e4c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	f8de3f23 	.word	0xf8de3f23

080013cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0a6      	sub	sp, #152	; 0x98
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80013d4:	2301      	movs	r3, #1
 80013d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80013f6:	2301      	movs	r3, #1
 80013f8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001408:	2300      	movs	r3, #0
 800140a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001412:	2300      	movs	r3, #0
 8001414:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800142e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001434:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001440:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fe86 	bl	8001158 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800144c:	2301      	movs	r3, #1
 800144e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001450:	2301      	movs	r3, #1
 8001452:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001454:	2301      	movs	r3, #1
 8001456:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800145a:	2301      	movs	r3, #1
 800145c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001472:	2301      	movs	r3, #1
 8001474:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001478:	2301      	movs	r3, #1
 800147a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800147c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001480:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001482:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001486:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800148e:	2301      	movs	r3, #1
 8001490:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001494:	2300      	movs	r3, #0
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	4619      	mov	r1, r3
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff08 	bl	80012b8 <ETH_SetDMAConfig>
}
 80014a8:	bf00      	nop
 80014aa:	3798      	adds	r7, #152	; 0x98
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3305      	adds	r3, #5
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	3204      	adds	r2, #4
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <ETH_MACAddressConfig+0x68>)
 80014d2:	4413      	add	r3, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3303      	adds	r3, #3
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	061a      	lsls	r2, r3, #24
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3302      	adds	r3, #2
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3301      	adds	r3, #1
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	4313      	orrs	r3, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <ETH_MACAddressConfig+0x6c>)
 8001502:	4413      	add	r3, r2
 8001504:	461a      	mov	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	6013      	str	r3, [r2, #0]
}
 800150a:	bf00      	nop
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40028040 	.word	0x40028040
 800151c:	40028044 	.word	0x40028044

08001520 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e03e      	b.n	80015ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68d9      	ldr	r1, [r3, #12]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	3206      	adds	r2, #6
 8001560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d80c      	bhi.n	8001590 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68d9      	ldr	r1, [r3, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	461a      	mov	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	e004      	b.n	800159a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	461a      	mov	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d9bd      	bls.n	800152e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c4:	611a      	str	r2, [r3, #16]
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e046      	b.n	800166e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6919      	ldr	r1, [r3, #16]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	440b      	add	r3, r1
 80015f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800161c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001624:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001632:	68b9      	ldr	r1, [r7, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	3212      	adds	r2, #18
 800163a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d80c      	bhi.n	800165e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6919      	ldr	r1, [r3, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	461a      	mov	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	e004      	b.n	8001668 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	461a      	mov	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d9b5      	bls.n	80015e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691a      	ldr	r2, [r3, #16]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169e:	60da      	str	r2, [r3, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e175      	b.n	80019b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016cc:	2201      	movs	r2, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 8164 	bne.w	80019b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d005      	beq.n	8001702 <HAL_GPIO_Init+0x56>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d130      	bne.n	8001764 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 0201 	and.w	r2, r3, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b03      	cmp	r3, #3
 800176e:	d017      	beq.n	80017a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d123      	bne.n	80017f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	08da      	lsrs	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3208      	adds	r2, #8
 80017b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	69b9      	ldr	r1, [r7, #24]
 80017f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80be 	beq.w	80019b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_GPIO_Init+0x324>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a65      	ldr	r2, [pc, #404]	; (80019d0 <HAL_GPIO_Init+0x324>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_GPIO_Init+0x324>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800184e:	4a61      	ldr	r2, [pc, #388]	; (80019d4 <HAL_GPIO_Init+0x328>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_GPIO_Init+0x32c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d037      	beq.n	80018ea <HAL_GPIO_Init+0x23e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a57      	ldr	r2, [pc, #348]	; (80019dc <HAL_GPIO_Init+0x330>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d031      	beq.n	80018e6 <HAL_GPIO_Init+0x23a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a56      	ldr	r2, [pc, #344]	; (80019e0 <HAL_GPIO_Init+0x334>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d02b      	beq.n	80018e2 <HAL_GPIO_Init+0x236>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a55      	ldr	r2, [pc, #340]	; (80019e4 <HAL_GPIO_Init+0x338>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d025      	beq.n	80018de <HAL_GPIO_Init+0x232>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a54      	ldr	r2, [pc, #336]	; (80019e8 <HAL_GPIO_Init+0x33c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01f      	beq.n	80018da <HAL_GPIO_Init+0x22e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a53      	ldr	r2, [pc, #332]	; (80019ec <HAL_GPIO_Init+0x340>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x22a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_GPIO_Init+0x344>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x226>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a51      	ldr	r2, [pc, #324]	; (80019f4 <HAL_GPIO_Init+0x348>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x222>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a50      	ldr	r2, [pc, #320]	; (80019f8 <HAL_GPIO_Init+0x34c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x21e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4f      	ldr	r2, [pc, #316]	; (80019fc <HAL_GPIO_Init+0x350>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x21a>
 80018c2:	2309      	movs	r3, #9
 80018c4:	e012      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018c6:	230a      	movs	r3, #10
 80018c8:	e010      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018ca:	2308      	movs	r3, #8
 80018cc:	e00e      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018ce:	2307      	movs	r3, #7
 80018d0:	e00c      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018d2:	2306      	movs	r3, #6
 80018d4:	e00a      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018d6:	2305      	movs	r3, #5
 80018d8:	e008      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018da:	2304      	movs	r3, #4
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018de:	2303      	movs	r3, #3
 80018e0:	e004      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018ea:	2300      	movs	r3, #0
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f002 0203 	and.w	r2, r2, #3
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	4093      	lsls	r3, r2
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018fc:	4935      	ldr	r1, [pc, #212]	; (80019d4 <HAL_GPIO_Init+0x328>)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800190a:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <HAL_GPIO_Init+0x354>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192e:	4a34      	ldr	r2, [pc, #208]	; (8001a00 <HAL_GPIO_Init+0x354>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_GPIO_Init+0x354>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001958:	4a29      	ldr	r2, [pc, #164]	; (8001a00 <HAL_GPIO_Init+0x354>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_GPIO_Init+0x354>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_GPIO_Init+0x354>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_GPIO_Init+0x354>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <HAL_GPIO_Init+0x354>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	f67f ae86 	bls.w	80016cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40013800 	.word	0x40013800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40021c00 	.word	0x40021c00
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40022400 	.word	0x40022400
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a38:	b08f      	sub	sp, #60	; 0x3c
 8001a3a:	af0a      	add	r7, sp, #40	; 0x28
 8001a3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e116      	b.n	8001c76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff f8bc 	bl	8000be0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 ff3a 	bl	8003900 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	687e      	ldr	r6, [r7, #4]
 8001a94:	466d      	mov	r5, sp
 8001a96:	f106 0410 	add.w	r4, r6, #16
 8001a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aaa:	1d33      	adds	r3, r6, #4
 8001aac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aae:	6838      	ldr	r0, [r7, #0]
 8001ab0:	f001 fece 	bl	8003850 <USB_CoreInit>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0d7      	b.n	8001c76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f001 ff28 	bl	8003922 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e04a      	b.n	8001b6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	333d      	adds	r3, #61	; 0x3d
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	333c      	adds	r3, #60	; 0x3c
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	b298      	uxth	r0, r3
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	3344      	adds	r3, #68	; 0x44
 8001b14:	4602      	mov	r2, r0
 8001b16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	3340      	adds	r3, #64	; 0x40
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	3348      	adds	r3, #72	; 0x48
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	334c      	adds	r3, #76	; 0x4c
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3354      	adds	r3, #84	; 0x54
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3af      	bcc.n	8001ad8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e044      	b.n	8001c08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	3301      	adds	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3b5      	bcc.n	8001b7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	687e      	ldr	r6, [r7, #4]
 8001c1a:	466d      	mov	r5, sp
 8001c1c:	f106 0410 	add.w	r4, r6, #16
 8001c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c30:	1d33      	adds	r3, r6, #4
 8001c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c34:	6838      	ldr	r0, [r7, #0]
 8001c36:	f001 fec1 	bl	80039bc <USB_DevInit>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e014      	b.n	8001c76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d102      	bne.n	8001c6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f80b 	bl	8001c80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 f87f 	bl	8003d72 <USB_DevDisconnect>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	10000003 	.word	0x10000003

08001cc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d16:	f7ff f88d 	bl	8000e34 <HAL_GetTick>
 8001d1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d1c:	e009      	b.n	8001d32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d1e:	f7ff f889 	bl	8000e34 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d2c:	d901      	bls.n	8001d32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e022      	b.n	8001d78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d40:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff f872 	bl	8000e34 <HAL_GetTick>
 8001d50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d52:	e009      	b.n	8001d68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d54:	f7ff f86e 	bl	8000e34 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d62:	d901      	bls.n	8001d68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e007      	b.n	8001d78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d74:	d1ee      	bne.n	8001d54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e29b      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8087 	beq.w	8001eba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dac:	4b96      	ldr	r3, [pc, #600]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d00c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db8:	4b93      	ldr	r3, [pc, #588]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d112      	bne.n	8001dea <HAL_RCC_OscConfig+0x62>
 8001dc4:	4b90      	ldr	r3, [pc, #576]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd0:	d10b      	bne.n	8001dea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd2:	4b8d      	ldr	r3, [pc, #564]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d06c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x130>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d168      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e275      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x7a>
 8001df4:	4b84      	ldr	r3, [pc, #528]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a83      	ldr	r2, [pc, #524]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e02e      	b.n	8001e60 <HAL_RCC_OscConfig+0xd8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x9c>
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7e      	ldr	r2, [pc, #504]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b7c      	ldr	r3, [pc, #496]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7b      	ldr	r2, [pc, #492]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e01d      	b.n	8001e60 <HAL_RCC_OscConfig+0xd8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0xc0>
 8001e2e:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a75      	ldr	r2, [pc, #468]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b73      	ldr	r3, [pc, #460]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a72      	ldr	r2, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0xd8>
 8001e48:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6e      	ldr	r2, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b6c      	ldr	r3, [pc, #432]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a6b      	ldr	r2, [pc, #428]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7fe ffe4 	bl	8000e34 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7fe ffe0 	bl	8000e34 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e229      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b61      	ldr	r3, [pc, #388]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe8>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe ffd0 	bl	8000e34 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7fe ffcc 	bl	8000e34 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e215      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x110>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d069      	beq.n	8001f9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec6:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed2:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x190>
 8001ede:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x17a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1e9      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	493d      	ldr	r1, [pc, #244]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	e040      	b.n	8001f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d023      	beq.n	8001f68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f20:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a38      	ldr	r2, [pc, #224]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ff82 	bl	8000e34 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f34:	f7fe ff7e 	bl	8000e34 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1c7      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4929      	ldr	r1, [pc, #164]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
 8001f66:	e018      	b.n	8001f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a26      	ldr	r2, [pc, #152]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe ff5e 	bl	8000e34 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7fe ff5a 	bl	8000e34 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1a3      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d038      	beq.n	8002018 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d019      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb2:	4a15      	ldr	r2, [pc, #84]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fba:	f7fe ff3b 	bl	8000e34 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7fe ff37 	bl	8000e34 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e180      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x23a>
 8001fe0:	e01a      	b.n	8002018 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7fe ff21 	bl	8000e34 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff6:	f7fe ff1d 	bl	8000e34 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d903      	bls.n	800200c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e166      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
 8002008:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4b92      	ldr	r3, [pc, #584]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 800200e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ee      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a4 	beq.w	800216e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002026:	4b8c      	ldr	r3, [pc, #560]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10d      	bne.n	800204e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4b89      	ldr	r3, [pc, #548]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a88      	ldr	r2, [pc, #544]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b86      	ldr	r3, [pc, #536]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204a:	2301      	movs	r3, #1
 800204c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204e:	4b83      	ldr	r3, [pc, #524]	; (800225c <HAL_RCC_OscConfig+0x4d4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d118      	bne.n	800208c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800205a:	4b80      	ldr	r3, [pc, #512]	; (800225c <HAL_RCC_OscConfig+0x4d4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7f      	ldr	r2, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x4d4>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002066:	f7fe fee5 	bl	8000e34 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206e:	f7fe fee1 	bl	8000e34 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b64      	cmp	r3, #100	; 0x64
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e12a      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002080:	4b76      	ldr	r3, [pc, #472]	; (800225c <HAL_RCC_OscConfig+0x4d4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x31a>
 8002094:	4b70      	ldr	r3, [pc, #448]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002098:	4a6f      	ldr	r2, [pc, #444]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6713      	str	r3, [r2, #112]	; 0x70
 80020a0:	e02d      	b.n	80020fe <HAL_RCC_OscConfig+0x376>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x33c>
 80020aa:	4b6b      	ldr	r3, [pc, #428]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	4a6a      	ldr	r2, [pc, #424]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020b0:	f023 0301 	bic.w	r3, r3, #1
 80020b4:	6713      	str	r3, [r2, #112]	; 0x70
 80020b6:	4b68      	ldr	r3, [pc, #416]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	4a67      	ldr	r2, [pc, #412]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	6713      	str	r3, [r2, #112]	; 0x70
 80020c2:	e01c      	b.n	80020fe <HAL_RCC_OscConfig+0x376>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d10c      	bne.n	80020e6 <HAL_RCC_OscConfig+0x35e>
 80020cc:	4b62      	ldr	r3, [pc, #392]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	4a61      	ldr	r2, [pc, #388]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6713      	str	r3, [r2, #112]	; 0x70
 80020d8:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a5e      	ldr	r2, [pc, #376]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	e00b      	b.n	80020fe <HAL_RCC_OscConfig+0x376>
 80020e6:	4b5c      	ldr	r3, [pc, #368]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
 80020f2:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a58      	ldr	r2, [pc, #352]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80020f8:	f023 0304 	bic.w	r3, r3, #4
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d015      	beq.n	8002132 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7fe fe95 	bl	8000e34 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe fe91 	bl	8000e34 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0d8      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002124:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ee      	beq.n	800210e <HAL_RCC_OscConfig+0x386>
 8002130:	e014      	b.n	800215c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7fe fe7f 	bl	8000e34 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fe7b 	bl	8000e34 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0c2      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002150:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1ee      	bne.n	800213a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d105      	bne.n	800216e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002162:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80ae 	beq.w	80022d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002178:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b08      	cmp	r3, #8
 8002182:	d06d      	beq.n	8002260 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d14b      	bne.n	8002224 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218c:	4b32      	ldr	r3, [pc, #200]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a31      	ldr	r2, [pc, #196]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fe4c 	bl	8000e34 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe fe48 	bl	8000e34 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e091      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	4b29      	ldr	r3, [pc, #164]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	019b      	lsls	r3, r3, #6
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	3b01      	subs	r3, #1
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	061b      	lsls	r3, r3, #24
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	071b      	lsls	r3, r3, #28
 80021ea:	491b      	ldr	r1, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 80021f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fe1a 	bl	8000e34 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fe16 	bl	8000e34 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e05f      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x47c>
 8002222:	e057      	b.n	80022d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 800222a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fe00 	bl	8000e34 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fdfc 	bl	8000e34 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e045      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_RCC_OscConfig+0x4d0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x4b0>
 8002256:	e03d      	b.n	80022d4 <HAL_RCC_OscConfig+0x54c>
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <HAL_RCC_OscConfig+0x558>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d030      	beq.n	80022d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d129      	bne.n	80022d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d122      	bne.n	80022d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002296:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002298:	4293      	cmp	r3, r2
 800229a:	d119      	bne.n	80022d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	3b01      	subs	r3, #1
 80022aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d10f      	bne.n	80022d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800

080022e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0d0      	b.n	800249e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d910      	bls.n	800232c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b67      	ldr	r3, [pc, #412]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 020f 	bic.w	r2, r3, #15
 8002312:	4965      	ldr	r1, [pc, #404]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0b8      	b.n	800249e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002344:	4b59      	ldr	r3, [pc, #356]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 800234a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002366:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002368:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d040      	beq.n	8002408 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d115      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07f      	b.n	800249e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e073      	b.n	800249e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e06b      	b.n	800249e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c6:	4b39      	ldr	r3, [pc, #228]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 0203 	bic.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4936      	ldr	r1, [pc, #216]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d8:	f7fe fd2c 	bl	8000e34 <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e0:	f7fe fd28 	bl	8000e34 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e053      	b.n	800249e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 020c 	and.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	429a      	cmp	r2, r3
 8002406:	d1eb      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d210      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	4922      	ldr	r1, [pc, #136]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e032      	b.n	800249e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4916      	ldr	r1, [pc, #88]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002476:	f000 f821 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490a      	ldr	r1, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x1cc>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1d4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fc88 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08006c88 	.word	0x08006c88
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000004 	.word	0x20000004

080024bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c0:	b094      	sub	sp, #80	; 0x50
 80024c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
 80024c8:	2300      	movs	r3, #0
 80024ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024cc:	2300      	movs	r3, #0
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d4:	4b79      	ldr	r3, [pc, #484]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d00d      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x40>
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	f200 80e1 	bhi.w	80026a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x34>
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ee:	e0db      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b73      	ldr	r3, [pc, #460]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024f4:	e0db      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f6:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024fa:	e0d8      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fc:	4b6f      	ldr	r3, [pc, #444]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002504:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002506:	4b6d      	ldr	r3, [pc, #436]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d063      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002512:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	2200      	movs	r2, #0
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
 800251c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800251e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
 800252a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800252e:	4622      	mov	r2, r4
 8002530:	462b      	mov	r3, r5
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	0159      	lsls	r1, r3, #5
 800253c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002540:	0150      	lsls	r0, r2, #5
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4621      	mov	r1, r4
 8002548:	1a51      	subs	r1, r2, r1
 800254a:	6139      	str	r1, [r7, #16]
 800254c:	4629      	mov	r1, r5
 800254e:	eb63 0301 	sbc.w	r3, r3, r1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002560:	4659      	mov	r1, fp
 8002562:	018b      	lsls	r3, r1, #6
 8002564:	4651      	mov	r1, sl
 8002566:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800256a:	4651      	mov	r1, sl
 800256c:	018a      	lsls	r2, r1, #6
 800256e:	4651      	mov	r1, sl
 8002570:	ebb2 0801 	subs.w	r8, r2, r1
 8002574:	4659      	mov	r1, fp
 8002576:	eb63 0901 	sbc.w	r9, r3, r1
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800258a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	4623      	mov	r3, r4
 8002594:	eb18 0303 	adds.w	r3, r8, r3
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	462b      	mov	r3, r5
 800259c:	eb49 0303 	adc.w	r3, r9, r3
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ae:	4629      	mov	r1, r5
 80025b0:	024b      	lsls	r3, r1, #9
 80025b2:	4621      	mov	r1, r4
 80025b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025b8:	4621      	mov	r1, r4
 80025ba:	024a      	lsls	r2, r1, #9
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c2:	2200      	movs	r2, #0
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025cc:	f7fd fe38 	bl	8000240 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4613      	mov	r3, r2
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d8:	e058      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	2200      	movs	r2, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	4611      	mov	r1, r2
 80025e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ea:	623b      	str	r3, [r7, #32]
 80025ec:	2300      	movs	r3, #0
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025f4:	4642      	mov	r2, r8
 80025f6:	464b      	mov	r3, r9
 80025f8:	f04f 0000 	mov.w	r0, #0
 80025fc:	f04f 0100 	mov.w	r1, #0
 8002600:	0159      	lsls	r1, r3, #5
 8002602:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002606:	0150      	lsls	r0, r2, #5
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4641      	mov	r1, r8
 800260e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002612:	4649      	mov	r1, r9
 8002614:	eb63 0b01 	sbc.w	fp, r3, r1
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800262c:	ebb2 040a 	subs.w	r4, r2, sl
 8002630:	eb63 050b 	sbc.w	r5, r3, fp
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	00eb      	lsls	r3, r5, #3
 800263e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002642:	00e2      	lsls	r2, r4, #3
 8002644:	4614      	mov	r4, r2
 8002646:	461d      	mov	r5, r3
 8002648:	4643      	mov	r3, r8
 800264a:	18e3      	adds	r3, r4, r3
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	464b      	mov	r3, r9
 8002650:	eb45 0303 	adc.w	r3, r5, r3
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002662:	4629      	mov	r1, r5
 8002664:	028b      	lsls	r3, r1, #10
 8002666:	4621      	mov	r1, r4
 8002668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800266c:	4621      	mov	r1, r4
 800266e:	028a      	lsls	r2, r1, #10
 8002670:	4610      	mov	r0, r2
 8002672:	4619      	mov	r1, r3
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	2200      	movs	r2, #0
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	61fa      	str	r2, [r7, #28]
 800267c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002680:	f7fd fdde 	bl	8000240 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_GetSysClockFreq+0x200>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0c1b      	lsrs	r3, r3, #16
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	3301      	adds	r3, #1
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800269c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800269e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3750      	adds	r7, #80	; 0x50
 80026b4:	46bd      	mov	sp, r7
 80026b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	007a1200 	.word	0x007a1200

080026c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0a9b      	lsrs	r3, r3, #10
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4903      	ldr	r1, [pc, #12]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40023800 	.word	0x40023800
 8002704:	08006c98 	.word	0x08006c98

08002708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800270c:	f7ff ffdc 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0b5b      	lsrs	r3, r3, #13
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4903      	ldr	r1, [pc, #12]	; (800272c <HAL_RCC_GetPCLK2Freq+0x24>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	08006c98 	.word	0x08006c98

08002730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d012      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002758:	4b69      	ldr	r3, [pc, #420]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a68      	ldr	r2, [pc, #416]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002762:	6093      	str	r3, [r2, #8]
 8002764:	4b66      	ldr	r3, [pc, #408]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	4964      	ldr	r1, [pc, #400]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d017      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800278a:	4b5d      	ldr	r3, [pc, #372]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002790:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	4959      	ldr	r1, [pc, #356]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027a8:	d101      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d017      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027c6:	4b4e      	ldr	r3, [pc, #312]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	494a      	ldr	r1, [pc, #296]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e4:	d101      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 808b 	beq.w	800292a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002814:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	4a39      	ldr	r2, [pc, #228]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281e:	6413      	str	r3, [r2, #64]	; 0x40
 8002820:	4b37      	ldr	r3, [pc, #220]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a34      	ldr	r2, [pc, #208]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002838:	f7fe fafc 	bl	8000e34 <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7fe faf8 	bl	8000e34 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e38f      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d035      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	429a      	cmp	r2, r3
 800287a:	d02e      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a1d      	ldr	r2, [pc, #116]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d114      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7fe fac0 	bl	8000e34 <HAL_GetTick>
 80028b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe fabc 	bl	8000e34 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e351      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ee      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028e6:	d111      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028f6:	400b      	ands	r3, r1
 80028f8:	4901      	ldr	r1, [pc, #4]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
 80028fe:	e00b      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000
 8002908:	0ffffcff 	.word	0x0ffffcff
 800290c:	4bac      	ldr	r3, [pc, #688]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4aab      	ldr	r2, [pc, #684]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002912:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002916:	6093      	str	r3, [r2, #8]
 8002918:	4ba9      	ldr	r3, [pc, #676]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	49a6      	ldr	r1, [pc, #664]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002926:	4313      	orrs	r3, r2
 8002928:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d010      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002936:	4ba2      	ldr	r3, [pc, #648]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293c:	4aa0      	ldr	r2, [pc, #640]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002942:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002946:	4b9e      	ldr	r3, [pc, #632]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002948:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	499b      	ldr	r1, [pc, #620]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002964:	4b96      	ldr	r3, [pc, #600]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002972:	4993      	ldr	r1, [pc, #588]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002986:	4b8e      	ldr	r3, [pc, #568]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002994:	498a      	ldr	r1, [pc, #552]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a8:	4b85      	ldr	r3, [pc, #532]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b6:	4982      	ldr	r1, [pc, #520]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ca:	4b7d      	ldr	r3, [pc, #500]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4979      	ldr	r1, [pc, #484]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ec:	4b74      	ldr	r3, [pc, #464]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4971      	ldr	r1, [pc, #452]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a0e:	4b6c      	ldr	r3, [pc, #432]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f023 020c 	bic.w	r2, r3, #12
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	4968      	ldr	r1, [pc, #416]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a30:	4b63      	ldr	r3, [pc, #396]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	4960      	ldr	r1, [pc, #384]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a52:	4b5b      	ldr	r3, [pc, #364]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a60:	4957      	ldr	r1, [pc, #348]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a74:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	494f      	ldr	r1, [pc, #316]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a96:	4b4a      	ldr	r3, [pc, #296]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4946      	ldr	r1, [pc, #280]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	493e      	ldr	r1, [pc, #248]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae8:	4935      	ldr	r1, [pc, #212]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002afc:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b0a:	492d      	ldr	r1, [pc, #180]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d011      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2c:	4924      	ldr	r1, [pc, #144]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6c:	4914      	ldr	r1, [pc, #80]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b90:	490b      	ldr	r1, [pc, #44]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00f      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb4:	4902      	ldr	r1, [pc, #8]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bbc:	e002      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00b      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bd0:	4b8a      	ldr	r3, [pc, #552]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	4986      	ldr	r1, [pc, #536]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bf4:	4b81      	ldr	r3, [pc, #516]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c04:	497d      	ldr	r1, [pc, #500]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d006      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80d6 	beq.w	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c20:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a75      	ldr	r2, [pc, #468]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2c:	f7fe f902 	bl	8000e34 <HAL_GetTick>
 8002c30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c34:	f7fe f8fe 	bl	8000e34 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e195      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c46:	4b6d      	ldr	r3, [pc, #436]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d021      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11d      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c74:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c7a:	0e1b      	lsrs	r3, r3, #24
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	019a      	lsls	r2, r3, #6
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	071b      	lsls	r3, r3, #28
 8002c9a:	4958      	ldr	r1, [pc, #352]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d02e      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ccc:	d129      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cce:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cdc:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce2:	0f1b      	lsrs	r3, r3, #28
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	019a      	lsls	r2, r3, #6
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	061b      	lsls	r3, r3, #24
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	071b      	lsls	r3, r3, #28
 8002d02:	493e      	ldr	r1, [pc, #248]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d10:	f023 021f 	bic.w	r2, r3, #31
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	4938      	ldr	r1, [pc, #224]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01d      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d2e:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d34:	0e1b      	lsrs	r3, r3, #24
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d42:	0f1b      	lsrs	r3, r3, #28
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	019a      	lsls	r2, r3, #6
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	431a      	orrs	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	071b      	lsls	r3, r3, #28
 8002d62:	4926      	ldr	r1, [pc, #152]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d011      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	019a      	lsls	r2, r3, #6
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	071b      	lsls	r3, r3, #28
 8002d92:	491a      	ldr	r1, [pc, #104]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da6:	f7fe f845 	bl	8000e34 <HAL_GetTick>
 8002daa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dae:	f7fe f841 	bl	8000e34 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0d8      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	f040 80ce 	bne.w	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de0:	f7fe f828 	bl	8000e34 <HAL_GetTick>
 8002de4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002de6:	e00b      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002de8:	f7fe f824 	bl	8000e34 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d904      	bls.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0bb      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e00:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0c:	d0ec      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d02e      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d12a      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e36:	4b51      	ldr	r3, [pc, #324]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e44:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	0f1b      	lsrs	r3, r3, #28
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	019a      	lsls	r2, r3, #6
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	041b      	lsls	r3, r3, #16
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	061b      	lsls	r3, r3, #24
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	071b      	lsls	r3, r3, #28
 8002e6a:	4944      	ldr	r1, [pc, #272]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e72:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	3b01      	subs	r3, #1
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	493d      	ldr	r1, [pc, #244]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d022      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea0:	d11d      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ea2:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	0e1b      	lsrs	r3, r3, #24
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	0f1b      	lsrs	r3, r3, #28
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	019a      	lsls	r2, r3, #6
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	061b      	lsls	r3, r3, #24
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	071b      	lsls	r3, r3, #28
 8002ed6:	4929      	ldr	r1, [pc, #164]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d028      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	0e1b      	lsrs	r3, r3, #24
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ef8:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	019a      	lsls	r2, r3, #6
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	431a      	orrs	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	071b      	lsls	r3, r3, #28
 8002f1e:	4917      	ldr	r1, [pc, #92]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	4911      	ldr	r1, [pc, #68]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fd ff74 	bl	8000e34 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f50:	f7fd ff70 	bl	8000e34 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	; 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e007      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6e:	d1ef      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800

08002f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e040      	b.n	8003014 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fdbc 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	; 0x24
 8002fac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f82c 	bl	800301c <UART_SetConfig>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e022      	b.n	8003014 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fa84 	bl	80034e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fb0b 	bl	8003628 <UART_CheckIdleState>
 8003012:	4603      	mov	r3, r0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4ba6      	ldr	r3, [pc, #664]	; (80032e0 <UART_SetConfig+0x2c4>)
 8003048:	4013      	ands	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	6979      	ldr	r1, [r7, #20]
 8003050:	430b      	orrs	r3, r1
 8003052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a94      	ldr	r2, [pc, #592]	; (80032e4 <UART_SetConfig+0x2c8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d120      	bne.n	80030da <UART_SetConfig+0xbe>
 8003098:	4b93      	ldr	r3, [pc, #588]	; (80032e8 <UART_SetConfig+0x2cc>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d816      	bhi.n	80030d4 <UART_SetConfig+0xb8>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0x90>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c9 	.word	0x080030c9
 80030b4:	080030c3 	.word	0x080030c3
 80030b8:	080030cf 	.word	0x080030cf
 80030bc:	2301      	movs	r3, #1
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e150      	b.n	8003364 <UART_SetConfig+0x348>
 80030c2:	2302      	movs	r3, #2
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e14d      	b.n	8003364 <UART_SetConfig+0x348>
 80030c8:	2304      	movs	r3, #4
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e14a      	b.n	8003364 <UART_SetConfig+0x348>
 80030ce:	2308      	movs	r3, #8
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e147      	b.n	8003364 <UART_SetConfig+0x348>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e144      	b.n	8003364 <UART_SetConfig+0x348>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a83      	ldr	r2, [pc, #524]	; (80032ec <UART_SetConfig+0x2d0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d132      	bne.n	800314a <UART_SetConfig+0x12e>
 80030e4:	4b80      	ldr	r3, [pc, #512]	; (80032e8 <UART_SetConfig+0x2cc>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d828      	bhi.n	8003144 <UART_SetConfig+0x128>
 80030f2:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <UART_SetConfig+0xdc>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	0800312d 	.word	0x0800312d
 80030fc:	08003145 	.word	0x08003145
 8003100:	08003145 	.word	0x08003145
 8003104:	08003145 	.word	0x08003145
 8003108:	08003139 	.word	0x08003139
 800310c:	08003145 	.word	0x08003145
 8003110:	08003145 	.word	0x08003145
 8003114:	08003145 	.word	0x08003145
 8003118:	08003133 	.word	0x08003133
 800311c:	08003145 	.word	0x08003145
 8003120:	08003145 	.word	0x08003145
 8003124:	08003145 	.word	0x08003145
 8003128:	0800313f 	.word	0x0800313f
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e118      	b.n	8003364 <UART_SetConfig+0x348>
 8003132:	2302      	movs	r3, #2
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e115      	b.n	8003364 <UART_SetConfig+0x348>
 8003138:	2304      	movs	r3, #4
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e112      	b.n	8003364 <UART_SetConfig+0x348>
 800313e:	2308      	movs	r3, #8
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e10f      	b.n	8003364 <UART_SetConfig+0x348>
 8003144:	2310      	movs	r3, #16
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e10c      	b.n	8003364 <UART_SetConfig+0x348>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a68      	ldr	r2, [pc, #416]	; (80032f0 <UART_SetConfig+0x2d4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d120      	bne.n	8003196 <UART_SetConfig+0x17a>
 8003154:	4b64      	ldr	r3, [pc, #400]	; (80032e8 <UART_SetConfig+0x2cc>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800315e:	2b30      	cmp	r3, #48	; 0x30
 8003160:	d013      	beq.n	800318a <UART_SetConfig+0x16e>
 8003162:	2b30      	cmp	r3, #48	; 0x30
 8003164:	d814      	bhi.n	8003190 <UART_SetConfig+0x174>
 8003166:	2b20      	cmp	r3, #32
 8003168:	d009      	beq.n	800317e <UART_SetConfig+0x162>
 800316a:	2b20      	cmp	r3, #32
 800316c:	d810      	bhi.n	8003190 <UART_SetConfig+0x174>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <UART_SetConfig+0x15c>
 8003172:	2b10      	cmp	r3, #16
 8003174:	d006      	beq.n	8003184 <UART_SetConfig+0x168>
 8003176:	e00b      	b.n	8003190 <UART_SetConfig+0x174>
 8003178:	2300      	movs	r3, #0
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e0f2      	b.n	8003364 <UART_SetConfig+0x348>
 800317e:	2302      	movs	r3, #2
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e0ef      	b.n	8003364 <UART_SetConfig+0x348>
 8003184:	2304      	movs	r3, #4
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e0ec      	b.n	8003364 <UART_SetConfig+0x348>
 800318a:	2308      	movs	r3, #8
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e0e9      	b.n	8003364 <UART_SetConfig+0x348>
 8003190:	2310      	movs	r3, #16
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e0e6      	b.n	8003364 <UART_SetConfig+0x348>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a56      	ldr	r2, [pc, #344]	; (80032f4 <UART_SetConfig+0x2d8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0x1c6>
 80031a0:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <UART_SetConfig+0x2cc>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031aa:	2bc0      	cmp	r3, #192	; 0xc0
 80031ac:	d013      	beq.n	80031d6 <UART_SetConfig+0x1ba>
 80031ae:	2bc0      	cmp	r3, #192	; 0xc0
 80031b0:	d814      	bhi.n	80031dc <UART_SetConfig+0x1c0>
 80031b2:	2b80      	cmp	r3, #128	; 0x80
 80031b4:	d009      	beq.n	80031ca <UART_SetConfig+0x1ae>
 80031b6:	2b80      	cmp	r3, #128	; 0x80
 80031b8:	d810      	bhi.n	80031dc <UART_SetConfig+0x1c0>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <UART_SetConfig+0x1a8>
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d006      	beq.n	80031d0 <UART_SetConfig+0x1b4>
 80031c2:	e00b      	b.n	80031dc <UART_SetConfig+0x1c0>
 80031c4:	2300      	movs	r3, #0
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e0cc      	b.n	8003364 <UART_SetConfig+0x348>
 80031ca:	2302      	movs	r3, #2
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e0c9      	b.n	8003364 <UART_SetConfig+0x348>
 80031d0:	2304      	movs	r3, #4
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e0c6      	b.n	8003364 <UART_SetConfig+0x348>
 80031d6:	2308      	movs	r3, #8
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e0c3      	b.n	8003364 <UART_SetConfig+0x348>
 80031dc:	2310      	movs	r3, #16
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e0c0      	b.n	8003364 <UART_SetConfig+0x348>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a44      	ldr	r2, [pc, #272]	; (80032f8 <UART_SetConfig+0x2dc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d125      	bne.n	8003238 <UART_SetConfig+0x21c>
 80031ec:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <UART_SetConfig+0x2cc>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031fa:	d017      	beq.n	800322c <UART_SetConfig+0x210>
 80031fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003200:	d817      	bhi.n	8003232 <UART_SetConfig+0x216>
 8003202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003206:	d00b      	beq.n	8003220 <UART_SetConfig+0x204>
 8003208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320c:	d811      	bhi.n	8003232 <UART_SetConfig+0x216>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <UART_SetConfig+0x1fe>
 8003212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003216:	d006      	beq.n	8003226 <UART_SetConfig+0x20a>
 8003218:	e00b      	b.n	8003232 <UART_SetConfig+0x216>
 800321a:	2300      	movs	r3, #0
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e0a1      	b.n	8003364 <UART_SetConfig+0x348>
 8003220:	2302      	movs	r3, #2
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e09e      	b.n	8003364 <UART_SetConfig+0x348>
 8003226:	2304      	movs	r3, #4
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e09b      	b.n	8003364 <UART_SetConfig+0x348>
 800322c:	2308      	movs	r3, #8
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e098      	b.n	8003364 <UART_SetConfig+0x348>
 8003232:	2310      	movs	r3, #16
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e095      	b.n	8003364 <UART_SetConfig+0x348>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2f      	ldr	r2, [pc, #188]	; (80032fc <UART_SetConfig+0x2e0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d125      	bne.n	800328e <UART_SetConfig+0x272>
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <UART_SetConfig+0x2cc>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800324c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003250:	d017      	beq.n	8003282 <UART_SetConfig+0x266>
 8003252:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003256:	d817      	bhi.n	8003288 <UART_SetConfig+0x26c>
 8003258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800325c:	d00b      	beq.n	8003276 <UART_SetConfig+0x25a>
 800325e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003262:	d811      	bhi.n	8003288 <UART_SetConfig+0x26c>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <UART_SetConfig+0x254>
 8003268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326c:	d006      	beq.n	800327c <UART_SetConfig+0x260>
 800326e:	e00b      	b.n	8003288 <UART_SetConfig+0x26c>
 8003270:	2301      	movs	r3, #1
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e076      	b.n	8003364 <UART_SetConfig+0x348>
 8003276:	2302      	movs	r3, #2
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e073      	b.n	8003364 <UART_SetConfig+0x348>
 800327c:	2304      	movs	r3, #4
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e070      	b.n	8003364 <UART_SetConfig+0x348>
 8003282:	2308      	movs	r3, #8
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e06d      	b.n	8003364 <UART_SetConfig+0x348>
 8003288:	2310      	movs	r3, #16
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e06a      	b.n	8003364 <UART_SetConfig+0x348>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <UART_SetConfig+0x2e4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d138      	bne.n	800330a <UART_SetConfig+0x2ee>
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <UART_SetConfig+0x2cc>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032a6:	d017      	beq.n	80032d8 <UART_SetConfig+0x2bc>
 80032a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032ac:	d82a      	bhi.n	8003304 <UART_SetConfig+0x2e8>
 80032ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b2:	d00b      	beq.n	80032cc <UART_SetConfig+0x2b0>
 80032b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b8:	d824      	bhi.n	8003304 <UART_SetConfig+0x2e8>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <UART_SetConfig+0x2aa>
 80032be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c2:	d006      	beq.n	80032d2 <UART_SetConfig+0x2b6>
 80032c4:	e01e      	b.n	8003304 <UART_SetConfig+0x2e8>
 80032c6:	2300      	movs	r3, #0
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e04b      	b.n	8003364 <UART_SetConfig+0x348>
 80032cc:	2302      	movs	r3, #2
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e048      	b.n	8003364 <UART_SetConfig+0x348>
 80032d2:	2304      	movs	r3, #4
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e045      	b.n	8003364 <UART_SetConfig+0x348>
 80032d8:	2308      	movs	r3, #8
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e042      	b.n	8003364 <UART_SetConfig+0x348>
 80032de:	bf00      	nop
 80032e0:	efff69f3 	.word	0xefff69f3
 80032e4:	40011000 	.word	0x40011000
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40004400 	.word	0x40004400
 80032f0:	40004800 	.word	0x40004800
 80032f4:	40004c00 	.word	0x40004c00
 80032f8:	40005000 	.word	0x40005000
 80032fc:	40011400 	.word	0x40011400
 8003300:	40007800 	.word	0x40007800
 8003304:	2310      	movs	r3, #16
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e02c      	b.n	8003364 <UART_SetConfig+0x348>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a72      	ldr	r2, [pc, #456]	; (80034d8 <UART_SetConfig+0x4bc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d125      	bne.n	8003360 <UART_SetConfig+0x344>
 8003314:	4b71      	ldr	r3, [pc, #452]	; (80034dc <UART_SetConfig+0x4c0>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800331e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003322:	d017      	beq.n	8003354 <UART_SetConfig+0x338>
 8003324:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003328:	d817      	bhi.n	800335a <UART_SetConfig+0x33e>
 800332a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332e:	d00b      	beq.n	8003348 <UART_SetConfig+0x32c>
 8003330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003334:	d811      	bhi.n	800335a <UART_SetConfig+0x33e>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <UART_SetConfig+0x326>
 800333a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800333e:	d006      	beq.n	800334e <UART_SetConfig+0x332>
 8003340:	e00b      	b.n	800335a <UART_SetConfig+0x33e>
 8003342:	2300      	movs	r3, #0
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e00d      	b.n	8003364 <UART_SetConfig+0x348>
 8003348:	2302      	movs	r3, #2
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e00a      	b.n	8003364 <UART_SetConfig+0x348>
 800334e:	2304      	movs	r3, #4
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e007      	b.n	8003364 <UART_SetConfig+0x348>
 8003354:	2308      	movs	r3, #8
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e004      	b.n	8003364 <UART_SetConfig+0x348>
 800335a:	2310      	movs	r3, #16
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e001      	b.n	8003364 <UART_SetConfig+0x348>
 8003360:	2310      	movs	r3, #16
 8003362:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336c:	d15b      	bne.n	8003426 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800336e:	7ffb      	ldrb	r3, [r7, #31]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d828      	bhi.n	80033c6 <UART_SetConfig+0x3aa>
 8003374:	a201      	add	r2, pc, #4	; (adr r2, 800337c <UART_SetConfig+0x360>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033a1 	.word	0x080033a1
 8003380:	080033a9 	.word	0x080033a9
 8003384:	080033b1 	.word	0x080033b1
 8003388:	080033c7 	.word	0x080033c7
 800338c:	080033b7 	.word	0x080033b7
 8003390:	080033c7 	.word	0x080033c7
 8003394:	080033c7 	.word	0x080033c7
 8003398:	080033c7 	.word	0x080033c7
 800339c:	080033bf 	.word	0x080033bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a0:	f7ff f99e 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 80033a4:	61b8      	str	r0, [r7, #24]
        break;
 80033a6:	e013      	b.n	80033d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a8:	f7ff f9ae 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 80033ac:	61b8      	str	r0, [r7, #24]
        break;
 80033ae:	e00f      	b.n	80033d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <UART_SetConfig+0x4c4>)
 80033b2:	61bb      	str	r3, [r7, #24]
        break;
 80033b4:	e00c      	b.n	80033d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b6:	f7ff f881 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 80033ba:	61b8      	str	r0, [r7, #24]
        break;
 80033bc:	e008      	b.n	80033d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c2:	61bb      	str	r3, [r7, #24]
        break;
 80033c4:	e004      	b.n	80033d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	77bb      	strb	r3, [r7, #30]
        break;
 80033ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d074      	beq.n	80034c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d916      	bls.n	8003420 <UART_SetConfig+0x404>
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d212      	bcs.n	8003420 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f023 030f 	bic.w	r3, r3, #15
 8003402:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	b29b      	uxth	r3, r3
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	b29a      	uxth	r2, r3
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	4313      	orrs	r3, r2
 8003414:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	89fa      	ldrh	r2, [r7, #14]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	e04f      	b.n	80034c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	77bb      	strb	r3, [r7, #30]
 8003424:	e04c      	b.n	80034c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003426:	7ffb      	ldrb	r3, [r7, #31]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d828      	bhi.n	800347e <UART_SetConfig+0x462>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <UART_SetConfig+0x418>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003459 	.word	0x08003459
 8003438:	08003461 	.word	0x08003461
 800343c:	08003469 	.word	0x08003469
 8003440:	0800347f 	.word	0x0800347f
 8003444:	0800346f 	.word	0x0800346f
 8003448:	0800347f 	.word	0x0800347f
 800344c:	0800347f 	.word	0x0800347f
 8003450:	0800347f 	.word	0x0800347f
 8003454:	08003477 	.word	0x08003477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7ff f942 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 800345c:	61b8      	str	r0, [r7, #24]
        break;
 800345e:	e013      	b.n	8003488 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003460:	f7ff f952 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 8003464:	61b8      	str	r0, [r7, #24]
        break;
 8003466:	e00f      	b.n	8003488 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <UART_SetConfig+0x4c4>)
 800346a:	61bb      	str	r3, [r7, #24]
        break;
 800346c:	e00c      	b.n	8003488 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346e:	f7ff f825 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 8003472:	61b8      	str	r0, [r7, #24]
        break;
 8003474:	e008      	b.n	8003488 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347a:	61bb      	str	r3, [r7, #24]
        break;
 800347c:	e004      	b.n	8003488 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	77bb      	strb	r3, [r7, #30]
        break;
 8003486:	bf00      	nop
    }

    if (pclk != 0U)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d018      	beq.n	80034c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	085a      	lsrs	r2, r3, #1
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	441a      	add	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b0f      	cmp	r3, #15
 80034a6:	d909      	bls.n	80034bc <UART_SetConfig+0x4a0>
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ae:	d205      	bcs.n	80034bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	e001      	b.n	80034c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40007c00 	.word	0x40007c00
 80034dc:	40023800 	.word	0x40023800
 80034e0:	00f42400 	.word	0x00f42400

080034e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01a      	beq.n	80035fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e2:	d10a      	bne.n	80035fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
  }
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003638:	f7fd fbfc 	bl	8000e34 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d10e      	bne.n	800366a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800364c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f831 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e027      	b.n	80036ba <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d10e      	bne.n	8003696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f81b 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e011      	b.n	80036ba <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b09c      	sub	sp, #112	; 0x70
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	e0a7      	b.n	8003824 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	f000 80a3 	beq.w	8003824 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fd fba9 	bl	8000e34 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80036ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d13f      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003708:	667b      	str	r3, [r7, #100]	; 0x64
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003714:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e6      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	663b      	str	r3, [r7, #96]	; 0x60
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003746:	64ba      	str	r2, [r7, #72]	; 0x48
 8003748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800374c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e068      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d050      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003790:	d148      	bne.n	8003824 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800379a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
 80037bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e6      	bne.n	800379c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	613b      	str	r3, [r7, #16]
   return(result);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3308      	adds	r3, #8
 80037ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037ee:	623a      	str	r2, [r7, #32]
 80037f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	69f9      	ldr	r1, [r7, #28]
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e5      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e010      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	429a      	cmp	r2, r3
 8003840:	f43f af48 	beq.w	80036d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3770      	adds	r7, #112	; 0x70
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003850:	b084      	sub	sp, #16
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	f107 001c 	add.w	r0, r7, #28
 800385e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	2b01      	cmp	r3, #1
 8003866:	d120      	bne.n	80038aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <USB_CoreInit+0xac>)
 800387a:	4013      	ands	r3, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800388c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d105      	bne.n	800389e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa96 	bl	8003dd0 <USB_CoreReset>
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]
 80038a8:	e010      	b.n	80038cc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa8a 	bl	8003dd0 <USB_CoreReset>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10b      	bne.n	80038ea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f043 0206 	orr.w	r2, r3, #6
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f043 0220 	orr.w	r2, r3, #32
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038f6:	b004      	add	sp, #16
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	ffbdffbf 	.word	0xffbdffbf

08003900 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 0201 	bic.w	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d115      	bne.n	8003970 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003950:	2001      	movs	r0, #1
 8003952:	f7fd fa7b 	bl	8000e4c <HAL_Delay>
      ms++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fa29 	bl	8003db4 <USB_GetMode>
 8003962:	4603      	mov	r3, r0
 8003964:	2b01      	cmp	r3, #1
 8003966:	d01e      	beq.n	80039a6 <USB_SetCurrentMode+0x84>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b31      	cmp	r3, #49	; 0x31
 800396c:	d9f0      	bls.n	8003950 <USB_SetCurrentMode+0x2e>
 800396e:	e01a      	b.n	80039a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d115      	bne.n	80039a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003982:	2001      	movs	r0, #1
 8003984:	f7fd fa62 	bl	8000e4c <HAL_Delay>
      ms++;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3301      	adds	r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fa10 	bl	8003db4 <USB_GetMode>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <USB_SetCurrentMode+0x84>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b31      	cmp	r3, #49	; 0x31
 800399e:	d9f0      	bls.n	8003982 <USB_SetCurrentMode+0x60>
 80039a0:	e001      	b.n	80039a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e005      	b.n	80039b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b32      	cmp	r3, #50	; 0x32
 80039aa:	d101      	bne.n	80039b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039bc:	b084      	sub	sp, #16
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	e009      	b.n	80039f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	3340      	adds	r3, #64	; 0x40
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	2200      	movs	r2, #0
 80039e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	3301      	adds	r3, #1
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b0e      	cmp	r3, #14
 80039f4:	d9f2      	bls.n	80039dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11c      	bne.n	8003a36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e005      	b.n	8003a42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	4619      	mov	r1, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	680b      	ldr	r3, [r1, #0]
 8003a60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10c      	bne.n	8003a82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f965 	bl	8003d40 <USB_SetDevSpeed>
 8003a76:	e008      	b.n	8003a8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a78:	2101      	movs	r1, #1
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f960 	bl	8003d40 <USB_SetDevSpeed>
 8003a80:	e003      	b.n	8003a8a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a82:	2103      	movs	r1, #3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f95b 	bl	8003d40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a8a:	2110      	movs	r1, #16
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8f3 	bl	8003c78 <USB_FlushTxFifo>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f91f 	bl	8003ce0 <USB_FlushRxFifo>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aca:	461a      	mov	r2, r3
 8003acc:	2300      	movs	r3, #0
 8003ace:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	e043      	b.n	8003b5e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aec:	d118      	bne.n	8003b20 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e013      	b.n	8003b32 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	461a      	mov	r2, r3
 8003b18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e008      	b.n	8003b32 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2300      	movs	r3, #0
 8003b42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b50:	461a      	mov	r2, r3
 8003b52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3b7      	bcc.n	8003ad6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	e043      	b.n	8003bf4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b82:	d118      	bne.n	8003bb6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	461a      	mov	r2, r3
 8003b98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e013      	b.n	8003bc8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bac:	461a      	mov	r2, r3
 8003bae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	e008      	b.n	8003bc8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be6:	461a      	mov	r2, r3
 8003be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d3b7      	bcc.n	8003b6c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	f043 0210 	orr.w	r2, r3, #16
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <USB_DevInit+0x2b4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f043 0208 	orr.w	r2, r3, #8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <USB_DevInit+0x2b8>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c6c:	b004      	add	sp, #16
 8003c6e:	4770      	bx	lr
 8003c70:	803c3800 	.word	0x803c3800
 8003c74:	40000004 	.word	0x40000004

08003c78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <USB_FlushTxFifo+0x64>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e01b      	b.n	8003cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	daf2      	bge.n	8003c86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	019b      	lsls	r3, r3, #6
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <USB_FlushTxFifo+0x64>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e006      	b.n	8003cd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d0f0      	beq.n	8003cb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	00030d40 	.word	0x00030d40

08003ce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <USB_FlushRxFifo+0x5c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e018      	b.n	8003d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	daf2      	bge.n	8003cec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <USB_FlushRxFifo+0x5c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e006      	b.n	8003d30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d0f0      	beq.n	8003d10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	00030d40 	.word	0x00030d40

08003d40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d8c:	f023 0303 	bic.w	r3, r3, #3
 8003d90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <USB_CoreReset+0x64>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e01b      	b.n	8003e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	daf2      	bge.n	8003ddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <USB_CoreReset+0x64>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e006      	b.n	8003e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d0f0      	beq.n	8003e06 <USB_CoreReset+0x36>

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	00030d40 	.word	0x00030d40

08003e38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e4e:	f3ef 8305 	mrs	r3, IPSR
 8003e52:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5e:	607b      	str	r3, [r7, #4]
  return(result);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e66:	f3ef 8311 	mrs	r3, BASEPRI
 8003e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <osKernelInitialize+0x3a>
 8003e72:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <osKernelInitialize+0x64>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d103      	bne.n	8003e82 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003e7a:	f06f 0305 	mvn.w	r3, #5
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	e00c      	b.n	8003e9c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <osKernelInitialize+0x64>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <osKernelInitialize+0x64>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e002      	b.n	8003e9c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000858 	.word	0x20000858

08003eb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eb6:	f3ef 8305 	mrs	r3, IPSR
 8003eba:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10f      	bne.n	8003ee2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	607b      	str	r3, [r7, #4]
  return(result);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d105      	bne.n	8003eda <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ece:	f3ef 8311 	mrs	r3, BASEPRI
 8003ed2:	603b      	str	r3, [r7, #0]
  return(result);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <osKernelStart+0x3a>
 8003eda:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <osKernelStart+0x68>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d103      	bne.n	8003eea <osKernelStart+0x3a>
    stat = osErrorISR;
 8003ee2:	f06f 0305 	mvn.w	r3, #5
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e010      	b.n	8003f0c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <osKernelStart+0x68>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d109      	bne.n	8003f06 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ef2:	f7ff ffa1 	bl	8003e38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <osKernelStart+0x68>)
 8003ef8:	2202      	movs	r2, #2
 8003efa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003efc:	f001 f8ca 	bl	8005094 <vTaskStartScheduler>
      stat = osOK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e002      	b.n	8003f0c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000858 	.word	0x20000858

08003f1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b090      	sub	sp, #64	; 0x40
 8003f20:	af04      	add	r7, sp, #16
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f2c:	f3ef 8305 	mrs	r3, IPSR
 8003f30:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f32:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f040 808f 	bne.w	8004058 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f46:	f3ef 8311 	mrs	r3, BASEPRI
 8003f4a:	617b      	str	r3, [r7, #20]
  return(result);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <osThreadNew+0x3e>
 8003f52:	4b44      	ldr	r3, [pc, #272]	; (8004064 <osThreadNew+0x148>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d07e      	beq.n	8004058 <osThreadNew+0x13c>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d07b      	beq.n	8004058 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003f64:	2318      	movs	r3, #24
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d045      	beq.n	8004004 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <osThreadNew+0x6a>
        name = attr->name;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <osThreadNew+0x90>
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	2b38      	cmp	r3, #56	; 0x38
 8003f9e:	d805      	bhi.n	8003fac <osThreadNew+0x90>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <osThreadNew+0x94>
        return (NULL);
 8003fac:	2300      	movs	r3, #0
 8003fae:	e054      	b.n	800405a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <osThreadNew+0xca>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2bbb      	cmp	r3, #187	; 0xbb
 8003fce:	d90a      	bls.n	8003fe6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d006      	beq.n	8003fe6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <osThreadNew+0xca>
        mem = 1;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	623b      	str	r3, [r7, #32]
 8003fe4:	e010      	b.n	8004008 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10c      	bne.n	8004008 <osThreadNew+0xec>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d108      	bne.n	8004008 <osThreadNew+0xec>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <osThreadNew+0xec>
          mem = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	623b      	str	r3, [r7, #32]
 8004002:	e001      	b.n	8004008 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d110      	bne.n	8004030 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004016:	9202      	str	r2, [sp, #8]
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fe3f 	bl	8004ca8 <xTaskCreateStatic>
 800402a:	4603      	mov	r3, r0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e013      	b.n	8004058 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d110      	bne.n	8004058 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	b29a      	uxth	r2, r3
 800403a:	f107 0310 	add.w	r3, r7, #16
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fe90 	bl	8004d6e <xTaskCreate>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d001      	beq.n	8004058 <osThreadNew+0x13c>
          hTask = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004058:	693b      	ldr	r3, [r7, #16]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3730      	adds	r7, #48	; 0x30
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000858 	.word	0x20000858

08004068 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004070:	f3ef 8305 	mrs	r3, IPSR
 8004074:	613b      	str	r3, [r7, #16]
  return(result);
 8004076:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10f      	bne.n	800409c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407c:	f3ef 8310 	mrs	r3, PRIMASK
 8004080:	60fb      	str	r3, [r7, #12]
  return(result);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004088:	f3ef 8311 	mrs	r3, BASEPRI
 800408c:	60bb      	str	r3, [r7, #8]
  return(result);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <osDelay+0x3c>
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <osDelay+0x58>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d103      	bne.n	80040a4 <osDelay+0x3c>
    stat = osErrorISR;
 800409c:	f06f 0305 	mvn.w	r3, #5
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e007      	b.n	80040b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 ffba 	bl	8005028 <vTaskDelay>
    }
  }

  return (stat);
 80040b4:	697b      	ldr	r3, [r7, #20]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000858 	.word	0x20000858

080040c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80040d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4a06      	ldr	r2, [pc, #24]	; (80040f4 <vApplicationGetIdleTaskMemory+0x30>)
 80040da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2280      	movs	r2, #128	; 0x80
 80040e0:	601a      	str	r2, [r3, #0]
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	2000085c 	.word	0x2000085c
 80040f4:	20000918 	.word	0x20000918

080040f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a07      	ldr	r2, [pc, #28]	; (8004124 <vApplicationGetTimerTaskMemory+0x2c>)
 8004108:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4a06      	ldr	r2, [pc, #24]	; (8004128 <vApplicationGetTimerTaskMemory+0x30>)
 800410e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004116:	601a      	str	r2, [r3, #0]
}
 8004118:	bf00      	nop
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	20000b18 	.word	0x20000b18
 8004128:	20000bd4 	.word	0x20000bd4

0800412c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f103 0208 	add.w	r2, r3, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f04f 32ff 	mov.w	r2, #4294967295
 8004144:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f103 0208 	add.w	r2, r3, #8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f103 0208 	add.w	r2, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	601a      	str	r2, [r3, #0]
}
 80041c2:	bf00      	nop
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d103      	bne.n	80041ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e00c      	b.n	8004208 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3308      	adds	r3, #8
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e002      	b.n	80041fc <vListInsert+0x2e>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	d2f6      	bcs.n	80041f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	601a      	str	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6892      	ldr	r2, [r2, #8]
 8004256:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6852      	ldr	r2, [r2, #4]
 8004260:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	d103      	bne.n	8004274 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1e5a      	subs	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10c      	bne.n	80042c2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	b672      	cpsid	i
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	b662      	cpsie	i
 80042bc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80042c2:	f002 f8a3 	bl	800640c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	68f9      	ldr	r1, [r7, #12]
 80042d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	441a      	add	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	3b01      	subs	r3, #1
 80042f4:	68f9      	ldr	r1, [r7, #12]
 80042f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	441a      	add	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	22ff      	movs	r2, #255	; 0xff
 800430e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d114      	bne.n	8004342 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01a      	beq.n	8004356 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3310      	adds	r3, #16
 8004324:	4618      	mov	r0, r3
 8004326:	f001 f95d 	bl	80055e4 <xTaskRemoveFromEventList>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d012      	beq.n	8004356 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <xQueueGenericReset+0xd0>)
 8004332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	e009      	b.n	8004356 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3310      	adds	r3, #16
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fef0 	bl	800412c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3324      	adds	r3, #36	; 0x24
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff feeb 	bl	800412c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004356:	f002 f88d 	bl	8006474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800435a:	2301      	movs	r3, #1
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	e000ed04 	.word	0xe000ed04

08004368 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08e      	sub	sp, #56	; 0x38
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10c      	bne.n	8004396 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	b672      	cpsid	i
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	b662      	cpsie	i
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10c      	bne.n	80043b6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	b672      	cpsid	i
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	b662      	cpsie	i
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <xQueueGenericCreateStatic+0x5a>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <xQueueGenericCreateStatic+0x5e>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <xQueueGenericCreateStatic+0x60>
 80043c6:	2300      	movs	r3, #0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10c      	bne.n	80043e6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	b672      	cpsid	i
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	b662      	cpsie	i
 80043e0:	623b      	str	r3, [r7, #32]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <xQueueGenericCreateStatic+0x8a>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueGenericCreateStatic+0x8e>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueGenericCreateStatic+0x90>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10c      	bne.n	8004416 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	b672      	cpsid	i
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	b662      	cpsie	i
 8004410:	61fb      	str	r3, [r7, #28]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004416:	2350      	movs	r3, #80	; 0x50
 8004418:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b50      	cmp	r3, #80	; 0x50
 800441e:	d00c      	beq.n	800443a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	b672      	cpsid	i
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	b662      	cpsie	i
 8004434:	61bb      	str	r3, [r7, #24]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800443a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00d      	beq.n	8004462 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800444e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f805 	bl	800446c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004464:	4618      	mov	r0, r3
 8004466:	3730      	adds	r7, #48	; 0x30
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d103      	bne.n	8004488 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e002      	b.n	800448e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800449a:	2101      	movs	r1, #1
 800449c:	69b8      	ldr	r0, [r7, #24]
 800449e:	f7ff fef9 	bl	8004294 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	78fa      	ldrb	r2, [r7, #3]
 80044a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08e      	sub	sp, #56	; 0x38
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044c2:	2300      	movs	r3, #0
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10c      	bne.n	80044ea <xQueueGenericSend+0x36>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	b672      	cpsid	i
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	b662      	cpsie	i
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <xQueueGenericSend+0x44>
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <xQueueGenericSend+0x48>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <xQueueGenericSend+0x4a>
 80044fc:	2300      	movs	r3, #0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10c      	bne.n	800451c <xQueueGenericSend+0x68>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	b672      	cpsid	i
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	b662      	cpsie	i
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d103      	bne.n	800452a <xQueueGenericSend+0x76>
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <xQueueGenericSend+0x7a>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueGenericSend+0x7c>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10c      	bne.n	800454e <xQueueGenericSend+0x9a>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	b672      	cpsid	i
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	b662      	cpsie	i
 8004548:	623b      	str	r3, [r7, #32]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800454e:	f001 fa13 	bl	8005978 <xTaskGetSchedulerState>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d102      	bne.n	800455e <xQueueGenericSend+0xaa>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <xQueueGenericSend+0xae>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <xQueueGenericSend+0xb0>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10c      	bne.n	8004582 <xQueueGenericSend+0xce>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	b672      	cpsid	i
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	b662      	cpsie	i
 800457c:	61fb      	str	r3, [r7, #28]
}
 800457e:	bf00      	nop
 8004580:	e7fe      	b.n	8004580 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004582:	f001 ff43 	bl	800640c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	429a      	cmp	r2, r3
 8004590:	d302      	bcc.n	8004598 <xQueueGenericSend+0xe4>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d129      	bne.n	80045ec <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800459e:	f000 fa15 	bl	80049cc <prvCopyDataToQueue>
 80045a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d010      	beq.n	80045ce <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	3324      	adds	r3, #36	; 0x24
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 f817 	bl	80055e4 <xTaskRemoveFromEventList>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d013      	beq.n	80045e4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045bc:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <xQueueGenericSend+0x208>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	e00a      	b.n	80045e4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045d4:	4b39      	ldr	r3, [pc, #228]	; (80046bc <xQueueGenericSend+0x208>)
 80045d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045e4:	f001 ff46 	bl	8006474 <vPortExitCritical>
				return pdPASS;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e063      	b.n	80046b4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045f2:	f001 ff3f 	bl	8006474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e05c      	b.n	80046b4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d106      	bne.n	800460e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004600:	f107 0314 	add.w	r3, r7, #20
 8004604:	4618      	mov	r0, r3
 8004606:	f001 f853 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800460a:	2301      	movs	r3, #1
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800460e:	f001 ff31 	bl	8006474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004612:	f000 fdb3 	bl	800517c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004616:	f001 fef9 	bl	800640c <vPortEnterCritical>
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004620:	b25b      	sxtb	r3, r3
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d103      	bne.n	8004630 <xQueueGenericSend+0x17c>
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004636:	b25b      	sxtb	r3, r3
 8004638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463c:	d103      	bne.n	8004646 <xQueueGenericSend+0x192>
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004646:	f001 ff15 	bl	8006474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800464a:	1d3a      	adds	r2, r7, #4
 800464c:	f107 0314 	add.w	r3, r7, #20
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f001 f842 	bl	80056dc <xTaskCheckForTimeOut>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d124      	bne.n	80046a8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800465e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004660:	f000 faac 	bl	8004bbc <prvIsQueueFull>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d018      	beq.n	800469c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	3310      	adds	r3, #16
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f000 ff62 	bl	800553c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800467a:	f000 fa37 	bl	8004aec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800467e:	f000 fd8b 	bl	8005198 <xTaskResumeAll>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	f47f af7c 	bne.w	8004582 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <xQueueGenericSend+0x208>)
 800468c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	e772      	b.n	8004582 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800469c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800469e:	f000 fa25 	bl	8004aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046a2:	f000 fd79 	bl	8005198 <xTaskResumeAll>
 80046a6:	e76c      	b.n	8004582 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046aa:	f000 fa1f 	bl	8004aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ae:	f000 fd73 	bl	8005198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3738      	adds	r7, #56	; 0x38
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10c      	bne.n	80046f2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	b672      	cpsid	i
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	b662      	cpsie	i
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <xQueueGenericSendFromISR+0x40>
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <xQueueGenericSendFromISR+0x44>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <xQueueGenericSendFromISR+0x46>
 8004704:	2300      	movs	r3, #0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10c      	bne.n	8004724 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	b672      	cpsid	i
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	b662      	cpsie	i
 800471e:	623b      	str	r3, [r7, #32]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d103      	bne.n	8004732 <xQueueGenericSendFromISR+0x72>
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <xQueueGenericSendFromISR+0x76>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueGenericSendFromISR+0x78>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10c      	bne.n	8004756 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	b672      	cpsid	i
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	b662      	cpsie	i
 8004750:	61fb      	str	r3, [r7, #28]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004756:	f001 ff41 	bl	80065dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800475a:	f3ef 8211 	mrs	r2, BASEPRI
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	b672      	cpsid	i
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	b662      	cpsie	i
 8004772:	61ba      	str	r2, [r7, #24]
 8004774:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004776:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <xQueueGenericSendFromISR+0xcc>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d12c      	bne.n	80047e6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800479c:	f000 f916 	bl	80049cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d112      	bne.n	80047d0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d016      	beq.n	80047e0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	3324      	adds	r3, #36	; 0x24
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 ff14 	bl	80055e4 <xTaskRemoveFromEventList>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00e      	beq.n	80047e0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00b      	beq.n	80047e0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e007      	b.n	80047e0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047d4:	3301      	adds	r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	b25a      	sxtb	r2, r3
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047e0:	2301      	movs	r3, #1
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80047e4:	e001      	b.n	80047ea <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3738      	adds	r7, #56	; 0x38
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08c      	sub	sp, #48	; 0x30
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800480c:	2300      	movs	r3, #0
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10c      	bne.n	8004834 <xQueueReceive+0x34>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	b672      	cpsid	i
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	b662      	cpsie	i
 800482e:	623b      	str	r3, [r7, #32]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <xQueueReceive+0x42>
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <xQueueReceive+0x46>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <xQueueReceive+0x48>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10c      	bne.n	8004866 <xQueueReceive+0x66>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004850:	b672      	cpsid	i
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	b662      	cpsie	i
 8004860:	61fb      	str	r3, [r7, #28]
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004866:	f001 f887 	bl	8005978 <xTaskGetSchedulerState>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <xQueueReceive+0x76>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <xQueueReceive+0x7a>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <xQueueReceive+0x7c>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10c      	bne.n	800489a <xQueueReceive+0x9a>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	b672      	cpsid	i
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	b662      	cpsie	i
 8004894:	61bb      	str	r3, [r7, #24]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800489a:	f001 fdb7 	bl	800640c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d01f      	beq.n	80048ea <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ae:	f000 f8f7 	bl	8004aa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	1e5a      	subs	r2, r3, #1
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00f      	beq.n	80048e2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	3310      	adds	r3, #16
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fe8c 	bl	80055e4 <xTaskRemoveFromEventList>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048d2:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <xQueueReceive+0x1c8>)
 80048d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048e2:	f001 fdc7 	bl	8006474 <vPortExitCritical>
				return pdPASS;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e069      	b.n	80049be <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048f0:	f001 fdc0 	bl	8006474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048f4:	2300      	movs	r3, #0
 80048f6:	e062      	b.n	80049be <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048fe:	f107 0310 	add.w	r3, r7, #16
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fed4 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004908:	2301      	movs	r3, #1
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800490c:	f001 fdb2 	bl	8006474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004910:	f000 fc34 	bl	800517c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004914:	f001 fd7a 	bl	800640c <vPortEnterCritical>
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800491e:	b25b      	sxtb	r3, r3
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d103      	bne.n	800492e <xQueueReceive+0x12e>
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004934:	b25b      	sxtb	r3, r3
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d103      	bne.n	8004944 <xQueueReceive+0x144>
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004944:	f001 fd96 	bl	8006474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004948:	1d3a      	adds	r2, r7, #4
 800494a:	f107 0310 	add.w	r3, r7, #16
 800494e:	4611      	mov	r1, r2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fec3 	bl	80056dc <xTaskCheckForTimeOut>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d123      	bne.n	80049a4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800495c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495e:	f000 f917 	bl	8004b90 <prvIsQueueEmpty>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d017      	beq.n	8004998 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	3324      	adds	r3, #36	; 0x24
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fde3 	bl	800553c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004976:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004978:	f000 f8b8 	bl	8004aec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800497c:	f000 fc0c 	bl	8005198 <xTaskResumeAll>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d189      	bne.n	800489a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <xQueueReceive+0x1c8>)
 8004988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	e780      	b.n	800489a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800499a:	f000 f8a7 	bl	8004aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800499e:	f000 fbfb 	bl	8005198 <xTaskResumeAll>
 80049a2:	e77a      	b.n	800489a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a6:	f000 f8a1 	bl	8004aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049aa:	f000 fbf5 	bl	8005198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b0:	f000 f8ee 	bl	8004b90 <prvIsQueueEmpty>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f43f af6f 	beq.w	800489a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3730      	adds	r7, #48	; 0x30
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10d      	bne.n	8004a06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d14d      	bne.n	8004a8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 ffdc 	bl	80059b4 <xTaskPriorityDisinherit>
 80049fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	e043      	b.n	8004a8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d119      	bne.n	8004a40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6858      	ldr	r0, [r3, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	461a      	mov	r2, r3
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	f002 f82e 	bl	8006a78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	441a      	add	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d32b      	bcc.n	8004a8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	e026      	b.n	8004a8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68d8      	ldr	r0, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	f002 f814 	bl	8006a78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	425b      	negs	r3, r3
 8004a5a:	441a      	add	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d207      	bcs.n	8004a7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	425b      	negs	r3, r3
 8004a76:	441a      	add	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d105      	bne.n	8004a8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a96:	697b      	ldr	r3, [r7, #20]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d018      	beq.n	8004ae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	441a      	add	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d303      	bcc.n	8004ad4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68d9      	ldr	r1, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	461a      	mov	r2, r3
 8004ade:	6838      	ldr	r0, [r7, #0]
 8004ae0:	f001 ffca 	bl	8006a78 <memcpy>
	}
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004af4:	f001 fc8a 	bl	800640c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b00:	e011      	b.n	8004b26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d012      	beq.n	8004b30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3324      	adds	r3, #36	; 0x24
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fd68 	bl	80055e4 <xTaskRemoveFromEventList>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b1a:	f000 fe45 	bl	80057a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	dce9      	bgt.n	8004b02 <prvUnlockQueue+0x16>
 8004b2e:	e000      	b.n	8004b32 <prvUnlockQueue+0x46>
					break;
 8004b30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	22ff      	movs	r2, #255	; 0xff
 8004b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b3a:	f001 fc9b 	bl	8006474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b3e:	f001 fc65 	bl	800640c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b4a:	e011      	b.n	8004b70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d012      	beq.n	8004b7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3310      	adds	r3, #16
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fd43 	bl	80055e4 <xTaskRemoveFromEventList>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b64:	f000 fe20 	bl	80057a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b68:	7bbb      	ldrb	r3, [r7, #14]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	dce9      	bgt.n	8004b4c <prvUnlockQueue+0x60>
 8004b78:	e000      	b.n	8004b7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	22ff      	movs	r2, #255	; 0xff
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b84:	f001 fc76 	bl	8006474 <vPortExitCritical>
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b98:	f001 fc38 	bl	800640c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e001      	b.n	8004bae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bae:	f001 fc61 	bl	8006474 <vPortExitCritical>

	return xReturn;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bc4:	f001 fc22 	bl	800640c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d102      	bne.n	8004bda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e001      	b.n	8004bde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bde:	f001 fc49 	bl	8006474 <vPortExitCritical>

	return xReturn;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e014      	b.n	8004c26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004bfc:	4a0f      	ldr	r2, [pc, #60]	; (8004c3c <vQueueAddToRegistry+0x50>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c08:	490c      	ldr	r1, [pc, #48]	; (8004c3c <vQueueAddToRegistry+0x50>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c12:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <vQueueAddToRegistry+0x50>)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c1e:	e006      	b.n	8004c2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b07      	cmp	r3, #7
 8004c2a:	d9e7      	bls.n	8004bfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000fd4 	.word	0x20000fd4

08004c40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c50:	f001 fbdc 	bl	800640c <vPortEnterCritical>
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c5a:	b25b      	sxtb	r3, r3
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d103      	bne.n	8004c6a <vQueueWaitForMessageRestricted+0x2a>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c70:	b25b      	sxtb	r3, r3
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d103      	bne.n	8004c80 <vQueueWaitForMessageRestricted+0x40>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c80:	f001 fbf8 	bl	8006474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3324      	adds	r3, #36	; 0x24
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fc77 	bl	8005588 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c9a:	6978      	ldr	r0, [r7, #20]
 8004c9c:	f7ff ff26 	bl	8004aec <prvUnlockQueue>
	}
 8004ca0:	bf00      	nop
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af04      	add	r7, sp, #16
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10c      	bne.n	8004cd6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc0:	b672      	cpsid	i
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	b662      	cpsie	i
 8004cd0:	623b      	str	r3, [r7, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10c      	bne.n	8004cf6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	b672      	cpsid	i
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	b662      	cpsie	i
 8004cf0:	61fb      	str	r3, [r7, #28]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cf6:	23bc      	movs	r3, #188	; 0xbc
 8004cf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2bbc      	cmp	r3, #188	; 0xbc
 8004cfe:	d00c      	beq.n	8004d1a <xTaskCreateStatic+0x72>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	b672      	cpsid	i
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	b662      	cpsie	i
 8004d14:	61bb      	str	r3, [r7, #24]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01e      	beq.n	8004d60 <xTaskCreateStatic+0xb8>
 8004d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	9303      	str	r3, [sp, #12]
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	9302      	str	r3, [sp, #8]
 8004d42:	f107 0314 	add.w	r3, r7, #20
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f850 	bl	8004df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d5a:	f000 f8f5 	bl	8004f48 <prvAddNewTaskToReadyList>
 8004d5e:	e001      	b.n	8004d64 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d64:	697b      	ldr	r3, [r7, #20]
	}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3728      	adds	r7, #40	; 0x28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b08c      	sub	sp, #48	; 0x30
 8004d72:	af04      	add	r7, sp, #16
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 fc6e 	bl	8006664 <pvPortMalloc>
 8004d88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00e      	beq.n	8004dae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d90:	20bc      	movs	r0, #188	; 0xbc
 8004d92:	f001 fc67 	bl	8006664 <pvPortMalloc>
 8004d96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
 8004da4:	e005      	b.n	8004db2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004da6:	6978      	ldr	r0, [r7, #20]
 8004da8:	f001 fd26 	bl	80067f8 <vPortFree>
 8004dac:	e001      	b.n	8004db2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d017      	beq.n	8004de8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9303      	str	r3, [sp, #12]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	9302      	str	r3, [sp, #8]
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f80e 	bl	8004df8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ddc:	69f8      	ldr	r0, [r7, #28]
 8004dde:	f000 f8b3 	bl	8004f48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004de2:	2301      	movs	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	e002      	b.n	8004dee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004de8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dee:	69bb      	ldr	r3, [r7, #24]
	}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	461a      	mov	r2, r3
 8004e10:	21a5      	movs	r1, #165	; 0xa5
 8004e12:	f001 fe3f 	bl	8006a94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004e20:	440b      	add	r3, r1
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	b672      	cpsid	i
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	b662      	cpsie	i
 8004e4e:	617b      	str	r3, [r7, #20]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01f      	beq.n	8004e9a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e012      	b.n	8004e86 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	7819      	ldrb	r1, [r3, #0]
 8004e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3334      	adds	r3, #52	; 0x34
 8004e70:	460a      	mov	r2, r1
 8004e72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d006      	beq.n	8004e8e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	3301      	adds	r3, #1
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	2b0f      	cmp	r3, #15
 8004e8a:	d9e9      	bls.n	8004e60 <prvInitialiseNewTask+0x68>
 8004e8c:	e000      	b.n	8004e90 <prvInitialiseNewTask+0x98>
			{
				break;
 8004e8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e98:	e003      	b.n	8004ea2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	2b37      	cmp	r3, #55	; 0x37
 8004ea6:	d901      	bls.n	8004eac <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ea8:	2337      	movs	r3, #55	; 0x37
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	2200      	movs	r2, #0
 8004ebc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff f952 	bl	800416c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	3318      	adds	r3, #24
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff f94d 	bl	800416c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	3354      	adds	r3, #84	; 0x54
 8004efc:	2260      	movs	r2, #96	; 0x60
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fdc7 	bl	8006a94 <memset>
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	4a0c      	ldr	r2, [pc, #48]	; (8004f3c <prvInitialiseNewTask+0x144>)
 8004f0a:	659a      	str	r2, [r3, #88]	; 0x58
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	4a0c      	ldr	r2, [pc, #48]	; (8004f40 <prvInitialiseNewTask+0x148>)
 8004f10:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	4a0b      	ldr	r2, [pc, #44]	; (8004f44 <prvInitialiseNewTask+0x14c>)
 8004f16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	69b8      	ldr	r0, [r7, #24]
 8004f1e:	f001 f96b 	bl	80061f8 <pxPortInitialiseStack>
 8004f22:	4602      	mov	r2, r0
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f34:	bf00      	nop
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	08006cc0 	.word	0x08006cc0
 8004f40:	08006ce0 	.word	0x08006ce0
 8004f44:	08006ca0 	.word	0x08006ca0

08004f48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f50:	f001 fa5c 	bl	800640c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f54:	4b2d      	ldr	r3, [pc, #180]	; (800500c <prvAddNewTaskToReadyList+0xc4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	4a2c      	ldr	r2, [pc, #176]	; (800500c <prvAddNewTaskToReadyList+0xc4>)
 8004f5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f5e:	4b2c      	ldr	r3, [pc, #176]	; (8005010 <prvAddNewTaskToReadyList+0xc8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f66:	4a2a      	ldr	r2, [pc, #168]	; (8005010 <prvAddNewTaskToReadyList+0xc8>)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f6c:	4b27      	ldr	r3, [pc, #156]	; (800500c <prvAddNewTaskToReadyList+0xc4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d110      	bne.n	8004f96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f74:	f000 fc3c 	bl	80057f0 <prvInitialiseTaskLists>
 8004f78:	e00d      	b.n	8004f96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f7a:	4b26      	ldr	r3, [pc, #152]	; (8005014 <prvAddNewTaskToReadyList+0xcc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f82:	4b23      	ldr	r3, [pc, #140]	; (8005010 <prvAddNewTaskToReadyList+0xc8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d802      	bhi.n	8004f96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f90:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <prvAddNewTaskToReadyList+0xc8>)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f96:	4b20      	ldr	r3, [pc, #128]	; (8005018 <prvAddNewTaskToReadyList+0xd0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <prvAddNewTaskToReadyList+0xd0>)
 8004f9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <prvAddNewTaskToReadyList+0xd0>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <prvAddNewTaskToReadyList+0xd4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d903      	bls.n	8004fbc <prvAddNewTaskToReadyList+0x74>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4a18      	ldr	r2, [pc, #96]	; (800501c <prvAddNewTaskToReadyList+0xd4>)
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4a15      	ldr	r2, [pc, #84]	; (8005020 <prvAddNewTaskToReadyList+0xd8>)
 8004fca:	441a      	add	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f7ff f8d7 	bl	8004186 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fd8:	f001 fa4c 	bl	8006474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <prvAddNewTaskToReadyList+0xcc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <prvAddNewTaskToReadyList+0xc8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d207      	bcs.n	8005002 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <prvAddNewTaskToReadyList+0xdc>)
 8004ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	200014e8 	.word	0x200014e8
 8005010:	20001014 	.word	0x20001014
 8005014:	200014f4 	.word	0x200014f4
 8005018:	20001504 	.word	0x20001504
 800501c:	200014f0 	.word	0x200014f0
 8005020:	20001018 	.word	0x20001018
 8005024:	e000ed04 	.word	0xe000ed04

08005028 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d019      	beq.n	800506e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800503a:	4b14      	ldr	r3, [pc, #80]	; (800508c <vTaskDelay+0x64>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00c      	beq.n	800505c <vTaskDelay+0x34>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	b672      	cpsid	i
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	b662      	cpsie	i
 8005056:	60bb      	str	r3, [r7, #8]
}
 8005058:	bf00      	nop
 800505a:	e7fe      	b.n	800505a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800505c:	f000 f88e 	bl	800517c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005060:	2100      	movs	r1, #0
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fd18 	bl	8005a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005068:	f000 f896 	bl	8005198 <xTaskResumeAll>
 800506c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d107      	bne.n	8005084 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <vTaskDelay+0x68>)
 8005076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005084:	bf00      	nop
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20001510 	.word	0x20001510
 8005090:	e000ed04 	.word	0xe000ed04

08005094 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050a2:	463a      	mov	r2, r7
 80050a4:	1d39      	adds	r1, r7, #4
 80050a6:	f107 0308 	add.w	r3, r7, #8
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f80a 	bl	80040c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	9202      	str	r2, [sp, #8]
 80050b8:	9301      	str	r3, [sp, #4]
 80050ba:	2300      	movs	r3, #0
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	2300      	movs	r3, #0
 80050c0:	460a      	mov	r2, r1
 80050c2:	4926      	ldr	r1, [pc, #152]	; (800515c <vTaskStartScheduler+0xc8>)
 80050c4:	4826      	ldr	r0, [pc, #152]	; (8005160 <vTaskStartScheduler+0xcc>)
 80050c6:	f7ff fdef 	bl	8004ca8 <xTaskCreateStatic>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4a25      	ldr	r2, [pc, #148]	; (8005164 <vTaskStartScheduler+0xd0>)
 80050ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050d0:	4b24      	ldr	r3, [pc, #144]	; (8005164 <vTaskStartScheduler+0xd0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050d8:	2301      	movs	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e001      	b.n	80050e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d102      	bne.n	80050ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050e8:	f000 fd2a 	bl	8005b40 <xTimerCreateTimerTask>
 80050ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d11d      	bne.n	8005130 <vTaskStartScheduler+0x9c>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	b672      	cpsid	i
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	b662      	cpsie	i
 8005108:	613b      	str	r3, [r7, #16]
}
 800510a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <vTaskStartScheduler+0xd4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3354      	adds	r3, #84	; 0x54
 8005112:	4a16      	ldr	r2, [pc, #88]	; (800516c <vTaskStartScheduler+0xd8>)
 8005114:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005116:	4b16      	ldr	r3, [pc, #88]	; (8005170 <vTaskStartScheduler+0xdc>)
 8005118:	f04f 32ff 	mov.w	r2, #4294967295
 800511c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800511e:	4b15      	ldr	r3, [pc, #84]	; (8005174 <vTaskStartScheduler+0xe0>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005124:	4b14      	ldr	r3, [pc, #80]	; (8005178 <vTaskStartScheduler+0xe4>)
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800512a:	f001 f8f1 	bl	8006310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800512e:	e010      	b.n	8005152 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d10c      	bne.n	8005152 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	b672      	cpsid	i
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	b662      	cpsie	i
 800514c:	60fb      	str	r3, [r7, #12]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <vTaskStartScheduler+0xbc>
}
 8005152:	bf00      	nop
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	08006c4c 	.word	0x08006c4c
 8005160:	080057c1 	.word	0x080057c1
 8005164:	2000150c 	.word	0x2000150c
 8005168:	20001014 	.word	0x20001014
 800516c:	20000010 	.word	0x20000010
 8005170:	20001508 	.word	0x20001508
 8005174:	200014f4 	.word	0x200014f4
 8005178:	200014ec 	.word	0x200014ec

0800517c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <vTaskSuspendAll+0x18>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	4a03      	ldr	r2, [pc, #12]	; (8005194 <vTaskSuspendAll+0x18>)
 8005188:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800518a:	bf00      	nop
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	20001510 	.word	0x20001510

08005198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051a6:	4b43      	ldr	r3, [pc, #268]	; (80052b4 <xTaskResumeAll+0x11c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10c      	bne.n	80051c8 <xTaskResumeAll+0x30>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	b672      	cpsid	i
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	b662      	cpsie	i
 80051c2:	603b      	str	r3, [r7, #0]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051c8:	f001 f920 	bl	800640c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051cc:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <xTaskResumeAll+0x11c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	4a38      	ldr	r2, [pc, #224]	; (80052b4 <xTaskResumeAll+0x11c>)
 80051d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051d6:	4b37      	ldr	r3, [pc, #220]	; (80052b4 <xTaskResumeAll+0x11c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d162      	bne.n	80052a4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <xTaskResumeAll+0x120>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d05e      	beq.n	80052a4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051e6:	e02f      	b.n	8005248 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e8:	4b34      	ldr	r3, [pc, #208]	; (80052bc <xTaskResumeAll+0x124>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3318      	adds	r3, #24
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff f823 	bl	8004240 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff f81e 	bl	8004240 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	4b2d      	ldr	r3, [pc, #180]	; (80052c0 <xTaskResumeAll+0x128>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d903      	bls.n	8005218 <xTaskResumeAll+0x80>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	4a2a      	ldr	r2, [pc, #168]	; (80052c0 <xTaskResumeAll+0x128>)
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4a27      	ldr	r2, [pc, #156]	; (80052c4 <xTaskResumeAll+0x12c>)
 8005226:	441a      	add	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f7fe ffa9 	bl	8004186 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	4b23      	ldr	r3, [pc, #140]	; (80052c8 <xTaskResumeAll+0x130>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	429a      	cmp	r2, r3
 8005240:	d302      	bcc.n	8005248 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <xTaskResumeAll+0x134>)
 8005244:	2201      	movs	r2, #1
 8005246:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005248:	4b1c      	ldr	r3, [pc, #112]	; (80052bc <xTaskResumeAll+0x124>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1cb      	bne.n	80051e8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005256:	f000 fb6f 	bl	8005938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <xTaskResumeAll+0x138>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d010      	beq.n	8005288 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005266:	f000 f847 	bl	80052f8 <xTaskIncrementTick>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005270:	4b16      	ldr	r3, [pc, #88]	; (80052cc <xTaskResumeAll+0x134>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3b01      	subs	r3, #1
 800527a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f1      	bne.n	8005266 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005282:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <xTaskResumeAll+0x138>)
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005288:	4b10      	ldr	r3, [pc, #64]	; (80052cc <xTaskResumeAll+0x134>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005290:	2301      	movs	r3, #1
 8005292:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <xTaskResumeAll+0x13c>)
 8005296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052a4:	f001 f8e6 	bl	8006474 <vPortExitCritical>

	return xAlreadyYielded;
 80052a8:	68bb      	ldr	r3, [r7, #8]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20001510 	.word	0x20001510
 80052b8:	200014e8 	.word	0x200014e8
 80052bc:	200014a8 	.word	0x200014a8
 80052c0:	200014f0 	.word	0x200014f0
 80052c4:	20001018 	.word	0x20001018
 80052c8:	20001014 	.word	0x20001014
 80052cc:	200014fc 	.word	0x200014fc
 80052d0:	200014f8 	.word	0x200014f8
 80052d4:	e000ed04 	.word	0xe000ed04

080052d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <xTaskGetTickCount+0x1c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052e4:	687b      	ldr	r3, [r7, #4]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	200014ec 	.word	0x200014ec

080052f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005302:	4b50      	ldr	r3, [pc, #320]	; (8005444 <xTaskIncrementTick+0x14c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	f040 808b 	bne.w	8005422 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800530c:	4b4e      	ldr	r3, [pc, #312]	; (8005448 <xTaskIncrementTick+0x150>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005314:	4a4c      	ldr	r2, [pc, #304]	; (8005448 <xTaskIncrementTick+0x150>)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d122      	bne.n	8005366 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005320:	4b4a      	ldr	r3, [pc, #296]	; (800544c <xTaskIncrementTick+0x154>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00c      	beq.n	8005344 <xTaskIncrementTick+0x4c>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	b672      	cpsid	i
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	b662      	cpsie	i
 800533e:	603b      	str	r3, [r7, #0]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <xTaskIncrementTick+0x4a>
 8005344:	4b41      	ldr	r3, [pc, #260]	; (800544c <xTaskIncrementTick+0x154>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	4b41      	ldr	r3, [pc, #260]	; (8005450 <xTaskIncrementTick+0x158>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a3f      	ldr	r2, [pc, #252]	; (800544c <xTaskIncrementTick+0x154>)
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	4a3f      	ldr	r2, [pc, #252]	; (8005450 <xTaskIncrementTick+0x158>)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4b3e      	ldr	r3, [pc, #248]	; (8005454 <xTaskIncrementTick+0x15c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	4a3d      	ldr	r2, [pc, #244]	; (8005454 <xTaskIncrementTick+0x15c>)
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	f000 fae9 	bl	8005938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005366:	4b3c      	ldr	r3, [pc, #240]	; (8005458 <xTaskIncrementTick+0x160>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	429a      	cmp	r2, r3
 800536e:	d349      	bcc.n	8005404 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005370:	4b36      	ldr	r3, [pc, #216]	; (800544c <xTaskIncrementTick+0x154>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d104      	bne.n	8005384 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800537a:	4b37      	ldr	r3, [pc, #220]	; (8005458 <xTaskIncrementTick+0x160>)
 800537c:	f04f 32ff 	mov.w	r2, #4294967295
 8005380:	601a      	str	r2, [r3, #0]
					break;
 8005382:	e03f      	b.n	8005404 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005384:	4b31      	ldr	r3, [pc, #196]	; (800544c <xTaskIncrementTick+0x154>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d203      	bcs.n	80053a4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800539c:	4a2e      	ldr	r2, [pc, #184]	; (8005458 <xTaskIncrementTick+0x160>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053a2:	e02f      	b.n	8005404 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe ff49 	bl	8004240 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	3318      	adds	r3, #24
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe ff40 	bl	8004240 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <xTaskIncrementTick+0x164>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d903      	bls.n	80053d4 <xTaskIncrementTick+0xdc>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a22      	ldr	r2, [pc, #136]	; (800545c <xTaskIncrementTick+0x164>)
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <xTaskIncrementTick+0x168>)
 80053e2:	441a      	add	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7fe fecb 	bl	8004186 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <xTaskIncrementTick+0x16c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d3b8      	bcc.n	8005370 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80053fe:	2301      	movs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005402:	e7b5      	b.n	8005370 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005404:	4b17      	ldr	r3, [pc, #92]	; (8005464 <xTaskIncrementTick+0x16c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	4915      	ldr	r1, [pc, #84]	; (8005460 <xTaskIncrementTick+0x168>)
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d907      	bls.n	800542c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800541c:	2301      	movs	r3, #1
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e004      	b.n	800542c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005422:	4b11      	ldr	r3, [pc, #68]	; (8005468 <xTaskIncrementTick+0x170>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	4a0f      	ldr	r2, [pc, #60]	; (8005468 <xTaskIncrementTick+0x170>)
 800542a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <xTaskIncrementTick+0x174>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005438:	697b      	ldr	r3, [r7, #20]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20001510 	.word	0x20001510
 8005448:	200014ec 	.word	0x200014ec
 800544c:	200014a0 	.word	0x200014a0
 8005450:	200014a4 	.word	0x200014a4
 8005454:	20001500 	.word	0x20001500
 8005458:	20001508 	.word	0x20001508
 800545c:	200014f0 	.word	0x200014f0
 8005460:	20001018 	.word	0x20001018
 8005464:	20001014 	.word	0x20001014
 8005468:	200014f8 	.word	0x200014f8
 800546c:	200014fc 	.word	0x200014fc

08005470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005476:	4b2b      	ldr	r3, [pc, #172]	; (8005524 <vTaskSwitchContext+0xb4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800547e:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <vTaskSwitchContext+0xb8>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005484:	e048      	b.n	8005518 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005486:	4b28      	ldr	r3, [pc, #160]	; (8005528 <vTaskSwitchContext+0xb8>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800548c:	4b27      	ldr	r3, [pc, #156]	; (800552c <vTaskSwitchContext+0xbc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e012      	b.n	80054ba <vTaskSwitchContext+0x4a>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10c      	bne.n	80054b4 <vTaskSwitchContext+0x44>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	b672      	cpsid	i
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	b662      	cpsie	i
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <vTaskSwitchContext+0x42>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	491d      	ldr	r1, [pc, #116]	; (8005530 <vTaskSwitchContext+0xc0>)
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0e2      	beq.n	8005494 <vTaskSwitchContext+0x24>
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4a15      	ldr	r2, [pc, #84]	; (8005530 <vTaskSwitchContext+0xc0>)
 80054da:	4413      	add	r3, r2
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	605a      	str	r2, [r3, #4]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	3308      	adds	r3, #8
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d104      	bne.n	80054fe <vTaskSwitchContext+0x8e>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	4a0b      	ldr	r2, [pc, #44]	; (8005534 <vTaskSwitchContext+0xc4>)
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	4a08      	ldr	r2, [pc, #32]	; (800552c <vTaskSwitchContext+0xbc>)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800550e:	4b09      	ldr	r3, [pc, #36]	; (8005534 <vTaskSwitchContext+0xc4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3354      	adds	r3, #84	; 0x54
 8005514:	4a08      	ldr	r2, [pc, #32]	; (8005538 <vTaskSwitchContext+0xc8>)
 8005516:	6013      	str	r3, [r2, #0]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	20001510 	.word	0x20001510
 8005528:	200014fc 	.word	0x200014fc
 800552c:	200014f0 	.word	0x200014f0
 8005530:	20001018 	.word	0x20001018
 8005534:	20001014 	.word	0x20001014
 8005538:	20000010 	.word	0x20000010

0800553c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10c      	bne.n	8005566 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	b672      	cpsid	i
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	b662      	cpsie	i
 8005560:	60fb      	str	r3, [r7, #12]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <vTaskPlaceOnEventList+0x48>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3318      	adds	r3, #24
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fe fe2d 	bl	80041ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005574:	2101      	movs	r1, #1
 8005576:	6838      	ldr	r0, [r7, #0]
 8005578:	f000 fa8e 	bl	8005a98 <prvAddCurrentTaskToDelayedList>
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20001014 	.word	0x20001014

08005588 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10c      	bne.n	80055b4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	b672      	cpsid	i
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	b662      	cpsie	i
 80055ae:	617b      	str	r3, [r7, #20]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <vTaskPlaceOnEventListRestricted+0x58>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3318      	adds	r3, #24
 80055ba:	4619      	mov	r1, r3
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7fe fde2 	bl	8004186 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295
 80055cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	68b8      	ldr	r0, [r7, #8]
 80055d2:	f000 fa61 	bl	8005a98 <prvAddCurrentTaskToDelayedList>
	}
 80055d6:	bf00      	nop
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20001014 	.word	0x20001014

080055e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10c      	bne.n	8005614 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	b672      	cpsid	i
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	b662      	cpsie	i
 800560e:	60fb      	str	r3, [r7, #12]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	3318      	adds	r3, #24
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe fe11 	bl	8004240 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800561e:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <xTaskRemoveFromEventList+0xb4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d11d      	bne.n	8005662 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3304      	adds	r3, #4
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fe08 	bl	8004240 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4b19      	ldr	r3, [pc, #100]	; (800569c <xTaskRemoveFromEventList+0xb8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d903      	bls.n	8005644 <xTaskRemoveFromEventList+0x60>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4a16      	ldr	r2, [pc, #88]	; (800569c <xTaskRemoveFromEventList+0xb8>)
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <xTaskRemoveFromEventList+0xbc>)
 8005652:	441a      	add	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f7fe fd93 	bl	8004186 <vListInsertEnd>
 8005660:	e005      	b.n	800566e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3318      	adds	r3, #24
 8005666:	4619      	mov	r1, r3
 8005668:	480e      	ldr	r0, [pc, #56]	; (80056a4 <xTaskRemoveFromEventList+0xc0>)
 800566a:	f7fe fd8c 	bl	8004186 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <xTaskRemoveFromEventList+0xc4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	429a      	cmp	r2, r3
 800567a:	d905      	bls.n	8005688 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <xTaskRemoveFromEventList+0xc8>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e001      	b.n	800568c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800568c:	697b      	ldr	r3, [r7, #20]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20001510 	.word	0x20001510
 800569c:	200014f0 	.word	0x200014f0
 80056a0:	20001018 	.word	0x20001018
 80056a4:	200014a8 	.word	0x200014a8
 80056a8:	20001014 	.word	0x20001014
 80056ac:	200014fc 	.word	0x200014fc

080056b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <vTaskInternalSetTimeOutState+0x24>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <vTaskInternalSetTimeOutState+0x28>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	605a      	str	r2, [r3, #4]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	20001500 	.word	0x20001500
 80056d8:	200014ec 	.word	0x200014ec

080056dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10c      	bne.n	8005706 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	b672      	cpsid	i
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	b662      	cpsie	i
 8005700:	613b      	str	r3, [r7, #16]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10c      	bne.n	8005726 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	b672      	cpsid	i
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	b662      	cpsie	i
 8005720:	60fb      	str	r3, [r7, #12]
}
 8005722:	bf00      	nop
 8005724:	e7fe      	b.n	8005724 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005726:	f000 fe71 	bl	800640c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <xTaskCheckForTimeOut+0xc4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d102      	bne.n	800574a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e023      	b.n	8005792 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <xTaskCheckForTimeOut+0xc8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d007      	beq.n	8005766 <xTaskCheckForTimeOut+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	429a      	cmp	r2, r3
 800575e:	d302      	bcc.n	8005766 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	61fb      	str	r3, [r7, #28]
 8005764:	e015      	b.n	8005792 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	429a      	cmp	r2, r3
 800576e:	d20b      	bcs.n	8005788 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	1ad2      	subs	r2, r2, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ff97 	bl	80056b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	e004      	b.n	8005792 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800578e:	2301      	movs	r3, #1
 8005790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005792:	f000 fe6f 	bl	8006474 <vPortExitCritical>

	return xReturn;
 8005796:	69fb      	ldr	r3, [r7, #28]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	200014ec 	.word	0x200014ec
 80057a4:	20001500 	.word	0x20001500

080057a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057ac:	4b03      	ldr	r3, [pc, #12]	; (80057bc <vTaskMissedYield+0x14>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
}
 80057b2:	bf00      	nop
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	200014fc 	.word	0x200014fc

080057c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057c8:	f000 f852 	bl	8005870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <prvIdleTask+0x28>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d9f9      	bls.n	80057c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <prvIdleTask+0x2c>)
 80057d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057e4:	e7f0      	b.n	80057c8 <prvIdleTask+0x8>
 80057e6:	bf00      	nop
 80057e8:	20001018 	.word	0x20001018
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057f6:	2300      	movs	r3, #0
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	e00c      	b.n	8005816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4a12      	ldr	r2, [pc, #72]	; (8005850 <prvInitialiseTaskLists+0x60>)
 8005808:	4413      	add	r3, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fc8e 	bl	800412c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3301      	adds	r3, #1
 8005814:	607b      	str	r3, [r7, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b37      	cmp	r3, #55	; 0x37
 800581a:	d9ef      	bls.n	80057fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800581c:	480d      	ldr	r0, [pc, #52]	; (8005854 <prvInitialiseTaskLists+0x64>)
 800581e:	f7fe fc85 	bl	800412c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005822:	480d      	ldr	r0, [pc, #52]	; (8005858 <prvInitialiseTaskLists+0x68>)
 8005824:	f7fe fc82 	bl	800412c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005828:	480c      	ldr	r0, [pc, #48]	; (800585c <prvInitialiseTaskLists+0x6c>)
 800582a:	f7fe fc7f 	bl	800412c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800582e:	480c      	ldr	r0, [pc, #48]	; (8005860 <prvInitialiseTaskLists+0x70>)
 8005830:	f7fe fc7c 	bl	800412c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005834:	480b      	ldr	r0, [pc, #44]	; (8005864 <prvInitialiseTaskLists+0x74>)
 8005836:	f7fe fc79 	bl	800412c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <prvInitialiseTaskLists+0x78>)
 800583c:	4a05      	ldr	r2, [pc, #20]	; (8005854 <prvInitialiseTaskLists+0x64>)
 800583e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <prvInitialiseTaskLists+0x7c>)
 8005842:	4a05      	ldr	r2, [pc, #20]	; (8005858 <prvInitialiseTaskLists+0x68>)
 8005844:	601a      	str	r2, [r3, #0]
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20001018 	.word	0x20001018
 8005854:	20001478 	.word	0x20001478
 8005858:	2000148c 	.word	0x2000148c
 800585c:	200014a8 	.word	0x200014a8
 8005860:	200014bc 	.word	0x200014bc
 8005864:	200014d4 	.word	0x200014d4
 8005868:	200014a0 	.word	0x200014a0
 800586c:	200014a4 	.word	0x200014a4

08005870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005876:	e019      	b.n	80058ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005878:	f000 fdc8 	bl	800640c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587c:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <prvCheckTasksWaitingTermination+0x50>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	4618      	mov	r0, r3
 800588a:	f7fe fcd9 	bl	8004240 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <prvCheckTasksWaitingTermination+0x54>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3b01      	subs	r3, #1
 8005894:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <prvCheckTasksWaitingTermination+0x54>)
 8005896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <prvCheckTasksWaitingTermination+0x58>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3b01      	subs	r3, #1
 800589e:	4a0a      	ldr	r2, [pc, #40]	; (80058c8 <prvCheckTasksWaitingTermination+0x58>)
 80058a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058a2:	f000 fde7 	bl	8006474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f810 	bl	80058cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <prvCheckTasksWaitingTermination+0x58>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e1      	bne.n	8005878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200014bc 	.word	0x200014bc
 80058c4:	200014e8 	.word	0x200014e8
 80058c8:	200014d0 	.word	0x200014d0

080058cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3354      	adds	r3, #84	; 0x54
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 f8f1 	bl	8006ac0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d108      	bne.n	80058fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 ff83 	bl	80067f8 <vPortFree>
				vPortFree( pxTCB );
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 ff80 	bl	80067f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058f8:	e01a      	b.n	8005930 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005900:	2b01      	cmp	r3, #1
 8005902:	d103      	bne.n	800590c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 ff77 	bl	80067f8 <vPortFree>
	}
 800590a:	e011      	b.n	8005930 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005912:	2b02      	cmp	r3, #2
 8005914:	d00c      	beq.n	8005930 <prvDeleteTCB+0x64>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	b672      	cpsid	i
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	b662      	cpsie	i
 800592a:	60fb      	str	r3, [r7, #12]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <prvDeleteTCB+0x62>
	}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800593e:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <prvResetNextTaskUnblockTime+0x38>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <prvResetNextTaskUnblockTime+0x3c>)
 800594a:	f04f 32ff 	mov.w	r2, #4294967295
 800594e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005950:	e008      	b.n	8005964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005952:	4b07      	ldr	r3, [pc, #28]	; (8005970 <prvResetNextTaskUnblockTime+0x38>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4a04      	ldr	r2, [pc, #16]	; (8005974 <prvResetNextTaskUnblockTime+0x3c>)
 8005962:	6013      	str	r3, [r2, #0]
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	200014a0 	.word	0x200014a0
 8005974:	20001508 	.word	0x20001508

08005978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <xTaskGetSchedulerState+0x34>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005986:	2301      	movs	r3, #1
 8005988:	607b      	str	r3, [r7, #4]
 800598a:	e008      	b.n	800599e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598c:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <xTaskGetSchedulerState+0x38>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005994:	2302      	movs	r3, #2
 8005996:	607b      	str	r3, [r7, #4]
 8005998:	e001      	b.n	800599e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800599a:	2300      	movs	r3, #0
 800599c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800599e:	687b      	ldr	r3, [r7, #4]
	}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	200014f4 	.word	0x200014f4
 80059b0:	20001510 	.word	0x20001510

080059b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d05a      	beq.n	8005a80 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059ca:	4b30      	ldr	r3, [pc, #192]	; (8005a8c <xTaskPriorityDisinherit+0xd8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d00c      	beq.n	80059ee <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	b672      	cpsid	i
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	b662      	cpsie	i
 80059e8:	60fb      	str	r3, [r7, #12]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10c      	bne.n	8005a10 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	b672      	cpsid	i
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	b662      	cpsie	i
 8005a0a:	60bb      	str	r3, [r7, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	e7fe      	b.n	8005a0e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a14:	1e5a      	subs	r2, r3, #1
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d02c      	beq.n	8005a80 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d128      	bne.n	8005a80 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fc04 	bl	8004240 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <xTaskPriorityDisinherit+0xdc>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d903      	bls.n	8005a60 <xTaskPriorityDisinherit+0xac>
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	4a0c      	ldr	r2, [pc, #48]	; (8005a90 <xTaskPriorityDisinherit+0xdc>)
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <xTaskPriorityDisinherit+0xe0>)
 8005a6e:	441a      	add	r2, r3
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f7fe fb85 	bl	8004186 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a80:	697b      	ldr	r3, [r7, #20]
	}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20001014 	.word	0x20001014
 8005a90:	200014f0 	.word	0x200014f0
 8005a94:	20001018 	.word	0x20001018

08005a98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aa2:	4b21      	ldr	r3, [pc, #132]	; (8005b28 <prvAddCurrentTaskToDelayedList+0x90>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aa8:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fbc6 	bl	8004240 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d10a      	bne.n	8005ad2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4819      	ldr	r0, [pc, #100]	; (8005b30 <prvAddCurrentTaskToDelayedList+0x98>)
 8005acc:	f7fe fb5b 	bl	8004186 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ad0:	e026      	b.n	8005b20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ada:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d209      	bcs.n	8005afe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aea:	4b12      	ldr	r3, [pc, #72]	; (8005b34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7fe fb69 	bl	80041ce <vListInsert>
}
 8005afc:	e010      	b.n	8005b20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005afe:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fe fb5f 	bl	80041ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d202      	bcs.n	8005b20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b1a:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	200014ec 	.word	0x200014ec
 8005b2c:	20001014 	.word	0x20001014
 8005b30:	200014d4 	.word	0x200014d4
 8005b34:	200014a4 	.word	0x200014a4
 8005b38:	200014a0 	.word	0x200014a0
 8005b3c:	20001508 	.word	0x20001508

08005b40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b4a:	f000 fb15 	bl	8006178 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <xTimerCreateTimerTask+0x84>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d021      	beq.n	8005b9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b5e:	1d3a      	adds	r2, r7, #4
 8005b60:	f107 0108 	add.w	r1, r7, #8
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe fac5 	bl	80040f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	9202      	str	r2, [sp, #8]
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	2302      	movs	r3, #2
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	460a      	mov	r2, r1
 8005b80:	4911      	ldr	r1, [pc, #68]	; (8005bc8 <xTimerCreateTimerTask+0x88>)
 8005b82:	4812      	ldr	r0, [pc, #72]	; (8005bcc <xTimerCreateTimerTask+0x8c>)
 8005b84:	f7ff f890 	bl	8004ca8 <xTaskCreateStatic>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	4a11      	ldr	r2, [pc, #68]	; (8005bd0 <xTimerCreateTimerTask+0x90>)
 8005b8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b8e:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <xTimerCreateTimerTask+0x90>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b96:	2301      	movs	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10c      	bne.n	8005bba <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	b672      	cpsid	i
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	b662      	cpsie	i
 8005bb4:	613b      	str	r3, [r7, #16]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005bba:	697b      	ldr	r3, [r7, #20]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20001544 	.word	0x20001544
 8005bc8:	08006c54 	.word	0x08006c54
 8005bcc:	08005d11 	.word	0x08005d11
 8005bd0:	20001548 	.word	0x20001548

08005bd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10c      	bne.n	8005c06 <xTimerGenericCommand+0x32>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	b672      	cpsid	i
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	b662      	cpsie	i
 8005c00:	623b      	str	r3, [r7, #32]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c06:	4b1a      	ldr	r3, [pc, #104]	; (8005c70 <xTimerGenericCommand+0x9c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d02a      	beq.n	8005c64 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b05      	cmp	r3, #5
 8005c1e:	dc18      	bgt.n	8005c52 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c20:	f7ff feaa 	bl	8005978 <xTaskGetSchedulerState>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d109      	bne.n	8005c3e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <xTimerGenericCommand+0x9c>)
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	f107 0110 	add.w	r1, r7, #16
 8005c32:	2300      	movs	r3, #0
 8005c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c36:	f7fe fc3d 	bl	80044b4 <xQueueGenericSend>
 8005c3a:	6278      	str	r0, [r7, #36]	; 0x24
 8005c3c:	e012      	b.n	8005c64 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <xTimerGenericCommand+0x9c>)
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	f107 0110 	add.w	r1, r7, #16
 8005c46:	2300      	movs	r3, #0
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f7fe fc33 	bl	80044b4 <xQueueGenericSend>
 8005c4e:	6278      	str	r0, [r7, #36]	; 0x24
 8005c50:	e008      	b.n	8005c64 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c52:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <xTimerGenericCommand+0x9c>)
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	f107 0110 	add.w	r1, r7, #16
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	f7fe fd2f 	bl	80046c0 <xQueueGenericSendFromISR>
 8005c62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3728      	adds	r7, #40	; 0x28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20001544 	.word	0x20001544

08005c74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7e:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <prvProcessExpiredTimer+0x98>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fad7 	bl	8004240 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d024      	beq.n	8005cea <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	699a      	ldr	r2, [r3, #24]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	18d1      	adds	r1, r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	6978      	ldr	r0, [r7, #20]
 8005cae:	f000 f8d3 	bl	8005e58 <prvInsertTimerInActiveList>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d021      	beq.n	8005cfc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cb8:	2300      	movs	r3, #0
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	6978      	ldr	r0, [r7, #20]
 8005cc4:	f7ff ff86 	bl	8005bd4 <xTimerGenericCommand>
 8005cc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d115      	bne.n	8005cfc <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	b672      	cpsid	i
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	b662      	cpsie	i
 8005ce4:	60fb      	str	r3, [r7, #12]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf0:	f023 0301 	bic.w	r3, r3, #1
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	6978      	ldr	r0, [r7, #20]
 8005d02:	4798      	blx	r3
}
 8005d04:	bf00      	nop
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	2000153c 	.word	0x2000153c

08005d10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f857 	bl	8005dd0 <prvGetNextExpireTime>
 8005d22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4619      	mov	r1, r3
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f803 	bl	8005d34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d2e:	f000 f8d5 	bl	8005edc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d32:	e7f1      	b.n	8005d18 <prvTimerTask+0x8>

08005d34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d3e:	f7ff fa1d 	bl	800517c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f866 	bl	8005e18 <prvSampleTimeNow>
 8005d4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d130      	bne.n	8005db6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <prvProcessTimerOrBlockTask+0x3c>
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d806      	bhi.n	8005d70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d62:	f7ff fa19 	bl	8005198 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff ff83 	bl	8005c74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d6e:	e024      	b.n	8005dba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d76:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <prvProcessTimerOrBlockTask+0x90>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <prvProcessTimerOrBlockTask+0x50>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <prvProcessTimerOrBlockTask+0x52>
 8005d84:	2300      	movs	r3, #0
 8005d86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d88:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <prvProcessTimerOrBlockTask+0x94>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	4619      	mov	r1, r3
 8005d96:	f7fe ff53 	bl	8004c40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d9a:	f7ff f9fd 	bl	8005198 <xTaskResumeAll>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005da4:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <prvProcessTimerOrBlockTask+0x98>)
 8005da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	f3bf 8f6f 	isb	sy
}
 8005db4:	e001      	b.n	8005dba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005db6:	f7ff f9ef 	bl	8005198 <xTaskResumeAll>
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20001540 	.word	0x20001540
 8005dc8:	20001544 	.word	0x20001544
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	; (8005e14 <prvGetNextExpireTime+0x44>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <prvGetNextExpireTime+0x16>
 8005de2:	2201      	movs	r2, #1
 8005de4:	e000      	b.n	8005de8 <prvGetNextExpireTime+0x18>
 8005de6:	2200      	movs	r2, #0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d105      	bne.n	8005e00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <prvGetNextExpireTime+0x44>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e001      	b.n	8005e04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e04:	68fb      	ldr	r3, [r7, #12]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	2000153c 	.word	0x2000153c

08005e18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e20:	f7ff fa5a 	bl	80052d8 <xTaskGetTickCount>
 8005e24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e26:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <prvSampleTimeNow+0x3c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d205      	bcs.n	8005e3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e30:	f000 f93c 	bl	80060ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e42:	4a04      	ldr	r2, [pc, #16]	; (8005e54 <prvSampleTimeNow+0x3c>)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e48:	68fb      	ldr	r3, [r7, #12]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	2000154c 	.word	0x2000154c

08005e58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d812      	bhi.n	8005ea4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d302      	bcc.n	8005e92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e01b      	b.n	8005eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <prvInsertTimerInActiveList+0x7c>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f7fe f996 	bl	80041ce <vListInsert>
 8005ea2:	e012      	b.n	8005eca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d206      	bcs.n	8005eba <prvInsertTimerInActiveList+0x62>
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d302      	bcc.n	8005eba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e007      	b.n	8005eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <prvInsertTimerInActiveList+0x80>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7fe f982 	bl	80041ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eca:	697b      	ldr	r3, [r7, #20]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20001540 	.word	0x20001540
 8005ed8:	2000153c 	.word	0x2000153c

08005edc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	; 0x38
 8005ee0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ee2:	e0d0      	b.n	8006086 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da1a      	bge.n	8005f20 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	3304      	adds	r3, #4
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10c      	bne.n	8005f10 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	b672      	cpsid	i
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	b662      	cpsie	i
 8005f0a:	61fb      	str	r3, [r7, #28]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f16:	6850      	ldr	r0, [r2, #4]
 8005f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1a:	6892      	ldr	r2, [r2, #8]
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f2c0 80ae 	blt.w	8006084 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	3304      	adds	r3, #4
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe f981 	bl	8004240 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f3e:	463b      	mov	r3, r7
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff ff69 	bl	8005e18 <prvSampleTimeNow>
 8005f46:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b09      	cmp	r3, #9
 8005f4c:	f200 809b 	bhi.w	8006086 <prvProcessReceivedCommands+0x1aa>
 8005f50:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <prvProcessReceivedCommands+0x7c>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005f81 	.word	0x08005f81
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f81 	.word	0x08005f81
 8005f64:	08005ff9 	.word	0x08005ff9
 8005f68:	0800600d 	.word	0x0800600d
 8005f6c:	0800605b 	.word	0x0800605b
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005f81 	.word	0x08005f81
 8005f78:	08005ff9 	.word	0x08005ff9
 8005f7c:	0800600d 	.word	0x0800600d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f86:	f043 0301 	orr.w	r3, r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	18d1      	adds	r1, r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa0:	f7ff ff5a 	bl	8005e58 <prvInsertTimerInActiveList>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d06d      	beq.n	8006086 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d062      	beq.n	8006086 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	441a      	add	r2, r3
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd2:	f7ff fdff 	bl	8005bd4 <xTimerGenericCommand>
 8005fd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d153      	bne.n	8006086 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	b672      	cpsid	i
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	b662      	cpsie	i
 8005ff2:	61bb      	str	r3, [r7, #24]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	b2da      	uxtb	r2, r3
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800600a:	e03c      	b.n	8006086 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10c      	bne.n	8006046 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	b672      	cpsid	i
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	b662      	cpsie	i
 8006040:	617b      	str	r3, [r7, #20]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	18d1      	adds	r1, r2, r3
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006054:	f7ff ff00 	bl	8005e58 <prvInsertTimerInActiveList>
					break;
 8006058:	e015      	b.n	8006086 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800606a:	f000 fbc5 	bl	80067f8 <vPortFree>
 800606e:	e00a      	b.n	8006086 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006082:	e000      	b.n	8006086 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006084:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <prvProcessReceivedCommands+0x1cc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	1d39      	adds	r1, r7, #4
 800608c:	2200      	movs	r2, #0
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fbb6 	bl	8004800 <xQueueReceive>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	f47f af24 	bne.w	8005ee4 <prvProcessReceivedCommands+0x8>
	}
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	3730      	adds	r7, #48	; 0x30
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20001544 	.word	0x20001544

080060ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060b2:	e04a      	b.n	800614a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060b4:	4b2e      	ldr	r3, [pc, #184]	; (8006170 <prvSwitchTimerLists+0xc4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060be:	4b2c      	ldr	r3, [pc, #176]	; (8006170 <prvSwitchTimerLists+0xc4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fe f8b7 	bl	8004240 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d030      	beq.n	800614a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4413      	add	r3, r2
 80060f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d90e      	bls.n	8006118 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006106:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <prvSwitchTimerLists+0xc4>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3304      	adds	r3, #4
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f7fe f85c 	bl	80041ce <vListInsert>
 8006116:	e018      	b.n	800614a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006118:	2300      	movs	r3, #0
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	2300      	movs	r3, #0
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	2100      	movs	r1, #0
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7ff fd56 	bl	8005bd4 <xTimerGenericCommand>
 8006128:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10c      	bne.n	800614a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	b672      	cpsid	i
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	b662      	cpsie	i
 8006144:	603b      	str	r3, [r7, #0]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <prvSwitchTimerLists+0xc4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1af      	bne.n	80060b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006154:	4b06      	ldr	r3, [pc, #24]	; (8006170 <prvSwitchTimerLists+0xc4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <prvSwitchTimerLists+0xc8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a04      	ldr	r2, [pc, #16]	; (8006170 <prvSwitchTimerLists+0xc4>)
 8006160:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006162:	4a04      	ldr	r2, [pc, #16]	; (8006174 <prvSwitchTimerLists+0xc8>)
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	6013      	str	r3, [r2, #0]
}
 8006168:	bf00      	nop
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	2000153c 	.word	0x2000153c
 8006174:	20001540 	.word	0x20001540

08006178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800617e:	f000 f945 	bl	800640c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <prvCheckForValidListAndQueue+0x60>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d120      	bne.n	80061cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800618a:	4814      	ldr	r0, [pc, #80]	; (80061dc <prvCheckForValidListAndQueue+0x64>)
 800618c:	f7fd ffce 	bl	800412c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006190:	4813      	ldr	r0, [pc, #76]	; (80061e0 <prvCheckForValidListAndQueue+0x68>)
 8006192:	f7fd ffcb 	bl	800412c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006196:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <prvCheckForValidListAndQueue+0x6c>)
 8006198:	4a10      	ldr	r2, [pc, #64]	; (80061dc <prvCheckForValidListAndQueue+0x64>)
 800619a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800619c:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <prvCheckForValidListAndQueue+0x70>)
 800619e:	4a10      	ldr	r2, [pc, #64]	; (80061e0 <prvCheckForValidListAndQueue+0x68>)
 80061a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061a2:	2300      	movs	r3, #0
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	4b11      	ldr	r3, [pc, #68]	; (80061ec <prvCheckForValidListAndQueue+0x74>)
 80061a8:	4a11      	ldr	r2, [pc, #68]	; (80061f0 <prvCheckForValidListAndQueue+0x78>)
 80061aa:	2110      	movs	r1, #16
 80061ac:	200a      	movs	r0, #10
 80061ae:	f7fe f8db 	bl	8004368 <xQueueGenericCreateStatic>
 80061b2:	4603      	mov	r3, r0
 80061b4:	4a08      	ldr	r2, [pc, #32]	; (80061d8 <prvCheckForValidListAndQueue+0x60>)
 80061b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061b8:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <prvCheckForValidListAndQueue+0x60>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <prvCheckForValidListAndQueue+0x60>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	490b      	ldr	r1, [pc, #44]	; (80061f4 <prvCheckForValidListAndQueue+0x7c>)
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fd10 	bl	8004bec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061cc:	f000 f952 	bl	8006474 <vPortExitCritical>
}
 80061d0:	bf00      	nop
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20001544 	.word	0x20001544
 80061dc:	20001514 	.word	0x20001514
 80061e0:	20001528 	.word	0x20001528
 80061e4:	2000153c 	.word	0x2000153c
 80061e8:	20001540 	.word	0x20001540
 80061ec:	200015f0 	.word	0x200015f0
 80061f0:	20001550 	.word	0x20001550
 80061f4:	08006c5c 	.word	0x08006c5c

080061f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3b04      	subs	r3, #4
 8006208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3b04      	subs	r3, #4
 8006216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f023 0201 	bic.w	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3b04      	subs	r3, #4
 8006226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006228:	4a0c      	ldr	r2, [pc, #48]	; (800625c <pxPortInitialiseStack+0x64>)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3b14      	subs	r3, #20
 8006232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3b04      	subs	r3, #4
 800623e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f06f 0202 	mvn.w	r2, #2
 8006246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3b20      	subs	r3, #32
 800624c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800624e:	68fb      	ldr	r3, [r7, #12]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	08006261 	.word	0x08006261

08006260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <prvTaskExitError+0x5c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d00c      	beq.n	800628e <prvTaskExitError+0x2e>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	b672      	cpsid	i
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	b662      	cpsie	i
 8006288:	60fb      	str	r3, [r7, #12]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <prvTaskExitError+0x2c>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	b672      	cpsid	i
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	b662      	cpsie	i
 80062a2:	60bb      	str	r3, [r7, #8]
}
 80062a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062a6:	bf00      	nop
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0fc      	beq.n	80062a8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	2000000c 	.word	0x2000000c

080062c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <pxCurrentTCBConst2>)
 80062c2:	6819      	ldr	r1, [r3, #0]
 80062c4:	6808      	ldr	r0, [r1, #0]
 80062c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	f380 8809 	msr	PSP, r0
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	f380 8811 	msr	BASEPRI, r0
 80062da:	4770      	bx	lr
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst2>:
 80062e0:	20001014 	.word	0x20001014
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062e8:	4808      	ldr	r0, [pc, #32]	; (800630c <prvPortStartFirstTask+0x24>)
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	6800      	ldr	r0, [r0, #0]
 80062ee:	f380 8808 	msr	MSP, r0
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8814 	msr	CONTROL, r0
 80062fa:	b662      	cpsie	i
 80062fc:	b661      	cpsie	f
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	df00      	svc	0
 8006308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800630a:	bf00      	nop
 800630c:	e000ed08 	.word	0xe000ed08

08006310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006316:	4b37      	ldr	r3, [pc, #220]	; (80063f4 <xPortStartScheduler+0xe4>)
 8006318:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006338:	b2da      	uxtb	r2, r3
 800633a:	4b2f      	ldr	r3, [pc, #188]	; (80063f8 <xPortStartScheduler+0xe8>)
 800633c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800633e:	4b2f      	ldr	r3, [pc, #188]	; (80063fc <xPortStartScheduler+0xec>)
 8006340:	2207      	movs	r2, #7
 8006342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006344:	e009      	b.n	800635a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006346:	4b2d      	ldr	r3, [pc, #180]	; (80063fc <xPortStartScheduler+0xec>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3b01      	subs	r3, #1
 800634c:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <xPortStartScheduler+0xec>)
 800634e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	b2db      	uxtb	r3, r3
 8006358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d0ef      	beq.n	8006346 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006366:	4b25      	ldr	r3, [pc, #148]	; (80063fc <xPortStartScheduler+0xec>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1c3 0307 	rsb	r3, r3, #7
 800636e:	2b04      	cmp	r3, #4
 8006370:	d00c      	beq.n	800638c <xPortStartScheduler+0x7c>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	b672      	cpsid	i
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	b662      	cpsie	i
 8006386:	60bb      	str	r3, [r7, #8]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800638c:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <xPortStartScheduler+0xec>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	4a1a      	ldr	r2, [pc, #104]	; (80063fc <xPortStartScheduler+0xec>)
 8006394:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006396:	4b19      	ldr	r3, [pc, #100]	; (80063fc <xPortStartScheduler+0xec>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800639e:	4a17      	ldr	r2, [pc, #92]	; (80063fc <xPortStartScheduler+0xec>)
 80063a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063aa:	4b15      	ldr	r3, [pc, #84]	; (8006400 <xPortStartScheduler+0xf0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a14      	ldr	r2, [pc, #80]	; (8006400 <xPortStartScheduler+0xf0>)
 80063b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063b6:	4b12      	ldr	r3, [pc, #72]	; (8006400 <xPortStartScheduler+0xf0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a11      	ldr	r2, [pc, #68]	; (8006400 <xPortStartScheduler+0xf0>)
 80063bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063c2:	f000 f8dd 	bl	8006580 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063c6:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <xPortStartScheduler+0xf4>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063cc:	f000 f8fc 	bl	80065c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063d0:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <xPortStartScheduler+0xf8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <xPortStartScheduler+0xf8>)
 80063d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063dc:	f7ff ff84 	bl	80062e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063e0:	f7ff f846 	bl	8005470 <vTaskSwitchContext>
	prvTaskExitError();
 80063e4:	f7ff ff3c 	bl	8006260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	e000e400 	.word	0xe000e400
 80063f8:	20001640 	.word	0x20001640
 80063fc:	20001644 	.word	0x20001644
 8006400:	e000ed20 	.word	0xe000ed20
 8006404:	2000000c 	.word	0x2000000c
 8006408:	e000ef34 	.word	0xe000ef34

0800640c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	b672      	cpsid	i
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	b662      	cpsie	i
 8006426:	607b      	str	r3, [r7, #4]
}
 8006428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <vPortEnterCritical+0x60>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3301      	adds	r3, #1
 8006430:	4a0e      	ldr	r2, [pc, #56]	; (800646c <vPortEnterCritical+0x60>)
 8006432:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006434:	4b0d      	ldr	r3, [pc, #52]	; (800646c <vPortEnterCritical+0x60>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d111      	bne.n	8006460 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800643c:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <vPortEnterCritical+0x64>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <vPortEnterCritical+0x54>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	b672      	cpsid	i
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	b662      	cpsie	i
 800645a:	603b      	str	r3, [r7, #0]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <vPortEnterCritical+0x52>
	}
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	2000000c 	.word	0x2000000c
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800647a:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <vPortExitCritical+0x54>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10c      	bne.n	800649c <vPortExitCritical+0x28>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	b672      	cpsid	i
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	b662      	cpsie	i
 8006496:	607b      	str	r3, [r7, #4]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <vPortExitCritical+0x54>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <vPortExitCritical+0x54>)
 80064a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064a6:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <vPortExitCritical+0x54>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d105      	bne.n	80064ba <vPortExitCritical+0x46>
 80064ae:	2300      	movs	r3, #0
 80064b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	f383 8811 	msr	BASEPRI, r3
}
 80064b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	2000000c 	.word	0x2000000c
 80064cc:	00000000 	.word	0x00000000

080064d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064d0:	f3ef 8009 	mrs	r0, PSP
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	4b15      	ldr	r3, [pc, #84]	; (8006530 <pxCurrentTCBConst>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f01e 0f10 	tst.w	lr, #16
 80064e0:	bf08      	it	eq
 80064e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	6010      	str	r0, [r2, #0]
 80064ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064f4:	b672      	cpsid	i
 80064f6:	f380 8811 	msr	BASEPRI, r0
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	b662      	cpsie	i
 8006504:	f7fe ffb4 	bl	8005470 <vTaskSwitchContext>
 8006508:	f04f 0000 	mov.w	r0, #0
 800650c:	f380 8811 	msr	BASEPRI, r0
 8006510:	bc09      	pop	{r0, r3}
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	6808      	ldr	r0, [r1, #0]
 8006516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	f01e 0f10 	tst.w	lr, #16
 800651e:	bf08      	it	eq
 8006520:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006524:	f380 8809 	msr	PSP, r0
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop

08006530 <pxCurrentTCBConst>:
 8006530:	20001014 	.word	0x20001014
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop

08006538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	b672      	cpsid	i
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	b662      	cpsie	i
 8006552:	607b      	str	r3, [r7, #4]
}
 8006554:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006556:	f7fe fecf 	bl	80052f8 <xTaskIncrementTick>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006560:	4b06      	ldr	r3, [pc, #24]	; (800657c <xPortSysTickHandler+0x44>)
 8006562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	2300      	movs	r3, #0
 800656a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f383 8811 	msr	BASEPRI, r3
}
 8006572:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006574:	bf00      	nop
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <vPortSetupTimerInterrupt+0x34>)
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <vPortSetupTimerInterrupt+0x38>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006590:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <vPortSetupTimerInterrupt+0x3c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <vPortSetupTimerInterrupt+0x40>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	099b      	lsrs	r3, r3, #6
 800659c:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <vPortSetupTimerInterrupt+0x44>)
 800659e:	3b01      	subs	r3, #1
 80065a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065a2:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <vPortSetupTimerInterrupt+0x34>)
 80065a4:	2207      	movs	r2, #7
 80065a6:	601a      	str	r2, [r3, #0]
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	e000e010 	.word	0xe000e010
 80065b8:	e000e018 	.word	0xe000e018
 80065bc:	20000000 	.word	0x20000000
 80065c0:	10624dd3 	.word	0x10624dd3
 80065c4:	e000e014 	.word	0xe000e014

080065c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065d8 <vPortEnableVFP+0x10>
 80065cc:	6801      	ldr	r1, [r0, #0]
 80065ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065d2:	6001      	str	r1, [r0, #0]
 80065d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065d6:	bf00      	nop
 80065d8:	e000ed88 	.word	0xe000ed88

080065dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065e2:	f3ef 8305 	mrs	r3, IPSR
 80065e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d916      	bls.n	800661c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065ee:	4a19      	ldr	r2, [pc, #100]	; (8006654 <vPortValidateInterruptPriority+0x78>)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065f8:	4b17      	ldr	r3, [pc, #92]	; (8006658 <vPortValidateInterruptPriority+0x7c>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	7afa      	ldrb	r2, [r7, #11]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d20c      	bcs.n	800661c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	b672      	cpsid	i
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	b662      	cpsie	i
 8006616:	607b      	str	r3, [r7, #4]
}
 8006618:	bf00      	nop
 800661a:	e7fe      	b.n	800661a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800661c:	4b0f      	ldr	r3, [pc, #60]	; (800665c <vPortValidateInterruptPriority+0x80>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <vPortValidateInterruptPriority+0x84>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d90c      	bls.n	8006646 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	b672      	cpsid	i
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	b662      	cpsie	i
 8006640:	603b      	str	r3, [r7, #0]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <vPortValidateInterruptPriority+0x68>
	}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	e000e3f0 	.word	0xe000e3f0
 8006658:	20001640 	.word	0x20001640
 800665c:	e000ed0c 	.word	0xe000ed0c
 8006660:	20001644 	.word	0x20001644

08006664 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006670:	f7fe fd84 	bl	800517c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006674:	4b5b      	ldr	r3, [pc, #364]	; (80067e4 <pvPortMalloc+0x180>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800667c:	f000 f91a 	bl	80068b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006680:	4b59      	ldr	r3, [pc, #356]	; (80067e8 <pvPortMalloc+0x184>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4013      	ands	r3, r2
 8006688:	2b00      	cmp	r3, #0
 800668a:	f040 8092 	bne.w	80067b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01f      	beq.n	80066d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006694:	2208      	movs	r2, #8
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d016      	beq.n	80066d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f023 0307 	bic.w	r3, r3, #7
 80066ac:	3308      	adds	r3, #8
 80066ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <pvPortMalloc+0x70>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	b672      	cpsid	i
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	b662      	cpsie	i
 80066ce:	617b      	str	r3, [r7, #20]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d06b      	beq.n	80067b2 <pvPortMalloc+0x14e>
 80066da:	4b44      	ldr	r3, [pc, #272]	; (80067ec <pvPortMalloc+0x188>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d866      	bhi.n	80067b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066e4:	4b42      	ldr	r3, [pc, #264]	; (80067f0 <pvPortMalloc+0x18c>)
 80066e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066e8:	4b41      	ldr	r3, [pc, #260]	; (80067f0 <pvPortMalloc+0x18c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ee:	e004      	b.n	80066fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d903      	bls.n	800670c <pvPortMalloc+0xa8>
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f1      	bne.n	80066f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800670c:	4b35      	ldr	r3, [pc, #212]	; (80067e4 <pvPortMalloc+0x180>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006712:	429a      	cmp	r2, r3
 8006714:	d04d      	beq.n	80067b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2208      	movs	r2, #8
 800671c:	4413      	add	r3, r2
 800671e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	2308      	movs	r3, #8
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	429a      	cmp	r2, r3
 8006736:	d921      	bls.n	800677c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4413      	add	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00c      	beq.n	8006764 <pvPortMalloc+0x100>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	b672      	cpsid	i
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	b662      	cpsie	i
 800675e:	613b      	str	r3, [r7, #16]
}
 8006760:	bf00      	nop
 8006762:	e7fe      	b.n	8006762 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006776:	69b8      	ldr	r0, [r7, #24]
 8006778:	f000 f8fe 	bl	8006978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <pvPortMalloc+0x188>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	4a19      	ldr	r2, [pc, #100]	; (80067ec <pvPortMalloc+0x188>)
 8006788:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800678a:	4b18      	ldr	r3, [pc, #96]	; (80067ec <pvPortMalloc+0x188>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <pvPortMalloc+0x190>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d203      	bcs.n	800679e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006796:	4b15      	ldr	r3, [pc, #84]	; (80067ec <pvPortMalloc+0x188>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <pvPortMalloc+0x190>)
 800679c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <pvPortMalloc+0x184>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067b2:	f7fe fcf1 	bl	8005198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00c      	beq.n	80067da <pvPortMalloc+0x176>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	b672      	cpsid	i
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	b662      	cpsie	i
 80067d4:	60fb      	str	r3, [r7, #12]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <pvPortMalloc+0x174>
	return pvReturn;
 80067da:	69fb      	ldr	r3, [r7, #28]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3728      	adds	r7, #40	; 0x28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20005250 	.word	0x20005250
 80067e8:	2000525c 	.word	0x2000525c
 80067ec:	20005254 	.word	0x20005254
 80067f0:	20005248 	.word	0x20005248
 80067f4:	20005258 	.word	0x20005258

080067f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d04c      	beq.n	80068a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800680a:	2308      	movs	r3, #8
 800680c:	425b      	negs	r3, r3
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4413      	add	r3, r2
 8006812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	4b23      	ldr	r3, [pc, #140]	; (80068ac <vPortFree+0xb4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10c      	bne.n	8006840 <vPortFree+0x48>
	__asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682a:	b672      	cpsid	i
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	b662      	cpsie	i
 800683a:	60fb      	str	r3, [r7, #12]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00c      	beq.n	8006862 <vPortFree+0x6a>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	b672      	cpsid	i
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	b662      	cpsie	i
 800685c:	60bb      	str	r3, [r7, #8]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	4b11      	ldr	r3, [pc, #68]	; (80068ac <vPortFree+0xb4>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d019      	beq.n	80068a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d115      	bne.n	80068a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <vPortFree+0xb4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	43db      	mvns	r3, r3
 8006882:	401a      	ands	r2, r3
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006888:	f7fe fc78 	bl	800517c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <vPortFree+0xb8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4413      	add	r3, r2
 8006896:	4a06      	ldr	r2, [pc, #24]	; (80068b0 <vPortFree+0xb8>)
 8006898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800689a:	6938      	ldr	r0, [r7, #16]
 800689c:	f000 f86c 	bl	8006978 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068a0:	f7fe fc7a 	bl	8005198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068a4:	bf00      	nop
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	2000525c 	.word	0x2000525c
 80068b0:	20005254 	.word	0x20005254

080068b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068c0:	4b27      	ldr	r3, [pc, #156]	; (8006960 <prvHeapInit+0xac>)
 80068c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3307      	adds	r3, #7
 80068d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	4a1f      	ldr	r2, [pc, #124]	; (8006960 <prvHeapInit+0xac>)
 80068e4:	4413      	add	r3, r2
 80068e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068ec:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <prvHeapInit+0xb0>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068f2:	4b1c      	ldr	r3, [pc, #112]	; (8006964 <prvHeapInit+0xb0>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006900:	2208      	movs	r2, #8
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4a15      	ldr	r2, [pc, #84]	; (8006968 <prvHeapInit+0xb4>)
 8006914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <prvHeapInit+0xb4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <prvHeapInit+0xb4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <prvHeapInit+0xb4>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4a0a      	ldr	r2, [pc, #40]	; (800696c <prvHeapInit+0xb8>)
 8006942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4a09      	ldr	r2, [pc, #36]	; (8006970 <prvHeapInit+0xbc>)
 800694a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800694c:	4b09      	ldr	r3, [pc, #36]	; (8006974 <prvHeapInit+0xc0>)
 800694e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006952:	601a      	str	r2, [r3, #0]
}
 8006954:	bf00      	nop
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	20001648 	.word	0x20001648
 8006964:	20005248 	.word	0x20005248
 8006968:	20005250 	.word	0x20005250
 800696c:	20005258 	.word	0x20005258
 8006970:	20005254 	.word	0x20005254
 8006974:	2000525c 	.word	0x2000525c

08006978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006980:	4b28      	ldr	r3, [pc, #160]	; (8006a24 <prvInsertBlockIntoFreeList+0xac>)
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	e002      	b.n	800698c <prvInsertBlockIntoFreeList+0x14>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d8f7      	bhi.n	8006986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	4413      	add	r3, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d108      	bne.n	80069ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	441a      	add	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	441a      	add	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d118      	bne.n	8006a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <prvInsertBlockIntoFreeList+0xb0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d00d      	beq.n	80069f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	441a      	add	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e008      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069f6:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <prvInsertBlockIntoFreeList+0xb0>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e003      	b.n	8006a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d002      	beq.n	8006a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20005248 	.word	0x20005248
 8006a28:	20005250 	.word	0x20005250

08006a2c <__libc_init_array>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4d0d      	ldr	r5, [pc, #52]	; (8006a64 <__libc_init_array+0x38>)
 8006a30:	4c0d      	ldr	r4, [pc, #52]	; (8006a68 <__libc_init_array+0x3c>)
 8006a32:	1b64      	subs	r4, r4, r5
 8006a34:	10a4      	asrs	r4, r4, #2
 8006a36:	2600      	movs	r6, #0
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	d109      	bne.n	8006a50 <__libc_init_array+0x24>
 8006a3c:	4d0b      	ldr	r5, [pc, #44]	; (8006a6c <__libc_init_array+0x40>)
 8006a3e:	4c0c      	ldr	r4, [pc, #48]	; (8006a70 <__libc_init_array+0x44>)
 8006a40:	f000 f8f2 	bl	8006c28 <_init>
 8006a44:	1b64      	subs	r4, r4, r5
 8006a46:	10a4      	asrs	r4, r4, #2
 8006a48:	2600      	movs	r6, #0
 8006a4a:	42a6      	cmp	r6, r4
 8006a4c:	d105      	bne.n	8006a5a <__libc_init_array+0x2e>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a54:	4798      	blx	r3
 8006a56:	3601      	adds	r6, #1
 8006a58:	e7ee      	b.n	8006a38 <__libc_init_array+0xc>
 8006a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5e:	4798      	blx	r3
 8006a60:	3601      	adds	r6, #1
 8006a62:	e7f2      	b.n	8006a4a <__libc_init_array+0x1e>
 8006a64:	08006d08 	.word	0x08006d08
 8006a68:	08006d08 	.word	0x08006d08
 8006a6c:	08006d08 	.word	0x08006d08
 8006a70:	08006d0c 	.word	0x08006d0c

08006a74 <__retarget_lock_acquire_recursive>:
 8006a74:	4770      	bx	lr

08006a76 <__retarget_lock_release_recursive>:
 8006a76:	4770      	bx	lr

08006a78 <memcpy>:
 8006a78:	440a      	add	r2, r1
 8006a7a:	4291      	cmp	r1, r2
 8006a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a80:	d100      	bne.n	8006a84 <memcpy+0xc>
 8006a82:	4770      	bx	lr
 8006a84:	b510      	push	{r4, lr}
 8006a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a8e:	4291      	cmp	r1, r2
 8006a90:	d1f9      	bne.n	8006a86 <memcpy+0xe>
 8006a92:	bd10      	pop	{r4, pc}

08006a94 <memset>:
 8006a94:	4402      	add	r2, r0
 8006a96:	4603      	mov	r3, r0
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d100      	bne.n	8006a9e <memset+0xa>
 8006a9c:	4770      	bx	lr
 8006a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006aa2:	e7f9      	b.n	8006a98 <memset+0x4>

08006aa4 <cleanup_glue>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	6809      	ldr	r1, [r1, #0]
 8006aaa:	4605      	mov	r5, r0
 8006aac:	b109      	cbz	r1, 8006ab2 <cleanup_glue+0xe>
 8006aae:	f7ff fff9 	bl	8006aa4 <cleanup_glue>
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aba:	f000 b869 	b.w	8006b90 <_free_r>
	...

08006ac0 <_reclaim_reent>:
 8006ac0:	4b2c      	ldr	r3, [pc, #176]	; (8006b74 <_reclaim_reent+0xb4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4283      	cmp	r3, r0
 8006ac6:	b570      	push	{r4, r5, r6, lr}
 8006ac8:	4604      	mov	r4, r0
 8006aca:	d051      	beq.n	8006b70 <_reclaim_reent+0xb0>
 8006acc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ace:	b143      	cbz	r3, 8006ae2 <_reclaim_reent+0x22>
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d14a      	bne.n	8006b6c <_reclaim_reent+0xac>
 8006ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	b111      	cbz	r1, 8006ae2 <_reclaim_reent+0x22>
 8006adc:	4620      	mov	r0, r4
 8006ade:	f000 f857 	bl	8006b90 <_free_r>
 8006ae2:	6961      	ldr	r1, [r4, #20]
 8006ae4:	b111      	cbz	r1, 8006aec <_reclaim_reent+0x2c>
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f000 f852 	bl	8006b90 <_free_r>
 8006aec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006aee:	b111      	cbz	r1, 8006af6 <_reclaim_reent+0x36>
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 f84d 	bl	8006b90 <_free_r>
 8006af6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006af8:	b111      	cbz	r1, 8006b00 <_reclaim_reent+0x40>
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 f848 	bl	8006b90 <_free_r>
 8006b00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006b02:	b111      	cbz	r1, 8006b0a <_reclaim_reent+0x4a>
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 f843 	bl	8006b90 <_free_r>
 8006b0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b0c:	b111      	cbz	r1, 8006b14 <_reclaim_reent+0x54>
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f000 f83e 	bl	8006b90 <_free_r>
 8006b14:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b16:	b111      	cbz	r1, 8006b1e <_reclaim_reent+0x5e>
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 f839 	bl	8006b90 <_free_r>
 8006b1e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b20:	b111      	cbz	r1, 8006b28 <_reclaim_reent+0x68>
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 f834 	bl	8006b90 <_free_r>
 8006b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b2a:	b111      	cbz	r1, 8006b32 <_reclaim_reent+0x72>
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f000 f82f 	bl	8006b90 <_free_r>
 8006b32:	69a3      	ldr	r3, [r4, #24]
 8006b34:	b1e3      	cbz	r3, 8006b70 <_reclaim_reent+0xb0>
 8006b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4798      	blx	r3
 8006b3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b3e:	b1b9      	cbz	r1, 8006b70 <_reclaim_reent+0xb0>
 8006b40:	4620      	mov	r0, r4
 8006b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b46:	f7ff bfad 	b.w	8006aa4 <cleanup_glue>
 8006b4a:	5949      	ldr	r1, [r1, r5]
 8006b4c:	b941      	cbnz	r1, 8006b60 <_reclaim_reent+0xa0>
 8006b4e:	3504      	adds	r5, #4
 8006b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b52:	2d80      	cmp	r5, #128	; 0x80
 8006b54:	68d9      	ldr	r1, [r3, #12]
 8006b56:	d1f8      	bne.n	8006b4a <_reclaim_reent+0x8a>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 f819 	bl	8006b90 <_free_r>
 8006b5e:	e7ba      	b.n	8006ad6 <_reclaim_reent+0x16>
 8006b60:	680e      	ldr	r6, [r1, #0]
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f814 	bl	8006b90 <_free_r>
 8006b68:	4631      	mov	r1, r6
 8006b6a:	e7ef      	b.n	8006b4c <_reclaim_reent+0x8c>
 8006b6c:	2500      	movs	r5, #0
 8006b6e:	e7ef      	b.n	8006b50 <_reclaim_reent+0x90>
 8006b70:	bd70      	pop	{r4, r5, r6, pc}
 8006b72:	bf00      	nop
 8006b74:	20000010 	.word	0x20000010

08006b78 <__malloc_lock>:
 8006b78:	4801      	ldr	r0, [pc, #4]	; (8006b80 <__malloc_lock+0x8>)
 8006b7a:	f7ff bf7b 	b.w	8006a74 <__retarget_lock_acquire_recursive>
 8006b7e:	bf00      	nop
 8006b80:	20005260 	.word	0x20005260

08006b84 <__malloc_unlock>:
 8006b84:	4801      	ldr	r0, [pc, #4]	; (8006b8c <__malloc_unlock+0x8>)
 8006b86:	f7ff bf76 	b.w	8006a76 <__retarget_lock_release_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	20005260 	.word	0x20005260

08006b90 <_free_r>:
 8006b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b92:	2900      	cmp	r1, #0
 8006b94:	d044      	beq.n	8006c20 <_free_r+0x90>
 8006b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b9a:	9001      	str	r0, [sp, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006ba2:	bfb8      	it	lt
 8006ba4:	18e4      	addlt	r4, r4, r3
 8006ba6:	f7ff ffe7 	bl	8006b78 <__malloc_lock>
 8006baa:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <_free_r+0x94>)
 8006bac:	9801      	ldr	r0, [sp, #4]
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	b933      	cbnz	r3, 8006bc0 <_free_r+0x30>
 8006bb2:	6063      	str	r3, [r4, #4]
 8006bb4:	6014      	str	r4, [r2, #0]
 8006bb6:	b003      	add	sp, #12
 8006bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bbc:	f7ff bfe2 	b.w	8006b84 <__malloc_unlock>
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	d908      	bls.n	8006bd6 <_free_r+0x46>
 8006bc4:	6825      	ldr	r5, [r4, #0]
 8006bc6:	1961      	adds	r1, r4, r5
 8006bc8:	428b      	cmp	r3, r1
 8006bca:	bf01      	itttt	eq
 8006bcc:	6819      	ldreq	r1, [r3, #0]
 8006bce:	685b      	ldreq	r3, [r3, #4]
 8006bd0:	1949      	addeq	r1, r1, r5
 8006bd2:	6021      	streq	r1, [r4, #0]
 8006bd4:	e7ed      	b.n	8006bb2 <_free_r+0x22>
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	b10b      	cbz	r3, 8006be0 <_free_r+0x50>
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	d9fa      	bls.n	8006bd6 <_free_r+0x46>
 8006be0:	6811      	ldr	r1, [r2, #0]
 8006be2:	1855      	adds	r5, r2, r1
 8006be4:	42a5      	cmp	r5, r4
 8006be6:	d10b      	bne.n	8006c00 <_free_r+0x70>
 8006be8:	6824      	ldr	r4, [r4, #0]
 8006bea:	4421      	add	r1, r4
 8006bec:	1854      	adds	r4, r2, r1
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	6011      	str	r1, [r2, #0]
 8006bf2:	d1e0      	bne.n	8006bb6 <_free_r+0x26>
 8006bf4:	681c      	ldr	r4, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	6053      	str	r3, [r2, #4]
 8006bfa:	4421      	add	r1, r4
 8006bfc:	6011      	str	r1, [r2, #0]
 8006bfe:	e7da      	b.n	8006bb6 <_free_r+0x26>
 8006c00:	d902      	bls.n	8006c08 <_free_r+0x78>
 8006c02:	230c      	movs	r3, #12
 8006c04:	6003      	str	r3, [r0, #0]
 8006c06:	e7d6      	b.n	8006bb6 <_free_r+0x26>
 8006c08:	6825      	ldr	r5, [r4, #0]
 8006c0a:	1961      	adds	r1, r4, r5
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	bf04      	itt	eq
 8006c10:	6819      	ldreq	r1, [r3, #0]
 8006c12:	685b      	ldreq	r3, [r3, #4]
 8006c14:	6063      	str	r3, [r4, #4]
 8006c16:	bf04      	itt	eq
 8006c18:	1949      	addeq	r1, r1, r5
 8006c1a:	6021      	streq	r1, [r4, #0]
 8006c1c:	6054      	str	r4, [r2, #4]
 8006c1e:	e7ca      	b.n	8006bb6 <_free_r+0x26>
 8006c20:	b003      	add	sp, #12
 8006c22:	bd30      	pop	{r4, r5, pc}
 8006c24:	20005264 	.word	0x20005264

08006c28 <_init>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr

08006c34 <_fini>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr
