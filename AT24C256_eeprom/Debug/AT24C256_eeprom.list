
AT24C256_eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  080067e8  080067e8  000167e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b8c  08006b8c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b94  08006b94  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001d4  08006d70  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08006d70  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d236  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dbf  00000000  00000000  0002d47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000847  00000000  00000000  0002fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028088  00000000  00000000  0003053f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edb0  00000000  00000000  000585c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f47bf  00000000  00000000  00067377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b1c  00000000  00000000  0015bb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0015f654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	080067cc 	.word	0x080067cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	080067cc 	.word	0x080067cc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	80fb      	strh	r3, [r7, #6]
 80005f8:	4613      	mov	r3, r2
 80005fa:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005fc:	88fa      	ldrh	r2, [r7, #6]
 80005fe:	88bb      	ldrh	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	2b3f      	cmp	r3, #63	; 0x3f
 8000604:	dc01      	bgt.n	800060a <bytestowrite+0x1e>
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	e003      	b.n	8000612 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000610:	b29b      	uxth	r3, r3
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <Bytes2float>:
    }

}

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800061e:	b480      	push	{r7}
 8000620:	b087      	sub	sp, #28
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000626:	2300      	movs	r3, #0
 8000628:	75fb      	strb	r3, [r7, #23]
 800062a:	e00b      	b.n	8000644 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	441a      	add	r2, r3
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	7812      	ldrb	r2, [r2, #0]
 8000636:	3318      	adds	r3, #24
 8000638:	443b      	add	r3, r7
 800063a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800063e:	7dfb      	ldrb	r3, [r7, #23]
 8000640:	3301      	adds	r3, #1
 8000642:	75fb      	strb	r3, [r7, #23]
 8000644:	7dfb      	ldrb	r3, [r7, #23]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d9f0      	bls.n	800062c <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	613b      	str	r3, [r7, #16]
   return float_variable;
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	ee07 3a90 	vmov	s15, r3
}
 8000654:	eeb0 0a67 	vmov.f32	s0, s15
 8000658:	371c      	adds	r7, #28
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	4603      	mov	r3, r0
 800066a:	460a      	mov	r2, r1
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	4613      	mov	r3, r2
 8000670:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8000672:	f107 020c 	add.w	r2, r7, #12
 8000676:	88b9      	ldrh	r1, [r7, #4]
 8000678:	88f8      	ldrh	r0, [r7, #6]
 800067a:	2304      	movs	r3, #4
 800067c:	f000 f80c 	bl	8000698 <EEPROM_Read>

	return (Bytes2float(buffer));
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ffca 	bl	800061e <Bytes2float>
 800068a:	eef0 7a40 	vmov.f32	s15, s0
}
 800068e:	eeb0 0a67 	vmov.f32	s0, s15
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08e      	sub	sp, #56	; 0x38
 800069c:	af04      	add	r7, sp, #16
 800069e:	60ba      	str	r2, [r7, #8]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4603      	mov	r3, r0
 80006a4:	81fb      	strh	r3, [r7, #14]
 80006a6:	460b      	mov	r3, r1
 80006a8:	81bb      	strh	r3, [r7, #12]
 80006aa:	4613      	mov	r3, r2
 80006ac:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 80006ae:	2306      	movs	r3, #6
 80006b0:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 80006b6:	88fa      	ldrh	r2, [r7, #6]
 80006b8:	89bb      	ldrh	r3, [r7, #12]
 80006ba:	4413      	add	r3, r2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	da00      	bge.n	80006c2 <EEPROM_Read+0x2a>
 80006c0:	333f      	adds	r3, #63	; 0x3f
 80006c2:	119b      	asrs	r3, r3, #6
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	4413      	add	r3, r2
 80006ca:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 80006cc:	8b7a      	ldrh	r2, [r7, #26]
 80006ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	3301      	adds	r3, #1
 80006d6:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80006d8:	2300      	movs	r3, #0
 80006da:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	e031      	b.n	8000746 <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80006e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	b21a      	sxth	r2, r3
 80006ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80006f6:	89ba      	ldrh	r2, [r7, #12]
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff75 	bl	80005ec <bytestowrite>
 8000702:	4603      	mov	r3, r0
 8000704:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8000706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	4413      	add	r3, r2
 800070c:	8af9      	ldrh	r1, [r7, #22]
 800070e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000712:	9202      	str	r2, [sp, #8]
 8000714:	8aba      	ldrh	r2, [r7, #20]
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2302      	movs	r3, #2
 800071c:	460a      	mov	r2, r1
 800071e:	21a0      	movs	r1, #160	; 0xa0
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <EEPROM_Read+0xc0>)
 8000722:	f001 f88f 	bl	8001844 <HAL_I2C_Mem_Read>
		startPage += 1;
 8000726:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000728:	3301      	adds	r3, #1
 800072a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 800072c:	2300      	movs	r3, #0
 800072e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 8000730:	88fa      	ldrh	r2, [r7, #6]
 8000732:	8abb      	ldrh	r3, [r7, #20]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8000738:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800073a:	8abb      	ldrh	r3, [r7, #20]
 800073c:	4413      	add	r3, r2
 800073e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	3301      	adds	r3, #1
 8000744:	623b      	str	r3, [r7, #32]
 8000746:	8b3b      	ldrh	r3, [r7, #24]
 8000748:	6a3a      	ldr	r2, [r7, #32]
 800074a:	429a      	cmp	r2, r3
 800074c:	dbc9      	blt.n	80006e2 <EEPROM_Read+0x4a>
	}
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200001f0 	.word	0x200001f0

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 fc98 	bl	8001096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f87f 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f000 f947 	bl	80009fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800076e:	f000 f8d7 	bl	8000920 <MX_I2C1_Init>
  MX_UART4_Init();
 8000772:	f000 f913 	bl	800099c <MX_UART4_Init>
  EEPROM_Write(5, 20, dataw2, strlen((char *)dataw2));

  EEPROM_Write_NUM (6, 0, dataw3);
  */

  EEPROM_Read(3, 0, datar1, 50);
 8000776:	2332      	movs	r3, #50	; 0x32
 8000778:	4a33      	ldr	r2, [pc, #204]	; (8000848 <main+0xec>)
 800077a:	2100      	movs	r1, #0
 800077c:	2003      	movs	r0, #3
 800077e:	f7ff ff8b 	bl	8000698 <EEPROM_Read>

  EEPROM_Read(5, 15, datar2, 50);
 8000782:	2332      	movs	r3, #50	; 0x32
 8000784:	4a31      	ldr	r2, [pc, #196]	; (800084c <main+0xf0>)
 8000786:	210f      	movs	r1, #15
 8000788:	2005      	movs	r0, #5
 800078a:	f7ff ff85 	bl	8000698 <EEPROM_Read>

  datar3 = EEPROM_Read_NUM (6, 0);
 800078e:	2100      	movs	r1, #0
 8000790:	2006      	movs	r0, #6
 8000792:	f7ff ff66 	bl	8000662 <EEPROM_Read_NUM>
 8000796:	eef0 7a40 	vmov.f32	s15, s0
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <main+0xf4>)
 800079c:	edc3 7a00 	vstr	s15, [r3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 80007a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a4:	f000 fcd4 	bl	8001150 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80007a8:	2180      	movs	r1, #128	; 0x80
 80007aa:	482a      	ldr	r0, [pc, #168]	; (8000854 <main+0xf8>)
 80007ac:	f000 ff9f 	bl	80016ee <HAL_GPIO_TogglePin>

	int8_t message[20] = "test message";
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <main+0xfc>)
 80007b2:	1d3c      	adds	r4, r7, #4
 80007b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b6:	c407      	stmia	r4!, {r0, r1, r2}
 80007b8:	7023      	strb	r3, [r4, #0]
 80007ba:	f107 0311 	add.w	r3, r7, #17
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	f8c3 2003 	str.w	r2, [r3, #3]
	int8_t newline[2] = "\r\n";
 80007c6:	f640 230d 	movw	r3, #2573	; 0xa0d
 80007ca:	803b      	strh	r3, [r7, #0]

	HAL_UART_Transmit(&huart4, &datar1, sizeof(datar1), 200);
 80007cc:	23c8      	movs	r3, #200	; 0xc8
 80007ce:	2264      	movs	r2, #100	; 0x64
 80007d0:	491d      	ldr	r1, [pc, #116]	; (8000848 <main+0xec>)
 80007d2:	4822      	ldr	r0, [pc, #136]	; (800085c <main+0x100>)
 80007d4:	f002 fd76 	bl	80032c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, &newline, sizeof(newline), 200);
 80007d8:	4639      	mov	r1, r7
 80007da:	23c8      	movs	r3, #200	; 0xc8
 80007dc:	2202      	movs	r2, #2
 80007de:	481f      	ldr	r0, [pc, #124]	; (800085c <main+0x100>)
 80007e0:	f002 fd70 	bl	80032c4 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, &datar2, sizeof(datar2), 200);
 80007e4:	23c8      	movs	r3, #200	; 0xc8
 80007e6:	2264      	movs	r2, #100	; 0x64
 80007e8:	4918      	ldr	r1, [pc, #96]	; (800084c <main+0xf0>)
 80007ea:	481c      	ldr	r0, [pc, #112]	; (800085c <main+0x100>)
 80007ec:	f002 fd6a 	bl	80032c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, &newline, sizeof(newline), 200);
 80007f0:	4639      	mov	r1, r7
 80007f2:	23c8      	movs	r3, #200	; 0xc8
 80007f4:	2202      	movs	r2, #2
 80007f6:	4819      	ldr	r0, [pc, #100]	; (800085c <main+0x100>)
 80007f8:	f002 fd64 	bl	80032c4 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart4, &datar3, sizeof(datar3), 200);
 80007fc:	23c8      	movs	r3, #200	; 0xc8
 80007fe:	2204      	movs	r2, #4
 8000800:	4913      	ldr	r1, [pc, #76]	; (8000850 <main+0xf4>)
 8000802:	4816      	ldr	r0, [pc, #88]	; (800085c <main+0x100>)
 8000804:	f002 fd5e 	bl	80032c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, &newline, sizeof(newline), 200);
 8000808:	4639      	mov	r1, r7
 800080a:	23c8      	movs	r3, #200	; 0xc8
 800080c:	2202      	movs	r2, #2
 800080e:	4813      	ldr	r0, [pc, #76]	; (800085c <main+0x100>)
 8000810:	f002 fd58 	bl	80032c4 <HAL_UART_Transmit>

	snprintf(&float_str, sizeof(float_str), "%f\r\n", datar3);
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <main+0xf4>)
 8000816:	edd3 7a00 	vldr	s15, [r3]
 800081a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800081e:	ed8d 7b00 	vstr	d7, [sp]
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <main+0x104>)
 8000824:	210a      	movs	r1, #10
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <main+0x108>)
 8000828:	f003 fee6 	bl	80045f8 <sniprintf>

	HAL_UART_Transmit(&huart4, &float_str, sizeof(float_str), 200);
 800082c:	23c8      	movs	r3, #200	; 0xc8
 800082e:	220a      	movs	r2, #10
 8000830:	490c      	ldr	r1, [pc, #48]	; (8000864 <main+0x108>)
 8000832:	480a      	ldr	r0, [pc, #40]	; (800085c <main+0x100>)
 8000834:	f002 fd46 	bl	80032c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, &newline, sizeof(newline), 200);
 8000838:	4639      	mov	r1, r7
 800083a:	23c8      	movs	r3, #200	; 0xc8
 800083c:	2202      	movs	r2, #2
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <main+0x100>)
 8000840:	f002 fd40 	bl	80032c4 <HAL_UART_Transmit>
  {
 8000844:	e7ac      	b.n	80007a0 <main+0x44>
 8000846:	bf00      	nop
 8000848:	200002cc 	.word	0x200002cc
 800084c:	20000330 	.word	0x20000330
 8000850:	20000394 	.word	0x20000394
 8000854:	40020400 	.word	0x40020400
 8000858:	080067f0 	.word	0x080067f0
 800085c:	20000244 	.word	0x20000244
 8000860:	080067e8 	.word	0x080067e8
 8000864:	20000398 	.word	0x20000398

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2234      	movs	r2, #52	; 0x34
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 ff35 	bl	80046e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <SystemClock_Config+0xb0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <SystemClock_Config+0xb0>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <SystemClock_Config+0xb0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a4:	4b1d      	ldr	r3, [pc, #116]	; (800091c <SystemClock_Config+0xb4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ac:	4a1b      	ldr	r2, [pc, #108]	; (800091c <SystemClock_Config+0xb4>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <SystemClock_Config+0xb4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fbad 	bl	8002034 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f9a2 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fe45 	bl	8002590 <HAL_RCC_ClockConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800090c:	f000 f98c 	bl	8000c28 <Error_Handler>
  }
}
 8000910:	bf00      	nop
 8000912:	3750      	adds	r7, #80	; 0x50
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40007000 	.word	0x40007000

08000920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_I2C1_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <MX_I2C1_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_I2C1_Init+0x74>)
 800092c:	f240 220b 	movw	r2, #523	; 0x20b
 8000930:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_I2C1_Init+0x74>)
 800093a:	2201      	movs	r2, #1
 800093c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000950:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_I2C1_Init+0x74>)
 800095e:	f000 fee1 	bl	8001724 <HAL_I2C_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000968:	f000 f95e 	bl	8000c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <MX_I2C1_Init+0x74>)
 8000970:	f001 fac8 	bl	8001f04 <HAL_I2CEx_ConfigAnalogFilter>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800097a:	f000 f955 	bl	8000c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_I2C1_Init+0x74>)
 8000982:	f001 fb0a 	bl	8001f9a <HAL_I2CEx_ConfigDigitalFilter>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800098c:	f000 f94c 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200001f0 	.word	0x200001f0
 8000998:	40005400 	.word	0x40005400

0800099c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_UART4_Init+0x58>)
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_UART4_Init+0x5c>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_UART4_Init+0x58>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_UART4_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_UART4_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_UART4_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_UART4_Init+0x58>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_UART4_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_UART4_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_UART4_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_UART4_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_UART4_Init+0x58>)
 80009e0:	f002 fc22 	bl	8003228 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009ea:	f000 f91d 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000244 	.word	0x20000244
 80009f8:	40004c00 	.word	0x40004c00

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b7f      	ldr	r3, [pc, #508]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a7e      	ldr	r2, [pc, #504]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b7c      	ldr	r3, [pc, #496]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	4b79      	ldr	r3, [pc, #484]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a78      	ldr	r2, [pc, #480]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b76      	ldr	r3, [pc, #472]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b73      	ldr	r3, [pc, #460]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a72      	ldr	r2, [pc, #456]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b70      	ldr	r3, [pc, #448]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b6d      	ldr	r3, [pc, #436]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a6c      	ldr	r2, [pc, #432]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b6a      	ldr	r3, [pc, #424]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a72:	4b67      	ldr	r3, [pc, #412]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a66      	ldr	r2, [pc, #408]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b64      	ldr	r3, [pc, #400]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8a:	4b61      	ldr	r3, [pc, #388]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a60      	ldr	r2, [pc, #384]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b5e      	ldr	r3, [pc, #376]	; (8000c10 <MX_GPIO_Init+0x214>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa8:	485a      	ldr	r0, [pc, #360]	; (8000c14 <MX_GPIO_Init+0x218>)
 8000aaa:	f000 fe07 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4859      	ldr	r0, [pc, #356]	; (8000c18 <MX_GPIO_Init+0x21c>)
 8000ab4:	f000 fe02 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4853      	ldr	r0, [pc, #332]	; (8000c1c <MX_GPIO_Init+0x220>)
 8000ad0:	f000 fc48 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ad4:	2332      	movs	r3, #50	; 0x32
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	484b      	ldr	r0, [pc, #300]	; (8000c1c <MX_GPIO_Init+0x220>)
 8000af0:	f000 fc38 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000af4:	2386      	movs	r3, #134	; 0x86
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b04:	230b      	movs	r3, #11
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4844      	ldr	r0, [pc, #272]	; (8000c20 <MX_GPIO_Init+0x224>)
 8000b10:	f000 fc28 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b14:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4839      	ldr	r0, [pc, #228]	; (8000c14 <MX_GPIO_Init+0x218>)
 8000b2e:	f000 fc19 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b44:	230b      	movs	r3, #11
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4831      	ldr	r0, [pc, #196]	; (8000c14 <MX_GPIO_Init+0x218>)
 8000b50:	f000 fc08 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b66:	2307      	movs	r3, #7
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	482c      	ldr	r0, [pc, #176]	; (8000c24 <MX_GPIO_Init+0x228>)
 8000b72:	f000 fbf7 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b76:	2340      	movs	r3, #64	; 0x40
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4822      	ldr	r0, [pc, #136]	; (8000c18 <MX_GPIO_Init+0x21c>)
 8000b8e:	f000 fbe9 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481c      	ldr	r0, [pc, #112]	; (8000c18 <MX_GPIO_Init+0x21c>)
 8000ba6:	f000 fbdd 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000baa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4816      	ldr	r0, [pc, #88]	; (8000c20 <MX_GPIO_Init+0x224>)
 8000bc8:	f000 fbcc 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	480f      	ldr	r0, [pc, #60]	; (8000c20 <MX_GPIO_Init+0x224>)
 8000be2:	f000 fbbf 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000be6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf8:	230b      	movs	r3, #11
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_GPIO_Init+0x21c>)
 8000c04:	f000 fbae 	bl	8001364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c08:	bf00      	nop
 8000c0a:	3730      	adds	r7, #48	; 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40021800 	.word	0x40021800
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020c00 	.word	0x40020c00

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>
	...

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x44>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_MspInit+0x44>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x44>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_MspInit+0x44>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x44>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x44>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0ae      	sub	sp, #184	; 0xb8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2290      	movs	r2, #144	; 0x90
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 fd22 	bl	80046e6 <memset>
  if(hi2c->Instance==I2C1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <HAL_I2C_MspInit+0xb4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d13c      	bne.n	8000d26 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fe8c 	bl	80029d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cc6:	f7ff ffaf 	bl	8000c28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_I2C_MspInit+0xb8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_I2C_MspInit+0xb8>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_I2C_MspInit+0xb8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000ce2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cea:	2312      	movs	r3, #18
 8000cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d06:	4619      	mov	r1, r3
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <HAL_I2C_MspInit+0xbc>)
 8000d0a:	f000 fb2b 	bl	8001364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_I2C_MspInit+0xb8>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_I2C_MspInit+0xb8>)
 8000d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_I2C_MspInit+0xb8>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	37b8      	adds	r7, #184	; 0xb8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020400 	.word	0x40020400

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0ae      	sub	sp, #184	; 0xb8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2290      	movs	r2, #144	; 0x90
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fcc2 	bl	80046e6 <memset>
  if(huart->Instance==UART4)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a32      	ldr	r2, [pc, #200]	; (8000e30 <HAL_UART_MspInit+0xf4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d15d      	bne.n	8000e28 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fe2c 	bl	80029d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff ff4f 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <HAL_UART_MspInit+0xf8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a29      	ldr	r2, [pc, #164]	; (8000e34 <HAL_UART_MspInit+0xf8>)
 8000d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_UART_MspInit+0xf8>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <HAL_UART_MspInit+0xf8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <HAL_UART_MspInit+0xf8>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_UART_MspInit+0xf8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <HAL_UART_MspInit+0xf8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_UART_MspInit+0xf8>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_UART_MspInit+0xf8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dea:	2308      	movs	r3, #8
 8000dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4810      	ldr	r0, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0xfc>)
 8000df8:	f000 fab4 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e16:	2308      	movs	r3, #8
 8000e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <HAL_UART_MspInit+0x100>)
 8000e24:	f000 fa9e 	bl	8001364 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	37b8      	adds	r7, #184	; 0xb8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40004c00 	.word	0x40004c00
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020800 	.word	0x40020800

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f940 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return 1;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_kill>:

int _kill(int pid, int sig)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eae:	f003 fc6d 	bl	800478c <__errno>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2216      	movs	r2, #22
 8000eb6:	601a      	str	r2, [r3, #0]
  return -1;
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_exit>:

void _exit (int status)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ffe7 	bl	8000ea4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ed6:	e7fe      	b.n	8000ed6 <_exit+0x12>

08000ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00a      	b.n	8000f00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eea:	f3af 8000 	nop.w
 8000eee:	4601      	mov	r1, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf0      	blt.n	8000eea <_read+0x12>
  }

  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e009      	b.n	8000f38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60ba      	str	r2, [r7, #8]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf1      	blt.n	8000f24 <_write+0x12>
  }
  return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_close>:

int _close(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f72:	605a      	str	r2, [r3, #4]
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_isatty>:

int _isatty(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f003 fbd2 	bl	800478c <__errno>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20080000 	.word	0x20080000
 8001014:	00000400 	.word	0x00000400
 8001018:	200003a4 	.word	0x200003a4
 800101c:	200004f8 	.word	0x200004f8

08001020 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800107c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104a:	490e      	ldr	r1, [pc, #56]	; (8001084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001060:	4c0b      	ldr	r4, [pc, #44]	; (8001090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800106e:	f7ff ffd7 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f003 fb91 	bl	8004798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff fb71 	bl	800075c <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800107c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001088:	08006b9c 	.word	0x08006b9c
  ldr r2, =_sbss
 800108c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001090:	200004f8 	.word	0x200004f8

08001094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC_IRQHandler>

08001096 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109a:	2003      	movs	r0, #3
 800109c:	f000 f92e 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 f805 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a6:	f7ff fdc5 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f93b 	bl	800134a <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f911 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	20000008 	.word	0x20000008
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008
 8001134:	200003a8 	.word	0x200003a8

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200003a8 	.word	0x200003a8

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__NVIC_SetPriorityGrouping+0x40>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x40>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00
 80011dc:	05fa0000 	.word	0x05fa0000

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff47 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff5c 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffb0 	bl	80012b8 <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e175      	b.n	8001670 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8164 	bne.w	800166a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x56>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80be 	beq.w	800166a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b66      	ldr	r3, [pc, #408]	; (8001688 <HAL_GPIO_Init+0x324>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a65      	ldr	r2, [pc, #404]	; (8001688 <HAL_GPIO_Init+0x324>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_GPIO_Init+0x324>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001506:	4a61      	ldr	r2, [pc, #388]	; (800168c <HAL_GPIO_Init+0x328>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a58      	ldr	r2, [pc, #352]	; (8001690 <HAL_GPIO_Init+0x32c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d037      	beq.n	80015a2 <HAL_GPIO_Init+0x23e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a57      	ldr	r2, [pc, #348]	; (8001694 <HAL_GPIO_Init+0x330>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d031      	beq.n	800159e <HAL_GPIO_Init+0x23a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a56      	ldr	r2, [pc, #344]	; (8001698 <HAL_GPIO_Init+0x334>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d02b      	beq.n	800159a <HAL_GPIO_Init+0x236>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a55      	ldr	r2, [pc, #340]	; (800169c <HAL_GPIO_Init+0x338>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d025      	beq.n	8001596 <HAL_GPIO_Init+0x232>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <HAL_GPIO_Init+0x33c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d01f      	beq.n	8001592 <HAL_GPIO_Init+0x22e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a53      	ldr	r2, [pc, #332]	; (80016a4 <HAL_GPIO_Init+0x340>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d019      	beq.n	800158e <HAL_GPIO_Init+0x22a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <HAL_GPIO_Init+0x344>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x226>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a51      	ldr	r2, [pc, #324]	; (80016ac <HAL_GPIO_Init+0x348>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x222>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a50      	ldr	r2, [pc, #320]	; (80016b0 <HAL_GPIO_Init+0x34c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x21e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_GPIO_Init+0x350>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x21a>
 800157a:	2309      	movs	r3, #9
 800157c:	e012      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800157e:	230a      	movs	r3, #10
 8001580:	e010      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001582:	2308      	movs	r3, #8
 8001584:	e00e      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001586:	2307      	movs	r3, #7
 8001588:	e00c      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800158a:	2306      	movs	r3, #6
 800158c:	e00a      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800158e:	2305      	movs	r3, #5
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001592:	2304      	movs	r3, #4
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x240>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	; (800168c <HAL_GPIO_Init+0x328>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_GPIO_Init+0x354>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e6:	4a34      	ldr	r2, [pc, #208]	; (80016b8 <HAL_GPIO_Init+0x354>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ec:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <HAL_GPIO_Init+0x354>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001610:	4a29      	ldr	r2, [pc, #164]	; (80016b8 <HAL_GPIO_Init+0x354>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001616:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <HAL_GPIO_Init+0x354>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163a:	4a1f      	ldr	r2, [pc, #124]	; (80016b8 <HAL_GPIO_Init+0x354>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_GPIO_Init+0x354>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_GPIO_Init+0x354>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f ae86 	bls.w	8001384 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021400 	.word	0x40021400
 80016a8:	40021800 	.word	0x40021800
 80016ac:	40021c00 	.word	0x40021c00
 80016b0:	40022000 	.word	0x40022000
 80016b4:	40022400 	.word	0x40022400
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001700:	887a      	ldrh	r2, [r7, #2]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	041a      	lsls	r2, r3, #16
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43d9      	mvns	r1, r3
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	400b      	ands	r3, r1
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07f      	b.n	8001836 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fa96 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	e006      	b.n	80017ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d104      	bne.n	80017be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_I2C_Init+0x11c>)
 80017ca:	430b      	orrs	r3, r1
 80017cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69d9      	ldr	r1, [r3, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	02008000 	.word	0x02008000

08001844 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4603      	mov	r3, r0
 8001854:	817b      	strh	r3, [r7, #10]
 8001856:	460b      	mov	r3, r1
 8001858:	813b      	strh	r3, [r7, #8]
 800185a:	4613      	mov	r3, r2
 800185c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b20      	cmp	r3, #32
 8001868:	f040 80fd 	bne.w	8001a66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <HAL_I2C_Mem_Read+0x34>
 8001872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001874:	2b00      	cmp	r3, #0
 8001876:	d105      	bne.n	8001884 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0f1      	b.n	8001a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_I2C_Mem_Read+0x4e>
 800188e:	2302      	movs	r3, #2
 8001890:	e0ea      	b.n	8001a68 <HAL_I2C_Mem_Read+0x224>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800189a:	f7ff fc4d 	bl	8001138 <HAL_GetTick>
 800189e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2319      	movs	r3, #25
 80018a6:	2201      	movs	r2, #1
 80018a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 f95b 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0d5      	b.n	8001a68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2222      	movs	r2, #34	; 0x22
 80018c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2240      	movs	r2, #64	; 0x40
 80018c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a3a      	ldr	r2, [r7, #32]
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018e4:	88f8      	ldrh	r0, [r7, #6]
 80018e6:	893a      	ldrh	r2, [r7, #8]
 80018e8:	8979      	ldrh	r1, [r7, #10]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4603      	mov	r3, r0
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f8bf 	bl	8001a78 <I2C_RequestMemoryRead>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0ad      	b.n	8001a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001910:	b29b      	uxth	r3, r3
 8001912:	2bff      	cmp	r3, #255	; 0xff
 8001914:	d90e      	bls.n	8001934 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	22ff      	movs	r2, #255	; 0xff
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001920:	b2da      	uxtb	r2, r3
 8001922:	8979      	ldrh	r1, [r7, #10]
 8001924:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <HAL_I2C_Mem_Read+0x22c>)
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 fab7 	bl	8001ea0 <I2C_TransferConfig>
 8001932:	e00f      	b.n	8001954 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	b2da      	uxtb	r2, r3
 8001944:	8979      	ldrh	r1, [r7, #10]
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_I2C_Mem_Read+0x22c>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 faa6 	bl	8001ea0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195a:	2200      	movs	r2, #0
 800195c:	2104      	movs	r1, #4
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f902 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07c      	b.n	8001a68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	3b01      	subs	r3, #1
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29b      	uxth	r3, r3
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d034      	beq.n	8001a14 <HAL_I2C_Mem_Read+0x1d0>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d130      	bne.n	8001a14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	2200      	movs	r2, #0
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f8d3 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e04d      	b.n	8001a68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2bff      	cmp	r3, #255	; 0xff
 80019d4:	d90e      	bls.n	80019f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	22ff      	movs	r2, #255	; 0xff
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	8979      	ldrh	r1, [r7, #10]
 80019e4:	2300      	movs	r3, #0
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fa57 	bl	8001ea0 <I2C_TransferConfig>
 80019f2:	e00f      	b.n	8001a14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	8979      	ldrh	r1, [r7, #10]
 8001a06:	2300      	movs	r3, #0
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fa46 	bl	8001ea0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d19a      	bne.n	8001954 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f920 	bl	8001c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e01a      	b.n	8001a68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2220      	movs	r2, #32
 8001a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_I2C_Mem_Read+0x230>)
 8001a46:	400b      	ands	r3, r1
 8001a48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a66:	2302      	movs	r3, #2
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	80002400 	.word	0x80002400
 8001a74:	fe00e800 	.word	0xfe00e800

08001a78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	4608      	mov	r0, r1
 8001a82:	4611      	mov	r1, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	817b      	strh	r3, [r7, #10]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	813b      	strh	r3, [r7, #8]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	8979      	ldrh	r1, [r7, #10]
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <I2C_RequestMemoryRead+0xa4>)
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f9fe 	bl	8001ea0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f89d 	bl	8001be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e02c      	b.n	8001b12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001abe:	893b      	ldrh	r3, [r7, #8]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ac8:	e015      	b.n	8001af6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001aca:	893b      	ldrh	r3, [r7, #8]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f883 	bl	8001be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e012      	b.n	8001b12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aec:	893b      	ldrh	r3, [r7, #8]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2200      	movs	r2, #0
 8001afe:	2140      	movs	r1, #64	; 0x40
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f831 	bl	8001b68 <I2C_WaitOnFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	80002000 	.word	0x80002000

08001b20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d103      	bne.n	8001b3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d007      	beq.n	8001b5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	619a      	str	r2, [r3, #24]
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b78:	e022      	b.n	8001bc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d01e      	beq.n	8001bc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7ff fad9 	bl	8001138 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d113      	bne.n	8001bc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f043 0220 	orr.w	r2, r3, #32
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e00f      	b.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699a      	ldr	r2, [r3, #24]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d0cd      	beq.n	8001b7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bf4:	e02c      	b.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f870 	bl	8001ce0 <I2C_IsErrorOccurred>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e02a      	b.n	8001c60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d01e      	beq.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c12:	f7ff fa91 	bl	8001138 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d113      	bne.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e007      	b.n	8001c60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d1cb      	bne.n	8001bf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c74:	e028      	b.n	8001cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f830 	bl	8001ce0 <I2C_IsErrorOccurred>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e026      	b.n	8001cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8a:	f7ff fa55 	bl	8001138 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d302      	bcc.n	8001ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d113      	bne.n	8001cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f043 0220 	orr.w	r2, r3, #32
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e007      	b.n	8001cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d1cf      	bne.n	8001c76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d068      	beq.n	8001dde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2210      	movs	r2, #16
 8001d12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d14:	e049      	b.n	8001daa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d045      	beq.n	8001daa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d1e:	f7ff fa0b 	bl	8001138 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d302      	bcc.n	8001d34 <I2C_IsErrorOccurred+0x54>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d13a      	bne.n	8001daa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d56:	d121      	bne.n	8001d9c <I2C_IsErrorOccurred+0xbc>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d5e:	d01d      	beq.n	8001d9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d60:	7cfb      	ldrb	r3, [r7, #19]
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d01a      	beq.n	8001d9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d76:	f7ff f9df 	bl	8001138 <HAL_GetTick>
 8001d7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d7c:	e00e      	b.n	8001d9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d7e:	f7ff f9db 	bl	8001138 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b19      	cmp	r3, #25
 8001d8a:	d907      	bls.n	8001d9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f043 0320 	orr.w	r3, r3, #32
 8001d92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001d9a:	e006      	b.n	8001daa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b20      	cmp	r3, #32
 8001da8:	d1e9      	bne.n	8001d7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d003      	beq.n	8001dc0 <I2C_IsErrorOccurred+0xe0>
 8001db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0aa      	beq.n	8001d16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00b      	beq.n	8001e08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d01c      	beq.n	8001e8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f7ff fe63 	bl	8001b20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <I2C_IsErrorOccurred+0x1bc>)
 8001e66:	400b      	ands	r3, r1
 8001e68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	fe00e800 	.word	0xfe00e800

08001ea0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	817b      	strh	r3, [r7, #10]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eb2:	897b      	ldrh	r3, [r7, #10]
 8001eb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eb8:	7a7b      	ldrb	r3, [r7, #9]
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ec0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ece:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	0d5b      	lsrs	r3, r3, #21
 8001eda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <I2C_TransferConfig+0x60>)
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	ea02 0103 	and.w	r1, r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	03ff63ff 	.word	0x03ff63ff

08001f04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d138      	bne.n	8001f8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e032      	b.n	8001f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2224      	movs	r2, #36	; 0x24
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6819      	ldr	r1, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d139      	bne.n	8002024 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e033      	b.n	8002026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2224      	movs	r2, #36	; 0x24
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002024:	2302      	movs	r3, #2
  }
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e29b      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8087 	beq.w	8002166 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002058:	4b96      	ldr	r3, [pc, #600]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b04      	cmp	r3, #4
 8002062:	d00c      	beq.n	800207e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002064:	4b93      	ldr	r3, [pc, #588]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d112      	bne.n	8002096 <HAL_RCC_OscConfig+0x62>
 8002070:	4b90      	ldr	r3, [pc, #576]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207c:	d10b      	bne.n	8002096 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207e:	4b8d      	ldr	r3, [pc, #564]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d06c      	beq.n	8002164 <HAL_RCC_OscConfig+0x130>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d168      	bne.n	8002164 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e275      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x7a>
 80020a0:	4b84      	ldr	r3, [pc, #528]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a83      	ldr	r2, [pc, #524]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e02e      	b.n	800210c <HAL_RCC_OscConfig+0xd8>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x9c>
 80020b6:	4b7f      	ldr	r3, [pc, #508]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a7e      	ldr	r2, [pc, #504]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b7c      	ldr	r3, [pc, #496]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7b      	ldr	r2, [pc, #492]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e01d      	b.n	800210c <HAL_RCC_OscConfig+0xd8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0xc0>
 80020da:	4b76      	ldr	r3, [pc, #472]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a75      	ldr	r2, [pc, #468]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b73      	ldr	r3, [pc, #460]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a72      	ldr	r2, [pc, #456]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0xd8>
 80020f4:	4b6f      	ldr	r3, [pc, #444]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a6e      	ldr	r2, [pc, #440]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80020fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b6c      	ldr	r3, [pc, #432]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6b      	ldr	r2, [pc, #428]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff f810 	bl	8001138 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff f80c 	bl	8001138 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e229      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0xe8>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe fffc 	bl	8001138 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002144:	f7fe fff8 	bl	8001138 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e215      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	4b57      	ldr	r3, [pc, #348]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x110>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d069      	beq.n	8002246 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002172:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b4d      	ldr	r3, [pc, #308]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b08      	cmp	r3, #8
 8002188:	d11c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x190>
 800218a:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_RCC_OscConfig+0x17a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e1e9      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	493d      	ldr	r1, [pc, #244]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	e040      	b.n	8002246 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d023      	beq.n	8002214 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021cc:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a38      	ldr	r2, [pc, #224]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ffae 	bl	8001138 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e0:	f7fe ffaa 	bl	8001138 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e1c7      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f2:	4b30      	ldr	r3, [pc, #192]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4929      	ldr	r1, [pc, #164]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
 8002212:	e018      	b.n	8002246 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a26      	ldr	r2, [pc, #152]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe ff8a 	bl	8001138 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002228:	f7fe ff86 	bl	8001138 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1a3      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d038      	beq.n	80022c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d019      	beq.n	800228e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 800225c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225e:	4a15      	ldr	r2, [pc, #84]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7fe ff67 	bl	8001138 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226e:	f7fe ff63 	bl	8001138 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e180      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x23a>
 800228c:	e01a      	b.n	80022c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002292:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <HAL_RCC_OscConfig+0x280>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7fe ff4d 	bl	8001138 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a2:	f7fe ff49 	bl	8001138 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d903      	bls.n	80022b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e166      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
 80022b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	4b92      	ldr	r3, [pc, #584]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a4 	beq.w	800241a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d2:	4b8c      	ldr	r3, [pc, #560]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b89      	ldr	r3, [pc, #548]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a88      	ldr	r2, [pc, #544]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b86      	ldr	r3, [pc, #536]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022fa:	4b83      	ldr	r3, [pc, #524]	; (8002508 <HAL_RCC_OscConfig+0x4d4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002306:	4b80      	ldr	r3, [pc, #512]	; (8002508 <HAL_RCC_OscConfig+0x4d4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7f      	ldr	r2, [pc, #508]	; (8002508 <HAL_RCC_OscConfig+0x4d4>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7fe ff11 	bl	8001138 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7fe ff0d 	bl	8001138 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e12a      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800232c:	4b76      	ldr	r3, [pc, #472]	; (8002508 <HAL_RCC_OscConfig+0x4d4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x31a>
 8002340:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a6f      	ldr	r2, [pc, #444]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
 800234c:	e02d      	b.n	80023aa <HAL_RCC_OscConfig+0x376>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x33c>
 8002356:	4b6b      	ldr	r3, [pc, #428]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a6a      	ldr	r2, [pc, #424]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
 8002362:	4b68      	ldr	r3, [pc, #416]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a67      	ldr	r2, [pc, #412]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
 800236e:	e01c      	b.n	80023aa <HAL_RCC_OscConfig+0x376>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_OscConfig+0x35e>
 8002378:	4b62      	ldr	r3, [pc, #392]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a61      	ldr	r2, [pc, #388]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
 8002384:	4b5f      	ldr	r3, [pc, #380]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a5e      	ldr	r2, [pc, #376]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0x376>
 8002392:	4b5c      	ldr	r3, [pc, #368]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	4a5b      	ldr	r2, [pc, #364]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6713      	str	r3, [r2, #112]	; 0x70
 800239e:	4b59      	ldr	r3, [pc, #356]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a58      	ldr	r2, [pc, #352]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe fec1 	bl	8001138 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe febd 	bl	8001138 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0d8      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCC_OscConfig+0x386>
 80023dc:	e014      	b.n	8002408 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7fe feab 	bl	8001138 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7fe fea7 	bl	8001138 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0c2      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	4b41      	ldr	r3, [pc, #260]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a3c      	ldr	r2, [pc, #240]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80ae 	beq.w	8002580 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002424:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d06d      	beq.n	800250c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d14b      	bne.n	80024d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a31      	ldr	r2, [pc, #196]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800243e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fe78 	bl	8001138 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fe74 	bl	8001138 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e091      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	3b01      	subs	r3, #1
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	071b      	lsls	r3, r3, #28
 8002496:	491b      	ldr	r1, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a18      	ldr	r2, [pc, #96]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fe46 	bl	8001138 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fe42 	bl	8001138 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e05f      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x47c>
 80024ce:	e057      	b.n	8002580 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe fe2c 	bl	8001138 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fe28 	bl	8001138 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e045      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_RCC_OscConfig+0x4d0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4b0>
 8002502:	e03d      	b.n	8002580 <HAL_RCC_OscConfig+0x54c>
 8002504:	40023800 	.word	0x40023800
 8002508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_RCC_OscConfig+0x558>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d030      	beq.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d129      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d122      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002542:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002544:	4293      	cmp	r3, r2
 8002546:	d119      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	3b01      	subs	r3, #1
 8002556:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d10f      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d0      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 020f 	bic.w	r2, r3, #15
 80025be:	4965      	ldr	r1, [pc, #404]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80025f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800260e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002612:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d040      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d115      	bne.n	8002672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e073      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4936      	ldr	r1, [pc, #216]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	4313      	orrs	r3, r2
 8002682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002684:	f7fe fd58 	bl	8001138 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7fe fd54 	bl	8001138 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e053      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d210      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 020f 	bic.w	r2, r3, #15
 80026ca:	4922      	ldr	r1, [pc, #136]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1cc>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1d0>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1d4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fcb4 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00
 8002758:	40023800 	.word	0x40023800
 800275c:	08006804 	.word	0x08006804
 8002760:	20000000 	.word	0x20000000
 8002764:	20000004 	.word	0x20000004

08002768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800276c:	b094      	sub	sp, #80	; 0x50
 800276e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	647b      	str	r3, [r7, #68]	; 0x44
 8002774:	2300      	movs	r3, #0
 8002776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002778:	2300      	movs	r3, #0
 800277a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002780:	4b79      	ldr	r3, [pc, #484]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d00d      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x40>
 800278c:	2b08      	cmp	r3, #8
 800278e:	f200 80e1 	bhi.w	8002954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x34>
 8002796:	2b04      	cmp	r3, #4
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800279a:	e0db      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b73      	ldr	r3, [pc, #460]	; (800296c <HAL_RCC_GetSysClockFreq+0x204>)
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a0:	e0db      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027a2:	4b72      	ldr	r3, [pc, #456]	; (800296c <HAL_RCC_GetSysClockFreq+0x204>)
 80027a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027a6:	e0d8      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a8:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027b2:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d063      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027be:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	2200      	movs	r2, #0
 80027c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30
 80027d2:	2300      	movs	r3, #0
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
 80027d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027da:	4622      	mov	r2, r4
 80027dc:	462b      	mov	r3, r5
 80027de:	f04f 0000 	mov.w	r0, #0
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	0159      	lsls	r1, r3, #5
 80027e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ec:	0150      	lsls	r0, r2, #5
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4621      	mov	r1, r4
 80027f4:	1a51      	subs	r1, r2, r1
 80027f6:	6139      	str	r1, [r7, #16]
 80027f8:	4629      	mov	r1, r5
 80027fa:	eb63 0301 	sbc.w	r3, r3, r1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800280c:	4659      	mov	r1, fp
 800280e:	018b      	lsls	r3, r1, #6
 8002810:	4651      	mov	r1, sl
 8002812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002816:	4651      	mov	r1, sl
 8002818:	018a      	lsls	r2, r1, #6
 800281a:	4651      	mov	r1, sl
 800281c:	ebb2 0801 	subs.w	r8, r2, r1
 8002820:	4659      	mov	r1, fp
 8002822:	eb63 0901 	sbc.w	r9, r3, r1
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800283a:	4690      	mov	r8, r2
 800283c:	4699      	mov	r9, r3
 800283e:	4623      	mov	r3, r4
 8002840:	eb18 0303 	adds.w	r3, r8, r3
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	462b      	mov	r3, r5
 8002848:	eb49 0303 	adc.w	r3, r9, r3
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800285a:	4629      	mov	r1, r5
 800285c:	028b      	lsls	r3, r1, #10
 800285e:	4621      	mov	r1, r4
 8002860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002864:	4621      	mov	r1, r4
 8002866:	028a      	lsls	r2, r1, #10
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286e:	2200      	movs	r2, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
 8002872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002878:	f7fd fd3a 	bl	80002f0 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002884:	e058      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	2200      	movs	r2, #0
 800288e:	4618      	mov	r0, r3
 8002890:	4611      	mov	r1, r2
 8002892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	2300      	movs	r3, #0
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028a0:	4642      	mov	r2, r8
 80028a2:	464b      	mov	r3, r9
 80028a4:	f04f 0000 	mov.w	r0, #0
 80028a8:	f04f 0100 	mov.w	r1, #0
 80028ac:	0159      	lsls	r1, r3, #5
 80028ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b2:	0150      	lsls	r0, r2, #5
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4641      	mov	r1, r8
 80028ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80028be:	4649      	mov	r1, r9
 80028c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028d8:	ebb2 040a 	subs.w	r4, r2, sl
 80028dc:	eb63 050b 	sbc.w	r5, r3, fp
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	00eb      	lsls	r3, r5, #3
 80028ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ee:	00e2      	lsls	r2, r4, #3
 80028f0:	4614      	mov	r4, r2
 80028f2:	461d      	mov	r5, r3
 80028f4:	4643      	mov	r3, r8
 80028f6:	18e3      	adds	r3, r4, r3
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	464b      	mov	r3, r9
 80028fc:	eb45 0303 	adc.w	r3, r5, r3
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800290e:	4629      	mov	r1, r5
 8002910:	028b      	lsls	r3, r1, #10
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002918:	4621      	mov	r1, r4
 800291a:	028a      	lsls	r2, r1, #10
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002922:	2200      	movs	r2, #0
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	61fa      	str	r2, [r7, #28]
 8002928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800292c:	f7fd fce0 	bl	80002f0 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0x200>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002948:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800294a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetSysClockFreq+0x204>)
 8002956:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800295c:	4618      	mov	r0, r3
 800295e:	3750      	adds	r7, #80	; 0x50
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400

08002970 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <HAL_RCC_GetHCLKFreq+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000000 	.word	0x20000000

08002988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800298c:	f7ff fff0 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0a9b      	lsrs	r3, r3, #10
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4903      	ldr	r1, [pc, #12]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08006814 	.word	0x08006814

080029b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b4:	f7ff ffdc 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0b5b      	lsrs	r3, r3, #13
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4903      	ldr	r1, [pc, #12]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08006814 	.word	0x08006814

080029d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a00:	4b69      	ldr	r3, [pc, #420]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a68      	ldr	r2, [pc, #416]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a0a:	6093      	str	r3, [r2, #8]
 8002a0c:	4b66      	ldr	r3, [pc, #408]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a14:	4964      	ldr	r1, [pc, #400]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d017      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a32:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	4959      	ldr	r1, [pc, #356]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a50:	d101      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	494a      	ldr	r1, [pc, #296]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 808b 	beq.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002abc:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	4a39      	ldr	r2, [pc, #228]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac8:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ad4:	4b35      	ldr	r3, [pc, #212]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a34      	ldr	r2, [pc, #208]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fb2a 	bl	8001138 <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae8:	f7fe fb26 	bl	8001138 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e38f      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b06:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d035      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d02e      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b24:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d114      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe faee 	bl	8001138 <HAL_GetTick>
 8002b5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe faea 	bl	8001138 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e351      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ee      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b8e:	d111      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	4901      	ldr	r1, [pc, #4]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	0ffffcff 	.word	0x0ffffcff
 8002bb4:	4bac      	ldr	r3, [pc, #688]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4aab      	ldr	r2, [pc, #684]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bbe:	6093      	str	r3, [r2, #8]
 8002bc0:	4ba9      	ldr	r3, [pc, #676]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	49a6      	ldr	r1, [pc, #664]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d010      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bde:	4ba2      	ldr	r3, [pc, #648]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be4:	4aa0      	ldr	r2, [pc, #640]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bee:	4b9e      	ldr	r3, [pc, #632]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	499b      	ldr	r1, [pc, #620]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0c:	4b96      	ldr	r3, [pc, #600]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1a:	4993      	ldr	r1, [pc, #588]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c2e:	4b8e      	ldr	r3, [pc, #568]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c3c:	498a      	ldr	r1, [pc, #552]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c50:	4b85      	ldr	r3, [pc, #532]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5e:	4982      	ldr	r1, [pc, #520]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c72:	4b7d      	ldr	r3, [pc, #500]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4979      	ldr	r1, [pc, #484]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c94:	4b74      	ldr	r3, [pc, #464]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4971      	ldr	r1, [pc, #452]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cb6:	4b6c      	ldr	r3, [pc, #432]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	f023 020c 	bic.w	r2, r3, #12
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc4:	4968      	ldr	r1, [pc, #416]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cd8:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	4960      	ldr	r1, [pc, #384]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d08:	4957      	ldr	r1, [pc, #348]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d1c:	4b52      	ldr	r3, [pc, #328]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	494f      	ldr	r1, [pc, #316]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	4946      	ldr	r1, [pc, #280]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d60:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6e:	493e      	ldr	r1, [pc, #248]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d90:	4935      	ldr	r1, [pc, #212]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002da4:	4b30      	ldr	r3, [pc, #192]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db2:	492d      	ldr	r1, [pc, #180]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d011      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd4:	4924      	ldr	r1, [pc, #144]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de4:	d101      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	4914      	ldr	r1, [pc, #80]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e38:	490b      	ldr	r1, [pc, #44]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00f      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5c:	4902      	ldr	r1, [pc, #8]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e64:	e002      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e78:	4b8a      	ldr	r3, [pc, #552]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	4986      	ldr	r1, [pc, #536]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e9c:	4b81      	ldr	r3, [pc, #516]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eac:	497d      	ldr	r1, [pc, #500]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d006      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80d6 	beq.w	8003074 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ec8:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a75      	ldr	r2, [pc, #468]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ece:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed4:	f7fe f930 	bl	8001138 <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002edc:	f7fe f92c 	bl	8001138 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e195      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eee:	4b6d      	ldr	r3, [pc, #436]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d021      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11d      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f0e:	4b65      	ldr	r3, [pc, #404]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f1c:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f22:	0e1b      	lsrs	r3, r3, #24
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	019a      	lsls	r2, r3, #6
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	071b      	lsls	r3, r3, #28
 8002f42:	4958      	ldr	r1, [pc, #352]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d02e      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f74:	d129      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f76:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f84:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8a:	0f1b      	lsrs	r3, r3, #28
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	019a      	lsls	r2, r3, #6
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	071b      	lsls	r3, r3, #28
 8002faa:	493e      	ldr	r1, [pc, #248]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fb2:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb8:	f023 021f 	bic.w	r2, r3, #31
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	4938      	ldr	r1, [pc, #224]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01d      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fd6:	4b33      	ldr	r3, [pc, #204]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fdc:	0e1b      	lsrs	r3, r3, #24
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fe4:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fea:	0f1b      	lsrs	r3, r3, #28
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	019a      	lsls	r2, r3, #6
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	071b      	lsls	r3, r3, #28
 800300a:	4926      	ldr	r1, [pc, #152]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d011      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	019a      	lsls	r2, r3, #6
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	041b      	lsls	r3, r3, #16
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	491a      	ldr	r1, [pc, #104]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003048:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800304c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304e:	f7fe f873 	bl	8001138 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003056:	f7fe f86f 	bl	8001138 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b64      	cmp	r3, #100	; 0x64
 8003062:	d901      	bls.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0d8      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003068:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	f040 80ce 	bne.w	8003218 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a08      	ldr	r2, [pc, #32]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003088:	f7fe f856 	bl	8001138 <HAL_GetTick>
 800308c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800308e:	e00b      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003090:	f7fe f852 	bl	8001138 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d904      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0bb      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030a8:	4b5e      	ldr	r3, [pc, #376]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b4:	d0ec      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d02e      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d12a      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030de:	4b51      	ldr	r3, [pc, #324]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030ec:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f2:	0f1b      	lsrs	r3, r3, #28
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	019a      	lsls	r2, r3, #6
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	071b      	lsls	r3, r3, #28
 8003112:	4944      	ldr	r1, [pc, #272]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800311a:	4b42      	ldr	r3, [pc, #264]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003120:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	493d      	ldr	r1, [pc, #244]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d022      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003148:	d11d      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800314a:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	0e1b      	lsrs	r3, r3, #24
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	0f1b      	lsrs	r3, r3, #28
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	019a      	lsls	r2, r3, #6
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	431a      	orrs	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	4929      	ldr	r1, [pc, #164]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d028      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	0e1b      	lsrs	r3, r3, #24
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031a0:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	0c1b      	lsrs	r3, r3, #16
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	019a      	lsls	r2, r3, #6
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	431a      	orrs	r2, r3
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	4917      	ldr	r1, [pc, #92]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	4911      	ldr	r1, [pc, #68]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f0:	f7fd ffa2 	bl	8001138 <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031f8:	f7fd ff9e 	bl	8001138 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e007      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003216:	d1ef      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e040      	b.n	80032bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd fd76 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2224      	movs	r2, #36	; 0x24
 8003254:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8b0 	bl	80033cc <UART_SetConfig>
 800326c:	4603      	mov	r3, r0
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e022      	b.n	80032bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fb08 	bl	8003894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fb8f 	bl	80039d8 <UART_CheckIdleState>
 80032ba:	4603      	mov	r3, r0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d171      	bne.n	80033c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_UART_Transmit+0x24>
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e06a      	b.n	80033c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2221      	movs	r2, #33	; 0x21
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032fa:	f7fd ff1d 	bl	8001138 <HAL_GetTick>
 80032fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003318:	d108      	bne.n	800332c <HAL_UART_Transmit+0x68>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d104      	bne.n	800332c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e003      	b.n	8003334 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003334:	e02c      	b.n	8003390 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	2180      	movs	r1, #128	; 0x80
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fb96 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e038      	b.n	80033c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10b      	bne.n	800336e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003364:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	3302      	adds	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e007      	b.n	800337e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	3301      	adds	r3, #1
 800337c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1cc      	bne.n	8003336 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2200      	movs	r2, #0
 80033a4:	2140      	movs	r1, #64	; 0x40
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fb63 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e005      	b.n	80033c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4ba6      	ldr	r3, [pc, #664]	; (8003690 <UART_SetConfig+0x2c4>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	6979      	ldr	r1, [r7, #20]
 8003400:	430b      	orrs	r3, r1
 8003402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a94      	ldr	r2, [pc, #592]	; (8003694 <UART_SetConfig+0x2c8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d120      	bne.n	800348a <UART_SetConfig+0xbe>
 8003448:	4b93      	ldr	r3, [pc, #588]	; (8003698 <UART_SetConfig+0x2cc>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b03      	cmp	r3, #3
 8003454:	d816      	bhi.n	8003484 <UART_SetConfig+0xb8>
 8003456:	a201      	add	r2, pc, #4	; (adr r2, 800345c <UART_SetConfig+0x90>)
 8003458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345c:	0800346d 	.word	0x0800346d
 8003460:	08003479 	.word	0x08003479
 8003464:	08003473 	.word	0x08003473
 8003468:	0800347f 	.word	0x0800347f
 800346c:	2301      	movs	r3, #1
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e150      	b.n	8003714 <UART_SetConfig+0x348>
 8003472:	2302      	movs	r3, #2
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e14d      	b.n	8003714 <UART_SetConfig+0x348>
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e14a      	b.n	8003714 <UART_SetConfig+0x348>
 800347e:	2308      	movs	r3, #8
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e147      	b.n	8003714 <UART_SetConfig+0x348>
 8003484:	2310      	movs	r3, #16
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e144      	b.n	8003714 <UART_SetConfig+0x348>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a83      	ldr	r2, [pc, #524]	; (800369c <UART_SetConfig+0x2d0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d132      	bne.n	80034fa <UART_SetConfig+0x12e>
 8003494:	4b80      	ldr	r3, [pc, #512]	; (8003698 <UART_SetConfig+0x2cc>)
 8003496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d828      	bhi.n	80034f4 <UART_SetConfig+0x128>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0xdc>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034dd 	.word	0x080034dd
 80034ac:	080034f5 	.word	0x080034f5
 80034b0:	080034f5 	.word	0x080034f5
 80034b4:	080034f5 	.word	0x080034f5
 80034b8:	080034e9 	.word	0x080034e9
 80034bc:	080034f5 	.word	0x080034f5
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	080034f5 	.word	0x080034f5
 80034c8:	080034e3 	.word	0x080034e3
 80034cc:	080034f5 	.word	0x080034f5
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	080034f5 	.word	0x080034f5
 80034d8:	080034ef 	.word	0x080034ef
 80034dc:	2300      	movs	r3, #0
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e118      	b.n	8003714 <UART_SetConfig+0x348>
 80034e2:	2302      	movs	r3, #2
 80034e4:	77fb      	strb	r3, [r7, #31]
 80034e6:	e115      	b.n	8003714 <UART_SetConfig+0x348>
 80034e8:	2304      	movs	r3, #4
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e112      	b.n	8003714 <UART_SetConfig+0x348>
 80034ee:	2308      	movs	r3, #8
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e10f      	b.n	8003714 <UART_SetConfig+0x348>
 80034f4:	2310      	movs	r3, #16
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e10c      	b.n	8003714 <UART_SetConfig+0x348>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a68      	ldr	r2, [pc, #416]	; (80036a0 <UART_SetConfig+0x2d4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d120      	bne.n	8003546 <UART_SetConfig+0x17a>
 8003504:	4b64      	ldr	r3, [pc, #400]	; (8003698 <UART_SetConfig+0x2cc>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800350e:	2b30      	cmp	r3, #48	; 0x30
 8003510:	d013      	beq.n	800353a <UART_SetConfig+0x16e>
 8003512:	2b30      	cmp	r3, #48	; 0x30
 8003514:	d814      	bhi.n	8003540 <UART_SetConfig+0x174>
 8003516:	2b20      	cmp	r3, #32
 8003518:	d009      	beq.n	800352e <UART_SetConfig+0x162>
 800351a:	2b20      	cmp	r3, #32
 800351c:	d810      	bhi.n	8003540 <UART_SetConfig+0x174>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <UART_SetConfig+0x15c>
 8003522:	2b10      	cmp	r3, #16
 8003524:	d006      	beq.n	8003534 <UART_SetConfig+0x168>
 8003526:	e00b      	b.n	8003540 <UART_SetConfig+0x174>
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e0f2      	b.n	8003714 <UART_SetConfig+0x348>
 800352e:	2302      	movs	r3, #2
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e0ef      	b.n	8003714 <UART_SetConfig+0x348>
 8003534:	2304      	movs	r3, #4
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e0ec      	b.n	8003714 <UART_SetConfig+0x348>
 800353a:	2308      	movs	r3, #8
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e0e9      	b.n	8003714 <UART_SetConfig+0x348>
 8003540:	2310      	movs	r3, #16
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e0e6      	b.n	8003714 <UART_SetConfig+0x348>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a56      	ldr	r2, [pc, #344]	; (80036a4 <UART_SetConfig+0x2d8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d120      	bne.n	8003592 <UART_SetConfig+0x1c6>
 8003550:	4b51      	ldr	r3, [pc, #324]	; (8003698 <UART_SetConfig+0x2cc>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800355a:	2bc0      	cmp	r3, #192	; 0xc0
 800355c:	d013      	beq.n	8003586 <UART_SetConfig+0x1ba>
 800355e:	2bc0      	cmp	r3, #192	; 0xc0
 8003560:	d814      	bhi.n	800358c <UART_SetConfig+0x1c0>
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d009      	beq.n	800357a <UART_SetConfig+0x1ae>
 8003566:	2b80      	cmp	r3, #128	; 0x80
 8003568:	d810      	bhi.n	800358c <UART_SetConfig+0x1c0>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <UART_SetConfig+0x1a8>
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d006      	beq.n	8003580 <UART_SetConfig+0x1b4>
 8003572:	e00b      	b.n	800358c <UART_SetConfig+0x1c0>
 8003574:	2300      	movs	r3, #0
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e0cc      	b.n	8003714 <UART_SetConfig+0x348>
 800357a:	2302      	movs	r3, #2
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e0c9      	b.n	8003714 <UART_SetConfig+0x348>
 8003580:	2304      	movs	r3, #4
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e0c6      	b.n	8003714 <UART_SetConfig+0x348>
 8003586:	2308      	movs	r3, #8
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e0c3      	b.n	8003714 <UART_SetConfig+0x348>
 800358c:	2310      	movs	r3, #16
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e0c0      	b.n	8003714 <UART_SetConfig+0x348>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a44      	ldr	r2, [pc, #272]	; (80036a8 <UART_SetConfig+0x2dc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d125      	bne.n	80035e8 <UART_SetConfig+0x21c>
 800359c:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <UART_SetConfig+0x2cc>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035aa:	d017      	beq.n	80035dc <UART_SetConfig+0x210>
 80035ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b0:	d817      	bhi.n	80035e2 <UART_SetConfig+0x216>
 80035b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b6:	d00b      	beq.n	80035d0 <UART_SetConfig+0x204>
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d811      	bhi.n	80035e2 <UART_SetConfig+0x216>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <UART_SetConfig+0x1fe>
 80035c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c6:	d006      	beq.n	80035d6 <UART_SetConfig+0x20a>
 80035c8:	e00b      	b.n	80035e2 <UART_SetConfig+0x216>
 80035ca:	2300      	movs	r3, #0
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e0a1      	b.n	8003714 <UART_SetConfig+0x348>
 80035d0:	2302      	movs	r3, #2
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e09e      	b.n	8003714 <UART_SetConfig+0x348>
 80035d6:	2304      	movs	r3, #4
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e09b      	b.n	8003714 <UART_SetConfig+0x348>
 80035dc:	2308      	movs	r3, #8
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e098      	b.n	8003714 <UART_SetConfig+0x348>
 80035e2:	2310      	movs	r3, #16
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e095      	b.n	8003714 <UART_SetConfig+0x348>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <UART_SetConfig+0x2e0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d125      	bne.n	800363e <UART_SetConfig+0x272>
 80035f2:	4b29      	ldr	r3, [pc, #164]	; (8003698 <UART_SetConfig+0x2cc>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003600:	d017      	beq.n	8003632 <UART_SetConfig+0x266>
 8003602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003606:	d817      	bhi.n	8003638 <UART_SetConfig+0x26c>
 8003608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360c:	d00b      	beq.n	8003626 <UART_SetConfig+0x25a>
 800360e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003612:	d811      	bhi.n	8003638 <UART_SetConfig+0x26c>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <UART_SetConfig+0x254>
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361c:	d006      	beq.n	800362c <UART_SetConfig+0x260>
 800361e:	e00b      	b.n	8003638 <UART_SetConfig+0x26c>
 8003620:	2301      	movs	r3, #1
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e076      	b.n	8003714 <UART_SetConfig+0x348>
 8003626:	2302      	movs	r3, #2
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e073      	b.n	8003714 <UART_SetConfig+0x348>
 800362c:	2304      	movs	r3, #4
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e070      	b.n	8003714 <UART_SetConfig+0x348>
 8003632:	2308      	movs	r3, #8
 8003634:	77fb      	strb	r3, [r7, #31]
 8003636:	e06d      	b.n	8003714 <UART_SetConfig+0x348>
 8003638:	2310      	movs	r3, #16
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e06a      	b.n	8003714 <UART_SetConfig+0x348>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <UART_SetConfig+0x2e4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d138      	bne.n	80036ba <UART_SetConfig+0x2ee>
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <UART_SetConfig+0x2cc>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003656:	d017      	beq.n	8003688 <UART_SetConfig+0x2bc>
 8003658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800365c:	d82a      	bhi.n	80036b4 <UART_SetConfig+0x2e8>
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d00b      	beq.n	800367c <UART_SetConfig+0x2b0>
 8003664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003668:	d824      	bhi.n	80036b4 <UART_SetConfig+0x2e8>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <UART_SetConfig+0x2aa>
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	d006      	beq.n	8003682 <UART_SetConfig+0x2b6>
 8003674:	e01e      	b.n	80036b4 <UART_SetConfig+0x2e8>
 8003676:	2300      	movs	r3, #0
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e04b      	b.n	8003714 <UART_SetConfig+0x348>
 800367c:	2302      	movs	r3, #2
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	e048      	b.n	8003714 <UART_SetConfig+0x348>
 8003682:	2304      	movs	r3, #4
 8003684:	77fb      	strb	r3, [r7, #31]
 8003686:	e045      	b.n	8003714 <UART_SetConfig+0x348>
 8003688:	2308      	movs	r3, #8
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e042      	b.n	8003714 <UART_SetConfig+0x348>
 800368e:	bf00      	nop
 8003690:	efff69f3 	.word	0xefff69f3
 8003694:	40011000 	.word	0x40011000
 8003698:	40023800 	.word	0x40023800
 800369c:	40004400 	.word	0x40004400
 80036a0:	40004800 	.word	0x40004800
 80036a4:	40004c00 	.word	0x40004c00
 80036a8:	40005000 	.word	0x40005000
 80036ac:	40011400 	.word	0x40011400
 80036b0:	40007800 	.word	0x40007800
 80036b4:	2310      	movs	r3, #16
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e02c      	b.n	8003714 <UART_SetConfig+0x348>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a72      	ldr	r2, [pc, #456]	; (8003888 <UART_SetConfig+0x4bc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d125      	bne.n	8003710 <UART_SetConfig+0x344>
 80036c4:	4b71      	ldr	r3, [pc, #452]	; (800388c <UART_SetConfig+0x4c0>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036d2:	d017      	beq.n	8003704 <UART_SetConfig+0x338>
 80036d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036d8:	d817      	bhi.n	800370a <UART_SetConfig+0x33e>
 80036da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036de:	d00b      	beq.n	80036f8 <UART_SetConfig+0x32c>
 80036e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e4:	d811      	bhi.n	800370a <UART_SetConfig+0x33e>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <UART_SetConfig+0x326>
 80036ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ee:	d006      	beq.n	80036fe <UART_SetConfig+0x332>
 80036f0:	e00b      	b.n	800370a <UART_SetConfig+0x33e>
 80036f2:	2300      	movs	r3, #0
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e00d      	b.n	8003714 <UART_SetConfig+0x348>
 80036f8:	2302      	movs	r3, #2
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e00a      	b.n	8003714 <UART_SetConfig+0x348>
 80036fe:	2304      	movs	r3, #4
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e007      	b.n	8003714 <UART_SetConfig+0x348>
 8003704:	2308      	movs	r3, #8
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e004      	b.n	8003714 <UART_SetConfig+0x348>
 800370a:	2310      	movs	r3, #16
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e001      	b.n	8003714 <UART_SetConfig+0x348>
 8003710:	2310      	movs	r3, #16
 8003712:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	d15b      	bne.n	80037d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800371e:	7ffb      	ldrb	r3, [r7, #31]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d828      	bhi.n	8003776 <UART_SetConfig+0x3aa>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0x360>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003751 	.word	0x08003751
 8003730:	08003759 	.word	0x08003759
 8003734:	08003761 	.word	0x08003761
 8003738:	08003777 	.word	0x08003777
 800373c:	08003767 	.word	0x08003767
 8003740:	08003777 	.word	0x08003777
 8003744:	08003777 	.word	0x08003777
 8003748:	08003777 	.word	0x08003777
 800374c:	0800376f 	.word	0x0800376f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003750:	f7ff f91a 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8003754:	61b8      	str	r0, [r7, #24]
        break;
 8003756:	e013      	b.n	8003780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7ff f92a 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 800375c:	61b8      	str	r0, [r7, #24]
        break;
 800375e:	e00f      	b.n	8003780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003760:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <UART_SetConfig+0x4c4>)
 8003762:	61bb      	str	r3, [r7, #24]
        break;
 8003764:	e00c      	b.n	8003780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003766:	f7fe ffff 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 800376a:	61b8      	str	r0, [r7, #24]
        break;
 800376c:	e008      	b.n	8003780 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003772:	61bb      	str	r3, [r7, #24]
        break;
 8003774:	e004      	b.n	8003780 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	77bb      	strb	r3, [r7, #30]
        break;
 800377e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d074      	beq.n	8003870 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	005a      	lsls	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	fbb2 f3f3 	udiv	r3, r2, r3
 800379a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b0f      	cmp	r3, #15
 80037a0:	d916      	bls.n	80037d0 <UART_SetConfig+0x404>
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d212      	bcs.n	80037d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f023 030f 	bic.w	r3, r3, #15
 80037b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	b29a      	uxth	r2, r3
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	89fa      	ldrh	r2, [r7, #14]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	e04f      	b.n	8003870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	77bb      	strb	r3, [r7, #30]
 80037d4:	e04c      	b.n	8003870 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037d6:	7ffb      	ldrb	r3, [r7, #31]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d828      	bhi.n	800382e <UART_SetConfig+0x462>
 80037dc:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <UART_SetConfig+0x418>)
 80037de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	08003809 	.word	0x08003809
 80037e8:	08003811 	.word	0x08003811
 80037ec:	08003819 	.word	0x08003819
 80037f0:	0800382f 	.word	0x0800382f
 80037f4:	0800381f 	.word	0x0800381f
 80037f8:	0800382f 	.word	0x0800382f
 80037fc:	0800382f 	.word	0x0800382f
 8003800:	0800382f 	.word	0x0800382f
 8003804:	08003827 	.word	0x08003827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003808:	f7ff f8be 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 800380c:	61b8      	str	r0, [r7, #24]
        break;
 800380e:	e013      	b.n	8003838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003810:	f7ff f8ce 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8003814:	61b8      	str	r0, [r7, #24]
        break;
 8003816:	e00f      	b.n	8003838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <UART_SetConfig+0x4c4>)
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e00c      	b.n	8003838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381e:	f7fe ffa3 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8003822:	61b8      	str	r0, [r7, #24]
        break;
 8003824:	e008      	b.n	8003838 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382a:	61bb      	str	r3, [r7, #24]
        break;
 800382c:	e004      	b.n	8003838 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	77bb      	strb	r3, [r7, #30]
        break;
 8003836:	bf00      	nop
    }

    if (pclk != 0U)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	085a      	lsrs	r2, r3, #1
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	441a      	add	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d909      	bls.n	800386c <UART_SetConfig+0x4a0>
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385e:	d205      	bcs.n	800386c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e001      	b.n	8003870 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800387c:	7fbb      	ldrb	r3, [r7, #30]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40007c00 	.word	0x40007c00
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400

08003894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01a      	beq.n	80039aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	d10a      	bne.n	80039aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039e8:	f7fd fba6 	bl	8001138 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d10e      	bne.n	8003a1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f831 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e027      	b.n	8003a6a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d10e      	bne.n	8003a46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f81b 	bl	8003a72 <UART_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e011      	b.n	8003a6a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b09c      	sub	sp, #112	; 0x70
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a82:	e0a7      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	f000 80a3 	beq.w	8003bd4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fd fb53 	bl	8001138 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d13f      	bne.n	8003b24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab8:	667b      	str	r3, [r7, #100]	; 0x64
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ac8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e6      	bne.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3308      	adds	r3, #8
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae8:	f023 0301 	bic.w	r3, r3, #1
 8003aec:	663b      	str	r3, [r7, #96]	; 0x60
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3308      	adds	r3, #8
 8003af4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003af6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003af8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e5      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e068      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d050      	beq.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b40:	d148      	bne.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e6      	bne.n	8003b4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b9e:	623a      	str	r2, [r7, #32]
 8003ba0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	69f9      	ldr	r1, [r7, #28]
 8003ba4:	6a3a      	ldr	r2, [r7, #32]
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e5      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e010      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	f43f af48 	beq.w	8003a84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3770      	adds	r7, #112	; 0x70
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <__cvt>:
 8003bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c00:	ed2d 8b02 	vpush	{d8}
 8003c04:	eeb0 8b40 	vmov.f64	d8, d0
 8003c08:	b085      	sub	sp, #20
 8003c0a:	4617      	mov	r7, r2
 8003c0c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003c0e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003c10:	ee18 2a90 	vmov	r2, s17
 8003c14:	f025 0520 	bic.w	r5, r5, #32
 8003c18:	2a00      	cmp	r2, #0
 8003c1a:	bfb6      	itet	lt
 8003c1c:	222d      	movlt	r2, #45	; 0x2d
 8003c1e:	2200      	movge	r2, #0
 8003c20:	eeb1 8b40 	vneglt.f64	d8, d0
 8003c24:	2d46      	cmp	r5, #70	; 0x46
 8003c26:	460c      	mov	r4, r1
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	d004      	beq.n	8003c36 <__cvt+0x38>
 8003c2c:	2d45      	cmp	r5, #69	; 0x45
 8003c2e:	d100      	bne.n	8003c32 <__cvt+0x34>
 8003c30:	3401      	adds	r4, #1
 8003c32:	2102      	movs	r1, #2
 8003c34:	e000      	b.n	8003c38 <__cvt+0x3a>
 8003c36:	2103      	movs	r1, #3
 8003c38:	ab03      	add	r3, sp, #12
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	ab02      	add	r3, sp, #8
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	4622      	mov	r2, r4
 8003c42:	4633      	mov	r3, r6
 8003c44:	eeb0 0b48 	vmov.f64	d0, d8
 8003c48:	f000 fe56 	bl	80048f8 <_dtoa_r>
 8003c4c:	2d47      	cmp	r5, #71	; 0x47
 8003c4e:	d101      	bne.n	8003c54 <__cvt+0x56>
 8003c50:	07fb      	lsls	r3, r7, #31
 8003c52:	d51a      	bpl.n	8003c8a <__cvt+0x8c>
 8003c54:	2d46      	cmp	r5, #70	; 0x46
 8003c56:	eb00 0204 	add.w	r2, r0, r4
 8003c5a:	d10c      	bne.n	8003c76 <__cvt+0x78>
 8003c5c:	7803      	ldrb	r3, [r0, #0]
 8003c5e:	2b30      	cmp	r3, #48	; 0x30
 8003c60:	d107      	bne.n	8003c72 <__cvt+0x74>
 8003c62:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	bf1c      	itt	ne
 8003c6c:	f1c4 0401 	rsbne	r4, r4, #1
 8003c70:	6034      	strne	r4, [r6, #0]
 8003c72:	6833      	ldr	r3, [r6, #0]
 8003c74:	441a      	add	r2, r3
 8003c76:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7e:	bf08      	it	eq
 8003c80:	9203      	streq	r2, [sp, #12]
 8003c82:	2130      	movs	r1, #48	; 0x30
 8003c84:	9b03      	ldr	r3, [sp, #12]
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d307      	bcc.n	8003c9a <__cvt+0x9c>
 8003c8a:	9b03      	ldr	r3, [sp, #12]
 8003c8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c8e:	1a1b      	subs	r3, r3, r0
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	b005      	add	sp, #20
 8003c94:	ecbd 8b02 	vpop	{d8}
 8003c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c9a:	1c5c      	adds	r4, r3, #1
 8003c9c:	9403      	str	r4, [sp, #12]
 8003c9e:	7019      	strb	r1, [r3, #0]
 8003ca0:	e7f0      	b.n	8003c84 <__cvt+0x86>

08003ca2 <__exponent>:
 8003ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2900      	cmp	r1, #0
 8003ca8:	bfb8      	it	lt
 8003caa:	4249      	neglt	r1, r1
 8003cac:	f803 2b02 	strb.w	r2, [r3], #2
 8003cb0:	bfb4      	ite	lt
 8003cb2:	222d      	movlt	r2, #45	; 0x2d
 8003cb4:	222b      	movge	r2, #43	; 0x2b
 8003cb6:	2909      	cmp	r1, #9
 8003cb8:	7042      	strb	r2, [r0, #1]
 8003cba:	dd2a      	ble.n	8003d12 <__exponent+0x70>
 8003cbc:	f10d 0207 	add.w	r2, sp, #7
 8003cc0:	4617      	mov	r7, r2
 8003cc2:	260a      	movs	r6, #10
 8003cc4:	4694      	mov	ip, r2
 8003cc6:	fb91 f5f6 	sdiv	r5, r1, r6
 8003cca:	fb06 1415 	mls	r4, r6, r5, r1
 8003cce:	3430      	adds	r4, #48	; 0x30
 8003cd0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	2c63      	cmp	r4, #99	; 0x63
 8003cd8:	f102 32ff 	add.w	r2, r2, #4294967295
 8003cdc:	4629      	mov	r1, r5
 8003cde:	dcf1      	bgt.n	8003cc4 <__exponent+0x22>
 8003ce0:	3130      	adds	r1, #48	; 0x30
 8003ce2:	f1ac 0402 	sub.w	r4, ip, #2
 8003ce6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003cea:	1c41      	adds	r1, r0, #1
 8003cec:	4622      	mov	r2, r4
 8003cee:	42ba      	cmp	r2, r7
 8003cf0:	d30a      	bcc.n	8003d08 <__exponent+0x66>
 8003cf2:	f10d 0209 	add.w	r2, sp, #9
 8003cf6:	eba2 020c 	sub.w	r2, r2, ip
 8003cfa:	42bc      	cmp	r4, r7
 8003cfc:	bf88      	it	hi
 8003cfe:	2200      	movhi	r2, #0
 8003d00:	4413      	add	r3, r2
 8003d02:	1a18      	subs	r0, r3, r0
 8003d04:	b003      	add	sp, #12
 8003d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d08:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003d0c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003d10:	e7ed      	b.n	8003cee <__exponent+0x4c>
 8003d12:	2330      	movs	r3, #48	; 0x30
 8003d14:	3130      	adds	r1, #48	; 0x30
 8003d16:	7083      	strb	r3, [r0, #2]
 8003d18:	70c1      	strb	r1, [r0, #3]
 8003d1a:	1d03      	adds	r3, r0, #4
 8003d1c:	e7f1      	b.n	8003d02 <__exponent+0x60>
	...

08003d20 <_printf_float>:
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	b08b      	sub	sp, #44	; 0x2c
 8003d26:	460c      	mov	r4, r1
 8003d28:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003d2c:	4616      	mov	r6, r2
 8003d2e:	461f      	mov	r7, r3
 8003d30:	4605      	mov	r5, r0
 8003d32:	f000 fce1 	bl	80046f8 <_localeconv_r>
 8003d36:	f8d0 b000 	ldr.w	fp, [r0]
 8003d3a:	4658      	mov	r0, fp
 8003d3c:	f7fc fad0 	bl	80002e0 <strlen>
 8003d40:	2300      	movs	r3, #0
 8003d42:	9308      	str	r3, [sp, #32]
 8003d44:	f8d8 3000 	ldr.w	r3, [r8]
 8003d48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003d4c:	6822      	ldr	r2, [r4, #0]
 8003d4e:	3307      	adds	r3, #7
 8003d50:	f023 0307 	bic.w	r3, r3, #7
 8003d54:	f103 0108 	add.w	r1, r3, #8
 8003d58:	f8c8 1000 	str.w	r1, [r8]
 8003d5c:	ed93 0b00 	vldr	d0, [r3]
 8003d60:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8003fc0 <_printf_float+0x2a0>
 8003d64:	eeb0 7bc0 	vabs.f64	d7, d0
 8003d68:	eeb4 7b46 	vcmp.f64	d7, d6
 8003d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d70:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8003d74:	4682      	mov	sl, r0
 8003d76:	dd24      	ble.n	8003dc2 <_printf_float+0xa2>
 8003d78:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	d502      	bpl.n	8003d88 <_printf_float+0x68>
 8003d82:	232d      	movs	r3, #45	; 0x2d
 8003d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d88:	498f      	ldr	r1, [pc, #572]	; (8003fc8 <_printf_float+0x2a8>)
 8003d8a:	4b90      	ldr	r3, [pc, #576]	; (8003fcc <_printf_float+0x2ac>)
 8003d8c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003d90:	bf94      	ite	ls
 8003d92:	4688      	movls	r8, r1
 8003d94:	4698      	movhi	r8, r3
 8003d96:	2303      	movs	r3, #3
 8003d98:	6123      	str	r3, [r4, #16]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	2300      	movs	r3, #0
 8003da0:	6022      	str	r2, [r4, #0]
 8003da2:	9304      	str	r3, [sp, #16]
 8003da4:	9700      	str	r7, [sp, #0]
 8003da6:	4633      	mov	r3, r6
 8003da8:	aa09      	add	r2, sp, #36	; 0x24
 8003daa:	4621      	mov	r1, r4
 8003dac:	4628      	mov	r0, r5
 8003dae:	f000 f9d1 	bl	8004154 <_printf_common>
 8003db2:	3001      	adds	r0, #1
 8003db4:	f040 808a 	bne.w	8003ecc <_printf_float+0x1ac>
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	b00b      	add	sp, #44	; 0x2c
 8003dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc2:	eeb4 0b40 	vcmp.f64	d0, d0
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	d709      	bvc.n	8003de0 <_printf_float+0xc0>
 8003dcc:	ee10 3a90 	vmov	r3, s1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bfbc      	itt	lt
 8003dd4:	232d      	movlt	r3, #45	; 0x2d
 8003dd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003dda:	497d      	ldr	r1, [pc, #500]	; (8003fd0 <_printf_float+0x2b0>)
 8003ddc:	4b7d      	ldr	r3, [pc, #500]	; (8003fd4 <_printf_float+0x2b4>)
 8003dde:	e7d5      	b.n	8003d8c <_printf_float+0x6c>
 8003de0:	6863      	ldr	r3, [r4, #4]
 8003de2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003de6:	9104      	str	r1, [sp, #16]
 8003de8:	1c59      	adds	r1, r3, #1
 8003dea:	d13c      	bne.n	8003e66 <_printf_float+0x146>
 8003dec:	2306      	movs	r3, #6
 8003dee:	6063      	str	r3, [r4, #4]
 8003df0:	2300      	movs	r3, #0
 8003df2:	9303      	str	r3, [sp, #12]
 8003df4:	ab08      	add	r3, sp, #32
 8003df6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dfe:	ab07      	add	r3, sp, #28
 8003e00:	6861      	ldr	r1, [r4, #4]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	6022      	str	r2, [r4, #0]
 8003e06:	f10d 031b 	add.w	r3, sp, #27
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f7ff fef7 	bl	8003bfe <__cvt>
 8003e10:	9b04      	ldr	r3, [sp, #16]
 8003e12:	9907      	ldr	r1, [sp, #28]
 8003e14:	2b47      	cmp	r3, #71	; 0x47
 8003e16:	4680      	mov	r8, r0
 8003e18:	d108      	bne.n	8003e2c <_printf_float+0x10c>
 8003e1a:	1cc8      	adds	r0, r1, #3
 8003e1c:	db02      	blt.n	8003e24 <_printf_float+0x104>
 8003e1e:	6863      	ldr	r3, [r4, #4]
 8003e20:	4299      	cmp	r1, r3
 8003e22:	dd41      	ble.n	8003ea8 <_printf_float+0x188>
 8003e24:	f1a9 0902 	sub.w	r9, r9, #2
 8003e28:	fa5f f989 	uxtb.w	r9, r9
 8003e2c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e30:	d820      	bhi.n	8003e74 <_printf_float+0x154>
 8003e32:	3901      	subs	r1, #1
 8003e34:	464a      	mov	r2, r9
 8003e36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003e3a:	9107      	str	r1, [sp, #28]
 8003e3c:	f7ff ff31 	bl	8003ca2 <__exponent>
 8003e40:	9a08      	ldr	r2, [sp, #32]
 8003e42:	9004      	str	r0, [sp, #16]
 8003e44:	1813      	adds	r3, r2, r0
 8003e46:	2a01      	cmp	r2, #1
 8003e48:	6123      	str	r3, [r4, #16]
 8003e4a:	dc02      	bgt.n	8003e52 <_printf_float+0x132>
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	07d2      	lsls	r2, r2, #31
 8003e50:	d501      	bpl.n	8003e56 <_printf_float+0x136>
 8003e52:	3301      	adds	r3, #1
 8003e54:	6123      	str	r3, [r4, #16]
 8003e56:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0a2      	beq.n	8003da4 <_printf_float+0x84>
 8003e5e:	232d      	movs	r3, #45	; 0x2d
 8003e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e64:	e79e      	b.n	8003da4 <_printf_float+0x84>
 8003e66:	9904      	ldr	r1, [sp, #16]
 8003e68:	2947      	cmp	r1, #71	; 0x47
 8003e6a:	d1c1      	bne.n	8003df0 <_printf_float+0xd0>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1bf      	bne.n	8003df0 <_printf_float+0xd0>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e7bc      	b.n	8003dee <_printf_float+0xce>
 8003e74:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003e78:	d118      	bne.n	8003eac <_printf_float+0x18c>
 8003e7a:	2900      	cmp	r1, #0
 8003e7c:	6863      	ldr	r3, [r4, #4]
 8003e7e:	dd0b      	ble.n	8003e98 <_printf_float+0x178>
 8003e80:	6121      	str	r1, [r4, #16]
 8003e82:	b913      	cbnz	r3, 8003e8a <_printf_float+0x16a>
 8003e84:	6822      	ldr	r2, [r4, #0]
 8003e86:	07d0      	lsls	r0, r2, #31
 8003e88:	d502      	bpl.n	8003e90 <_printf_float+0x170>
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	440b      	add	r3, r1
 8003e8e:	6123      	str	r3, [r4, #16]
 8003e90:	2300      	movs	r3, #0
 8003e92:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e94:	9304      	str	r3, [sp, #16]
 8003e96:	e7de      	b.n	8003e56 <_printf_float+0x136>
 8003e98:	b913      	cbnz	r3, 8003ea0 <_printf_float+0x180>
 8003e9a:	6822      	ldr	r2, [r4, #0]
 8003e9c:	07d2      	lsls	r2, r2, #31
 8003e9e:	d501      	bpl.n	8003ea4 <_printf_float+0x184>
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	e7f4      	b.n	8003e8e <_printf_float+0x16e>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e7f2      	b.n	8003e8e <_printf_float+0x16e>
 8003ea8:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003eac:	9b08      	ldr	r3, [sp, #32]
 8003eae:	4299      	cmp	r1, r3
 8003eb0:	db05      	blt.n	8003ebe <_printf_float+0x19e>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	6121      	str	r1, [r4, #16]
 8003eb6:	07d8      	lsls	r0, r3, #31
 8003eb8:	d5ea      	bpl.n	8003e90 <_printf_float+0x170>
 8003eba:	1c4b      	adds	r3, r1, #1
 8003ebc:	e7e7      	b.n	8003e8e <_printf_float+0x16e>
 8003ebe:	2900      	cmp	r1, #0
 8003ec0:	bfd4      	ite	le
 8003ec2:	f1c1 0202 	rsble	r2, r1, #2
 8003ec6:	2201      	movgt	r2, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	e7e0      	b.n	8003e8e <_printf_float+0x16e>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	055a      	lsls	r2, r3, #21
 8003ed0:	d407      	bmi.n	8003ee2 <_printf_float+0x1c2>
 8003ed2:	6923      	ldr	r3, [r4, #16]
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4628      	mov	r0, r5
 8003eda:	47b8      	blx	r7
 8003edc:	3001      	adds	r0, #1
 8003ede:	d12a      	bne.n	8003f36 <_printf_float+0x216>
 8003ee0:	e76a      	b.n	8003db8 <_printf_float+0x98>
 8003ee2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003ee6:	f240 80e0 	bls.w	80040aa <_printf_float+0x38a>
 8003eea:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003eee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef6:	d133      	bne.n	8003f60 <_printf_float+0x240>
 8003ef8:	4a37      	ldr	r2, [pc, #220]	; (8003fd8 <_printf_float+0x2b8>)
 8003efa:	2301      	movs	r3, #1
 8003efc:	4631      	mov	r1, r6
 8003efe:	4628      	mov	r0, r5
 8003f00:	47b8      	blx	r7
 8003f02:	3001      	adds	r0, #1
 8003f04:	f43f af58 	beq.w	8003db8 <_printf_float+0x98>
 8003f08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	db02      	blt.n	8003f16 <_printf_float+0x1f6>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	07d8      	lsls	r0, r3, #31
 8003f14:	d50f      	bpl.n	8003f36 <_printf_float+0x216>
 8003f16:	4653      	mov	r3, sl
 8003f18:	465a      	mov	r2, fp
 8003f1a:	4631      	mov	r1, r6
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	47b8      	blx	r7
 8003f20:	3001      	adds	r0, #1
 8003f22:	f43f af49 	beq.w	8003db8 <_printf_float+0x98>
 8003f26:	f04f 0800 	mov.w	r8, #0
 8003f2a:	f104 091a 	add.w	r9, r4, #26
 8003f2e:	9b08      	ldr	r3, [sp, #32]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	4543      	cmp	r3, r8
 8003f34:	dc09      	bgt.n	8003f4a <_printf_float+0x22a>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	079b      	lsls	r3, r3, #30
 8003f3a:	f100 8106 	bmi.w	800414a <_printf_float+0x42a>
 8003f3e:	68e0      	ldr	r0, [r4, #12]
 8003f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f42:	4298      	cmp	r0, r3
 8003f44:	bfb8      	it	lt
 8003f46:	4618      	movlt	r0, r3
 8003f48:	e738      	b.n	8003dbc <_printf_float+0x9c>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	464a      	mov	r2, r9
 8003f4e:	4631      	mov	r1, r6
 8003f50:	4628      	mov	r0, r5
 8003f52:	47b8      	blx	r7
 8003f54:	3001      	adds	r0, #1
 8003f56:	f43f af2f 	beq.w	8003db8 <_printf_float+0x98>
 8003f5a:	f108 0801 	add.w	r8, r8, #1
 8003f5e:	e7e6      	b.n	8003f2e <_printf_float+0x20e>
 8003f60:	9b07      	ldr	r3, [sp, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	dc3a      	bgt.n	8003fdc <_printf_float+0x2bc>
 8003f66:	4a1c      	ldr	r2, [pc, #112]	; (8003fd8 <_printf_float+0x2b8>)
 8003f68:	2301      	movs	r3, #1
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	f43f af21 	beq.w	8003db8 <_printf_float+0x98>
 8003f76:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d102      	bne.n	8003f84 <_printf_float+0x264>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	07d9      	lsls	r1, r3, #31
 8003f82:	d5d8      	bpl.n	8003f36 <_printf_float+0x216>
 8003f84:	4653      	mov	r3, sl
 8003f86:	465a      	mov	r2, fp
 8003f88:	4631      	mov	r1, r6
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	47b8      	blx	r7
 8003f8e:	3001      	adds	r0, #1
 8003f90:	f43f af12 	beq.w	8003db8 <_printf_float+0x98>
 8003f94:	f04f 0900 	mov.w	r9, #0
 8003f98:	f104 0a1a 	add.w	sl, r4, #26
 8003f9c:	9b07      	ldr	r3, [sp, #28]
 8003f9e:	425b      	negs	r3, r3
 8003fa0:	454b      	cmp	r3, r9
 8003fa2:	dc01      	bgt.n	8003fa8 <_printf_float+0x288>
 8003fa4:	9b08      	ldr	r3, [sp, #32]
 8003fa6:	e795      	b.n	8003ed4 <_printf_float+0x1b4>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4652      	mov	r2, sl
 8003fac:	4631      	mov	r1, r6
 8003fae:	4628      	mov	r0, r5
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	f43f af00 	beq.w	8003db8 <_printf_float+0x98>
 8003fb8:	f109 0901 	add.w	r9, r9, #1
 8003fbc:	e7ee      	b.n	8003f9c <_printf_float+0x27c>
 8003fbe:	bf00      	nop
 8003fc0:	ffffffff 	.word	0xffffffff
 8003fc4:	7fefffff 	.word	0x7fefffff
 8003fc8:	0800681c 	.word	0x0800681c
 8003fcc:	08006820 	.word	0x08006820
 8003fd0:	08006824 	.word	0x08006824
 8003fd4:	08006828 	.word	0x08006828
 8003fd8:	0800682c 	.word	0x0800682c
 8003fdc:	9a08      	ldr	r2, [sp, #32]
 8003fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	bfa8      	it	ge
 8003fe4:	461a      	movge	r2, r3
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	4691      	mov	r9, r2
 8003fea:	dc38      	bgt.n	800405e <_printf_float+0x33e>
 8003fec:	2300      	movs	r3, #0
 8003fee:	9305      	str	r3, [sp, #20]
 8003ff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ff4:	f104 021a 	add.w	r2, r4, #26
 8003ff8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ffa:	9905      	ldr	r1, [sp, #20]
 8003ffc:	9304      	str	r3, [sp, #16]
 8003ffe:	eba3 0309 	sub.w	r3, r3, r9
 8004002:	428b      	cmp	r3, r1
 8004004:	dc33      	bgt.n	800406e <_printf_float+0x34e>
 8004006:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800400a:	429a      	cmp	r2, r3
 800400c:	db3c      	blt.n	8004088 <_printf_float+0x368>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	07da      	lsls	r2, r3, #31
 8004012:	d439      	bmi.n	8004088 <_printf_float+0x368>
 8004014:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004018:	eba2 0903 	sub.w	r9, r2, r3
 800401c:	9b04      	ldr	r3, [sp, #16]
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	4591      	cmp	r9, r2
 8004022:	bfa8      	it	ge
 8004024:	4691      	movge	r9, r2
 8004026:	f1b9 0f00 	cmp.w	r9, #0
 800402a:	dc35      	bgt.n	8004098 <_printf_float+0x378>
 800402c:	f04f 0800 	mov.w	r8, #0
 8004030:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004034:	f104 0a1a 	add.w	sl, r4, #26
 8004038:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	eba3 0309 	sub.w	r3, r3, r9
 8004042:	4543      	cmp	r3, r8
 8004044:	f77f af77 	ble.w	8003f36 <_printf_float+0x216>
 8004048:	2301      	movs	r3, #1
 800404a:	4652      	mov	r2, sl
 800404c:	4631      	mov	r1, r6
 800404e:	4628      	mov	r0, r5
 8004050:	47b8      	blx	r7
 8004052:	3001      	adds	r0, #1
 8004054:	f43f aeb0 	beq.w	8003db8 <_printf_float+0x98>
 8004058:	f108 0801 	add.w	r8, r8, #1
 800405c:	e7ec      	b.n	8004038 <_printf_float+0x318>
 800405e:	4613      	mov	r3, r2
 8004060:	4631      	mov	r1, r6
 8004062:	4642      	mov	r2, r8
 8004064:	4628      	mov	r0, r5
 8004066:	47b8      	blx	r7
 8004068:	3001      	adds	r0, #1
 800406a:	d1bf      	bne.n	8003fec <_printf_float+0x2cc>
 800406c:	e6a4      	b.n	8003db8 <_printf_float+0x98>
 800406e:	2301      	movs	r3, #1
 8004070:	4631      	mov	r1, r6
 8004072:	4628      	mov	r0, r5
 8004074:	9204      	str	r2, [sp, #16]
 8004076:	47b8      	blx	r7
 8004078:	3001      	adds	r0, #1
 800407a:	f43f ae9d 	beq.w	8003db8 <_printf_float+0x98>
 800407e:	9b05      	ldr	r3, [sp, #20]
 8004080:	9a04      	ldr	r2, [sp, #16]
 8004082:	3301      	adds	r3, #1
 8004084:	9305      	str	r3, [sp, #20]
 8004086:	e7b7      	b.n	8003ff8 <_printf_float+0x2d8>
 8004088:	4653      	mov	r3, sl
 800408a:	465a      	mov	r2, fp
 800408c:	4631      	mov	r1, r6
 800408e:	4628      	mov	r0, r5
 8004090:	47b8      	blx	r7
 8004092:	3001      	adds	r0, #1
 8004094:	d1be      	bne.n	8004014 <_printf_float+0x2f4>
 8004096:	e68f      	b.n	8003db8 <_printf_float+0x98>
 8004098:	9a04      	ldr	r2, [sp, #16]
 800409a:	464b      	mov	r3, r9
 800409c:	4442      	add	r2, r8
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	d1c1      	bne.n	800402c <_printf_float+0x30c>
 80040a8:	e686      	b.n	8003db8 <_printf_float+0x98>
 80040aa:	9a08      	ldr	r2, [sp, #32]
 80040ac:	2a01      	cmp	r2, #1
 80040ae:	dc01      	bgt.n	80040b4 <_printf_float+0x394>
 80040b0:	07db      	lsls	r3, r3, #31
 80040b2:	d537      	bpl.n	8004124 <_printf_float+0x404>
 80040b4:	2301      	movs	r3, #1
 80040b6:	4642      	mov	r2, r8
 80040b8:	4631      	mov	r1, r6
 80040ba:	4628      	mov	r0, r5
 80040bc:	47b8      	blx	r7
 80040be:	3001      	adds	r0, #1
 80040c0:	f43f ae7a 	beq.w	8003db8 <_printf_float+0x98>
 80040c4:	4653      	mov	r3, sl
 80040c6:	465a      	mov	r2, fp
 80040c8:	4631      	mov	r1, r6
 80040ca:	4628      	mov	r0, r5
 80040cc:	47b8      	blx	r7
 80040ce:	3001      	adds	r0, #1
 80040d0:	f43f ae72 	beq.w	8003db8 <_printf_float+0x98>
 80040d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80040d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80040dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e0:	9b08      	ldr	r3, [sp, #32]
 80040e2:	d01a      	beq.n	800411a <_printf_float+0x3fa>
 80040e4:	3b01      	subs	r3, #1
 80040e6:	f108 0201 	add.w	r2, r8, #1
 80040ea:	4631      	mov	r1, r6
 80040ec:	4628      	mov	r0, r5
 80040ee:	47b8      	blx	r7
 80040f0:	3001      	adds	r0, #1
 80040f2:	d10e      	bne.n	8004112 <_printf_float+0x3f2>
 80040f4:	e660      	b.n	8003db8 <_printf_float+0x98>
 80040f6:	2301      	movs	r3, #1
 80040f8:	464a      	mov	r2, r9
 80040fa:	4631      	mov	r1, r6
 80040fc:	4628      	mov	r0, r5
 80040fe:	47b8      	blx	r7
 8004100:	3001      	adds	r0, #1
 8004102:	f43f ae59 	beq.w	8003db8 <_printf_float+0x98>
 8004106:	f108 0801 	add.w	r8, r8, #1
 800410a:	9b08      	ldr	r3, [sp, #32]
 800410c:	3b01      	subs	r3, #1
 800410e:	4543      	cmp	r3, r8
 8004110:	dcf1      	bgt.n	80040f6 <_printf_float+0x3d6>
 8004112:	9b04      	ldr	r3, [sp, #16]
 8004114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004118:	e6dd      	b.n	8003ed6 <_printf_float+0x1b6>
 800411a:	f04f 0800 	mov.w	r8, #0
 800411e:	f104 091a 	add.w	r9, r4, #26
 8004122:	e7f2      	b.n	800410a <_printf_float+0x3ea>
 8004124:	2301      	movs	r3, #1
 8004126:	4642      	mov	r2, r8
 8004128:	e7df      	b.n	80040ea <_printf_float+0x3ca>
 800412a:	2301      	movs	r3, #1
 800412c:	464a      	mov	r2, r9
 800412e:	4631      	mov	r1, r6
 8004130:	4628      	mov	r0, r5
 8004132:	47b8      	blx	r7
 8004134:	3001      	adds	r0, #1
 8004136:	f43f ae3f 	beq.w	8003db8 <_printf_float+0x98>
 800413a:	f108 0801 	add.w	r8, r8, #1
 800413e:	68e3      	ldr	r3, [r4, #12]
 8004140:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004142:	1a5b      	subs	r3, r3, r1
 8004144:	4543      	cmp	r3, r8
 8004146:	dcf0      	bgt.n	800412a <_printf_float+0x40a>
 8004148:	e6f9      	b.n	8003f3e <_printf_float+0x21e>
 800414a:	f04f 0800 	mov.w	r8, #0
 800414e:	f104 0919 	add.w	r9, r4, #25
 8004152:	e7f4      	b.n	800413e <_printf_float+0x41e>

08004154 <_printf_common>:
 8004154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004158:	4616      	mov	r6, r2
 800415a:	4699      	mov	r9, r3
 800415c:	688a      	ldr	r2, [r1, #8]
 800415e:	690b      	ldr	r3, [r1, #16]
 8004160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004164:	4293      	cmp	r3, r2
 8004166:	bfb8      	it	lt
 8004168:	4613      	movlt	r3, r2
 800416a:	6033      	str	r3, [r6, #0]
 800416c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004170:	4607      	mov	r7, r0
 8004172:	460c      	mov	r4, r1
 8004174:	b10a      	cbz	r2, 800417a <_printf_common+0x26>
 8004176:	3301      	adds	r3, #1
 8004178:	6033      	str	r3, [r6, #0]
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	0699      	lsls	r1, r3, #26
 800417e:	bf42      	ittt	mi
 8004180:	6833      	ldrmi	r3, [r6, #0]
 8004182:	3302      	addmi	r3, #2
 8004184:	6033      	strmi	r3, [r6, #0]
 8004186:	6825      	ldr	r5, [r4, #0]
 8004188:	f015 0506 	ands.w	r5, r5, #6
 800418c:	d106      	bne.n	800419c <_printf_common+0x48>
 800418e:	f104 0a19 	add.w	sl, r4, #25
 8004192:	68e3      	ldr	r3, [r4, #12]
 8004194:	6832      	ldr	r2, [r6, #0]
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	42ab      	cmp	r3, r5
 800419a:	dc26      	bgt.n	80041ea <_printf_common+0x96>
 800419c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041a0:	1e13      	subs	r3, r2, #0
 80041a2:	6822      	ldr	r2, [r4, #0]
 80041a4:	bf18      	it	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	0692      	lsls	r2, r2, #26
 80041aa:	d42b      	bmi.n	8004204 <_printf_common+0xb0>
 80041ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041b0:	4649      	mov	r1, r9
 80041b2:	4638      	mov	r0, r7
 80041b4:	47c0      	blx	r8
 80041b6:	3001      	adds	r0, #1
 80041b8:	d01e      	beq.n	80041f8 <_printf_common+0xa4>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	6922      	ldr	r2, [r4, #16]
 80041be:	f003 0306 	and.w	r3, r3, #6
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	bf02      	ittt	eq
 80041c6:	68e5      	ldreq	r5, [r4, #12]
 80041c8:	6833      	ldreq	r3, [r6, #0]
 80041ca:	1aed      	subeq	r5, r5, r3
 80041cc:	68a3      	ldr	r3, [r4, #8]
 80041ce:	bf0c      	ite	eq
 80041d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041d4:	2500      	movne	r5, #0
 80041d6:	4293      	cmp	r3, r2
 80041d8:	bfc4      	itt	gt
 80041da:	1a9b      	subgt	r3, r3, r2
 80041dc:	18ed      	addgt	r5, r5, r3
 80041de:	2600      	movs	r6, #0
 80041e0:	341a      	adds	r4, #26
 80041e2:	42b5      	cmp	r5, r6
 80041e4:	d11a      	bne.n	800421c <_printf_common+0xc8>
 80041e6:	2000      	movs	r0, #0
 80041e8:	e008      	b.n	80041fc <_printf_common+0xa8>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4652      	mov	r2, sl
 80041ee:	4649      	mov	r1, r9
 80041f0:	4638      	mov	r0, r7
 80041f2:	47c0      	blx	r8
 80041f4:	3001      	adds	r0, #1
 80041f6:	d103      	bne.n	8004200 <_printf_common+0xac>
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	3501      	adds	r5, #1
 8004202:	e7c6      	b.n	8004192 <_printf_common+0x3e>
 8004204:	18e1      	adds	r1, r4, r3
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	2030      	movs	r0, #48	; 0x30
 800420a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800420e:	4422      	add	r2, r4
 8004210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004218:	3302      	adds	r3, #2
 800421a:	e7c7      	b.n	80041ac <_printf_common+0x58>
 800421c:	2301      	movs	r3, #1
 800421e:	4622      	mov	r2, r4
 8004220:	4649      	mov	r1, r9
 8004222:	4638      	mov	r0, r7
 8004224:	47c0      	blx	r8
 8004226:	3001      	adds	r0, #1
 8004228:	d0e6      	beq.n	80041f8 <_printf_common+0xa4>
 800422a:	3601      	adds	r6, #1
 800422c:	e7d9      	b.n	80041e2 <_printf_common+0x8e>
	...

08004230 <_printf_i>:
 8004230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004234:	7e0f      	ldrb	r7, [r1, #24]
 8004236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004238:	2f78      	cmp	r7, #120	; 0x78
 800423a:	4691      	mov	r9, r2
 800423c:	4680      	mov	r8, r0
 800423e:	460c      	mov	r4, r1
 8004240:	469a      	mov	sl, r3
 8004242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004246:	d807      	bhi.n	8004258 <_printf_i+0x28>
 8004248:	2f62      	cmp	r7, #98	; 0x62
 800424a:	d80a      	bhi.n	8004262 <_printf_i+0x32>
 800424c:	2f00      	cmp	r7, #0
 800424e:	f000 80d4 	beq.w	80043fa <_printf_i+0x1ca>
 8004252:	2f58      	cmp	r7, #88	; 0x58
 8004254:	f000 80c0 	beq.w	80043d8 <_printf_i+0x1a8>
 8004258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800425c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004260:	e03a      	b.n	80042d8 <_printf_i+0xa8>
 8004262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004266:	2b15      	cmp	r3, #21
 8004268:	d8f6      	bhi.n	8004258 <_printf_i+0x28>
 800426a:	a101      	add	r1, pc, #4	; (adr r1, 8004270 <_printf_i+0x40>)
 800426c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004270:	080042c9 	.word	0x080042c9
 8004274:	080042dd 	.word	0x080042dd
 8004278:	08004259 	.word	0x08004259
 800427c:	08004259 	.word	0x08004259
 8004280:	08004259 	.word	0x08004259
 8004284:	08004259 	.word	0x08004259
 8004288:	080042dd 	.word	0x080042dd
 800428c:	08004259 	.word	0x08004259
 8004290:	08004259 	.word	0x08004259
 8004294:	08004259 	.word	0x08004259
 8004298:	08004259 	.word	0x08004259
 800429c:	080043e1 	.word	0x080043e1
 80042a0:	08004309 	.word	0x08004309
 80042a4:	0800439b 	.word	0x0800439b
 80042a8:	08004259 	.word	0x08004259
 80042ac:	08004259 	.word	0x08004259
 80042b0:	08004403 	.word	0x08004403
 80042b4:	08004259 	.word	0x08004259
 80042b8:	08004309 	.word	0x08004309
 80042bc:	08004259 	.word	0x08004259
 80042c0:	08004259 	.word	0x08004259
 80042c4:	080043a3 	.word	0x080043a3
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	1d1a      	adds	r2, r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	602a      	str	r2, [r5, #0]
 80042d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042d8:	2301      	movs	r3, #1
 80042da:	e09f      	b.n	800441c <_printf_i+0x1ec>
 80042dc:	6820      	ldr	r0, [r4, #0]
 80042de:	682b      	ldr	r3, [r5, #0]
 80042e0:	0607      	lsls	r7, r0, #24
 80042e2:	f103 0104 	add.w	r1, r3, #4
 80042e6:	6029      	str	r1, [r5, #0]
 80042e8:	d501      	bpl.n	80042ee <_printf_i+0xbe>
 80042ea:	681e      	ldr	r6, [r3, #0]
 80042ec:	e003      	b.n	80042f6 <_printf_i+0xc6>
 80042ee:	0646      	lsls	r6, r0, #25
 80042f0:	d5fb      	bpl.n	80042ea <_printf_i+0xba>
 80042f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042f6:	2e00      	cmp	r6, #0
 80042f8:	da03      	bge.n	8004302 <_printf_i+0xd2>
 80042fa:	232d      	movs	r3, #45	; 0x2d
 80042fc:	4276      	negs	r6, r6
 80042fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004302:	485a      	ldr	r0, [pc, #360]	; (800446c <_printf_i+0x23c>)
 8004304:	230a      	movs	r3, #10
 8004306:	e012      	b.n	800432e <_printf_i+0xfe>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	1d19      	adds	r1, r3, #4
 800430e:	6029      	str	r1, [r5, #0]
 8004310:	0605      	lsls	r5, r0, #24
 8004312:	d501      	bpl.n	8004318 <_printf_i+0xe8>
 8004314:	681e      	ldr	r6, [r3, #0]
 8004316:	e002      	b.n	800431e <_printf_i+0xee>
 8004318:	0641      	lsls	r1, r0, #25
 800431a:	d5fb      	bpl.n	8004314 <_printf_i+0xe4>
 800431c:	881e      	ldrh	r6, [r3, #0]
 800431e:	4853      	ldr	r0, [pc, #332]	; (800446c <_printf_i+0x23c>)
 8004320:	2f6f      	cmp	r7, #111	; 0x6f
 8004322:	bf0c      	ite	eq
 8004324:	2308      	moveq	r3, #8
 8004326:	230a      	movne	r3, #10
 8004328:	2100      	movs	r1, #0
 800432a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800432e:	6865      	ldr	r5, [r4, #4]
 8004330:	60a5      	str	r5, [r4, #8]
 8004332:	2d00      	cmp	r5, #0
 8004334:	bfa2      	ittt	ge
 8004336:	6821      	ldrge	r1, [r4, #0]
 8004338:	f021 0104 	bicge.w	r1, r1, #4
 800433c:	6021      	strge	r1, [r4, #0]
 800433e:	b90e      	cbnz	r6, 8004344 <_printf_i+0x114>
 8004340:	2d00      	cmp	r5, #0
 8004342:	d04b      	beq.n	80043dc <_printf_i+0x1ac>
 8004344:	4615      	mov	r5, r2
 8004346:	fbb6 f1f3 	udiv	r1, r6, r3
 800434a:	fb03 6711 	mls	r7, r3, r1, r6
 800434e:	5dc7      	ldrb	r7, [r0, r7]
 8004350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004354:	4637      	mov	r7, r6
 8004356:	42bb      	cmp	r3, r7
 8004358:	460e      	mov	r6, r1
 800435a:	d9f4      	bls.n	8004346 <_printf_i+0x116>
 800435c:	2b08      	cmp	r3, #8
 800435e:	d10b      	bne.n	8004378 <_printf_i+0x148>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	07de      	lsls	r6, r3, #31
 8004364:	d508      	bpl.n	8004378 <_printf_i+0x148>
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	6861      	ldr	r1, [r4, #4]
 800436a:	4299      	cmp	r1, r3
 800436c:	bfde      	ittt	le
 800436e:	2330      	movle	r3, #48	; 0x30
 8004370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004374:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004378:	1b52      	subs	r2, r2, r5
 800437a:	6122      	str	r2, [r4, #16]
 800437c:	f8cd a000 	str.w	sl, [sp]
 8004380:	464b      	mov	r3, r9
 8004382:	aa03      	add	r2, sp, #12
 8004384:	4621      	mov	r1, r4
 8004386:	4640      	mov	r0, r8
 8004388:	f7ff fee4 	bl	8004154 <_printf_common>
 800438c:	3001      	adds	r0, #1
 800438e:	d14a      	bne.n	8004426 <_printf_i+0x1f6>
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	b004      	add	sp, #16
 8004396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	f043 0320 	orr.w	r3, r3, #32
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	4833      	ldr	r0, [pc, #204]	; (8004470 <_printf_i+0x240>)
 80043a4:	2778      	movs	r7, #120	; 0x78
 80043a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	6829      	ldr	r1, [r5, #0]
 80043ae:	061f      	lsls	r7, r3, #24
 80043b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80043b4:	d402      	bmi.n	80043bc <_printf_i+0x18c>
 80043b6:	065f      	lsls	r7, r3, #25
 80043b8:	bf48      	it	mi
 80043ba:	b2b6      	uxthmi	r6, r6
 80043bc:	07df      	lsls	r7, r3, #31
 80043be:	bf48      	it	mi
 80043c0:	f043 0320 	orrmi.w	r3, r3, #32
 80043c4:	6029      	str	r1, [r5, #0]
 80043c6:	bf48      	it	mi
 80043c8:	6023      	strmi	r3, [r4, #0]
 80043ca:	b91e      	cbnz	r6, 80043d4 <_printf_i+0x1a4>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f023 0320 	bic.w	r3, r3, #32
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	2310      	movs	r3, #16
 80043d6:	e7a7      	b.n	8004328 <_printf_i+0xf8>
 80043d8:	4824      	ldr	r0, [pc, #144]	; (800446c <_printf_i+0x23c>)
 80043da:	e7e4      	b.n	80043a6 <_printf_i+0x176>
 80043dc:	4615      	mov	r5, r2
 80043de:	e7bd      	b.n	800435c <_printf_i+0x12c>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	6826      	ldr	r6, [r4, #0]
 80043e4:	6961      	ldr	r1, [r4, #20]
 80043e6:	1d18      	adds	r0, r3, #4
 80043e8:	6028      	str	r0, [r5, #0]
 80043ea:	0635      	lsls	r5, r6, #24
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	d501      	bpl.n	80043f4 <_printf_i+0x1c4>
 80043f0:	6019      	str	r1, [r3, #0]
 80043f2:	e002      	b.n	80043fa <_printf_i+0x1ca>
 80043f4:	0670      	lsls	r0, r6, #25
 80043f6:	d5fb      	bpl.n	80043f0 <_printf_i+0x1c0>
 80043f8:	8019      	strh	r1, [r3, #0]
 80043fa:	2300      	movs	r3, #0
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	4615      	mov	r5, r2
 8004400:	e7bc      	b.n	800437c <_printf_i+0x14c>
 8004402:	682b      	ldr	r3, [r5, #0]
 8004404:	1d1a      	adds	r2, r3, #4
 8004406:	602a      	str	r2, [r5, #0]
 8004408:	681d      	ldr	r5, [r3, #0]
 800440a:	6862      	ldr	r2, [r4, #4]
 800440c:	2100      	movs	r1, #0
 800440e:	4628      	mov	r0, r5
 8004410:	f7fb ff16 	bl	8000240 <memchr>
 8004414:	b108      	cbz	r0, 800441a <_printf_i+0x1ea>
 8004416:	1b40      	subs	r0, r0, r5
 8004418:	6060      	str	r0, [r4, #4]
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	6123      	str	r3, [r4, #16]
 800441e:	2300      	movs	r3, #0
 8004420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004424:	e7aa      	b.n	800437c <_printf_i+0x14c>
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	462a      	mov	r2, r5
 800442a:	4649      	mov	r1, r9
 800442c:	4640      	mov	r0, r8
 800442e:	47d0      	blx	sl
 8004430:	3001      	adds	r0, #1
 8004432:	d0ad      	beq.n	8004390 <_printf_i+0x160>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	079b      	lsls	r3, r3, #30
 8004438:	d413      	bmi.n	8004462 <_printf_i+0x232>
 800443a:	68e0      	ldr	r0, [r4, #12]
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	4298      	cmp	r0, r3
 8004440:	bfb8      	it	lt
 8004442:	4618      	movlt	r0, r3
 8004444:	e7a6      	b.n	8004394 <_printf_i+0x164>
 8004446:	2301      	movs	r3, #1
 8004448:	4632      	mov	r2, r6
 800444a:	4649      	mov	r1, r9
 800444c:	4640      	mov	r0, r8
 800444e:	47d0      	blx	sl
 8004450:	3001      	adds	r0, #1
 8004452:	d09d      	beq.n	8004390 <_printf_i+0x160>
 8004454:	3501      	adds	r5, #1
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	9903      	ldr	r1, [sp, #12]
 800445a:	1a5b      	subs	r3, r3, r1
 800445c:	42ab      	cmp	r3, r5
 800445e:	dcf2      	bgt.n	8004446 <_printf_i+0x216>
 8004460:	e7eb      	b.n	800443a <_printf_i+0x20a>
 8004462:	2500      	movs	r5, #0
 8004464:	f104 0619 	add.w	r6, r4, #25
 8004468:	e7f5      	b.n	8004456 <_printf_i+0x226>
 800446a:	bf00      	nop
 800446c:	0800682e 	.word	0x0800682e
 8004470:	0800683f 	.word	0x0800683f

08004474 <std>:
 8004474:	2300      	movs	r3, #0
 8004476:	b510      	push	{r4, lr}
 8004478:	4604      	mov	r4, r0
 800447a:	e9c0 3300 	strd	r3, r3, [r0]
 800447e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004482:	6083      	str	r3, [r0, #8]
 8004484:	8181      	strh	r1, [r0, #12]
 8004486:	6643      	str	r3, [r0, #100]	; 0x64
 8004488:	81c2      	strh	r2, [r0, #14]
 800448a:	6183      	str	r3, [r0, #24]
 800448c:	4619      	mov	r1, r3
 800448e:	2208      	movs	r2, #8
 8004490:	305c      	adds	r0, #92	; 0x5c
 8004492:	f000 f928 	bl	80046e6 <memset>
 8004496:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <std+0x58>)
 8004498:	6263      	str	r3, [r4, #36]	; 0x24
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <std+0x5c>)
 800449c:	62a3      	str	r3, [r4, #40]	; 0x28
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <std+0x60>)
 80044a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <std+0x64>)
 80044a4:	6323      	str	r3, [r4, #48]	; 0x30
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <std+0x68>)
 80044a8:	6224      	str	r4, [r4, #32]
 80044aa:	429c      	cmp	r4, r3
 80044ac:	d006      	beq.n	80044bc <std+0x48>
 80044ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80044b2:	4294      	cmp	r4, r2
 80044b4:	d002      	beq.n	80044bc <std+0x48>
 80044b6:	33d0      	adds	r3, #208	; 0xd0
 80044b8:	429c      	cmp	r4, r3
 80044ba:	d105      	bne.n	80044c8 <std+0x54>
 80044bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c4:	f000 b98c 	b.w	80047e0 <__retarget_lock_init_recursive>
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	bf00      	nop
 80044cc:	08004661 	.word	0x08004661
 80044d0:	08004683 	.word	0x08004683
 80044d4:	080046bb 	.word	0x080046bb
 80044d8:	080046df 	.word	0x080046df
 80044dc:	200003ac 	.word	0x200003ac

080044e0 <stdio_exit_handler>:
 80044e0:	4a02      	ldr	r2, [pc, #8]	; (80044ec <stdio_exit_handler+0xc>)
 80044e2:	4903      	ldr	r1, [pc, #12]	; (80044f0 <stdio_exit_handler+0x10>)
 80044e4:	4803      	ldr	r0, [pc, #12]	; (80044f4 <stdio_exit_handler+0x14>)
 80044e6:	f000 b869 	b.w	80045bc <_fwalk_sglue>
 80044ea:	bf00      	nop
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	08006085 	.word	0x08006085
 80044f4:	20000018 	.word	0x20000018

080044f8 <cleanup_stdio>:
 80044f8:	6841      	ldr	r1, [r0, #4]
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <cleanup_stdio+0x34>)
 80044fc:	4299      	cmp	r1, r3
 80044fe:	b510      	push	{r4, lr}
 8004500:	4604      	mov	r4, r0
 8004502:	d001      	beq.n	8004508 <cleanup_stdio+0x10>
 8004504:	f001 fdbe 	bl	8006084 <_fflush_r>
 8004508:	68a1      	ldr	r1, [r4, #8]
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <cleanup_stdio+0x38>)
 800450c:	4299      	cmp	r1, r3
 800450e:	d002      	beq.n	8004516 <cleanup_stdio+0x1e>
 8004510:	4620      	mov	r0, r4
 8004512:	f001 fdb7 	bl	8006084 <_fflush_r>
 8004516:	68e1      	ldr	r1, [r4, #12]
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <cleanup_stdio+0x3c>)
 800451a:	4299      	cmp	r1, r3
 800451c:	d004      	beq.n	8004528 <cleanup_stdio+0x30>
 800451e:	4620      	mov	r0, r4
 8004520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004524:	f001 bdae 	b.w	8006084 <_fflush_r>
 8004528:	bd10      	pop	{r4, pc}
 800452a:	bf00      	nop
 800452c:	200003ac 	.word	0x200003ac
 8004530:	20000414 	.word	0x20000414
 8004534:	2000047c 	.word	0x2000047c

08004538 <global_stdio_init.part.0>:
 8004538:	b510      	push	{r4, lr}
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <global_stdio_init.part.0+0x30>)
 800453c:	4c0b      	ldr	r4, [pc, #44]	; (800456c <global_stdio_init.part.0+0x34>)
 800453e:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <global_stdio_init.part.0+0x38>)
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	4620      	mov	r0, r4
 8004544:	2200      	movs	r2, #0
 8004546:	2104      	movs	r1, #4
 8004548:	f7ff ff94 	bl	8004474 <std>
 800454c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004550:	2201      	movs	r2, #1
 8004552:	2109      	movs	r1, #9
 8004554:	f7ff ff8e 	bl	8004474 <std>
 8004558:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800455c:	2202      	movs	r2, #2
 800455e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004562:	2112      	movs	r1, #18
 8004564:	f7ff bf86 	b.w	8004474 <std>
 8004568:	200004e4 	.word	0x200004e4
 800456c:	200003ac 	.word	0x200003ac
 8004570:	080044e1 	.word	0x080044e1

08004574 <__sfp_lock_acquire>:
 8004574:	4801      	ldr	r0, [pc, #4]	; (800457c <__sfp_lock_acquire+0x8>)
 8004576:	f000 b934 	b.w	80047e2 <__retarget_lock_acquire_recursive>
 800457a:	bf00      	nop
 800457c:	200004ed 	.word	0x200004ed

08004580 <__sfp_lock_release>:
 8004580:	4801      	ldr	r0, [pc, #4]	; (8004588 <__sfp_lock_release+0x8>)
 8004582:	f000 b92f 	b.w	80047e4 <__retarget_lock_release_recursive>
 8004586:	bf00      	nop
 8004588:	200004ed 	.word	0x200004ed

0800458c <__sinit>:
 800458c:	b510      	push	{r4, lr}
 800458e:	4604      	mov	r4, r0
 8004590:	f7ff fff0 	bl	8004574 <__sfp_lock_acquire>
 8004594:	6a23      	ldr	r3, [r4, #32]
 8004596:	b11b      	cbz	r3, 80045a0 <__sinit+0x14>
 8004598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459c:	f7ff bff0 	b.w	8004580 <__sfp_lock_release>
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <__sinit+0x28>)
 80045a2:	6223      	str	r3, [r4, #32]
 80045a4:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <__sinit+0x2c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f5      	bne.n	8004598 <__sinit+0xc>
 80045ac:	f7ff ffc4 	bl	8004538 <global_stdio_init.part.0>
 80045b0:	e7f2      	b.n	8004598 <__sinit+0xc>
 80045b2:	bf00      	nop
 80045b4:	080044f9 	.word	0x080044f9
 80045b8:	200004e4 	.word	0x200004e4

080045bc <_fwalk_sglue>:
 80045bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c0:	4607      	mov	r7, r0
 80045c2:	4688      	mov	r8, r1
 80045c4:	4614      	mov	r4, r2
 80045c6:	2600      	movs	r6, #0
 80045c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045cc:	f1b9 0901 	subs.w	r9, r9, #1
 80045d0:	d505      	bpl.n	80045de <_fwalk_sglue+0x22>
 80045d2:	6824      	ldr	r4, [r4, #0]
 80045d4:	2c00      	cmp	r4, #0
 80045d6:	d1f7      	bne.n	80045c8 <_fwalk_sglue+0xc>
 80045d8:	4630      	mov	r0, r6
 80045da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045de:	89ab      	ldrh	r3, [r5, #12]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d907      	bls.n	80045f4 <_fwalk_sglue+0x38>
 80045e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045e8:	3301      	adds	r3, #1
 80045ea:	d003      	beq.n	80045f4 <_fwalk_sglue+0x38>
 80045ec:	4629      	mov	r1, r5
 80045ee:	4638      	mov	r0, r7
 80045f0:	47c0      	blx	r8
 80045f2:	4306      	orrs	r6, r0
 80045f4:	3568      	adds	r5, #104	; 0x68
 80045f6:	e7e9      	b.n	80045cc <_fwalk_sglue+0x10>

080045f8 <sniprintf>:
 80045f8:	b40c      	push	{r2, r3}
 80045fa:	b530      	push	{r4, r5, lr}
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <sniprintf+0x64>)
 80045fe:	1e0c      	subs	r4, r1, #0
 8004600:	681d      	ldr	r5, [r3, #0]
 8004602:	b09d      	sub	sp, #116	; 0x74
 8004604:	da08      	bge.n	8004618 <sniprintf+0x20>
 8004606:	238b      	movs	r3, #139	; 0x8b
 8004608:	602b      	str	r3, [r5, #0]
 800460a:	f04f 30ff 	mov.w	r0, #4294967295
 800460e:	b01d      	add	sp, #116	; 0x74
 8004610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004614:	b002      	add	sp, #8
 8004616:	4770      	bx	lr
 8004618:	f44f 7302 	mov.w	r3, #520	; 0x208
 800461c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004620:	bf14      	ite	ne
 8004622:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004626:	4623      	moveq	r3, r4
 8004628:	9304      	str	r3, [sp, #16]
 800462a:	9307      	str	r3, [sp, #28]
 800462c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004630:	9002      	str	r0, [sp, #8]
 8004632:	9006      	str	r0, [sp, #24]
 8004634:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004638:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800463a:	ab21      	add	r3, sp, #132	; 0x84
 800463c:	a902      	add	r1, sp, #8
 800463e:	4628      	mov	r0, r5
 8004640:	9301      	str	r3, [sp, #4]
 8004642:	f001 fb9b 	bl	8005d7c <_svfiprintf_r>
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	bfbc      	itt	lt
 800464a:	238b      	movlt	r3, #139	; 0x8b
 800464c:	602b      	strlt	r3, [r5, #0]
 800464e:	2c00      	cmp	r4, #0
 8004650:	d0dd      	beq.n	800460e <sniprintf+0x16>
 8004652:	9b02      	ldr	r3, [sp, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e7d9      	b.n	800460e <sniprintf+0x16>
 800465a:	bf00      	nop
 800465c:	20000064 	.word	0x20000064

08004660 <__sread>:
 8004660:	b510      	push	{r4, lr}
 8004662:	460c      	mov	r4, r1
 8004664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004668:	f000 f86c 	bl	8004744 <_read_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	bfab      	itete	ge
 8004670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004672:	89a3      	ldrhlt	r3, [r4, #12]
 8004674:	181b      	addge	r3, r3, r0
 8004676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800467a:	bfac      	ite	ge
 800467c:	6563      	strge	r3, [r4, #84]	; 0x54
 800467e:	81a3      	strhlt	r3, [r4, #12]
 8004680:	bd10      	pop	{r4, pc}

08004682 <__swrite>:
 8004682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004686:	461f      	mov	r7, r3
 8004688:	898b      	ldrh	r3, [r1, #12]
 800468a:	05db      	lsls	r3, r3, #23
 800468c:	4605      	mov	r5, r0
 800468e:	460c      	mov	r4, r1
 8004690:	4616      	mov	r6, r2
 8004692:	d505      	bpl.n	80046a0 <__swrite+0x1e>
 8004694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004698:	2302      	movs	r3, #2
 800469a:	2200      	movs	r2, #0
 800469c:	f000 f840 	bl	8004720 <_lseek_r>
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	4632      	mov	r2, r6
 80046ae:	463b      	mov	r3, r7
 80046b0:	4628      	mov	r0, r5
 80046b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046b6:	f000 b857 	b.w	8004768 <_write_r>

080046ba <__sseek>:
 80046ba:	b510      	push	{r4, lr}
 80046bc:	460c      	mov	r4, r1
 80046be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c2:	f000 f82d 	bl	8004720 <_lseek_r>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	89a3      	ldrh	r3, [r4, #12]
 80046ca:	bf15      	itete	ne
 80046cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80046ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046d6:	81a3      	strheq	r3, [r4, #12]
 80046d8:	bf18      	it	ne
 80046da:	81a3      	strhne	r3, [r4, #12]
 80046dc:	bd10      	pop	{r4, pc}

080046de <__sclose>:
 80046de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e2:	f000 b80d 	b.w	8004700 <_close_r>

080046e6 <memset>:
 80046e6:	4402      	add	r2, r0
 80046e8:	4603      	mov	r3, r0
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d100      	bne.n	80046f0 <memset+0xa>
 80046ee:	4770      	bx	lr
 80046f0:	f803 1b01 	strb.w	r1, [r3], #1
 80046f4:	e7f9      	b.n	80046ea <memset+0x4>
	...

080046f8 <_localeconv_r>:
 80046f8:	4800      	ldr	r0, [pc, #0]	; (80046fc <_localeconv_r+0x4>)
 80046fa:	4770      	bx	lr
 80046fc:	20000158 	.word	0x20000158

08004700 <_close_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d06      	ldr	r5, [pc, #24]	; (800471c <_close_r+0x1c>)
 8004704:	2300      	movs	r3, #0
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	602b      	str	r3, [r5, #0]
 800470c:	f7fc fc1d 	bl	8000f4a <_close>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d102      	bne.n	800471a <_close_r+0x1a>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	b103      	cbz	r3, 800471a <_close_r+0x1a>
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	200004e8 	.word	0x200004e8

08004720 <_lseek_r>:
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4d07      	ldr	r5, [pc, #28]	; (8004740 <_lseek_r+0x20>)
 8004724:	4604      	mov	r4, r0
 8004726:	4608      	mov	r0, r1
 8004728:	4611      	mov	r1, r2
 800472a:	2200      	movs	r2, #0
 800472c:	602a      	str	r2, [r5, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	f7fc fc32 	bl	8000f98 <_lseek>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_lseek_r+0x1e>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	b103      	cbz	r3, 800473e <_lseek_r+0x1e>
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	200004e8 	.word	0x200004e8

08004744 <_read_r>:
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	4d07      	ldr	r5, [pc, #28]	; (8004764 <_read_r+0x20>)
 8004748:	4604      	mov	r4, r0
 800474a:	4608      	mov	r0, r1
 800474c:	4611      	mov	r1, r2
 800474e:	2200      	movs	r2, #0
 8004750:	602a      	str	r2, [r5, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	f7fc fbc0 	bl	8000ed8 <_read>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_read_r+0x1e>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_read_r+0x1e>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	200004e8 	.word	0x200004e8

08004768 <_write_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4d07      	ldr	r5, [pc, #28]	; (8004788 <_write_r+0x20>)
 800476c:	4604      	mov	r4, r0
 800476e:	4608      	mov	r0, r1
 8004770:	4611      	mov	r1, r2
 8004772:	2200      	movs	r2, #0
 8004774:	602a      	str	r2, [r5, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	f7fc fbcb 	bl	8000f12 <_write>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_write_r+0x1e>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_write_r+0x1e>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	200004e8 	.word	0x200004e8

0800478c <__errno>:
 800478c:	4b01      	ldr	r3, [pc, #4]	; (8004794 <__errno+0x8>)
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000064 	.word	0x20000064

08004798 <__libc_init_array>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	4d0d      	ldr	r5, [pc, #52]	; (80047d0 <__libc_init_array+0x38>)
 800479c:	4c0d      	ldr	r4, [pc, #52]	; (80047d4 <__libc_init_array+0x3c>)
 800479e:	1b64      	subs	r4, r4, r5
 80047a0:	10a4      	asrs	r4, r4, #2
 80047a2:	2600      	movs	r6, #0
 80047a4:	42a6      	cmp	r6, r4
 80047a6:	d109      	bne.n	80047bc <__libc_init_array+0x24>
 80047a8:	4d0b      	ldr	r5, [pc, #44]	; (80047d8 <__libc_init_array+0x40>)
 80047aa:	4c0c      	ldr	r4, [pc, #48]	; (80047dc <__libc_init_array+0x44>)
 80047ac:	f002 f80e 	bl	80067cc <_init>
 80047b0:	1b64      	subs	r4, r4, r5
 80047b2:	10a4      	asrs	r4, r4, #2
 80047b4:	2600      	movs	r6, #0
 80047b6:	42a6      	cmp	r6, r4
 80047b8:	d105      	bne.n	80047c6 <__libc_init_array+0x2e>
 80047ba:	bd70      	pop	{r4, r5, r6, pc}
 80047bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c0:	4798      	blx	r3
 80047c2:	3601      	adds	r6, #1
 80047c4:	e7ee      	b.n	80047a4 <__libc_init_array+0xc>
 80047c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ca:	4798      	blx	r3
 80047cc:	3601      	adds	r6, #1
 80047ce:	e7f2      	b.n	80047b6 <__libc_init_array+0x1e>
 80047d0:	08006b94 	.word	0x08006b94
 80047d4:	08006b94 	.word	0x08006b94
 80047d8:	08006b94 	.word	0x08006b94
 80047dc:	08006b98 	.word	0x08006b98

080047e0 <__retarget_lock_init_recursive>:
 80047e0:	4770      	bx	lr

080047e2 <__retarget_lock_acquire_recursive>:
 80047e2:	4770      	bx	lr

080047e4 <__retarget_lock_release_recursive>:
 80047e4:	4770      	bx	lr

080047e6 <quorem>:
 80047e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	6903      	ldr	r3, [r0, #16]
 80047ec:	690c      	ldr	r4, [r1, #16]
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	4607      	mov	r7, r0
 80047f2:	db7e      	blt.n	80048f2 <quorem+0x10c>
 80047f4:	3c01      	subs	r4, #1
 80047f6:	f101 0814 	add.w	r8, r1, #20
 80047fa:	f100 0514 	add.w	r5, r0, #20
 80047fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004808:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800480c:	3301      	adds	r3, #1
 800480e:	429a      	cmp	r2, r3
 8004810:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004814:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004818:	fbb2 f6f3 	udiv	r6, r2, r3
 800481c:	d331      	bcc.n	8004882 <quorem+0x9c>
 800481e:	f04f 0e00 	mov.w	lr, #0
 8004822:	4640      	mov	r0, r8
 8004824:	46ac      	mov	ip, r5
 8004826:	46f2      	mov	sl, lr
 8004828:	f850 2b04 	ldr.w	r2, [r0], #4
 800482c:	b293      	uxth	r3, r2
 800482e:	fb06 e303 	mla	r3, r6, r3, lr
 8004832:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004836:	0c1a      	lsrs	r2, r3, #16
 8004838:	b29b      	uxth	r3, r3
 800483a:	ebaa 0303 	sub.w	r3, sl, r3
 800483e:	f8dc a000 	ldr.w	sl, [ip]
 8004842:	fa13 f38a 	uxtah	r3, r3, sl
 8004846:	fb06 220e 	mla	r2, r6, lr, r2
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	9b00      	ldr	r3, [sp, #0]
 800484e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004852:	b292      	uxth	r2, r2
 8004854:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004858:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800485c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004860:	4581      	cmp	r9, r0
 8004862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004866:	f84c 3b04 	str.w	r3, [ip], #4
 800486a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800486e:	d2db      	bcs.n	8004828 <quorem+0x42>
 8004870:	f855 300b 	ldr.w	r3, [r5, fp]
 8004874:	b92b      	cbnz	r3, 8004882 <quorem+0x9c>
 8004876:	9b01      	ldr	r3, [sp, #4]
 8004878:	3b04      	subs	r3, #4
 800487a:	429d      	cmp	r5, r3
 800487c:	461a      	mov	r2, r3
 800487e:	d32c      	bcc.n	80048da <quorem+0xf4>
 8004880:	613c      	str	r4, [r7, #16]
 8004882:	4638      	mov	r0, r7
 8004884:	f001 f920 	bl	8005ac8 <__mcmp>
 8004888:	2800      	cmp	r0, #0
 800488a:	db22      	blt.n	80048d2 <quorem+0xec>
 800488c:	3601      	adds	r6, #1
 800488e:	4629      	mov	r1, r5
 8004890:	2000      	movs	r0, #0
 8004892:	f858 2b04 	ldr.w	r2, [r8], #4
 8004896:	f8d1 c000 	ldr.w	ip, [r1]
 800489a:	b293      	uxth	r3, r2
 800489c:	1ac3      	subs	r3, r0, r3
 800489e:	0c12      	lsrs	r2, r2, #16
 80048a0:	fa13 f38c 	uxtah	r3, r3, ip
 80048a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80048a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048b2:	45c1      	cmp	r9, r8
 80048b4:	f841 3b04 	str.w	r3, [r1], #4
 80048b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80048bc:	d2e9      	bcs.n	8004892 <quorem+0xac>
 80048be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048c6:	b922      	cbnz	r2, 80048d2 <quorem+0xec>
 80048c8:	3b04      	subs	r3, #4
 80048ca:	429d      	cmp	r5, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	d30a      	bcc.n	80048e6 <quorem+0x100>
 80048d0:	613c      	str	r4, [r7, #16]
 80048d2:	4630      	mov	r0, r6
 80048d4:	b003      	add	sp, #12
 80048d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	3b04      	subs	r3, #4
 80048de:	2a00      	cmp	r2, #0
 80048e0:	d1ce      	bne.n	8004880 <quorem+0x9a>
 80048e2:	3c01      	subs	r4, #1
 80048e4:	e7c9      	b.n	800487a <quorem+0x94>
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	3b04      	subs	r3, #4
 80048ea:	2a00      	cmp	r2, #0
 80048ec:	d1f0      	bne.n	80048d0 <quorem+0xea>
 80048ee:	3c01      	subs	r4, #1
 80048f0:	e7eb      	b.n	80048ca <quorem+0xe4>
 80048f2:	2000      	movs	r0, #0
 80048f4:	e7ee      	b.n	80048d4 <quorem+0xee>
	...

080048f8 <_dtoa_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	ed2d 8b02 	vpush	{d8}
 8004900:	69c5      	ldr	r5, [r0, #28]
 8004902:	b091      	sub	sp, #68	; 0x44
 8004904:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004908:	ec59 8b10 	vmov	r8, r9, d0
 800490c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800490e:	9106      	str	r1, [sp, #24]
 8004910:	4606      	mov	r6, r0
 8004912:	9208      	str	r2, [sp, #32]
 8004914:	930c      	str	r3, [sp, #48]	; 0x30
 8004916:	b975      	cbnz	r5, 8004936 <_dtoa_r+0x3e>
 8004918:	2010      	movs	r0, #16
 800491a:	f000 fda5 	bl	8005468 <malloc>
 800491e:	4602      	mov	r2, r0
 8004920:	61f0      	str	r0, [r6, #28]
 8004922:	b920      	cbnz	r0, 800492e <_dtoa_r+0x36>
 8004924:	4ba6      	ldr	r3, [pc, #664]	; (8004bc0 <_dtoa_r+0x2c8>)
 8004926:	21ef      	movs	r1, #239	; 0xef
 8004928:	48a6      	ldr	r0, [pc, #664]	; (8004bc4 <_dtoa_r+0x2cc>)
 800492a:	f001 fc0b 	bl	8006144 <__assert_func>
 800492e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004932:	6005      	str	r5, [r0, #0]
 8004934:	60c5      	str	r5, [r0, #12]
 8004936:	69f3      	ldr	r3, [r6, #28]
 8004938:	6819      	ldr	r1, [r3, #0]
 800493a:	b151      	cbz	r1, 8004952 <_dtoa_r+0x5a>
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	604a      	str	r2, [r1, #4]
 8004940:	2301      	movs	r3, #1
 8004942:	4093      	lsls	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
 8004946:	4630      	mov	r0, r6
 8004948:	f000 fe82 	bl	8005650 <_Bfree>
 800494c:	69f3      	ldr	r3, [r6, #28]
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	f1b9 0300 	subs.w	r3, r9, #0
 8004956:	bfbb      	ittet	lt
 8004958:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800495c:	9303      	strlt	r3, [sp, #12]
 800495e:	2300      	movge	r3, #0
 8004960:	2201      	movlt	r2, #1
 8004962:	bfac      	ite	ge
 8004964:	6023      	strge	r3, [r4, #0]
 8004966:	6022      	strlt	r2, [r4, #0]
 8004968:	4b97      	ldr	r3, [pc, #604]	; (8004bc8 <_dtoa_r+0x2d0>)
 800496a:	9c03      	ldr	r4, [sp, #12]
 800496c:	43a3      	bics	r3, r4
 800496e:	d11c      	bne.n	80049aa <_dtoa_r+0xb2>
 8004970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004972:	f242 730f 	movw	r3, #9999	; 0x270f
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800497c:	ea53 0308 	orrs.w	r3, r3, r8
 8004980:	f000 84fb 	beq.w	800537a <_dtoa_r+0xa82>
 8004984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004986:	b963      	cbnz	r3, 80049a2 <_dtoa_r+0xaa>
 8004988:	4b90      	ldr	r3, [pc, #576]	; (8004bcc <_dtoa_r+0x2d4>)
 800498a:	e020      	b.n	80049ce <_dtoa_r+0xd6>
 800498c:	4b90      	ldr	r3, [pc, #576]	; (8004bd0 <_dtoa_r+0x2d8>)
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	3308      	adds	r3, #8
 8004992:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	9801      	ldr	r0, [sp, #4]
 8004998:	b011      	add	sp, #68	; 0x44
 800499a:	ecbd 8b02 	vpop	{d8}
 800499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a2:	4b8a      	ldr	r3, [pc, #552]	; (8004bcc <_dtoa_r+0x2d4>)
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	3303      	adds	r3, #3
 80049a8:	e7f3      	b.n	8004992 <_dtoa_r+0x9a>
 80049aa:	ed9d 8b02 	vldr	d8, [sp, #8]
 80049ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80049b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b6:	d10c      	bne.n	80049d2 <_dtoa_r+0xda>
 80049b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049ba:	2301      	movs	r3, #1
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 84d7 	beq.w	8005374 <_dtoa_r+0xa7c>
 80049c6:	4b83      	ldr	r3, [pc, #524]	; (8004bd4 <_dtoa_r+0x2dc>)
 80049c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	e7e1      	b.n	8004996 <_dtoa_r+0x9e>
 80049d2:	aa0e      	add	r2, sp, #56	; 0x38
 80049d4:	a90f      	add	r1, sp, #60	; 0x3c
 80049d6:	4630      	mov	r0, r6
 80049d8:	eeb0 0b48 	vmov.f64	d0, d8
 80049dc:	f001 f91a 	bl	8005c14 <__d2b>
 80049e0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80049e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049e6:	4605      	mov	r5, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d046      	beq.n	8004a7a <_dtoa_r+0x182>
 80049ec:	eeb0 7b48 	vmov.f64	d7, d8
 80049f0:	ee18 1a90 	vmov	r1, s17
 80049f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80049f8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80049fc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004a00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004a04:	2000      	movs	r0, #0
 8004a06:	ee07 1a90 	vmov	s15, r1
 8004a0a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8004a0e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004ba8 <_dtoa_r+0x2b0>
 8004a12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a16:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8004bb0 <_dtoa_r+0x2b8>
 8004a1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004a1e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004bb8 <_dtoa_r+0x2c0>
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004a2a:	eeb0 7b46 	vmov.f64	d7, d6
 8004a2e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004a32:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004a36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	ee16 ba90 	vmov	fp, s13
 8004a42:	9009      	str	r0, [sp, #36]	; 0x24
 8004a44:	d508      	bpl.n	8004a58 <_dtoa_r+0x160>
 8004a46:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004a4a:	eeb4 6b47 	vcmp.f64	d6, d7
 8004a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a52:	bf18      	it	ne
 8004a54:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004a58:	f1bb 0f16 	cmp.w	fp, #22
 8004a5c:	d82b      	bhi.n	8004ab6 <_dtoa_r+0x1be>
 8004a5e:	495e      	ldr	r1, [pc, #376]	; (8004bd8 <_dtoa_r+0x2e0>)
 8004a60:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004a64:	ed91 7b00 	vldr	d7, [r1]
 8004a68:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a70:	d501      	bpl.n	8004a76 <_dtoa_r+0x17e>
 8004a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a76:	2100      	movs	r1, #0
 8004a78:	e01e      	b.n	8004ab8 <_dtoa_r+0x1c0>
 8004a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8004a82:	2920      	cmp	r1, #32
 8004a84:	bfc1      	itttt	gt
 8004a86:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8004a8a:	408c      	lslgt	r4, r1
 8004a8c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8004a90:	fa28 f101 	lsrgt.w	r1, r8, r1
 8004a94:	bfd6      	itet	le
 8004a96:	f1c1 0120 	rsble	r1, r1, #32
 8004a9a:	4321      	orrgt	r1, r4
 8004a9c:	fa08 f101 	lslle.w	r1, r8, r1
 8004aa0:	ee07 1a90 	vmov	s15, r1
 8004aa4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	ee17 1a90 	vmov	r1, s15
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004ab4:	e7a7      	b.n	8004a06 <_dtoa_r+0x10e>
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	1ad2      	subs	r2, r2, r3
 8004aba:	1e53      	subs	r3, r2, #1
 8004abc:	9305      	str	r3, [sp, #20]
 8004abe:	bf45      	ittet	mi
 8004ac0:	f1c2 0301 	rsbmi	r3, r2, #1
 8004ac4:	9304      	strmi	r3, [sp, #16]
 8004ac6:	2300      	movpl	r3, #0
 8004ac8:	2300      	movmi	r3, #0
 8004aca:	bf4c      	ite	mi
 8004acc:	9305      	strmi	r3, [sp, #20]
 8004ace:	9304      	strpl	r3, [sp, #16]
 8004ad0:	f1bb 0f00 	cmp.w	fp, #0
 8004ad4:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ad6:	db18      	blt.n	8004b0a <_dtoa_r+0x212>
 8004ad8:	9b05      	ldr	r3, [sp, #20]
 8004ada:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004ade:	445b      	add	r3, fp
 8004ae0:	9305      	str	r3, [sp, #20]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9a06      	ldr	r2, [sp, #24]
 8004ae6:	2a09      	cmp	r2, #9
 8004ae8:	d848      	bhi.n	8004b7c <_dtoa_r+0x284>
 8004aea:	2a05      	cmp	r2, #5
 8004aec:	bfc4      	itt	gt
 8004aee:	3a04      	subgt	r2, #4
 8004af0:	9206      	strgt	r2, [sp, #24]
 8004af2:	9a06      	ldr	r2, [sp, #24]
 8004af4:	f1a2 0202 	sub.w	r2, r2, #2
 8004af8:	bfcc      	ite	gt
 8004afa:	2400      	movgt	r4, #0
 8004afc:	2401      	movle	r4, #1
 8004afe:	2a03      	cmp	r2, #3
 8004b00:	d847      	bhi.n	8004b92 <_dtoa_r+0x29a>
 8004b02:	e8df f002 	tbb	[pc, r2]
 8004b06:	2d0b      	.short	0x2d0b
 8004b08:	392b      	.short	0x392b
 8004b0a:	9b04      	ldr	r3, [sp, #16]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	eba3 030b 	sub.w	r3, r3, fp
 8004b12:	9304      	str	r3, [sp, #16]
 8004b14:	920a      	str	r2, [sp, #40]	; 0x28
 8004b16:	f1cb 0300 	rsb	r3, fp, #0
 8004b1a:	e7e3      	b.n	8004ae4 <_dtoa_r+0x1ec>
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	9207      	str	r2, [sp, #28]
 8004b20:	9a08      	ldr	r2, [sp, #32]
 8004b22:	2a00      	cmp	r2, #0
 8004b24:	dc38      	bgt.n	8004b98 <_dtoa_r+0x2a0>
 8004b26:	f04f 0a01 	mov.w	sl, #1
 8004b2a:	46d1      	mov	r9, sl
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	f8cd a020 	str.w	sl, [sp, #32]
 8004b32:	69f7      	ldr	r7, [r6, #28]
 8004b34:	2100      	movs	r1, #0
 8004b36:	2004      	movs	r0, #4
 8004b38:	f100 0c14 	add.w	ip, r0, #20
 8004b3c:	4594      	cmp	ip, r2
 8004b3e:	d930      	bls.n	8004ba2 <_dtoa_r+0x2aa>
 8004b40:	6079      	str	r1, [r7, #4]
 8004b42:	4630      	mov	r0, r6
 8004b44:	930d      	str	r3, [sp, #52]	; 0x34
 8004b46:	f000 fd43 	bl	80055d0 <_Balloc>
 8004b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b4c:	9001      	str	r0, [sp, #4]
 8004b4e:	4602      	mov	r2, r0
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d145      	bne.n	8004be0 <_dtoa_r+0x2e8>
 8004b54:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <_dtoa_r+0x2e4>)
 8004b56:	f240 11af 	movw	r1, #431	; 0x1af
 8004b5a:	e6e5      	b.n	8004928 <_dtoa_r+0x30>
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	e7de      	b.n	8004b1e <_dtoa_r+0x226>
 8004b60:	2200      	movs	r2, #0
 8004b62:	9207      	str	r2, [sp, #28]
 8004b64:	9a08      	ldr	r2, [sp, #32]
 8004b66:	eb0b 0a02 	add.w	sl, fp, r2
 8004b6a:	f10a 0901 	add.w	r9, sl, #1
 8004b6e:	464a      	mov	r2, r9
 8004b70:	2a01      	cmp	r2, #1
 8004b72:	bfb8      	it	lt
 8004b74:	2201      	movlt	r2, #1
 8004b76:	e7dc      	b.n	8004b32 <_dtoa_r+0x23a>
 8004b78:	2201      	movs	r2, #1
 8004b7a:	e7f2      	b.n	8004b62 <_dtoa_r+0x26a>
 8004b7c:	2401      	movs	r4, #1
 8004b7e:	2200      	movs	r2, #0
 8004b80:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8004b84:	f04f 3aff 	mov.w	sl, #4294967295
 8004b88:	2100      	movs	r1, #0
 8004b8a:	46d1      	mov	r9, sl
 8004b8c:	2212      	movs	r2, #18
 8004b8e:	9108      	str	r1, [sp, #32]
 8004b90:	e7cf      	b.n	8004b32 <_dtoa_r+0x23a>
 8004b92:	2201      	movs	r2, #1
 8004b94:	9207      	str	r2, [sp, #28]
 8004b96:	e7f5      	b.n	8004b84 <_dtoa_r+0x28c>
 8004b98:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004b9c:	46d1      	mov	r9, sl
 8004b9e:	4652      	mov	r2, sl
 8004ba0:	e7c7      	b.n	8004b32 <_dtoa_r+0x23a>
 8004ba2:	3101      	adds	r1, #1
 8004ba4:	0040      	lsls	r0, r0, #1
 8004ba6:	e7c7      	b.n	8004b38 <_dtoa_r+0x240>
 8004ba8:	636f4361 	.word	0x636f4361
 8004bac:	3fd287a7 	.word	0x3fd287a7
 8004bb0:	8b60c8b3 	.word	0x8b60c8b3
 8004bb4:	3fc68a28 	.word	0x3fc68a28
 8004bb8:	509f79fb 	.word	0x509f79fb
 8004bbc:	3fd34413 	.word	0x3fd34413
 8004bc0:	0800685d 	.word	0x0800685d
 8004bc4:	08006874 	.word	0x08006874
 8004bc8:	7ff00000 	.word	0x7ff00000
 8004bcc:	08006859 	.word	0x08006859
 8004bd0:	08006850 	.word	0x08006850
 8004bd4:	0800682d 	.word	0x0800682d
 8004bd8:	08006960 	.word	0x08006960
 8004bdc:	080068cc 	.word	0x080068cc
 8004be0:	69f2      	ldr	r2, [r6, #28]
 8004be2:	9901      	ldr	r1, [sp, #4]
 8004be4:	6011      	str	r1, [r2, #0]
 8004be6:	f1b9 0f0e 	cmp.w	r9, #14
 8004bea:	d86c      	bhi.n	8004cc6 <_dtoa_r+0x3ce>
 8004bec:	2c00      	cmp	r4, #0
 8004bee:	d06a      	beq.n	8004cc6 <_dtoa_r+0x3ce>
 8004bf0:	f1bb 0f00 	cmp.w	fp, #0
 8004bf4:	f340 80a0 	ble.w	8004d38 <_dtoa_r+0x440>
 8004bf8:	4ac1      	ldr	r2, [pc, #772]	; (8004f00 <_dtoa_r+0x608>)
 8004bfa:	f00b 010f 	and.w	r1, fp, #15
 8004bfe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004c02:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004c06:	ed92 7b00 	vldr	d7, [r2]
 8004c0a:	ea4f 122b 	mov.w	r2, fp, asr #4
 8004c0e:	f000 8087 	beq.w	8004d20 <_dtoa_r+0x428>
 8004c12:	49bc      	ldr	r1, [pc, #752]	; (8004f04 <_dtoa_r+0x60c>)
 8004c14:	ed91 6b08 	vldr	d6, [r1, #32]
 8004c18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004c1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004c20:	f002 020f 	and.w	r2, r2, #15
 8004c24:	2103      	movs	r1, #3
 8004c26:	48b7      	ldr	r0, [pc, #732]	; (8004f04 <_dtoa_r+0x60c>)
 8004c28:	2a00      	cmp	r2, #0
 8004c2a:	d17b      	bne.n	8004d24 <_dtoa_r+0x42c>
 8004c2c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004c30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004c34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	f000 80a0 	beq.w	8004d84 <_dtoa_r+0x48c>
 8004c44:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004c48:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c50:	f140 8098 	bpl.w	8004d84 <_dtoa_r+0x48c>
 8004c54:	f1b9 0f00 	cmp.w	r9, #0
 8004c58:	f000 8094 	beq.w	8004d84 <_dtoa_r+0x48c>
 8004c5c:	f1ba 0f00 	cmp.w	sl, #0
 8004c60:	dd2f      	ble.n	8004cc2 <_dtoa_r+0x3ca>
 8004c62:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004c6a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c6e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004c72:	3101      	adds	r1, #1
 8004c74:	4654      	mov	r4, sl
 8004c76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004c7a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004c7e:	ee07 1a90 	vmov	s15, r1
 8004c82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004c86:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004c8a:	ee15 7a90 	vmov	r7, s11
 8004c8e:	ec51 0b15 	vmov	r0, r1, d5
 8004c92:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8004c96:	2c00      	cmp	r4, #0
 8004c98:	d177      	bne.n	8004d8a <_dtoa_r+0x492>
 8004c9a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004c9e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004ca2:	ec41 0b17 	vmov	d7, r0, r1
 8004ca6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cae:	f300 826a 	bgt.w	8005186 <_dtoa_r+0x88e>
 8004cb2:	eeb1 7b47 	vneg.f64	d7, d7
 8004cb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cbe:	f100 8260 	bmi.w	8005182 <_dtoa_r+0x88a>
 8004cc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004cc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cc8:	2a00      	cmp	r2, #0
 8004cca:	f2c0 811d 	blt.w	8004f08 <_dtoa_r+0x610>
 8004cce:	f1bb 0f0e 	cmp.w	fp, #14
 8004cd2:	f300 8119 	bgt.w	8004f08 <_dtoa_r+0x610>
 8004cd6:	4b8a      	ldr	r3, [pc, #552]	; (8004f00 <_dtoa_r+0x608>)
 8004cd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004cdc:	ed93 6b00 	vldr	d6, [r3]
 8004ce0:	9b08      	ldr	r3, [sp, #32]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f280 80b7 	bge.w	8004e56 <_dtoa_r+0x55e>
 8004ce8:	f1b9 0f00 	cmp.w	r9, #0
 8004cec:	f300 80b3 	bgt.w	8004e56 <_dtoa_r+0x55e>
 8004cf0:	f040 8246 	bne.w	8005180 <_dtoa_r+0x888>
 8004cf4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004cf8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004cfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d08:	464c      	mov	r4, r9
 8004d0a:	464f      	mov	r7, r9
 8004d0c:	f280 821c 	bge.w	8005148 <_dtoa_r+0x850>
 8004d10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d14:	2331      	movs	r3, #49	; 0x31
 8004d16:	f808 3b01 	strb.w	r3, [r8], #1
 8004d1a:	f10b 0b01 	add.w	fp, fp, #1
 8004d1e:	e218      	b.n	8005152 <_dtoa_r+0x85a>
 8004d20:	2102      	movs	r1, #2
 8004d22:	e780      	b.n	8004c26 <_dtoa_r+0x32e>
 8004d24:	07d4      	lsls	r4, r2, #31
 8004d26:	d504      	bpl.n	8004d32 <_dtoa_r+0x43a>
 8004d28:	ed90 6b00 	vldr	d6, [r0]
 8004d2c:	3101      	adds	r1, #1
 8004d2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d32:	1052      	asrs	r2, r2, #1
 8004d34:	3008      	adds	r0, #8
 8004d36:	e777      	b.n	8004c28 <_dtoa_r+0x330>
 8004d38:	d022      	beq.n	8004d80 <_dtoa_r+0x488>
 8004d3a:	f1cb 0200 	rsb	r2, fp, #0
 8004d3e:	4970      	ldr	r1, [pc, #448]	; (8004f00 <_dtoa_r+0x608>)
 8004d40:	f002 000f 	and.w	r0, r2, #15
 8004d44:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004d48:	ed91 7b00 	vldr	d7, [r1]
 8004d4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004d50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d54:	486b      	ldr	r0, [pc, #428]	; (8004f04 <_dtoa_r+0x60c>)
 8004d56:	1112      	asrs	r2, r2, #4
 8004d58:	2400      	movs	r4, #0
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	b92a      	cbnz	r2, 8004d6a <_dtoa_r+0x472>
 8004d5e:	2c00      	cmp	r4, #0
 8004d60:	f43f af6a 	beq.w	8004c38 <_dtoa_r+0x340>
 8004d64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d68:	e766      	b.n	8004c38 <_dtoa_r+0x340>
 8004d6a:	07d7      	lsls	r7, r2, #31
 8004d6c:	d505      	bpl.n	8004d7a <_dtoa_r+0x482>
 8004d6e:	ed90 6b00 	vldr	d6, [r0]
 8004d72:	3101      	adds	r1, #1
 8004d74:	2401      	movs	r4, #1
 8004d76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d7a:	1052      	asrs	r2, r2, #1
 8004d7c:	3008      	adds	r0, #8
 8004d7e:	e7ed      	b.n	8004d5c <_dtoa_r+0x464>
 8004d80:	2102      	movs	r1, #2
 8004d82:	e759      	b.n	8004c38 <_dtoa_r+0x340>
 8004d84:	465a      	mov	r2, fp
 8004d86:	464c      	mov	r4, r9
 8004d88:	e775      	b.n	8004c76 <_dtoa_r+0x37e>
 8004d8a:	ec41 0b17 	vmov	d7, r0, r1
 8004d8e:	495c      	ldr	r1, [pc, #368]	; (8004f00 <_dtoa_r+0x608>)
 8004d90:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8004d94:	ed11 4b02 	vldr	d4, [r1, #-8]
 8004d98:	9901      	ldr	r1, [sp, #4]
 8004d9a:	440c      	add	r4, r1
 8004d9c:	9907      	ldr	r1, [sp, #28]
 8004d9e:	b351      	cbz	r1, 8004df6 <_dtoa_r+0x4fe>
 8004da0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8004da4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8004da8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004dac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004db0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004db4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004db8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004dbc:	ee14 1a90 	vmov	r1, s9
 8004dc0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004dc4:	3130      	adds	r1, #48	; 0x30
 8004dc6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004dca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd2:	f808 1b01 	strb.w	r1, [r8], #1
 8004dd6:	d439      	bmi.n	8004e4c <_dtoa_r+0x554>
 8004dd8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004ddc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de4:	d472      	bmi.n	8004ecc <_dtoa_r+0x5d4>
 8004de6:	45a0      	cmp	r8, r4
 8004de8:	f43f af6b 	beq.w	8004cc2 <_dtoa_r+0x3ca>
 8004dec:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004df0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004df4:	e7e0      	b.n	8004db8 <_dtoa_r+0x4c0>
 8004df6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004dfa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004dfe:	4620      	mov	r0, r4
 8004e00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004e04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004e08:	ee14 1a90 	vmov	r1, s9
 8004e0c:	3130      	adds	r1, #48	; 0x30
 8004e0e:	f808 1b01 	strb.w	r1, [r8], #1
 8004e12:	45a0      	cmp	r8, r4
 8004e14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004e18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004e1c:	d118      	bne.n	8004e50 <_dtoa_r+0x558>
 8004e1e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004e22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004e26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2e:	dc4d      	bgt.n	8004ecc <_dtoa_r+0x5d4>
 8004e30:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004e34:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	f57f af41 	bpl.w	8004cc2 <_dtoa_r+0x3ca>
 8004e40:	4680      	mov	r8, r0
 8004e42:	3801      	subs	r0, #1
 8004e44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d0f9      	beq.n	8004e40 <_dtoa_r+0x548>
 8004e4c:	4693      	mov	fp, r2
 8004e4e:	e02a      	b.n	8004ea6 <_dtoa_r+0x5ae>
 8004e50:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004e54:	e7d6      	b.n	8004e04 <_dtoa_r+0x50c>
 8004e56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e5a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004e5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004e62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004e66:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004e6a:	ee15 3a10 	vmov	r3, s10
 8004e6e:	3330      	adds	r3, #48	; 0x30
 8004e70:	f808 3b01 	strb.w	r3, [r8], #1
 8004e74:	9b01      	ldr	r3, [sp, #4]
 8004e76:	eba8 0303 	sub.w	r3, r8, r3
 8004e7a:	4599      	cmp	r9, r3
 8004e7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004e80:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004e84:	d133      	bne.n	8004eee <_dtoa_r+0x5f6>
 8004e86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e92:	dc1a      	bgt.n	8004eca <_dtoa_r+0x5d2>
 8004e94:	eeb4 7b46 	vcmp.f64	d7, d6
 8004e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9c:	d103      	bne.n	8004ea6 <_dtoa_r+0x5ae>
 8004e9e:	ee15 3a10 	vmov	r3, s10
 8004ea2:	07d9      	lsls	r1, r3, #31
 8004ea4:	d411      	bmi.n	8004eca <_dtoa_r+0x5d2>
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f000 fbd1 	bl	8005650 <_Bfree>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004eb2:	f888 3000 	strb.w	r3, [r8]
 8004eb6:	f10b 0301 	add.w	r3, fp, #1
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f43f ad69 	beq.w	8004996 <_dtoa_r+0x9e>
 8004ec4:	f8c3 8000 	str.w	r8, [r3]
 8004ec8:	e565      	b.n	8004996 <_dtoa_r+0x9e>
 8004eca:	465a      	mov	r2, fp
 8004ecc:	4643      	mov	r3, r8
 8004ece:	4698      	mov	r8, r3
 8004ed0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8004ed4:	2939      	cmp	r1, #57	; 0x39
 8004ed6:	d106      	bne.n	8004ee6 <_dtoa_r+0x5ee>
 8004ed8:	9901      	ldr	r1, [sp, #4]
 8004eda:	4299      	cmp	r1, r3
 8004edc:	d1f7      	bne.n	8004ece <_dtoa_r+0x5d6>
 8004ede:	9801      	ldr	r0, [sp, #4]
 8004ee0:	2130      	movs	r1, #48	; 0x30
 8004ee2:	3201      	adds	r2, #1
 8004ee4:	7001      	strb	r1, [r0, #0]
 8004ee6:	7819      	ldrb	r1, [r3, #0]
 8004ee8:	3101      	adds	r1, #1
 8004eea:	7019      	strb	r1, [r3, #0]
 8004eec:	e7ae      	b.n	8004e4c <_dtoa_r+0x554>
 8004eee:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004ef2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efa:	d1b2      	bne.n	8004e62 <_dtoa_r+0x56a>
 8004efc:	e7d3      	b.n	8004ea6 <_dtoa_r+0x5ae>
 8004efe:	bf00      	nop
 8004f00:	08006960 	.word	0x08006960
 8004f04:	08006938 	.word	0x08006938
 8004f08:	9907      	ldr	r1, [sp, #28]
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	f000 80d0 	beq.w	80050b0 <_dtoa_r+0x7b8>
 8004f10:	9906      	ldr	r1, [sp, #24]
 8004f12:	2901      	cmp	r1, #1
 8004f14:	f300 80b4 	bgt.w	8005080 <_dtoa_r+0x788>
 8004f18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	f000 80ac 	beq.w	8005078 <_dtoa_r+0x780>
 8004f20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8004f28:	461c      	mov	r4, r3
 8004f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2c:	9b04      	ldr	r3, [sp, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	9304      	str	r3, [sp, #16]
 8004f32:	9b05      	ldr	r3, [sp, #20]
 8004f34:	2101      	movs	r1, #1
 8004f36:	4413      	add	r3, r2
 8004f38:	4630      	mov	r0, r6
 8004f3a:	9305      	str	r3, [sp, #20]
 8004f3c:	f000 fc3e 	bl	80057bc <__i2b>
 8004f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f42:	4607      	mov	r7, r0
 8004f44:	f1b8 0f00 	cmp.w	r8, #0
 8004f48:	d00d      	beq.n	8004f66 <_dtoa_r+0x66e>
 8004f4a:	9a05      	ldr	r2, [sp, #20]
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	dd0a      	ble.n	8004f66 <_dtoa_r+0x66e>
 8004f50:	4542      	cmp	r2, r8
 8004f52:	9904      	ldr	r1, [sp, #16]
 8004f54:	bfa8      	it	ge
 8004f56:	4642      	movge	r2, r8
 8004f58:	1a89      	subs	r1, r1, r2
 8004f5a:	9104      	str	r1, [sp, #16]
 8004f5c:	9905      	ldr	r1, [sp, #20]
 8004f5e:	eba8 0802 	sub.w	r8, r8, r2
 8004f62:	1a8a      	subs	r2, r1, r2
 8004f64:	9205      	str	r2, [sp, #20]
 8004f66:	b303      	cbz	r3, 8004faa <_dtoa_r+0x6b2>
 8004f68:	9a07      	ldr	r2, [sp, #28]
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	f000 80a5 	beq.w	80050ba <_dtoa_r+0x7c2>
 8004f70:	2c00      	cmp	r4, #0
 8004f72:	dd13      	ble.n	8004f9c <_dtoa_r+0x6a4>
 8004f74:	4639      	mov	r1, r7
 8004f76:	4622      	mov	r2, r4
 8004f78:	4630      	mov	r0, r6
 8004f7a:	930d      	str	r3, [sp, #52]	; 0x34
 8004f7c:	f000 fcde 	bl	800593c <__pow5mult>
 8004f80:	462a      	mov	r2, r5
 8004f82:	4601      	mov	r1, r0
 8004f84:	4607      	mov	r7, r0
 8004f86:	4630      	mov	r0, r6
 8004f88:	f000 fc2e 	bl	80057e8 <__multiply>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	9009      	str	r0, [sp, #36]	; 0x24
 8004f90:	4630      	mov	r0, r6
 8004f92:	f000 fb5d 	bl	8005650 <_Bfree>
 8004f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f9a:	4615      	mov	r5, r2
 8004f9c:	1b1a      	subs	r2, r3, r4
 8004f9e:	d004      	beq.n	8004faa <_dtoa_r+0x6b2>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f000 fcca 	bl	800593c <__pow5mult>
 8004fa8:	4605      	mov	r5, r0
 8004faa:	2101      	movs	r1, #1
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 fc05 	bl	80057bc <__i2b>
 8004fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	f340 8081 	ble.w	80050be <_dtoa_r+0x7c6>
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f000 fcbb 	bl	800593c <__pow5mult>
 8004fc6:	9b06      	ldr	r3, [sp, #24]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	4604      	mov	r4, r0
 8004fcc:	dd7a      	ble.n	80050c4 <_dtoa_r+0x7cc>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd2:	6922      	ldr	r2, [r4, #16]
 8004fd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004fd8:	6910      	ldr	r0, [r2, #16]
 8004fda:	f000 fba1 	bl	8005720 <__hi0bits>
 8004fde:	f1c0 0020 	rsb	r0, r0, #32
 8004fe2:	9b05      	ldr	r3, [sp, #20]
 8004fe4:	4418      	add	r0, r3
 8004fe6:	f010 001f 	ands.w	r0, r0, #31
 8004fea:	f000 8093 	beq.w	8005114 <_dtoa_r+0x81c>
 8004fee:	f1c0 0220 	rsb	r2, r0, #32
 8004ff2:	2a04      	cmp	r2, #4
 8004ff4:	f340 8085 	ble.w	8005102 <_dtoa_r+0x80a>
 8004ff8:	9b04      	ldr	r3, [sp, #16]
 8004ffa:	f1c0 001c 	rsb	r0, r0, #28
 8004ffe:	4403      	add	r3, r0
 8005000:	9304      	str	r3, [sp, #16]
 8005002:	9b05      	ldr	r3, [sp, #20]
 8005004:	4480      	add	r8, r0
 8005006:	4403      	add	r3, r0
 8005008:	9305      	str	r3, [sp, #20]
 800500a:	9b04      	ldr	r3, [sp, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	dd05      	ble.n	800501c <_dtoa_r+0x724>
 8005010:	4629      	mov	r1, r5
 8005012:	461a      	mov	r2, r3
 8005014:	4630      	mov	r0, r6
 8005016:	f000 fceb 	bl	80059f0 <__lshift>
 800501a:	4605      	mov	r5, r0
 800501c:	9b05      	ldr	r3, [sp, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	dd05      	ble.n	800502e <_dtoa_r+0x736>
 8005022:	4621      	mov	r1, r4
 8005024:	461a      	mov	r2, r3
 8005026:	4630      	mov	r0, r6
 8005028:	f000 fce2 	bl	80059f0 <__lshift>
 800502c:	4604      	mov	r4, r0
 800502e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d071      	beq.n	8005118 <_dtoa_r+0x820>
 8005034:	4621      	mov	r1, r4
 8005036:	4628      	mov	r0, r5
 8005038:	f000 fd46 	bl	8005ac8 <__mcmp>
 800503c:	2800      	cmp	r0, #0
 800503e:	da6b      	bge.n	8005118 <_dtoa_r+0x820>
 8005040:	2300      	movs	r3, #0
 8005042:	4629      	mov	r1, r5
 8005044:	220a      	movs	r2, #10
 8005046:	4630      	mov	r0, r6
 8005048:	f000 fb24 	bl	8005694 <__multadd>
 800504c:	9b07      	ldr	r3, [sp, #28]
 800504e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005052:	4605      	mov	r5, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8197 	beq.w	8005388 <_dtoa_r+0xa90>
 800505a:	4639      	mov	r1, r7
 800505c:	2300      	movs	r3, #0
 800505e:	220a      	movs	r2, #10
 8005060:	4630      	mov	r0, r6
 8005062:	f000 fb17 	bl	8005694 <__multadd>
 8005066:	f1ba 0f00 	cmp.w	sl, #0
 800506a:	4607      	mov	r7, r0
 800506c:	f300 8093 	bgt.w	8005196 <_dtoa_r+0x89e>
 8005070:	9b06      	ldr	r3, [sp, #24]
 8005072:	2b02      	cmp	r3, #2
 8005074:	dc57      	bgt.n	8005126 <_dtoa_r+0x82e>
 8005076:	e08e      	b.n	8005196 <_dtoa_r+0x89e>
 8005078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800507a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800507e:	e751      	b.n	8004f24 <_dtoa_r+0x62c>
 8005080:	f109 34ff 	add.w	r4, r9, #4294967295
 8005084:	42a3      	cmp	r3, r4
 8005086:	bfbf      	itttt	lt
 8005088:	1ae2      	sublt	r2, r4, r3
 800508a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800508c:	189b      	addlt	r3, r3, r2
 800508e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005090:	bfae      	itee	ge
 8005092:	1b1c      	subge	r4, r3, r4
 8005094:	4623      	movlt	r3, r4
 8005096:	2400      	movlt	r4, #0
 8005098:	f1b9 0f00 	cmp.w	r9, #0
 800509c:	bfb5      	itete	lt
 800509e:	9a04      	ldrlt	r2, [sp, #16]
 80050a0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80050a4:	eba2 0809 	sublt.w	r8, r2, r9
 80050a8:	464a      	movge	r2, r9
 80050aa:	bfb8      	it	lt
 80050ac:	2200      	movlt	r2, #0
 80050ae:	e73c      	b.n	8004f2a <_dtoa_r+0x632>
 80050b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80050b4:	9f07      	ldr	r7, [sp, #28]
 80050b6:	461c      	mov	r4, r3
 80050b8:	e744      	b.n	8004f44 <_dtoa_r+0x64c>
 80050ba:	461a      	mov	r2, r3
 80050bc:	e770      	b.n	8004fa0 <_dtoa_r+0x6a8>
 80050be:	9b06      	ldr	r3, [sp, #24]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	dc18      	bgt.n	80050f6 <_dtoa_r+0x7fe>
 80050c4:	9b02      	ldr	r3, [sp, #8]
 80050c6:	b9b3      	cbnz	r3, 80050f6 <_dtoa_r+0x7fe>
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80050ce:	b9a2      	cbnz	r2, 80050fa <_dtoa_r+0x802>
 80050d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050d4:	0d12      	lsrs	r2, r2, #20
 80050d6:	0512      	lsls	r2, r2, #20
 80050d8:	b18a      	cbz	r2, 80050fe <_dtoa_r+0x806>
 80050da:	9b04      	ldr	r3, [sp, #16]
 80050dc:	3301      	adds	r3, #1
 80050de:	9304      	str	r3, [sp, #16]
 80050e0:	9b05      	ldr	r3, [sp, #20]
 80050e2:	3301      	adds	r3, #1
 80050e4:	9305      	str	r3, [sp, #20]
 80050e6:	2301      	movs	r3, #1
 80050e8:	9309      	str	r3, [sp, #36]	; 0x24
 80050ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f47f af70 	bne.w	8004fd2 <_dtoa_r+0x6da>
 80050f2:	2001      	movs	r0, #1
 80050f4:	e775      	b.n	8004fe2 <_dtoa_r+0x6ea>
 80050f6:	2300      	movs	r3, #0
 80050f8:	e7f6      	b.n	80050e8 <_dtoa_r+0x7f0>
 80050fa:	9b02      	ldr	r3, [sp, #8]
 80050fc:	e7f4      	b.n	80050e8 <_dtoa_r+0x7f0>
 80050fe:	9209      	str	r2, [sp, #36]	; 0x24
 8005100:	e7f3      	b.n	80050ea <_dtoa_r+0x7f2>
 8005102:	d082      	beq.n	800500a <_dtoa_r+0x712>
 8005104:	9b04      	ldr	r3, [sp, #16]
 8005106:	321c      	adds	r2, #28
 8005108:	4413      	add	r3, r2
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	9b05      	ldr	r3, [sp, #20]
 800510e:	4490      	add	r8, r2
 8005110:	4413      	add	r3, r2
 8005112:	e779      	b.n	8005008 <_dtoa_r+0x710>
 8005114:	4602      	mov	r2, r0
 8005116:	e7f5      	b.n	8005104 <_dtoa_r+0x80c>
 8005118:	f1b9 0f00 	cmp.w	r9, #0
 800511c:	dc36      	bgt.n	800518c <_dtoa_r+0x894>
 800511e:	9b06      	ldr	r3, [sp, #24]
 8005120:	2b02      	cmp	r3, #2
 8005122:	dd33      	ble.n	800518c <_dtoa_r+0x894>
 8005124:	46ca      	mov	sl, r9
 8005126:	f1ba 0f00 	cmp.w	sl, #0
 800512a:	d10d      	bne.n	8005148 <_dtoa_r+0x850>
 800512c:	4621      	mov	r1, r4
 800512e:	4653      	mov	r3, sl
 8005130:	2205      	movs	r2, #5
 8005132:	4630      	mov	r0, r6
 8005134:	f000 faae 	bl	8005694 <__multadd>
 8005138:	4601      	mov	r1, r0
 800513a:	4604      	mov	r4, r0
 800513c:	4628      	mov	r0, r5
 800513e:	f000 fcc3 	bl	8005ac8 <__mcmp>
 8005142:	2800      	cmp	r0, #0
 8005144:	f73f ade4 	bgt.w	8004d10 <_dtoa_r+0x418>
 8005148:	9b08      	ldr	r3, [sp, #32]
 800514a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800514e:	ea6f 0b03 	mvn.w	fp, r3
 8005152:	f04f 0900 	mov.w	r9, #0
 8005156:	4621      	mov	r1, r4
 8005158:	4630      	mov	r0, r6
 800515a:	f000 fa79 	bl	8005650 <_Bfree>
 800515e:	2f00      	cmp	r7, #0
 8005160:	f43f aea1 	beq.w	8004ea6 <_dtoa_r+0x5ae>
 8005164:	f1b9 0f00 	cmp.w	r9, #0
 8005168:	d005      	beq.n	8005176 <_dtoa_r+0x87e>
 800516a:	45b9      	cmp	r9, r7
 800516c:	d003      	beq.n	8005176 <_dtoa_r+0x87e>
 800516e:	4649      	mov	r1, r9
 8005170:	4630      	mov	r0, r6
 8005172:	f000 fa6d 	bl	8005650 <_Bfree>
 8005176:	4639      	mov	r1, r7
 8005178:	4630      	mov	r0, r6
 800517a:	f000 fa69 	bl	8005650 <_Bfree>
 800517e:	e692      	b.n	8004ea6 <_dtoa_r+0x5ae>
 8005180:	2400      	movs	r4, #0
 8005182:	4627      	mov	r7, r4
 8005184:	e7e0      	b.n	8005148 <_dtoa_r+0x850>
 8005186:	4693      	mov	fp, r2
 8005188:	4627      	mov	r7, r4
 800518a:	e5c1      	b.n	8004d10 <_dtoa_r+0x418>
 800518c:	9b07      	ldr	r3, [sp, #28]
 800518e:	46ca      	mov	sl, r9
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8100 	beq.w	8005396 <_dtoa_r+0xa9e>
 8005196:	f1b8 0f00 	cmp.w	r8, #0
 800519a:	dd05      	ble.n	80051a8 <_dtoa_r+0x8b0>
 800519c:	4639      	mov	r1, r7
 800519e:	4642      	mov	r2, r8
 80051a0:	4630      	mov	r0, r6
 80051a2:	f000 fc25 	bl	80059f0 <__lshift>
 80051a6:	4607      	mov	r7, r0
 80051a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d05d      	beq.n	800526a <_dtoa_r+0x972>
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4630      	mov	r0, r6
 80051b2:	f000 fa0d 	bl	80055d0 <_Balloc>
 80051b6:	4680      	mov	r8, r0
 80051b8:	b928      	cbnz	r0, 80051c6 <_dtoa_r+0x8ce>
 80051ba:	4b82      	ldr	r3, [pc, #520]	; (80053c4 <_dtoa_r+0xacc>)
 80051bc:	4602      	mov	r2, r0
 80051be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80051c2:	f7ff bbb1 	b.w	8004928 <_dtoa_r+0x30>
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	3202      	adds	r2, #2
 80051ca:	0092      	lsls	r2, r2, #2
 80051cc:	f107 010c 	add.w	r1, r7, #12
 80051d0:	300c      	adds	r0, #12
 80051d2:	f000 ffa9 	bl	8006128 <memcpy>
 80051d6:	2201      	movs	r2, #1
 80051d8:	4641      	mov	r1, r8
 80051da:	4630      	mov	r0, r6
 80051dc:	f000 fc08 	bl	80059f0 <__lshift>
 80051e0:	9b01      	ldr	r3, [sp, #4]
 80051e2:	3301      	adds	r3, #1
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	9b01      	ldr	r3, [sp, #4]
 80051e8:	4453      	add	r3, sl
 80051ea:	9308      	str	r3, [sp, #32]
 80051ec:	9b02      	ldr	r3, [sp, #8]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	46b9      	mov	r9, r7
 80051f4:	9307      	str	r3, [sp, #28]
 80051f6:	4607      	mov	r7, r0
 80051f8:	9b04      	ldr	r3, [sp, #16]
 80051fa:	4621      	mov	r1, r4
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4628      	mov	r0, r5
 8005200:	9302      	str	r3, [sp, #8]
 8005202:	f7ff faf0 	bl	80047e6 <quorem>
 8005206:	4603      	mov	r3, r0
 8005208:	3330      	adds	r3, #48	; 0x30
 800520a:	9005      	str	r0, [sp, #20]
 800520c:	4649      	mov	r1, r9
 800520e:	4628      	mov	r0, r5
 8005210:	9309      	str	r3, [sp, #36]	; 0x24
 8005212:	f000 fc59 	bl	8005ac8 <__mcmp>
 8005216:	463a      	mov	r2, r7
 8005218:	4682      	mov	sl, r0
 800521a:	4621      	mov	r1, r4
 800521c:	4630      	mov	r0, r6
 800521e:	f000 fc6f 	bl	8005b00 <__mdiff>
 8005222:	68c2      	ldr	r2, [r0, #12]
 8005224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005226:	4680      	mov	r8, r0
 8005228:	bb0a      	cbnz	r2, 800526e <_dtoa_r+0x976>
 800522a:	4601      	mov	r1, r0
 800522c:	4628      	mov	r0, r5
 800522e:	f000 fc4b 	bl	8005ac8 <__mcmp>
 8005232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005234:	4602      	mov	r2, r0
 8005236:	4641      	mov	r1, r8
 8005238:	4630      	mov	r0, r6
 800523a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800523e:	f000 fa07 	bl	8005650 <_Bfree>
 8005242:	9b06      	ldr	r3, [sp, #24]
 8005244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005246:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800524a:	ea43 0102 	orr.w	r1, r3, r2
 800524e:	9b07      	ldr	r3, [sp, #28]
 8005250:	4319      	orrs	r1, r3
 8005252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005254:	d10d      	bne.n	8005272 <_dtoa_r+0x97a>
 8005256:	2b39      	cmp	r3, #57	; 0x39
 8005258:	d029      	beq.n	80052ae <_dtoa_r+0x9b6>
 800525a:	f1ba 0f00 	cmp.w	sl, #0
 800525e:	dd01      	ble.n	8005264 <_dtoa_r+0x96c>
 8005260:	9b05      	ldr	r3, [sp, #20]
 8005262:	3331      	adds	r3, #49	; 0x31
 8005264:	9a02      	ldr	r2, [sp, #8]
 8005266:	7013      	strb	r3, [r2, #0]
 8005268:	e775      	b.n	8005156 <_dtoa_r+0x85e>
 800526a:	4638      	mov	r0, r7
 800526c:	e7b8      	b.n	80051e0 <_dtoa_r+0x8e8>
 800526e:	2201      	movs	r2, #1
 8005270:	e7e1      	b.n	8005236 <_dtoa_r+0x93e>
 8005272:	f1ba 0f00 	cmp.w	sl, #0
 8005276:	db06      	blt.n	8005286 <_dtoa_r+0x98e>
 8005278:	9906      	ldr	r1, [sp, #24]
 800527a:	ea41 0a0a 	orr.w	sl, r1, sl
 800527e:	9907      	ldr	r1, [sp, #28]
 8005280:	ea5a 0a01 	orrs.w	sl, sl, r1
 8005284:	d120      	bne.n	80052c8 <_dtoa_r+0x9d0>
 8005286:	2a00      	cmp	r2, #0
 8005288:	ddec      	ble.n	8005264 <_dtoa_r+0x96c>
 800528a:	4629      	mov	r1, r5
 800528c:	2201      	movs	r2, #1
 800528e:	4630      	mov	r0, r6
 8005290:	9304      	str	r3, [sp, #16]
 8005292:	f000 fbad 	bl	80059f0 <__lshift>
 8005296:	4621      	mov	r1, r4
 8005298:	4605      	mov	r5, r0
 800529a:	f000 fc15 	bl	8005ac8 <__mcmp>
 800529e:	2800      	cmp	r0, #0
 80052a0:	9b04      	ldr	r3, [sp, #16]
 80052a2:	dc02      	bgt.n	80052aa <_dtoa_r+0x9b2>
 80052a4:	d1de      	bne.n	8005264 <_dtoa_r+0x96c>
 80052a6:	07da      	lsls	r2, r3, #31
 80052a8:	d5dc      	bpl.n	8005264 <_dtoa_r+0x96c>
 80052aa:	2b39      	cmp	r3, #57	; 0x39
 80052ac:	d1d8      	bne.n	8005260 <_dtoa_r+0x968>
 80052ae:	9a02      	ldr	r2, [sp, #8]
 80052b0:	2339      	movs	r3, #57	; 0x39
 80052b2:	7013      	strb	r3, [r2, #0]
 80052b4:	4643      	mov	r3, r8
 80052b6:	4698      	mov	r8, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80052be:	2a39      	cmp	r2, #57	; 0x39
 80052c0:	d051      	beq.n	8005366 <_dtoa_r+0xa6e>
 80052c2:	3201      	adds	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e746      	b.n	8005156 <_dtoa_r+0x85e>
 80052c8:	2a00      	cmp	r2, #0
 80052ca:	dd03      	ble.n	80052d4 <_dtoa_r+0x9dc>
 80052cc:	2b39      	cmp	r3, #57	; 0x39
 80052ce:	d0ee      	beq.n	80052ae <_dtoa_r+0x9b6>
 80052d0:	3301      	adds	r3, #1
 80052d2:	e7c7      	b.n	8005264 <_dtoa_r+0x96c>
 80052d4:	9a04      	ldr	r2, [sp, #16]
 80052d6:	9908      	ldr	r1, [sp, #32]
 80052d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80052dc:	428a      	cmp	r2, r1
 80052de:	d02b      	beq.n	8005338 <_dtoa_r+0xa40>
 80052e0:	4629      	mov	r1, r5
 80052e2:	2300      	movs	r3, #0
 80052e4:	220a      	movs	r2, #10
 80052e6:	4630      	mov	r0, r6
 80052e8:	f000 f9d4 	bl	8005694 <__multadd>
 80052ec:	45b9      	cmp	r9, r7
 80052ee:	4605      	mov	r5, r0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	f04f 020a 	mov.w	r2, #10
 80052f8:	4649      	mov	r1, r9
 80052fa:	4630      	mov	r0, r6
 80052fc:	d107      	bne.n	800530e <_dtoa_r+0xa16>
 80052fe:	f000 f9c9 	bl	8005694 <__multadd>
 8005302:	4681      	mov	r9, r0
 8005304:	4607      	mov	r7, r0
 8005306:	9b04      	ldr	r3, [sp, #16]
 8005308:	3301      	adds	r3, #1
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	e774      	b.n	80051f8 <_dtoa_r+0x900>
 800530e:	f000 f9c1 	bl	8005694 <__multadd>
 8005312:	4639      	mov	r1, r7
 8005314:	4681      	mov	r9, r0
 8005316:	2300      	movs	r3, #0
 8005318:	220a      	movs	r2, #10
 800531a:	4630      	mov	r0, r6
 800531c:	f000 f9ba 	bl	8005694 <__multadd>
 8005320:	4607      	mov	r7, r0
 8005322:	e7f0      	b.n	8005306 <_dtoa_r+0xa0e>
 8005324:	f1ba 0f00 	cmp.w	sl, #0
 8005328:	9a01      	ldr	r2, [sp, #4]
 800532a:	bfcc      	ite	gt
 800532c:	46d0      	movgt	r8, sl
 800532e:	f04f 0801 	movle.w	r8, #1
 8005332:	4490      	add	r8, r2
 8005334:	f04f 0900 	mov.w	r9, #0
 8005338:	4629      	mov	r1, r5
 800533a:	2201      	movs	r2, #1
 800533c:	4630      	mov	r0, r6
 800533e:	9302      	str	r3, [sp, #8]
 8005340:	f000 fb56 	bl	80059f0 <__lshift>
 8005344:	4621      	mov	r1, r4
 8005346:	4605      	mov	r5, r0
 8005348:	f000 fbbe 	bl	8005ac8 <__mcmp>
 800534c:	2800      	cmp	r0, #0
 800534e:	dcb1      	bgt.n	80052b4 <_dtoa_r+0x9bc>
 8005350:	d102      	bne.n	8005358 <_dtoa_r+0xa60>
 8005352:	9b02      	ldr	r3, [sp, #8]
 8005354:	07db      	lsls	r3, r3, #31
 8005356:	d4ad      	bmi.n	80052b4 <_dtoa_r+0x9bc>
 8005358:	4643      	mov	r3, r8
 800535a:	4698      	mov	r8, r3
 800535c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005360:	2a30      	cmp	r2, #48	; 0x30
 8005362:	d0fa      	beq.n	800535a <_dtoa_r+0xa62>
 8005364:	e6f7      	b.n	8005156 <_dtoa_r+0x85e>
 8005366:	9a01      	ldr	r2, [sp, #4]
 8005368:	429a      	cmp	r2, r3
 800536a:	d1a4      	bne.n	80052b6 <_dtoa_r+0x9be>
 800536c:	f10b 0b01 	add.w	fp, fp, #1
 8005370:	2331      	movs	r3, #49	; 0x31
 8005372:	e778      	b.n	8005266 <_dtoa_r+0x96e>
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <_dtoa_r+0xad0>)
 8005376:	f7ff bb2a 	b.w	80049ce <_dtoa_r+0xd6>
 800537a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800537c:	2b00      	cmp	r3, #0
 800537e:	f47f ab05 	bne.w	800498c <_dtoa_r+0x94>
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <_dtoa_r+0xad4>)
 8005384:	f7ff bb23 	b.w	80049ce <_dtoa_r+0xd6>
 8005388:	f1ba 0f00 	cmp.w	sl, #0
 800538c:	dc03      	bgt.n	8005396 <_dtoa_r+0xa9e>
 800538e:	9b06      	ldr	r3, [sp, #24]
 8005390:	2b02      	cmp	r3, #2
 8005392:	f73f aec8 	bgt.w	8005126 <_dtoa_r+0x82e>
 8005396:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800539a:	4621      	mov	r1, r4
 800539c:	4628      	mov	r0, r5
 800539e:	f7ff fa22 	bl	80047e6 <quorem>
 80053a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80053a6:	f808 3b01 	strb.w	r3, [r8], #1
 80053aa:	9a01      	ldr	r2, [sp, #4]
 80053ac:	eba8 0202 	sub.w	r2, r8, r2
 80053b0:	4592      	cmp	sl, r2
 80053b2:	ddb7      	ble.n	8005324 <_dtoa_r+0xa2c>
 80053b4:	4629      	mov	r1, r5
 80053b6:	2300      	movs	r3, #0
 80053b8:	220a      	movs	r2, #10
 80053ba:	4630      	mov	r0, r6
 80053bc:	f000 f96a 	bl	8005694 <__multadd>
 80053c0:	4605      	mov	r5, r0
 80053c2:	e7ea      	b.n	800539a <_dtoa_r+0xaa2>
 80053c4:	080068cc 	.word	0x080068cc
 80053c8:	0800682c 	.word	0x0800682c
 80053cc:	08006850 	.word	0x08006850

080053d0 <_free_r>:
 80053d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053d2:	2900      	cmp	r1, #0
 80053d4:	d044      	beq.n	8005460 <_free_r+0x90>
 80053d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053da:	9001      	str	r0, [sp, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f1a1 0404 	sub.w	r4, r1, #4
 80053e2:	bfb8      	it	lt
 80053e4:	18e4      	addlt	r4, r4, r3
 80053e6:	f000 f8e7 	bl	80055b8 <__malloc_lock>
 80053ea:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <_free_r+0x94>)
 80053ec:	9801      	ldr	r0, [sp, #4]
 80053ee:	6813      	ldr	r3, [r2, #0]
 80053f0:	b933      	cbnz	r3, 8005400 <_free_r+0x30>
 80053f2:	6063      	str	r3, [r4, #4]
 80053f4:	6014      	str	r4, [r2, #0]
 80053f6:	b003      	add	sp, #12
 80053f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053fc:	f000 b8e2 	b.w	80055c4 <__malloc_unlock>
 8005400:	42a3      	cmp	r3, r4
 8005402:	d908      	bls.n	8005416 <_free_r+0x46>
 8005404:	6825      	ldr	r5, [r4, #0]
 8005406:	1961      	adds	r1, r4, r5
 8005408:	428b      	cmp	r3, r1
 800540a:	bf01      	itttt	eq
 800540c:	6819      	ldreq	r1, [r3, #0]
 800540e:	685b      	ldreq	r3, [r3, #4]
 8005410:	1949      	addeq	r1, r1, r5
 8005412:	6021      	streq	r1, [r4, #0]
 8005414:	e7ed      	b.n	80053f2 <_free_r+0x22>
 8005416:	461a      	mov	r2, r3
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	b10b      	cbz	r3, 8005420 <_free_r+0x50>
 800541c:	42a3      	cmp	r3, r4
 800541e:	d9fa      	bls.n	8005416 <_free_r+0x46>
 8005420:	6811      	ldr	r1, [r2, #0]
 8005422:	1855      	adds	r5, r2, r1
 8005424:	42a5      	cmp	r5, r4
 8005426:	d10b      	bne.n	8005440 <_free_r+0x70>
 8005428:	6824      	ldr	r4, [r4, #0]
 800542a:	4421      	add	r1, r4
 800542c:	1854      	adds	r4, r2, r1
 800542e:	42a3      	cmp	r3, r4
 8005430:	6011      	str	r1, [r2, #0]
 8005432:	d1e0      	bne.n	80053f6 <_free_r+0x26>
 8005434:	681c      	ldr	r4, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	6053      	str	r3, [r2, #4]
 800543a:	440c      	add	r4, r1
 800543c:	6014      	str	r4, [r2, #0]
 800543e:	e7da      	b.n	80053f6 <_free_r+0x26>
 8005440:	d902      	bls.n	8005448 <_free_r+0x78>
 8005442:	230c      	movs	r3, #12
 8005444:	6003      	str	r3, [r0, #0]
 8005446:	e7d6      	b.n	80053f6 <_free_r+0x26>
 8005448:	6825      	ldr	r5, [r4, #0]
 800544a:	1961      	adds	r1, r4, r5
 800544c:	428b      	cmp	r3, r1
 800544e:	bf04      	itt	eq
 8005450:	6819      	ldreq	r1, [r3, #0]
 8005452:	685b      	ldreq	r3, [r3, #4]
 8005454:	6063      	str	r3, [r4, #4]
 8005456:	bf04      	itt	eq
 8005458:	1949      	addeq	r1, r1, r5
 800545a:	6021      	streq	r1, [r4, #0]
 800545c:	6054      	str	r4, [r2, #4]
 800545e:	e7ca      	b.n	80053f6 <_free_r+0x26>
 8005460:	b003      	add	sp, #12
 8005462:	bd30      	pop	{r4, r5, pc}
 8005464:	200004f0 	.word	0x200004f0

08005468 <malloc>:
 8005468:	4b02      	ldr	r3, [pc, #8]	; (8005474 <malloc+0xc>)
 800546a:	4601      	mov	r1, r0
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	f000 b823 	b.w	80054b8 <_malloc_r>
 8005472:	bf00      	nop
 8005474:	20000064 	.word	0x20000064

08005478 <sbrk_aligned>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	4e0e      	ldr	r6, [pc, #56]	; (80054b4 <sbrk_aligned+0x3c>)
 800547c:	460c      	mov	r4, r1
 800547e:	6831      	ldr	r1, [r6, #0]
 8005480:	4605      	mov	r5, r0
 8005482:	b911      	cbnz	r1, 800548a <sbrk_aligned+0x12>
 8005484:	f000 fe40 	bl	8006108 <_sbrk_r>
 8005488:	6030      	str	r0, [r6, #0]
 800548a:	4621      	mov	r1, r4
 800548c:	4628      	mov	r0, r5
 800548e:	f000 fe3b 	bl	8006108 <_sbrk_r>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d00a      	beq.n	80054ac <sbrk_aligned+0x34>
 8005496:	1cc4      	adds	r4, r0, #3
 8005498:	f024 0403 	bic.w	r4, r4, #3
 800549c:	42a0      	cmp	r0, r4
 800549e:	d007      	beq.n	80054b0 <sbrk_aligned+0x38>
 80054a0:	1a21      	subs	r1, r4, r0
 80054a2:	4628      	mov	r0, r5
 80054a4:	f000 fe30 	bl	8006108 <_sbrk_r>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d101      	bne.n	80054b0 <sbrk_aligned+0x38>
 80054ac:	f04f 34ff 	mov.w	r4, #4294967295
 80054b0:	4620      	mov	r0, r4
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	200004f4 	.word	0x200004f4

080054b8 <_malloc_r>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	1ccd      	adds	r5, r1, #3
 80054be:	f025 0503 	bic.w	r5, r5, #3
 80054c2:	3508      	adds	r5, #8
 80054c4:	2d0c      	cmp	r5, #12
 80054c6:	bf38      	it	cc
 80054c8:	250c      	movcc	r5, #12
 80054ca:	2d00      	cmp	r5, #0
 80054cc:	4607      	mov	r7, r0
 80054ce:	db01      	blt.n	80054d4 <_malloc_r+0x1c>
 80054d0:	42a9      	cmp	r1, r5
 80054d2:	d905      	bls.n	80054e0 <_malloc_r+0x28>
 80054d4:	230c      	movs	r3, #12
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	2600      	movs	r6, #0
 80054da:	4630      	mov	r0, r6
 80054dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055b4 <_malloc_r+0xfc>
 80054e4:	f000 f868 	bl	80055b8 <__malloc_lock>
 80054e8:	f8d8 3000 	ldr.w	r3, [r8]
 80054ec:	461c      	mov	r4, r3
 80054ee:	bb5c      	cbnz	r4, 8005548 <_malloc_r+0x90>
 80054f0:	4629      	mov	r1, r5
 80054f2:	4638      	mov	r0, r7
 80054f4:	f7ff ffc0 	bl	8005478 <sbrk_aligned>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	4604      	mov	r4, r0
 80054fc:	d155      	bne.n	80055aa <_malloc_r+0xf2>
 80054fe:	f8d8 4000 	ldr.w	r4, [r8]
 8005502:	4626      	mov	r6, r4
 8005504:	2e00      	cmp	r6, #0
 8005506:	d145      	bne.n	8005594 <_malloc_r+0xdc>
 8005508:	2c00      	cmp	r4, #0
 800550a:	d048      	beq.n	800559e <_malloc_r+0xe6>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	4631      	mov	r1, r6
 8005510:	4638      	mov	r0, r7
 8005512:	eb04 0903 	add.w	r9, r4, r3
 8005516:	f000 fdf7 	bl	8006108 <_sbrk_r>
 800551a:	4581      	cmp	r9, r0
 800551c:	d13f      	bne.n	800559e <_malloc_r+0xe6>
 800551e:	6821      	ldr	r1, [r4, #0]
 8005520:	1a6d      	subs	r5, r5, r1
 8005522:	4629      	mov	r1, r5
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ffa7 	bl	8005478 <sbrk_aligned>
 800552a:	3001      	adds	r0, #1
 800552c:	d037      	beq.n	800559e <_malloc_r+0xe6>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	442b      	add	r3, r5
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	f8d8 3000 	ldr.w	r3, [r8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d038      	beq.n	80055ae <_malloc_r+0xf6>
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	42a2      	cmp	r2, r4
 8005540:	d12b      	bne.n	800559a <_malloc_r+0xe2>
 8005542:	2200      	movs	r2, #0
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	e00f      	b.n	8005568 <_malloc_r+0xb0>
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	1b52      	subs	r2, r2, r5
 800554c:	d41f      	bmi.n	800558e <_malloc_r+0xd6>
 800554e:	2a0b      	cmp	r2, #11
 8005550:	d917      	bls.n	8005582 <_malloc_r+0xca>
 8005552:	1961      	adds	r1, r4, r5
 8005554:	42a3      	cmp	r3, r4
 8005556:	6025      	str	r5, [r4, #0]
 8005558:	bf18      	it	ne
 800555a:	6059      	strne	r1, [r3, #4]
 800555c:	6863      	ldr	r3, [r4, #4]
 800555e:	bf08      	it	eq
 8005560:	f8c8 1000 	streq.w	r1, [r8]
 8005564:	5162      	str	r2, [r4, r5]
 8005566:	604b      	str	r3, [r1, #4]
 8005568:	4638      	mov	r0, r7
 800556a:	f104 060b 	add.w	r6, r4, #11
 800556e:	f000 f829 	bl	80055c4 <__malloc_unlock>
 8005572:	f026 0607 	bic.w	r6, r6, #7
 8005576:	1d23      	adds	r3, r4, #4
 8005578:	1af2      	subs	r2, r6, r3
 800557a:	d0ae      	beq.n	80054da <_malloc_r+0x22>
 800557c:	1b9b      	subs	r3, r3, r6
 800557e:	50a3      	str	r3, [r4, r2]
 8005580:	e7ab      	b.n	80054da <_malloc_r+0x22>
 8005582:	42a3      	cmp	r3, r4
 8005584:	6862      	ldr	r2, [r4, #4]
 8005586:	d1dd      	bne.n	8005544 <_malloc_r+0x8c>
 8005588:	f8c8 2000 	str.w	r2, [r8]
 800558c:	e7ec      	b.n	8005568 <_malloc_r+0xb0>
 800558e:	4623      	mov	r3, r4
 8005590:	6864      	ldr	r4, [r4, #4]
 8005592:	e7ac      	b.n	80054ee <_malloc_r+0x36>
 8005594:	4634      	mov	r4, r6
 8005596:	6876      	ldr	r6, [r6, #4]
 8005598:	e7b4      	b.n	8005504 <_malloc_r+0x4c>
 800559a:	4613      	mov	r3, r2
 800559c:	e7cc      	b.n	8005538 <_malloc_r+0x80>
 800559e:	230c      	movs	r3, #12
 80055a0:	603b      	str	r3, [r7, #0]
 80055a2:	4638      	mov	r0, r7
 80055a4:	f000 f80e 	bl	80055c4 <__malloc_unlock>
 80055a8:	e797      	b.n	80054da <_malloc_r+0x22>
 80055aa:	6025      	str	r5, [r4, #0]
 80055ac:	e7dc      	b.n	8005568 <_malloc_r+0xb0>
 80055ae:	605b      	str	r3, [r3, #4]
 80055b0:	deff      	udf	#255	; 0xff
 80055b2:	bf00      	nop
 80055b4:	200004f0 	.word	0x200004f0

080055b8 <__malloc_lock>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__malloc_lock+0x8>)
 80055ba:	f7ff b912 	b.w	80047e2 <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	200004ec 	.word	0x200004ec

080055c4 <__malloc_unlock>:
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <__malloc_unlock+0x8>)
 80055c6:	f7ff b90d 	b.w	80047e4 <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	200004ec 	.word	0x200004ec

080055d0 <_Balloc>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	69c6      	ldr	r6, [r0, #28]
 80055d4:	4604      	mov	r4, r0
 80055d6:	460d      	mov	r5, r1
 80055d8:	b976      	cbnz	r6, 80055f8 <_Balloc+0x28>
 80055da:	2010      	movs	r0, #16
 80055dc:	f7ff ff44 	bl	8005468 <malloc>
 80055e0:	4602      	mov	r2, r0
 80055e2:	61e0      	str	r0, [r4, #28]
 80055e4:	b920      	cbnz	r0, 80055f0 <_Balloc+0x20>
 80055e6:	4b18      	ldr	r3, [pc, #96]	; (8005648 <_Balloc+0x78>)
 80055e8:	4818      	ldr	r0, [pc, #96]	; (800564c <_Balloc+0x7c>)
 80055ea:	216b      	movs	r1, #107	; 0x6b
 80055ec:	f000 fdaa 	bl	8006144 <__assert_func>
 80055f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055f4:	6006      	str	r6, [r0, #0]
 80055f6:	60c6      	str	r6, [r0, #12]
 80055f8:	69e6      	ldr	r6, [r4, #28]
 80055fa:	68f3      	ldr	r3, [r6, #12]
 80055fc:	b183      	cbz	r3, 8005620 <_Balloc+0x50>
 80055fe:	69e3      	ldr	r3, [r4, #28]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005606:	b9b8      	cbnz	r0, 8005638 <_Balloc+0x68>
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f605 	lsl.w	r6, r1, r5
 800560e:	1d72      	adds	r2, r6, #5
 8005610:	0092      	lsls	r2, r2, #2
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fdb4 	bl	8006180 <_calloc_r>
 8005618:	b160      	cbz	r0, 8005634 <_Balloc+0x64>
 800561a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800561e:	e00e      	b.n	800563e <_Balloc+0x6e>
 8005620:	2221      	movs	r2, #33	; 0x21
 8005622:	2104      	movs	r1, #4
 8005624:	4620      	mov	r0, r4
 8005626:	f000 fdab 	bl	8006180 <_calloc_r>
 800562a:	69e3      	ldr	r3, [r4, #28]
 800562c:	60f0      	str	r0, [r6, #12]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e4      	bne.n	80055fe <_Balloc+0x2e>
 8005634:	2000      	movs	r0, #0
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	6802      	ldr	r2, [r0, #0]
 800563a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800563e:	2300      	movs	r3, #0
 8005640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005644:	e7f7      	b.n	8005636 <_Balloc+0x66>
 8005646:	bf00      	nop
 8005648:	0800685d 	.word	0x0800685d
 800564c:	080068dd 	.word	0x080068dd

08005650 <_Bfree>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	69c6      	ldr	r6, [r0, #28]
 8005654:	4605      	mov	r5, r0
 8005656:	460c      	mov	r4, r1
 8005658:	b976      	cbnz	r6, 8005678 <_Bfree+0x28>
 800565a:	2010      	movs	r0, #16
 800565c:	f7ff ff04 	bl	8005468 <malloc>
 8005660:	4602      	mov	r2, r0
 8005662:	61e8      	str	r0, [r5, #28]
 8005664:	b920      	cbnz	r0, 8005670 <_Bfree+0x20>
 8005666:	4b09      	ldr	r3, [pc, #36]	; (800568c <_Bfree+0x3c>)
 8005668:	4809      	ldr	r0, [pc, #36]	; (8005690 <_Bfree+0x40>)
 800566a:	218f      	movs	r1, #143	; 0x8f
 800566c:	f000 fd6a 	bl	8006144 <__assert_func>
 8005670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005674:	6006      	str	r6, [r0, #0]
 8005676:	60c6      	str	r6, [r0, #12]
 8005678:	b13c      	cbz	r4, 800568a <_Bfree+0x3a>
 800567a:	69eb      	ldr	r3, [r5, #28]
 800567c:	6862      	ldr	r2, [r4, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005684:	6021      	str	r1, [r4, #0]
 8005686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	0800685d 	.word	0x0800685d
 8005690:	080068dd 	.word	0x080068dd

08005694 <__multadd>:
 8005694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005698:	690d      	ldr	r5, [r1, #16]
 800569a:	4607      	mov	r7, r0
 800569c:	460c      	mov	r4, r1
 800569e:	461e      	mov	r6, r3
 80056a0:	f101 0c14 	add.w	ip, r1, #20
 80056a4:	2000      	movs	r0, #0
 80056a6:	f8dc 3000 	ldr.w	r3, [ip]
 80056aa:	b299      	uxth	r1, r3
 80056ac:	fb02 6101 	mla	r1, r2, r1, r6
 80056b0:	0c1e      	lsrs	r6, r3, #16
 80056b2:	0c0b      	lsrs	r3, r1, #16
 80056b4:	fb02 3306 	mla	r3, r2, r6, r3
 80056b8:	b289      	uxth	r1, r1
 80056ba:	3001      	adds	r0, #1
 80056bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056c0:	4285      	cmp	r5, r0
 80056c2:	f84c 1b04 	str.w	r1, [ip], #4
 80056c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056ca:	dcec      	bgt.n	80056a6 <__multadd+0x12>
 80056cc:	b30e      	cbz	r6, 8005712 <__multadd+0x7e>
 80056ce:	68a3      	ldr	r3, [r4, #8]
 80056d0:	42ab      	cmp	r3, r5
 80056d2:	dc19      	bgt.n	8005708 <__multadd+0x74>
 80056d4:	6861      	ldr	r1, [r4, #4]
 80056d6:	4638      	mov	r0, r7
 80056d8:	3101      	adds	r1, #1
 80056da:	f7ff ff79 	bl	80055d0 <_Balloc>
 80056de:	4680      	mov	r8, r0
 80056e0:	b928      	cbnz	r0, 80056ee <__multadd+0x5a>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <__multadd+0x84>)
 80056e6:	480d      	ldr	r0, [pc, #52]	; (800571c <__multadd+0x88>)
 80056e8:	21ba      	movs	r1, #186	; 0xba
 80056ea:	f000 fd2b 	bl	8006144 <__assert_func>
 80056ee:	6922      	ldr	r2, [r4, #16]
 80056f0:	3202      	adds	r2, #2
 80056f2:	f104 010c 	add.w	r1, r4, #12
 80056f6:	0092      	lsls	r2, r2, #2
 80056f8:	300c      	adds	r0, #12
 80056fa:	f000 fd15 	bl	8006128 <memcpy>
 80056fe:	4621      	mov	r1, r4
 8005700:	4638      	mov	r0, r7
 8005702:	f7ff ffa5 	bl	8005650 <_Bfree>
 8005706:	4644      	mov	r4, r8
 8005708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800570c:	3501      	adds	r5, #1
 800570e:	615e      	str	r6, [r3, #20]
 8005710:	6125      	str	r5, [r4, #16]
 8005712:	4620      	mov	r0, r4
 8005714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005718:	080068cc 	.word	0x080068cc
 800571c:	080068dd 	.word	0x080068dd

08005720 <__hi0bits>:
 8005720:	0c03      	lsrs	r3, r0, #16
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	b9d3      	cbnz	r3, 800575c <__hi0bits+0x3c>
 8005726:	0400      	lsls	r0, r0, #16
 8005728:	2310      	movs	r3, #16
 800572a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800572e:	bf04      	itt	eq
 8005730:	0200      	lsleq	r0, r0, #8
 8005732:	3308      	addeq	r3, #8
 8005734:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005738:	bf04      	itt	eq
 800573a:	0100      	lsleq	r0, r0, #4
 800573c:	3304      	addeq	r3, #4
 800573e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005742:	bf04      	itt	eq
 8005744:	0080      	lsleq	r0, r0, #2
 8005746:	3302      	addeq	r3, #2
 8005748:	2800      	cmp	r0, #0
 800574a:	db05      	blt.n	8005758 <__hi0bits+0x38>
 800574c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005750:	f103 0301 	add.w	r3, r3, #1
 8005754:	bf08      	it	eq
 8005756:	2320      	moveq	r3, #32
 8005758:	4618      	mov	r0, r3
 800575a:	4770      	bx	lr
 800575c:	2300      	movs	r3, #0
 800575e:	e7e4      	b.n	800572a <__hi0bits+0xa>

08005760 <__lo0bits>:
 8005760:	6803      	ldr	r3, [r0, #0]
 8005762:	f013 0207 	ands.w	r2, r3, #7
 8005766:	d00c      	beq.n	8005782 <__lo0bits+0x22>
 8005768:	07d9      	lsls	r1, r3, #31
 800576a:	d422      	bmi.n	80057b2 <__lo0bits+0x52>
 800576c:	079a      	lsls	r2, r3, #30
 800576e:	bf49      	itett	mi
 8005770:	085b      	lsrmi	r3, r3, #1
 8005772:	089b      	lsrpl	r3, r3, #2
 8005774:	6003      	strmi	r3, [r0, #0]
 8005776:	2201      	movmi	r2, #1
 8005778:	bf5c      	itt	pl
 800577a:	6003      	strpl	r3, [r0, #0]
 800577c:	2202      	movpl	r2, #2
 800577e:	4610      	mov	r0, r2
 8005780:	4770      	bx	lr
 8005782:	b299      	uxth	r1, r3
 8005784:	b909      	cbnz	r1, 800578a <__lo0bits+0x2a>
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	2210      	movs	r2, #16
 800578a:	b2d9      	uxtb	r1, r3
 800578c:	b909      	cbnz	r1, 8005792 <__lo0bits+0x32>
 800578e:	3208      	adds	r2, #8
 8005790:	0a1b      	lsrs	r3, r3, #8
 8005792:	0719      	lsls	r1, r3, #28
 8005794:	bf04      	itt	eq
 8005796:	091b      	lsreq	r3, r3, #4
 8005798:	3204      	addeq	r2, #4
 800579a:	0799      	lsls	r1, r3, #30
 800579c:	bf04      	itt	eq
 800579e:	089b      	lsreq	r3, r3, #2
 80057a0:	3202      	addeq	r2, #2
 80057a2:	07d9      	lsls	r1, r3, #31
 80057a4:	d403      	bmi.n	80057ae <__lo0bits+0x4e>
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	f102 0201 	add.w	r2, r2, #1
 80057ac:	d003      	beq.n	80057b6 <__lo0bits+0x56>
 80057ae:	6003      	str	r3, [r0, #0]
 80057b0:	e7e5      	b.n	800577e <__lo0bits+0x1e>
 80057b2:	2200      	movs	r2, #0
 80057b4:	e7e3      	b.n	800577e <__lo0bits+0x1e>
 80057b6:	2220      	movs	r2, #32
 80057b8:	e7e1      	b.n	800577e <__lo0bits+0x1e>
	...

080057bc <__i2b>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	460c      	mov	r4, r1
 80057c0:	2101      	movs	r1, #1
 80057c2:	f7ff ff05 	bl	80055d0 <_Balloc>
 80057c6:	4602      	mov	r2, r0
 80057c8:	b928      	cbnz	r0, 80057d6 <__i2b+0x1a>
 80057ca:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <__i2b+0x24>)
 80057cc:	4805      	ldr	r0, [pc, #20]	; (80057e4 <__i2b+0x28>)
 80057ce:	f240 1145 	movw	r1, #325	; 0x145
 80057d2:	f000 fcb7 	bl	8006144 <__assert_func>
 80057d6:	2301      	movs	r3, #1
 80057d8:	6144      	str	r4, [r0, #20]
 80057da:	6103      	str	r3, [r0, #16]
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	bf00      	nop
 80057e0:	080068cc 	.word	0x080068cc
 80057e4:	080068dd 	.word	0x080068dd

080057e8 <__multiply>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	4691      	mov	r9, r2
 80057ee:	690a      	ldr	r2, [r1, #16]
 80057f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	bfb8      	it	lt
 80057f8:	460b      	movlt	r3, r1
 80057fa:	460c      	mov	r4, r1
 80057fc:	bfbc      	itt	lt
 80057fe:	464c      	movlt	r4, r9
 8005800:	4699      	movlt	r9, r3
 8005802:	6927      	ldr	r7, [r4, #16]
 8005804:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005808:	68a3      	ldr	r3, [r4, #8]
 800580a:	6861      	ldr	r1, [r4, #4]
 800580c:	eb07 060a 	add.w	r6, r7, sl
 8005810:	42b3      	cmp	r3, r6
 8005812:	b085      	sub	sp, #20
 8005814:	bfb8      	it	lt
 8005816:	3101      	addlt	r1, #1
 8005818:	f7ff feda 	bl	80055d0 <_Balloc>
 800581c:	b930      	cbnz	r0, 800582c <__multiply+0x44>
 800581e:	4602      	mov	r2, r0
 8005820:	4b44      	ldr	r3, [pc, #272]	; (8005934 <__multiply+0x14c>)
 8005822:	4845      	ldr	r0, [pc, #276]	; (8005938 <__multiply+0x150>)
 8005824:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005828:	f000 fc8c 	bl	8006144 <__assert_func>
 800582c:	f100 0514 	add.w	r5, r0, #20
 8005830:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005834:	462b      	mov	r3, r5
 8005836:	2200      	movs	r2, #0
 8005838:	4543      	cmp	r3, r8
 800583a:	d321      	bcc.n	8005880 <__multiply+0x98>
 800583c:	f104 0314 	add.w	r3, r4, #20
 8005840:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005844:	f109 0314 	add.w	r3, r9, #20
 8005848:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800584c:	9202      	str	r2, [sp, #8]
 800584e:	1b3a      	subs	r2, r7, r4
 8005850:	3a15      	subs	r2, #21
 8005852:	f022 0203 	bic.w	r2, r2, #3
 8005856:	3204      	adds	r2, #4
 8005858:	f104 0115 	add.w	r1, r4, #21
 800585c:	428f      	cmp	r7, r1
 800585e:	bf38      	it	cc
 8005860:	2204      	movcc	r2, #4
 8005862:	9201      	str	r2, [sp, #4]
 8005864:	9a02      	ldr	r2, [sp, #8]
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	429a      	cmp	r2, r3
 800586a:	d80c      	bhi.n	8005886 <__multiply+0x9e>
 800586c:	2e00      	cmp	r6, #0
 800586e:	dd03      	ble.n	8005878 <__multiply+0x90>
 8005870:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005874:	2b00      	cmp	r3, #0
 8005876:	d05b      	beq.n	8005930 <__multiply+0x148>
 8005878:	6106      	str	r6, [r0, #16]
 800587a:	b005      	add	sp, #20
 800587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005880:	f843 2b04 	str.w	r2, [r3], #4
 8005884:	e7d8      	b.n	8005838 <__multiply+0x50>
 8005886:	f8b3 a000 	ldrh.w	sl, [r3]
 800588a:	f1ba 0f00 	cmp.w	sl, #0
 800588e:	d024      	beq.n	80058da <__multiply+0xf2>
 8005890:	f104 0e14 	add.w	lr, r4, #20
 8005894:	46a9      	mov	r9, r5
 8005896:	f04f 0c00 	mov.w	ip, #0
 800589a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800589e:	f8d9 1000 	ldr.w	r1, [r9]
 80058a2:	fa1f fb82 	uxth.w	fp, r2
 80058a6:	b289      	uxth	r1, r1
 80058a8:	fb0a 110b 	mla	r1, sl, fp, r1
 80058ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80058b0:	f8d9 2000 	ldr.w	r2, [r9]
 80058b4:	4461      	add	r1, ip
 80058b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058ba:	fb0a c20b 	mla	r2, sl, fp, ip
 80058be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80058c2:	b289      	uxth	r1, r1
 80058c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058c8:	4577      	cmp	r7, lr
 80058ca:	f849 1b04 	str.w	r1, [r9], #4
 80058ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058d2:	d8e2      	bhi.n	800589a <__multiply+0xb2>
 80058d4:	9a01      	ldr	r2, [sp, #4]
 80058d6:	f845 c002 	str.w	ip, [r5, r2]
 80058da:	9a03      	ldr	r2, [sp, #12]
 80058dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80058e0:	3304      	adds	r3, #4
 80058e2:	f1b9 0f00 	cmp.w	r9, #0
 80058e6:	d021      	beq.n	800592c <__multiply+0x144>
 80058e8:	6829      	ldr	r1, [r5, #0]
 80058ea:	f104 0c14 	add.w	ip, r4, #20
 80058ee:	46ae      	mov	lr, r5
 80058f0:	f04f 0a00 	mov.w	sl, #0
 80058f4:	f8bc b000 	ldrh.w	fp, [ip]
 80058f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80058fc:	fb09 220b 	mla	r2, r9, fp, r2
 8005900:	4452      	add	r2, sl
 8005902:	b289      	uxth	r1, r1
 8005904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005908:	f84e 1b04 	str.w	r1, [lr], #4
 800590c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005910:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005914:	f8be 1000 	ldrh.w	r1, [lr]
 8005918:	fb09 110a 	mla	r1, r9, sl, r1
 800591c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005920:	4567      	cmp	r7, ip
 8005922:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005926:	d8e5      	bhi.n	80058f4 <__multiply+0x10c>
 8005928:	9a01      	ldr	r2, [sp, #4]
 800592a:	50a9      	str	r1, [r5, r2]
 800592c:	3504      	adds	r5, #4
 800592e:	e799      	b.n	8005864 <__multiply+0x7c>
 8005930:	3e01      	subs	r6, #1
 8005932:	e79b      	b.n	800586c <__multiply+0x84>
 8005934:	080068cc 	.word	0x080068cc
 8005938:	080068dd 	.word	0x080068dd

0800593c <__pow5mult>:
 800593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005940:	4615      	mov	r5, r2
 8005942:	f012 0203 	ands.w	r2, r2, #3
 8005946:	4606      	mov	r6, r0
 8005948:	460f      	mov	r7, r1
 800594a:	d007      	beq.n	800595c <__pow5mult+0x20>
 800594c:	4c25      	ldr	r4, [pc, #148]	; (80059e4 <__pow5mult+0xa8>)
 800594e:	3a01      	subs	r2, #1
 8005950:	2300      	movs	r3, #0
 8005952:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005956:	f7ff fe9d 	bl	8005694 <__multadd>
 800595a:	4607      	mov	r7, r0
 800595c:	10ad      	asrs	r5, r5, #2
 800595e:	d03d      	beq.n	80059dc <__pow5mult+0xa0>
 8005960:	69f4      	ldr	r4, [r6, #28]
 8005962:	b97c      	cbnz	r4, 8005984 <__pow5mult+0x48>
 8005964:	2010      	movs	r0, #16
 8005966:	f7ff fd7f 	bl	8005468 <malloc>
 800596a:	4602      	mov	r2, r0
 800596c:	61f0      	str	r0, [r6, #28]
 800596e:	b928      	cbnz	r0, 800597c <__pow5mult+0x40>
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <__pow5mult+0xac>)
 8005972:	481e      	ldr	r0, [pc, #120]	; (80059ec <__pow5mult+0xb0>)
 8005974:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005978:	f000 fbe4 	bl	8006144 <__assert_func>
 800597c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005980:	6004      	str	r4, [r0, #0]
 8005982:	60c4      	str	r4, [r0, #12]
 8005984:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005988:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800598c:	b94c      	cbnz	r4, 80059a2 <__pow5mult+0x66>
 800598e:	f240 2171 	movw	r1, #625	; 0x271
 8005992:	4630      	mov	r0, r6
 8005994:	f7ff ff12 	bl	80057bc <__i2b>
 8005998:	2300      	movs	r3, #0
 800599a:	f8c8 0008 	str.w	r0, [r8, #8]
 800599e:	4604      	mov	r4, r0
 80059a0:	6003      	str	r3, [r0, #0]
 80059a2:	f04f 0900 	mov.w	r9, #0
 80059a6:	07eb      	lsls	r3, r5, #31
 80059a8:	d50a      	bpl.n	80059c0 <__pow5mult+0x84>
 80059aa:	4639      	mov	r1, r7
 80059ac:	4622      	mov	r2, r4
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7ff ff1a 	bl	80057e8 <__multiply>
 80059b4:	4639      	mov	r1, r7
 80059b6:	4680      	mov	r8, r0
 80059b8:	4630      	mov	r0, r6
 80059ba:	f7ff fe49 	bl	8005650 <_Bfree>
 80059be:	4647      	mov	r7, r8
 80059c0:	106d      	asrs	r5, r5, #1
 80059c2:	d00b      	beq.n	80059dc <__pow5mult+0xa0>
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	b938      	cbnz	r0, 80059d8 <__pow5mult+0x9c>
 80059c8:	4622      	mov	r2, r4
 80059ca:	4621      	mov	r1, r4
 80059cc:	4630      	mov	r0, r6
 80059ce:	f7ff ff0b 	bl	80057e8 <__multiply>
 80059d2:	6020      	str	r0, [r4, #0]
 80059d4:	f8c0 9000 	str.w	r9, [r0]
 80059d8:	4604      	mov	r4, r0
 80059da:	e7e4      	b.n	80059a6 <__pow5mult+0x6a>
 80059dc:	4638      	mov	r0, r7
 80059de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059e2:	bf00      	nop
 80059e4:	08006a28 	.word	0x08006a28
 80059e8:	0800685d 	.word	0x0800685d
 80059ec:	080068dd 	.word	0x080068dd

080059f0 <__lshift>:
 80059f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	460c      	mov	r4, r1
 80059f6:	6849      	ldr	r1, [r1, #4]
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059fe:	68a3      	ldr	r3, [r4, #8]
 8005a00:	4607      	mov	r7, r0
 8005a02:	4691      	mov	r9, r2
 8005a04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a08:	f108 0601 	add.w	r6, r8, #1
 8005a0c:	42b3      	cmp	r3, r6
 8005a0e:	db0b      	blt.n	8005a28 <__lshift+0x38>
 8005a10:	4638      	mov	r0, r7
 8005a12:	f7ff fddd 	bl	80055d0 <_Balloc>
 8005a16:	4605      	mov	r5, r0
 8005a18:	b948      	cbnz	r0, 8005a2e <__lshift+0x3e>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	4b28      	ldr	r3, [pc, #160]	; (8005ac0 <__lshift+0xd0>)
 8005a1e:	4829      	ldr	r0, [pc, #164]	; (8005ac4 <__lshift+0xd4>)
 8005a20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005a24:	f000 fb8e 	bl	8006144 <__assert_func>
 8005a28:	3101      	adds	r1, #1
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	e7ee      	b.n	8005a0c <__lshift+0x1c>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f100 0114 	add.w	r1, r0, #20
 8005a34:	f100 0210 	add.w	r2, r0, #16
 8005a38:	4618      	mov	r0, r3
 8005a3a:	4553      	cmp	r3, sl
 8005a3c:	db33      	blt.n	8005aa6 <__lshift+0xb6>
 8005a3e:	6920      	ldr	r0, [r4, #16]
 8005a40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a44:	f104 0314 	add.w	r3, r4, #20
 8005a48:	f019 091f 	ands.w	r9, r9, #31
 8005a4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a54:	d02b      	beq.n	8005aae <__lshift+0xbe>
 8005a56:	f1c9 0e20 	rsb	lr, r9, #32
 8005a5a:	468a      	mov	sl, r1
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	fa00 f009 	lsl.w	r0, r0, r9
 8005a64:	4310      	orrs	r0, r2
 8005a66:	f84a 0b04 	str.w	r0, [sl], #4
 8005a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a6e:	459c      	cmp	ip, r3
 8005a70:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a74:	d8f3      	bhi.n	8005a5e <__lshift+0x6e>
 8005a76:	ebac 0304 	sub.w	r3, ip, r4
 8005a7a:	3b15      	subs	r3, #21
 8005a7c:	f023 0303 	bic.w	r3, r3, #3
 8005a80:	3304      	adds	r3, #4
 8005a82:	f104 0015 	add.w	r0, r4, #21
 8005a86:	4584      	cmp	ip, r0
 8005a88:	bf38      	it	cc
 8005a8a:	2304      	movcc	r3, #4
 8005a8c:	50ca      	str	r2, [r1, r3]
 8005a8e:	b10a      	cbz	r2, 8005a94 <__lshift+0xa4>
 8005a90:	f108 0602 	add.w	r6, r8, #2
 8005a94:	3e01      	subs	r6, #1
 8005a96:	4638      	mov	r0, r7
 8005a98:	612e      	str	r6, [r5, #16]
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	f7ff fdd8 	bl	8005650 <_Bfree>
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005aaa:	3301      	adds	r3, #1
 8005aac:	e7c5      	b.n	8005a3a <__lshift+0x4a>
 8005aae:	3904      	subs	r1, #4
 8005ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ab8:	459c      	cmp	ip, r3
 8005aba:	d8f9      	bhi.n	8005ab0 <__lshift+0xc0>
 8005abc:	e7ea      	b.n	8005a94 <__lshift+0xa4>
 8005abe:	bf00      	nop
 8005ac0:	080068cc 	.word	0x080068cc
 8005ac4:	080068dd 	.word	0x080068dd

08005ac8 <__mcmp>:
 8005ac8:	b530      	push	{r4, r5, lr}
 8005aca:	6902      	ldr	r2, [r0, #16]
 8005acc:	690c      	ldr	r4, [r1, #16]
 8005ace:	1b12      	subs	r2, r2, r4
 8005ad0:	d10e      	bne.n	8005af0 <__mcmp+0x28>
 8005ad2:	f100 0314 	add.w	r3, r0, #20
 8005ad6:	3114      	adds	r1, #20
 8005ad8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005adc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005ae0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005ae4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005ae8:	42a5      	cmp	r5, r4
 8005aea:	d003      	beq.n	8005af4 <__mcmp+0x2c>
 8005aec:	d305      	bcc.n	8005afa <__mcmp+0x32>
 8005aee:	2201      	movs	r2, #1
 8005af0:	4610      	mov	r0, r2
 8005af2:	bd30      	pop	{r4, r5, pc}
 8005af4:	4283      	cmp	r3, r0
 8005af6:	d3f3      	bcc.n	8005ae0 <__mcmp+0x18>
 8005af8:	e7fa      	b.n	8005af0 <__mcmp+0x28>
 8005afa:	f04f 32ff 	mov.w	r2, #4294967295
 8005afe:	e7f7      	b.n	8005af0 <__mcmp+0x28>

08005b00 <__mdiff>:
 8005b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	460c      	mov	r4, r1
 8005b06:	4606      	mov	r6, r0
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	4690      	mov	r8, r2
 8005b0e:	f7ff ffdb 	bl	8005ac8 <__mcmp>
 8005b12:	1e05      	subs	r5, r0, #0
 8005b14:	d110      	bne.n	8005b38 <__mdiff+0x38>
 8005b16:	4629      	mov	r1, r5
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f7ff fd59 	bl	80055d0 <_Balloc>
 8005b1e:	b930      	cbnz	r0, 8005b2e <__mdiff+0x2e>
 8005b20:	4b3a      	ldr	r3, [pc, #232]	; (8005c0c <__mdiff+0x10c>)
 8005b22:	4602      	mov	r2, r0
 8005b24:	f240 2137 	movw	r1, #567	; 0x237
 8005b28:	4839      	ldr	r0, [pc, #228]	; (8005c10 <__mdiff+0x110>)
 8005b2a:	f000 fb0b 	bl	8006144 <__assert_func>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b38:	bfa4      	itt	ge
 8005b3a:	4643      	movge	r3, r8
 8005b3c:	46a0      	movge	r8, r4
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b44:	bfa6      	itte	ge
 8005b46:	461c      	movge	r4, r3
 8005b48:	2500      	movge	r5, #0
 8005b4a:	2501      	movlt	r5, #1
 8005b4c:	f7ff fd40 	bl	80055d0 <_Balloc>
 8005b50:	b920      	cbnz	r0, 8005b5c <__mdiff+0x5c>
 8005b52:	4b2e      	ldr	r3, [pc, #184]	; (8005c0c <__mdiff+0x10c>)
 8005b54:	4602      	mov	r2, r0
 8005b56:	f240 2145 	movw	r1, #581	; 0x245
 8005b5a:	e7e5      	b.n	8005b28 <__mdiff+0x28>
 8005b5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b60:	6926      	ldr	r6, [r4, #16]
 8005b62:	60c5      	str	r5, [r0, #12]
 8005b64:	f104 0914 	add.w	r9, r4, #20
 8005b68:	f108 0514 	add.w	r5, r8, #20
 8005b6c:	f100 0e14 	add.w	lr, r0, #20
 8005b70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005b74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b78:	f108 0210 	add.w	r2, r8, #16
 8005b7c:	46f2      	mov	sl, lr
 8005b7e:	2100      	movs	r1, #0
 8005b80:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005b88:	fa11 f88b 	uxtah	r8, r1, fp
 8005b8c:	b299      	uxth	r1, r3
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	eba8 0801 	sub.w	r8, r8, r1
 8005b94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b9c:	fa1f f888 	uxth.w	r8, r8
 8005ba0:	1419      	asrs	r1, r3, #16
 8005ba2:	454e      	cmp	r6, r9
 8005ba4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005ba8:	f84a 3b04 	str.w	r3, [sl], #4
 8005bac:	d8e8      	bhi.n	8005b80 <__mdiff+0x80>
 8005bae:	1b33      	subs	r3, r6, r4
 8005bb0:	3b15      	subs	r3, #21
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	3415      	adds	r4, #21
 8005bba:	42a6      	cmp	r6, r4
 8005bbc:	bf38      	it	cc
 8005bbe:	2304      	movcc	r3, #4
 8005bc0:	441d      	add	r5, r3
 8005bc2:	4473      	add	r3, lr
 8005bc4:	469e      	mov	lr, r3
 8005bc6:	462e      	mov	r6, r5
 8005bc8:	4566      	cmp	r6, ip
 8005bca:	d30e      	bcc.n	8005bea <__mdiff+0xea>
 8005bcc:	f10c 0203 	add.w	r2, ip, #3
 8005bd0:	1b52      	subs	r2, r2, r5
 8005bd2:	f022 0203 	bic.w	r2, r2, #3
 8005bd6:	3d03      	subs	r5, #3
 8005bd8:	45ac      	cmp	ip, r5
 8005bda:	bf38      	it	cc
 8005bdc:	2200      	movcc	r2, #0
 8005bde:	4413      	add	r3, r2
 8005be0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005be4:	b17a      	cbz	r2, 8005c06 <__mdiff+0x106>
 8005be6:	6107      	str	r7, [r0, #16]
 8005be8:	e7a4      	b.n	8005b34 <__mdiff+0x34>
 8005bea:	f856 8b04 	ldr.w	r8, [r6], #4
 8005bee:	fa11 f288 	uxtah	r2, r1, r8
 8005bf2:	1414      	asrs	r4, r2, #16
 8005bf4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005bf8:	b292      	uxth	r2, r2
 8005bfa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005bfe:	f84e 2b04 	str.w	r2, [lr], #4
 8005c02:	1421      	asrs	r1, r4, #16
 8005c04:	e7e0      	b.n	8005bc8 <__mdiff+0xc8>
 8005c06:	3f01      	subs	r7, #1
 8005c08:	e7ea      	b.n	8005be0 <__mdiff+0xe0>
 8005c0a:	bf00      	nop
 8005c0c:	080068cc 	.word	0x080068cc
 8005c10:	080068dd 	.word	0x080068dd

08005c14 <__d2b>:
 8005c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c18:	460f      	mov	r7, r1
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	ec59 8b10 	vmov	r8, r9, d0
 8005c20:	4616      	mov	r6, r2
 8005c22:	f7ff fcd5 	bl	80055d0 <_Balloc>
 8005c26:	4604      	mov	r4, r0
 8005c28:	b930      	cbnz	r0, 8005c38 <__d2b+0x24>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <__d2b+0xac>)
 8005c2e:	4825      	ldr	r0, [pc, #148]	; (8005cc4 <__d2b+0xb0>)
 8005c30:	f240 310f 	movw	r1, #783	; 0x30f
 8005c34:	f000 fa86 	bl	8006144 <__assert_func>
 8005c38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005c3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c40:	bb2d      	cbnz	r5, 8005c8e <__d2b+0x7a>
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	f1b8 0300 	subs.w	r3, r8, #0
 8005c48:	d026      	beq.n	8005c98 <__d2b+0x84>
 8005c4a:	4668      	mov	r0, sp
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	f7ff fd87 	bl	8005760 <__lo0bits>
 8005c52:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c56:	b1e8      	cbz	r0, 8005c94 <__d2b+0x80>
 8005c58:	f1c0 0320 	rsb	r3, r0, #32
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	430b      	orrs	r3, r1
 8005c62:	40c2      	lsrs	r2, r0
 8005c64:	6163      	str	r3, [r4, #20]
 8005c66:	9201      	str	r2, [sp, #4]
 8005c68:	9b01      	ldr	r3, [sp, #4]
 8005c6a:	61a3      	str	r3, [r4, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bf14      	ite	ne
 8005c70:	2202      	movne	r2, #2
 8005c72:	2201      	moveq	r2, #1
 8005c74:	6122      	str	r2, [r4, #16]
 8005c76:	b1bd      	cbz	r5, 8005ca8 <__d2b+0x94>
 8005c78:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c7c:	4405      	add	r5, r0
 8005c7e:	603d      	str	r5, [r7, #0]
 8005c80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c84:	6030      	str	r0, [r6, #0]
 8005c86:	4620      	mov	r0, r4
 8005c88:	b003      	add	sp, #12
 8005c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c92:	e7d6      	b.n	8005c42 <__d2b+0x2e>
 8005c94:	6161      	str	r1, [r4, #20]
 8005c96:	e7e7      	b.n	8005c68 <__d2b+0x54>
 8005c98:	a801      	add	r0, sp, #4
 8005c9a:	f7ff fd61 	bl	8005760 <__lo0bits>
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	6163      	str	r3, [r4, #20]
 8005ca2:	3020      	adds	r0, #32
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	e7e5      	b.n	8005c74 <__d2b+0x60>
 8005ca8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cb0:	6038      	str	r0, [r7, #0]
 8005cb2:	6918      	ldr	r0, [r3, #16]
 8005cb4:	f7ff fd34 	bl	8005720 <__hi0bits>
 8005cb8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005cbc:	e7e2      	b.n	8005c84 <__d2b+0x70>
 8005cbe:	bf00      	nop
 8005cc0:	080068cc 	.word	0x080068cc
 8005cc4:	080068dd 	.word	0x080068dd

08005cc8 <__ssputs_r>:
 8005cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	688e      	ldr	r6, [r1, #8]
 8005cce:	461f      	mov	r7, r3
 8005cd0:	42be      	cmp	r6, r7
 8005cd2:	680b      	ldr	r3, [r1, #0]
 8005cd4:	4682      	mov	sl, r0
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	4690      	mov	r8, r2
 8005cda:	d82c      	bhi.n	8005d36 <__ssputs_r+0x6e>
 8005cdc:	898a      	ldrh	r2, [r1, #12]
 8005cde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ce2:	d026      	beq.n	8005d32 <__ssputs_r+0x6a>
 8005ce4:	6965      	ldr	r5, [r4, #20]
 8005ce6:	6909      	ldr	r1, [r1, #16]
 8005ce8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cec:	eba3 0901 	sub.w	r9, r3, r1
 8005cf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cf4:	1c7b      	adds	r3, r7, #1
 8005cf6:	444b      	add	r3, r9
 8005cf8:	106d      	asrs	r5, r5, #1
 8005cfa:	429d      	cmp	r5, r3
 8005cfc:	bf38      	it	cc
 8005cfe:	461d      	movcc	r5, r3
 8005d00:	0553      	lsls	r3, r2, #21
 8005d02:	d527      	bpl.n	8005d54 <__ssputs_r+0x8c>
 8005d04:	4629      	mov	r1, r5
 8005d06:	f7ff fbd7 	bl	80054b8 <_malloc_r>
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	b360      	cbz	r0, 8005d68 <__ssputs_r+0xa0>
 8005d0e:	6921      	ldr	r1, [r4, #16]
 8005d10:	464a      	mov	r2, r9
 8005d12:	f000 fa09 	bl	8006128 <memcpy>
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	6126      	str	r6, [r4, #16]
 8005d24:	6165      	str	r5, [r4, #20]
 8005d26:	444e      	add	r6, r9
 8005d28:	eba5 0509 	sub.w	r5, r5, r9
 8005d2c:	6026      	str	r6, [r4, #0]
 8005d2e:	60a5      	str	r5, [r4, #8]
 8005d30:	463e      	mov	r6, r7
 8005d32:	42be      	cmp	r6, r7
 8005d34:	d900      	bls.n	8005d38 <__ssputs_r+0x70>
 8005d36:	463e      	mov	r6, r7
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	4632      	mov	r2, r6
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	f000 f9c9 	bl	80060d4 <memmove>
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	1b9b      	subs	r3, r3, r6
 8005d46:	60a3      	str	r3, [r4, #8]
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	4433      	add	r3, r6
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	2000      	movs	r0, #0
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	462a      	mov	r2, r5
 8005d56:	f000 fa3b 	bl	80061d0 <_realloc_r>
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d1e0      	bne.n	8005d22 <__ssputs_r+0x5a>
 8005d60:	6921      	ldr	r1, [r4, #16]
 8005d62:	4650      	mov	r0, sl
 8005d64:	f7ff fb34 	bl	80053d0 <_free_r>
 8005d68:	230c      	movs	r3, #12
 8005d6a:	f8ca 3000 	str.w	r3, [sl]
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d74:	81a3      	strh	r3, [r4, #12]
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7a:	e7e9      	b.n	8005d50 <__ssputs_r+0x88>

08005d7c <_svfiprintf_r>:
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d80:	4698      	mov	r8, r3
 8005d82:	898b      	ldrh	r3, [r1, #12]
 8005d84:	061b      	lsls	r3, r3, #24
 8005d86:	b09d      	sub	sp, #116	; 0x74
 8005d88:	4607      	mov	r7, r0
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	d50e      	bpl.n	8005dae <_svfiprintf_r+0x32>
 8005d90:	690b      	ldr	r3, [r1, #16]
 8005d92:	b963      	cbnz	r3, 8005dae <_svfiprintf_r+0x32>
 8005d94:	2140      	movs	r1, #64	; 0x40
 8005d96:	f7ff fb8f 	bl	80054b8 <_malloc_r>
 8005d9a:	6028      	str	r0, [r5, #0]
 8005d9c:	6128      	str	r0, [r5, #16]
 8005d9e:	b920      	cbnz	r0, 8005daa <_svfiprintf_r+0x2e>
 8005da0:	230c      	movs	r3, #12
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	e0d0      	b.n	8005f4c <_svfiprintf_r+0x1d0>
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	616b      	str	r3, [r5, #20]
 8005dae:	2300      	movs	r3, #0
 8005db0:	9309      	str	r3, [sp, #36]	; 0x24
 8005db2:	2320      	movs	r3, #32
 8005db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dbc:	2330      	movs	r3, #48	; 0x30
 8005dbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005f64 <_svfiprintf_r+0x1e8>
 8005dc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dc6:	f04f 0901 	mov.w	r9, #1
 8005dca:	4623      	mov	r3, r4
 8005dcc:	469a      	mov	sl, r3
 8005dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd2:	b10a      	cbz	r2, 8005dd8 <_svfiprintf_r+0x5c>
 8005dd4:	2a25      	cmp	r2, #37	; 0x25
 8005dd6:	d1f9      	bne.n	8005dcc <_svfiprintf_r+0x50>
 8005dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8005ddc:	d00b      	beq.n	8005df6 <_svfiprintf_r+0x7a>
 8005dde:	465b      	mov	r3, fp
 8005de0:	4622      	mov	r2, r4
 8005de2:	4629      	mov	r1, r5
 8005de4:	4638      	mov	r0, r7
 8005de6:	f7ff ff6f 	bl	8005cc8 <__ssputs_r>
 8005dea:	3001      	adds	r0, #1
 8005dec:	f000 80a9 	beq.w	8005f42 <_svfiprintf_r+0x1c6>
 8005df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005df2:	445a      	add	r2, fp
 8005df4:	9209      	str	r2, [sp, #36]	; 0x24
 8005df6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80a1 	beq.w	8005f42 <_svfiprintf_r+0x1c6>
 8005e00:	2300      	movs	r3, #0
 8005e02:	f04f 32ff 	mov.w	r2, #4294967295
 8005e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e0a:	f10a 0a01 	add.w	sl, sl, #1
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	9307      	str	r3, [sp, #28]
 8005e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e16:	931a      	str	r3, [sp, #104]	; 0x68
 8005e18:	4654      	mov	r4, sl
 8005e1a:	2205      	movs	r2, #5
 8005e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e20:	4850      	ldr	r0, [pc, #320]	; (8005f64 <_svfiprintf_r+0x1e8>)
 8005e22:	f7fa fa0d 	bl	8000240 <memchr>
 8005e26:	9a04      	ldr	r2, [sp, #16]
 8005e28:	b9d8      	cbnz	r0, 8005e62 <_svfiprintf_r+0xe6>
 8005e2a:	06d0      	lsls	r0, r2, #27
 8005e2c:	bf44      	itt	mi
 8005e2e:	2320      	movmi	r3, #32
 8005e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e34:	0711      	lsls	r1, r2, #28
 8005e36:	bf44      	itt	mi
 8005e38:	232b      	movmi	r3, #43	; 0x2b
 8005e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e42:	2b2a      	cmp	r3, #42	; 0x2a
 8005e44:	d015      	beq.n	8005e72 <_svfiprintf_r+0xf6>
 8005e46:	9a07      	ldr	r2, [sp, #28]
 8005e48:	4654      	mov	r4, sl
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	f04f 0c0a 	mov.w	ip, #10
 8005e50:	4621      	mov	r1, r4
 8005e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e56:	3b30      	subs	r3, #48	; 0x30
 8005e58:	2b09      	cmp	r3, #9
 8005e5a:	d94d      	bls.n	8005ef8 <_svfiprintf_r+0x17c>
 8005e5c:	b1b0      	cbz	r0, 8005e8c <_svfiprintf_r+0x110>
 8005e5e:	9207      	str	r2, [sp, #28]
 8005e60:	e014      	b.n	8005e8c <_svfiprintf_r+0x110>
 8005e62:	eba0 0308 	sub.w	r3, r0, r8
 8005e66:	fa09 f303 	lsl.w	r3, r9, r3
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	9304      	str	r3, [sp, #16]
 8005e6e:	46a2      	mov	sl, r4
 8005e70:	e7d2      	b.n	8005e18 <_svfiprintf_r+0x9c>
 8005e72:	9b03      	ldr	r3, [sp, #12]
 8005e74:	1d19      	adds	r1, r3, #4
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	9103      	str	r1, [sp, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bfbb      	ittet	lt
 8005e7e:	425b      	neglt	r3, r3
 8005e80:	f042 0202 	orrlt.w	r2, r2, #2
 8005e84:	9307      	strge	r3, [sp, #28]
 8005e86:	9307      	strlt	r3, [sp, #28]
 8005e88:	bfb8      	it	lt
 8005e8a:	9204      	strlt	r2, [sp, #16]
 8005e8c:	7823      	ldrb	r3, [r4, #0]
 8005e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e90:	d10c      	bne.n	8005eac <_svfiprintf_r+0x130>
 8005e92:	7863      	ldrb	r3, [r4, #1]
 8005e94:	2b2a      	cmp	r3, #42	; 0x2a
 8005e96:	d134      	bne.n	8005f02 <_svfiprintf_r+0x186>
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	1d1a      	adds	r2, r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	9203      	str	r2, [sp, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bfb8      	it	lt
 8005ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ea8:	3402      	adds	r4, #2
 8005eaa:	9305      	str	r3, [sp, #20]
 8005eac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005f74 <_svfiprintf_r+0x1f8>
 8005eb0:	7821      	ldrb	r1, [r4, #0]
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	4650      	mov	r0, sl
 8005eb6:	f7fa f9c3 	bl	8000240 <memchr>
 8005eba:	b138      	cbz	r0, 8005ecc <_svfiprintf_r+0x150>
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	eba0 000a 	sub.w	r0, r0, sl
 8005ec2:	2240      	movs	r2, #64	; 0x40
 8005ec4:	4082      	lsls	r2, r0
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	3401      	adds	r4, #1
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed0:	4825      	ldr	r0, [pc, #148]	; (8005f68 <_svfiprintf_r+0x1ec>)
 8005ed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ed6:	2206      	movs	r2, #6
 8005ed8:	f7fa f9b2 	bl	8000240 <memchr>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	d038      	beq.n	8005f52 <_svfiprintf_r+0x1d6>
 8005ee0:	4b22      	ldr	r3, [pc, #136]	; (8005f6c <_svfiprintf_r+0x1f0>)
 8005ee2:	bb1b      	cbnz	r3, 8005f2c <_svfiprintf_r+0x1b0>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	3307      	adds	r3, #7
 8005ee8:	f023 0307 	bic.w	r3, r3, #7
 8005eec:	3308      	adds	r3, #8
 8005eee:	9303      	str	r3, [sp, #12]
 8005ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef2:	4433      	add	r3, r6
 8005ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef6:	e768      	b.n	8005dca <_svfiprintf_r+0x4e>
 8005ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005efc:	460c      	mov	r4, r1
 8005efe:	2001      	movs	r0, #1
 8005f00:	e7a6      	b.n	8005e50 <_svfiprintf_r+0xd4>
 8005f02:	2300      	movs	r3, #0
 8005f04:	3401      	adds	r4, #1
 8005f06:	9305      	str	r3, [sp, #20]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f04f 0c0a 	mov.w	ip, #10
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f14:	3a30      	subs	r2, #48	; 0x30
 8005f16:	2a09      	cmp	r2, #9
 8005f18:	d903      	bls.n	8005f22 <_svfiprintf_r+0x1a6>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0c6      	beq.n	8005eac <_svfiprintf_r+0x130>
 8005f1e:	9105      	str	r1, [sp, #20]
 8005f20:	e7c4      	b.n	8005eac <_svfiprintf_r+0x130>
 8005f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f26:	4604      	mov	r4, r0
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e7f0      	b.n	8005f0e <_svfiprintf_r+0x192>
 8005f2c:	ab03      	add	r3, sp, #12
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	462a      	mov	r2, r5
 8005f32:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <_svfiprintf_r+0x1f4>)
 8005f34:	a904      	add	r1, sp, #16
 8005f36:	4638      	mov	r0, r7
 8005f38:	f7fd fef2 	bl	8003d20 <_printf_float>
 8005f3c:	1c42      	adds	r2, r0, #1
 8005f3e:	4606      	mov	r6, r0
 8005f40:	d1d6      	bne.n	8005ef0 <_svfiprintf_r+0x174>
 8005f42:	89ab      	ldrh	r3, [r5, #12]
 8005f44:	065b      	lsls	r3, r3, #25
 8005f46:	f53f af2d 	bmi.w	8005da4 <_svfiprintf_r+0x28>
 8005f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f4c:	b01d      	add	sp, #116	; 0x74
 8005f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f52:	ab03      	add	r3, sp, #12
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	462a      	mov	r2, r5
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <_svfiprintf_r+0x1f4>)
 8005f5a:	a904      	add	r1, sp, #16
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f7fe f967 	bl	8004230 <_printf_i>
 8005f62:	e7eb      	b.n	8005f3c <_svfiprintf_r+0x1c0>
 8005f64:	08006a34 	.word	0x08006a34
 8005f68:	08006a3e 	.word	0x08006a3e
 8005f6c:	08003d21 	.word	0x08003d21
 8005f70:	08005cc9 	.word	0x08005cc9
 8005f74:	08006a3a 	.word	0x08006a3a

08005f78 <__sflush_r>:
 8005f78:	898a      	ldrh	r2, [r1, #12]
 8005f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7e:	4605      	mov	r5, r0
 8005f80:	0710      	lsls	r0, r2, #28
 8005f82:	460c      	mov	r4, r1
 8005f84:	d458      	bmi.n	8006038 <__sflush_r+0xc0>
 8005f86:	684b      	ldr	r3, [r1, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	dc05      	bgt.n	8005f98 <__sflush_r+0x20>
 8005f8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dc02      	bgt.n	8005f98 <__sflush_r+0x20>
 8005f92:	2000      	movs	r0, #0
 8005f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f9a:	2e00      	cmp	r6, #0
 8005f9c:	d0f9      	beq.n	8005f92 <__sflush_r+0x1a>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fa4:	682f      	ldr	r7, [r5, #0]
 8005fa6:	6a21      	ldr	r1, [r4, #32]
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	d032      	beq.n	8006012 <__sflush_r+0x9a>
 8005fac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	075a      	lsls	r2, r3, #29
 8005fb2:	d505      	bpl.n	8005fc0 <__sflush_r+0x48>
 8005fb4:	6863      	ldr	r3, [r4, #4]
 8005fb6:	1ac0      	subs	r0, r0, r3
 8005fb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fba:	b10b      	cbz	r3, 8005fc0 <__sflush_r+0x48>
 8005fbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fbe:	1ac0      	subs	r0, r0, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fc6:	6a21      	ldr	r1, [r4, #32]
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b0      	blx	r6
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	d106      	bne.n	8005fe0 <__sflush_r+0x68>
 8005fd2:	6829      	ldr	r1, [r5, #0]
 8005fd4:	291d      	cmp	r1, #29
 8005fd6:	d82b      	bhi.n	8006030 <__sflush_r+0xb8>
 8005fd8:	4a29      	ldr	r2, [pc, #164]	; (8006080 <__sflush_r+0x108>)
 8005fda:	410a      	asrs	r2, r1
 8005fdc:	07d6      	lsls	r6, r2, #31
 8005fde:	d427      	bmi.n	8006030 <__sflush_r+0xb8>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	6062      	str	r2, [r4, #4]
 8005fe4:	04d9      	lsls	r1, r3, #19
 8005fe6:	6922      	ldr	r2, [r4, #16]
 8005fe8:	6022      	str	r2, [r4, #0]
 8005fea:	d504      	bpl.n	8005ff6 <__sflush_r+0x7e>
 8005fec:	1c42      	adds	r2, r0, #1
 8005fee:	d101      	bne.n	8005ff4 <__sflush_r+0x7c>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b903      	cbnz	r3, 8005ff6 <__sflush_r+0x7e>
 8005ff4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff8:	602f      	str	r7, [r5, #0]
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	d0c9      	beq.n	8005f92 <__sflush_r+0x1a>
 8005ffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006002:	4299      	cmp	r1, r3
 8006004:	d002      	beq.n	800600c <__sflush_r+0x94>
 8006006:	4628      	mov	r0, r5
 8006008:	f7ff f9e2 	bl	80053d0 <_free_r>
 800600c:	2000      	movs	r0, #0
 800600e:	6360      	str	r0, [r4, #52]	; 0x34
 8006010:	e7c0      	b.n	8005f94 <__sflush_r+0x1c>
 8006012:	2301      	movs	r3, #1
 8006014:	4628      	mov	r0, r5
 8006016:	47b0      	blx	r6
 8006018:	1c41      	adds	r1, r0, #1
 800601a:	d1c8      	bne.n	8005fae <__sflush_r+0x36>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0c5      	beq.n	8005fae <__sflush_r+0x36>
 8006022:	2b1d      	cmp	r3, #29
 8006024:	d001      	beq.n	800602a <__sflush_r+0xb2>
 8006026:	2b16      	cmp	r3, #22
 8006028:	d101      	bne.n	800602e <__sflush_r+0xb6>
 800602a:	602f      	str	r7, [r5, #0]
 800602c:	e7b1      	b.n	8005f92 <__sflush_r+0x1a>
 800602e:	89a3      	ldrh	r3, [r4, #12]
 8006030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006034:	81a3      	strh	r3, [r4, #12]
 8006036:	e7ad      	b.n	8005f94 <__sflush_r+0x1c>
 8006038:	690f      	ldr	r7, [r1, #16]
 800603a:	2f00      	cmp	r7, #0
 800603c:	d0a9      	beq.n	8005f92 <__sflush_r+0x1a>
 800603e:	0793      	lsls	r3, r2, #30
 8006040:	680e      	ldr	r6, [r1, #0]
 8006042:	bf08      	it	eq
 8006044:	694b      	ldreq	r3, [r1, #20]
 8006046:	600f      	str	r7, [r1, #0]
 8006048:	bf18      	it	ne
 800604a:	2300      	movne	r3, #0
 800604c:	eba6 0807 	sub.w	r8, r6, r7
 8006050:	608b      	str	r3, [r1, #8]
 8006052:	f1b8 0f00 	cmp.w	r8, #0
 8006056:	dd9c      	ble.n	8005f92 <__sflush_r+0x1a>
 8006058:	6a21      	ldr	r1, [r4, #32]
 800605a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800605c:	4643      	mov	r3, r8
 800605e:	463a      	mov	r2, r7
 8006060:	4628      	mov	r0, r5
 8006062:	47b0      	blx	r6
 8006064:	2800      	cmp	r0, #0
 8006066:	dc06      	bgt.n	8006076 <__sflush_r+0xfe>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e78e      	b.n	8005f94 <__sflush_r+0x1c>
 8006076:	4407      	add	r7, r0
 8006078:	eba8 0800 	sub.w	r8, r8, r0
 800607c:	e7e9      	b.n	8006052 <__sflush_r+0xda>
 800607e:	bf00      	nop
 8006080:	dfbffffe 	.word	0xdfbffffe

08006084 <_fflush_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	690b      	ldr	r3, [r1, #16]
 8006088:	4605      	mov	r5, r0
 800608a:	460c      	mov	r4, r1
 800608c:	b913      	cbnz	r3, 8006094 <_fflush_r+0x10>
 800608e:	2500      	movs	r5, #0
 8006090:	4628      	mov	r0, r5
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	b118      	cbz	r0, 800609e <_fflush_r+0x1a>
 8006096:	6a03      	ldr	r3, [r0, #32]
 8006098:	b90b      	cbnz	r3, 800609e <_fflush_r+0x1a>
 800609a:	f7fe fa77 	bl	800458c <__sinit>
 800609e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f3      	beq.n	800608e <_fflush_r+0xa>
 80060a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060a8:	07d0      	lsls	r0, r2, #31
 80060aa:	d404      	bmi.n	80060b6 <_fflush_r+0x32>
 80060ac:	0599      	lsls	r1, r3, #22
 80060ae:	d402      	bmi.n	80060b6 <_fflush_r+0x32>
 80060b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060b2:	f7fe fb96 	bl	80047e2 <__retarget_lock_acquire_recursive>
 80060b6:	4628      	mov	r0, r5
 80060b8:	4621      	mov	r1, r4
 80060ba:	f7ff ff5d 	bl	8005f78 <__sflush_r>
 80060be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060c0:	07da      	lsls	r2, r3, #31
 80060c2:	4605      	mov	r5, r0
 80060c4:	d4e4      	bmi.n	8006090 <_fflush_r+0xc>
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	059b      	lsls	r3, r3, #22
 80060ca:	d4e1      	bmi.n	8006090 <_fflush_r+0xc>
 80060cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ce:	f7fe fb89 	bl	80047e4 <__retarget_lock_release_recursive>
 80060d2:	e7dd      	b.n	8006090 <_fflush_r+0xc>

080060d4 <memmove>:
 80060d4:	4288      	cmp	r0, r1
 80060d6:	b510      	push	{r4, lr}
 80060d8:	eb01 0402 	add.w	r4, r1, r2
 80060dc:	d902      	bls.n	80060e4 <memmove+0x10>
 80060de:	4284      	cmp	r4, r0
 80060e0:	4623      	mov	r3, r4
 80060e2:	d807      	bhi.n	80060f4 <memmove+0x20>
 80060e4:	1e43      	subs	r3, r0, #1
 80060e6:	42a1      	cmp	r1, r4
 80060e8:	d008      	beq.n	80060fc <memmove+0x28>
 80060ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060f2:	e7f8      	b.n	80060e6 <memmove+0x12>
 80060f4:	4402      	add	r2, r0
 80060f6:	4601      	mov	r1, r0
 80060f8:	428a      	cmp	r2, r1
 80060fa:	d100      	bne.n	80060fe <memmove+0x2a>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006106:	e7f7      	b.n	80060f8 <memmove+0x24>

08006108 <_sbrk_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d06      	ldr	r5, [pc, #24]	; (8006124 <_sbrk_r+0x1c>)
 800610c:	2300      	movs	r3, #0
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	f7fa ff4e 	bl	8000fb4 <_sbrk>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_sbrk_r+0x1a>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_sbrk_r+0x1a>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	200004e8 	.word	0x200004e8

08006128 <memcpy>:
 8006128:	440a      	add	r2, r1
 800612a:	4291      	cmp	r1, r2
 800612c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006130:	d100      	bne.n	8006134 <memcpy+0xc>
 8006132:	4770      	bx	lr
 8006134:	b510      	push	{r4, lr}
 8006136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800613e:	4291      	cmp	r1, r2
 8006140:	d1f9      	bne.n	8006136 <memcpy+0xe>
 8006142:	bd10      	pop	{r4, pc}

08006144 <__assert_func>:
 8006144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006146:	4614      	mov	r4, r2
 8006148:	461a      	mov	r2, r3
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <__assert_func+0x2c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4605      	mov	r5, r0
 8006150:	68d8      	ldr	r0, [r3, #12]
 8006152:	b14c      	cbz	r4, 8006168 <__assert_func+0x24>
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <__assert_func+0x30>)
 8006156:	9100      	str	r1, [sp, #0]
 8006158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800615c:	4906      	ldr	r1, [pc, #24]	; (8006178 <__assert_func+0x34>)
 800615e:	462b      	mov	r3, r5
 8006160:	f000 f872 	bl	8006248 <fiprintf>
 8006164:	f000 f882 	bl	800626c <abort>
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <__assert_func+0x38>)
 800616a:	461c      	mov	r4, r3
 800616c:	e7f3      	b.n	8006156 <__assert_func+0x12>
 800616e:	bf00      	nop
 8006170:	20000064 	.word	0x20000064
 8006174:	08006a4f 	.word	0x08006a4f
 8006178:	08006a5c 	.word	0x08006a5c
 800617c:	08006a8a 	.word	0x08006a8a

08006180 <_calloc_r>:
 8006180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006182:	fba1 2402 	umull	r2, r4, r1, r2
 8006186:	b94c      	cbnz	r4, 800619c <_calloc_r+0x1c>
 8006188:	4611      	mov	r1, r2
 800618a:	9201      	str	r2, [sp, #4]
 800618c:	f7ff f994 	bl	80054b8 <_malloc_r>
 8006190:	9a01      	ldr	r2, [sp, #4]
 8006192:	4605      	mov	r5, r0
 8006194:	b930      	cbnz	r0, 80061a4 <_calloc_r+0x24>
 8006196:	4628      	mov	r0, r5
 8006198:	b003      	add	sp, #12
 800619a:	bd30      	pop	{r4, r5, pc}
 800619c:	220c      	movs	r2, #12
 800619e:	6002      	str	r2, [r0, #0]
 80061a0:	2500      	movs	r5, #0
 80061a2:	e7f8      	b.n	8006196 <_calloc_r+0x16>
 80061a4:	4621      	mov	r1, r4
 80061a6:	f7fe fa9e 	bl	80046e6 <memset>
 80061aa:	e7f4      	b.n	8006196 <_calloc_r+0x16>

080061ac <__ascii_mbtowc>:
 80061ac:	b082      	sub	sp, #8
 80061ae:	b901      	cbnz	r1, 80061b2 <__ascii_mbtowc+0x6>
 80061b0:	a901      	add	r1, sp, #4
 80061b2:	b142      	cbz	r2, 80061c6 <__ascii_mbtowc+0x1a>
 80061b4:	b14b      	cbz	r3, 80061ca <__ascii_mbtowc+0x1e>
 80061b6:	7813      	ldrb	r3, [r2, #0]
 80061b8:	600b      	str	r3, [r1, #0]
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	1e10      	subs	r0, r2, #0
 80061be:	bf18      	it	ne
 80061c0:	2001      	movne	r0, #1
 80061c2:	b002      	add	sp, #8
 80061c4:	4770      	bx	lr
 80061c6:	4610      	mov	r0, r2
 80061c8:	e7fb      	b.n	80061c2 <__ascii_mbtowc+0x16>
 80061ca:	f06f 0001 	mvn.w	r0, #1
 80061ce:	e7f8      	b.n	80061c2 <__ascii_mbtowc+0x16>

080061d0 <_realloc_r>:
 80061d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d4:	4680      	mov	r8, r0
 80061d6:	4614      	mov	r4, r2
 80061d8:	460e      	mov	r6, r1
 80061da:	b921      	cbnz	r1, 80061e6 <_realloc_r+0x16>
 80061dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e0:	4611      	mov	r1, r2
 80061e2:	f7ff b969 	b.w	80054b8 <_malloc_r>
 80061e6:	b92a      	cbnz	r2, 80061f4 <_realloc_r+0x24>
 80061e8:	f7ff f8f2 	bl	80053d0 <_free_r>
 80061ec:	4625      	mov	r5, r4
 80061ee:	4628      	mov	r0, r5
 80061f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f4:	f000 f841 	bl	800627a <_malloc_usable_size_r>
 80061f8:	4284      	cmp	r4, r0
 80061fa:	4607      	mov	r7, r0
 80061fc:	d802      	bhi.n	8006204 <_realloc_r+0x34>
 80061fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006202:	d812      	bhi.n	800622a <_realloc_r+0x5a>
 8006204:	4621      	mov	r1, r4
 8006206:	4640      	mov	r0, r8
 8006208:	f7ff f956 	bl	80054b8 <_malloc_r>
 800620c:	4605      	mov	r5, r0
 800620e:	2800      	cmp	r0, #0
 8006210:	d0ed      	beq.n	80061ee <_realloc_r+0x1e>
 8006212:	42bc      	cmp	r4, r7
 8006214:	4622      	mov	r2, r4
 8006216:	4631      	mov	r1, r6
 8006218:	bf28      	it	cs
 800621a:	463a      	movcs	r2, r7
 800621c:	f7ff ff84 	bl	8006128 <memcpy>
 8006220:	4631      	mov	r1, r6
 8006222:	4640      	mov	r0, r8
 8006224:	f7ff f8d4 	bl	80053d0 <_free_r>
 8006228:	e7e1      	b.n	80061ee <_realloc_r+0x1e>
 800622a:	4635      	mov	r5, r6
 800622c:	e7df      	b.n	80061ee <_realloc_r+0x1e>

0800622e <__ascii_wctomb>:
 800622e:	b149      	cbz	r1, 8006244 <__ascii_wctomb+0x16>
 8006230:	2aff      	cmp	r2, #255	; 0xff
 8006232:	bf85      	ittet	hi
 8006234:	238a      	movhi	r3, #138	; 0x8a
 8006236:	6003      	strhi	r3, [r0, #0]
 8006238:	700a      	strbls	r2, [r1, #0]
 800623a:	f04f 30ff 	movhi.w	r0, #4294967295
 800623e:	bf98      	it	ls
 8006240:	2001      	movls	r0, #1
 8006242:	4770      	bx	lr
 8006244:	4608      	mov	r0, r1
 8006246:	4770      	bx	lr

08006248 <fiprintf>:
 8006248:	b40e      	push	{r1, r2, r3}
 800624a:	b503      	push	{r0, r1, lr}
 800624c:	4601      	mov	r1, r0
 800624e:	ab03      	add	r3, sp, #12
 8006250:	4805      	ldr	r0, [pc, #20]	; (8006268 <fiprintf+0x20>)
 8006252:	f853 2b04 	ldr.w	r2, [r3], #4
 8006256:	6800      	ldr	r0, [r0, #0]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	f000 f83f 	bl	80062dc <_vfiprintf_r>
 800625e:	b002      	add	sp, #8
 8006260:	f85d eb04 	ldr.w	lr, [sp], #4
 8006264:	b003      	add	sp, #12
 8006266:	4770      	bx	lr
 8006268:	20000064 	.word	0x20000064

0800626c <abort>:
 800626c:	b508      	push	{r3, lr}
 800626e:	2006      	movs	r0, #6
 8006270:	f000 fa0c 	bl	800668c <raise>
 8006274:	2001      	movs	r0, #1
 8006276:	f7fa fe25 	bl	8000ec4 <_exit>

0800627a <_malloc_usable_size_r>:
 800627a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800627e:	1f18      	subs	r0, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	bfbc      	itt	lt
 8006284:	580b      	ldrlt	r3, [r1, r0]
 8006286:	18c0      	addlt	r0, r0, r3
 8006288:	4770      	bx	lr

0800628a <__sfputc_r>:
 800628a:	6893      	ldr	r3, [r2, #8]
 800628c:	3b01      	subs	r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	b410      	push	{r4}
 8006292:	6093      	str	r3, [r2, #8]
 8006294:	da08      	bge.n	80062a8 <__sfputc_r+0x1e>
 8006296:	6994      	ldr	r4, [r2, #24]
 8006298:	42a3      	cmp	r3, r4
 800629a:	db01      	blt.n	80062a0 <__sfputc_r+0x16>
 800629c:	290a      	cmp	r1, #10
 800629e:	d103      	bne.n	80062a8 <__sfputc_r+0x1e>
 80062a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a4:	f000 b934 	b.w	8006510 <__swbuf_r>
 80062a8:	6813      	ldr	r3, [r2, #0]
 80062aa:	1c58      	adds	r0, r3, #1
 80062ac:	6010      	str	r0, [r2, #0]
 80062ae:	7019      	strb	r1, [r3, #0]
 80062b0:	4608      	mov	r0, r1
 80062b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <__sfputs_r>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	4606      	mov	r6, r0
 80062bc:	460f      	mov	r7, r1
 80062be:	4614      	mov	r4, r2
 80062c0:	18d5      	adds	r5, r2, r3
 80062c2:	42ac      	cmp	r4, r5
 80062c4:	d101      	bne.n	80062ca <__sfputs_r+0x12>
 80062c6:	2000      	movs	r0, #0
 80062c8:	e007      	b.n	80062da <__sfputs_r+0x22>
 80062ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ce:	463a      	mov	r2, r7
 80062d0:	4630      	mov	r0, r6
 80062d2:	f7ff ffda 	bl	800628a <__sfputc_r>
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	d1f3      	bne.n	80062c2 <__sfputs_r+0xa>
 80062da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080062dc <_vfiprintf_r>:
 80062dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	460d      	mov	r5, r1
 80062e2:	b09d      	sub	sp, #116	; 0x74
 80062e4:	4614      	mov	r4, r2
 80062e6:	4698      	mov	r8, r3
 80062e8:	4606      	mov	r6, r0
 80062ea:	b118      	cbz	r0, 80062f4 <_vfiprintf_r+0x18>
 80062ec:	6a03      	ldr	r3, [r0, #32]
 80062ee:	b90b      	cbnz	r3, 80062f4 <_vfiprintf_r+0x18>
 80062f0:	f7fe f94c 	bl	800458c <__sinit>
 80062f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f6:	07d9      	lsls	r1, r3, #31
 80062f8:	d405      	bmi.n	8006306 <_vfiprintf_r+0x2a>
 80062fa:	89ab      	ldrh	r3, [r5, #12]
 80062fc:	059a      	lsls	r2, r3, #22
 80062fe:	d402      	bmi.n	8006306 <_vfiprintf_r+0x2a>
 8006300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006302:	f7fe fa6e 	bl	80047e2 <__retarget_lock_acquire_recursive>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	071b      	lsls	r3, r3, #28
 800630a:	d501      	bpl.n	8006310 <_vfiprintf_r+0x34>
 800630c:	692b      	ldr	r3, [r5, #16]
 800630e:	b99b      	cbnz	r3, 8006338 <_vfiprintf_r+0x5c>
 8006310:	4629      	mov	r1, r5
 8006312:	4630      	mov	r0, r6
 8006314:	f000 f93a 	bl	800658c <__swsetup_r>
 8006318:	b170      	cbz	r0, 8006338 <_vfiprintf_r+0x5c>
 800631a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800631c:	07dc      	lsls	r4, r3, #31
 800631e:	d504      	bpl.n	800632a <_vfiprintf_r+0x4e>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	b01d      	add	sp, #116	; 0x74
 8006326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632a:	89ab      	ldrh	r3, [r5, #12]
 800632c:	0598      	lsls	r0, r3, #22
 800632e:	d4f7      	bmi.n	8006320 <_vfiprintf_r+0x44>
 8006330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006332:	f7fe fa57 	bl	80047e4 <__retarget_lock_release_recursive>
 8006336:	e7f3      	b.n	8006320 <_vfiprintf_r+0x44>
 8006338:	2300      	movs	r3, #0
 800633a:	9309      	str	r3, [sp, #36]	; 0x24
 800633c:	2320      	movs	r3, #32
 800633e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006342:	f8cd 800c 	str.w	r8, [sp, #12]
 8006346:	2330      	movs	r3, #48	; 0x30
 8006348:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80064fc <_vfiprintf_r+0x220>
 800634c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006350:	f04f 0901 	mov.w	r9, #1
 8006354:	4623      	mov	r3, r4
 8006356:	469a      	mov	sl, r3
 8006358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800635c:	b10a      	cbz	r2, 8006362 <_vfiprintf_r+0x86>
 800635e:	2a25      	cmp	r2, #37	; 0x25
 8006360:	d1f9      	bne.n	8006356 <_vfiprintf_r+0x7a>
 8006362:	ebba 0b04 	subs.w	fp, sl, r4
 8006366:	d00b      	beq.n	8006380 <_vfiprintf_r+0xa4>
 8006368:	465b      	mov	r3, fp
 800636a:	4622      	mov	r2, r4
 800636c:	4629      	mov	r1, r5
 800636e:	4630      	mov	r0, r6
 8006370:	f7ff ffa2 	bl	80062b8 <__sfputs_r>
 8006374:	3001      	adds	r0, #1
 8006376:	f000 80a9 	beq.w	80064cc <_vfiprintf_r+0x1f0>
 800637a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800637c:	445a      	add	r2, fp
 800637e:	9209      	str	r2, [sp, #36]	; 0x24
 8006380:	f89a 3000 	ldrb.w	r3, [sl]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 80a1 	beq.w	80064cc <_vfiprintf_r+0x1f0>
 800638a:	2300      	movs	r3, #0
 800638c:	f04f 32ff 	mov.w	r2, #4294967295
 8006390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006394:	f10a 0a01 	add.w	sl, sl, #1
 8006398:	9304      	str	r3, [sp, #16]
 800639a:	9307      	str	r3, [sp, #28]
 800639c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063a0:	931a      	str	r3, [sp, #104]	; 0x68
 80063a2:	4654      	mov	r4, sl
 80063a4:	2205      	movs	r2, #5
 80063a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063aa:	4854      	ldr	r0, [pc, #336]	; (80064fc <_vfiprintf_r+0x220>)
 80063ac:	f7f9 ff48 	bl	8000240 <memchr>
 80063b0:	9a04      	ldr	r2, [sp, #16]
 80063b2:	b9d8      	cbnz	r0, 80063ec <_vfiprintf_r+0x110>
 80063b4:	06d1      	lsls	r1, r2, #27
 80063b6:	bf44      	itt	mi
 80063b8:	2320      	movmi	r3, #32
 80063ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063be:	0713      	lsls	r3, r2, #28
 80063c0:	bf44      	itt	mi
 80063c2:	232b      	movmi	r3, #43	; 0x2b
 80063c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063c8:	f89a 3000 	ldrb.w	r3, [sl]
 80063cc:	2b2a      	cmp	r3, #42	; 0x2a
 80063ce:	d015      	beq.n	80063fc <_vfiprintf_r+0x120>
 80063d0:	9a07      	ldr	r2, [sp, #28]
 80063d2:	4654      	mov	r4, sl
 80063d4:	2000      	movs	r0, #0
 80063d6:	f04f 0c0a 	mov.w	ip, #10
 80063da:	4621      	mov	r1, r4
 80063dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063e0:	3b30      	subs	r3, #48	; 0x30
 80063e2:	2b09      	cmp	r3, #9
 80063e4:	d94d      	bls.n	8006482 <_vfiprintf_r+0x1a6>
 80063e6:	b1b0      	cbz	r0, 8006416 <_vfiprintf_r+0x13a>
 80063e8:	9207      	str	r2, [sp, #28]
 80063ea:	e014      	b.n	8006416 <_vfiprintf_r+0x13a>
 80063ec:	eba0 0308 	sub.w	r3, r0, r8
 80063f0:	fa09 f303 	lsl.w	r3, r9, r3
 80063f4:	4313      	orrs	r3, r2
 80063f6:	9304      	str	r3, [sp, #16]
 80063f8:	46a2      	mov	sl, r4
 80063fa:	e7d2      	b.n	80063a2 <_vfiprintf_r+0xc6>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	1d19      	adds	r1, r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	9103      	str	r1, [sp, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	bfbb      	ittet	lt
 8006408:	425b      	neglt	r3, r3
 800640a:	f042 0202 	orrlt.w	r2, r2, #2
 800640e:	9307      	strge	r3, [sp, #28]
 8006410:	9307      	strlt	r3, [sp, #28]
 8006412:	bfb8      	it	lt
 8006414:	9204      	strlt	r2, [sp, #16]
 8006416:	7823      	ldrb	r3, [r4, #0]
 8006418:	2b2e      	cmp	r3, #46	; 0x2e
 800641a:	d10c      	bne.n	8006436 <_vfiprintf_r+0x15a>
 800641c:	7863      	ldrb	r3, [r4, #1]
 800641e:	2b2a      	cmp	r3, #42	; 0x2a
 8006420:	d134      	bne.n	800648c <_vfiprintf_r+0x1b0>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	1d1a      	adds	r2, r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	9203      	str	r2, [sp, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfb8      	it	lt
 800642e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006432:	3402      	adds	r4, #2
 8006434:	9305      	str	r3, [sp, #20]
 8006436:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800650c <_vfiprintf_r+0x230>
 800643a:	7821      	ldrb	r1, [r4, #0]
 800643c:	2203      	movs	r2, #3
 800643e:	4650      	mov	r0, sl
 8006440:	f7f9 fefe 	bl	8000240 <memchr>
 8006444:	b138      	cbz	r0, 8006456 <_vfiprintf_r+0x17a>
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	eba0 000a 	sub.w	r0, r0, sl
 800644c:	2240      	movs	r2, #64	; 0x40
 800644e:	4082      	lsls	r2, r0
 8006450:	4313      	orrs	r3, r2
 8006452:	3401      	adds	r4, #1
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800645a:	4829      	ldr	r0, [pc, #164]	; (8006500 <_vfiprintf_r+0x224>)
 800645c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006460:	2206      	movs	r2, #6
 8006462:	f7f9 feed 	bl	8000240 <memchr>
 8006466:	2800      	cmp	r0, #0
 8006468:	d03f      	beq.n	80064ea <_vfiprintf_r+0x20e>
 800646a:	4b26      	ldr	r3, [pc, #152]	; (8006504 <_vfiprintf_r+0x228>)
 800646c:	bb1b      	cbnz	r3, 80064b6 <_vfiprintf_r+0x1da>
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	3307      	adds	r3, #7
 8006472:	f023 0307 	bic.w	r3, r3, #7
 8006476:	3308      	adds	r3, #8
 8006478:	9303      	str	r3, [sp, #12]
 800647a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647c:	443b      	add	r3, r7
 800647e:	9309      	str	r3, [sp, #36]	; 0x24
 8006480:	e768      	b.n	8006354 <_vfiprintf_r+0x78>
 8006482:	fb0c 3202 	mla	r2, ip, r2, r3
 8006486:	460c      	mov	r4, r1
 8006488:	2001      	movs	r0, #1
 800648a:	e7a6      	b.n	80063da <_vfiprintf_r+0xfe>
 800648c:	2300      	movs	r3, #0
 800648e:	3401      	adds	r4, #1
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	4619      	mov	r1, r3
 8006494:	f04f 0c0a 	mov.w	ip, #10
 8006498:	4620      	mov	r0, r4
 800649a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800649e:	3a30      	subs	r2, #48	; 0x30
 80064a0:	2a09      	cmp	r2, #9
 80064a2:	d903      	bls.n	80064ac <_vfiprintf_r+0x1d0>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0c6      	beq.n	8006436 <_vfiprintf_r+0x15a>
 80064a8:	9105      	str	r1, [sp, #20]
 80064aa:	e7c4      	b.n	8006436 <_vfiprintf_r+0x15a>
 80064ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80064b0:	4604      	mov	r4, r0
 80064b2:	2301      	movs	r3, #1
 80064b4:	e7f0      	b.n	8006498 <_vfiprintf_r+0x1bc>
 80064b6:	ab03      	add	r3, sp, #12
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	462a      	mov	r2, r5
 80064bc:	4b12      	ldr	r3, [pc, #72]	; (8006508 <_vfiprintf_r+0x22c>)
 80064be:	a904      	add	r1, sp, #16
 80064c0:	4630      	mov	r0, r6
 80064c2:	f7fd fc2d 	bl	8003d20 <_printf_float>
 80064c6:	4607      	mov	r7, r0
 80064c8:	1c78      	adds	r0, r7, #1
 80064ca:	d1d6      	bne.n	800647a <_vfiprintf_r+0x19e>
 80064cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ce:	07d9      	lsls	r1, r3, #31
 80064d0:	d405      	bmi.n	80064de <_vfiprintf_r+0x202>
 80064d2:	89ab      	ldrh	r3, [r5, #12]
 80064d4:	059a      	lsls	r2, r3, #22
 80064d6:	d402      	bmi.n	80064de <_vfiprintf_r+0x202>
 80064d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064da:	f7fe f983 	bl	80047e4 <__retarget_lock_release_recursive>
 80064de:	89ab      	ldrh	r3, [r5, #12]
 80064e0:	065b      	lsls	r3, r3, #25
 80064e2:	f53f af1d 	bmi.w	8006320 <_vfiprintf_r+0x44>
 80064e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064e8:	e71c      	b.n	8006324 <_vfiprintf_r+0x48>
 80064ea:	ab03      	add	r3, sp, #12
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	462a      	mov	r2, r5
 80064f0:	4b05      	ldr	r3, [pc, #20]	; (8006508 <_vfiprintf_r+0x22c>)
 80064f2:	a904      	add	r1, sp, #16
 80064f4:	4630      	mov	r0, r6
 80064f6:	f7fd fe9b 	bl	8004230 <_printf_i>
 80064fa:	e7e4      	b.n	80064c6 <_vfiprintf_r+0x1ea>
 80064fc:	08006a34 	.word	0x08006a34
 8006500:	08006a3e 	.word	0x08006a3e
 8006504:	08003d21 	.word	0x08003d21
 8006508:	080062b9 	.word	0x080062b9
 800650c:	08006a3a 	.word	0x08006a3a

08006510 <__swbuf_r>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	460e      	mov	r6, r1
 8006514:	4614      	mov	r4, r2
 8006516:	4605      	mov	r5, r0
 8006518:	b118      	cbz	r0, 8006522 <__swbuf_r+0x12>
 800651a:	6a03      	ldr	r3, [r0, #32]
 800651c:	b90b      	cbnz	r3, 8006522 <__swbuf_r+0x12>
 800651e:	f7fe f835 	bl	800458c <__sinit>
 8006522:	69a3      	ldr	r3, [r4, #24]
 8006524:	60a3      	str	r3, [r4, #8]
 8006526:	89a3      	ldrh	r3, [r4, #12]
 8006528:	071a      	lsls	r2, r3, #28
 800652a:	d525      	bpl.n	8006578 <__swbuf_r+0x68>
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	b31b      	cbz	r3, 8006578 <__swbuf_r+0x68>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	6922      	ldr	r2, [r4, #16]
 8006534:	1a98      	subs	r0, r3, r2
 8006536:	6963      	ldr	r3, [r4, #20]
 8006538:	b2f6      	uxtb	r6, r6
 800653a:	4283      	cmp	r3, r0
 800653c:	4637      	mov	r7, r6
 800653e:	dc04      	bgt.n	800654a <__swbuf_r+0x3a>
 8006540:	4621      	mov	r1, r4
 8006542:	4628      	mov	r0, r5
 8006544:	f7ff fd9e 	bl	8006084 <_fflush_r>
 8006548:	b9e0      	cbnz	r0, 8006584 <__swbuf_r+0x74>
 800654a:	68a3      	ldr	r3, [r4, #8]
 800654c:	3b01      	subs	r3, #1
 800654e:	60a3      	str	r3, [r4, #8]
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	6022      	str	r2, [r4, #0]
 8006556:	701e      	strb	r6, [r3, #0]
 8006558:	6962      	ldr	r2, [r4, #20]
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	429a      	cmp	r2, r3
 800655e:	d004      	beq.n	800656a <__swbuf_r+0x5a>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	07db      	lsls	r3, r3, #31
 8006564:	d506      	bpl.n	8006574 <__swbuf_r+0x64>
 8006566:	2e0a      	cmp	r6, #10
 8006568:	d104      	bne.n	8006574 <__swbuf_r+0x64>
 800656a:	4621      	mov	r1, r4
 800656c:	4628      	mov	r0, r5
 800656e:	f7ff fd89 	bl	8006084 <_fflush_r>
 8006572:	b938      	cbnz	r0, 8006584 <__swbuf_r+0x74>
 8006574:	4638      	mov	r0, r7
 8006576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006578:	4621      	mov	r1, r4
 800657a:	4628      	mov	r0, r5
 800657c:	f000 f806 	bl	800658c <__swsetup_r>
 8006580:	2800      	cmp	r0, #0
 8006582:	d0d5      	beq.n	8006530 <__swbuf_r+0x20>
 8006584:	f04f 37ff 	mov.w	r7, #4294967295
 8006588:	e7f4      	b.n	8006574 <__swbuf_r+0x64>
	...

0800658c <__swsetup_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4b2a      	ldr	r3, [pc, #168]	; (8006638 <__swsetup_r+0xac>)
 8006590:	4605      	mov	r5, r0
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	460c      	mov	r4, r1
 8006596:	b118      	cbz	r0, 80065a0 <__swsetup_r+0x14>
 8006598:	6a03      	ldr	r3, [r0, #32]
 800659a:	b90b      	cbnz	r3, 80065a0 <__swsetup_r+0x14>
 800659c:	f7fd fff6 	bl	800458c <__sinit>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065a6:	0718      	lsls	r0, r3, #28
 80065a8:	d422      	bmi.n	80065f0 <__swsetup_r+0x64>
 80065aa:	06d9      	lsls	r1, r3, #27
 80065ac:	d407      	bmi.n	80065be <__swsetup_r+0x32>
 80065ae:	2309      	movs	r3, #9
 80065b0:	602b      	str	r3, [r5, #0]
 80065b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065b6:	81a3      	strh	r3, [r4, #12]
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	e034      	b.n	8006628 <__swsetup_r+0x9c>
 80065be:	0758      	lsls	r0, r3, #29
 80065c0:	d512      	bpl.n	80065e8 <__swsetup_r+0x5c>
 80065c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065c4:	b141      	cbz	r1, 80065d8 <__swsetup_r+0x4c>
 80065c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065ca:	4299      	cmp	r1, r3
 80065cc:	d002      	beq.n	80065d4 <__swsetup_r+0x48>
 80065ce:	4628      	mov	r0, r5
 80065d0:	f7fe fefe 	bl	80053d0 <_free_r>
 80065d4:	2300      	movs	r3, #0
 80065d6:	6363      	str	r3, [r4, #52]	; 0x34
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065de:	81a3      	strh	r3, [r4, #12]
 80065e0:	2300      	movs	r3, #0
 80065e2:	6063      	str	r3, [r4, #4]
 80065e4:	6923      	ldr	r3, [r4, #16]
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	f043 0308 	orr.w	r3, r3, #8
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	b94b      	cbnz	r3, 8006608 <__swsetup_r+0x7c>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fe:	d003      	beq.n	8006608 <__swsetup_r+0x7c>
 8006600:	4621      	mov	r1, r4
 8006602:	4628      	mov	r0, r5
 8006604:	f000 f884 	bl	8006710 <__smakebuf_r>
 8006608:	89a0      	ldrh	r0, [r4, #12]
 800660a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800660e:	f010 0301 	ands.w	r3, r0, #1
 8006612:	d00a      	beq.n	800662a <__swsetup_r+0x9e>
 8006614:	2300      	movs	r3, #0
 8006616:	60a3      	str	r3, [r4, #8]
 8006618:	6963      	ldr	r3, [r4, #20]
 800661a:	425b      	negs	r3, r3
 800661c:	61a3      	str	r3, [r4, #24]
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	b943      	cbnz	r3, 8006634 <__swsetup_r+0xa8>
 8006622:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006626:	d1c4      	bne.n	80065b2 <__swsetup_r+0x26>
 8006628:	bd38      	pop	{r3, r4, r5, pc}
 800662a:	0781      	lsls	r1, r0, #30
 800662c:	bf58      	it	pl
 800662e:	6963      	ldrpl	r3, [r4, #20]
 8006630:	60a3      	str	r3, [r4, #8]
 8006632:	e7f4      	b.n	800661e <__swsetup_r+0x92>
 8006634:	2000      	movs	r0, #0
 8006636:	e7f7      	b.n	8006628 <__swsetup_r+0x9c>
 8006638:	20000064 	.word	0x20000064

0800663c <_raise_r>:
 800663c:	291f      	cmp	r1, #31
 800663e:	b538      	push	{r3, r4, r5, lr}
 8006640:	4604      	mov	r4, r0
 8006642:	460d      	mov	r5, r1
 8006644:	d904      	bls.n	8006650 <_raise_r+0x14>
 8006646:	2316      	movs	r3, #22
 8006648:	6003      	str	r3, [r0, #0]
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006652:	b112      	cbz	r2, 800665a <_raise_r+0x1e>
 8006654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006658:	b94b      	cbnz	r3, 800666e <_raise_r+0x32>
 800665a:	4620      	mov	r0, r4
 800665c:	f000 f830 	bl	80066c0 <_getpid_r>
 8006660:	462a      	mov	r2, r5
 8006662:	4601      	mov	r1, r0
 8006664:	4620      	mov	r0, r4
 8006666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800666a:	f000 b817 	b.w	800669c <_kill_r>
 800666e:	2b01      	cmp	r3, #1
 8006670:	d00a      	beq.n	8006688 <_raise_r+0x4c>
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	d103      	bne.n	800667e <_raise_r+0x42>
 8006676:	2316      	movs	r3, #22
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	2001      	movs	r0, #1
 800667c:	e7e7      	b.n	800664e <_raise_r+0x12>
 800667e:	2400      	movs	r4, #0
 8006680:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006684:	4628      	mov	r0, r5
 8006686:	4798      	blx	r3
 8006688:	2000      	movs	r0, #0
 800668a:	e7e0      	b.n	800664e <_raise_r+0x12>

0800668c <raise>:
 800668c:	4b02      	ldr	r3, [pc, #8]	; (8006698 <raise+0xc>)
 800668e:	4601      	mov	r1, r0
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	f7ff bfd3 	b.w	800663c <_raise_r>
 8006696:	bf00      	nop
 8006698:	20000064 	.word	0x20000064

0800669c <_kill_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4d07      	ldr	r5, [pc, #28]	; (80066bc <_kill_r+0x20>)
 80066a0:	2300      	movs	r3, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	4608      	mov	r0, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	f7fa fbfb 	bl	8000ea4 <_kill>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	d102      	bne.n	80066b8 <_kill_r+0x1c>
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	b103      	cbz	r3, 80066b8 <_kill_r+0x1c>
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	bf00      	nop
 80066bc:	200004e8 	.word	0x200004e8

080066c0 <_getpid_r>:
 80066c0:	f7fa bbe8 	b.w	8000e94 <_getpid>

080066c4 <__swhatbuf_r>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	460c      	mov	r4, r1
 80066c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066cc:	2900      	cmp	r1, #0
 80066ce:	b096      	sub	sp, #88	; 0x58
 80066d0:	4615      	mov	r5, r2
 80066d2:	461e      	mov	r6, r3
 80066d4:	da0d      	bge.n	80066f2 <__swhatbuf_r+0x2e>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066dc:	f04f 0100 	mov.w	r1, #0
 80066e0:	bf0c      	ite	eq
 80066e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80066e6:	2340      	movne	r3, #64	; 0x40
 80066e8:	2000      	movs	r0, #0
 80066ea:	6031      	str	r1, [r6, #0]
 80066ec:	602b      	str	r3, [r5, #0]
 80066ee:	b016      	add	sp, #88	; 0x58
 80066f0:	bd70      	pop	{r4, r5, r6, pc}
 80066f2:	466a      	mov	r2, sp
 80066f4:	f000 f848 	bl	8006788 <_fstat_r>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	dbec      	blt.n	80066d6 <__swhatbuf_r+0x12>
 80066fc:	9901      	ldr	r1, [sp, #4]
 80066fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006702:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006706:	4259      	negs	r1, r3
 8006708:	4159      	adcs	r1, r3
 800670a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800670e:	e7eb      	b.n	80066e8 <__swhatbuf_r+0x24>

08006710 <__smakebuf_r>:
 8006710:	898b      	ldrh	r3, [r1, #12]
 8006712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006714:	079d      	lsls	r5, r3, #30
 8006716:	4606      	mov	r6, r0
 8006718:	460c      	mov	r4, r1
 800671a:	d507      	bpl.n	800672c <__smakebuf_r+0x1c>
 800671c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	6123      	str	r3, [r4, #16]
 8006724:	2301      	movs	r3, #1
 8006726:	6163      	str	r3, [r4, #20]
 8006728:	b002      	add	sp, #8
 800672a:	bd70      	pop	{r4, r5, r6, pc}
 800672c:	ab01      	add	r3, sp, #4
 800672e:	466a      	mov	r2, sp
 8006730:	f7ff ffc8 	bl	80066c4 <__swhatbuf_r>
 8006734:	9900      	ldr	r1, [sp, #0]
 8006736:	4605      	mov	r5, r0
 8006738:	4630      	mov	r0, r6
 800673a:	f7fe febd 	bl	80054b8 <_malloc_r>
 800673e:	b948      	cbnz	r0, 8006754 <__smakebuf_r+0x44>
 8006740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006744:	059a      	lsls	r2, r3, #22
 8006746:	d4ef      	bmi.n	8006728 <__smakebuf_r+0x18>
 8006748:	f023 0303 	bic.w	r3, r3, #3
 800674c:	f043 0302 	orr.w	r3, r3, #2
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	e7e3      	b.n	800671c <__smakebuf_r+0xc>
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	6020      	str	r0, [r4, #0]
 8006758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800675c:	81a3      	strh	r3, [r4, #12]
 800675e:	9b00      	ldr	r3, [sp, #0]
 8006760:	6163      	str	r3, [r4, #20]
 8006762:	9b01      	ldr	r3, [sp, #4]
 8006764:	6120      	str	r0, [r4, #16]
 8006766:	b15b      	cbz	r3, 8006780 <__smakebuf_r+0x70>
 8006768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800676c:	4630      	mov	r0, r6
 800676e:	f000 f81d 	bl	80067ac <_isatty_r>
 8006772:	b128      	cbz	r0, 8006780 <__smakebuf_r+0x70>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	f023 0303 	bic.w	r3, r3, #3
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	431d      	orrs	r5, r3
 8006784:	81a5      	strh	r5, [r4, #12]
 8006786:	e7cf      	b.n	8006728 <__smakebuf_r+0x18>

08006788 <_fstat_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	; (80067a8 <_fstat_r+0x20>)
 800678c:	2300      	movs	r3, #0
 800678e:	4604      	mov	r4, r0
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	602b      	str	r3, [r5, #0]
 8006796:	f7fa fbe4 	bl	8000f62 <_fstat>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d102      	bne.n	80067a4 <_fstat_r+0x1c>
 800679e:	682b      	ldr	r3, [r5, #0]
 80067a0:	b103      	cbz	r3, 80067a4 <_fstat_r+0x1c>
 80067a2:	6023      	str	r3, [r4, #0]
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
 80067a6:	bf00      	nop
 80067a8:	200004e8 	.word	0x200004e8

080067ac <_isatty_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d06      	ldr	r5, [pc, #24]	; (80067c8 <_isatty_r+0x1c>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	f7fa fbe3 	bl	8000f82 <_isatty>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_isatty_r+0x1a>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_isatty_r+0x1a>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	200004e8 	.word	0x200004e8

080067cc <_init>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr

080067d8 <_fini>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr
