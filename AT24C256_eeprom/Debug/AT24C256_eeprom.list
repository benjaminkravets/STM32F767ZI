
AT24C256_eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d8  080032d8  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032e0  080032e0  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032e0  080032e0  000132e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080032e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000050  08003338  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003338  00020194  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008838  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001847  00000000  00000000  000288f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  0002a140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c8  00000000  00000000  0002a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002664a  00000000  00000000  0002aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aaf5  00000000  00000000  000514fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecc61  00000000  00000000  0005bfef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e4c  00000000  00000000  00148c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0014aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000050 	.word	0x20000050
 8000214:	00000000 	.word	0x00000000
 8000218:	080032b0 	.word	0x080032b0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000054 	.word	0x20000054
 8000234:	080032b0 	.word	0x080032b0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	80fb      	strh	r3, [r7, #6]
 8000550:	4613      	mov	r3, r2
 8000552:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 8000554:	88fa      	ldrh	r2, [r7, #6]
 8000556:	88bb      	ldrh	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	2b3f      	cmp	r3, #63	; 0x3f
 800055c:	dc01      	bgt.n	8000562 <bytestowrite+0x1e>
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	e003      	b.n	800056a <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 8000562:	88bb      	ldrh	r3, [r7, #4]
 8000564:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000568:	b29b      	uxth	r3, r3
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <EEPROM_Write>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08e      	sub	sp, #56	; 0x38
 800057c:	af04      	add	r7, sp, #16
 800057e:	60ba      	str	r2, [r7, #8]
 8000580:	461a      	mov	r2, r3
 8000582:	4603      	mov	r3, r0
 8000584:	81fb      	strh	r3, [r7, #14]
 8000586:	460b      	mov	r3, r1
 8000588:	81bb      	strh	r3, [r7, #12]
 800058a:	4613      	mov	r3, r2
 800058c:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 800058e:	2306      	movs	r3, #6
 8000590:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8000592:	89fb      	ldrh	r3, [r7, #14]
 8000594:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8000596:	88fa      	ldrh	r2, [r7, #6]
 8000598:	89bb      	ldrh	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <EEPROM_Write+0x2a>
 80005a0:	333f      	adds	r3, #63	; 0x3f
 80005a2:	119b      	asrs	r3, r3, #6
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	89fb      	ldrh	r3, [r7, #14]
 80005a8:	4413      	add	r3, r2
 80005aa:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 80005ac:	8b7a      	ldrh	r2, [r7, #26]
 80005ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	3301      	adds	r3, #1
 80005b6:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i=0; i<numofpages; i++)
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
 80005c0:	e034      	b.n	800062c <EEPROM_Write+0xb4>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80005c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	b21a      	sxth	r2, r3
 80005cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b21b      	sxth	r3, r3
 80005d4:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80005d6:	89ba      	ldrh	r2, [r7, #12]
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	4611      	mov	r1, r2
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffb1 	bl	8000544 <bytestowrite>
 80005e2:	4603      	mov	r3, r0
 80005e4:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 80005e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	4413      	add	r3, r2
 80005ec:	8af9      	ldrh	r1, [r7, #22]
 80005ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f2:	9202      	str	r2, [sp, #8]
 80005f4:	8aba      	ldrh	r2, [r7, #20]
 80005f6:	9201      	str	r2, [sp, #4]
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2302      	movs	r3, #2
 80005fc:	460a      	mov	r2, r1
 80005fe:	21a0      	movs	r1, #160	; 0xa0
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <EEPROM_Write+0xc8>)
 8000602:	f001 f803 	bl	800160c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8000606:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000608:	3301      	adds	r3, #1
 800060a:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;   // since we will be writing to a new page, so offset will be 0
 800060c:	2300      	movs	r3, #0
 800060e:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;  // reduce the size of the bytes
 8000610:	88fa      	ldrh	r2, [r7, #6]
 8000612:	8abb      	ldrh	r3, [r7, #20]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8000618:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800061a:	8abb      	ldrh	r3, [r7, #20]
 800061c:	4413      	add	r3, r2
 800061e:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay (5);  // Write cycle delay (5ms)
 8000620:	2005      	movs	r0, #5
 8000622:	f000 fc79 	bl	8000f18 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 8000626:	6a3b      	ldr	r3, [r7, #32]
 8000628:	3301      	adds	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
 800062c:	8b3b      	ldrh	r3, [r7, #24]
 800062e:	6a3a      	ldr	r2, [r7, #32]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbc6      	blt.n	80005c2 <EEPROM_Write+0x4a>
	}
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3728      	adds	r7, #40	; 0x28
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000070 	.word	0x20000070

08000644 <float2Bytes>:

void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	ed87 0a00 	vstr	s0, [r7]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8000654:	2300      	movs	r3, #0
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	e00b      	b.n	8000672 <float2Bytes+0x2e>
      ftoa_bytes_temp[i] = thing.bytes[i];
 800065a:	7bfa      	ldrb	r2, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	440b      	add	r3, r1
 8000662:	3210      	adds	r2, #16
 8000664:	443a      	add	r2, r7
 8000666:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800066a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3301      	adds	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d9f0      	bls.n	800065a <float2Bytes+0x16>
    }

}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8000686:	b480      	push	{r7}
 8000688:	b087      	sub	sp, #28
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]
 8000692:	e00b      	b.n	80006ac <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	441a      	add	r2, r3
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	7812      	ldrb	r2, [r2, #0]
 800069e:	3318      	adds	r3, #24
 80006a0:	443b      	add	r3, r7
 80006a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	3301      	adds	r3, #1
 80006aa:	75fb      	strb	r3, [r7, #23]
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d9f0      	bls.n	8000694 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	613b      	str	r3, [r7, #16]
   return float_variable;
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	ee07 3a90 	vmov	s15, r3
}
 80006bc:	eeb0 0a67 	vmov.f32	s0, s15
 80006c0:	371c      	adds	r7, #28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <EEPROM_Write_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the float/integer value that you want to write
 */

void EEPROM_Write_NUM (uint16_t page, uint16_t offset, float data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	460a      	mov	r2, r1
 80006d6:	ed87 0a00 	vstr	s0, [r7]
 80006da:	80fb      	strh	r3, [r7, #6]
 80006dc:	4613      	mov	r3, r2
 80006de:	80bb      	strh	r3, [r7, #4]

	float2Bytes(bytes_temp, data);
 80006e0:	ed97 0a00 	vldr	s0, [r7]
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <EEPROM_Write_NUM+0x34>)
 80006e6:	f7ff ffad 	bl	8000644 <float2Bytes>

	EEPROM_Write(page, offset, bytes_temp, 4);
 80006ea:	88b9      	ldrh	r1, [r7, #4]
 80006ec:	88f8      	ldrh	r0, [r7, #6]
 80006ee:	2304      	movs	r3, #4
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <EEPROM_Write_NUM+0x34>)
 80006f2:	f7ff ff41 	bl	8000578 <EEPROM_Write>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000006c 	.word	0x2000006c

08000704 <EEPROM_Read_NUM>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @returns the float/integer value
 */

float EEPROM_Read_NUM (uint16_t page, uint16_t offset)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	80fb      	strh	r3, [r7, #6]
 8000710:	4613      	mov	r3, r2
 8000712:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[4];

	EEPROM_Read(page, offset, buffer, 4);
 8000714:	f107 020c 	add.w	r2, r7, #12
 8000718:	88b9      	ldrh	r1, [r7, #4]
 800071a:	88f8      	ldrh	r0, [r7, #6]
 800071c:	2304      	movs	r3, #4
 800071e:	f000 f80d 	bl	800073c <EEPROM_Read>

	return (Bytes2float(buffer));
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffad 	bl	8000686 <Bytes2float>
 800072c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000730:	eeb0 0a67 	vmov.f32	s0, s15
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af04      	add	r7, sp, #16
 8000742:	60ba      	str	r2, [r7, #8]
 8000744:	461a      	mov	r2, r3
 8000746:	4603      	mov	r3, r0
 8000748:	81fb      	strh	r3, [r7, #14]
 800074a:	460b      	mov	r3, r1
 800074c:	81bb      	strh	r3, [r7, #12]
 800074e:	4613      	mov	r3, r2
 8000750:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000752:	2306      	movs	r3, #6
 8000754:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000756:	89fb      	ldrh	r3, [r7, #14]
 8000758:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800075a:	88fa      	ldrh	r2, [r7, #6]
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	da00      	bge.n	8000766 <EEPROM_Read+0x2a>
 8000764:	333f      	adds	r3, #63	; 0x3f
 8000766:	119b      	asrs	r3, r3, #6
 8000768:	b29a      	uxth	r2, r3
 800076a:	89fb      	ldrh	r3, [r7, #14]
 800076c:	4413      	add	r3, r2
 800076e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000770:	8b7a      	ldrh	r2, [r7, #26]
 8000772:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	b29b      	uxth	r3, r3
 8000778:	3301      	adds	r3, #1
 800077a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800077c:	2300      	movs	r3, #0
 800077e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
 8000784:	e031      	b.n	80007ea <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000786:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	b21a      	sxth	r2, r3
 8000790:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000794:	4313      	orrs	r3, r2
 8000796:	b21b      	sxth	r3, r3
 8000798:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800079a:	89ba      	ldrh	r2, [r7, #12]
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fecf 	bl	8000544 <bytestowrite>
 80007a6:	4603      	mov	r3, r0
 80007a8:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80007aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	4413      	add	r3, r2
 80007b0:	8af9      	ldrh	r1, [r7, #22]
 80007b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b6:	9202      	str	r2, [sp, #8]
 80007b8:	8aba      	ldrh	r2, [r7, #20]
 80007ba:	9201      	str	r2, [sp, #4]
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2302      	movs	r3, #2
 80007c0:	460a      	mov	r2, r1
 80007c2:	21a0      	movs	r1, #160	; 0xa0
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <EEPROM_Read+0xc0>)
 80007c6:	f001 f835 	bl	8001834 <HAL_I2C_Mem_Read>
		startPage += 1;
 80007ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007cc:	3301      	adds	r3, #1
 80007ce:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80007d4:	88fa      	ldrh	r2, [r7, #6]
 80007d6:	8abb      	ldrh	r3, [r7, #20]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80007dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80007de:	8abb      	ldrh	r3, [r7, #20]
 80007e0:	4413      	add	r3, r2
 80007e2:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 80007e4:	6a3b      	ldr	r3, [r7, #32]
 80007e6:	3301      	adds	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
 80007ea:	8b3b      	ldrh	r3, [r7, #24]
 80007ec:	6a3a      	ldr	r2, [r7, #32]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbc9      	blt.n	8000786 <EEPROM_Read+0x4a>
	}
}
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000070 	.word	0x20000070

08000800 <EEPROM_PageErase>:
/* Erase a page in the EEPROM Memory
 * @page is the number of page to erase
 * In order to erase multiple pages, just use this function in the for loop
 */
void EEPROM_PageErase (uint16_t page)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b098      	sub	sp, #96	; 0x60
 8000804:	af04      	add	r7, sp, #16
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE)/log(2);
 800080a:	2306      	movs	r3, #6
 800080c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page<<paddrposition;
 800080e:	88fa      	ldrh	r2, [r7, #6]
 8000810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2240      	movs	r2, #64	; 0x40
 8000820:	21ff      	movs	r1, #255	; 0xff
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fd18 	bl	8003258 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 1000);
 8000828:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800082c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2340      	movs	r3, #64	; 0x40
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2302      	movs	r3, #2
 800083e:	21a0      	movs	r1, #160	; 0xa0
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <EEPROM_PageErase+0x54>)
 8000842:	f000 fee3 	bl	800160c <HAL_I2C_Mem_Write>

	HAL_Delay (5);  // write cycle delay
 8000846:	2005      	movs	r0, #5
 8000848:	f000 fb66 	bl	8000f18 <HAL_Delay>
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	; 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000070 	.word	0x20000070

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 fafe 	bl	8000e5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f85d 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f000 f8f5 	bl	8000a54 <MX_GPIO_Init>
  MX_I2C1_Init();
 800086a:	f000 f8b5 	bl	80009d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  for (int i=0; i<512; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	e007      	b.n	8000884 <main+0x2c>
  {
	  EEPROM_PageErase(i);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	b29b      	uxth	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffc1 	bl	8000800 <EEPROM_PageErase>
  for (int i=0; i<512; i++)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3301      	adds	r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800088a:	dbf3      	blt.n	8000874 <main+0x1c>
  }

  EEPROM_Write(3, 0, dataw1, strlen((char *)dataw1));
 800088c:	481d      	ldr	r0, [pc, #116]	; (8000904 <main+0xac>)
 800088e:	f7ff fcd3 	bl	8000238 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	b29b      	uxth	r3, r3
 8000896:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <main+0xac>)
 8000898:	2100      	movs	r1, #0
 800089a:	2003      	movs	r0, #3
 800089c:	f7ff fe6c 	bl	8000578 <EEPROM_Write>

  EEPROM_Write(5, 20, dataw2, strlen((char *)dataw2));
 80008a0:	4819      	ldr	r0, [pc, #100]	; (8000908 <main+0xb0>)
 80008a2:	f7ff fcc9 	bl	8000238 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <main+0xb0>)
 80008ac:	2114      	movs	r1, #20
 80008ae:	2005      	movs	r0, #5
 80008b0:	f7ff fe62 	bl	8000578 <EEPROM_Write>

  EEPROM_Write_NUM (6, 0, dataw3);
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <main+0xb4>)
 80008b6:	edd3 7a00 	vldr	s15, [r3]
 80008ba:	eeb0 0a67 	vmov.f32	s0, s15
 80008be:	2100      	movs	r1, #0
 80008c0:	2006      	movs	r0, #6
 80008c2:	f7ff ff03 	bl	80006cc <EEPROM_Write_NUM>


  EEPROM_Read(3, 0, datar1, 50);
 80008c6:	2332      	movs	r3, #50	; 0x32
 80008c8:	4a11      	ldr	r2, [pc, #68]	; (8000910 <main+0xb8>)
 80008ca:	2100      	movs	r1, #0
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff ff35 	bl	800073c <EEPROM_Read>

  EEPROM_Read(5, 15, datar2, 50);
 80008d2:	2332      	movs	r3, #50	; 0x32
 80008d4:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <main+0xbc>)
 80008d6:	210f      	movs	r1, #15
 80008d8:	2005      	movs	r0, #5
 80008da:	f7ff ff2f 	bl	800073c <EEPROM_Read>

  datar3 = EEPROM_Read_NUM (6, 0);
 80008de:	2100      	movs	r1, #0
 80008e0:	2006      	movs	r0, #6
 80008e2:	f7ff ff0f 	bl	8000704 <EEPROM_Read_NUM>
 80008e6:	eef0 7a40 	vmov.f32	s15, s0
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <main+0xc0>)
 80008ec:	edc3 7a00 	vstr	s15, [r3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 80008f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f4:	f000 fb10 	bl	8000f18 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	4808      	ldr	r0, [pc, #32]	; (800091c <main+0xc4>)
 80008fc:	f000 fddb 	bl	80014b6 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000900:	e7f6      	b.n	80008f0 <main+0x98>
 8000902:	bf00      	nop
 8000904:	20000000 	.word	0x20000000
 8000908:	20000018 	.word	0x20000018
 800090c:	20000040 	.word	0x20000040
 8000910:	200000c4 	.word	0x200000c4
 8000914:	20000128 	.word	0x20000128
 8000918:	2000018c 	.word	0x2000018c
 800091c:	40020400 	.word	0x40020400

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2234      	movs	r2, #52	; 0x34
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fc92 	bl	8003258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <SystemClock_Config+0xb0>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <SystemClock_Config+0xb0>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <SystemClock_Config+0xb0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <SystemClock_Config+0xb4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <SystemClock_Config+0xb4>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <SystemClock_Config+0xb4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4618      	mov	r0, r3
 800098e:	f001 fb9d 	bl	80020cc <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000998:	f000 f972 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fe35 	bl	8002628 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80009c4:	f000 f95c 	bl	8000c80 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3750      	adds	r7, #80	; 0x50
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <MX_I2C1_Init+0x78>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009e4:	f240 220b 	movw	r2, #523	; 0x20b
 80009e8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a16:	f000 fd69 	bl	80014ec <HAL_I2C_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a20:	f000 f92e 	bl	8000c80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4809      	ldr	r0, [pc, #36]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a28:	f001 fab8 	bl	8001f9c <HAL_I2CEx_ConfigAnalogFilter>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a32:	f000 f925 	bl	8000c80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_I2C1_Init+0x74>)
 8000a3a:	f001 fafa 	bl	8002032 <HAL_I2CEx_ConfigDigitalFilter>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a44:	f000 f91c 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000070 	.word	0x20000070
 8000a50:	40005400 	.word	0x40005400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b7f      	ldr	r3, [pc, #508]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a7e      	ldr	r2, [pc, #504]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b7c      	ldr	r3, [pc, #496]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b79      	ldr	r3, [pc, #484]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a78      	ldr	r2, [pc, #480]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b76      	ldr	r3, [pc, #472]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b73      	ldr	r3, [pc, #460]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a72      	ldr	r2, [pc, #456]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b70      	ldr	r3, [pc, #448]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b6d      	ldr	r3, [pc, #436]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a6c      	ldr	r2, [pc, #432]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b6a      	ldr	r3, [pc, #424]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b67      	ldr	r3, [pc, #412]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a66      	ldr	r2, [pc, #408]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b64      	ldr	r3, [pc, #400]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b61      	ldr	r3, [pc, #388]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a60      	ldr	r2, [pc, #384]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b5e      	ldr	r3, [pc, #376]	; (8000c68 <MX_GPIO_Init+0x214>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b00:	485a      	ldr	r0, [pc, #360]	; (8000c6c <MX_GPIO_Init+0x218>)
 8000b02:	f000 fcbf 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2140      	movs	r1, #64	; 0x40
 8000b0a:	4859      	ldr	r0, [pc, #356]	; (8000c70 <MX_GPIO_Init+0x21c>)
 8000b0c:	f000 fcba 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4853      	ldr	r0, [pc, #332]	; (8000c74 <MX_GPIO_Init+0x220>)
 8000b28:	f000 fb00 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b2c:	2332      	movs	r3, #50	; 0x32
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	484b      	ldr	r0, [pc, #300]	; (8000c74 <MX_GPIO_Init+0x220>)
 8000b48:	f000 faf0 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b4c:	2386      	movs	r3, #134	; 0x86
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5c:	230b      	movs	r3, #11
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4844      	ldr	r0, [pc, #272]	; (8000c78 <MX_GPIO_Init+0x224>)
 8000b68:	f000 fae0 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b6c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4839      	ldr	r0, [pc, #228]	; (8000c6c <MX_GPIO_Init+0x218>)
 8000b86:	f000 fad1 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4831      	ldr	r0, [pc, #196]	; (8000c6c <MX_GPIO_Init+0x218>)
 8000ba8:	f000 fac0 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482c      	ldr	r0, [pc, #176]	; (8000c7c <MX_GPIO_Init+0x228>)
 8000bca:	f000 faaf 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bce:	2340      	movs	r3, #64	; 0x40
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4822      	ldr	r0, [pc, #136]	; (8000c70 <MX_GPIO_Init+0x21c>)
 8000be6:	f000 faa1 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	; (8000c70 <MX_GPIO_Init+0x21c>)
 8000bfe:	f000 fa95 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c02:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c14:	230a      	movs	r3, #10
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4816      	ldr	r0, [pc, #88]	; (8000c78 <MX_GPIO_Init+0x224>)
 8000c20:	f000 fa84 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	480f      	ldr	r0, [pc, #60]	; (8000c78 <MX_GPIO_Init+0x224>)
 8000c3a:	f000 fa77 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c50:	230b      	movs	r3, #11
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_GPIO_Init+0x21c>)
 8000c5c:	f000 fa66 	bl	800112c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c60:	bf00      	nop
 8000c62:	3730      	adds	r7, #48	; 0x30
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40021800 	.word	0x40021800
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020c00 	.word	0x40020c00

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_MspInit+0x44>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0ae      	sub	sp, #184	; 0xb8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2290      	movs	r2, #144	; 0x90
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 faaf 	bl	8003258 <memset>
  if(hi2c->Instance==I2C1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <HAL_I2C_MspInit+0xb4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d13c      	bne.n	8000d7e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fe78 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d1e:	f7ff ffaf 	bl	8000c80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <HAL_I2C_MspInit+0xb8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_I2C_MspInit+0xb8>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_I2C_MspInit+0xb8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d42:	2312      	movs	r3, #18
 8000d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d54:	2304      	movs	r3, #4
 8000d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <HAL_I2C_MspInit+0xbc>)
 8000d62:	f000 f9e3 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_I2C_MspInit+0xb8>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_I2C_MspInit+0xb8>)
 8000d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_I2C_MspInit+0xb8>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	37b8      	adds	r7, #184	; 0xb8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f87a 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e28:	4c0b      	ldr	r4, [pc, #44]	; (8000e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e36:	f7ff ffd7 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f002 fa15 	bl	8003268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fd0b 	bl	8000858 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000e50:	080032e8 	.word	0x080032e8
  ldr r2, =_sbss
 8000e54:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000e58:	20000194 	.word	0x20000194

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>

08000e5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e62:	2003      	movs	r0, #3
 8000e64:	f000 f92e 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f000 f805 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6e:	f7ff ff0d 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f93b 	bl	8001112 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f911 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000044 	.word	0x20000044
 8000ed0:	2000004c 	.word	0x2000004c
 8000ed4:	20000048 	.word	0x20000048

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000004c 	.word	0x2000004c
 8000efc:	20000190 	.word	0x20000190

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000190 	.word	0x20000190

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000004c 	.word	0x2000004c

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	05fa0000 	.word	0x05fa0000

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff47 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff5c 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffb0 	bl	8001080 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e175      	b.n	8001438 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 8164 	bne.w	8001432 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_GPIO_Init+0x56>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d130      	bne.n	80011e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 0201 	and.w	r2, r3, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d017      	beq.n	8001220 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80be 	beq.w	8001432 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b66      	ldr	r3, [pc, #408]	; (8001450 <HAL_GPIO_Init+0x324>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a65      	ldr	r2, [pc, #404]	; (8001450 <HAL_GPIO_Init+0x324>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b63      	ldr	r3, [pc, #396]	; (8001450 <HAL_GPIO_Init+0x324>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012ce:	4a61      	ldr	r2, [pc, #388]	; (8001454 <HAL_GPIO_Init+0x328>)
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_GPIO_Init+0x32c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d037      	beq.n	800136a <HAL_GPIO_Init+0x23e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a57      	ldr	r2, [pc, #348]	; (800145c <HAL_GPIO_Init+0x330>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d031      	beq.n	8001366 <HAL_GPIO_Init+0x23a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a56      	ldr	r2, [pc, #344]	; (8001460 <HAL_GPIO_Init+0x334>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d02b      	beq.n	8001362 <HAL_GPIO_Init+0x236>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a55      	ldr	r2, [pc, #340]	; (8001464 <HAL_GPIO_Init+0x338>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d025      	beq.n	800135e <HAL_GPIO_Init+0x232>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a54      	ldr	r2, [pc, #336]	; (8001468 <HAL_GPIO_Init+0x33c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01f      	beq.n	800135a <HAL_GPIO_Init+0x22e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a53      	ldr	r2, [pc, #332]	; (800146c <HAL_GPIO_Init+0x340>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0x22a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a52      	ldr	r2, [pc, #328]	; (8001470 <HAL_GPIO_Init+0x344>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x226>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a51      	ldr	r2, [pc, #324]	; (8001474 <HAL_GPIO_Init+0x348>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x222>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a50      	ldr	r2, [pc, #320]	; (8001478 <HAL_GPIO_Init+0x34c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x21e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_GPIO_Init+0x350>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x21a>
 8001342:	2309      	movs	r3, #9
 8001344:	e012      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001346:	230a      	movs	r3, #10
 8001348:	e010      	b.n	800136c <HAL_GPIO_Init+0x240>
 800134a:	2308      	movs	r3, #8
 800134c:	e00e      	b.n	800136c <HAL_GPIO_Init+0x240>
 800134e:	2307      	movs	r3, #7
 8001350:	e00c      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001352:	2306      	movs	r3, #6
 8001354:	e00a      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001356:	2305      	movs	r3, #5
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x240>
 800135a:	2304      	movs	r3, #4
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x240>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x240>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x240>
 800136a:	2300      	movs	r3, #0
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <HAL_GPIO_Init+0x328>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_GPIO_Init+0x354>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ae:	4a34      	ldr	r2, [pc, #208]	; (8001480 <HAL_GPIO_Init+0x354>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_GPIO_Init+0x354>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d8:	4a29      	ldr	r2, [pc, #164]	; (8001480 <HAL_GPIO_Init+0x354>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_GPIO_Init+0x354>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <HAL_GPIO_Init+0x354>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_GPIO_Init+0x354>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_GPIO_Init+0x354>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f ae86 	bls.w	800114c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40021400 	.word	0x40021400
 8001470:	40021800 	.word	0x40021800
 8001474:	40021c00 	.word	0x40021c00
 8001478:	40022000 	.word	0x40022000
 800147c:	40022400 	.word	0x40022400
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b085      	sub	sp, #20
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c8:	887a      	ldrh	r2, [r7, #2]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4013      	ands	r3, r2
 80014ce:	041a      	lsls	r2, r3, #16
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	887b      	ldrh	r3, [r7, #2]
 80014d6:	400b      	ands	r3, r1
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e07f      	b.n	80015fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fbde 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2224      	movs	r2, #36	; 0x24
 800151c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0201 	bic.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800153c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800154c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d107      	bne.n	8001566 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	e006      	b.n	8001574 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001572:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d104      	bne.n	8001586 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001584:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_I2C_Init+0x11c>)
 8001592:	430b      	orrs	r3, r1
 8001594:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69d9      	ldr	r1, [r3, #28]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1a      	ldr	r2, [r3, #32]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2220      	movs	r2, #32
 80015ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	02008000 	.word	0x02008000

0800160c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	4608      	mov	r0, r1
 8001616:	4611      	mov	r1, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4603      	mov	r3, r0
 800161c:	817b      	strh	r3, [r7, #10]
 800161e:	460b      	mov	r3, r1
 8001620:	813b      	strh	r3, [r7, #8]
 8001622:	4613      	mov	r3, r2
 8001624:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b20      	cmp	r3, #32
 8001630:	f040 80f9 	bne.w	8001826 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_I2C_Mem_Write+0x34>
 800163a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001646:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0ed      	b.n	8001828 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_I2C_Mem_Write+0x4e>
 8001656:	2302      	movs	r3, #2
 8001658:	e0e6      	b.n	8001828 <HAL_I2C_Mem_Write+0x21c>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001662:	f7ff fc4d 	bl	8000f00 <HAL_GetTick>
 8001666:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2319      	movs	r3, #25
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 fac3 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0d1      	b.n	8001828 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2221      	movs	r2, #33	; 0x21
 8001688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016ac:	88f8      	ldrh	r0, [r7, #6]
 80016ae:	893a      	ldrh	r2, [r7, #8]
 80016b0:	8979      	ldrh	r1, [r7, #10]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4603      	mov	r3, r0
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 f9d3 	bl	8001a68 <I2C_RequestMemoryWrite>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0a9      	b.n	8001828 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2bff      	cmp	r3, #255	; 0xff
 80016dc:	d90e      	bls.n	80016fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	22ff      	movs	r2, #255	; 0xff
 80016e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	8979      	ldrh	r1, [r7, #10]
 80016ec:	2300      	movs	r3, #0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 fc1f 	bl	8001f38 <I2C_TransferConfig>
 80016fa:	e00f      	b.n	800171c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170a:	b2da      	uxtb	r2, r3
 800170c:	8979      	ldrh	r1, [r7, #10]
 800170e:	2300      	movs	r3, #0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 fc0e 	bl	8001f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 faad 	bl	8001c80 <I2C_WaitOnTXISFlagUntilTimeout>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e07b      	b.n	8001828 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d034      	beq.n	80017d4 <HAL_I2C_Mem_Write+0x1c8>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	2b00      	cmp	r3, #0
 8001770:	d130      	bne.n	80017d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001778:	2200      	movs	r2, #0
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 fa3f 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e04d      	b.n	8001828 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2bff      	cmp	r3, #255	; 0xff
 8001794:	d90e      	bls.n	80017b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	22ff      	movs	r2, #255	; 0xff
 800179a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	8979      	ldrh	r1, [r7, #10]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 fbc3 	bl	8001f38 <I2C_TransferConfig>
 80017b2:	e00f      	b.n	80017d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	8979      	ldrh	r1, [r7, #10]
 80017c6:	2300      	movs	r3, #0
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 fbb2 	bl	8001f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d19e      	bne.n	800171c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa8c 	bl	8001d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e01a      	b.n	8001828 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2220      	movs	r2, #32
 80017f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_I2C_Mem_Write+0x224>)
 8001806:	400b      	ands	r3, r1
 8001808:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2220      	movs	r2, #32
 800180e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001826:	2302      	movs	r3, #2
  }
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	fe00e800 	.word	0xfe00e800

08001834 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af02      	add	r7, sp, #8
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	817b      	strh	r3, [r7, #10]
 8001846:	460b      	mov	r3, r1
 8001848:	813b      	strh	r3, [r7, #8]
 800184a:	4613      	mov	r3, r2
 800184c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b20      	cmp	r3, #32
 8001858:	f040 80fd 	bne.w	8001a56 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_I2C_Mem_Read+0x34>
 8001862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001864:	2b00      	cmp	r3, #0
 8001866:	d105      	bne.n	8001874 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0f1      	b.n	8001a58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_I2C_Mem_Read+0x4e>
 800187e:	2302      	movs	r3, #2
 8001880:	e0ea      	b.n	8001a58 <HAL_I2C_Mem_Read+0x224>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800188a:	f7ff fb39 	bl	8000f00 <HAL_GetTick>
 800188e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2319      	movs	r3, #25
 8001896:	2201      	movs	r2, #1
 8001898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f9af 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0d5      	b.n	8001a58 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2222      	movs	r2, #34	; 0x22
 80018b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2240      	movs	r2, #64	; 0x40
 80018b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6a3a      	ldr	r2, [r7, #32]
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018d4:	88f8      	ldrh	r0, [r7, #6]
 80018d6:	893a      	ldrh	r2, [r7, #8]
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4603      	mov	r3, r0
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f913 	bl	8001b10 <I2C_RequestMemoryRead>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0ad      	b.n	8001a58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001900:	b29b      	uxth	r3, r3
 8001902:	2bff      	cmp	r3, #255	; 0xff
 8001904:	d90e      	bls.n	8001924 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	22ff      	movs	r2, #255	; 0xff
 800190a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001910:	b2da      	uxtb	r2, r3
 8001912:	8979      	ldrh	r1, [r7, #10]
 8001914:	4b52      	ldr	r3, [pc, #328]	; (8001a60 <HAL_I2C_Mem_Read+0x22c>)
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 fb0b 	bl	8001f38 <I2C_TransferConfig>
 8001922:	e00f      	b.n	8001944 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	b2da      	uxtb	r2, r3
 8001934:	8979      	ldrh	r1, [r7, #10]
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_I2C_Mem_Read+0x22c>)
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fafa 	bl	8001f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194a:	2200      	movs	r2, #0
 800194c:	2104      	movs	r1, #4
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f956 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e07c      	b.n	8001a58 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001986:	b29b      	uxth	r3, r3
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d034      	beq.n	8001a04 <HAL_I2C_Mem_Read+0x1d0>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d130      	bne.n	8001a04 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a8:	2200      	movs	r2, #0
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f927 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e04d      	b.n	8001a58 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2bff      	cmp	r3, #255	; 0xff
 80019c4:	d90e      	bls.n	80019e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	22ff      	movs	r2, #255	; 0xff
 80019ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	8979      	ldrh	r1, [r7, #10]
 80019d4:	2300      	movs	r3, #0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 faab 	bl	8001f38 <I2C_TransferConfig>
 80019e2:	e00f      	b.n	8001a04 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	8979      	ldrh	r1, [r7, #10]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fa9a 	bl	8001f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d19a      	bne.n	8001944 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f974 	bl	8001d00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e01a      	b.n	8001a58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2220      	movs	r2, #32
 8001a28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_I2C_Mem_Read+0x230>)
 8001a36:	400b      	ands	r3, r1
 8001a38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
  }
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	80002400 	.word	0x80002400
 8001a64:	fe00e800 	.word	0xfe00e800

08001a68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	8979      	ldrh	r1, [r7, #10]
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <I2C_RequestMemoryWrite+0xa4>)
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fa51 	bl	8001f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	69b9      	ldr	r1, [r7, #24]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f8f0 	bl	8001c80 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e02c      	b.n	8001b04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ab0:	893b      	ldrh	r3, [r7, #8]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
 8001aba:	e015      	b.n	8001ae8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001abc:	893b      	ldrh	r3, [r7, #8]
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	69b9      	ldr	r1, [r7, #24]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f8d6 	bl	8001c80 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e012      	b.n	8001b04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ade:	893b      	ldrh	r3, [r7, #8]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2200      	movs	r2, #0
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f884 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	80002000 	.word	0x80002000

08001b10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	4608      	mov	r0, r1
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4603      	mov	r3, r0
 8001b20:	817b      	strh	r3, [r7, #10]
 8001b22:	460b      	mov	r3, r1
 8001b24:	813b      	strh	r3, [r7, #8]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	8979      	ldrh	r1, [r7, #10]
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <I2C_RequestMemoryRead+0xa4>)
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f9fe 	bl	8001f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f89d 	bl	8001c80 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e02c      	b.n	8001baa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d105      	bne.n	8001b62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b56:	893b      	ldrh	r3, [r7, #8]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b60:	e015      	b.n	8001b8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b62:	893b      	ldrh	r3, [r7, #8]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 f883 	bl	8001c80 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e012      	b.n	8001baa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b84:	893b      	ldrh	r3, [r7, #8]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2200      	movs	r2, #0
 8001b96:	2140      	movs	r1, #64	; 0x40
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f831 	bl	8001c00 <I2C_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	80002000 	.word	0x80002000

08001bb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d103      	bne.n	8001bd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d007      	beq.n	8001bf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	619a      	str	r2, [r3, #24]
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c10:	e022      	b.n	8001c58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d01e      	beq.n	8001c58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1a:	f7ff f971 	bl	8000f00 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d113      	bne.n	8001c58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e00f      	b.n	8001c78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4013      	ands	r3, r2
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d0cd      	beq.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c8c:	e02c      	b.n	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f870 	bl	8001d78 <I2C_IsErrorOccurred>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e02a      	b.n	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d01e      	beq.n	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001caa:	f7ff f929 	bl	8000f00 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d302      	bcc.n	8001cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d113      	bne.n	8001ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e007      	b.n	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d1cb      	bne.n	8001c8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d0c:	e028      	b.n	8001d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f830 	bl	8001d78 <I2C_IsErrorOccurred>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e026      	b.n	8001d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d22:	f7ff f8ed 	bl	8000f00 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d302      	bcc.n	8001d38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d113      	bne.n	8001d60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	f043 0220 	orr.w	r2, r3, #32
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e007      	b.n	8001d70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d1cf      	bne.n	8001d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d068      	beq.n	8001e76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2210      	movs	r2, #16
 8001daa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dac:	e049      	b.n	8001e42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d045      	beq.n	8001e42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7ff f8a3 	bl	8000f00 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <I2C_IsErrorOccurred+0x54>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d13a      	bne.n	8001e42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dee:	d121      	bne.n	8001e34 <I2C_IsErrorOccurred+0xbc>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df6:	d01d      	beq.n	8001e34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d01a      	beq.n	8001e34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e0e:	f7ff f877 	bl	8000f00 <HAL_GetTick>
 8001e12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e14:	e00e      	b.n	8001e34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e16:	f7ff f873 	bl	8000f00 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b19      	cmp	r3, #25
 8001e22:	d907      	bls.n	8001e34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f043 0320 	orr.w	r3, r3, #32
 8001e2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001e32:	e006      	b.n	8001e42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d1e9      	bne.n	8001e16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d003      	beq.n	8001e58 <I2C_IsErrorOccurred+0xe0>
 8001e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0aa      	beq.n	8001dae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d103      	bne.n	8001e68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00b      	beq.n	8001ea0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01c      	beq.n	8001f26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fe63 	bl	8001bb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <I2C_IsErrorOccurred+0x1bc>)
 8001efe:	400b      	ands	r3, r1
 8001f00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	fe00e800 	.word	0xfe00e800

08001f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	817b      	strh	r3, [r7, #10]
 8001f46:	4613      	mov	r3, r2
 8001f48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f4a:	897b      	ldrh	r3, [r7, #10]
 8001f4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f50:	7a7b      	ldrb	r3, [r7, #9]
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	0d5b      	lsrs	r3, r3, #21
 8001f72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <I2C_TransferConfig+0x60>)
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	ea02 0103 	and.w	r1, r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f8a:	bf00      	nop
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	03ff63ff 	.word	0x03ff63ff

08001f9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d138      	bne.n	8002024 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e032      	b.n	8002026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6819      	ldr	r1, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002024:	2302      	movs	r3, #2
  }
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b20      	cmp	r3, #32
 8002046:	d139      	bne.n	80020bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002052:	2302      	movs	r3, #2
 8002054:	e033      	b.n	80020be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2224      	movs	r2, #36	; 0x24
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002084:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e29b      	b.n	800261a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b96      	ldr	r3, [pc, #600]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00c      	beq.n	8002116 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fc:	4b93      	ldr	r3, [pc, #588]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d112      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
 8002108:	4b90      	ldr	r3, [pc, #576]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b8d      	ldr	r3, [pc, #564]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d06c      	beq.n	80021fc <HAL_RCC_OscConfig+0x130>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d168      	bne.n	80021fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e275      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x7a>
 8002138:	4b84      	ldr	r3, [pc, #528]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a83      	ldr	r2, [pc, #524]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x9c>
 800214e:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7e      	ldr	r2, [pc, #504]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b7c      	ldr	r3, [pc, #496]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7b      	ldr	r2, [pc, #492]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xc0>
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a75      	ldr	r2, [pc, #468]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b73      	ldr	r3, [pc, #460]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a72      	ldr	r2, [pc, #456]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd8>
 800218c:	4b6f      	ldr	r3, [pc, #444]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b6c      	ldr	r3, [pc, #432]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a6b      	ldr	r2, [pc, #428]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fea8 	bl	8000f00 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe fea4 	bl	8000f00 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e229      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe8>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe fe94 	bl	8000f00 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7fe fe90 	bl	8000f00 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e215      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b57      	ldr	r3, [pc, #348]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x110>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d069      	beq.n	80022de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b4d      	ldr	r3, [pc, #308]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x190>
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x17a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1e9      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	493d      	ldr	r1, [pc, #244]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e040      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d023      	beq.n	80022ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b39      	ldr	r3, [pc, #228]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a38      	ldr	r2, [pc, #224]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fe46 	bl	8000f00 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7fe fe42 	bl	8000f00 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1c7      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4929      	ldr	r1, [pc, #164]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
 80022aa:	e018      	b.n	80022de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fe22 	bl	8000f00 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe fe1e 	bl	8000f00 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1a3      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d038      	beq.n	800235c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d019      	beq.n	8002326 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_RCC_OscConfig+0x280>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7fe fdff 	bl	8000f00 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe fdfb 	bl	8000f00 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e180      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800231a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x23a>
 8002324:	e01a      	b.n	800235c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_OscConfig+0x280>)
 8002328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232a:	4a08      	ldr	r2, [pc, #32]	; (800234c <HAL_RCC_OscConfig+0x280>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fde5 	bl	8000f00 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233a:	f7fe fde1 	bl	8000f00 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d903      	bls.n	8002350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e166      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
 800234c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b92      	ldr	r3, [pc, #584]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a4 	beq.w	80024b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b8c      	ldr	r3, [pc, #560]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a88      	ldr	r2, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b86      	ldr	r3, [pc, #536]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002392:	4b83      	ldr	r3, [pc, #524]	; (80025a0 <HAL_RCC_OscConfig+0x4d4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800239e:	4b80      	ldr	r3, [pc, #512]	; (80025a0 <HAL_RCC_OscConfig+0x4d4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7f      	ldr	r2, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0x4d4>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fda9 	bl	8000f00 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7fe fda5 	bl	8000f00 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e12a      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c4:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x4d4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x31a>
 80023d8:	4b70      	ldr	r3, [pc, #448]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a6f      	ldr	r2, [pc, #444]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
 80023e4:	e02d      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x33c>
 80023ee:	4b6b      	ldr	r3, [pc, #428]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a6a      	ldr	r2, [pc, #424]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
 80023fa:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a67      	ldr	r2, [pc, #412]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	e01c      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b05      	cmp	r3, #5
 800240e:	d10c      	bne.n	800242a <HAL_RCC_OscConfig+0x35e>
 8002410:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a61      	ldr	r2, [pc, #388]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	4b5f      	ldr	r3, [pc, #380]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	4a5e      	ldr	r2, [pc, #376]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	; 0x70
 8002428:	e00b      	b.n	8002442 <HAL_RCC_OscConfig+0x376>
 800242a:	4b5c      	ldr	r3, [pc, #368]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a5b      	ldr	r2, [pc, #364]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a58      	ldr	r2, [pc, #352]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800243c:	f023 0304 	bic.w	r3, r3, #4
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d015      	beq.n	8002476 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe fd59 	bl	8000f00 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fd55 	bl	8000f00 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0d8      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ee      	beq.n	8002452 <HAL_RCC_OscConfig+0x386>
 8002474:	e014      	b.n	80024a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7fe fd43 	bl	8000f00 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fd3f 	bl	8000f00 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0c2      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d105      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a3c      	ldr	r2, [pc, #240]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80ae 	beq.w	8002618 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d06d      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d14b      	bne.n	8002568 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a31      	ldr	r2, [pc, #196]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe fd10 	bl	8000f00 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fd0c 	bl	8000f00 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e091      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	019b      	lsls	r3, r3, #6
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	3b01      	subs	r3, #1
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	071b      	lsls	r3, r3, #28
 800252e:	491b      	ldr	r1, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a18      	ldr	r2, [pc, #96]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800253a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fcde 	bl	8000f00 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fcda 	bl	8000f00 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e05f      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x47c>
 8002566:	e057      	b.n	8002618 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 800256e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fcc4 	bl	8000f00 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fcc0 	bl	8000f00 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e045      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCC_OscConfig+0x4d0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x4b0>
 800259a:	e03d      	b.n	8002618 <HAL_RCC_OscConfig+0x54c>
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_RCC_OscConfig+0x558>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d030      	beq.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d129      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d122      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025dc:	4293      	cmp	r3, r2
 80025de:	d119      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	3b01      	subs	r3, #1
 80025ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d10f      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0d0      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	4965      	ldr	r1, [pc, #404]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800268e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	494d      	ldr	r1, [pc, #308]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d040      	beq.n	800274c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d115      	bne.n	800270a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e07f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e073      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e06b      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4936      	ldr	r1, [pc, #216]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271c:	f7fe fbf0 	bl	8000f00 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe fbec 	bl	8000f00 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e053      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d210      	bcs.n	800277c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 020f 	bic.w	r2, r3, #15
 8002762:	4922      	ldr	r1, [pc, #136]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e032      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4916      	ldr	r1, [pc, #88]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490e      	ldr	r1, [pc, #56]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ba:	f000 f821 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	490a      	ldr	r1, [pc, #40]	; (80027f4 <HAL_RCC_ClockConfig+0x1cc>)
 80027cc:	5ccb      	ldrb	r3, [r1, r3]
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1d0>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x1d4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fb4c 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00
 80027f0:	40023800 	.word	0x40023800
 80027f4:	080032c8 	.word	0x080032c8
 80027f8:	20000044 	.word	0x20000044
 80027fc:	20000048 	.word	0x20000048

08002800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002804:	b094      	sub	sp, #80	; 0x50
 8002806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
 800280c:	2300      	movs	r3, #0
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002810:	2300      	movs	r3, #0
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002818:	4b79      	ldr	r3, [pc, #484]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d00d      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x40>
 8002824:	2b08      	cmp	r3, #8
 8002826:	f200 80e1 	bhi.w	80029ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x34>
 800282e:	2b04      	cmp	r3, #4
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x3a>
 8002832:	e0db      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b73      	ldr	r3, [pc, #460]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x204>)
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002838:	e0db      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800283a:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x204>)
 800283c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283e:	e0d8      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002840:	4b6f      	ldr	r3, [pc, #444]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002848:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d063      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002856:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	2200      	movs	r2, #0
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002860:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
 800286a:	2300      	movs	r3, #0
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
 800286e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002872:	4622      	mov	r2, r4
 8002874:	462b      	mov	r3, r5
 8002876:	f04f 0000 	mov.w	r0, #0
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	0159      	lsls	r1, r3, #5
 8002880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002884:	0150      	lsls	r0, r2, #5
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4621      	mov	r1, r4
 800288c:	1a51      	subs	r1, r2, r1
 800288e:	6139      	str	r1, [r7, #16]
 8002890:	4629      	mov	r1, r5
 8002892:	eb63 0301 	sbc.w	r3, r3, r1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028a4:	4659      	mov	r1, fp
 80028a6:	018b      	lsls	r3, r1, #6
 80028a8:	4651      	mov	r1, sl
 80028aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ae:	4651      	mov	r1, sl
 80028b0:	018a      	lsls	r2, r1, #6
 80028b2:	4651      	mov	r1, sl
 80028b4:	ebb2 0801 	subs.w	r8, r2, r1
 80028b8:	4659      	mov	r1, fp
 80028ba:	eb63 0901 	sbc.w	r9, r3, r1
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d2:	4690      	mov	r8, r2
 80028d4:	4699      	mov	r9, r3
 80028d6:	4623      	mov	r3, r4
 80028d8:	eb18 0303 	adds.w	r3, r8, r3
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	462b      	mov	r3, r5
 80028e0:	eb49 0303 	adc.w	r3, r9, r3
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028f2:	4629      	mov	r1, r5
 80028f4:	028b      	lsls	r3, r1, #10
 80028f6:	4621      	mov	r1, r4
 80028f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028fc:	4621      	mov	r1, r4
 80028fe:	028a      	lsls	r2, r1, #10
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002906:	2200      	movs	r2, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800290c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002910:	f7fd fc9a 	bl	8000248 <__aeabi_uldivmod>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4613      	mov	r3, r2
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800291c:	e058      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	2200      	movs	r2, #0
 8002926:	4618      	mov	r0, r3
 8002928:	4611      	mov	r1, r2
 800292a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002938:	4642      	mov	r2, r8
 800293a:	464b      	mov	r3, r9
 800293c:	f04f 0000 	mov.w	r0, #0
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	0159      	lsls	r1, r3, #5
 8002946:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294a:	0150      	lsls	r0, r2, #5
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4641      	mov	r1, r8
 8002952:	ebb2 0a01 	subs.w	sl, r2, r1
 8002956:	4649      	mov	r1, r9
 8002958:	eb63 0b01 	sbc.w	fp, r3, r1
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002968:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800296c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002970:	ebb2 040a 	subs.w	r4, r2, sl
 8002974:	eb63 050b 	sbc.w	r5, r3, fp
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	00eb      	lsls	r3, r5, #3
 8002982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002986:	00e2      	lsls	r2, r4, #3
 8002988:	4614      	mov	r4, r2
 800298a:	461d      	mov	r5, r3
 800298c:	4643      	mov	r3, r8
 800298e:	18e3      	adds	r3, r4, r3
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	464b      	mov	r3, r9
 8002994:	eb45 0303 	adc.w	r3, r5, r3
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a6:	4629      	mov	r1, r5
 80029a8:	028b      	lsls	r3, r1, #10
 80029aa:	4621      	mov	r1, r4
 80029ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b0:	4621      	mov	r1, r4
 80029b2:	028a      	lsls	r2, r1, #10
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ba:	2200      	movs	r2, #0
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	61fa      	str	r2, [r7, #28]
 80029c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029c4:	f7fd fc40 	bl	8000248 <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4613      	mov	r3, r2
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	3301      	adds	r3, #1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ea:	e002      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3750      	adds	r7, #80	; 0x50
 80029f8:	46bd      	mov	sp, r7
 80029fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	00f42400 	.word	0x00f42400

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a30:	4b69      	ldr	r3, [pc, #420]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a68      	ldr	r2, [pc, #416]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a3a:	6093      	str	r3, [r2, #8]
 8002a3c:	4b66      	ldr	r3, [pc, #408]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a44:	4964      	ldr	r1, [pc, #400]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d017      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a62:	4b5d      	ldr	r3, [pc, #372]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	4959      	ldr	r1, [pc, #356]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a80:	d101      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d017      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a9e:	4b4e      	ldr	r3, [pc, #312]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	494a      	ldr	r1, [pc, #296]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 808b 	beq.w	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	4a39      	ldr	r2, [pc, #228]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6413      	str	r3, [r2, #64]	; 0x40
 8002af8:	4b37      	ldr	r3, [pc, #220]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b04:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b10:	f7fe f9f6 	bl	8000f00 <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7fe f9f2 	bl	8000f00 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e38f      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b36:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d035      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d02e      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b54:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6a:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d114      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe f9ba 	bl	8000f00 <HAL_GetTick>
 8002b8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe f9b6 	bl	8000f00 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e351      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0ee      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bbe:	d111      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bce:	400b      	ands	r3, r1
 8002bd0:	4901      	ldr	r1, [pc, #4]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	0ffffcff 	.word	0x0ffffcff
 8002be4:	4bac      	ldr	r3, [pc, #688]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4aab      	ldr	r2, [pc, #684]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bee:	6093      	str	r3, [r2, #8]
 8002bf0:	4ba9      	ldr	r3, [pc, #676]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	49a6      	ldr	r1, [pc, #664]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c0e:	4ba2      	ldr	r3, [pc, #648]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c14:	4aa0      	ldr	r2, [pc, #640]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c1e:	4b9e      	ldr	r3, [pc, #632]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	499b      	ldr	r1, [pc, #620]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c3c:	4b96      	ldr	r3, [pc, #600]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4a:	4993      	ldr	r1, [pc, #588]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c5e:	4b8e      	ldr	r3, [pc, #568]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c6c:	498a      	ldr	r1, [pc, #552]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c80:	4b85      	ldr	r3, [pc, #532]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8e:	4982      	ldr	r1, [pc, #520]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ca2:	4b7d      	ldr	r3, [pc, #500]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4979      	ldr	r1, [pc, #484]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cc4:	4b74      	ldr	r3, [pc, #464]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	4971      	ldr	r1, [pc, #452]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ce6:	4b6c      	ldr	r3, [pc, #432]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	f023 020c 	bic.w	r2, r3, #12
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	4968      	ldr	r1, [pc, #416]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d08:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	4960      	ldr	r1, [pc, #384]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d2a:	4b5b      	ldr	r3, [pc, #364]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d38:	4957      	ldr	r1, [pc, #348]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d4c:	4b52      	ldr	r3, [pc, #328]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	494f      	ldr	r1, [pc, #316]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7c:	4946      	ldr	r1, [pc, #280]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d90:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	493e      	ldr	r1, [pc, #248]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002db2:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc0:	4935      	ldr	r1, [pc, #212]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002dd4:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de2:	492d      	ldr	r1, [pc, #180]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d011      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e04:	4924      	ldr	r1, [pc, #144]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e14:	d101      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e44:	4914      	ldr	r1, [pc, #80]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e68:	490b      	ldr	r1, [pc, #44]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00f      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8c:	4902      	ldr	r1, [pc, #8]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e94:	e002      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ea8:	4b8a      	ldr	r3, [pc, #552]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	4986      	ldr	r1, [pc, #536]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ecc:	4b81      	ldr	r3, [pc, #516]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002edc:	497d      	ldr	r1, [pc, #500]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d006      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80d6 	beq.w	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ef8:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a75      	ldr	r2, [pc, #468]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fd fffc 	bl	8000f00 <HAL_GetTick>
 8002f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f0c:	f7fd fff8 	bl	8000f00 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e195      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f1e:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d021      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11d      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f3e:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f4c:	4b61      	ldr	r3, [pc, #388]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f52:	0e1b      	lsrs	r3, r3, #24
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	019a      	lsls	r2, r3, #6
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	071b      	lsls	r3, r3, #28
 8002f72:	4958      	ldr	r1, [pc, #352]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d004      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02e      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa4:	d129      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fa6:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fb4:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fba:	0f1b      	lsrs	r3, r3, #28
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	019a      	lsls	r2, r3, #6
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	493e      	ldr	r1, [pc, #248]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fe2:	4b3c      	ldr	r3, [pc, #240]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe8:	f023 021f 	bic.w	r2, r3, #31
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	4938      	ldr	r1, [pc, #224]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01d      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003006:	4b33      	ldr	r3, [pc, #204]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300c:	0e1b      	lsrs	r3, r3, #24
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003014:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301a:	0f1b      	lsrs	r3, r3, #28
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	019a      	lsls	r2, r3, #6
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	041b      	lsls	r3, r3, #16
 800302e:	431a      	orrs	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	061b      	lsls	r3, r3, #24
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	4926      	ldr	r1, [pc, #152]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d011      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	019a      	lsls	r2, r3, #6
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	491a      	ldr	r1, [pc, #104]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800307c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307e:	f7fd ff3f 	bl	8000f00 <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003086:	f7fd ff3b 	bl	8000f00 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b64      	cmp	r3, #100	; 0x64
 8003092:	d901      	bls.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0d8      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	f040 80ce 	bne.w	8003248 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b8:	f7fd ff22 	bl	8000f00 <HAL_GetTick>
 80030bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030be:	e00b      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030c0:	f7fd ff1e 	bl	8000f00 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d904      	bls.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0bb      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030d8:	4b5e      	ldr	r3, [pc, #376]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030e4:	d0ec      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d009      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003102:	2b00      	cmp	r3, #0
 8003104:	d02e      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d12a      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800310e:	4b51      	ldr	r3, [pc, #324]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	0c1b      	lsrs	r3, r3, #16
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	0f1b      	lsrs	r3, r3, #28
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	019a      	lsls	r2, r3, #6
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	061b      	lsls	r3, r3, #24
 800313c:	431a      	orrs	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	071b      	lsls	r3, r3, #28
 8003142:	4944      	ldr	r1, [pc, #272]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800314a:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003150:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	493d      	ldr	r1, [pc, #244]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d022      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003178:	d11d      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	0e1b      	lsrs	r3, r3, #24
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003188:	4b32      	ldr	r3, [pc, #200]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	0f1b      	lsrs	r3, r3, #28
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	019a      	lsls	r2, r3, #6
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	431a      	orrs	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	061b      	lsls	r3, r3, #24
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	071b      	lsls	r3, r3, #28
 80031ae:	4929      	ldr	r1, [pc, #164]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d028      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031c2:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	0e1b      	lsrs	r3, r3, #24
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	0c1b      	lsrs	r3, r3, #16
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	019a      	lsls	r2, r3, #6
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	041b      	lsls	r3, r3, #16
 80031e8:	431a      	orrs	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	071b      	lsls	r3, r3, #28
 80031f6:	4917      	ldr	r1, [pc, #92]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4911      	ldr	r1, [pc, #68]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fd fe6e 	bl	8000f00 <HAL_GetTick>
 8003224:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003228:	f7fd fe6a 	bl	8000f00 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e007      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003246:	d1ef      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800

08003258 <memset>:
 8003258:	4402      	add	r2, r0
 800325a:	4603      	mov	r3, r0
 800325c:	4293      	cmp	r3, r2
 800325e:	d100      	bne.n	8003262 <memset+0xa>
 8003260:	4770      	bx	lr
 8003262:	f803 1b01 	strb.w	r1, [r3], #1
 8003266:	e7f9      	b.n	800325c <memset+0x4>

08003268 <__libc_init_array>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	4d0d      	ldr	r5, [pc, #52]	; (80032a0 <__libc_init_array+0x38>)
 800326c:	4c0d      	ldr	r4, [pc, #52]	; (80032a4 <__libc_init_array+0x3c>)
 800326e:	1b64      	subs	r4, r4, r5
 8003270:	10a4      	asrs	r4, r4, #2
 8003272:	2600      	movs	r6, #0
 8003274:	42a6      	cmp	r6, r4
 8003276:	d109      	bne.n	800328c <__libc_init_array+0x24>
 8003278:	4d0b      	ldr	r5, [pc, #44]	; (80032a8 <__libc_init_array+0x40>)
 800327a:	4c0c      	ldr	r4, [pc, #48]	; (80032ac <__libc_init_array+0x44>)
 800327c:	f000 f818 	bl	80032b0 <_init>
 8003280:	1b64      	subs	r4, r4, r5
 8003282:	10a4      	asrs	r4, r4, #2
 8003284:	2600      	movs	r6, #0
 8003286:	42a6      	cmp	r6, r4
 8003288:	d105      	bne.n	8003296 <__libc_init_array+0x2e>
 800328a:	bd70      	pop	{r4, r5, r6, pc}
 800328c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003290:	4798      	blx	r3
 8003292:	3601      	adds	r6, #1
 8003294:	e7ee      	b.n	8003274 <__libc_init_array+0xc>
 8003296:	f855 3b04 	ldr.w	r3, [r5], #4
 800329a:	4798      	blx	r3
 800329c:	3601      	adds	r6, #1
 800329e:	e7f2      	b.n	8003286 <__libc_init_array+0x1e>
 80032a0:	080032e0 	.word	0x080032e0
 80032a4:	080032e0 	.word	0x080032e0
 80032a8:	080032e0 	.word	0x080032e0
 80032ac:	080032e4 	.word	0x080032e4

080032b0 <_init>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	bf00      	nop
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr

080032bc <_fini>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	bf00      	nop
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr
