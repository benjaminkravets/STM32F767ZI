
AT24C256_eeprom_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000581c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08005a20  08005a20  00015a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dac  08005dac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db4  08005db4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001d4  08005f90  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08005f90  00020420  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5c9  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b11  00000000  00000000  0002c80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000807  00000000  00000000  0002ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000029bc  00000000  00000000  0002f587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e13e  00000000  00000000  00031f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3d9e  00000000  00000000  00040081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003844  00000000  00000000  00133e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00137664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08005a04 	.word	0x08005a04

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08005a04 	.word	0x08005a04

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fc2b 	bl	8000e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f812 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f8da 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005fc:	f000 f86a 	bl	80006d4 <MX_I2C1_Init>
  MX_UART4_Init();
 8000600:	f000 f8a6 	bl	8000750 <MX_UART4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <main+0x2c>)
 8000608:	f000 ff4b 	bl	80014a2 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800060c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000610:	f000 fc78 	bl	8000f04 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000614:	e7f6      	b.n	8000604 <main+0x18>
 8000616:	bf00      	nop
 8000618:	40020400 	.word	0x40020400

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2234      	movs	r2, #52	; 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fb1f 	bl	8003c6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xb0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xb0>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xb0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <SystemClock_Config+0xb4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <SystemClock_Config+0xb4>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <SystemClock_Config+0xb4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f84d 	bl	8001728 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000694:	f000 f9a2 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fae5 	bl	8001c84 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006c0:	f000 f98c 	bl	80009dc <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	f240 220b 	movw	r2, #523	; 0x20b
 80006e4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_I2C1_Init+0x74>)
 8000712:	f000 fee1 	bl	80014d8 <HAL_I2C_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800071c:	f000 f95e 	bl	80009dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C1_Init+0x74>)
 8000724:	f000 ff68 	bl	80015f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800072e:	f000 f955 	bl	80009dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x74>)
 8000736:	f000 ffaa 	bl	800168e <HAL_I2CEx_ConfigDigitalFilter>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000740:	f000 f94c 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200001f0 	.word	0x200001f0
 800074c:	40005400 	.word	0x40005400

08000750 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_UART4_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_UART4_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_UART4_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_UART4_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_UART4_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_UART4_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_UART4_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_UART4_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_UART4_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_UART4_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_UART4_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_UART4_Init+0x58>)
 8000794:	f002 f8c2 	bl	800291c <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f91d 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000244 	.word	0x20000244
 80007ac:	40004c00 	.word	0x40004c00

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b7f      	ldr	r3, [pc, #508]	; (80009c4 <MX_GPIO_Init+0x214>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a7e      	ldr	r2, [pc, #504]	; (80009c4 <MX_GPIO_Init+0x214>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b7c      	ldr	r3, [pc, #496]	; (80009c4 <MX_GPIO_Init+0x214>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	4b79      	ldr	r3, [pc, #484]	; (80009c4 <MX_GPIO_Init+0x214>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a78      	ldr	r2, [pc, #480]	; (80009c4 <MX_GPIO_Init+0x214>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b76      	ldr	r3, [pc, #472]	; (80009c4 <MX_GPIO_Init+0x214>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b73      	ldr	r3, [pc, #460]	; (80009c4 <MX_GPIO_Init+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a72      	ldr	r2, [pc, #456]	; (80009c4 <MX_GPIO_Init+0x214>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b70      	ldr	r3, [pc, #448]	; (80009c4 <MX_GPIO_Init+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b6d      	ldr	r3, [pc, #436]	; (80009c4 <MX_GPIO_Init+0x214>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a6c      	ldr	r2, [pc, #432]	; (80009c4 <MX_GPIO_Init+0x214>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b6a      	ldr	r3, [pc, #424]	; (80009c4 <MX_GPIO_Init+0x214>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	4b67      	ldr	r3, [pc, #412]	; (80009c4 <MX_GPIO_Init+0x214>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a66      	ldr	r2, [pc, #408]	; (80009c4 <MX_GPIO_Init+0x214>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b64      	ldr	r3, [pc, #400]	; (80009c4 <MX_GPIO_Init+0x214>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800083e:	4b61      	ldr	r3, [pc, #388]	; (80009c4 <MX_GPIO_Init+0x214>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a60      	ldr	r2, [pc, #384]	; (80009c4 <MX_GPIO_Init+0x214>)
 8000844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b5e      	ldr	r3, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x214>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f244 0181 	movw	r1, #16513	; 0x4081
 800085c:	485a      	ldr	r0, [pc, #360]	; (80009c8 <MX_GPIO_Init+0x218>)
 800085e:	f000 fe07 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	4859      	ldr	r0, [pc, #356]	; (80009cc <MX_GPIO_Init+0x21c>)
 8000868:	f000 fe02 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000872:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4853      	ldr	r0, [pc, #332]	; (80009d0 <MX_GPIO_Init+0x220>)
 8000884:	f000 fc48 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000888:	2332      	movs	r3, #50	; 0x32
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000898:	230b      	movs	r3, #11
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	484b      	ldr	r0, [pc, #300]	; (80009d0 <MX_GPIO_Init+0x220>)
 80008a4:	f000 fc38 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008a8:	2386      	movs	r3, #134	; 0x86
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b8:	230b      	movs	r3, #11
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4844      	ldr	r0, [pc, #272]	; (80009d4 <MX_GPIO_Init+0x224>)
 80008c4:	f000 fc28 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4839      	ldr	r0, [pc, #228]	; (80009c8 <MX_GPIO_Init+0x218>)
 80008e2:	f000 fc19 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f8:	230b      	movs	r3, #11
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4831      	ldr	r0, [pc, #196]	; (80009c8 <MX_GPIO_Init+0x218>)
 8000904:	f000 fc08 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000908:	f44f 7340 	mov.w	r3, #768	; 0x300
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800091a:	2307      	movs	r3, #7
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	482c      	ldr	r0, [pc, #176]	; (80009d8 <MX_GPIO_Init+0x228>)
 8000926:	f000 fbf7 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4822      	ldr	r0, [pc, #136]	; (80009cc <MX_GPIO_Init+0x21c>)
 8000942:	f000 fbe9 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_GPIO_Init+0x21c>)
 800095a:	f000 fbdd 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800095e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000970:	230a      	movs	r3, #10
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4816      	ldr	r0, [pc, #88]	; (80009d4 <MX_GPIO_Init+0x224>)
 800097c:	f000 fbcc 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	480f      	ldr	r0, [pc, #60]	; (80009d4 <MX_GPIO_Init+0x224>)
 8000996:	f000 fbbf 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800099a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ac:	230b      	movs	r3, #11
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_GPIO_Init+0x21c>)
 80009b8:	f000 fbae 	bl	8001118 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	bf00      	nop
 80009be:	3730      	adds	r7, #48	; 0x30
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40021800 	.word	0x40021800
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020c00 	.word	0x40020c00

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x44>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x44>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x44>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x44>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b0ae      	sub	sp, #184	; 0xb8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2290      	movs	r2, #144	; 0x90
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 f90c 	bl	8003c6e <memset>
  if(hi2c->Instance==I2C1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <HAL_I2C_MspInit+0xb4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d13c      	bne.n	8000ada <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fb2c 	bl	80020cc <HAL_RCCEx_PeriphCLKConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a7a:	f7ff ffaf 	bl	80009dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_I2C_MspInit+0xb8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_I2C_MspInit+0xb8>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_I2C_MspInit+0xb8>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aba:	4619      	mov	r1, r3
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <HAL_I2C_MspInit+0xbc>)
 8000abe:	f000 fb2b 	bl	8001118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_I2C_MspInit+0xb8>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_I2C_MspInit+0xb8>)
 8000ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_I2C_MspInit+0xb8>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	37b8      	adds	r7, #184	; 0xb8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020400 	.word	0x40020400

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0ae      	sub	sp, #184	; 0xb8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2290      	movs	r2, #144	; 0x90
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 f8ac 	bl	8003c6e <memset>
  if(huart->Instance==UART4)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a32      	ldr	r2, [pc, #200]	; (8000be4 <HAL_UART_MspInit+0xf4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d15d      	bne.n	8000bdc <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 facc 	bl	80020cc <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b3a:	f7ff ff4f 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <HAL_UART_MspInit+0xf8>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <HAL_UART_MspInit+0xf8>)
 8000b44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <HAL_UART_MspInit+0xf8>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <HAL_UART_MspInit+0xf8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <HAL_UART_MspInit+0xf8>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <HAL_UART_MspInit+0xf8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <HAL_UART_MspInit+0xf8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <HAL_UART_MspInit+0xf8>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <HAL_UART_MspInit+0xf8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b86:	2301      	movs	r3, #1
 8000b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4810      	ldr	r0, [pc, #64]	; (8000bec <HAL_UART_MspInit+0xfc>)
 8000bac:	f000 fab4 	bl	8001118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <HAL_UART_MspInit+0x100>)
 8000bd8:	f000 fa9e 	bl	8001118 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	37b8      	adds	r7, #184	; 0xb8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40004c00 	.word	0x40004c00
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020800 	.word	0x40020800

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f940 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return 1;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_kill>:

int _kill(int pid, int sig)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c62:	f003 f857 	bl	8003d14 <__errno>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2216      	movs	r2, #22
 8000c6a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_exit>:

void _exit (int status)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ffe7 	bl	8000c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c8a:	e7fe      	b.n	8000c8a <_exit+0x12>

08000c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
  }

  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e009      	b.n	8000cec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf1      	blt.n	8000cd8 <_write+0x12>
  }
  return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_close>:

int _close(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	605a      	str	r2, [r3, #4]
  return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f002 ffbc 	bl	8003d14 <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20080000 	.word	0x20080000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	200002cc 	.word	0x200002cc
 8000dd0:	20000420 	.word	0x20000420

08000dd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfe:	490e      	ldr	r1, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e00:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e14:	4c0b      	ldr	r4, [pc, #44]	; (8000e44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e22:	f7ff ffd7 	bl	8000dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f002 ff7b 	bl	8003d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fbdf 	bl	80005ec <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000e3c:	08005dbc 	.word	0x08005dbc
  ldr r2, =_sbss
 8000e40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000e44:	20000420 	.word	0x20000420

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>

08000e4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f92e 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f000 f805 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5a:	f7ff fdc5 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f93b 	bl	80010fe <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f911 	bl	80010c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	200002d0 	.word	0x200002d0

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200002d0 	.word	0x200002d0

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <__NVIC_SetPriorityGrouping+0x40>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x40>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	05fa0000 	.word	0x05fa0000

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800107c:	d301      	bcc.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e00f      	b.n	80010a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <SysTick_Config+0x40>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	210f      	movs	r1, #15
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f7ff ff8e 	bl	8000fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SysTick_Config+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SysTick_Config+0x40>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff47 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d8:	f7ff ff5c 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 80010dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f7ff ff8e 	bl	8001004 <NVIC_EncodePriority>
 80010e8:	4602      	mov	r2, r0
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff5d 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffb0 	bl	800106c <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e175      	b.n	8001424 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8164 	bne.w	800141e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_GPIO_Init+0x56>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d130      	bne.n	80011d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	f003 0201 	and.w	r2, r3, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d017      	beq.n	800120c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80be 	beq.w	800141e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	4b66      	ldr	r3, [pc, #408]	; (800143c <HAL_GPIO_Init+0x324>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a65      	ldr	r2, [pc, #404]	; (800143c <HAL_GPIO_Init+0x324>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <HAL_GPIO_Init+0x324>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012ba:	4a61      	ldr	r2, [pc, #388]	; (8001440 <HAL_GPIO_Init+0x328>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a58      	ldr	r2, [pc, #352]	; (8001444 <HAL_GPIO_Init+0x32c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d037      	beq.n	8001356 <HAL_GPIO_Init+0x23e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a57      	ldr	r2, [pc, #348]	; (8001448 <HAL_GPIO_Init+0x330>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d031      	beq.n	8001352 <HAL_GPIO_Init+0x23a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a56      	ldr	r2, [pc, #344]	; (800144c <HAL_GPIO_Init+0x334>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d02b      	beq.n	800134e <HAL_GPIO_Init+0x236>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a55      	ldr	r2, [pc, #340]	; (8001450 <HAL_GPIO_Init+0x338>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d025      	beq.n	800134a <HAL_GPIO_Init+0x232>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a54      	ldr	r2, [pc, #336]	; (8001454 <HAL_GPIO_Init+0x33c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01f      	beq.n	8001346 <HAL_GPIO_Init+0x22e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a53      	ldr	r2, [pc, #332]	; (8001458 <HAL_GPIO_Init+0x340>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x22a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a52      	ldr	r2, [pc, #328]	; (800145c <HAL_GPIO_Init+0x344>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x226>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a51      	ldr	r2, [pc, #324]	; (8001460 <HAL_GPIO_Init+0x348>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x222>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a50      	ldr	r2, [pc, #320]	; (8001464 <HAL_GPIO_Init+0x34c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x21e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4f      	ldr	r2, [pc, #316]	; (8001468 <HAL_GPIO_Init+0x350>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x21a>
 800132e:	2309      	movs	r3, #9
 8001330:	e012      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001332:	230a      	movs	r3, #10
 8001334:	e010      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001336:	2308      	movs	r3, #8
 8001338:	e00e      	b.n	8001358 <HAL_GPIO_Init+0x240>
 800133a:	2307      	movs	r3, #7
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x240>
 800133e:	2306      	movs	r3, #6
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x240>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x240>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x240>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x328>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <HAL_GPIO_Init+0x354>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139a:	4a34      	ldr	r2, [pc, #208]	; (800146c <HAL_GPIO_Init+0x354>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <HAL_GPIO_Init+0x354>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c4:	4a29      	ldr	r2, [pc, #164]	; (800146c <HAL_GPIO_Init+0x354>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <HAL_GPIO_Init+0x354>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <HAL_GPIO_Init+0x354>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_GPIO_Init+0x354>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <HAL_GPIO_Init+0x354>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae86 	bls.w	8001138 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40022000 	.word	0x40022000
 8001468:	40022400 	.word	0x40022400
 800146c:	40013c00 	.word	0x40013c00

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4013      	ands	r3, r2
 80014ba:	041a      	lsls	r2, r3, #16
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43d9      	mvns	r1, r3
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	400b      	ands	r3, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07f      	b.n	80015ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fa96 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2224      	movs	r2, #36	; 0x24
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001528:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001538:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d107      	bne.n	8001552 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e006      	b.n	8001560 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800155e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d104      	bne.n	8001572 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001570:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_I2C_Init+0x11c>)
 800157e:	430b      	orrs	r3, r1
 8001580:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001590:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69d9      	ldr	r1, [r3, #28]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1a      	ldr	r2, [r3, #32]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	02008000 	.word	0x02008000

080015f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b20      	cmp	r3, #32
 800160c:	d138      	bne.n	8001680 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001618:	2302      	movs	r3, #2
 800161a:	e032      	b.n	8001682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800164a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6819      	ldr	r1, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0201 	orr.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e000      	b.n	8001682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001680:	2302      	movs	r3, #2
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d139      	bne.n	8001718 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e033      	b.n	800171a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2224      	movs	r2, #36	; 0x24
 80016be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001718:	2302      	movs	r3, #2
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e29b      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8087 	beq.w	800185a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800174c:	4b96      	ldr	r3, [pc, #600]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b04      	cmp	r3, #4
 8001756:	d00c      	beq.n	8001772 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001758:	4b93      	ldr	r3, [pc, #588]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d112      	bne.n	800178a <HAL_RCC_OscConfig+0x62>
 8001764:	4b90      	ldr	r3, [pc, #576]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001770:	d10b      	bne.n	800178a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001772:	4b8d      	ldr	r3, [pc, #564]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d06c      	beq.n	8001858 <HAL_RCC_OscConfig+0x130>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d168      	bne.n	8001858 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e275      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x7a>
 8001794:	4b84      	ldr	r3, [pc, #528]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a83      	ldr	r2, [pc, #524]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 800179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e02e      	b.n	8001800 <HAL_RCC_OscConfig+0xd8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x9c>
 80017aa:	4b7f      	ldr	r3, [pc, #508]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a7e      	ldr	r2, [pc, #504]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a7b      	ldr	r2, [pc, #492]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e01d      	b.n	8001800 <HAL_RCC_OscConfig+0xd8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0xc0>
 80017ce:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a75      	ldr	r2, [pc, #468]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b73      	ldr	r3, [pc, #460]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a72      	ldr	r2, [pc, #456]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0xd8>
 80017e8:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a6e      	ldr	r2, [pc, #440]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b6c      	ldr	r3, [pc, #432]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a6b      	ldr	r2, [pc, #428]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80017fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d013      	beq.n	8001830 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fb70 	bl	8000eec <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fb6c 	bl	8000eec <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e229      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	4b61      	ldr	r3, [pc, #388]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0xe8>
 800182e:	e014      	b.n	800185a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fb5c 	bl	8000eec <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fb58 	bl	8000eec <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b64      	cmp	r3, #100	; 0x64
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e215      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184a:	4b57      	ldr	r3, [pc, #348]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x110>
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d069      	beq.n	800193a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001866:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001872:	4b4d      	ldr	r3, [pc, #308]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b08      	cmp	r3, #8
 800187c:	d11c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x190>
 800187e:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d116      	bne.n	80018b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <HAL_RCC_OscConfig+0x17a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e1e9      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	493d      	ldr	r1, [pc, #244]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b6:	e040      	b.n	800193a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d023      	beq.n	8001908 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a38      	ldr	r2, [pc, #224]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb0e 	bl	8000eec <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff fb0a 	bl	8000eec <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1c7      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4929      	ldr	r1, [pc, #164]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
 8001906:	e018      	b.n	800193a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff faea 	bl	8000eec <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191c:	f7ff fae6 	bl	8000eec <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e1a3      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d038      	beq.n	80019b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d019      	beq.n	8001982 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff fac7 	bl	8000eec <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff fac3 	bl	8000eec <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e180      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x23a>
 8001980:	e01a      	b.n	80019b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_RCC_OscConfig+0x280>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff faad 	bl	8000eec <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff faa9 	bl	8000eec <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d903      	bls.n	80019ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e166      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
 80019a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 80019ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1ee      	bne.n	8001996 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80a4 	beq.w	8001b0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c6:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b89      	ldr	r3, [pc, #548]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a88      	ldr	r2, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b86      	ldr	r3, [pc, #536]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ee:	4b83      	ldr	r3, [pc, #524]	; (8001bfc <HAL_RCC_OscConfig+0x4d4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d118      	bne.n	8001a2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019fa:	4b80      	ldr	r3, [pc, #512]	; (8001bfc <HAL_RCC_OscConfig+0x4d4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7f      	ldr	r2, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x4d4>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fa71 	bl	8000eec <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff fa6d 	bl	8000eec <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b64      	cmp	r3, #100	; 0x64
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e12a      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a20:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x4d4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x31a>
 8001a34:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	4a6f      	ldr	r2, [pc, #444]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a40:	e02d      	b.n	8001a9e <HAL_RCC_OscConfig+0x376>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x33c>
 8001a4a:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6713      	str	r3, [r2, #112]	; 0x70
 8001a56:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	4a67      	ldr	r2, [pc, #412]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	6713      	str	r3, [r2, #112]	; 0x70
 8001a62:	e01c      	b.n	8001a9e <HAL_RCC_OscConfig+0x376>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d10c      	bne.n	8001a86 <HAL_RCC_OscConfig+0x35e>
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a70:	4a61      	ldr	r2, [pc, #388]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6713      	str	r3, [r2, #112]	; 0x70
 8001a78:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	4a5e      	ldr	r2, [pc, #376]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70
 8001a84:	e00b      	b.n	8001a9e <HAL_RCC_OscConfig+0x376>
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d015      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fa21 	bl	8000eec <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7ff fa1d 	bl	8000eec <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0d8      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ee      	beq.n	8001aae <HAL_RCC_OscConfig+0x386>
 8001ad0:	e014      	b.n	8001afc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fa0b 	bl	8000eec <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff fa07 	bl	8000eec <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0c2      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af0:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ee      	bne.n	8001ada <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d105      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a3c      	ldr	r2, [pc, #240]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80ae 	beq.w	8001c74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d06d      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d14b      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a31      	ldr	r2, [pc, #196]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f9d8 	bl	8000eec <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f9d4 	bl	8000eec <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e091      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69da      	ldr	r2, [r3, #28]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	3b01      	subs	r3, #1
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	071b      	lsls	r3, r3, #28
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f9a6 	bl	8000eec <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f9a2 	bl	8000eec <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e05f      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x47c>
 8001bc2:	e057      	b.n	8001c74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f98c 	bl	8000eec <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff f988 	bl	8000eec <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e045      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_RCC_OscConfig+0x4d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4b0>
 8001bf6:	e03d      	b.n	8001c74 <HAL_RCC_OscConfig+0x54c>
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <HAL_RCC_OscConfig+0x558>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d030      	beq.n	8001c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d129      	bne.n	8001c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d122      	bne.n	8001c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d119      	bne.n	8001c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10f      	bne.n	8001c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0d0      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d910      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 020f 	bic.w	r2, r3, #15
 8001cb2:	4965      	ldr	r1, [pc, #404]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b8      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b50      	ldr	r3, [pc, #320]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	494d      	ldr	r1, [pc, #308]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d040      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e073      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e06b      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4936      	ldr	r1, [pc, #216]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d78:	f7ff f8b8 	bl	8000eec <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d80:	f7ff f8b4 	bl	8000eec <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e053      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 020c 	and.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1eb      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d210      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 020f 	bic.w	r2, r3, #15
 8001dbe:	4922      	ldr	r1, [pc, #136]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4916      	ldr	r1, [pc, #88]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	490e      	ldr	r1, [pc, #56]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e16:	f000 f821 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490a      	ldr	r1, [pc, #40]	; (8001e50 <HAL_RCC_ClockConfig+0x1cc>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1d0>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1d4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f814 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08005a20 	.word	0x08005a20
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e60:	b094      	sub	sp, #80	; 0x50
 8001e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	647b      	str	r3, [r7, #68]	; 0x44
 8001e68:	2300      	movs	r3, #0
 8001e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e74:	4b79      	ldr	r3, [pc, #484]	; (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d00d      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x40>
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	f200 80e1 	bhi.w	8002048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x34>
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e8e:	e0db      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b73      	ldr	r3, [pc, #460]	; (8002060 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e94:	e0db      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e96:	4b72      	ldr	r3, [pc, #456]	; (8002060 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e9a:	e0d8      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9c:	4b6f      	ldr	r3, [pc, #444]	; (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ea6:	4b6d      	ldr	r3, [pc, #436]	; (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb2:	4b6a      	ldr	r3, [pc, #424]	; (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	2200      	movs	r2, #0
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ece:	4622      	mov	r2, r4
 8001ed0:	462b      	mov	r3, r5
 8001ed2:	f04f 0000 	mov.w	r0, #0
 8001ed6:	f04f 0100 	mov.w	r1, #0
 8001eda:	0159      	lsls	r1, r3, #5
 8001edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee0:	0150      	lsls	r0, r2, #5
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	1a51      	subs	r1, r2, r1
 8001eea:	6139      	str	r1, [r7, #16]
 8001eec:	4629      	mov	r1, r5
 8001eee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f00:	4659      	mov	r1, fp
 8001f02:	018b      	lsls	r3, r1, #6
 8001f04:	4651      	mov	r1, sl
 8001f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f0a:	4651      	mov	r1, sl
 8001f0c:	018a      	lsls	r2, r1, #6
 8001f0e:	4651      	mov	r1, sl
 8001f10:	ebb2 0801 	subs.w	r8, r2, r1
 8001f14:	4659      	mov	r1, fp
 8001f16:	eb63 0901 	sbc.w	r9, r3, r1
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f2e:	4690      	mov	r8, r2
 8001f30:	4699      	mov	r9, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	eb18 0303 	adds.w	r3, r8, r3
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	eb49 0303 	adc.w	r3, r9, r3
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f4e:	4629      	mov	r1, r5
 8001f50:	028b      	lsls	r3, r1, #10
 8001f52:	4621      	mov	r1, r4
 8001f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f58:	4621      	mov	r1, r4
 8001f5a:	028a      	lsls	r2, r1, #10
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f62:	2200      	movs	r2, #0
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f6c:	f7fe f9c0 	bl	80002f0 <__aeabi_uldivmod>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4613      	mov	r3, r2
 8001f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f78:	e058      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	2200      	movs	r2, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	4611      	mov	r1, r2
 8001f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f94:	4642      	mov	r2, r8
 8001f96:	464b      	mov	r3, r9
 8001f98:	f04f 0000 	mov.w	r0, #0
 8001f9c:	f04f 0100 	mov.w	r1, #0
 8001fa0:	0159      	lsls	r1, r3, #5
 8001fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa6:	0150      	lsls	r0, r2, #5
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4641      	mov	r1, r8
 8001fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fb2:	4649      	mov	r1, r9
 8001fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8001fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	00eb      	lsls	r3, r5, #3
 8001fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe2:	00e2      	lsls	r2, r4, #3
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	4643      	mov	r3, r8
 8001fea:	18e3      	adds	r3, r4, r3
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	464b      	mov	r3, r9
 8001ff0:	eb45 0303 	adc.w	r3, r5, r3
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002002:	4629      	mov	r1, r5
 8002004:	028b      	lsls	r3, r1, #10
 8002006:	4621      	mov	r1, r4
 8002008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800200c:	4621      	mov	r1, r4
 800200e:	028a      	lsls	r2, r1, #10
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002016:	2200      	movs	r2, #0
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	61fa      	str	r2, [r7, #28]
 800201c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002020:	f7fe f966 	bl	80002f0 <__aeabi_uldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4613      	mov	r3, r2
 800202a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_GetSysClockFreq+0x200>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	3301      	adds	r3, #1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800203c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800203e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002046:	e002      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_RCC_GetSysClockFreq+0x204>)
 800204a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800204c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800204e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002050:	4618      	mov	r0, r3
 8002052:	3750      	adds	r7, #80	; 0x50
 8002054:	46bd      	mov	sp, r7
 8002056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	00f42400 	.word	0x00f42400

08002064 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_RCC_GetHCLKFreq+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000

0800207c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002080:	f7ff fff0 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0a9b      	lsrs	r3, r3, #10
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4903      	ldr	r1, [pc, #12]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	08005a30 	.word	0x08005a30

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a8:	f7ff ffdc 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0b5b      	lsrs	r3, r3, #13
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4903      	ldr	r1, [pc, #12]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40023800 	.word	0x40023800
 80020c8:	08005a30 	.word	0x08005a30

080020cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020f4:	4b69      	ldr	r3, [pc, #420]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a68      	ldr	r2, [pc, #416]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	4b66      	ldr	r3, [pc, #408]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	4964      	ldr	r1, [pc, #400]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002116:	2301      	movs	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d017      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800212c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	4959      	ldr	r1, [pc, #356]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002144:	d101      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002146:	2301      	movs	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d017      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002162:	4b4e      	ldr	r3, [pc, #312]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002168:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	494a      	ldr	r1, [pc, #296]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 808b 	beq.w	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	4a39      	ldr	r2, [pc, #228]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6413      	str	r3, [r2, #64]	; 0x40
 80021bc:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a34      	ldr	r2, [pc, #208]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d4:	f7fe fe8a 	bl	8000eec <HAL_GetTick>
 80021d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021dc:	f7fe fe86 	bl	8000eec <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e38f      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d035      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d02e      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002218:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a1a      	ldr	r2, [pc, #104]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002238:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d114      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fe4e 	bl	8000eec <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	e00a      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe fe4a 	bl	8000eec <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e351      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ee      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002282:	d111      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002292:	400b      	ands	r3, r1
 8002294:	4901      	ldr	r1, [pc, #4]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
 800229a:	e00b      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000
 80022a4:	0ffffcff 	.word	0x0ffffcff
 80022a8:	4bac      	ldr	r3, [pc, #688]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4aab      	ldr	r2, [pc, #684]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	4ba9      	ldr	r3, [pc, #676]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	49a6      	ldr	r1, [pc, #664]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022d2:	4ba2      	ldr	r3, [pc, #648]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d8:	4aa0      	ldr	r2, [pc, #640]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022e2:	4b9e      	ldr	r3, [pc, #632]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	499b      	ldr	r1, [pc, #620]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002300:	4b96      	ldr	r3, [pc, #600]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230e:	4993      	ldr	r1, [pc, #588]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002322:	4b8e      	ldr	r3, [pc, #568]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002328:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002330:	498a      	ldr	r1, [pc, #552]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002344:	4b85      	ldr	r3, [pc, #532]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002352:	4982      	ldr	r1, [pc, #520]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002366:	4b7d      	ldr	r3, [pc, #500]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	4979      	ldr	r1, [pc, #484]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002388:	4b74      	ldr	r3, [pc, #464]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4971      	ldr	r1, [pc, #452]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023aa:	4b6c      	ldr	r3, [pc, #432]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f023 020c 	bic.w	r2, r3, #12
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	4968      	ldr	r1, [pc, #416]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023cc:	4b63      	ldr	r3, [pc, #396]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4960      	ldr	r1, [pc, #384]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023ee:	4b5b      	ldr	r3, [pc, #364]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	4957      	ldr	r1, [pc, #348]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002410:	4b52      	ldr	r3, [pc, #328]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241e:	494f      	ldr	r1, [pc, #316]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002432:	4b4a      	ldr	r3, [pc, #296]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4946      	ldr	r1, [pc, #280]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002454:	4b41      	ldr	r3, [pc, #260]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	493e      	ldr	r1, [pc, #248]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002484:	4935      	ldr	r1, [pc, #212]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002498:	4b30      	ldr	r3, [pc, #192]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a6:	492d      	ldr	r1, [pc, #180]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d011      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c8:	4924      	ldr	r1, [pc, #144]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024d8:	d101      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024da:	2301      	movs	r3, #1
 80024dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002500:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002508:	4914      	ldr	r1, [pc, #80]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800252c:	490b      	ldr	r1, [pc, #44]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00f      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002550:	4902      	ldr	r1, [pc, #8]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002558:	e002      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00b      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800256c:	4b8a      	ldr	r3, [pc, #552]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002572:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	4986      	ldr	r1, [pc, #536]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002590:	4b81      	ldr	r3, [pc, #516]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002596:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a0:	497d      	ldr	r1, [pc, #500]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d006      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80d6 	beq.w	8002768 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025bc:	4b76      	ldr	r3, [pc, #472]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a75      	ldr	r2, [pc, #468]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c8:	f7fe fc90 	bl	8000eec <HAL_GetTick>
 80025cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025d0:	f7fe fc8c 	bl	8000eec <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e195      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025e2:	4b6d      	ldr	r3, [pc, #436]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d021      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11d      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002602:	4b65      	ldr	r3, [pc, #404]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002610:	4b61      	ldr	r3, [pc, #388]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002616:	0e1b      	lsrs	r3, r3, #24
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	019a      	lsls	r2, r3, #6
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	431a      	orrs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	061b      	lsls	r3, r3, #24
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	071b      	lsls	r3, r3, #28
 8002636:	4958      	ldr	r1, [pc, #352]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800265c:	2b00      	cmp	r3, #0
 800265e:	d02e      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002668:	d129      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800266a:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002670:	0c1b      	lsrs	r3, r3, #16
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002678:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267e:	0f1b      	lsrs	r3, r3, #28
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	019a      	lsls	r2, r3, #6
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	061b      	lsls	r3, r3, #24
 8002698:	431a      	orrs	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	071b      	lsls	r3, r3, #28
 800269e:	493e      	ldr	r1, [pc, #248]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ac:	f023 021f 	bic.w	r2, r3, #31
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	3b01      	subs	r3, #1
 80026b6:	4938      	ldr	r1, [pc, #224]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01d      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026ca:	4b33      	ldr	r3, [pc, #204]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d0:	0e1b      	lsrs	r3, r3, #24
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026de:	0f1b      	lsrs	r3, r3, #28
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	019a      	lsls	r2, r3, #6
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	041b      	lsls	r3, r3, #16
 80026f2:	431a      	orrs	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	061b      	lsls	r3, r3, #24
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	071b      	lsls	r3, r3, #28
 80026fe:	4926      	ldr	r1, [pc, #152]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d011      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	019a      	lsls	r2, r3, #6
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	041b      	lsls	r3, r3, #16
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	061b      	lsls	r3, r3, #24
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	071b      	lsls	r3, r3, #28
 800272e:	491a      	ldr	r1, [pc, #104]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800273c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002742:	f7fe fbd3 	bl	8000eec <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800274a:	f7fe fbcf 	bl	8000eec <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	; 0x64
 8002756:	d901      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0d8      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b01      	cmp	r3, #1
 800276c:	f040 80ce 	bne.w	800290c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a08      	ldr	r2, [pc, #32]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277c:	f7fe fbb6 	bl	8000eec <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002782:	e00b      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002784:	f7fe fbb2 	bl	8000eec <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d904      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e0bb      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800279c:	4b5e      	ldr	r3, [pc, #376]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a8:	d0ec      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d02e      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d12a      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027d2:	4b51      	ldr	r3, [pc, #324]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027e0:	4b4d      	ldr	r3, [pc, #308]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	0f1b      	lsrs	r3, r3, #28
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	019a      	lsls	r2, r3, #6
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	431a      	orrs	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	071b      	lsls	r3, r3, #28
 8002806:	4944      	ldr	r1, [pc, #272]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800280e:	4b42      	ldr	r3, [pc, #264]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002814:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	493d      	ldr	r1, [pc, #244]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d022      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800283c:	d11d      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800283e:	4b36      	ldr	r3, [pc, #216]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	0e1b      	lsrs	r3, r3, #24
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800284c:	4b32      	ldr	r3, [pc, #200]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	0f1b      	lsrs	r3, r3, #28
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	019a      	lsls	r2, r3, #6
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	431a      	orrs	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	061b      	lsls	r3, r3, #24
 800286c:	431a      	orrs	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	071b      	lsls	r3, r3, #28
 8002872:	4929      	ldr	r1, [pc, #164]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d028      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	0e1b      	lsrs	r3, r3, #24
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	019a      	lsls	r2, r3, #6
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	071b      	lsls	r3, r3, #28
 80028ba:	4917      	ldr	r1, [pc, #92]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	4911      	ldr	r1, [pc, #68]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e4:	f7fe fb02 	bl	8000eec <HAL_GetTick>
 80028e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028ec:	f7fe fafe 	bl	8000eec <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e007      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800290a:	d1ef      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3720      	adds	r7, #32
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e040      	b.n	80029b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe f8d6 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f82c 	bl	80029b8 <UART_SetConfig>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e022      	b.n	80029b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa84 	bl	8002e80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fb0b 	bl	8002fc4 <UART_CheckIdleState>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4ba6      	ldr	r3, [pc, #664]	; (8002c7c <UART_SetConfig+0x2c4>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	6979      	ldr	r1, [r7, #20]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a94      	ldr	r2, [pc, #592]	; (8002c80 <UART_SetConfig+0x2c8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d120      	bne.n	8002a76 <UART_SetConfig+0xbe>
 8002a34:	4b93      	ldr	r3, [pc, #588]	; (8002c84 <UART_SetConfig+0x2cc>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d816      	bhi.n	8002a70 <UART_SetConfig+0xb8>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <UART_SetConfig+0x90>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002a59 	.word	0x08002a59
 8002a4c:	08002a65 	.word	0x08002a65
 8002a50:	08002a5f 	.word	0x08002a5f
 8002a54:	08002a6b 	.word	0x08002a6b
 8002a58:	2301      	movs	r3, #1
 8002a5a:	77fb      	strb	r3, [r7, #31]
 8002a5c:	e150      	b.n	8002d00 <UART_SetConfig+0x348>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	77fb      	strb	r3, [r7, #31]
 8002a62:	e14d      	b.n	8002d00 <UART_SetConfig+0x348>
 8002a64:	2304      	movs	r3, #4
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	e14a      	b.n	8002d00 <UART_SetConfig+0x348>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	77fb      	strb	r3, [r7, #31]
 8002a6e:	e147      	b.n	8002d00 <UART_SetConfig+0x348>
 8002a70:	2310      	movs	r3, #16
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	e144      	b.n	8002d00 <UART_SetConfig+0x348>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a83      	ldr	r2, [pc, #524]	; (8002c88 <UART_SetConfig+0x2d0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d132      	bne.n	8002ae6 <UART_SetConfig+0x12e>
 8002a80:	4b80      	ldr	r3, [pc, #512]	; (8002c84 <UART_SetConfig+0x2cc>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d828      	bhi.n	8002ae0 <UART_SetConfig+0x128>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <UART_SetConfig+0xdc>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002ac9 	.word	0x08002ac9
 8002a98:	08002ae1 	.word	0x08002ae1
 8002a9c:	08002ae1 	.word	0x08002ae1
 8002aa0:	08002ae1 	.word	0x08002ae1
 8002aa4:	08002ad5 	.word	0x08002ad5
 8002aa8:	08002ae1 	.word	0x08002ae1
 8002aac:	08002ae1 	.word	0x08002ae1
 8002ab0:	08002ae1 	.word	0x08002ae1
 8002ab4:	08002acf 	.word	0x08002acf
 8002ab8:	08002ae1 	.word	0x08002ae1
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002ae1 	.word	0x08002ae1
 8002ac4:	08002adb 	.word	0x08002adb
 8002ac8:	2300      	movs	r3, #0
 8002aca:	77fb      	strb	r3, [r7, #31]
 8002acc:	e118      	b.n	8002d00 <UART_SetConfig+0x348>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	77fb      	strb	r3, [r7, #31]
 8002ad2:	e115      	b.n	8002d00 <UART_SetConfig+0x348>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	77fb      	strb	r3, [r7, #31]
 8002ad8:	e112      	b.n	8002d00 <UART_SetConfig+0x348>
 8002ada:	2308      	movs	r3, #8
 8002adc:	77fb      	strb	r3, [r7, #31]
 8002ade:	e10f      	b.n	8002d00 <UART_SetConfig+0x348>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e10c      	b.n	8002d00 <UART_SetConfig+0x348>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d120      	bne.n	8002b32 <UART_SetConfig+0x17a>
 8002af0:	4b64      	ldr	r3, [pc, #400]	; (8002c84 <UART_SetConfig+0x2cc>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002afa:	2b30      	cmp	r3, #48	; 0x30
 8002afc:	d013      	beq.n	8002b26 <UART_SetConfig+0x16e>
 8002afe:	2b30      	cmp	r3, #48	; 0x30
 8002b00:	d814      	bhi.n	8002b2c <UART_SetConfig+0x174>
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d009      	beq.n	8002b1a <UART_SetConfig+0x162>
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d810      	bhi.n	8002b2c <UART_SetConfig+0x174>
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <UART_SetConfig+0x15c>
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d006      	beq.n	8002b20 <UART_SetConfig+0x168>
 8002b12:	e00b      	b.n	8002b2c <UART_SetConfig+0x174>
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e0f2      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e0ef      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b20:	2304      	movs	r3, #4
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	e0ec      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b26:	2308      	movs	r3, #8
 8002b28:	77fb      	strb	r3, [r7, #31]
 8002b2a:	e0e9      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	77fb      	strb	r3, [r7, #31]
 8002b30:	e0e6      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a56      	ldr	r2, [pc, #344]	; (8002c90 <UART_SetConfig+0x2d8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d120      	bne.n	8002b7e <UART_SetConfig+0x1c6>
 8002b3c:	4b51      	ldr	r3, [pc, #324]	; (8002c84 <UART_SetConfig+0x2cc>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b46:	2bc0      	cmp	r3, #192	; 0xc0
 8002b48:	d013      	beq.n	8002b72 <UART_SetConfig+0x1ba>
 8002b4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b4c:	d814      	bhi.n	8002b78 <UART_SetConfig+0x1c0>
 8002b4e:	2b80      	cmp	r3, #128	; 0x80
 8002b50:	d009      	beq.n	8002b66 <UART_SetConfig+0x1ae>
 8002b52:	2b80      	cmp	r3, #128	; 0x80
 8002b54:	d810      	bhi.n	8002b78 <UART_SetConfig+0x1c0>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <UART_SetConfig+0x1a8>
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d006      	beq.n	8002b6c <UART_SetConfig+0x1b4>
 8002b5e:	e00b      	b.n	8002b78 <UART_SetConfig+0x1c0>
 8002b60:	2300      	movs	r3, #0
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e0cc      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b66:	2302      	movs	r3, #2
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e0c9      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e0c6      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b72:	2308      	movs	r3, #8
 8002b74:	77fb      	strb	r3, [r7, #31]
 8002b76:	e0c3      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b78:	2310      	movs	r3, #16
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	e0c0      	b.n	8002d00 <UART_SetConfig+0x348>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a44      	ldr	r2, [pc, #272]	; (8002c94 <UART_SetConfig+0x2dc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d125      	bne.n	8002bd4 <UART_SetConfig+0x21c>
 8002b88:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <UART_SetConfig+0x2cc>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b96:	d017      	beq.n	8002bc8 <UART_SetConfig+0x210>
 8002b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b9c:	d817      	bhi.n	8002bce <UART_SetConfig+0x216>
 8002b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba2:	d00b      	beq.n	8002bbc <UART_SetConfig+0x204>
 8002ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba8:	d811      	bhi.n	8002bce <UART_SetConfig+0x216>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <UART_SetConfig+0x1fe>
 8002bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb2:	d006      	beq.n	8002bc2 <UART_SetConfig+0x20a>
 8002bb4:	e00b      	b.n	8002bce <UART_SetConfig+0x216>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	77fb      	strb	r3, [r7, #31]
 8002bba:	e0a1      	b.n	8002d00 <UART_SetConfig+0x348>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	77fb      	strb	r3, [r7, #31]
 8002bc0:	e09e      	b.n	8002d00 <UART_SetConfig+0x348>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	77fb      	strb	r3, [r7, #31]
 8002bc6:	e09b      	b.n	8002d00 <UART_SetConfig+0x348>
 8002bc8:	2308      	movs	r3, #8
 8002bca:	77fb      	strb	r3, [r7, #31]
 8002bcc:	e098      	b.n	8002d00 <UART_SetConfig+0x348>
 8002bce:	2310      	movs	r3, #16
 8002bd0:	77fb      	strb	r3, [r7, #31]
 8002bd2:	e095      	b.n	8002d00 <UART_SetConfig+0x348>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <UART_SetConfig+0x2e0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d125      	bne.n	8002c2a <UART_SetConfig+0x272>
 8002bde:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <UART_SetConfig+0x2cc>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002be8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bec:	d017      	beq.n	8002c1e <UART_SetConfig+0x266>
 8002bee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bf2:	d817      	bhi.n	8002c24 <UART_SetConfig+0x26c>
 8002bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf8:	d00b      	beq.n	8002c12 <UART_SetConfig+0x25a>
 8002bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bfe:	d811      	bhi.n	8002c24 <UART_SetConfig+0x26c>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <UART_SetConfig+0x254>
 8002c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c08:	d006      	beq.n	8002c18 <UART_SetConfig+0x260>
 8002c0a:	e00b      	b.n	8002c24 <UART_SetConfig+0x26c>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e076      	b.n	8002d00 <UART_SetConfig+0x348>
 8002c12:	2302      	movs	r3, #2
 8002c14:	77fb      	strb	r3, [r7, #31]
 8002c16:	e073      	b.n	8002d00 <UART_SetConfig+0x348>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e070      	b.n	8002d00 <UART_SetConfig+0x348>
 8002c1e:	2308      	movs	r3, #8
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e06d      	b.n	8002d00 <UART_SetConfig+0x348>
 8002c24:	2310      	movs	r3, #16
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e06a      	b.n	8002d00 <UART_SetConfig+0x348>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <UART_SetConfig+0x2e4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d138      	bne.n	8002ca6 <UART_SetConfig+0x2ee>
 8002c34:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <UART_SetConfig+0x2cc>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002c3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c42:	d017      	beq.n	8002c74 <UART_SetConfig+0x2bc>
 8002c44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c48:	d82a      	bhi.n	8002ca0 <UART_SetConfig+0x2e8>
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	d00b      	beq.n	8002c68 <UART_SetConfig+0x2b0>
 8002c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c54:	d824      	bhi.n	8002ca0 <UART_SetConfig+0x2e8>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <UART_SetConfig+0x2aa>
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	d006      	beq.n	8002c6e <UART_SetConfig+0x2b6>
 8002c60:	e01e      	b.n	8002ca0 <UART_SetConfig+0x2e8>
 8002c62:	2300      	movs	r3, #0
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e04b      	b.n	8002d00 <UART_SetConfig+0x348>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e048      	b.n	8002d00 <UART_SetConfig+0x348>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	77fb      	strb	r3, [r7, #31]
 8002c72:	e045      	b.n	8002d00 <UART_SetConfig+0x348>
 8002c74:	2308      	movs	r3, #8
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	e042      	b.n	8002d00 <UART_SetConfig+0x348>
 8002c7a:	bf00      	nop
 8002c7c:	efff69f3 	.word	0xefff69f3
 8002c80:	40011000 	.word	0x40011000
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40004400 	.word	0x40004400
 8002c8c:	40004800 	.word	0x40004800
 8002c90:	40004c00 	.word	0x40004c00
 8002c94:	40005000 	.word	0x40005000
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	40007800 	.word	0x40007800
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e02c      	b.n	8002d00 <UART_SetConfig+0x348>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a72      	ldr	r2, [pc, #456]	; (8002e74 <UART_SetConfig+0x4bc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d125      	bne.n	8002cfc <UART_SetConfig+0x344>
 8002cb0:	4b71      	ldr	r3, [pc, #452]	; (8002e78 <UART_SetConfig+0x4c0>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cbe:	d017      	beq.n	8002cf0 <UART_SetConfig+0x338>
 8002cc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cc4:	d817      	bhi.n	8002cf6 <UART_SetConfig+0x33e>
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cca:	d00b      	beq.n	8002ce4 <UART_SetConfig+0x32c>
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd0:	d811      	bhi.n	8002cf6 <UART_SetConfig+0x33e>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <UART_SetConfig+0x326>
 8002cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cda:	d006      	beq.n	8002cea <UART_SetConfig+0x332>
 8002cdc:	e00b      	b.n	8002cf6 <UART_SetConfig+0x33e>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	77fb      	strb	r3, [r7, #31]
 8002ce2:	e00d      	b.n	8002d00 <UART_SetConfig+0x348>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	e00a      	b.n	8002d00 <UART_SetConfig+0x348>
 8002cea:	2304      	movs	r3, #4
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e007      	b.n	8002d00 <UART_SetConfig+0x348>
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e004      	b.n	8002d00 <UART_SetConfig+0x348>
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e001      	b.n	8002d00 <UART_SetConfig+0x348>
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d08:	d15b      	bne.n	8002dc2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d828      	bhi.n	8002d62 <UART_SetConfig+0x3aa>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <UART_SetConfig+0x360>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d3d 	.word	0x08002d3d
 8002d1c:	08002d45 	.word	0x08002d45
 8002d20:	08002d4d 	.word	0x08002d4d
 8002d24:	08002d63 	.word	0x08002d63
 8002d28:	08002d53 	.word	0x08002d53
 8002d2c:	08002d63 	.word	0x08002d63
 8002d30:	08002d63 	.word	0x08002d63
 8002d34:	08002d63 	.word	0x08002d63
 8002d38:	08002d5b 	.word	0x08002d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d3c:	f7ff f99e 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8002d40:	61b8      	str	r0, [r7, #24]
        break;
 8002d42:	e013      	b.n	8002d6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d44:	f7ff f9ae 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8002d48:	61b8      	str	r0, [r7, #24]
        break;
 8002d4a:	e00f      	b.n	8002d6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d4c:	4b4b      	ldr	r3, [pc, #300]	; (8002e7c <UART_SetConfig+0x4c4>)
 8002d4e:	61bb      	str	r3, [r7, #24]
        break;
 8002d50:	e00c      	b.n	8002d6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d52:	f7ff f883 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002d56:	61b8      	str	r0, [r7, #24]
        break;
 8002d58:	e008      	b.n	8002d6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5e:	61bb      	str	r3, [r7, #24]
        break;
 8002d60:	e004      	b.n	8002d6c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	77bb      	strb	r3, [r7, #30]
        break;
 8002d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d074      	beq.n	8002e5c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	005a      	lsls	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	441a      	add	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	d916      	bls.n	8002dbc <UART_SetConfig+0x404>
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d94:	d212      	bcs.n	8002dbc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f023 030f 	bic.w	r3, r3, #15
 8002d9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	89fb      	ldrh	r3, [r7, #14]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	89fa      	ldrh	r2, [r7, #14]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	e04f      	b.n	8002e5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	77bb      	strb	r3, [r7, #30]
 8002dc0:	e04c      	b.n	8002e5c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dc2:	7ffb      	ldrb	r3, [r7, #31]
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d828      	bhi.n	8002e1a <UART_SetConfig+0x462>
 8002dc8:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <UART_SetConfig+0x418>)
 8002dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dce:	bf00      	nop
 8002dd0:	08002df5 	.word	0x08002df5
 8002dd4:	08002dfd 	.word	0x08002dfd
 8002dd8:	08002e05 	.word	0x08002e05
 8002ddc:	08002e1b 	.word	0x08002e1b
 8002de0:	08002e0b 	.word	0x08002e0b
 8002de4:	08002e1b 	.word	0x08002e1b
 8002de8:	08002e1b 	.word	0x08002e1b
 8002dec:	08002e1b 	.word	0x08002e1b
 8002df0:	08002e13 	.word	0x08002e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df4:	f7ff f942 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8002df8:	61b8      	str	r0, [r7, #24]
        break;
 8002dfa:	e013      	b.n	8002e24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dfc:	f7ff f952 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8002e00:	61b8      	str	r0, [r7, #24]
        break;
 8002e02:	e00f      	b.n	8002e24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <UART_SetConfig+0x4c4>)
 8002e06:	61bb      	str	r3, [r7, #24]
        break;
 8002e08:	e00c      	b.n	8002e24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e0a:	f7ff f827 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8002e0e:	61b8      	str	r0, [r7, #24]
        break;
 8002e10:	e008      	b.n	8002e24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e16:	61bb      	str	r3, [r7, #24]
        break;
 8002e18:	e004      	b.n	8002e24 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	77bb      	strb	r3, [r7, #30]
        break;
 8002e22:	bf00      	nop
    }

    if (pclk != 0U)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	085a      	lsrs	r2, r3, #1
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	441a      	add	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b0f      	cmp	r3, #15
 8002e42:	d909      	bls.n	8002e58 <UART_SetConfig+0x4a0>
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4a:	d205      	bcs.n	8002e58 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	e001      	b.n	8002e5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e68:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40007c00 	.word	0x40007c00
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	00f42400 	.word	0x00f42400

08002e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01a      	beq.n	8002f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f7e:	d10a      	bne.n	8002f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
  }
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd4:	f7fd ff8a 	bl	8000eec <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d10e      	bne.n	8003006 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f831 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e027      	b.n	8003056 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b04      	cmp	r3, #4
 8003012:	d10e      	bne.n	8003032 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f81b 	bl	800305e <UART_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e011      	b.n	8003056 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b09c      	sub	sp, #112	; 0x70
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306e:	e0a7      	b.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	f000 80a3 	beq.w	80031c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7fd ff37 	bl	8000eec <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <UART_WaitOnFlagUntilTimeout+0x32>
 800308a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800308c:	2b00      	cmp	r3, #0
 800308e:	d13f      	bne.n	8003110 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800309e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030a4:	667b      	str	r3, [r7, #100]	; 0x64
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80030bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e6      	bne.n	8003090 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	663b      	str	r3, [r7, #96]	; 0x60
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3308      	adds	r3, #8
 80030e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80030e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80030f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e5      	bne.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e068      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d050      	beq.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312c:	d148      	bne.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003136:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800314c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
 8003158:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800315c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e6      	bne.n	8003138 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3308      	adds	r3, #8
 8003170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	e853 3f00 	ldrex	r3, [r3]
 8003178:	613b      	str	r3, [r7, #16]
   return(result);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	66bb      	str	r3, [r7, #104]	; 0x68
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3308      	adds	r3, #8
 8003188:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800318a:	623a      	str	r2, [r7, #32]
 800318c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	69f9      	ldr	r1, [r7, #28]
 8003190:	6a3a      	ldr	r2, [r7, #32]
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	61bb      	str	r3, [r7, #24]
   return(result);
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e5      	bne.n	800316a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e010      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4013      	ands	r3, r2
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	429a      	cmp	r2, r3
 80031dc:	f43f af48 	beq.w	8003070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3770      	adds	r7, #112	; 0x70
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <__cvt>:
 80031ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ec:	ed2d 8b02 	vpush	{d8}
 80031f0:	eeb0 8b40 	vmov.f64	d8, d0
 80031f4:	b085      	sub	sp, #20
 80031f6:	4617      	mov	r7, r2
 80031f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80031fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80031fc:	ee18 2a90 	vmov	r2, s17
 8003200:	f025 0520 	bic.w	r5, r5, #32
 8003204:	2a00      	cmp	r2, #0
 8003206:	bfb6      	itet	lt
 8003208:	222d      	movlt	r2, #45	; 0x2d
 800320a:	2200      	movge	r2, #0
 800320c:	eeb1 8b40 	vneglt.f64	d8, d0
 8003210:	2d46      	cmp	r5, #70	; 0x46
 8003212:	460c      	mov	r4, r1
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	d004      	beq.n	8003222 <__cvt+0x38>
 8003218:	2d45      	cmp	r5, #69	; 0x45
 800321a:	d100      	bne.n	800321e <__cvt+0x34>
 800321c:	3401      	adds	r4, #1
 800321e:	2102      	movs	r1, #2
 8003220:	e000      	b.n	8003224 <__cvt+0x3a>
 8003222:	2103      	movs	r1, #3
 8003224:	ab03      	add	r3, sp, #12
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	ab02      	add	r3, sp, #8
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	4622      	mov	r2, r4
 800322e:	4633      	mov	r3, r6
 8003230:	eeb0 0b48 	vmov.f64	d0, d8
 8003234:	f000 fe24 	bl	8003e80 <_dtoa_r>
 8003238:	2d47      	cmp	r5, #71	; 0x47
 800323a:	d101      	bne.n	8003240 <__cvt+0x56>
 800323c:	07fb      	lsls	r3, r7, #31
 800323e:	d51a      	bpl.n	8003276 <__cvt+0x8c>
 8003240:	2d46      	cmp	r5, #70	; 0x46
 8003242:	eb00 0204 	add.w	r2, r0, r4
 8003246:	d10c      	bne.n	8003262 <__cvt+0x78>
 8003248:	7803      	ldrb	r3, [r0, #0]
 800324a:	2b30      	cmp	r3, #48	; 0x30
 800324c:	d107      	bne.n	800325e <__cvt+0x74>
 800324e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003256:	bf1c      	itt	ne
 8003258:	f1c4 0401 	rsbne	r4, r4, #1
 800325c:	6034      	strne	r4, [r6, #0]
 800325e:	6833      	ldr	r3, [r6, #0]
 8003260:	441a      	add	r2, r3
 8003262:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	bf08      	it	eq
 800326c:	9203      	streq	r2, [sp, #12]
 800326e:	2130      	movs	r1, #48	; 0x30
 8003270:	9b03      	ldr	r3, [sp, #12]
 8003272:	4293      	cmp	r3, r2
 8003274:	d307      	bcc.n	8003286 <__cvt+0x9c>
 8003276:	9b03      	ldr	r3, [sp, #12]
 8003278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800327a:	1a1b      	subs	r3, r3, r0
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	b005      	add	sp, #20
 8003280:	ecbd 8b02 	vpop	{d8}
 8003284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003286:	1c5c      	adds	r4, r3, #1
 8003288:	9403      	str	r4, [sp, #12]
 800328a:	7019      	strb	r1, [r3, #0]
 800328c:	e7f0      	b.n	8003270 <__cvt+0x86>

0800328e <__exponent>:
 800328e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003290:	4603      	mov	r3, r0
 8003292:	2900      	cmp	r1, #0
 8003294:	bfb8      	it	lt
 8003296:	4249      	neglt	r1, r1
 8003298:	f803 2b02 	strb.w	r2, [r3], #2
 800329c:	bfb4      	ite	lt
 800329e:	222d      	movlt	r2, #45	; 0x2d
 80032a0:	222b      	movge	r2, #43	; 0x2b
 80032a2:	2909      	cmp	r1, #9
 80032a4:	7042      	strb	r2, [r0, #1]
 80032a6:	dd2a      	ble.n	80032fe <__exponent+0x70>
 80032a8:	f10d 0207 	add.w	r2, sp, #7
 80032ac:	4617      	mov	r7, r2
 80032ae:	260a      	movs	r6, #10
 80032b0:	4694      	mov	ip, r2
 80032b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80032b6:	fb06 1415 	mls	r4, r6, r5, r1
 80032ba:	3430      	adds	r4, #48	; 0x30
 80032bc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80032c0:	460c      	mov	r4, r1
 80032c2:	2c63      	cmp	r4, #99	; 0x63
 80032c4:	f102 32ff 	add.w	r2, r2, #4294967295
 80032c8:	4629      	mov	r1, r5
 80032ca:	dcf1      	bgt.n	80032b0 <__exponent+0x22>
 80032cc:	3130      	adds	r1, #48	; 0x30
 80032ce:	f1ac 0402 	sub.w	r4, ip, #2
 80032d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80032d6:	1c41      	adds	r1, r0, #1
 80032d8:	4622      	mov	r2, r4
 80032da:	42ba      	cmp	r2, r7
 80032dc:	d30a      	bcc.n	80032f4 <__exponent+0x66>
 80032de:	f10d 0209 	add.w	r2, sp, #9
 80032e2:	eba2 020c 	sub.w	r2, r2, ip
 80032e6:	42bc      	cmp	r4, r7
 80032e8:	bf88      	it	hi
 80032ea:	2200      	movhi	r2, #0
 80032ec:	4413      	add	r3, r2
 80032ee:	1a18      	subs	r0, r3, r0
 80032f0:	b003      	add	sp, #12
 80032f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80032f8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80032fc:	e7ed      	b.n	80032da <__exponent+0x4c>
 80032fe:	2330      	movs	r3, #48	; 0x30
 8003300:	3130      	adds	r1, #48	; 0x30
 8003302:	7083      	strb	r3, [r0, #2]
 8003304:	70c1      	strb	r1, [r0, #3]
 8003306:	1d03      	adds	r3, r0, #4
 8003308:	e7f1      	b.n	80032ee <__exponent+0x60>
 800330a:	0000      	movs	r0, r0
 800330c:	0000      	movs	r0, r0
	...

08003310 <_printf_float>:
 8003310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003314:	b08b      	sub	sp, #44	; 0x2c
 8003316:	460c      	mov	r4, r1
 8003318:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800331c:	4616      	mov	r6, r2
 800331e:	461f      	mov	r7, r3
 8003320:	4605      	mov	r5, r0
 8003322:	f000 fcad 	bl	8003c80 <_localeconv_r>
 8003326:	f8d0 b000 	ldr.w	fp, [r0]
 800332a:	4658      	mov	r0, fp
 800332c:	f7fc ffd8 	bl	80002e0 <strlen>
 8003330:	2300      	movs	r3, #0
 8003332:	9308      	str	r3, [sp, #32]
 8003334:	f8d8 3000 	ldr.w	r3, [r8]
 8003338:	f894 9018 	ldrb.w	r9, [r4, #24]
 800333c:	6822      	ldr	r2, [r4, #0]
 800333e:	3307      	adds	r3, #7
 8003340:	f023 0307 	bic.w	r3, r3, #7
 8003344:	f103 0108 	add.w	r1, r3, #8
 8003348:	f8c8 1000 	str.w	r1, [r8]
 800334c:	ed93 0b00 	vldr	d0, [r3]
 8003350:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80035b0 <_printf_float+0x2a0>
 8003354:	eeb0 7bc0 	vabs.f64	d7, d0
 8003358:	eeb4 7b46 	vcmp.f64	d7, d6
 800335c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003360:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8003364:	4682      	mov	sl, r0
 8003366:	dd24      	ble.n	80033b2 <_printf_float+0xa2>
 8003368:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003370:	d502      	bpl.n	8003378 <_printf_float+0x68>
 8003372:	232d      	movs	r3, #45	; 0x2d
 8003374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003378:	498f      	ldr	r1, [pc, #572]	; (80035b8 <_printf_float+0x2a8>)
 800337a:	4b90      	ldr	r3, [pc, #576]	; (80035bc <_printf_float+0x2ac>)
 800337c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003380:	bf94      	ite	ls
 8003382:	4688      	movls	r8, r1
 8003384:	4698      	movhi	r8, r3
 8003386:	2303      	movs	r3, #3
 8003388:	6123      	str	r3, [r4, #16]
 800338a:	f022 0204 	bic.w	r2, r2, #4
 800338e:	2300      	movs	r3, #0
 8003390:	6022      	str	r2, [r4, #0]
 8003392:	9304      	str	r3, [sp, #16]
 8003394:	9700      	str	r7, [sp, #0]
 8003396:	4633      	mov	r3, r6
 8003398:	aa09      	add	r2, sp, #36	; 0x24
 800339a:	4621      	mov	r1, r4
 800339c:	4628      	mov	r0, r5
 800339e:	f000 f9d1 	bl	8003744 <_printf_common>
 80033a2:	3001      	adds	r0, #1
 80033a4:	f040 808a 	bne.w	80034bc <_printf_float+0x1ac>
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	b00b      	add	sp, #44	; 0x2c
 80033ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	d709      	bvc.n	80033d0 <_printf_float+0xc0>
 80033bc:	ee10 3a90 	vmov	r3, s1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bfbc      	itt	lt
 80033c4:	232d      	movlt	r3, #45	; 0x2d
 80033c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80033ca:	497d      	ldr	r1, [pc, #500]	; (80035c0 <_printf_float+0x2b0>)
 80033cc:	4b7d      	ldr	r3, [pc, #500]	; (80035c4 <_printf_float+0x2b4>)
 80033ce:	e7d5      	b.n	800337c <_printf_float+0x6c>
 80033d0:	6863      	ldr	r3, [r4, #4]
 80033d2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80033d6:	9104      	str	r1, [sp, #16]
 80033d8:	1c59      	adds	r1, r3, #1
 80033da:	d13c      	bne.n	8003456 <_printf_float+0x146>
 80033dc:	2306      	movs	r3, #6
 80033de:	6063      	str	r3, [r4, #4]
 80033e0:	2300      	movs	r3, #0
 80033e2:	9303      	str	r3, [sp, #12]
 80033e4:	ab08      	add	r3, sp, #32
 80033e6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80033ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ee:	ab07      	add	r3, sp, #28
 80033f0:	6861      	ldr	r1, [r4, #4]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	6022      	str	r2, [r4, #0]
 80033f6:	f10d 031b 	add.w	r3, sp, #27
 80033fa:	4628      	mov	r0, r5
 80033fc:	f7ff fef5 	bl	80031ea <__cvt>
 8003400:	9b04      	ldr	r3, [sp, #16]
 8003402:	9907      	ldr	r1, [sp, #28]
 8003404:	2b47      	cmp	r3, #71	; 0x47
 8003406:	4680      	mov	r8, r0
 8003408:	d108      	bne.n	800341c <_printf_float+0x10c>
 800340a:	1cc8      	adds	r0, r1, #3
 800340c:	db02      	blt.n	8003414 <_printf_float+0x104>
 800340e:	6863      	ldr	r3, [r4, #4]
 8003410:	4299      	cmp	r1, r3
 8003412:	dd41      	ble.n	8003498 <_printf_float+0x188>
 8003414:	f1a9 0902 	sub.w	r9, r9, #2
 8003418:	fa5f f989 	uxtb.w	r9, r9
 800341c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003420:	d820      	bhi.n	8003464 <_printf_float+0x154>
 8003422:	3901      	subs	r1, #1
 8003424:	464a      	mov	r2, r9
 8003426:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800342a:	9107      	str	r1, [sp, #28]
 800342c:	f7ff ff2f 	bl	800328e <__exponent>
 8003430:	9a08      	ldr	r2, [sp, #32]
 8003432:	9004      	str	r0, [sp, #16]
 8003434:	1813      	adds	r3, r2, r0
 8003436:	2a01      	cmp	r2, #1
 8003438:	6123      	str	r3, [r4, #16]
 800343a:	dc02      	bgt.n	8003442 <_printf_float+0x132>
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	07d2      	lsls	r2, r2, #31
 8003440:	d501      	bpl.n	8003446 <_printf_float+0x136>
 8003442:	3301      	adds	r3, #1
 8003444:	6123      	str	r3, [r4, #16]
 8003446:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0a2      	beq.n	8003394 <_printf_float+0x84>
 800344e:	232d      	movs	r3, #45	; 0x2d
 8003450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003454:	e79e      	b.n	8003394 <_printf_float+0x84>
 8003456:	9904      	ldr	r1, [sp, #16]
 8003458:	2947      	cmp	r1, #71	; 0x47
 800345a:	d1c1      	bne.n	80033e0 <_printf_float+0xd0>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1bf      	bne.n	80033e0 <_printf_float+0xd0>
 8003460:	2301      	movs	r3, #1
 8003462:	e7bc      	b.n	80033de <_printf_float+0xce>
 8003464:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003468:	d118      	bne.n	800349c <_printf_float+0x18c>
 800346a:	2900      	cmp	r1, #0
 800346c:	6863      	ldr	r3, [r4, #4]
 800346e:	dd0b      	ble.n	8003488 <_printf_float+0x178>
 8003470:	6121      	str	r1, [r4, #16]
 8003472:	b913      	cbnz	r3, 800347a <_printf_float+0x16a>
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	07d0      	lsls	r0, r2, #31
 8003478:	d502      	bpl.n	8003480 <_printf_float+0x170>
 800347a:	3301      	adds	r3, #1
 800347c:	440b      	add	r3, r1
 800347e:	6123      	str	r3, [r4, #16]
 8003480:	2300      	movs	r3, #0
 8003482:	65a1      	str	r1, [r4, #88]	; 0x58
 8003484:	9304      	str	r3, [sp, #16]
 8003486:	e7de      	b.n	8003446 <_printf_float+0x136>
 8003488:	b913      	cbnz	r3, 8003490 <_printf_float+0x180>
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	07d2      	lsls	r2, r2, #31
 800348e:	d501      	bpl.n	8003494 <_printf_float+0x184>
 8003490:	3302      	adds	r3, #2
 8003492:	e7f4      	b.n	800347e <_printf_float+0x16e>
 8003494:	2301      	movs	r3, #1
 8003496:	e7f2      	b.n	800347e <_printf_float+0x16e>
 8003498:	f04f 0967 	mov.w	r9, #103	; 0x67
 800349c:	9b08      	ldr	r3, [sp, #32]
 800349e:	4299      	cmp	r1, r3
 80034a0:	db05      	blt.n	80034ae <_printf_float+0x19e>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	6121      	str	r1, [r4, #16]
 80034a6:	07d8      	lsls	r0, r3, #31
 80034a8:	d5ea      	bpl.n	8003480 <_printf_float+0x170>
 80034aa:	1c4b      	adds	r3, r1, #1
 80034ac:	e7e7      	b.n	800347e <_printf_float+0x16e>
 80034ae:	2900      	cmp	r1, #0
 80034b0:	bfd4      	ite	le
 80034b2:	f1c1 0202 	rsble	r2, r1, #2
 80034b6:	2201      	movgt	r2, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	e7e0      	b.n	800347e <_printf_float+0x16e>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	055a      	lsls	r2, r3, #21
 80034c0:	d407      	bmi.n	80034d2 <_printf_float+0x1c2>
 80034c2:	6923      	ldr	r3, [r4, #16]
 80034c4:	4642      	mov	r2, r8
 80034c6:	4631      	mov	r1, r6
 80034c8:	4628      	mov	r0, r5
 80034ca:	47b8      	blx	r7
 80034cc:	3001      	adds	r0, #1
 80034ce:	d12a      	bne.n	8003526 <_printf_float+0x216>
 80034d0:	e76a      	b.n	80033a8 <_printf_float+0x98>
 80034d2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034d6:	f240 80e0 	bls.w	800369a <_printf_float+0x38a>
 80034da:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80034de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80034e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e6:	d133      	bne.n	8003550 <_printf_float+0x240>
 80034e8:	4a37      	ldr	r2, [pc, #220]	; (80035c8 <_printf_float+0x2b8>)
 80034ea:	2301      	movs	r3, #1
 80034ec:	4631      	mov	r1, r6
 80034ee:	4628      	mov	r0, r5
 80034f0:	47b8      	blx	r7
 80034f2:	3001      	adds	r0, #1
 80034f4:	f43f af58 	beq.w	80033a8 <_printf_float+0x98>
 80034f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	db02      	blt.n	8003506 <_printf_float+0x1f6>
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	07d8      	lsls	r0, r3, #31
 8003504:	d50f      	bpl.n	8003526 <_printf_float+0x216>
 8003506:	4653      	mov	r3, sl
 8003508:	465a      	mov	r2, fp
 800350a:	4631      	mov	r1, r6
 800350c:	4628      	mov	r0, r5
 800350e:	47b8      	blx	r7
 8003510:	3001      	adds	r0, #1
 8003512:	f43f af49 	beq.w	80033a8 <_printf_float+0x98>
 8003516:	f04f 0800 	mov.w	r8, #0
 800351a:	f104 091a 	add.w	r9, r4, #26
 800351e:	9b08      	ldr	r3, [sp, #32]
 8003520:	3b01      	subs	r3, #1
 8003522:	4543      	cmp	r3, r8
 8003524:	dc09      	bgt.n	800353a <_printf_float+0x22a>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	079b      	lsls	r3, r3, #30
 800352a:	f100 8106 	bmi.w	800373a <_printf_float+0x42a>
 800352e:	68e0      	ldr	r0, [r4, #12]
 8003530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003532:	4298      	cmp	r0, r3
 8003534:	bfb8      	it	lt
 8003536:	4618      	movlt	r0, r3
 8003538:	e738      	b.n	80033ac <_printf_float+0x9c>
 800353a:	2301      	movs	r3, #1
 800353c:	464a      	mov	r2, r9
 800353e:	4631      	mov	r1, r6
 8003540:	4628      	mov	r0, r5
 8003542:	47b8      	blx	r7
 8003544:	3001      	adds	r0, #1
 8003546:	f43f af2f 	beq.w	80033a8 <_printf_float+0x98>
 800354a:	f108 0801 	add.w	r8, r8, #1
 800354e:	e7e6      	b.n	800351e <_printf_float+0x20e>
 8003550:	9b07      	ldr	r3, [sp, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	dc3a      	bgt.n	80035cc <_printf_float+0x2bc>
 8003556:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <_printf_float+0x2b8>)
 8003558:	2301      	movs	r3, #1
 800355a:	4631      	mov	r1, r6
 800355c:	4628      	mov	r0, r5
 800355e:	47b8      	blx	r7
 8003560:	3001      	adds	r0, #1
 8003562:	f43f af21 	beq.w	80033a8 <_printf_float+0x98>
 8003566:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800356a:	4313      	orrs	r3, r2
 800356c:	d102      	bne.n	8003574 <_printf_float+0x264>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	07d9      	lsls	r1, r3, #31
 8003572:	d5d8      	bpl.n	8003526 <_printf_float+0x216>
 8003574:	4653      	mov	r3, sl
 8003576:	465a      	mov	r2, fp
 8003578:	4631      	mov	r1, r6
 800357a:	4628      	mov	r0, r5
 800357c:	47b8      	blx	r7
 800357e:	3001      	adds	r0, #1
 8003580:	f43f af12 	beq.w	80033a8 <_printf_float+0x98>
 8003584:	f04f 0900 	mov.w	r9, #0
 8003588:	f104 0a1a 	add.w	sl, r4, #26
 800358c:	9b07      	ldr	r3, [sp, #28]
 800358e:	425b      	negs	r3, r3
 8003590:	454b      	cmp	r3, r9
 8003592:	dc01      	bgt.n	8003598 <_printf_float+0x288>
 8003594:	9b08      	ldr	r3, [sp, #32]
 8003596:	e795      	b.n	80034c4 <_printf_float+0x1b4>
 8003598:	2301      	movs	r3, #1
 800359a:	4652      	mov	r2, sl
 800359c:	4631      	mov	r1, r6
 800359e:	4628      	mov	r0, r5
 80035a0:	47b8      	blx	r7
 80035a2:	3001      	adds	r0, #1
 80035a4:	f43f af00 	beq.w	80033a8 <_printf_float+0x98>
 80035a8:	f109 0901 	add.w	r9, r9, #1
 80035ac:	e7ee      	b.n	800358c <_printf_float+0x27c>
 80035ae:	bf00      	nop
 80035b0:	ffffffff 	.word	0xffffffff
 80035b4:	7fefffff 	.word	0x7fefffff
 80035b8:	08005a38 	.word	0x08005a38
 80035bc:	08005a3c 	.word	0x08005a3c
 80035c0:	08005a40 	.word	0x08005a40
 80035c4:	08005a44 	.word	0x08005a44
 80035c8:	08005a48 	.word	0x08005a48
 80035cc:	9a08      	ldr	r2, [sp, #32]
 80035ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035d0:	429a      	cmp	r2, r3
 80035d2:	bfa8      	it	ge
 80035d4:	461a      	movge	r2, r3
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	4691      	mov	r9, r2
 80035da:	dc38      	bgt.n	800364e <_printf_float+0x33e>
 80035dc:	2300      	movs	r3, #0
 80035de:	9305      	str	r3, [sp, #20]
 80035e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035e4:	f104 021a 	add.w	r2, r4, #26
 80035e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035ea:	9905      	ldr	r1, [sp, #20]
 80035ec:	9304      	str	r3, [sp, #16]
 80035ee:	eba3 0309 	sub.w	r3, r3, r9
 80035f2:	428b      	cmp	r3, r1
 80035f4:	dc33      	bgt.n	800365e <_printf_float+0x34e>
 80035f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	db3c      	blt.n	8003678 <_printf_float+0x368>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	07da      	lsls	r2, r3, #31
 8003602:	d439      	bmi.n	8003678 <_printf_float+0x368>
 8003604:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8003608:	eba2 0903 	sub.w	r9, r2, r3
 800360c:	9b04      	ldr	r3, [sp, #16]
 800360e:	1ad2      	subs	r2, r2, r3
 8003610:	4591      	cmp	r9, r2
 8003612:	bfa8      	it	ge
 8003614:	4691      	movge	r9, r2
 8003616:	f1b9 0f00 	cmp.w	r9, #0
 800361a:	dc35      	bgt.n	8003688 <_printf_float+0x378>
 800361c:	f04f 0800 	mov.w	r8, #0
 8003620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003624:	f104 0a1a 	add.w	sl, r4, #26
 8003628:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	eba3 0309 	sub.w	r3, r3, r9
 8003632:	4543      	cmp	r3, r8
 8003634:	f77f af77 	ble.w	8003526 <_printf_float+0x216>
 8003638:	2301      	movs	r3, #1
 800363a:	4652      	mov	r2, sl
 800363c:	4631      	mov	r1, r6
 800363e:	4628      	mov	r0, r5
 8003640:	47b8      	blx	r7
 8003642:	3001      	adds	r0, #1
 8003644:	f43f aeb0 	beq.w	80033a8 <_printf_float+0x98>
 8003648:	f108 0801 	add.w	r8, r8, #1
 800364c:	e7ec      	b.n	8003628 <_printf_float+0x318>
 800364e:	4613      	mov	r3, r2
 8003650:	4631      	mov	r1, r6
 8003652:	4642      	mov	r2, r8
 8003654:	4628      	mov	r0, r5
 8003656:	47b8      	blx	r7
 8003658:	3001      	adds	r0, #1
 800365a:	d1bf      	bne.n	80035dc <_printf_float+0x2cc>
 800365c:	e6a4      	b.n	80033a8 <_printf_float+0x98>
 800365e:	2301      	movs	r3, #1
 8003660:	4631      	mov	r1, r6
 8003662:	4628      	mov	r0, r5
 8003664:	9204      	str	r2, [sp, #16]
 8003666:	47b8      	blx	r7
 8003668:	3001      	adds	r0, #1
 800366a:	f43f ae9d 	beq.w	80033a8 <_printf_float+0x98>
 800366e:	9b05      	ldr	r3, [sp, #20]
 8003670:	9a04      	ldr	r2, [sp, #16]
 8003672:	3301      	adds	r3, #1
 8003674:	9305      	str	r3, [sp, #20]
 8003676:	e7b7      	b.n	80035e8 <_printf_float+0x2d8>
 8003678:	4653      	mov	r3, sl
 800367a:	465a      	mov	r2, fp
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	d1be      	bne.n	8003604 <_printf_float+0x2f4>
 8003686:	e68f      	b.n	80033a8 <_printf_float+0x98>
 8003688:	9a04      	ldr	r2, [sp, #16]
 800368a:	464b      	mov	r3, r9
 800368c:	4442      	add	r2, r8
 800368e:	4631      	mov	r1, r6
 8003690:	4628      	mov	r0, r5
 8003692:	47b8      	blx	r7
 8003694:	3001      	adds	r0, #1
 8003696:	d1c1      	bne.n	800361c <_printf_float+0x30c>
 8003698:	e686      	b.n	80033a8 <_printf_float+0x98>
 800369a:	9a08      	ldr	r2, [sp, #32]
 800369c:	2a01      	cmp	r2, #1
 800369e:	dc01      	bgt.n	80036a4 <_printf_float+0x394>
 80036a0:	07db      	lsls	r3, r3, #31
 80036a2:	d537      	bpl.n	8003714 <_printf_float+0x404>
 80036a4:	2301      	movs	r3, #1
 80036a6:	4642      	mov	r2, r8
 80036a8:	4631      	mov	r1, r6
 80036aa:	4628      	mov	r0, r5
 80036ac:	47b8      	blx	r7
 80036ae:	3001      	adds	r0, #1
 80036b0:	f43f ae7a 	beq.w	80033a8 <_printf_float+0x98>
 80036b4:	4653      	mov	r3, sl
 80036b6:	465a      	mov	r2, fp
 80036b8:	4631      	mov	r1, r6
 80036ba:	4628      	mov	r0, r5
 80036bc:	47b8      	blx	r7
 80036be:	3001      	adds	r0, #1
 80036c0:	f43f ae72 	beq.w	80033a8 <_printf_float+0x98>
 80036c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80036c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	9b08      	ldr	r3, [sp, #32]
 80036d2:	d01a      	beq.n	800370a <_printf_float+0x3fa>
 80036d4:	3b01      	subs	r3, #1
 80036d6:	f108 0201 	add.w	r2, r8, #1
 80036da:	4631      	mov	r1, r6
 80036dc:	4628      	mov	r0, r5
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	d10e      	bne.n	8003702 <_printf_float+0x3f2>
 80036e4:	e660      	b.n	80033a8 <_printf_float+0x98>
 80036e6:	2301      	movs	r3, #1
 80036e8:	464a      	mov	r2, r9
 80036ea:	4631      	mov	r1, r6
 80036ec:	4628      	mov	r0, r5
 80036ee:	47b8      	blx	r7
 80036f0:	3001      	adds	r0, #1
 80036f2:	f43f ae59 	beq.w	80033a8 <_printf_float+0x98>
 80036f6:	f108 0801 	add.w	r8, r8, #1
 80036fa:	9b08      	ldr	r3, [sp, #32]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	4543      	cmp	r3, r8
 8003700:	dcf1      	bgt.n	80036e6 <_printf_float+0x3d6>
 8003702:	9b04      	ldr	r3, [sp, #16]
 8003704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003708:	e6dd      	b.n	80034c6 <_printf_float+0x1b6>
 800370a:	f04f 0800 	mov.w	r8, #0
 800370e:	f104 091a 	add.w	r9, r4, #26
 8003712:	e7f2      	b.n	80036fa <_printf_float+0x3ea>
 8003714:	2301      	movs	r3, #1
 8003716:	4642      	mov	r2, r8
 8003718:	e7df      	b.n	80036da <_printf_float+0x3ca>
 800371a:	2301      	movs	r3, #1
 800371c:	464a      	mov	r2, r9
 800371e:	4631      	mov	r1, r6
 8003720:	4628      	mov	r0, r5
 8003722:	47b8      	blx	r7
 8003724:	3001      	adds	r0, #1
 8003726:	f43f ae3f 	beq.w	80033a8 <_printf_float+0x98>
 800372a:	f108 0801 	add.w	r8, r8, #1
 800372e:	68e3      	ldr	r3, [r4, #12]
 8003730:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003732:	1a5b      	subs	r3, r3, r1
 8003734:	4543      	cmp	r3, r8
 8003736:	dcf0      	bgt.n	800371a <_printf_float+0x40a>
 8003738:	e6f9      	b.n	800352e <_printf_float+0x21e>
 800373a:	f04f 0800 	mov.w	r8, #0
 800373e:	f104 0919 	add.w	r9, r4, #25
 8003742:	e7f4      	b.n	800372e <_printf_float+0x41e>

08003744 <_printf_common>:
 8003744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003748:	4616      	mov	r6, r2
 800374a:	4699      	mov	r9, r3
 800374c:	688a      	ldr	r2, [r1, #8]
 800374e:	690b      	ldr	r3, [r1, #16]
 8003750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003754:	4293      	cmp	r3, r2
 8003756:	bfb8      	it	lt
 8003758:	4613      	movlt	r3, r2
 800375a:	6033      	str	r3, [r6, #0]
 800375c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003760:	4607      	mov	r7, r0
 8003762:	460c      	mov	r4, r1
 8003764:	b10a      	cbz	r2, 800376a <_printf_common+0x26>
 8003766:	3301      	adds	r3, #1
 8003768:	6033      	str	r3, [r6, #0]
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	0699      	lsls	r1, r3, #26
 800376e:	bf42      	ittt	mi
 8003770:	6833      	ldrmi	r3, [r6, #0]
 8003772:	3302      	addmi	r3, #2
 8003774:	6033      	strmi	r3, [r6, #0]
 8003776:	6825      	ldr	r5, [r4, #0]
 8003778:	f015 0506 	ands.w	r5, r5, #6
 800377c:	d106      	bne.n	800378c <_printf_common+0x48>
 800377e:	f104 0a19 	add.w	sl, r4, #25
 8003782:	68e3      	ldr	r3, [r4, #12]
 8003784:	6832      	ldr	r2, [r6, #0]
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	42ab      	cmp	r3, r5
 800378a:	dc26      	bgt.n	80037da <_printf_common+0x96>
 800378c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003790:	1e13      	subs	r3, r2, #0
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	bf18      	it	ne
 8003796:	2301      	movne	r3, #1
 8003798:	0692      	lsls	r2, r2, #26
 800379a:	d42b      	bmi.n	80037f4 <_printf_common+0xb0>
 800379c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037a0:	4649      	mov	r1, r9
 80037a2:	4638      	mov	r0, r7
 80037a4:	47c0      	blx	r8
 80037a6:	3001      	adds	r0, #1
 80037a8:	d01e      	beq.n	80037e8 <_printf_common+0xa4>
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	6922      	ldr	r2, [r4, #16]
 80037ae:	f003 0306 	and.w	r3, r3, #6
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	bf02      	ittt	eq
 80037b6:	68e5      	ldreq	r5, [r4, #12]
 80037b8:	6833      	ldreq	r3, [r6, #0]
 80037ba:	1aed      	subeq	r5, r5, r3
 80037bc:	68a3      	ldr	r3, [r4, #8]
 80037be:	bf0c      	ite	eq
 80037c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037c4:	2500      	movne	r5, #0
 80037c6:	4293      	cmp	r3, r2
 80037c8:	bfc4      	itt	gt
 80037ca:	1a9b      	subgt	r3, r3, r2
 80037cc:	18ed      	addgt	r5, r5, r3
 80037ce:	2600      	movs	r6, #0
 80037d0:	341a      	adds	r4, #26
 80037d2:	42b5      	cmp	r5, r6
 80037d4:	d11a      	bne.n	800380c <_printf_common+0xc8>
 80037d6:	2000      	movs	r0, #0
 80037d8:	e008      	b.n	80037ec <_printf_common+0xa8>
 80037da:	2301      	movs	r3, #1
 80037dc:	4652      	mov	r2, sl
 80037de:	4649      	mov	r1, r9
 80037e0:	4638      	mov	r0, r7
 80037e2:	47c0      	blx	r8
 80037e4:	3001      	adds	r0, #1
 80037e6:	d103      	bne.n	80037f0 <_printf_common+0xac>
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f0:	3501      	adds	r5, #1
 80037f2:	e7c6      	b.n	8003782 <_printf_common+0x3e>
 80037f4:	18e1      	adds	r1, r4, r3
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	2030      	movs	r0, #48	; 0x30
 80037fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037fe:	4422      	add	r2, r4
 8003800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003808:	3302      	adds	r3, #2
 800380a:	e7c7      	b.n	800379c <_printf_common+0x58>
 800380c:	2301      	movs	r3, #1
 800380e:	4622      	mov	r2, r4
 8003810:	4649      	mov	r1, r9
 8003812:	4638      	mov	r0, r7
 8003814:	47c0      	blx	r8
 8003816:	3001      	adds	r0, #1
 8003818:	d0e6      	beq.n	80037e8 <_printf_common+0xa4>
 800381a:	3601      	adds	r6, #1
 800381c:	e7d9      	b.n	80037d2 <_printf_common+0x8e>
	...

08003820 <_printf_i>:
 8003820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003824:	7e0f      	ldrb	r7, [r1, #24]
 8003826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003828:	2f78      	cmp	r7, #120	; 0x78
 800382a:	4691      	mov	r9, r2
 800382c:	4680      	mov	r8, r0
 800382e:	460c      	mov	r4, r1
 8003830:	469a      	mov	sl, r3
 8003832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003836:	d807      	bhi.n	8003848 <_printf_i+0x28>
 8003838:	2f62      	cmp	r7, #98	; 0x62
 800383a:	d80a      	bhi.n	8003852 <_printf_i+0x32>
 800383c:	2f00      	cmp	r7, #0
 800383e:	f000 80d4 	beq.w	80039ea <_printf_i+0x1ca>
 8003842:	2f58      	cmp	r7, #88	; 0x58
 8003844:	f000 80c0 	beq.w	80039c8 <_printf_i+0x1a8>
 8003848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800384c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003850:	e03a      	b.n	80038c8 <_printf_i+0xa8>
 8003852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003856:	2b15      	cmp	r3, #21
 8003858:	d8f6      	bhi.n	8003848 <_printf_i+0x28>
 800385a:	a101      	add	r1, pc, #4	; (adr r1, 8003860 <_printf_i+0x40>)
 800385c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003860:	080038b9 	.word	0x080038b9
 8003864:	080038cd 	.word	0x080038cd
 8003868:	08003849 	.word	0x08003849
 800386c:	08003849 	.word	0x08003849
 8003870:	08003849 	.word	0x08003849
 8003874:	08003849 	.word	0x08003849
 8003878:	080038cd 	.word	0x080038cd
 800387c:	08003849 	.word	0x08003849
 8003880:	08003849 	.word	0x08003849
 8003884:	08003849 	.word	0x08003849
 8003888:	08003849 	.word	0x08003849
 800388c:	080039d1 	.word	0x080039d1
 8003890:	080038f9 	.word	0x080038f9
 8003894:	0800398b 	.word	0x0800398b
 8003898:	08003849 	.word	0x08003849
 800389c:	08003849 	.word	0x08003849
 80038a0:	080039f3 	.word	0x080039f3
 80038a4:	08003849 	.word	0x08003849
 80038a8:	080038f9 	.word	0x080038f9
 80038ac:	08003849 	.word	0x08003849
 80038b0:	08003849 	.word	0x08003849
 80038b4:	08003993 	.word	0x08003993
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	1d1a      	adds	r2, r3, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	602a      	str	r2, [r5, #0]
 80038c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038c8:	2301      	movs	r3, #1
 80038ca:	e09f      	b.n	8003a0c <_printf_i+0x1ec>
 80038cc:	6820      	ldr	r0, [r4, #0]
 80038ce:	682b      	ldr	r3, [r5, #0]
 80038d0:	0607      	lsls	r7, r0, #24
 80038d2:	f103 0104 	add.w	r1, r3, #4
 80038d6:	6029      	str	r1, [r5, #0]
 80038d8:	d501      	bpl.n	80038de <_printf_i+0xbe>
 80038da:	681e      	ldr	r6, [r3, #0]
 80038dc:	e003      	b.n	80038e6 <_printf_i+0xc6>
 80038de:	0646      	lsls	r6, r0, #25
 80038e0:	d5fb      	bpl.n	80038da <_printf_i+0xba>
 80038e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80038e6:	2e00      	cmp	r6, #0
 80038e8:	da03      	bge.n	80038f2 <_printf_i+0xd2>
 80038ea:	232d      	movs	r3, #45	; 0x2d
 80038ec:	4276      	negs	r6, r6
 80038ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038f2:	485a      	ldr	r0, [pc, #360]	; (8003a5c <_printf_i+0x23c>)
 80038f4:	230a      	movs	r3, #10
 80038f6:	e012      	b.n	800391e <_printf_i+0xfe>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	6820      	ldr	r0, [r4, #0]
 80038fc:	1d19      	adds	r1, r3, #4
 80038fe:	6029      	str	r1, [r5, #0]
 8003900:	0605      	lsls	r5, r0, #24
 8003902:	d501      	bpl.n	8003908 <_printf_i+0xe8>
 8003904:	681e      	ldr	r6, [r3, #0]
 8003906:	e002      	b.n	800390e <_printf_i+0xee>
 8003908:	0641      	lsls	r1, r0, #25
 800390a:	d5fb      	bpl.n	8003904 <_printf_i+0xe4>
 800390c:	881e      	ldrh	r6, [r3, #0]
 800390e:	4853      	ldr	r0, [pc, #332]	; (8003a5c <_printf_i+0x23c>)
 8003910:	2f6f      	cmp	r7, #111	; 0x6f
 8003912:	bf0c      	ite	eq
 8003914:	2308      	moveq	r3, #8
 8003916:	230a      	movne	r3, #10
 8003918:	2100      	movs	r1, #0
 800391a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800391e:	6865      	ldr	r5, [r4, #4]
 8003920:	60a5      	str	r5, [r4, #8]
 8003922:	2d00      	cmp	r5, #0
 8003924:	bfa2      	ittt	ge
 8003926:	6821      	ldrge	r1, [r4, #0]
 8003928:	f021 0104 	bicge.w	r1, r1, #4
 800392c:	6021      	strge	r1, [r4, #0]
 800392e:	b90e      	cbnz	r6, 8003934 <_printf_i+0x114>
 8003930:	2d00      	cmp	r5, #0
 8003932:	d04b      	beq.n	80039cc <_printf_i+0x1ac>
 8003934:	4615      	mov	r5, r2
 8003936:	fbb6 f1f3 	udiv	r1, r6, r3
 800393a:	fb03 6711 	mls	r7, r3, r1, r6
 800393e:	5dc7      	ldrb	r7, [r0, r7]
 8003940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003944:	4637      	mov	r7, r6
 8003946:	42bb      	cmp	r3, r7
 8003948:	460e      	mov	r6, r1
 800394a:	d9f4      	bls.n	8003936 <_printf_i+0x116>
 800394c:	2b08      	cmp	r3, #8
 800394e:	d10b      	bne.n	8003968 <_printf_i+0x148>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	07de      	lsls	r6, r3, #31
 8003954:	d508      	bpl.n	8003968 <_printf_i+0x148>
 8003956:	6923      	ldr	r3, [r4, #16]
 8003958:	6861      	ldr	r1, [r4, #4]
 800395a:	4299      	cmp	r1, r3
 800395c:	bfde      	ittt	le
 800395e:	2330      	movle	r3, #48	; 0x30
 8003960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003964:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003968:	1b52      	subs	r2, r2, r5
 800396a:	6122      	str	r2, [r4, #16]
 800396c:	f8cd a000 	str.w	sl, [sp]
 8003970:	464b      	mov	r3, r9
 8003972:	aa03      	add	r2, sp, #12
 8003974:	4621      	mov	r1, r4
 8003976:	4640      	mov	r0, r8
 8003978:	f7ff fee4 	bl	8003744 <_printf_common>
 800397c:	3001      	adds	r0, #1
 800397e:	d14a      	bne.n	8003a16 <_printf_i+0x1f6>
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	b004      	add	sp, #16
 8003986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	f043 0320 	orr.w	r3, r3, #32
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	4833      	ldr	r0, [pc, #204]	; (8003a60 <_printf_i+0x240>)
 8003994:	2778      	movs	r7, #120	; 0x78
 8003996:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	6829      	ldr	r1, [r5, #0]
 800399e:	061f      	lsls	r7, r3, #24
 80039a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80039a4:	d402      	bmi.n	80039ac <_printf_i+0x18c>
 80039a6:	065f      	lsls	r7, r3, #25
 80039a8:	bf48      	it	mi
 80039aa:	b2b6      	uxthmi	r6, r6
 80039ac:	07df      	lsls	r7, r3, #31
 80039ae:	bf48      	it	mi
 80039b0:	f043 0320 	orrmi.w	r3, r3, #32
 80039b4:	6029      	str	r1, [r5, #0]
 80039b6:	bf48      	it	mi
 80039b8:	6023      	strmi	r3, [r4, #0]
 80039ba:	b91e      	cbnz	r6, 80039c4 <_printf_i+0x1a4>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	f023 0320 	bic.w	r3, r3, #32
 80039c2:	6023      	str	r3, [r4, #0]
 80039c4:	2310      	movs	r3, #16
 80039c6:	e7a7      	b.n	8003918 <_printf_i+0xf8>
 80039c8:	4824      	ldr	r0, [pc, #144]	; (8003a5c <_printf_i+0x23c>)
 80039ca:	e7e4      	b.n	8003996 <_printf_i+0x176>
 80039cc:	4615      	mov	r5, r2
 80039ce:	e7bd      	b.n	800394c <_printf_i+0x12c>
 80039d0:	682b      	ldr	r3, [r5, #0]
 80039d2:	6826      	ldr	r6, [r4, #0]
 80039d4:	6961      	ldr	r1, [r4, #20]
 80039d6:	1d18      	adds	r0, r3, #4
 80039d8:	6028      	str	r0, [r5, #0]
 80039da:	0635      	lsls	r5, r6, #24
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	d501      	bpl.n	80039e4 <_printf_i+0x1c4>
 80039e0:	6019      	str	r1, [r3, #0]
 80039e2:	e002      	b.n	80039ea <_printf_i+0x1ca>
 80039e4:	0670      	lsls	r0, r6, #25
 80039e6:	d5fb      	bpl.n	80039e0 <_printf_i+0x1c0>
 80039e8:	8019      	strh	r1, [r3, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	6123      	str	r3, [r4, #16]
 80039ee:	4615      	mov	r5, r2
 80039f0:	e7bc      	b.n	800396c <_printf_i+0x14c>
 80039f2:	682b      	ldr	r3, [r5, #0]
 80039f4:	1d1a      	adds	r2, r3, #4
 80039f6:	602a      	str	r2, [r5, #0]
 80039f8:	681d      	ldr	r5, [r3, #0]
 80039fa:	6862      	ldr	r2, [r4, #4]
 80039fc:	2100      	movs	r1, #0
 80039fe:	4628      	mov	r0, r5
 8003a00:	f7fc fc1e 	bl	8000240 <memchr>
 8003a04:	b108      	cbz	r0, 8003a0a <_printf_i+0x1ea>
 8003a06:	1b40      	subs	r0, r0, r5
 8003a08:	6060      	str	r0, [r4, #4]
 8003a0a:	6863      	ldr	r3, [r4, #4]
 8003a0c:	6123      	str	r3, [r4, #16]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a14:	e7aa      	b.n	800396c <_printf_i+0x14c>
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	462a      	mov	r2, r5
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	47d0      	blx	sl
 8003a20:	3001      	adds	r0, #1
 8003a22:	d0ad      	beq.n	8003980 <_printf_i+0x160>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	079b      	lsls	r3, r3, #30
 8003a28:	d413      	bmi.n	8003a52 <_printf_i+0x232>
 8003a2a:	68e0      	ldr	r0, [r4, #12]
 8003a2c:	9b03      	ldr	r3, [sp, #12]
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	bfb8      	it	lt
 8003a32:	4618      	movlt	r0, r3
 8003a34:	e7a6      	b.n	8003984 <_printf_i+0x164>
 8003a36:	2301      	movs	r3, #1
 8003a38:	4632      	mov	r2, r6
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	47d0      	blx	sl
 8003a40:	3001      	adds	r0, #1
 8003a42:	d09d      	beq.n	8003980 <_printf_i+0x160>
 8003a44:	3501      	adds	r5, #1
 8003a46:	68e3      	ldr	r3, [r4, #12]
 8003a48:	9903      	ldr	r1, [sp, #12]
 8003a4a:	1a5b      	subs	r3, r3, r1
 8003a4c:	42ab      	cmp	r3, r5
 8003a4e:	dcf2      	bgt.n	8003a36 <_printf_i+0x216>
 8003a50:	e7eb      	b.n	8003a2a <_printf_i+0x20a>
 8003a52:	2500      	movs	r5, #0
 8003a54:	f104 0619 	add.w	r6, r4, #25
 8003a58:	e7f5      	b.n	8003a46 <_printf_i+0x226>
 8003a5a:	bf00      	nop
 8003a5c:	08005a4a 	.word	0x08005a4a
 8003a60:	08005a5b 	.word	0x08005a5b

08003a64 <std>:
 8003a64:	2300      	movs	r3, #0
 8003a66:	b510      	push	{r4, lr}
 8003a68:	4604      	mov	r4, r0
 8003a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a72:	6083      	str	r3, [r0, #8]
 8003a74:	8181      	strh	r1, [r0, #12]
 8003a76:	6643      	str	r3, [r0, #100]	; 0x64
 8003a78:	81c2      	strh	r2, [r0, #14]
 8003a7a:	6183      	str	r3, [r0, #24]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	2208      	movs	r2, #8
 8003a80:	305c      	adds	r0, #92	; 0x5c
 8003a82:	f000 f8f4 	bl	8003c6e <memset>
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <std+0x58>)
 8003a88:	6263      	str	r3, [r4, #36]	; 0x24
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <std+0x5c>)
 8003a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <std+0x60>)
 8003a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <std+0x64>)
 8003a94:	6323      	str	r3, [r4, #48]	; 0x30
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <std+0x68>)
 8003a98:	6224      	str	r4, [r4, #32]
 8003a9a:	429c      	cmp	r4, r3
 8003a9c:	d006      	beq.n	8003aac <std+0x48>
 8003a9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003aa2:	4294      	cmp	r4, r2
 8003aa4:	d002      	beq.n	8003aac <std+0x48>
 8003aa6:	33d0      	adds	r3, #208	; 0xd0
 8003aa8:	429c      	cmp	r4, r3
 8003aaa:	d105      	bne.n	8003ab8 <std+0x54>
 8003aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ab4:	f000 b958 	b.w	8003d68 <__retarget_lock_init_recursive>
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	bf00      	nop
 8003abc:	08003be9 	.word	0x08003be9
 8003ac0:	08003c0b 	.word	0x08003c0b
 8003ac4:	08003c43 	.word	0x08003c43
 8003ac8:	08003c67 	.word	0x08003c67
 8003acc:	200002d4 	.word	0x200002d4

08003ad0 <stdio_exit_handler>:
 8003ad0:	4a02      	ldr	r2, [pc, #8]	; (8003adc <stdio_exit_handler+0xc>)
 8003ad2:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <stdio_exit_handler+0x10>)
 8003ad4:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <stdio_exit_handler+0x14>)
 8003ad6:	f000 b869 	b.w	8003bac <_fwalk_sglue>
 8003ada:	bf00      	nop
 8003adc:	2000000c 	.word	0x2000000c
 8003ae0:	0800535d 	.word	0x0800535d
 8003ae4:	20000018 	.word	0x20000018

08003ae8 <cleanup_stdio>:
 8003ae8:	6841      	ldr	r1, [r0, #4]
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <cleanup_stdio+0x34>)
 8003aec:	4299      	cmp	r1, r3
 8003aee:	b510      	push	{r4, lr}
 8003af0:	4604      	mov	r4, r0
 8003af2:	d001      	beq.n	8003af8 <cleanup_stdio+0x10>
 8003af4:	f001 fc32 	bl	800535c <_fflush_r>
 8003af8:	68a1      	ldr	r1, [r4, #8]
 8003afa:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <cleanup_stdio+0x38>)
 8003afc:	4299      	cmp	r1, r3
 8003afe:	d002      	beq.n	8003b06 <cleanup_stdio+0x1e>
 8003b00:	4620      	mov	r0, r4
 8003b02:	f001 fc2b 	bl	800535c <_fflush_r>
 8003b06:	68e1      	ldr	r1, [r4, #12]
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <cleanup_stdio+0x3c>)
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d004      	beq.n	8003b18 <cleanup_stdio+0x30>
 8003b0e:	4620      	mov	r0, r4
 8003b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b14:	f001 bc22 	b.w	800535c <_fflush_r>
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200002d4 	.word	0x200002d4
 8003b20:	2000033c 	.word	0x2000033c
 8003b24:	200003a4 	.word	0x200003a4

08003b28 <global_stdio_init.part.0>:
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <global_stdio_init.part.0+0x30>)
 8003b2c:	4c0b      	ldr	r4, [pc, #44]	; (8003b5c <global_stdio_init.part.0+0x34>)
 8003b2e:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <global_stdio_init.part.0+0x38>)
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	4620      	mov	r0, r4
 8003b34:	2200      	movs	r2, #0
 8003b36:	2104      	movs	r1, #4
 8003b38:	f7ff ff94 	bl	8003a64 <std>
 8003b3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b40:	2201      	movs	r2, #1
 8003b42:	2109      	movs	r1, #9
 8003b44:	f7ff ff8e 	bl	8003a64 <std>
 8003b48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b52:	2112      	movs	r1, #18
 8003b54:	f7ff bf86 	b.w	8003a64 <std>
 8003b58:	2000040c 	.word	0x2000040c
 8003b5c:	200002d4 	.word	0x200002d4
 8003b60:	08003ad1 	.word	0x08003ad1

08003b64 <__sfp_lock_acquire>:
 8003b64:	4801      	ldr	r0, [pc, #4]	; (8003b6c <__sfp_lock_acquire+0x8>)
 8003b66:	f000 b900 	b.w	8003d6a <__retarget_lock_acquire_recursive>
 8003b6a:	bf00      	nop
 8003b6c:	20000415 	.word	0x20000415

08003b70 <__sfp_lock_release>:
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <__sfp_lock_release+0x8>)
 8003b72:	f000 b8fb 	b.w	8003d6c <__retarget_lock_release_recursive>
 8003b76:	bf00      	nop
 8003b78:	20000415 	.word	0x20000415

08003b7c <__sinit>:
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	4604      	mov	r4, r0
 8003b80:	f7ff fff0 	bl	8003b64 <__sfp_lock_acquire>
 8003b84:	6a23      	ldr	r3, [r4, #32]
 8003b86:	b11b      	cbz	r3, 8003b90 <__sinit+0x14>
 8003b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b8c:	f7ff bff0 	b.w	8003b70 <__sfp_lock_release>
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <__sinit+0x28>)
 8003b92:	6223      	str	r3, [r4, #32]
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <__sinit+0x2c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f5      	bne.n	8003b88 <__sinit+0xc>
 8003b9c:	f7ff ffc4 	bl	8003b28 <global_stdio_init.part.0>
 8003ba0:	e7f2      	b.n	8003b88 <__sinit+0xc>
 8003ba2:	bf00      	nop
 8003ba4:	08003ae9 	.word	0x08003ae9
 8003ba8:	2000040c 	.word	0x2000040c

08003bac <_fwalk_sglue>:
 8003bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	4688      	mov	r8, r1
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8003bc0:	d505      	bpl.n	8003bce <_fwalk_sglue+0x22>
 8003bc2:	6824      	ldr	r4, [r4, #0]
 8003bc4:	2c00      	cmp	r4, #0
 8003bc6:	d1f7      	bne.n	8003bb8 <_fwalk_sglue+0xc>
 8003bc8:	4630      	mov	r0, r6
 8003bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bce:	89ab      	ldrh	r3, [r5, #12]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d907      	bls.n	8003be4 <_fwalk_sglue+0x38>
 8003bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	d003      	beq.n	8003be4 <_fwalk_sglue+0x38>
 8003bdc:	4629      	mov	r1, r5
 8003bde:	4638      	mov	r0, r7
 8003be0:	47c0      	blx	r8
 8003be2:	4306      	orrs	r6, r0
 8003be4:	3568      	adds	r5, #104	; 0x68
 8003be6:	e7e9      	b.n	8003bbc <_fwalk_sglue+0x10>

08003be8 <__sread>:
 8003be8:	b510      	push	{r4, lr}
 8003bea:	460c      	mov	r4, r1
 8003bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf0:	f000 f86c 	bl	8003ccc <_read_r>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	bfab      	itete	ge
 8003bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8003bfc:	181b      	addge	r3, r3, r0
 8003bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c02:	bfac      	ite	ge
 8003c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c06:	81a3      	strhlt	r3, [r4, #12]
 8003c08:	bd10      	pop	{r4, pc}

08003c0a <__swrite>:
 8003c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0e:	461f      	mov	r7, r3
 8003c10:	898b      	ldrh	r3, [r1, #12]
 8003c12:	05db      	lsls	r3, r3, #23
 8003c14:	4605      	mov	r5, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	4616      	mov	r6, r2
 8003c1a:	d505      	bpl.n	8003c28 <__swrite+0x1e>
 8003c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c20:	2302      	movs	r3, #2
 8003c22:	2200      	movs	r2, #0
 8003c24:	f000 f840 	bl	8003ca8 <_lseek_r>
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c32:	81a3      	strh	r3, [r4, #12]
 8003c34:	4632      	mov	r2, r6
 8003c36:	463b      	mov	r3, r7
 8003c38:	4628      	mov	r0, r5
 8003c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c3e:	f000 b857 	b.w	8003cf0 <_write_r>

08003c42 <__sseek>:
 8003c42:	b510      	push	{r4, lr}
 8003c44:	460c      	mov	r4, r1
 8003c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c4a:	f000 f82d 	bl	8003ca8 <_lseek_r>
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	bf15      	itete	ne
 8003c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c5e:	81a3      	strheq	r3, [r4, #12]
 8003c60:	bf18      	it	ne
 8003c62:	81a3      	strhne	r3, [r4, #12]
 8003c64:	bd10      	pop	{r4, pc}

08003c66 <__sclose>:
 8003c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c6a:	f000 b80d 	b.w	8003c88 <_close_r>

08003c6e <memset>:
 8003c6e:	4402      	add	r2, r0
 8003c70:	4603      	mov	r3, r0
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d100      	bne.n	8003c78 <memset+0xa>
 8003c76:	4770      	bx	lr
 8003c78:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7c:	e7f9      	b.n	8003c72 <memset+0x4>
	...

08003c80 <_localeconv_r>:
 8003c80:	4800      	ldr	r0, [pc, #0]	; (8003c84 <_localeconv_r+0x4>)
 8003c82:	4770      	bx	lr
 8003c84:	20000158 	.word	0x20000158

08003c88 <_close_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	4d06      	ldr	r5, [pc, #24]	; (8003ca4 <_close_r+0x1c>)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	602b      	str	r3, [r5, #0]
 8003c94:	f7fd f833 	bl	8000cfe <_close>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d102      	bne.n	8003ca2 <_close_r+0x1a>
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	b103      	cbz	r3, 8003ca2 <_close_r+0x1a>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	20000410 	.word	0x20000410

08003ca8 <_lseek_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	4d07      	ldr	r5, [pc, #28]	; (8003cc8 <_lseek_r+0x20>)
 8003cac:	4604      	mov	r4, r0
 8003cae:	4608      	mov	r0, r1
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	602a      	str	r2, [r5, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f7fd f848 	bl	8000d4c <_lseek>
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	d102      	bne.n	8003cc6 <_lseek_r+0x1e>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	b103      	cbz	r3, 8003cc6 <_lseek_r+0x1e>
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	bd38      	pop	{r3, r4, r5, pc}
 8003cc8:	20000410 	.word	0x20000410

08003ccc <_read_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4d07      	ldr	r5, [pc, #28]	; (8003cec <_read_r+0x20>)
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	4608      	mov	r0, r1
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	602a      	str	r2, [r5, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f7fc ffd6 	bl	8000c8c <_read>
 8003ce0:	1c43      	adds	r3, r0, #1
 8003ce2:	d102      	bne.n	8003cea <_read_r+0x1e>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	b103      	cbz	r3, 8003cea <_read_r+0x1e>
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	bd38      	pop	{r3, r4, r5, pc}
 8003cec:	20000410 	.word	0x20000410

08003cf0 <_write_r>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	4d07      	ldr	r5, [pc, #28]	; (8003d10 <_write_r+0x20>)
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	602a      	str	r2, [r5, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f7fc ffe1 	bl	8000cc6 <_write>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d102      	bne.n	8003d0e <_write_r+0x1e>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b103      	cbz	r3, 8003d0e <_write_r+0x1e>
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	20000410 	.word	0x20000410

08003d14 <__errno>:
 8003d14:	4b01      	ldr	r3, [pc, #4]	; (8003d1c <__errno+0x8>)
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000064 	.word	0x20000064

08003d20 <__libc_init_array>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	4d0d      	ldr	r5, [pc, #52]	; (8003d58 <__libc_init_array+0x38>)
 8003d24:	4c0d      	ldr	r4, [pc, #52]	; (8003d5c <__libc_init_array+0x3c>)
 8003d26:	1b64      	subs	r4, r4, r5
 8003d28:	10a4      	asrs	r4, r4, #2
 8003d2a:	2600      	movs	r6, #0
 8003d2c:	42a6      	cmp	r6, r4
 8003d2e:	d109      	bne.n	8003d44 <__libc_init_array+0x24>
 8003d30:	4d0b      	ldr	r5, [pc, #44]	; (8003d60 <__libc_init_array+0x40>)
 8003d32:	4c0c      	ldr	r4, [pc, #48]	; (8003d64 <__libc_init_array+0x44>)
 8003d34:	f001 fe66 	bl	8005a04 <_init>
 8003d38:	1b64      	subs	r4, r4, r5
 8003d3a:	10a4      	asrs	r4, r4, #2
 8003d3c:	2600      	movs	r6, #0
 8003d3e:	42a6      	cmp	r6, r4
 8003d40:	d105      	bne.n	8003d4e <__libc_init_array+0x2e>
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d48:	4798      	blx	r3
 8003d4a:	3601      	adds	r6, #1
 8003d4c:	e7ee      	b.n	8003d2c <__libc_init_array+0xc>
 8003d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d52:	4798      	blx	r3
 8003d54:	3601      	adds	r6, #1
 8003d56:	e7f2      	b.n	8003d3e <__libc_init_array+0x1e>
 8003d58:	08005db4 	.word	0x08005db4
 8003d5c:	08005db4 	.word	0x08005db4
 8003d60:	08005db4 	.word	0x08005db4
 8003d64:	08005db8 	.word	0x08005db8

08003d68 <__retarget_lock_init_recursive>:
 8003d68:	4770      	bx	lr

08003d6a <__retarget_lock_acquire_recursive>:
 8003d6a:	4770      	bx	lr

08003d6c <__retarget_lock_release_recursive>:
 8003d6c:	4770      	bx	lr

08003d6e <quorem>:
 8003d6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d72:	6903      	ldr	r3, [r0, #16]
 8003d74:	690c      	ldr	r4, [r1, #16]
 8003d76:	42a3      	cmp	r3, r4
 8003d78:	4607      	mov	r7, r0
 8003d7a:	db7e      	blt.n	8003e7a <quorem+0x10c>
 8003d7c:	3c01      	subs	r4, #1
 8003d7e:	f101 0814 	add.w	r8, r1, #20
 8003d82:	f100 0514 	add.w	r5, r0, #20
 8003d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d94:	3301      	adds	r3, #1
 8003d96:	429a      	cmp	r2, r3
 8003d98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003d9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003da4:	d331      	bcc.n	8003e0a <quorem+0x9c>
 8003da6:	f04f 0e00 	mov.w	lr, #0
 8003daa:	4640      	mov	r0, r8
 8003dac:	46ac      	mov	ip, r5
 8003dae:	46f2      	mov	sl, lr
 8003db0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003db4:	b293      	uxth	r3, r2
 8003db6:	fb06 e303 	mla	r3, r6, r3, lr
 8003dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003dbe:	0c1a      	lsrs	r2, r3, #16
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	ebaa 0303 	sub.w	r3, sl, r3
 8003dc6:	f8dc a000 	ldr.w	sl, [ip]
 8003dca:	fa13 f38a 	uxtah	r3, r3, sl
 8003dce:	fb06 220e 	mla	r2, r6, lr, r2
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	9b00      	ldr	r3, [sp, #0]
 8003dd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003dda:	b292      	uxth	r2, r2
 8003ddc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003de0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003de4:	f8bd 3000 	ldrh.w	r3, [sp]
 8003de8:	4581      	cmp	r9, r0
 8003dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dee:	f84c 3b04 	str.w	r3, [ip], #4
 8003df2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003df6:	d2db      	bcs.n	8003db0 <quorem+0x42>
 8003df8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003dfc:	b92b      	cbnz	r3, 8003e0a <quorem+0x9c>
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	3b04      	subs	r3, #4
 8003e02:	429d      	cmp	r5, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	d32c      	bcc.n	8003e62 <quorem+0xf4>
 8003e08:	613c      	str	r4, [r7, #16]
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f001 f920 	bl	8005050 <__mcmp>
 8003e10:	2800      	cmp	r0, #0
 8003e12:	db22      	blt.n	8003e5a <quorem+0xec>
 8003e14:	3601      	adds	r6, #1
 8003e16:	4629      	mov	r1, r5
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e1e:	f8d1 c000 	ldr.w	ip, [r1]
 8003e22:	b293      	uxth	r3, r2
 8003e24:	1ac3      	subs	r3, r0, r3
 8003e26:	0c12      	lsrs	r2, r2, #16
 8003e28:	fa13 f38c 	uxtah	r3, r3, ip
 8003e2c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e3a:	45c1      	cmp	r9, r8
 8003e3c:	f841 3b04 	str.w	r3, [r1], #4
 8003e40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003e44:	d2e9      	bcs.n	8003e1a <quorem+0xac>
 8003e46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e4e:	b922      	cbnz	r2, 8003e5a <quorem+0xec>
 8003e50:	3b04      	subs	r3, #4
 8003e52:	429d      	cmp	r5, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	d30a      	bcc.n	8003e6e <quorem+0x100>
 8003e58:	613c      	str	r4, [r7, #16]
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	b003      	add	sp, #12
 8003e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	3b04      	subs	r3, #4
 8003e66:	2a00      	cmp	r2, #0
 8003e68:	d1ce      	bne.n	8003e08 <quorem+0x9a>
 8003e6a:	3c01      	subs	r4, #1
 8003e6c:	e7c9      	b.n	8003e02 <quorem+0x94>
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	3b04      	subs	r3, #4
 8003e72:	2a00      	cmp	r2, #0
 8003e74:	d1f0      	bne.n	8003e58 <quorem+0xea>
 8003e76:	3c01      	subs	r4, #1
 8003e78:	e7eb      	b.n	8003e52 <quorem+0xe4>
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	e7ee      	b.n	8003e5c <quorem+0xee>
	...

08003e80 <_dtoa_r>:
 8003e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e84:	ed2d 8b02 	vpush	{d8}
 8003e88:	69c5      	ldr	r5, [r0, #28]
 8003e8a:	b091      	sub	sp, #68	; 0x44
 8003e8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003e90:	ec59 8b10 	vmov	r8, r9, d0
 8003e94:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8003e96:	9106      	str	r1, [sp, #24]
 8003e98:	4606      	mov	r6, r0
 8003e9a:	9208      	str	r2, [sp, #32]
 8003e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8003e9e:	b975      	cbnz	r5, 8003ebe <_dtoa_r+0x3e>
 8003ea0:	2010      	movs	r0, #16
 8003ea2:	f000 fda5 	bl	80049f0 <malloc>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	61f0      	str	r0, [r6, #28]
 8003eaa:	b920      	cbnz	r0, 8003eb6 <_dtoa_r+0x36>
 8003eac:	4ba6      	ldr	r3, [pc, #664]	; (8004148 <_dtoa_r+0x2c8>)
 8003eae:	21ef      	movs	r1, #239	; 0xef
 8003eb0:	48a6      	ldr	r0, [pc, #664]	; (800414c <_dtoa_r+0x2cc>)
 8003eb2:	f001 fa99 	bl	80053e8 <__assert_func>
 8003eb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003eba:	6005      	str	r5, [r0, #0]
 8003ebc:	60c5      	str	r5, [r0, #12]
 8003ebe:	69f3      	ldr	r3, [r6, #28]
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	b151      	cbz	r1, 8003eda <_dtoa_r+0x5a>
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	604a      	str	r2, [r1, #4]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4093      	lsls	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f000 fe82 	bl	8004bd8 <_Bfree>
 8003ed4:	69f3      	ldr	r3, [r6, #28]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	f1b9 0300 	subs.w	r3, r9, #0
 8003ede:	bfbb      	ittet	lt
 8003ee0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ee4:	9303      	strlt	r3, [sp, #12]
 8003ee6:	2300      	movge	r3, #0
 8003ee8:	2201      	movlt	r2, #1
 8003eea:	bfac      	ite	ge
 8003eec:	6023      	strge	r3, [r4, #0]
 8003eee:	6022      	strlt	r2, [r4, #0]
 8003ef0:	4b97      	ldr	r3, [pc, #604]	; (8004150 <_dtoa_r+0x2d0>)
 8003ef2:	9c03      	ldr	r4, [sp, #12]
 8003ef4:	43a3      	bics	r3, r4
 8003ef6:	d11c      	bne.n	8003f32 <_dtoa_r+0xb2>
 8003ef8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003efa:	f242 730f 	movw	r3, #9999	; 0x270f
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8003f04:	ea53 0308 	orrs.w	r3, r3, r8
 8003f08:	f000 84fb 	beq.w	8004902 <_dtoa_r+0xa82>
 8003f0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f0e:	b963      	cbnz	r3, 8003f2a <_dtoa_r+0xaa>
 8003f10:	4b90      	ldr	r3, [pc, #576]	; (8004154 <_dtoa_r+0x2d4>)
 8003f12:	e020      	b.n	8003f56 <_dtoa_r+0xd6>
 8003f14:	4b90      	ldr	r3, [pc, #576]	; (8004158 <_dtoa_r+0x2d8>)
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	3308      	adds	r3, #8
 8003f1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	9801      	ldr	r0, [sp, #4]
 8003f20:	b011      	add	sp, #68	; 0x44
 8003f22:	ecbd 8b02 	vpop	{d8}
 8003f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2a:	4b8a      	ldr	r3, [pc, #552]	; (8004154 <_dtoa_r+0x2d4>)
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	3303      	adds	r3, #3
 8003f30:	e7f3      	b.n	8003f1a <_dtoa_r+0x9a>
 8003f32:	ed9d 8b02 	vldr	d8, [sp, #8]
 8003f36:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3e:	d10c      	bne.n	8003f5a <_dtoa_r+0xda>
 8003f40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f42:	2301      	movs	r3, #1
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 84d7 	beq.w	80048fc <_dtoa_r+0xa7c>
 8003f4e:	4b83      	ldr	r3, [pc, #524]	; (800415c <_dtoa_r+0x2dc>)
 8003f50:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	e7e1      	b.n	8003f1e <_dtoa_r+0x9e>
 8003f5a:	aa0e      	add	r2, sp, #56	; 0x38
 8003f5c:	a90f      	add	r1, sp, #60	; 0x3c
 8003f5e:	4630      	mov	r0, r6
 8003f60:	eeb0 0b48 	vmov.f64	d0, d8
 8003f64:	f001 f91a 	bl	800519c <__d2b>
 8003f68:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8003f6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f6e:	4605      	mov	r5, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d046      	beq.n	8004002 <_dtoa_r+0x182>
 8003f74:	eeb0 7b48 	vmov.f64	d7, d8
 8003f78:	ee18 1a90 	vmov	r1, s17
 8003f7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003f80:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8003f84:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003f88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	ee07 1a90 	vmov	s15, r1
 8003f92:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8003f96:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004130 <_dtoa_r+0x2b0>
 8003f9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f9e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8004138 <_dtoa_r+0x2b8>
 8003fa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8003fa6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004140 <_dtoa_r+0x2c0>
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8003fb2:	eeb0 7b46 	vmov.f64	d7, d6
 8003fb6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8003fba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8003fbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc6:	ee16 ba90 	vmov	fp, s13
 8003fca:	9009      	str	r0, [sp, #36]	; 0x24
 8003fcc:	d508      	bpl.n	8003fe0 <_dtoa_r+0x160>
 8003fce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003fd2:	eeb4 6b47 	vcmp.f64	d6, d7
 8003fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fda:	bf18      	it	ne
 8003fdc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8003fe0:	f1bb 0f16 	cmp.w	fp, #22
 8003fe4:	d82b      	bhi.n	800403e <_dtoa_r+0x1be>
 8003fe6:	495e      	ldr	r1, [pc, #376]	; (8004160 <_dtoa_r+0x2e0>)
 8003fe8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003fec:	ed91 7b00 	vldr	d7, [r1]
 8003ff0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8003ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff8:	d501      	bpl.n	8003ffe <_dtoa_r+0x17e>
 8003ffa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003ffe:	2100      	movs	r1, #0
 8004000:	e01e      	b.n	8004040 <_dtoa_r+0x1c0>
 8004002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004004:	4413      	add	r3, r2
 8004006:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800400a:	2920      	cmp	r1, #32
 800400c:	bfc1      	itttt	gt
 800400e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8004012:	408c      	lslgt	r4, r1
 8004014:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8004018:	fa28 f101 	lsrgt.w	r1, r8, r1
 800401c:	bfd6      	itet	le
 800401e:	f1c1 0120 	rsble	r1, r1, #32
 8004022:	4321      	orrgt	r1, r4
 8004024:	fa08 f101 	lslle.w	r1, r8, r1
 8004028:	ee07 1a90 	vmov	s15, r1
 800402c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004030:	3b01      	subs	r3, #1
 8004032:	ee17 1a90 	vmov	r1, s15
 8004036:	2001      	movs	r0, #1
 8004038:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800403c:	e7a7      	b.n	8003f8e <_dtoa_r+0x10e>
 800403e:	2101      	movs	r1, #1
 8004040:	1ad2      	subs	r2, r2, r3
 8004042:	1e53      	subs	r3, r2, #1
 8004044:	9305      	str	r3, [sp, #20]
 8004046:	bf45      	ittet	mi
 8004048:	f1c2 0301 	rsbmi	r3, r2, #1
 800404c:	9304      	strmi	r3, [sp, #16]
 800404e:	2300      	movpl	r3, #0
 8004050:	2300      	movmi	r3, #0
 8004052:	bf4c      	ite	mi
 8004054:	9305      	strmi	r3, [sp, #20]
 8004056:	9304      	strpl	r3, [sp, #16]
 8004058:	f1bb 0f00 	cmp.w	fp, #0
 800405c:	910b      	str	r1, [sp, #44]	; 0x2c
 800405e:	db18      	blt.n	8004092 <_dtoa_r+0x212>
 8004060:	9b05      	ldr	r3, [sp, #20]
 8004062:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004066:	445b      	add	r3, fp
 8004068:	9305      	str	r3, [sp, #20]
 800406a:	2300      	movs	r3, #0
 800406c:	9a06      	ldr	r2, [sp, #24]
 800406e:	2a09      	cmp	r2, #9
 8004070:	d848      	bhi.n	8004104 <_dtoa_r+0x284>
 8004072:	2a05      	cmp	r2, #5
 8004074:	bfc4      	itt	gt
 8004076:	3a04      	subgt	r2, #4
 8004078:	9206      	strgt	r2, [sp, #24]
 800407a:	9a06      	ldr	r2, [sp, #24]
 800407c:	f1a2 0202 	sub.w	r2, r2, #2
 8004080:	bfcc      	ite	gt
 8004082:	2400      	movgt	r4, #0
 8004084:	2401      	movle	r4, #1
 8004086:	2a03      	cmp	r2, #3
 8004088:	d847      	bhi.n	800411a <_dtoa_r+0x29a>
 800408a:	e8df f002 	tbb	[pc, r2]
 800408e:	2d0b      	.short	0x2d0b
 8004090:	392b      	.short	0x392b
 8004092:	9b04      	ldr	r3, [sp, #16]
 8004094:	2200      	movs	r2, #0
 8004096:	eba3 030b 	sub.w	r3, r3, fp
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	920a      	str	r2, [sp, #40]	; 0x28
 800409e:	f1cb 0300 	rsb	r3, fp, #0
 80040a2:	e7e3      	b.n	800406c <_dtoa_r+0x1ec>
 80040a4:	2200      	movs	r2, #0
 80040a6:	9207      	str	r2, [sp, #28]
 80040a8:	9a08      	ldr	r2, [sp, #32]
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	dc38      	bgt.n	8004120 <_dtoa_r+0x2a0>
 80040ae:	f04f 0a01 	mov.w	sl, #1
 80040b2:	46d1      	mov	r9, sl
 80040b4:	4652      	mov	r2, sl
 80040b6:	f8cd a020 	str.w	sl, [sp, #32]
 80040ba:	69f7      	ldr	r7, [r6, #28]
 80040bc:	2100      	movs	r1, #0
 80040be:	2004      	movs	r0, #4
 80040c0:	f100 0c14 	add.w	ip, r0, #20
 80040c4:	4594      	cmp	ip, r2
 80040c6:	d930      	bls.n	800412a <_dtoa_r+0x2aa>
 80040c8:	6079      	str	r1, [r7, #4]
 80040ca:	4630      	mov	r0, r6
 80040cc:	930d      	str	r3, [sp, #52]	; 0x34
 80040ce:	f000 fd43 	bl	8004b58 <_Balloc>
 80040d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040d4:	9001      	str	r0, [sp, #4]
 80040d6:	4602      	mov	r2, r0
 80040d8:	2800      	cmp	r0, #0
 80040da:	d145      	bne.n	8004168 <_dtoa_r+0x2e8>
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <_dtoa_r+0x2e4>)
 80040de:	f240 11af 	movw	r1, #431	; 0x1af
 80040e2:	e6e5      	b.n	8003eb0 <_dtoa_r+0x30>
 80040e4:	2201      	movs	r2, #1
 80040e6:	e7de      	b.n	80040a6 <_dtoa_r+0x226>
 80040e8:	2200      	movs	r2, #0
 80040ea:	9207      	str	r2, [sp, #28]
 80040ec:	9a08      	ldr	r2, [sp, #32]
 80040ee:	eb0b 0a02 	add.w	sl, fp, r2
 80040f2:	f10a 0901 	add.w	r9, sl, #1
 80040f6:	464a      	mov	r2, r9
 80040f8:	2a01      	cmp	r2, #1
 80040fa:	bfb8      	it	lt
 80040fc:	2201      	movlt	r2, #1
 80040fe:	e7dc      	b.n	80040ba <_dtoa_r+0x23a>
 8004100:	2201      	movs	r2, #1
 8004102:	e7f2      	b.n	80040ea <_dtoa_r+0x26a>
 8004104:	2401      	movs	r4, #1
 8004106:	2200      	movs	r2, #0
 8004108:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800410c:	f04f 3aff 	mov.w	sl, #4294967295
 8004110:	2100      	movs	r1, #0
 8004112:	46d1      	mov	r9, sl
 8004114:	2212      	movs	r2, #18
 8004116:	9108      	str	r1, [sp, #32]
 8004118:	e7cf      	b.n	80040ba <_dtoa_r+0x23a>
 800411a:	2201      	movs	r2, #1
 800411c:	9207      	str	r2, [sp, #28]
 800411e:	e7f5      	b.n	800410c <_dtoa_r+0x28c>
 8004120:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004124:	46d1      	mov	r9, sl
 8004126:	4652      	mov	r2, sl
 8004128:	e7c7      	b.n	80040ba <_dtoa_r+0x23a>
 800412a:	3101      	adds	r1, #1
 800412c:	0040      	lsls	r0, r0, #1
 800412e:	e7c7      	b.n	80040c0 <_dtoa_r+0x240>
 8004130:	636f4361 	.word	0x636f4361
 8004134:	3fd287a7 	.word	0x3fd287a7
 8004138:	8b60c8b3 	.word	0x8b60c8b3
 800413c:	3fc68a28 	.word	0x3fc68a28
 8004140:	509f79fb 	.word	0x509f79fb
 8004144:	3fd34413 	.word	0x3fd34413
 8004148:	08005a79 	.word	0x08005a79
 800414c:	08005a90 	.word	0x08005a90
 8004150:	7ff00000 	.word	0x7ff00000
 8004154:	08005a75 	.word	0x08005a75
 8004158:	08005a6c 	.word	0x08005a6c
 800415c:	08005a49 	.word	0x08005a49
 8004160:	08005b80 	.word	0x08005b80
 8004164:	08005ae8 	.word	0x08005ae8
 8004168:	69f2      	ldr	r2, [r6, #28]
 800416a:	9901      	ldr	r1, [sp, #4]
 800416c:	6011      	str	r1, [r2, #0]
 800416e:	f1b9 0f0e 	cmp.w	r9, #14
 8004172:	d86c      	bhi.n	800424e <_dtoa_r+0x3ce>
 8004174:	2c00      	cmp	r4, #0
 8004176:	d06a      	beq.n	800424e <_dtoa_r+0x3ce>
 8004178:	f1bb 0f00 	cmp.w	fp, #0
 800417c:	f340 80a0 	ble.w	80042c0 <_dtoa_r+0x440>
 8004180:	4ac1      	ldr	r2, [pc, #772]	; (8004488 <_dtoa_r+0x608>)
 8004182:	f00b 010f 	and.w	r1, fp, #15
 8004186:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800418a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800418e:	ed92 7b00 	vldr	d7, [r2]
 8004192:	ea4f 122b 	mov.w	r2, fp, asr #4
 8004196:	f000 8087 	beq.w	80042a8 <_dtoa_r+0x428>
 800419a:	49bc      	ldr	r1, [pc, #752]	; (800448c <_dtoa_r+0x60c>)
 800419c:	ed91 6b08 	vldr	d6, [r1, #32]
 80041a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80041a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80041a8:	f002 020f 	and.w	r2, r2, #15
 80041ac:	2103      	movs	r1, #3
 80041ae:	48b7      	ldr	r0, [pc, #732]	; (800448c <_dtoa_r+0x60c>)
 80041b0:	2a00      	cmp	r2, #0
 80041b2:	d17b      	bne.n	80042ac <_dtoa_r+0x42c>
 80041b4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80041b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80041bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80041c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041c6:	2a00      	cmp	r2, #0
 80041c8:	f000 80a0 	beq.w	800430c <_dtoa_r+0x48c>
 80041cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80041d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80041d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d8:	f140 8098 	bpl.w	800430c <_dtoa_r+0x48c>
 80041dc:	f1b9 0f00 	cmp.w	r9, #0
 80041e0:	f000 8094 	beq.w	800430c <_dtoa_r+0x48c>
 80041e4:	f1ba 0f00 	cmp.w	sl, #0
 80041e8:	dd2f      	ble.n	800424a <_dtoa_r+0x3ca>
 80041ea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80041ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80041f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80041f6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80041fa:	3101      	adds	r1, #1
 80041fc:	4654      	mov	r4, sl
 80041fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004202:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004206:	ee07 1a90 	vmov	s15, r1
 800420a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800420e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004212:	ee15 7a90 	vmov	r7, s11
 8004216:	ec51 0b15 	vmov	r0, r1, d5
 800421a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800421e:	2c00      	cmp	r4, #0
 8004220:	d177      	bne.n	8004312 <_dtoa_r+0x492>
 8004222:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004226:	ee36 6b47 	vsub.f64	d6, d6, d7
 800422a:	ec41 0b17 	vmov	d7, r0, r1
 800422e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	f300 826a 	bgt.w	800470e <_dtoa_r+0x88e>
 800423a:	eeb1 7b47 	vneg.f64	d7, d7
 800423e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004246:	f100 8260 	bmi.w	800470a <_dtoa_r+0x88a>
 800424a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800424e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004250:	2a00      	cmp	r2, #0
 8004252:	f2c0 811d 	blt.w	8004490 <_dtoa_r+0x610>
 8004256:	f1bb 0f0e 	cmp.w	fp, #14
 800425a:	f300 8119 	bgt.w	8004490 <_dtoa_r+0x610>
 800425e:	4b8a      	ldr	r3, [pc, #552]	; (8004488 <_dtoa_r+0x608>)
 8004260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004264:	ed93 6b00 	vldr	d6, [r3]
 8004268:	9b08      	ldr	r3, [sp, #32]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f280 80b7 	bge.w	80043de <_dtoa_r+0x55e>
 8004270:	f1b9 0f00 	cmp.w	r9, #0
 8004274:	f300 80b3 	bgt.w	80043de <_dtoa_r+0x55e>
 8004278:	f040 8246 	bne.w	8004708 <_dtoa_r+0x888>
 800427c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004280:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004284:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004288:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	464c      	mov	r4, r9
 8004292:	464f      	mov	r7, r9
 8004294:	f280 821c 	bge.w	80046d0 <_dtoa_r+0x850>
 8004298:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800429c:	2331      	movs	r3, #49	; 0x31
 800429e:	f808 3b01 	strb.w	r3, [r8], #1
 80042a2:	f10b 0b01 	add.w	fp, fp, #1
 80042a6:	e218      	b.n	80046da <_dtoa_r+0x85a>
 80042a8:	2102      	movs	r1, #2
 80042aa:	e780      	b.n	80041ae <_dtoa_r+0x32e>
 80042ac:	07d4      	lsls	r4, r2, #31
 80042ae:	d504      	bpl.n	80042ba <_dtoa_r+0x43a>
 80042b0:	ed90 6b00 	vldr	d6, [r0]
 80042b4:	3101      	adds	r1, #1
 80042b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80042ba:	1052      	asrs	r2, r2, #1
 80042bc:	3008      	adds	r0, #8
 80042be:	e777      	b.n	80041b0 <_dtoa_r+0x330>
 80042c0:	d022      	beq.n	8004308 <_dtoa_r+0x488>
 80042c2:	f1cb 0200 	rsb	r2, fp, #0
 80042c6:	4970      	ldr	r1, [pc, #448]	; (8004488 <_dtoa_r+0x608>)
 80042c8:	f002 000f 	and.w	r0, r2, #15
 80042cc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80042d0:	ed91 7b00 	vldr	d7, [r1]
 80042d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80042d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80042dc:	486b      	ldr	r0, [pc, #428]	; (800448c <_dtoa_r+0x60c>)
 80042de:	1112      	asrs	r2, r2, #4
 80042e0:	2400      	movs	r4, #0
 80042e2:	2102      	movs	r1, #2
 80042e4:	b92a      	cbnz	r2, 80042f2 <_dtoa_r+0x472>
 80042e6:	2c00      	cmp	r4, #0
 80042e8:	f43f af6a 	beq.w	80041c0 <_dtoa_r+0x340>
 80042ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80042f0:	e766      	b.n	80041c0 <_dtoa_r+0x340>
 80042f2:	07d7      	lsls	r7, r2, #31
 80042f4:	d505      	bpl.n	8004302 <_dtoa_r+0x482>
 80042f6:	ed90 6b00 	vldr	d6, [r0]
 80042fa:	3101      	adds	r1, #1
 80042fc:	2401      	movs	r4, #1
 80042fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004302:	1052      	asrs	r2, r2, #1
 8004304:	3008      	adds	r0, #8
 8004306:	e7ed      	b.n	80042e4 <_dtoa_r+0x464>
 8004308:	2102      	movs	r1, #2
 800430a:	e759      	b.n	80041c0 <_dtoa_r+0x340>
 800430c:	465a      	mov	r2, fp
 800430e:	464c      	mov	r4, r9
 8004310:	e775      	b.n	80041fe <_dtoa_r+0x37e>
 8004312:	ec41 0b17 	vmov	d7, r0, r1
 8004316:	495c      	ldr	r1, [pc, #368]	; (8004488 <_dtoa_r+0x608>)
 8004318:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800431c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8004320:	9901      	ldr	r1, [sp, #4]
 8004322:	440c      	add	r4, r1
 8004324:	9907      	ldr	r1, [sp, #28]
 8004326:	b351      	cbz	r1, 800437e <_dtoa_r+0x4fe>
 8004328:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800432c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8004330:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004334:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004338:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800433c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004340:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004344:	ee14 1a90 	vmov	r1, s9
 8004348:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800434c:	3130      	adds	r1, #48	; 0x30
 800434e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004352:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435a:	f808 1b01 	strb.w	r1, [r8], #1
 800435e:	d439      	bmi.n	80043d4 <_dtoa_r+0x554>
 8004360:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004364:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436c:	d472      	bmi.n	8004454 <_dtoa_r+0x5d4>
 800436e:	45a0      	cmp	r8, r4
 8004370:	f43f af6b 	beq.w	800424a <_dtoa_r+0x3ca>
 8004374:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004378:	ee26 6b03 	vmul.f64	d6, d6, d3
 800437c:	e7e0      	b.n	8004340 <_dtoa_r+0x4c0>
 800437e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004382:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004386:	4620      	mov	r0, r4
 8004388:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800438c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004390:	ee14 1a90 	vmov	r1, s9
 8004394:	3130      	adds	r1, #48	; 0x30
 8004396:	f808 1b01 	strb.w	r1, [r8], #1
 800439a:	45a0      	cmp	r8, r4
 800439c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80043a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80043a4:	d118      	bne.n	80043d8 <_dtoa_r+0x558>
 80043a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80043aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80043ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80043b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b6:	dc4d      	bgt.n	8004454 <_dtoa_r+0x5d4>
 80043b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80043bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80043c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c4:	f57f af41 	bpl.w	800424a <_dtoa_r+0x3ca>
 80043c8:	4680      	mov	r8, r0
 80043ca:	3801      	subs	r0, #1
 80043cc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d0f9      	beq.n	80043c8 <_dtoa_r+0x548>
 80043d4:	4693      	mov	fp, r2
 80043d6:	e02a      	b.n	800442e <_dtoa_r+0x5ae>
 80043d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80043dc:	e7d6      	b.n	800438c <_dtoa_r+0x50c>
 80043de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80043e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80043e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80043ea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80043ee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80043f2:	ee15 3a10 	vmov	r3, s10
 80043f6:	3330      	adds	r3, #48	; 0x30
 80043f8:	f808 3b01 	strb.w	r3, [r8], #1
 80043fc:	9b01      	ldr	r3, [sp, #4]
 80043fe:	eba8 0303 	sub.w	r3, r8, r3
 8004402:	4599      	cmp	r9, r3
 8004404:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004408:	eea3 7b46 	vfms.f64	d7, d3, d6
 800440c:	d133      	bne.n	8004476 <_dtoa_r+0x5f6>
 800440e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004412:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441a:	dc1a      	bgt.n	8004452 <_dtoa_r+0x5d2>
 800441c:	eeb4 7b46 	vcmp.f64	d7, d6
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	d103      	bne.n	800442e <_dtoa_r+0x5ae>
 8004426:	ee15 3a10 	vmov	r3, s10
 800442a:	07d9      	lsls	r1, r3, #31
 800442c:	d411      	bmi.n	8004452 <_dtoa_r+0x5d2>
 800442e:	4629      	mov	r1, r5
 8004430:	4630      	mov	r0, r6
 8004432:	f000 fbd1 	bl	8004bd8 <_Bfree>
 8004436:	2300      	movs	r3, #0
 8004438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800443a:	f888 3000 	strb.w	r3, [r8]
 800443e:	f10b 0301 	add.w	r3, fp, #1
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004446:	2b00      	cmp	r3, #0
 8004448:	f43f ad69 	beq.w	8003f1e <_dtoa_r+0x9e>
 800444c:	f8c3 8000 	str.w	r8, [r3]
 8004450:	e565      	b.n	8003f1e <_dtoa_r+0x9e>
 8004452:	465a      	mov	r2, fp
 8004454:	4643      	mov	r3, r8
 8004456:	4698      	mov	r8, r3
 8004458:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800445c:	2939      	cmp	r1, #57	; 0x39
 800445e:	d106      	bne.n	800446e <_dtoa_r+0x5ee>
 8004460:	9901      	ldr	r1, [sp, #4]
 8004462:	4299      	cmp	r1, r3
 8004464:	d1f7      	bne.n	8004456 <_dtoa_r+0x5d6>
 8004466:	9801      	ldr	r0, [sp, #4]
 8004468:	2130      	movs	r1, #48	; 0x30
 800446a:	3201      	adds	r2, #1
 800446c:	7001      	strb	r1, [r0, #0]
 800446e:	7819      	ldrb	r1, [r3, #0]
 8004470:	3101      	adds	r1, #1
 8004472:	7019      	strb	r1, [r3, #0]
 8004474:	e7ae      	b.n	80043d4 <_dtoa_r+0x554>
 8004476:	ee27 7b04 	vmul.f64	d7, d7, d4
 800447a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	d1b2      	bne.n	80043ea <_dtoa_r+0x56a>
 8004484:	e7d3      	b.n	800442e <_dtoa_r+0x5ae>
 8004486:	bf00      	nop
 8004488:	08005b80 	.word	0x08005b80
 800448c:	08005b58 	.word	0x08005b58
 8004490:	9907      	ldr	r1, [sp, #28]
 8004492:	2900      	cmp	r1, #0
 8004494:	f000 80d0 	beq.w	8004638 <_dtoa_r+0x7b8>
 8004498:	9906      	ldr	r1, [sp, #24]
 800449a:	2901      	cmp	r1, #1
 800449c:	f300 80b4 	bgt.w	8004608 <_dtoa_r+0x788>
 80044a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044a2:	2900      	cmp	r1, #0
 80044a4:	f000 80ac 	beq.w	8004600 <_dtoa_r+0x780>
 80044a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80044ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80044b0:	461c      	mov	r4, r3
 80044b2:	9309      	str	r3, [sp, #36]	; 0x24
 80044b4:	9b04      	ldr	r3, [sp, #16]
 80044b6:	4413      	add	r3, r2
 80044b8:	9304      	str	r3, [sp, #16]
 80044ba:	9b05      	ldr	r3, [sp, #20]
 80044bc:	2101      	movs	r1, #1
 80044be:	4413      	add	r3, r2
 80044c0:	4630      	mov	r0, r6
 80044c2:	9305      	str	r3, [sp, #20]
 80044c4:	f000 fc3e 	bl	8004d44 <__i2b>
 80044c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ca:	4607      	mov	r7, r0
 80044cc:	f1b8 0f00 	cmp.w	r8, #0
 80044d0:	d00d      	beq.n	80044ee <_dtoa_r+0x66e>
 80044d2:	9a05      	ldr	r2, [sp, #20]
 80044d4:	2a00      	cmp	r2, #0
 80044d6:	dd0a      	ble.n	80044ee <_dtoa_r+0x66e>
 80044d8:	4542      	cmp	r2, r8
 80044da:	9904      	ldr	r1, [sp, #16]
 80044dc:	bfa8      	it	ge
 80044de:	4642      	movge	r2, r8
 80044e0:	1a89      	subs	r1, r1, r2
 80044e2:	9104      	str	r1, [sp, #16]
 80044e4:	9905      	ldr	r1, [sp, #20]
 80044e6:	eba8 0802 	sub.w	r8, r8, r2
 80044ea:	1a8a      	subs	r2, r1, r2
 80044ec:	9205      	str	r2, [sp, #20]
 80044ee:	b303      	cbz	r3, 8004532 <_dtoa_r+0x6b2>
 80044f0:	9a07      	ldr	r2, [sp, #28]
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	f000 80a5 	beq.w	8004642 <_dtoa_r+0x7c2>
 80044f8:	2c00      	cmp	r4, #0
 80044fa:	dd13      	ble.n	8004524 <_dtoa_r+0x6a4>
 80044fc:	4639      	mov	r1, r7
 80044fe:	4622      	mov	r2, r4
 8004500:	4630      	mov	r0, r6
 8004502:	930d      	str	r3, [sp, #52]	; 0x34
 8004504:	f000 fcde 	bl	8004ec4 <__pow5mult>
 8004508:	462a      	mov	r2, r5
 800450a:	4601      	mov	r1, r0
 800450c:	4607      	mov	r7, r0
 800450e:	4630      	mov	r0, r6
 8004510:	f000 fc2e 	bl	8004d70 <__multiply>
 8004514:	4629      	mov	r1, r5
 8004516:	9009      	str	r0, [sp, #36]	; 0x24
 8004518:	4630      	mov	r0, r6
 800451a:	f000 fb5d 	bl	8004bd8 <_Bfree>
 800451e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004522:	4615      	mov	r5, r2
 8004524:	1b1a      	subs	r2, r3, r4
 8004526:	d004      	beq.n	8004532 <_dtoa_r+0x6b2>
 8004528:	4629      	mov	r1, r5
 800452a:	4630      	mov	r0, r6
 800452c:	f000 fcca 	bl	8004ec4 <__pow5mult>
 8004530:	4605      	mov	r5, r0
 8004532:	2101      	movs	r1, #1
 8004534:	4630      	mov	r0, r6
 8004536:	f000 fc05 	bl	8004d44 <__i2b>
 800453a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800453c:	2b00      	cmp	r3, #0
 800453e:	4604      	mov	r4, r0
 8004540:	f340 8081 	ble.w	8004646 <_dtoa_r+0x7c6>
 8004544:	461a      	mov	r2, r3
 8004546:	4601      	mov	r1, r0
 8004548:	4630      	mov	r0, r6
 800454a:	f000 fcbb 	bl	8004ec4 <__pow5mult>
 800454e:	9b06      	ldr	r3, [sp, #24]
 8004550:	2b01      	cmp	r3, #1
 8004552:	4604      	mov	r4, r0
 8004554:	dd7a      	ble.n	800464c <_dtoa_r+0x7cc>
 8004556:	2300      	movs	r3, #0
 8004558:	9309      	str	r3, [sp, #36]	; 0x24
 800455a:	6922      	ldr	r2, [r4, #16]
 800455c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004560:	6910      	ldr	r0, [r2, #16]
 8004562:	f000 fba1 	bl	8004ca8 <__hi0bits>
 8004566:	f1c0 0020 	rsb	r0, r0, #32
 800456a:	9b05      	ldr	r3, [sp, #20]
 800456c:	4418      	add	r0, r3
 800456e:	f010 001f 	ands.w	r0, r0, #31
 8004572:	f000 8093 	beq.w	800469c <_dtoa_r+0x81c>
 8004576:	f1c0 0220 	rsb	r2, r0, #32
 800457a:	2a04      	cmp	r2, #4
 800457c:	f340 8085 	ble.w	800468a <_dtoa_r+0x80a>
 8004580:	9b04      	ldr	r3, [sp, #16]
 8004582:	f1c0 001c 	rsb	r0, r0, #28
 8004586:	4403      	add	r3, r0
 8004588:	9304      	str	r3, [sp, #16]
 800458a:	9b05      	ldr	r3, [sp, #20]
 800458c:	4480      	add	r8, r0
 800458e:	4403      	add	r3, r0
 8004590:	9305      	str	r3, [sp, #20]
 8004592:	9b04      	ldr	r3, [sp, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	dd05      	ble.n	80045a4 <_dtoa_r+0x724>
 8004598:	4629      	mov	r1, r5
 800459a:	461a      	mov	r2, r3
 800459c:	4630      	mov	r0, r6
 800459e:	f000 fceb 	bl	8004f78 <__lshift>
 80045a2:	4605      	mov	r5, r0
 80045a4:	9b05      	ldr	r3, [sp, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	dd05      	ble.n	80045b6 <_dtoa_r+0x736>
 80045aa:	4621      	mov	r1, r4
 80045ac:	461a      	mov	r2, r3
 80045ae:	4630      	mov	r0, r6
 80045b0:	f000 fce2 	bl	8004f78 <__lshift>
 80045b4:	4604      	mov	r4, r0
 80045b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d071      	beq.n	80046a0 <_dtoa_r+0x820>
 80045bc:	4621      	mov	r1, r4
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 fd46 	bl	8005050 <__mcmp>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	da6b      	bge.n	80046a0 <_dtoa_r+0x820>
 80045c8:	2300      	movs	r3, #0
 80045ca:	4629      	mov	r1, r5
 80045cc:	220a      	movs	r2, #10
 80045ce:	4630      	mov	r0, r6
 80045d0:	f000 fb24 	bl	8004c1c <__multadd>
 80045d4:	9b07      	ldr	r3, [sp, #28]
 80045d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80045da:	4605      	mov	r5, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8197 	beq.w	8004910 <_dtoa_r+0xa90>
 80045e2:	4639      	mov	r1, r7
 80045e4:	2300      	movs	r3, #0
 80045e6:	220a      	movs	r2, #10
 80045e8:	4630      	mov	r0, r6
 80045ea:	f000 fb17 	bl	8004c1c <__multadd>
 80045ee:	f1ba 0f00 	cmp.w	sl, #0
 80045f2:	4607      	mov	r7, r0
 80045f4:	f300 8093 	bgt.w	800471e <_dtoa_r+0x89e>
 80045f8:	9b06      	ldr	r3, [sp, #24]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	dc57      	bgt.n	80046ae <_dtoa_r+0x82e>
 80045fe:	e08e      	b.n	800471e <_dtoa_r+0x89e>
 8004600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004602:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004606:	e751      	b.n	80044ac <_dtoa_r+0x62c>
 8004608:	f109 34ff 	add.w	r4, r9, #4294967295
 800460c:	42a3      	cmp	r3, r4
 800460e:	bfbf      	itttt	lt
 8004610:	1ae2      	sublt	r2, r4, r3
 8004612:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004614:	189b      	addlt	r3, r3, r2
 8004616:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004618:	bfae      	itee	ge
 800461a:	1b1c      	subge	r4, r3, r4
 800461c:	4623      	movlt	r3, r4
 800461e:	2400      	movlt	r4, #0
 8004620:	f1b9 0f00 	cmp.w	r9, #0
 8004624:	bfb5      	itete	lt
 8004626:	9a04      	ldrlt	r2, [sp, #16]
 8004628:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800462c:	eba2 0809 	sublt.w	r8, r2, r9
 8004630:	464a      	movge	r2, r9
 8004632:	bfb8      	it	lt
 8004634:	2200      	movlt	r2, #0
 8004636:	e73c      	b.n	80044b2 <_dtoa_r+0x632>
 8004638:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800463c:	9f07      	ldr	r7, [sp, #28]
 800463e:	461c      	mov	r4, r3
 8004640:	e744      	b.n	80044cc <_dtoa_r+0x64c>
 8004642:	461a      	mov	r2, r3
 8004644:	e770      	b.n	8004528 <_dtoa_r+0x6a8>
 8004646:	9b06      	ldr	r3, [sp, #24]
 8004648:	2b01      	cmp	r3, #1
 800464a:	dc18      	bgt.n	800467e <_dtoa_r+0x7fe>
 800464c:	9b02      	ldr	r3, [sp, #8]
 800464e:	b9b3      	cbnz	r3, 800467e <_dtoa_r+0x7fe>
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004656:	b9a2      	cbnz	r2, 8004682 <_dtoa_r+0x802>
 8004658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800465c:	0d12      	lsrs	r2, r2, #20
 800465e:	0512      	lsls	r2, r2, #20
 8004660:	b18a      	cbz	r2, 8004686 <_dtoa_r+0x806>
 8004662:	9b04      	ldr	r3, [sp, #16]
 8004664:	3301      	adds	r3, #1
 8004666:	9304      	str	r3, [sp, #16]
 8004668:	9b05      	ldr	r3, [sp, #20]
 800466a:	3301      	adds	r3, #1
 800466c:	9305      	str	r3, [sp, #20]
 800466e:	2301      	movs	r3, #1
 8004670:	9309      	str	r3, [sp, #36]	; 0x24
 8004672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	f47f af70 	bne.w	800455a <_dtoa_r+0x6da>
 800467a:	2001      	movs	r0, #1
 800467c:	e775      	b.n	800456a <_dtoa_r+0x6ea>
 800467e:	2300      	movs	r3, #0
 8004680:	e7f6      	b.n	8004670 <_dtoa_r+0x7f0>
 8004682:	9b02      	ldr	r3, [sp, #8]
 8004684:	e7f4      	b.n	8004670 <_dtoa_r+0x7f0>
 8004686:	9209      	str	r2, [sp, #36]	; 0x24
 8004688:	e7f3      	b.n	8004672 <_dtoa_r+0x7f2>
 800468a:	d082      	beq.n	8004592 <_dtoa_r+0x712>
 800468c:	9b04      	ldr	r3, [sp, #16]
 800468e:	321c      	adds	r2, #28
 8004690:	4413      	add	r3, r2
 8004692:	9304      	str	r3, [sp, #16]
 8004694:	9b05      	ldr	r3, [sp, #20]
 8004696:	4490      	add	r8, r2
 8004698:	4413      	add	r3, r2
 800469a:	e779      	b.n	8004590 <_dtoa_r+0x710>
 800469c:	4602      	mov	r2, r0
 800469e:	e7f5      	b.n	800468c <_dtoa_r+0x80c>
 80046a0:	f1b9 0f00 	cmp.w	r9, #0
 80046a4:	dc36      	bgt.n	8004714 <_dtoa_r+0x894>
 80046a6:	9b06      	ldr	r3, [sp, #24]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	dd33      	ble.n	8004714 <_dtoa_r+0x894>
 80046ac:	46ca      	mov	sl, r9
 80046ae:	f1ba 0f00 	cmp.w	sl, #0
 80046b2:	d10d      	bne.n	80046d0 <_dtoa_r+0x850>
 80046b4:	4621      	mov	r1, r4
 80046b6:	4653      	mov	r3, sl
 80046b8:	2205      	movs	r2, #5
 80046ba:	4630      	mov	r0, r6
 80046bc:	f000 faae 	bl	8004c1c <__multadd>
 80046c0:	4601      	mov	r1, r0
 80046c2:	4604      	mov	r4, r0
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 fcc3 	bl	8005050 <__mcmp>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	f73f ade4 	bgt.w	8004298 <_dtoa_r+0x418>
 80046d0:	9b08      	ldr	r3, [sp, #32]
 80046d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80046d6:	ea6f 0b03 	mvn.w	fp, r3
 80046da:	f04f 0900 	mov.w	r9, #0
 80046de:	4621      	mov	r1, r4
 80046e0:	4630      	mov	r0, r6
 80046e2:	f000 fa79 	bl	8004bd8 <_Bfree>
 80046e6:	2f00      	cmp	r7, #0
 80046e8:	f43f aea1 	beq.w	800442e <_dtoa_r+0x5ae>
 80046ec:	f1b9 0f00 	cmp.w	r9, #0
 80046f0:	d005      	beq.n	80046fe <_dtoa_r+0x87e>
 80046f2:	45b9      	cmp	r9, r7
 80046f4:	d003      	beq.n	80046fe <_dtoa_r+0x87e>
 80046f6:	4649      	mov	r1, r9
 80046f8:	4630      	mov	r0, r6
 80046fa:	f000 fa6d 	bl	8004bd8 <_Bfree>
 80046fe:	4639      	mov	r1, r7
 8004700:	4630      	mov	r0, r6
 8004702:	f000 fa69 	bl	8004bd8 <_Bfree>
 8004706:	e692      	b.n	800442e <_dtoa_r+0x5ae>
 8004708:	2400      	movs	r4, #0
 800470a:	4627      	mov	r7, r4
 800470c:	e7e0      	b.n	80046d0 <_dtoa_r+0x850>
 800470e:	4693      	mov	fp, r2
 8004710:	4627      	mov	r7, r4
 8004712:	e5c1      	b.n	8004298 <_dtoa_r+0x418>
 8004714:	9b07      	ldr	r3, [sp, #28]
 8004716:	46ca      	mov	sl, r9
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8100 	beq.w	800491e <_dtoa_r+0xa9e>
 800471e:	f1b8 0f00 	cmp.w	r8, #0
 8004722:	dd05      	ble.n	8004730 <_dtoa_r+0x8b0>
 8004724:	4639      	mov	r1, r7
 8004726:	4642      	mov	r2, r8
 8004728:	4630      	mov	r0, r6
 800472a:	f000 fc25 	bl	8004f78 <__lshift>
 800472e:	4607      	mov	r7, r0
 8004730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d05d      	beq.n	80047f2 <_dtoa_r+0x972>
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4630      	mov	r0, r6
 800473a:	f000 fa0d 	bl	8004b58 <_Balloc>
 800473e:	4680      	mov	r8, r0
 8004740:	b928      	cbnz	r0, 800474e <_dtoa_r+0x8ce>
 8004742:	4b82      	ldr	r3, [pc, #520]	; (800494c <_dtoa_r+0xacc>)
 8004744:	4602      	mov	r2, r0
 8004746:	f240 21ef 	movw	r1, #751	; 0x2ef
 800474a:	f7ff bbb1 	b.w	8003eb0 <_dtoa_r+0x30>
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	3202      	adds	r2, #2
 8004752:	0092      	lsls	r2, r2, #2
 8004754:	f107 010c 	add.w	r1, r7, #12
 8004758:	300c      	adds	r0, #12
 800475a:	f000 fe37 	bl	80053cc <memcpy>
 800475e:	2201      	movs	r2, #1
 8004760:	4641      	mov	r1, r8
 8004762:	4630      	mov	r0, r6
 8004764:	f000 fc08 	bl	8004f78 <__lshift>
 8004768:	9b01      	ldr	r3, [sp, #4]
 800476a:	3301      	adds	r3, #1
 800476c:	9304      	str	r3, [sp, #16]
 800476e:	9b01      	ldr	r3, [sp, #4]
 8004770:	4453      	add	r3, sl
 8004772:	9308      	str	r3, [sp, #32]
 8004774:	9b02      	ldr	r3, [sp, #8]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	46b9      	mov	r9, r7
 800477c:	9307      	str	r3, [sp, #28]
 800477e:	4607      	mov	r7, r0
 8004780:	9b04      	ldr	r3, [sp, #16]
 8004782:	4621      	mov	r1, r4
 8004784:	3b01      	subs	r3, #1
 8004786:	4628      	mov	r0, r5
 8004788:	9302      	str	r3, [sp, #8]
 800478a:	f7ff faf0 	bl	8003d6e <quorem>
 800478e:	4603      	mov	r3, r0
 8004790:	3330      	adds	r3, #48	; 0x30
 8004792:	9005      	str	r0, [sp, #20]
 8004794:	4649      	mov	r1, r9
 8004796:	4628      	mov	r0, r5
 8004798:	9309      	str	r3, [sp, #36]	; 0x24
 800479a:	f000 fc59 	bl	8005050 <__mcmp>
 800479e:	463a      	mov	r2, r7
 80047a0:	4682      	mov	sl, r0
 80047a2:	4621      	mov	r1, r4
 80047a4:	4630      	mov	r0, r6
 80047a6:	f000 fc6f 	bl	8005088 <__mdiff>
 80047aa:	68c2      	ldr	r2, [r0, #12]
 80047ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ae:	4680      	mov	r8, r0
 80047b0:	bb0a      	cbnz	r2, 80047f6 <_dtoa_r+0x976>
 80047b2:	4601      	mov	r1, r0
 80047b4:	4628      	mov	r0, r5
 80047b6:	f000 fc4b 	bl	8005050 <__mcmp>
 80047ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047bc:	4602      	mov	r2, r0
 80047be:	4641      	mov	r1, r8
 80047c0:	4630      	mov	r0, r6
 80047c2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80047c6:	f000 fa07 	bl	8004bd8 <_Bfree>
 80047ca:	9b06      	ldr	r3, [sp, #24]
 80047cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80047d2:	ea43 0102 	orr.w	r1, r3, r2
 80047d6:	9b07      	ldr	r3, [sp, #28]
 80047d8:	4319      	orrs	r1, r3
 80047da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047dc:	d10d      	bne.n	80047fa <_dtoa_r+0x97a>
 80047de:	2b39      	cmp	r3, #57	; 0x39
 80047e0:	d029      	beq.n	8004836 <_dtoa_r+0x9b6>
 80047e2:	f1ba 0f00 	cmp.w	sl, #0
 80047e6:	dd01      	ble.n	80047ec <_dtoa_r+0x96c>
 80047e8:	9b05      	ldr	r3, [sp, #20]
 80047ea:	3331      	adds	r3, #49	; 0x31
 80047ec:	9a02      	ldr	r2, [sp, #8]
 80047ee:	7013      	strb	r3, [r2, #0]
 80047f0:	e775      	b.n	80046de <_dtoa_r+0x85e>
 80047f2:	4638      	mov	r0, r7
 80047f4:	e7b8      	b.n	8004768 <_dtoa_r+0x8e8>
 80047f6:	2201      	movs	r2, #1
 80047f8:	e7e1      	b.n	80047be <_dtoa_r+0x93e>
 80047fa:	f1ba 0f00 	cmp.w	sl, #0
 80047fe:	db06      	blt.n	800480e <_dtoa_r+0x98e>
 8004800:	9906      	ldr	r1, [sp, #24]
 8004802:	ea41 0a0a 	orr.w	sl, r1, sl
 8004806:	9907      	ldr	r1, [sp, #28]
 8004808:	ea5a 0a01 	orrs.w	sl, sl, r1
 800480c:	d120      	bne.n	8004850 <_dtoa_r+0x9d0>
 800480e:	2a00      	cmp	r2, #0
 8004810:	ddec      	ble.n	80047ec <_dtoa_r+0x96c>
 8004812:	4629      	mov	r1, r5
 8004814:	2201      	movs	r2, #1
 8004816:	4630      	mov	r0, r6
 8004818:	9304      	str	r3, [sp, #16]
 800481a:	f000 fbad 	bl	8004f78 <__lshift>
 800481e:	4621      	mov	r1, r4
 8004820:	4605      	mov	r5, r0
 8004822:	f000 fc15 	bl	8005050 <__mcmp>
 8004826:	2800      	cmp	r0, #0
 8004828:	9b04      	ldr	r3, [sp, #16]
 800482a:	dc02      	bgt.n	8004832 <_dtoa_r+0x9b2>
 800482c:	d1de      	bne.n	80047ec <_dtoa_r+0x96c>
 800482e:	07da      	lsls	r2, r3, #31
 8004830:	d5dc      	bpl.n	80047ec <_dtoa_r+0x96c>
 8004832:	2b39      	cmp	r3, #57	; 0x39
 8004834:	d1d8      	bne.n	80047e8 <_dtoa_r+0x968>
 8004836:	9a02      	ldr	r2, [sp, #8]
 8004838:	2339      	movs	r3, #57	; 0x39
 800483a:	7013      	strb	r3, [r2, #0]
 800483c:	4643      	mov	r3, r8
 800483e:	4698      	mov	r8, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004846:	2a39      	cmp	r2, #57	; 0x39
 8004848:	d051      	beq.n	80048ee <_dtoa_r+0xa6e>
 800484a:	3201      	adds	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e746      	b.n	80046de <_dtoa_r+0x85e>
 8004850:	2a00      	cmp	r2, #0
 8004852:	dd03      	ble.n	800485c <_dtoa_r+0x9dc>
 8004854:	2b39      	cmp	r3, #57	; 0x39
 8004856:	d0ee      	beq.n	8004836 <_dtoa_r+0x9b6>
 8004858:	3301      	adds	r3, #1
 800485a:	e7c7      	b.n	80047ec <_dtoa_r+0x96c>
 800485c:	9a04      	ldr	r2, [sp, #16]
 800485e:	9908      	ldr	r1, [sp, #32]
 8004860:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004864:	428a      	cmp	r2, r1
 8004866:	d02b      	beq.n	80048c0 <_dtoa_r+0xa40>
 8004868:	4629      	mov	r1, r5
 800486a:	2300      	movs	r3, #0
 800486c:	220a      	movs	r2, #10
 800486e:	4630      	mov	r0, r6
 8004870:	f000 f9d4 	bl	8004c1c <__multadd>
 8004874:	45b9      	cmp	r9, r7
 8004876:	4605      	mov	r5, r0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	f04f 020a 	mov.w	r2, #10
 8004880:	4649      	mov	r1, r9
 8004882:	4630      	mov	r0, r6
 8004884:	d107      	bne.n	8004896 <_dtoa_r+0xa16>
 8004886:	f000 f9c9 	bl	8004c1c <__multadd>
 800488a:	4681      	mov	r9, r0
 800488c:	4607      	mov	r7, r0
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	3301      	adds	r3, #1
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	e774      	b.n	8004780 <_dtoa_r+0x900>
 8004896:	f000 f9c1 	bl	8004c1c <__multadd>
 800489a:	4639      	mov	r1, r7
 800489c:	4681      	mov	r9, r0
 800489e:	2300      	movs	r3, #0
 80048a0:	220a      	movs	r2, #10
 80048a2:	4630      	mov	r0, r6
 80048a4:	f000 f9ba 	bl	8004c1c <__multadd>
 80048a8:	4607      	mov	r7, r0
 80048aa:	e7f0      	b.n	800488e <_dtoa_r+0xa0e>
 80048ac:	f1ba 0f00 	cmp.w	sl, #0
 80048b0:	9a01      	ldr	r2, [sp, #4]
 80048b2:	bfcc      	ite	gt
 80048b4:	46d0      	movgt	r8, sl
 80048b6:	f04f 0801 	movle.w	r8, #1
 80048ba:	4490      	add	r8, r2
 80048bc:	f04f 0900 	mov.w	r9, #0
 80048c0:	4629      	mov	r1, r5
 80048c2:	2201      	movs	r2, #1
 80048c4:	4630      	mov	r0, r6
 80048c6:	9302      	str	r3, [sp, #8]
 80048c8:	f000 fb56 	bl	8004f78 <__lshift>
 80048cc:	4621      	mov	r1, r4
 80048ce:	4605      	mov	r5, r0
 80048d0:	f000 fbbe 	bl	8005050 <__mcmp>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	dcb1      	bgt.n	800483c <_dtoa_r+0x9bc>
 80048d8:	d102      	bne.n	80048e0 <_dtoa_r+0xa60>
 80048da:	9b02      	ldr	r3, [sp, #8]
 80048dc:	07db      	lsls	r3, r3, #31
 80048de:	d4ad      	bmi.n	800483c <_dtoa_r+0x9bc>
 80048e0:	4643      	mov	r3, r8
 80048e2:	4698      	mov	r8, r3
 80048e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048e8:	2a30      	cmp	r2, #48	; 0x30
 80048ea:	d0fa      	beq.n	80048e2 <_dtoa_r+0xa62>
 80048ec:	e6f7      	b.n	80046de <_dtoa_r+0x85e>
 80048ee:	9a01      	ldr	r2, [sp, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d1a4      	bne.n	800483e <_dtoa_r+0x9be>
 80048f4:	f10b 0b01 	add.w	fp, fp, #1
 80048f8:	2331      	movs	r3, #49	; 0x31
 80048fa:	e778      	b.n	80047ee <_dtoa_r+0x96e>
 80048fc:	4b14      	ldr	r3, [pc, #80]	; (8004950 <_dtoa_r+0xad0>)
 80048fe:	f7ff bb2a 	b.w	8003f56 <_dtoa_r+0xd6>
 8004902:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004904:	2b00      	cmp	r3, #0
 8004906:	f47f ab05 	bne.w	8003f14 <_dtoa_r+0x94>
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <_dtoa_r+0xad4>)
 800490c:	f7ff bb23 	b.w	8003f56 <_dtoa_r+0xd6>
 8004910:	f1ba 0f00 	cmp.w	sl, #0
 8004914:	dc03      	bgt.n	800491e <_dtoa_r+0xa9e>
 8004916:	9b06      	ldr	r3, [sp, #24]
 8004918:	2b02      	cmp	r3, #2
 800491a:	f73f aec8 	bgt.w	80046ae <_dtoa_r+0x82e>
 800491e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f7ff fa22 	bl	8003d6e <quorem>
 800492a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800492e:	f808 3b01 	strb.w	r3, [r8], #1
 8004932:	9a01      	ldr	r2, [sp, #4]
 8004934:	eba8 0202 	sub.w	r2, r8, r2
 8004938:	4592      	cmp	sl, r2
 800493a:	ddb7      	ble.n	80048ac <_dtoa_r+0xa2c>
 800493c:	4629      	mov	r1, r5
 800493e:	2300      	movs	r3, #0
 8004940:	220a      	movs	r2, #10
 8004942:	4630      	mov	r0, r6
 8004944:	f000 f96a 	bl	8004c1c <__multadd>
 8004948:	4605      	mov	r5, r0
 800494a:	e7ea      	b.n	8004922 <_dtoa_r+0xaa2>
 800494c:	08005ae8 	.word	0x08005ae8
 8004950:	08005a48 	.word	0x08005a48
 8004954:	08005a6c 	.word	0x08005a6c

08004958 <_free_r>:
 8004958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800495a:	2900      	cmp	r1, #0
 800495c:	d044      	beq.n	80049e8 <_free_r+0x90>
 800495e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004962:	9001      	str	r0, [sp, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f1a1 0404 	sub.w	r4, r1, #4
 800496a:	bfb8      	it	lt
 800496c:	18e4      	addlt	r4, r4, r3
 800496e:	f000 f8e7 	bl	8004b40 <__malloc_lock>
 8004972:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <_free_r+0x94>)
 8004974:	9801      	ldr	r0, [sp, #4]
 8004976:	6813      	ldr	r3, [r2, #0]
 8004978:	b933      	cbnz	r3, 8004988 <_free_r+0x30>
 800497a:	6063      	str	r3, [r4, #4]
 800497c:	6014      	str	r4, [r2, #0]
 800497e:	b003      	add	sp, #12
 8004980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004984:	f000 b8e2 	b.w	8004b4c <__malloc_unlock>
 8004988:	42a3      	cmp	r3, r4
 800498a:	d908      	bls.n	800499e <_free_r+0x46>
 800498c:	6825      	ldr	r5, [r4, #0]
 800498e:	1961      	adds	r1, r4, r5
 8004990:	428b      	cmp	r3, r1
 8004992:	bf01      	itttt	eq
 8004994:	6819      	ldreq	r1, [r3, #0]
 8004996:	685b      	ldreq	r3, [r3, #4]
 8004998:	1949      	addeq	r1, r1, r5
 800499a:	6021      	streq	r1, [r4, #0]
 800499c:	e7ed      	b.n	800497a <_free_r+0x22>
 800499e:	461a      	mov	r2, r3
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	b10b      	cbz	r3, 80049a8 <_free_r+0x50>
 80049a4:	42a3      	cmp	r3, r4
 80049a6:	d9fa      	bls.n	800499e <_free_r+0x46>
 80049a8:	6811      	ldr	r1, [r2, #0]
 80049aa:	1855      	adds	r5, r2, r1
 80049ac:	42a5      	cmp	r5, r4
 80049ae:	d10b      	bne.n	80049c8 <_free_r+0x70>
 80049b0:	6824      	ldr	r4, [r4, #0]
 80049b2:	4421      	add	r1, r4
 80049b4:	1854      	adds	r4, r2, r1
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	6011      	str	r1, [r2, #0]
 80049ba:	d1e0      	bne.n	800497e <_free_r+0x26>
 80049bc:	681c      	ldr	r4, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	6053      	str	r3, [r2, #4]
 80049c2:	440c      	add	r4, r1
 80049c4:	6014      	str	r4, [r2, #0]
 80049c6:	e7da      	b.n	800497e <_free_r+0x26>
 80049c8:	d902      	bls.n	80049d0 <_free_r+0x78>
 80049ca:	230c      	movs	r3, #12
 80049cc:	6003      	str	r3, [r0, #0]
 80049ce:	e7d6      	b.n	800497e <_free_r+0x26>
 80049d0:	6825      	ldr	r5, [r4, #0]
 80049d2:	1961      	adds	r1, r4, r5
 80049d4:	428b      	cmp	r3, r1
 80049d6:	bf04      	itt	eq
 80049d8:	6819      	ldreq	r1, [r3, #0]
 80049da:	685b      	ldreq	r3, [r3, #4]
 80049dc:	6063      	str	r3, [r4, #4]
 80049de:	bf04      	itt	eq
 80049e0:	1949      	addeq	r1, r1, r5
 80049e2:	6021      	streq	r1, [r4, #0]
 80049e4:	6054      	str	r4, [r2, #4]
 80049e6:	e7ca      	b.n	800497e <_free_r+0x26>
 80049e8:	b003      	add	sp, #12
 80049ea:	bd30      	pop	{r4, r5, pc}
 80049ec:	20000418 	.word	0x20000418

080049f0 <malloc>:
 80049f0:	4b02      	ldr	r3, [pc, #8]	; (80049fc <malloc+0xc>)
 80049f2:	4601      	mov	r1, r0
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	f000 b823 	b.w	8004a40 <_malloc_r>
 80049fa:	bf00      	nop
 80049fc:	20000064 	.word	0x20000064

08004a00 <sbrk_aligned>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	4e0e      	ldr	r6, [pc, #56]	; (8004a3c <sbrk_aligned+0x3c>)
 8004a04:	460c      	mov	r4, r1
 8004a06:	6831      	ldr	r1, [r6, #0]
 8004a08:	4605      	mov	r5, r0
 8004a0a:	b911      	cbnz	r1, 8004a12 <sbrk_aligned+0x12>
 8004a0c:	f000 fcce 	bl	80053ac <_sbrk_r>
 8004a10:	6030      	str	r0, [r6, #0]
 8004a12:	4621      	mov	r1, r4
 8004a14:	4628      	mov	r0, r5
 8004a16:	f000 fcc9 	bl	80053ac <_sbrk_r>
 8004a1a:	1c43      	adds	r3, r0, #1
 8004a1c:	d00a      	beq.n	8004a34 <sbrk_aligned+0x34>
 8004a1e:	1cc4      	adds	r4, r0, #3
 8004a20:	f024 0403 	bic.w	r4, r4, #3
 8004a24:	42a0      	cmp	r0, r4
 8004a26:	d007      	beq.n	8004a38 <sbrk_aligned+0x38>
 8004a28:	1a21      	subs	r1, r4, r0
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 fcbe 	bl	80053ac <_sbrk_r>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d101      	bne.n	8004a38 <sbrk_aligned+0x38>
 8004a34:	f04f 34ff 	mov.w	r4, #4294967295
 8004a38:	4620      	mov	r0, r4
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	2000041c 	.word	0x2000041c

08004a40 <_malloc_r>:
 8004a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a44:	1ccd      	adds	r5, r1, #3
 8004a46:	f025 0503 	bic.w	r5, r5, #3
 8004a4a:	3508      	adds	r5, #8
 8004a4c:	2d0c      	cmp	r5, #12
 8004a4e:	bf38      	it	cc
 8004a50:	250c      	movcc	r5, #12
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	4607      	mov	r7, r0
 8004a56:	db01      	blt.n	8004a5c <_malloc_r+0x1c>
 8004a58:	42a9      	cmp	r1, r5
 8004a5a:	d905      	bls.n	8004a68 <_malloc_r+0x28>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	2600      	movs	r6, #0
 8004a62:	4630      	mov	r0, r6
 8004a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b3c <_malloc_r+0xfc>
 8004a6c:	f000 f868 	bl	8004b40 <__malloc_lock>
 8004a70:	f8d8 3000 	ldr.w	r3, [r8]
 8004a74:	461c      	mov	r4, r3
 8004a76:	bb5c      	cbnz	r4, 8004ad0 <_malloc_r+0x90>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	f7ff ffc0 	bl	8004a00 <sbrk_aligned>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	4604      	mov	r4, r0
 8004a84:	d155      	bne.n	8004b32 <_malloc_r+0xf2>
 8004a86:	f8d8 4000 	ldr.w	r4, [r8]
 8004a8a:	4626      	mov	r6, r4
 8004a8c:	2e00      	cmp	r6, #0
 8004a8e:	d145      	bne.n	8004b1c <_malloc_r+0xdc>
 8004a90:	2c00      	cmp	r4, #0
 8004a92:	d048      	beq.n	8004b26 <_malloc_r+0xe6>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	4631      	mov	r1, r6
 8004a98:	4638      	mov	r0, r7
 8004a9a:	eb04 0903 	add.w	r9, r4, r3
 8004a9e:	f000 fc85 	bl	80053ac <_sbrk_r>
 8004aa2:	4581      	cmp	r9, r0
 8004aa4:	d13f      	bne.n	8004b26 <_malloc_r+0xe6>
 8004aa6:	6821      	ldr	r1, [r4, #0]
 8004aa8:	1a6d      	subs	r5, r5, r1
 8004aaa:	4629      	mov	r1, r5
 8004aac:	4638      	mov	r0, r7
 8004aae:	f7ff ffa7 	bl	8004a00 <sbrk_aligned>
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d037      	beq.n	8004b26 <_malloc_r+0xe6>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	442b      	add	r3, r5
 8004aba:	6023      	str	r3, [r4, #0]
 8004abc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d038      	beq.n	8004b36 <_malloc_r+0xf6>
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	42a2      	cmp	r2, r4
 8004ac8:	d12b      	bne.n	8004b22 <_malloc_r+0xe2>
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	e00f      	b.n	8004af0 <_malloc_r+0xb0>
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	1b52      	subs	r2, r2, r5
 8004ad4:	d41f      	bmi.n	8004b16 <_malloc_r+0xd6>
 8004ad6:	2a0b      	cmp	r2, #11
 8004ad8:	d917      	bls.n	8004b0a <_malloc_r+0xca>
 8004ada:	1961      	adds	r1, r4, r5
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	6025      	str	r5, [r4, #0]
 8004ae0:	bf18      	it	ne
 8004ae2:	6059      	strne	r1, [r3, #4]
 8004ae4:	6863      	ldr	r3, [r4, #4]
 8004ae6:	bf08      	it	eq
 8004ae8:	f8c8 1000 	streq.w	r1, [r8]
 8004aec:	5162      	str	r2, [r4, r5]
 8004aee:	604b      	str	r3, [r1, #4]
 8004af0:	4638      	mov	r0, r7
 8004af2:	f104 060b 	add.w	r6, r4, #11
 8004af6:	f000 f829 	bl	8004b4c <__malloc_unlock>
 8004afa:	f026 0607 	bic.w	r6, r6, #7
 8004afe:	1d23      	adds	r3, r4, #4
 8004b00:	1af2      	subs	r2, r6, r3
 8004b02:	d0ae      	beq.n	8004a62 <_malloc_r+0x22>
 8004b04:	1b9b      	subs	r3, r3, r6
 8004b06:	50a3      	str	r3, [r4, r2]
 8004b08:	e7ab      	b.n	8004a62 <_malloc_r+0x22>
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	6862      	ldr	r2, [r4, #4]
 8004b0e:	d1dd      	bne.n	8004acc <_malloc_r+0x8c>
 8004b10:	f8c8 2000 	str.w	r2, [r8]
 8004b14:	e7ec      	b.n	8004af0 <_malloc_r+0xb0>
 8004b16:	4623      	mov	r3, r4
 8004b18:	6864      	ldr	r4, [r4, #4]
 8004b1a:	e7ac      	b.n	8004a76 <_malloc_r+0x36>
 8004b1c:	4634      	mov	r4, r6
 8004b1e:	6876      	ldr	r6, [r6, #4]
 8004b20:	e7b4      	b.n	8004a8c <_malloc_r+0x4c>
 8004b22:	4613      	mov	r3, r2
 8004b24:	e7cc      	b.n	8004ac0 <_malloc_r+0x80>
 8004b26:	230c      	movs	r3, #12
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	f000 f80e 	bl	8004b4c <__malloc_unlock>
 8004b30:	e797      	b.n	8004a62 <_malloc_r+0x22>
 8004b32:	6025      	str	r5, [r4, #0]
 8004b34:	e7dc      	b.n	8004af0 <_malloc_r+0xb0>
 8004b36:	605b      	str	r3, [r3, #4]
 8004b38:	deff      	udf	#255	; 0xff
 8004b3a:	bf00      	nop
 8004b3c:	20000418 	.word	0x20000418

08004b40 <__malloc_lock>:
 8004b40:	4801      	ldr	r0, [pc, #4]	; (8004b48 <__malloc_lock+0x8>)
 8004b42:	f7ff b912 	b.w	8003d6a <__retarget_lock_acquire_recursive>
 8004b46:	bf00      	nop
 8004b48:	20000414 	.word	0x20000414

08004b4c <__malloc_unlock>:
 8004b4c:	4801      	ldr	r0, [pc, #4]	; (8004b54 <__malloc_unlock+0x8>)
 8004b4e:	f7ff b90d 	b.w	8003d6c <__retarget_lock_release_recursive>
 8004b52:	bf00      	nop
 8004b54:	20000414 	.word	0x20000414

08004b58 <_Balloc>:
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	69c6      	ldr	r6, [r0, #28]
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	460d      	mov	r5, r1
 8004b60:	b976      	cbnz	r6, 8004b80 <_Balloc+0x28>
 8004b62:	2010      	movs	r0, #16
 8004b64:	f7ff ff44 	bl	80049f0 <malloc>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	61e0      	str	r0, [r4, #28]
 8004b6c:	b920      	cbnz	r0, 8004b78 <_Balloc+0x20>
 8004b6e:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <_Balloc+0x78>)
 8004b70:	4818      	ldr	r0, [pc, #96]	; (8004bd4 <_Balloc+0x7c>)
 8004b72:	216b      	movs	r1, #107	; 0x6b
 8004b74:	f000 fc38 	bl	80053e8 <__assert_func>
 8004b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b7c:	6006      	str	r6, [r0, #0]
 8004b7e:	60c6      	str	r6, [r0, #12]
 8004b80:	69e6      	ldr	r6, [r4, #28]
 8004b82:	68f3      	ldr	r3, [r6, #12]
 8004b84:	b183      	cbz	r3, 8004ba8 <_Balloc+0x50>
 8004b86:	69e3      	ldr	r3, [r4, #28]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b8e:	b9b8      	cbnz	r0, 8004bc0 <_Balloc+0x68>
 8004b90:	2101      	movs	r1, #1
 8004b92:	fa01 f605 	lsl.w	r6, r1, r5
 8004b96:	1d72      	adds	r2, r6, #5
 8004b98:	0092      	lsls	r2, r2, #2
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 fc42 	bl	8005424 <_calloc_r>
 8004ba0:	b160      	cbz	r0, 8004bbc <_Balloc+0x64>
 8004ba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ba6:	e00e      	b.n	8004bc6 <_Balloc+0x6e>
 8004ba8:	2221      	movs	r2, #33	; 0x21
 8004baa:	2104      	movs	r1, #4
 8004bac:	4620      	mov	r0, r4
 8004bae:	f000 fc39 	bl	8005424 <_calloc_r>
 8004bb2:	69e3      	ldr	r3, [r4, #28]
 8004bb4:	60f0      	str	r0, [r6, #12]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e4      	bne.n	8004b86 <_Balloc+0x2e>
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	bd70      	pop	{r4, r5, r6, pc}
 8004bc0:	6802      	ldr	r2, [r0, #0]
 8004bc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004bcc:	e7f7      	b.n	8004bbe <_Balloc+0x66>
 8004bce:	bf00      	nop
 8004bd0:	08005a79 	.word	0x08005a79
 8004bd4:	08005af9 	.word	0x08005af9

08004bd8 <_Bfree>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	69c6      	ldr	r6, [r0, #28]
 8004bdc:	4605      	mov	r5, r0
 8004bde:	460c      	mov	r4, r1
 8004be0:	b976      	cbnz	r6, 8004c00 <_Bfree+0x28>
 8004be2:	2010      	movs	r0, #16
 8004be4:	f7ff ff04 	bl	80049f0 <malloc>
 8004be8:	4602      	mov	r2, r0
 8004bea:	61e8      	str	r0, [r5, #28]
 8004bec:	b920      	cbnz	r0, 8004bf8 <_Bfree+0x20>
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <_Bfree+0x3c>)
 8004bf0:	4809      	ldr	r0, [pc, #36]	; (8004c18 <_Bfree+0x40>)
 8004bf2:	218f      	movs	r1, #143	; 0x8f
 8004bf4:	f000 fbf8 	bl	80053e8 <__assert_func>
 8004bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bfc:	6006      	str	r6, [r0, #0]
 8004bfe:	60c6      	str	r6, [r0, #12]
 8004c00:	b13c      	cbz	r4, 8004c12 <_Bfree+0x3a>
 8004c02:	69eb      	ldr	r3, [r5, #28]
 8004c04:	6862      	ldr	r2, [r4, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c0c:	6021      	str	r1, [r4, #0]
 8004c0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	08005a79 	.word	0x08005a79
 8004c18:	08005af9 	.word	0x08005af9

08004c1c <__multadd>:
 8004c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c20:	690d      	ldr	r5, [r1, #16]
 8004c22:	4607      	mov	r7, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	461e      	mov	r6, r3
 8004c28:	f101 0c14 	add.w	ip, r1, #20
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f8dc 3000 	ldr.w	r3, [ip]
 8004c32:	b299      	uxth	r1, r3
 8004c34:	fb02 6101 	mla	r1, r2, r1, r6
 8004c38:	0c1e      	lsrs	r6, r3, #16
 8004c3a:	0c0b      	lsrs	r3, r1, #16
 8004c3c:	fb02 3306 	mla	r3, r2, r6, r3
 8004c40:	b289      	uxth	r1, r1
 8004c42:	3001      	adds	r0, #1
 8004c44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004c48:	4285      	cmp	r5, r0
 8004c4a:	f84c 1b04 	str.w	r1, [ip], #4
 8004c4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004c52:	dcec      	bgt.n	8004c2e <__multadd+0x12>
 8004c54:	b30e      	cbz	r6, 8004c9a <__multadd+0x7e>
 8004c56:	68a3      	ldr	r3, [r4, #8]
 8004c58:	42ab      	cmp	r3, r5
 8004c5a:	dc19      	bgt.n	8004c90 <__multadd+0x74>
 8004c5c:	6861      	ldr	r1, [r4, #4]
 8004c5e:	4638      	mov	r0, r7
 8004c60:	3101      	adds	r1, #1
 8004c62:	f7ff ff79 	bl	8004b58 <_Balloc>
 8004c66:	4680      	mov	r8, r0
 8004c68:	b928      	cbnz	r0, 8004c76 <__multadd+0x5a>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <__multadd+0x84>)
 8004c6e:	480d      	ldr	r0, [pc, #52]	; (8004ca4 <__multadd+0x88>)
 8004c70:	21ba      	movs	r1, #186	; 0xba
 8004c72:	f000 fbb9 	bl	80053e8 <__assert_func>
 8004c76:	6922      	ldr	r2, [r4, #16]
 8004c78:	3202      	adds	r2, #2
 8004c7a:	f104 010c 	add.w	r1, r4, #12
 8004c7e:	0092      	lsls	r2, r2, #2
 8004c80:	300c      	adds	r0, #12
 8004c82:	f000 fba3 	bl	80053cc <memcpy>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4638      	mov	r0, r7
 8004c8a:	f7ff ffa5 	bl	8004bd8 <_Bfree>
 8004c8e:	4644      	mov	r4, r8
 8004c90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c94:	3501      	adds	r5, #1
 8004c96:	615e      	str	r6, [r3, #20]
 8004c98:	6125      	str	r5, [r4, #16]
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca0:	08005ae8 	.word	0x08005ae8
 8004ca4:	08005af9 	.word	0x08005af9

08004ca8 <__hi0bits>:
 8004ca8:	0c03      	lsrs	r3, r0, #16
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	b9d3      	cbnz	r3, 8004ce4 <__hi0bits+0x3c>
 8004cae:	0400      	lsls	r0, r0, #16
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004cb6:	bf04      	itt	eq
 8004cb8:	0200      	lsleq	r0, r0, #8
 8004cba:	3308      	addeq	r3, #8
 8004cbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004cc0:	bf04      	itt	eq
 8004cc2:	0100      	lsleq	r0, r0, #4
 8004cc4:	3304      	addeq	r3, #4
 8004cc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004cca:	bf04      	itt	eq
 8004ccc:	0080      	lsleq	r0, r0, #2
 8004cce:	3302      	addeq	r3, #2
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	db05      	blt.n	8004ce0 <__hi0bits+0x38>
 8004cd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004cd8:	f103 0301 	add.w	r3, r3, #1
 8004cdc:	bf08      	it	eq
 8004cde:	2320      	moveq	r3, #32
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	4770      	bx	lr
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e7e4      	b.n	8004cb2 <__hi0bits+0xa>

08004ce8 <__lo0bits>:
 8004ce8:	6803      	ldr	r3, [r0, #0]
 8004cea:	f013 0207 	ands.w	r2, r3, #7
 8004cee:	d00c      	beq.n	8004d0a <__lo0bits+0x22>
 8004cf0:	07d9      	lsls	r1, r3, #31
 8004cf2:	d422      	bmi.n	8004d3a <__lo0bits+0x52>
 8004cf4:	079a      	lsls	r2, r3, #30
 8004cf6:	bf49      	itett	mi
 8004cf8:	085b      	lsrmi	r3, r3, #1
 8004cfa:	089b      	lsrpl	r3, r3, #2
 8004cfc:	6003      	strmi	r3, [r0, #0]
 8004cfe:	2201      	movmi	r2, #1
 8004d00:	bf5c      	itt	pl
 8004d02:	6003      	strpl	r3, [r0, #0]
 8004d04:	2202      	movpl	r2, #2
 8004d06:	4610      	mov	r0, r2
 8004d08:	4770      	bx	lr
 8004d0a:	b299      	uxth	r1, r3
 8004d0c:	b909      	cbnz	r1, 8004d12 <__lo0bits+0x2a>
 8004d0e:	0c1b      	lsrs	r3, r3, #16
 8004d10:	2210      	movs	r2, #16
 8004d12:	b2d9      	uxtb	r1, r3
 8004d14:	b909      	cbnz	r1, 8004d1a <__lo0bits+0x32>
 8004d16:	3208      	adds	r2, #8
 8004d18:	0a1b      	lsrs	r3, r3, #8
 8004d1a:	0719      	lsls	r1, r3, #28
 8004d1c:	bf04      	itt	eq
 8004d1e:	091b      	lsreq	r3, r3, #4
 8004d20:	3204      	addeq	r2, #4
 8004d22:	0799      	lsls	r1, r3, #30
 8004d24:	bf04      	itt	eq
 8004d26:	089b      	lsreq	r3, r3, #2
 8004d28:	3202      	addeq	r2, #2
 8004d2a:	07d9      	lsls	r1, r3, #31
 8004d2c:	d403      	bmi.n	8004d36 <__lo0bits+0x4e>
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	f102 0201 	add.w	r2, r2, #1
 8004d34:	d003      	beq.n	8004d3e <__lo0bits+0x56>
 8004d36:	6003      	str	r3, [r0, #0]
 8004d38:	e7e5      	b.n	8004d06 <__lo0bits+0x1e>
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	e7e3      	b.n	8004d06 <__lo0bits+0x1e>
 8004d3e:	2220      	movs	r2, #32
 8004d40:	e7e1      	b.n	8004d06 <__lo0bits+0x1e>
	...

08004d44 <__i2b>:
 8004d44:	b510      	push	{r4, lr}
 8004d46:	460c      	mov	r4, r1
 8004d48:	2101      	movs	r1, #1
 8004d4a:	f7ff ff05 	bl	8004b58 <_Balloc>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	b928      	cbnz	r0, 8004d5e <__i2b+0x1a>
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <__i2b+0x24>)
 8004d54:	4805      	ldr	r0, [pc, #20]	; (8004d6c <__i2b+0x28>)
 8004d56:	f240 1145 	movw	r1, #325	; 0x145
 8004d5a:	f000 fb45 	bl	80053e8 <__assert_func>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	6144      	str	r4, [r0, #20]
 8004d62:	6103      	str	r3, [r0, #16]
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	bf00      	nop
 8004d68:	08005ae8 	.word	0x08005ae8
 8004d6c:	08005af9 	.word	0x08005af9

08004d70 <__multiply>:
 8004d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d74:	4691      	mov	r9, r2
 8004d76:	690a      	ldr	r2, [r1, #16]
 8004d78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	bfb8      	it	lt
 8004d80:	460b      	movlt	r3, r1
 8004d82:	460c      	mov	r4, r1
 8004d84:	bfbc      	itt	lt
 8004d86:	464c      	movlt	r4, r9
 8004d88:	4699      	movlt	r9, r3
 8004d8a:	6927      	ldr	r7, [r4, #16]
 8004d8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004d90:	68a3      	ldr	r3, [r4, #8]
 8004d92:	6861      	ldr	r1, [r4, #4]
 8004d94:	eb07 060a 	add.w	r6, r7, sl
 8004d98:	42b3      	cmp	r3, r6
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	bfb8      	it	lt
 8004d9e:	3101      	addlt	r1, #1
 8004da0:	f7ff feda 	bl	8004b58 <_Balloc>
 8004da4:	b930      	cbnz	r0, 8004db4 <__multiply+0x44>
 8004da6:	4602      	mov	r2, r0
 8004da8:	4b44      	ldr	r3, [pc, #272]	; (8004ebc <__multiply+0x14c>)
 8004daa:	4845      	ldr	r0, [pc, #276]	; (8004ec0 <__multiply+0x150>)
 8004dac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004db0:	f000 fb1a 	bl	80053e8 <__assert_func>
 8004db4:	f100 0514 	add.w	r5, r0, #20
 8004db8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	4543      	cmp	r3, r8
 8004dc2:	d321      	bcc.n	8004e08 <__multiply+0x98>
 8004dc4:	f104 0314 	add.w	r3, r4, #20
 8004dc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004dcc:	f109 0314 	add.w	r3, r9, #20
 8004dd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004dd4:	9202      	str	r2, [sp, #8]
 8004dd6:	1b3a      	subs	r2, r7, r4
 8004dd8:	3a15      	subs	r2, #21
 8004dda:	f022 0203 	bic.w	r2, r2, #3
 8004dde:	3204      	adds	r2, #4
 8004de0:	f104 0115 	add.w	r1, r4, #21
 8004de4:	428f      	cmp	r7, r1
 8004de6:	bf38      	it	cc
 8004de8:	2204      	movcc	r2, #4
 8004dea:	9201      	str	r2, [sp, #4]
 8004dec:	9a02      	ldr	r2, [sp, #8]
 8004dee:	9303      	str	r3, [sp, #12]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d80c      	bhi.n	8004e0e <__multiply+0x9e>
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	dd03      	ble.n	8004e00 <__multiply+0x90>
 8004df8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d05b      	beq.n	8004eb8 <__multiply+0x148>
 8004e00:	6106      	str	r6, [r0, #16]
 8004e02:	b005      	add	sp, #20
 8004e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e08:	f843 2b04 	str.w	r2, [r3], #4
 8004e0c:	e7d8      	b.n	8004dc0 <__multiply+0x50>
 8004e0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8004e12:	f1ba 0f00 	cmp.w	sl, #0
 8004e16:	d024      	beq.n	8004e62 <__multiply+0xf2>
 8004e18:	f104 0e14 	add.w	lr, r4, #20
 8004e1c:	46a9      	mov	r9, r5
 8004e1e:	f04f 0c00 	mov.w	ip, #0
 8004e22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004e26:	f8d9 1000 	ldr.w	r1, [r9]
 8004e2a:	fa1f fb82 	uxth.w	fp, r2
 8004e2e:	b289      	uxth	r1, r1
 8004e30:	fb0a 110b 	mla	r1, sl, fp, r1
 8004e34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004e38:	f8d9 2000 	ldr.w	r2, [r9]
 8004e3c:	4461      	add	r1, ip
 8004e3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004e42:	fb0a c20b 	mla	r2, sl, fp, ip
 8004e46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004e4a:	b289      	uxth	r1, r1
 8004e4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e50:	4577      	cmp	r7, lr
 8004e52:	f849 1b04 	str.w	r1, [r9], #4
 8004e56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004e5a:	d8e2      	bhi.n	8004e22 <__multiply+0xb2>
 8004e5c:	9a01      	ldr	r2, [sp, #4]
 8004e5e:	f845 c002 	str.w	ip, [r5, r2]
 8004e62:	9a03      	ldr	r2, [sp, #12]
 8004e64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	f1b9 0f00 	cmp.w	r9, #0
 8004e6e:	d021      	beq.n	8004eb4 <__multiply+0x144>
 8004e70:	6829      	ldr	r1, [r5, #0]
 8004e72:	f104 0c14 	add.w	ip, r4, #20
 8004e76:	46ae      	mov	lr, r5
 8004e78:	f04f 0a00 	mov.w	sl, #0
 8004e7c:	f8bc b000 	ldrh.w	fp, [ip]
 8004e80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004e84:	fb09 220b 	mla	r2, r9, fp, r2
 8004e88:	4452      	add	r2, sl
 8004e8a:	b289      	uxth	r1, r1
 8004e8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e90:	f84e 1b04 	str.w	r1, [lr], #4
 8004e94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004e98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004e9c:	f8be 1000 	ldrh.w	r1, [lr]
 8004ea0:	fb09 110a 	mla	r1, r9, sl, r1
 8004ea4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004ea8:	4567      	cmp	r7, ip
 8004eaa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004eae:	d8e5      	bhi.n	8004e7c <__multiply+0x10c>
 8004eb0:	9a01      	ldr	r2, [sp, #4]
 8004eb2:	50a9      	str	r1, [r5, r2]
 8004eb4:	3504      	adds	r5, #4
 8004eb6:	e799      	b.n	8004dec <__multiply+0x7c>
 8004eb8:	3e01      	subs	r6, #1
 8004eba:	e79b      	b.n	8004df4 <__multiply+0x84>
 8004ebc:	08005ae8 	.word	0x08005ae8
 8004ec0:	08005af9 	.word	0x08005af9

08004ec4 <__pow5mult>:
 8004ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec8:	4615      	mov	r5, r2
 8004eca:	f012 0203 	ands.w	r2, r2, #3
 8004ece:	4606      	mov	r6, r0
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	d007      	beq.n	8004ee4 <__pow5mult+0x20>
 8004ed4:	4c25      	ldr	r4, [pc, #148]	; (8004f6c <__pow5mult+0xa8>)
 8004ed6:	3a01      	subs	r2, #1
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004ede:	f7ff fe9d 	bl	8004c1c <__multadd>
 8004ee2:	4607      	mov	r7, r0
 8004ee4:	10ad      	asrs	r5, r5, #2
 8004ee6:	d03d      	beq.n	8004f64 <__pow5mult+0xa0>
 8004ee8:	69f4      	ldr	r4, [r6, #28]
 8004eea:	b97c      	cbnz	r4, 8004f0c <__pow5mult+0x48>
 8004eec:	2010      	movs	r0, #16
 8004eee:	f7ff fd7f 	bl	80049f0 <malloc>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	61f0      	str	r0, [r6, #28]
 8004ef6:	b928      	cbnz	r0, 8004f04 <__pow5mult+0x40>
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <__pow5mult+0xac>)
 8004efa:	481e      	ldr	r0, [pc, #120]	; (8004f74 <__pow5mult+0xb0>)
 8004efc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004f00:	f000 fa72 	bl	80053e8 <__assert_func>
 8004f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f08:	6004      	str	r4, [r0, #0]
 8004f0a:	60c4      	str	r4, [r0, #12]
 8004f0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f14:	b94c      	cbnz	r4, 8004f2a <__pow5mult+0x66>
 8004f16:	f240 2171 	movw	r1, #625	; 0x271
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff ff12 	bl	8004d44 <__i2b>
 8004f20:	2300      	movs	r3, #0
 8004f22:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f26:	4604      	mov	r4, r0
 8004f28:	6003      	str	r3, [r0, #0]
 8004f2a:	f04f 0900 	mov.w	r9, #0
 8004f2e:	07eb      	lsls	r3, r5, #31
 8004f30:	d50a      	bpl.n	8004f48 <__pow5mult+0x84>
 8004f32:	4639      	mov	r1, r7
 8004f34:	4622      	mov	r2, r4
 8004f36:	4630      	mov	r0, r6
 8004f38:	f7ff ff1a 	bl	8004d70 <__multiply>
 8004f3c:	4639      	mov	r1, r7
 8004f3e:	4680      	mov	r8, r0
 8004f40:	4630      	mov	r0, r6
 8004f42:	f7ff fe49 	bl	8004bd8 <_Bfree>
 8004f46:	4647      	mov	r7, r8
 8004f48:	106d      	asrs	r5, r5, #1
 8004f4a:	d00b      	beq.n	8004f64 <__pow5mult+0xa0>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	b938      	cbnz	r0, 8004f60 <__pow5mult+0x9c>
 8004f50:	4622      	mov	r2, r4
 8004f52:	4621      	mov	r1, r4
 8004f54:	4630      	mov	r0, r6
 8004f56:	f7ff ff0b 	bl	8004d70 <__multiply>
 8004f5a:	6020      	str	r0, [r4, #0]
 8004f5c:	f8c0 9000 	str.w	r9, [r0]
 8004f60:	4604      	mov	r4, r0
 8004f62:	e7e4      	b.n	8004f2e <__pow5mult+0x6a>
 8004f64:	4638      	mov	r0, r7
 8004f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6a:	bf00      	nop
 8004f6c:	08005c48 	.word	0x08005c48
 8004f70:	08005a79 	.word	0x08005a79
 8004f74:	08005af9 	.word	0x08005af9

08004f78 <__lshift>:
 8004f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	6849      	ldr	r1, [r1, #4]
 8004f80:	6923      	ldr	r3, [r4, #16]
 8004f82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004f86:	68a3      	ldr	r3, [r4, #8]
 8004f88:	4607      	mov	r7, r0
 8004f8a:	4691      	mov	r9, r2
 8004f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004f90:	f108 0601 	add.w	r6, r8, #1
 8004f94:	42b3      	cmp	r3, r6
 8004f96:	db0b      	blt.n	8004fb0 <__lshift+0x38>
 8004f98:	4638      	mov	r0, r7
 8004f9a:	f7ff fddd 	bl	8004b58 <_Balloc>
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	b948      	cbnz	r0, 8004fb6 <__lshift+0x3e>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	4b28      	ldr	r3, [pc, #160]	; (8005048 <__lshift+0xd0>)
 8004fa6:	4829      	ldr	r0, [pc, #164]	; (800504c <__lshift+0xd4>)
 8004fa8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004fac:	f000 fa1c 	bl	80053e8 <__assert_func>
 8004fb0:	3101      	adds	r1, #1
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	e7ee      	b.n	8004f94 <__lshift+0x1c>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f100 0114 	add.w	r1, r0, #20
 8004fbc:	f100 0210 	add.w	r2, r0, #16
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	4553      	cmp	r3, sl
 8004fc4:	db33      	blt.n	800502e <__lshift+0xb6>
 8004fc6:	6920      	ldr	r0, [r4, #16]
 8004fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004fcc:	f104 0314 	add.w	r3, r4, #20
 8004fd0:	f019 091f 	ands.w	r9, r9, #31
 8004fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004fd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004fdc:	d02b      	beq.n	8005036 <__lshift+0xbe>
 8004fde:	f1c9 0e20 	rsb	lr, r9, #32
 8004fe2:	468a      	mov	sl, r1
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	fa00 f009 	lsl.w	r0, r0, r9
 8004fec:	4310      	orrs	r0, r2
 8004fee:	f84a 0b04 	str.w	r0, [sl], #4
 8004ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ff6:	459c      	cmp	ip, r3
 8004ff8:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ffc:	d8f3      	bhi.n	8004fe6 <__lshift+0x6e>
 8004ffe:	ebac 0304 	sub.w	r3, ip, r4
 8005002:	3b15      	subs	r3, #21
 8005004:	f023 0303 	bic.w	r3, r3, #3
 8005008:	3304      	adds	r3, #4
 800500a:	f104 0015 	add.w	r0, r4, #21
 800500e:	4584      	cmp	ip, r0
 8005010:	bf38      	it	cc
 8005012:	2304      	movcc	r3, #4
 8005014:	50ca      	str	r2, [r1, r3]
 8005016:	b10a      	cbz	r2, 800501c <__lshift+0xa4>
 8005018:	f108 0602 	add.w	r6, r8, #2
 800501c:	3e01      	subs	r6, #1
 800501e:	4638      	mov	r0, r7
 8005020:	612e      	str	r6, [r5, #16]
 8005022:	4621      	mov	r1, r4
 8005024:	f7ff fdd8 	bl	8004bd8 <_Bfree>
 8005028:	4628      	mov	r0, r5
 800502a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005032:	3301      	adds	r3, #1
 8005034:	e7c5      	b.n	8004fc2 <__lshift+0x4a>
 8005036:	3904      	subs	r1, #4
 8005038:	f853 2b04 	ldr.w	r2, [r3], #4
 800503c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005040:	459c      	cmp	ip, r3
 8005042:	d8f9      	bhi.n	8005038 <__lshift+0xc0>
 8005044:	e7ea      	b.n	800501c <__lshift+0xa4>
 8005046:	bf00      	nop
 8005048:	08005ae8 	.word	0x08005ae8
 800504c:	08005af9 	.word	0x08005af9

08005050 <__mcmp>:
 8005050:	b530      	push	{r4, r5, lr}
 8005052:	6902      	ldr	r2, [r0, #16]
 8005054:	690c      	ldr	r4, [r1, #16]
 8005056:	1b12      	subs	r2, r2, r4
 8005058:	d10e      	bne.n	8005078 <__mcmp+0x28>
 800505a:	f100 0314 	add.w	r3, r0, #20
 800505e:	3114      	adds	r1, #20
 8005060:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005064:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005068:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800506c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005070:	42a5      	cmp	r5, r4
 8005072:	d003      	beq.n	800507c <__mcmp+0x2c>
 8005074:	d305      	bcc.n	8005082 <__mcmp+0x32>
 8005076:	2201      	movs	r2, #1
 8005078:	4610      	mov	r0, r2
 800507a:	bd30      	pop	{r4, r5, pc}
 800507c:	4283      	cmp	r3, r0
 800507e:	d3f3      	bcc.n	8005068 <__mcmp+0x18>
 8005080:	e7fa      	b.n	8005078 <__mcmp+0x28>
 8005082:	f04f 32ff 	mov.w	r2, #4294967295
 8005086:	e7f7      	b.n	8005078 <__mcmp+0x28>

08005088 <__mdiff>:
 8005088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	460c      	mov	r4, r1
 800508e:	4606      	mov	r6, r0
 8005090:	4611      	mov	r1, r2
 8005092:	4620      	mov	r0, r4
 8005094:	4690      	mov	r8, r2
 8005096:	f7ff ffdb 	bl	8005050 <__mcmp>
 800509a:	1e05      	subs	r5, r0, #0
 800509c:	d110      	bne.n	80050c0 <__mdiff+0x38>
 800509e:	4629      	mov	r1, r5
 80050a0:	4630      	mov	r0, r6
 80050a2:	f7ff fd59 	bl	8004b58 <_Balloc>
 80050a6:	b930      	cbnz	r0, 80050b6 <__mdiff+0x2e>
 80050a8:	4b3a      	ldr	r3, [pc, #232]	; (8005194 <__mdiff+0x10c>)
 80050aa:	4602      	mov	r2, r0
 80050ac:	f240 2137 	movw	r1, #567	; 0x237
 80050b0:	4839      	ldr	r0, [pc, #228]	; (8005198 <__mdiff+0x110>)
 80050b2:	f000 f999 	bl	80053e8 <__assert_func>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80050bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c0:	bfa4      	itt	ge
 80050c2:	4643      	movge	r3, r8
 80050c4:	46a0      	movge	r8, r4
 80050c6:	4630      	mov	r0, r6
 80050c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80050cc:	bfa6      	itte	ge
 80050ce:	461c      	movge	r4, r3
 80050d0:	2500      	movge	r5, #0
 80050d2:	2501      	movlt	r5, #1
 80050d4:	f7ff fd40 	bl	8004b58 <_Balloc>
 80050d8:	b920      	cbnz	r0, 80050e4 <__mdiff+0x5c>
 80050da:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <__mdiff+0x10c>)
 80050dc:	4602      	mov	r2, r0
 80050de:	f240 2145 	movw	r1, #581	; 0x245
 80050e2:	e7e5      	b.n	80050b0 <__mdiff+0x28>
 80050e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80050e8:	6926      	ldr	r6, [r4, #16]
 80050ea:	60c5      	str	r5, [r0, #12]
 80050ec:	f104 0914 	add.w	r9, r4, #20
 80050f0:	f108 0514 	add.w	r5, r8, #20
 80050f4:	f100 0e14 	add.w	lr, r0, #20
 80050f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80050fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005100:	f108 0210 	add.w	r2, r8, #16
 8005104:	46f2      	mov	sl, lr
 8005106:	2100      	movs	r1, #0
 8005108:	f859 3b04 	ldr.w	r3, [r9], #4
 800510c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005110:	fa11 f88b 	uxtah	r8, r1, fp
 8005114:	b299      	uxth	r1, r3
 8005116:	0c1b      	lsrs	r3, r3, #16
 8005118:	eba8 0801 	sub.w	r8, r8, r1
 800511c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005120:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005124:	fa1f f888 	uxth.w	r8, r8
 8005128:	1419      	asrs	r1, r3, #16
 800512a:	454e      	cmp	r6, r9
 800512c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005130:	f84a 3b04 	str.w	r3, [sl], #4
 8005134:	d8e8      	bhi.n	8005108 <__mdiff+0x80>
 8005136:	1b33      	subs	r3, r6, r4
 8005138:	3b15      	subs	r3, #21
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	3304      	adds	r3, #4
 8005140:	3415      	adds	r4, #21
 8005142:	42a6      	cmp	r6, r4
 8005144:	bf38      	it	cc
 8005146:	2304      	movcc	r3, #4
 8005148:	441d      	add	r5, r3
 800514a:	4473      	add	r3, lr
 800514c:	469e      	mov	lr, r3
 800514e:	462e      	mov	r6, r5
 8005150:	4566      	cmp	r6, ip
 8005152:	d30e      	bcc.n	8005172 <__mdiff+0xea>
 8005154:	f10c 0203 	add.w	r2, ip, #3
 8005158:	1b52      	subs	r2, r2, r5
 800515a:	f022 0203 	bic.w	r2, r2, #3
 800515e:	3d03      	subs	r5, #3
 8005160:	45ac      	cmp	ip, r5
 8005162:	bf38      	it	cc
 8005164:	2200      	movcc	r2, #0
 8005166:	4413      	add	r3, r2
 8005168:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800516c:	b17a      	cbz	r2, 800518e <__mdiff+0x106>
 800516e:	6107      	str	r7, [r0, #16]
 8005170:	e7a4      	b.n	80050bc <__mdiff+0x34>
 8005172:	f856 8b04 	ldr.w	r8, [r6], #4
 8005176:	fa11 f288 	uxtah	r2, r1, r8
 800517a:	1414      	asrs	r4, r2, #16
 800517c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005180:	b292      	uxth	r2, r2
 8005182:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005186:	f84e 2b04 	str.w	r2, [lr], #4
 800518a:	1421      	asrs	r1, r4, #16
 800518c:	e7e0      	b.n	8005150 <__mdiff+0xc8>
 800518e:	3f01      	subs	r7, #1
 8005190:	e7ea      	b.n	8005168 <__mdiff+0xe0>
 8005192:	bf00      	nop
 8005194:	08005ae8 	.word	0x08005ae8
 8005198:	08005af9 	.word	0x08005af9

0800519c <__d2b>:
 800519c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80051a0:	460f      	mov	r7, r1
 80051a2:	2101      	movs	r1, #1
 80051a4:	ec59 8b10 	vmov	r8, r9, d0
 80051a8:	4616      	mov	r6, r2
 80051aa:	f7ff fcd5 	bl	8004b58 <_Balloc>
 80051ae:	4604      	mov	r4, r0
 80051b0:	b930      	cbnz	r0, 80051c0 <__d2b+0x24>
 80051b2:	4602      	mov	r2, r0
 80051b4:	4b24      	ldr	r3, [pc, #144]	; (8005248 <__d2b+0xac>)
 80051b6:	4825      	ldr	r0, [pc, #148]	; (800524c <__d2b+0xb0>)
 80051b8:	f240 310f 	movw	r1, #783	; 0x30f
 80051bc:	f000 f914 	bl	80053e8 <__assert_func>
 80051c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80051c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051c8:	bb2d      	cbnz	r5, 8005216 <__d2b+0x7a>
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	f1b8 0300 	subs.w	r3, r8, #0
 80051d0:	d026      	beq.n	8005220 <__d2b+0x84>
 80051d2:	4668      	mov	r0, sp
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	f7ff fd87 	bl	8004ce8 <__lo0bits>
 80051da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80051de:	b1e8      	cbz	r0, 800521c <__d2b+0x80>
 80051e0:	f1c0 0320 	rsb	r3, r0, #32
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	430b      	orrs	r3, r1
 80051ea:	40c2      	lsrs	r2, r0
 80051ec:	6163      	str	r3, [r4, #20]
 80051ee:	9201      	str	r2, [sp, #4]
 80051f0:	9b01      	ldr	r3, [sp, #4]
 80051f2:	61a3      	str	r3, [r4, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf14      	ite	ne
 80051f8:	2202      	movne	r2, #2
 80051fa:	2201      	moveq	r2, #1
 80051fc:	6122      	str	r2, [r4, #16]
 80051fe:	b1bd      	cbz	r5, 8005230 <__d2b+0x94>
 8005200:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005204:	4405      	add	r5, r0
 8005206:	603d      	str	r5, [r7, #0]
 8005208:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800520c:	6030      	str	r0, [r6, #0]
 800520e:	4620      	mov	r0, r4
 8005210:	b003      	add	sp, #12
 8005212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800521a:	e7d6      	b.n	80051ca <__d2b+0x2e>
 800521c:	6161      	str	r1, [r4, #20]
 800521e:	e7e7      	b.n	80051f0 <__d2b+0x54>
 8005220:	a801      	add	r0, sp, #4
 8005222:	f7ff fd61 	bl	8004ce8 <__lo0bits>
 8005226:	9b01      	ldr	r3, [sp, #4]
 8005228:	6163      	str	r3, [r4, #20]
 800522a:	3020      	adds	r0, #32
 800522c:	2201      	movs	r2, #1
 800522e:	e7e5      	b.n	80051fc <__d2b+0x60>
 8005230:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005234:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005238:	6038      	str	r0, [r7, #0]
 800523a:	6918      	ldr	r0, [r3, #16]
 800523c:	f7ff fd34 	bl	8004ca8 <__hi0bits>
 8005240:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005244:	e7e2      	b.n	800520c <__d2b+0x70>
 8005246:	bf00      	nop
 8005248:	08005ae8 	.word	0x08005ae8
 800524c:	08005af9 	.word	0x08005af9

08005250 <__sflush_r>:
 8005250:	898a      	ldrh	r2, [r1, #12]
 8005252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	4605      	mov	r5, r0
 8005258:	0710      	lsls	r0, r2, #28
 800525a:	460c      	mov	r4, r1
 800525c:	d458      	bmi.n	8005310 <__sflush_r+0xc0>
 800525e:	684b      	ldr	r3, [r1, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	dc05      	bgt.n	8005270 <__sflush_r+0x20>
 8005264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	dc02      	bgt.n	8005270 <__sflush_r+0x20>
 800526a:	2000      	movs	r0, #0
 800526c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005272:	2e00      	cmp	r6, #0
 8005274:	d0f9      	beq.n	800526a <__sflush_r+0x1a>
 8005276:	2300      	movs	r3, #0
 8005278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800527c:	682f      	ldr	r7, [r5, #0]
 800527e:	6a21      	ldr	r1, [r4, #32]
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	d032      	beq.n	80052ea <__sflush_r+0x9a>
 8005284:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	075a      	lsls	r2, r3, #29
 800528a:	d505      	bpl.n	8005298 <__sflush_r+0x48>
 800528c:	6863      	ldr	r3, [r4, #4]
 800528e:	1ac0      	subs	r0, r0, r3
 8005290:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005292:	b10b      	cbz	r3, 8005298 <__sflush_r+0x48>
 8005294:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005296:	1ac0      	subs	r0, r0, r3
 8005298:	2300      	movs	r3, #0
 800529a:	4602      	mov	r2, r0
 800529c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800529e:	6a21      	ldr	r1, [r4, #32]
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b0      	blx	r6
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	d106      	bne.n	80052b8 <__sflush_r+0x68>
 80052aa:	6829      	ldr	r1, [r5, #0]
 80052ac:	291d      	cmp	r1, #29
 80052ae:	d82b      	bhi.n	8005308 <__sflush_r+0xb8>
 80052b0:	4a29      	ldr	r2, [pc, #164]	; (8005358 <__sflush_r+0x108>)
 80052b2:	410a      	asrs	r2, r1
 80052b4:	07d6      	lsls	r6, r2, #31
 80052b6:	d427      	bmi.n	8005308 <__sflush_r+0xb8>
 80052b8:	2200      	movs	r2, #0
 80052ba:	6062      	str	r2, [r4, #4]
 80052bc:	04d9      	lsls	r1, r3, #19
 80052be:	6922      	ldr	r2, [r4, #16]
 80052c0:	6022      	str	r2, [r4, #0]
 80052c2:	d504      	bpl.n	80052ce <__sflush_r+0x7e>
 80052c4:	1c42      	adds	r2, r0, #1
 80052c6:	d101      	bne.n	80052cc <__sflush_r+0x7c>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b903      	cbnz	r3, 80052ce <__sflush_r+0x7e>
 80052cc:	6560      	str	r0, [r4, #84]	; 0x54
 80052ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052d0:	602f      	str	r7, [r5, #0]
 80052d2:	2900      	cmp	r1, #0
 80052d4:	d0c9      	beq.n	800526a <__sflush_r+0x1a>
 80052d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052da:	4299      	cmp	r1, r3
 80052dc:	d002      	beq.n	80052e4 <__sflush_r+0x94>
 80052de:	4628      	mov	r0, r5
 80052e0:	f7ff fb3a 	bl	8004958 <_free_r>
 80052e4:	2000      	movs	r0, #0
 80052e6:	6360      	str	r0, [r4, #52]	; 0x34
 80052e8:	e7c0      	b.n	800526c <__sflush_r+0x1c>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4628      	mov	r0, r5
 80052ee:	47b0      	blx	r6
 80052f0:	1c41      	adds	r1, r0, #1
 80052f2:	d1c8      	bne.n	8005286 <__sflush_r+0x36>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0c5      	beq.n	8005286 <__sflush_r+0x36>
 80052fa:	2b1d      	cmp	r3, #29
 80052fc:	d001      	beq.n	8005302 <__sflush_r+0xb2>
 80052fe:	2b16      	cmp	r3, #22
 8005300:	d101      	bne.n	8005306 <__sflush_r+0xb6>
 8005302:	602f      	str	r7, [r5, #0]
 8005304:	e7b1      	b.n	800526a <__sflush_r+0x1a>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800530c:	81a3      	strh	r3, [r4, #12]
 800530e:	e7ad      	b.n	800526c <__sflush_r+0x1c>
 8005310:	690f      	ldr	r7, [r1, #16]
 8005312:	2f00      	cmp	r7, #0
 8005314:	d0a9      	beq.n	800526a <__sflush_r+0x1a>
 8005316:	0793      	lsls	r3, r2, #30
 8005318:	680e      	ldr	r6, [r1, #0]
 800531a:	bf08      	it	eq
 800531c:	694b      	ldreq	r3, [r1, #20]
 800531e:	600f      	str	r7, [r1, #0]
 8005320:	bf18      	it	ne
 8005322:	2300      	movne	r3, #0
 8005324:	eba6 0807 	sub.w	r8, r6, r7
 8005328:	608b      	str	r3, [r1, #8]
 800532a:	f1b8 0f00 	cmp.w	r8, #0
 800532e:	dd9c      	ble.n	800526a <__sflush_r+0x1a>
 8005330:	6a21      	ldr	r1, [r4, #32]
 8005332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005334:	4643      	mov	r3, r8
 8005336:	463a      	mov	r2, r7
 8005338:	4628      	mov	r0, r5
 800533a:	47b0      	blx	r6
 800533c:	2800      	cmp	r0, #0
 800533e:	dc06      	bgt.n	800534e <__sflush_r+0xfe>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	e78e      	b.n	800526c <__sflush_r+0x1c>
 800534e:	4407      	add	r7, r0
 8005350:	eba8 0800 	sub.w	r8, r8, r0
 8005354:	e7e9      	b.n	800532a <__sflush_r+0xda>
 8005356:	bf00      	nop
 8005358:	dfbffffe 	.word	0xdfbffffe

0800535c <_fflush_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	690b      	ldr	r3, [r1, #16]
 8005360:	4605      	mov	r5, r0
 8005362:	460c      	mov	r4, r1
 8005364:	b913      	cbnz	r3, 800536c <_fflush_r+0x10>
 8005366:	2500      	movs	r5, #0
 8005368:	4628      	mov	r0, r5
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	b118      	cbz	r0, 8005376 <_fflush_r+0x1a>
 800536e:	6a03      	ldr	r3, [r0, #32]
 8005370:	b90b      	cbnz	r3, 8005376 <_fflush_r+0x1a>
 8005372:	f7fe fc03 	bl	8003b7c <__sinit>
 8005376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f3      	beq.n	8005366 <_fflush_r+0xa>
 800537e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005380:	07d0      	lsls	r0, r2, #31
 8005382:	d404      	bmi.n	800538e <_fflush_r+0x32>
 8005384:	0599      	lsls	r1, r3, #22
 8005386:	d402      	bmi.n	800538e <_fflush_r+0x32>
 8005388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800538a:	f7fe fcee 	bl	8003d6a <__retarget_lock_acquire_recursive>
 800538e:	4628      	mov	r0, r5
 8005390:	4621      	mov	r1, r4
 8005392:	f7ff ff5d 	bl	8005250 <__sflush_r>
 8005396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005398:	07da      	lsls	r2, r3, #31
 800539a:	4605      	mov	r5, r0
 800539c:	d4e4      	bmi.n	8005368 <_fflush_r+0xc>
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	059b      	lsls	r3, r3, #22
 80053a2:	d4e1      	bmi.n	8005368 <_fflush_r+0xc>
 80053a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053a6:	f7fe fce1 	bl	8003d6c <__retarget_lock_release_recursive>
 80053aa:	e7dd      	b.n	8005368 <_fflush_r+0xc>

080053ac <_sbrk_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4d06      	ldr	r5, [pc, #24]	; (80053c8 <_sbrk_r+0x1c>)
 80053b0:	2300      	movs	r3, #0
 80053b2:	4604      	mov	r4, r0
 80053b4:	4608      	mov	r0, r1
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	f7fb fcd6 	bl	8000d68 <_sbrk>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_sbrk_r+0x1a>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_sbrk_r+0x1a>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	20000410 	.word	0x20000410

080053cc <memcpy>:
 80053cc:	440a      	add	r2, r1
 80053ce:	4291      	cmp	r1, r2
 80053d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053d4:	d100      	bne.n	80053d8 <memcpy+0xc>
 80053d6:	4770      	bx	lr
 80053d8:	b510      	push	{r4, lr}
 80053da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053e2:	4291      	cmp	r1, r2
 80053e4:	d1f9      	bne.n	80053da <memcpy+0xe>
 80053e6:	bd10      	pop	{r4, pc}

080053e8 <__assert_func>:
 80053e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053ea:	4614      	mov	r4, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <__assert_func+0x2c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4605      	mov	r5, r0
 80053f4:	68d8      	ldr	r0, [r3, #12]
 80053f6:	b14c      	cbz	r4, 800540c <__assert_func+0x24>
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <__assert_func+0x30>)
 80053fa:	9100      	str	r1, [sp, #0]
 80053fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005400:	4906      	ldr	r1, [pc, #24]	; (800541c <__assert_func+0x34>)
 8005402:	462b      	mov	r3, r5
 8005404:	f000 f844 	bl	8005490 <fiprintf>
 8005408:	f000 f854 	bl	80054b4 <abort>
 800540c:	4b04      	ldr	r3, [pc, #16]	; (8005420 <__assert_func+0x38>)
 800540e:	461c      	mov	r4, r3
 8005410:	e7f3      	b.n	80053fa <__assert_func+0x12>
 8005412:	bf00      	nop
 8005414:	20000064 	.word	0x20000064
 8005418:	08005c5e 	.word	0x08005c5e
 800541c:	08005c6b 	.word	0x08005c6b
 8005420:	08005c99 	.word	0x08005c99

08005424 <_calloc_r>:
 8005424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005426:	fba1 2402 	umull	r2, r4, r1, r2
 800542a:	b94c      	cbnz	r4, 8005440 <_calloc_r+0x1c>
 800542c:	4611      	mov	r1, r2
 800542e:	9201      	str	r2, [sp, #4]
 8005430:	f7ff fb06 	bl	8004a40 <_malloc_r>
 8005434:	9a01      	ldr	r2, [sp, #4]
 8005436:	4605      	mov	r5, r0
 8005438:	b930      	cbnz	r0, 8005448 <_calloc_r+0x24>
 800543a:	4628      	mov	r0, r5
 800543c:	b003      	add	sp, #12
 800543e:	bd30      	pop	{r4, r5, pc}
 8005440:	220c      	movs	r2, #12
 8005442:	6002      	str	r2, [r0, #0]
 8005444:	2500      	movs	r5, #0
 8005446:	e7f8      	b.n	800543a <_calloc_r+0x16>
 8005448:	4621      	mov	r1, r4
 800544a:	f7fe fc10 	bl	8003c6e <memset>
 800544e:	e7f4      	b.n	800543a <_calloc_r+0x16>

08005450 <__ascii_mbtowc>:
 8005450:	b082      	sub	sp, #8
 8005452:	b901      	cbnz	r1, 8005456 <__ascii_mbtowc+0x6>
 8005454:	a901      	add	r1, sp, #4
 8005456:	b142      	cbz	r2, 800546a <__ascii_mbtowc+0x1a>
 8005458:	b14b      	cbz	r3, 800546e <__ascii_mbtowc+0x1e>
 800545a:	7813      	ldrb	r3, [r2, #0]
 800545c:	600b      	str	r3, [r1, #0]
 800545e:	7812      	ldrb	r2, [r2, #0]
 8005460:	1e10      	subs	r0, r2, #0
 8005462:	bf18      	it	ne
 8005464:	2001      	movne	r0, #1
 8005466:	b002      	add	sp, #8
 8005468:	4770      	bx	lr
 800546a:	4610      	mov	r0, r2
 800546c:	e7fb      	b.n	8005466 <__ascii_mbtowc+0x16>
 800546e:	f06f 0001 	mvn.w	r0, #1
 8005472:	e7f8      	b.n	8005466 <__ascii_mbtowc+0x16>

08005474 <__ascii_wctomb>:
 8005474:	b149      	cbz	r1, 800548a <__ascii_wctomb+0x16>
 8005476:	2aff      	cmp	r2, #255	; 0xff
 8005478:	bf85      	ittet	hi
 800547a:	238a      	movhi	r3, #138	; 0x8a
 800547c:	6003      	strhi	r3, [r0, #0]
 800547e:	700a      	strbls	r2, [r1, #0]
 8005480:	f04f 30ff 	movhi.w	r0, #4294967295
 8005484:	bf98      	it	ls
 8005486:	2001      	movls	r0, #1
 8005488:	4770      	bx	lr
 800548a:	4608      	mov	r0, r1
 800548c:	4770      	bx	lr
	...

08005490 <fiprintf>:
 8005490:	b40e      	push	{r1, r2, r3}
 8005492:	b503      	push	{r0, r1, lr}
 8005494:	4601      	mov	r1, r0
 8005496:	ab03      	add	r3, sp, #12
 8005498:	4805      	ldr	r0, [pc, #20]	; (80054b0 <fiprintf+0x20>)
 800549a:	f853 2b04 	ldr.w	r2, [r3], #4
 800549e:	6800      	ldr	r0, [r0, #0]
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	f000 f837 	bl	8005514 <_vfiprintf_r>
 80054a6:	b002      	add	sp, #8
 80054a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054ac:	b003      	add	sp, #12
 80054ae:	4770      	bx	lr
 80054b0:	20000064 	.word	0x20000064

080054b4 <abort>:
 80054b4:	b508      	push	{r3, lr}
 80054b6:	2006      	movs	r0, #6
 80054b8:	f000 fa04 	bl	80058c4 <raise>
 80054bc:	2001      	movs	r0, #1
 80054be:	f7fb fbdb 	bl	8000c78 <_exit>

080054c2 <__sfputc_r>:
 80054c2:	6893      	ldr	r3, [r2, #8]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	b410      	push	{r4}
 80054ca:	6093      	str	r3, [r2, #8]
 80054cc:	da08      	bge.n	80054e0 <__sfputc_r+0x1e>
 80054ce:	6994      	ldr	r4, [r2, #24]
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	db01      	blt.n	80054d8 <__sfputc_r+0x16>
 80054d4:	290a      	cmp	r1, #10
 80054d6:	d103      	bne.n	80054e0 <__sfputc_r+0x1e>
 80054d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054dc:	f000 b934 	b.w	8005748 <__swbuf_r>
 80054e0:	6813      	ldr	r3, [r2, #0]
 80054e2:	1c58      	adds	r0, r3, #1
 80054e4:	6010      	str	r0, [r2, #0]
 80054e6:	7019      	strb	r1, [r3, #0]
 80054e8:	4608      	mov	r0, r1
 80054ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <__sfputs_r>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	4606      	mov	r6, r0
 80054f4:	460f      	mov	r7, r1
 80054f6:	4614      	mov	r4, r2
 80054f8:	18d5      	adds	r5, r2, r3
 80054fa:	42ac      	cmp	r4, r5
 80054fc:	d101      	bne.n	8005502 <__sfputs_r+0x12>
 80054fe:	2000      	movs	r0, #0
 8005500:	e007      	b.n	8005512 <__sfputs_r+0x22>
 8005502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005506:	463a      	mov	r2, r7
 8005508:	4630      	mov	r0, r6
 800550a:	f7ff ffda 	bl	80054c2 <__sfputc_r>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	d1f3      	bne.n	80054fa <__sfputs_r+0xa>
 8005512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005514 <_vfiprintf_r>:
 8005514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005518:	460d      	mov	r5, r1
 800551a:	b09d      	sub	sp, #116	; 0x74
 800551c:	4614      	mov	r4, r2
 800551e:	4698      	mov	r8, r3
 8005520:	4606      	mov	r6, r0
 8005522:	b118      	cbz	r0, 800552c <_vfiprintf_r+0x18>
 8005524:	6a03      	ldr	r3, [r0, #32]
 8005526:	b90b      	cbnz	r3, 800552c <_vfiprintf_r+0x18>
 8005528:	f7fe fb28 	bl	8003b7c <__sinit>
 800552c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800552e:	07d9      	lsls	r1, r3, #31
 8005530:	d405      	bmi.n	800553e <_vfiprintf_r+0x2a>
 8005532:	89ab      	ldrh	r3, [r5, #12]
 8005534:	059a      	lsls	r2, r3, #22
 8005536:	d402      	bmi.n	800553e <_vfiprintf_r+0x2a>
 8005538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800553a:	f7fe fc16 	bl	8003d6a <__retarget_lock_acquire_recursive>
 800553e:	89ab      	ldrh	r3, [r5, #12]
 8005540:	071b      	lsls	r3, r3, #28
 8005542:	d501      	bpl.n	8005548 <_vfiprintf_r+0x34>
 8005544:	692b      	ldr	r3, [r5, #16]
 8005546:	b99b      	cbnz	r3, 8005570 <_vfiprintf_r+0x5c>
 8005548:	4629      	mov	r1, r5
 800554a:	4630      	mov	r0, r6
 800554c:	f000 f93a 	bl	80057c4 <__swsetup_r>
 8005550:	b170      	cbz	r0, 8005570 <_vfiprintf_r+0x5c>
 8005552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005554:	07dc      	lsls	r4, r3, #31
 8005556:	d504      	bpl.n	8005562 <_vfiprintf_r+0x4e>
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	b01d      	add	sp, #116	; 0x74
 800555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	0598      	lsls	r0, r3, #22
 8005566:	d4f7      	bmi.n	8005558 <_vfiprintf_r+0x44>
 8005568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800556a:	f7fe fbff 	bl	8003d6c <__retarget_lock_release_recursive>
 800556e:	e7f3      	b.n	8005558 <_vfiprintf_r+0x44>
 8005570:	2300      	movs	r3, #0
 8005572:	9309      	str	r3, [sp, #36]	; 0x24
 8005574:	2320      	movs	r3, #32
 8005576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800557a:	f8cd 800c 	str.w	r8, [sp, #12]
 800557e:	2330      	movs	r3, #48	; 0x30
 8005580:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005734 <_vfiprintf_r+0x220>
 8005584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005588:	f04f 0901 	mov.w	r9, #1
 800558c:	4623      	mov	r3, r4
 800558e:	469a      	mov	sl, r3
 8005590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005594:	b10a      	cbz	r2, 800559a <_vfiprintf_r+0x86>
 8005596:	2a25      	cmp	r2, #37	; 0x25
 8005598:	d1f9      	bne.n	800558e <_vfiprintf_r+0x7a>
 800559a:	ebba 0b04 	subs.w	fp, sl, r4
 800559e:	d00b      	beq.n	80055b8 <_vfiprintf_r+0xa4>
 80055a0:	465b      	mov	r3, fp
 80055a2:	4622      	mov	r2, r4
 80055a4:	4629      	mov	r1, r5
 80055a6:	4630      	mov	r0, r6
 80055a8:	f7ff ffa2 	bl	80054f0 <__sfputs_r>
 80055ac:	3001      	adds	r0, #1
 80055ae:	f000 80a9 	beq.w	8005704 <_vfiprintf_r+0x1f0>
 80055b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055b4:	445a      	add	r2, fp
 80055b6:	9209      	str	r2, [sp, #36]	; 0x24
 80055b8:	f89a 3000 	ldrb.w	r3, [sl]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 80a1 	beq.w	8005704 <_vfiprintf_r+0x1f0>
 80055c2:	2300      	movs	r3, #0
 80055c4:	f04f 32ff 	mov.w	r2, #4294967295
 80055c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055cc:	f10a 0a01 	add.w	sl, sl, #1
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	9307      	str	r3, [sp, #28]
 80055d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055d8:	931a      	str	r3, [sp, #104]	; 0x68
 80055da:	4654      	mov	r4, sl
 80055dc:	2205      	movs	r2, #5
 80055de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e2:	4854      	ldr	r0, [pc, #336]	; (8005734 <_vfiprintf_r+0x220>)
 80055e4:	f7fa fe2c 	bl	8000240 <memchr>
 80055e8:	9a04      	ldr	r2, [sp, #16]
 80055ea:	b9d8      	cbnz	r0, 8005624 <_vfiprintf_r+0x110>
 80055ec:	06d1      	lsls	r1, r2, #27
 80055ee:	bf44      	itt	mi
 80055f0:	2320      	movmi	r3, #32
 80055f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f6:	0713      	lsls	r3, r2, #28
 80055f8:	bf44      	itt	mi
 80055fa:	232b      	movmi	r3, #43	; 0x2b
 80055fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005600:	f89a 3000 	ldrb.w	r3, [sl]
 8005604:	2b2a      	cmp	r3, #42	; 0x2a
 8005606:	d015      	beq.n	8005634 <_vfiprintf_r+0x120>
 8005608:	9a07      	ldr	r2, [sp, #28]
 800560a:	4654      	mov	r4, sl
 800560c:	2000      	movs	r0, #0
 800560e:	f04f 0c0a 	mov.w	ip, #10
 8005612:	4621      	mov	r1, r4
 8005614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005618:	3b30      	subs	r3, #48	; 0x30
 800561a:	2b09      	cmp	r3, #9
 800561c:	d94d      	bls.n	80056ba <_vfiprintf_r+0x1a6>
 800561e:	b1b0      	cbz	r0, 800564e <_vfiprintf_r+0x13a>
 8005620:	9207      	str	r2, [sp, #28]
 8005622:	e014      	b.n	800564e <_vfiprintf_r+0x13a>
 8005624:	eba0 0308 	sub.w	r3, r0, r8
 8005628:	fa09 f303 	lsl.w	r3, r9, r3
 800562c:	4313      	orrs	r3, r2
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	46a2      	mov	sl, r4
 8005632:	e7d2      	b.n	80055da <_vfiprintf_r+0xc6>
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	1d19      	adds	r1, r3, #4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	9103      	str	r1, [sp, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	bfbb      	ittet	lt
 8005640:	425b      	neglt	r3, r3
 8005642:	f042 0202 	orrlt.w	r2, r2, #2
 8005646:	9307      	strge	r3, [sp, #28]
 8005648:	9307      	strlt	r3, [sp, #28]
 800564a:	bfb8      	it	lt
 800564c:	9204      	strlt	r2, [sp, #16]
 800564e:	7823      	ldrb	r3, [r4, #0]
 8005650:	2b2e      	cmp	r3, #46	; 0x2e
 8005652:	d10c      	bne.n	800566e <_vfiprintf_r+0x15a>
 8005654:	7863      	ldrb	r3, [r4, #1]
 8005656:	2b2a      	cmp	r3, #42	; 0x2a
 8005658:	d134      	bne.n	80056c4 <_vfiprintf_r+0x1b0>
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	1d1a      	adds	r2, r3, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	9203      	str	r2, [sp, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	bfb8      	it	lt
 8005666:	f04f 33ff 	movlt.w	r3, #4294967295
 800566a:	3402      	adds	r4, #2
 800566c:	9305      	str	r3, [sp, #20]
 800566e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005744 <_vfiprintf_r+0x230>
 8005672:	7821      	ldrb	r1, [r4, #0]
 8005674:	2203      	movs	r2, #3
 8005676:	4650      	mov	r0, sl
 8005678:	f7fa fde2 	bl	8000240 <memchr>
 800567c:	b138      	cbz	r0, 800568e <_vfiprintf_r+0x17a>
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	eba0 000a 	sub.w	r0, r0, sl
 8005684:	2240      	movs	r2, #64	; 0x40
 8005686:	4082      	lsls	r2, r0
 8005688:	4313      	orrs	r3, r2
 800568a:	3401      	adds	r4, #1
 800568c:	9304      	str	r3, [sp, #16]
 800568e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005692:	4829      	ldr	r0, [pc, #164]	; (8005738 <_vfiprintf_r+0x224>)
 8005694:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005698:	2206      	movs	r2, #6
 800569a:	f7fa fdd1 	bl	8000240 <memchr>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d03f      	beq.n	8005722 <_vfiprintf_r+0x20e>
 80056a2:	4b26      	ldr	r3, [pc, #152]	; (800573c <_vfiprintf_r+0x228>)
 80056a4:	bb1b      	cbnz	r3, 80056ee <_vfiprintf_r+0x1da>
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	3307      	adds	r3, #7
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	3308      	adds	r3, #8
 80056b0:	9303      	str	r3, [sp, #12]
 80056b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b4:	443b      	add	r3, r7
 80056b6:	9309      	str	r3, [sp, #36]	; 0x24
 80056b8:	e768      	b.n	800558c <_vfiprintf_r+0x78>
 80056ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80056be:	460c      	mov	r4, r1
 80056c0:	2001      	movs	r0, #1
 80056c2:	e7a6      	b.n	8005612 <_vfiprintf_r+0xfe>
 80056c4:	2300      	movs	r3, #0
 80056c6:	3401      	adds	r4, #1
 80056c8:	9305      	str	r3, [sp, #20]
 80056ca:	4619      	mov	r1, r3
 80056cc:	f04f 0c0a 	mov.w	ip, #10
 80056d0:	4620      	mov	r0, r4
 80056d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d6:	3a30      	subs	r2, #48	; 0x30
 80056d8:	2a09      	cmp	r2, #9
 80056da:	d903      	bls.n	80056e4 <_vfiprintf_r+0x1d0>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0c6      	beq.n	800566e <_vfiprintf_r+0x15a>
 80056e0:	9105      	str	r1, [sp, #20]
 80056e2:	e7c4      	b.n	800566e <_vfiprintf_r+0x15a>
 80056e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056e8:	4604      	mov	r4, r0
 80056ea:	2301      	movs	r3, #1
 80056ec:	e7f0      	b.n	80056d0 <_vfiprintf_r+0x1bc>
 80056ee:	ab03      	add	r3, sp, #12
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	462a      	mov	r2, r5
 80056f4:	4b12      	ldr	r3, [pc, #72]	; (8005740 <_vfiprintf_r+0x22c>)
 80056f6:	a904      	add	r1, sp, #16
 80056f8:	4630      	mov	r0, r6
 80056fa:	f7fd fe09 	bl	8003310 <_printf_float>
 80056fe:	4607      	mov	r7, r0
 8005700:	1c78      	adds	r0, r7, #1
 8005702:	d1d6      	bne.n	80056b2 <_vfiprintf_r+0x19e>
 8005704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005706:	07d9      	lsls	r1, r3, #31
 8005708:	d405      	bmi.n	8005716 <_vfiprintf_r+0x202>
 800570a:	89ab      	ldrh	r3, [r5, #12]
 800570c:	059a      	lsls	r2, r3, #22
 800570e:	d402      	bmi.n	8005716 <_vfiprintf_r+0x202>
 8005710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005712:	f7fe fb2b 	bl	8003d6c <__retarget_lock_release_recursive>
 8005716:	89ab      	ldrh	r3, [r5, #12]
 8005718:	065b      	lsls	r3, r3, #25
 800571a:	f53f af1d 	bmi.w	8005558 <_vfiprintf_r+0x44>
 800571e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005720:	e71c      	b.n	800555c <_vfiprintf_r+0x48>
 8005722:	ab03      	add	r3, sp, #12
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	462a      	mov	r2, r5
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <_vfiprintf_r+0x22c>)
 800572a:	a904      	add	r1, sp, #16
 800572c:	4630      	mov	r0, r6
 800572e:	f7fe f877 	bl	8003820 <_printf_i>
 8005732:	e7e4      	b.n	80056fe <_vfiprintf_r+0x1ea>
 8005734:	08005d9b 	.word	0x08005d9b
 8005738:	08005da5 	.word	0x08005da5
 800573c:	08003311 	.word	0x08003311
 8005740:	080054f1 	.word	0x080054f1
 8005744:	08005da1 	.word	0x08005da1

08005748 <__swbuf_r>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	460e      	mov	r6, r1
 800574c:	4614      	mov	r4, r2
 800574e:	4605      	mov	r5, r0
 8005750:	b118      	cbz	r0, 800575a <__swbuf_r+0x12>
 8005752:	6a03      	ldr	r3, [r0, #32]
 8005754:	b90b      	cbnz	r3, 800575a <__swbuf_r+0x12>
 8005756:	f7fe fa11 	bl	8003b7c <__sinit>
 800575a:	69a3      	ldr	r3, [r4, #24]
 800575c:	60a3      	str	r3, [r4, #8]
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	071a      	lsls	r2, r3, #28
 8005762:	d525      	bpl.n	80057b0 <__swbuf_r+0x68>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	b31b      	cbz	r3, 80057b0 <__swbuf_r+0x68>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	6922      	ldr	r2, [r4, #16]
 800576c:	1a98      	subs	r0, r3, r2
 800576e:	6963      	ldr	r3, [r4, #20]
 8005770:	b2f6      	uxtb	r6, r6
 8005772:	4283      	cmp	r3, r0
 8005774:	4637      	mov	r7, r6
 8005776:	dc04      	bgt.n	8005782 <__swbuf_r+0x3a>
 8005778:	4621      	mov	r1, r4
 800577a:	4628      	mov	r0, r5
 800577c:	f7ff fdee 	bl	800535c <_fflush_r>
 8005780:	b9e0      	cbnz	r0, 80057bc <__swbuf_r+0x74>
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	3b01      	subs	r3, #1
 8005786:	60a3      	str	r3, [r4, #8]
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	6022      	str	r2, [r4, #0]
 800578e:	701e      	strb	r6, [r3, #0]
 8005790:	6962      	ldr	r2, [r4, #20]
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	429a      	cmp	r2, r3
 8005796:	d004      	beq.n	80057a2 <__swbuf_r+0x5a>
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	07db      	lsls	r3, r3, #31
 800579c:	d506      	bpl.n	80057ac <__swbuf_r+0x64>
 800579e:	2e0a      	cmp	r6, #10
 80057a0:	d104      	bne.n	80057ac <__swbuf_r+0x64>
 80057a2:	4621      	mov	r1, r4
 80057a4:	4628      	mov	r0, r5
 80057a6:	f7ff fdd9 	bl	800535c <_fflush_r>
 80057aa:	b938      	cbnz	r0, 80057bc <__swbuf_r+0x74>
 80057ac:	4638      	mov	r0, r7
 80057ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b0:	4621      	mov	r1, r4
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 f806 	bl	80057c4 <__swsetup_r>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d0d5      	beq.n	8005768 <__swbuf_r+0x20>
 80057bc:	f04f 37ff 	mov.w	r7, #4294967295
 80057c0:	e7f4      	b.n	80057ac <__swbuf_r+0x64>
	...

080057c4 <__swsetup_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4b2a      	ldr	r3, [pc, #168]	; (8005870 <__swsetup_r+0xac>)
 80057c8:	4605      	mov	r5, r0
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	460c      	mov	r4, r1
 80057ce:	b118      	cbz	r0, 80057d8 <__swsetup_r+0x14>
 80057d0:	6a03      	ldr	r3, [r0, #32]
 80057d2:	b90b      	cbnz	r3, 80057d8 <__swsetup_r+0x14>
 80057d4:	f7fe f9d2 	bl	8003b7c <__sinit>
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057de:	0718      	lsls	r0, r3, #28
 80057e0:	d422      	bmi.n	8005828 <__swsetup_r+0x64>
 80057e2:	06d9      	lsls	r1, r3, #27
 80057e4:	d407      	bmi.n	80057f6 <__swsetup_r+0x32>
 80057e6:	2309      	movs	r3, #9
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295
 80057f4:	e034      	b.n	8005860 <__swsetup_r+0x9c>
 80057f6:	0758      	lsls	r0, r3, #29
 80057f8:	d512      	bpl.n	8005820 <__swsetup_r+0x5c>
 80057fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057fc:	b141      	cbz	r1, 8005810 <__swsetup_r+0x4c>
 80057fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005802:	4299      	cmp	r1, r3
 8005804:	d002      	beq.n	800580c <__swsetup_r+0x48>
 8005806:	4628      	mov	r0, r5
 8005808:	f7ff f8a6 	bl	8004958 <_free_r>
 800580c:	2300      	movs	r3, #0
 800580e:	6363      	str	r3, [r4, #52]	; 0x34
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	2300      	movs	r3, #0
 800581a:	6063      	str	r3, [r4, #4]
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f043 0308 	orr.w	r3, r3, #8
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	b94b      	cbnz	r3, 8005840 <__swsetup_r+0x7c>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005836:	d003      	beq.n	8005840 <__swsetup_r+0x7c>
 8005838:	4621      	mov	r1, r4
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f884 	bl	8005948 <__smakebuf_r>
 8005840:	89a0      	ldrh	r0, [r4, #12]
 8005842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005846:	f010 0301 	ands.w	r3, r0, #1
 800584a:	d00a      	beq.n	8005862 <__swsetup_r+0x9e>
 800584c:	2300      	movs	r3, #0
 800584e:	60a3      	str	r3, [r4, #8]
 8005850:	6963      	ldr	r3, [r4, #20]
 8005852:	425b      	negs	r3, r3
 8005854:	61a3      	str	r3, [r4, #24]
 8005856:	6923      	ldr	r3, [r4, #16]
 8005858:	b943      	cbnz	r3, 800586c <__swsetup_r+0xa8>
 800585a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800585e:	d1c4      	bne.n	80057ea <__swsetup_r+0x26>
 8005860:	bd38      	pop	{r3, r4, r5, pc}
 8005862:	0781      	lsls	r1, r0, #30
 8005864:	bf58      	it	pl
 8005866:	6963      	ldrpl	r3, [r4, #20]
 8005868:	60a3      	str	r3, [r4, #8]
 800586a:	e7f4      	b.n	8005856 <__swsetup_r+0x92>
 800586c:	2000      	movs	r0, #0
 800586e:	e7f7      	b.n	8005860 <__swsetup_r+0x9c>
 8005870:	20000064 	.word	0x20000064

08005874 <_raise_r>:
 8005874:	291f      	cmp	r1, #31
 8005876:	b538      	push	{r3, r4, r5, lr}
 8005878:	4604      	mov	r4, r0
 800587a:	460d      	mov	r5, r1
 800587c:	d904      	bls.n	8005888 <_raise_r+0x14>
 800587e:	2316      	movs	r3, #22
 8005880:	6003      	str	r3, [r0, #0]
 8005882:	f04f 30ff 	mov.w	r0, #4294967295
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800588a:	b112      	cbz	r2, 8005892 <_raise_r+0x1e>
 800588c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005890:	b94b      	cbnz	r3, 80058a6 <_raise_r+0x32>
 8005892:	4620      	mov	r0, r4
 8005894:	f000 f830 	bl	80058f8 <_getpid_r>
 8005898:	462a      	mov	r2, r5
 800589a:	4601      	mov	r1, r0
 800589c:	4620      	mov	r0, r4
 800589e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058a2:	f000 b817 	b.w	80058d4 <_kill_r>
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d00a      	beq.n	80058c0 <_raise_r+0x4c>
 80058aa:	1c59      	adds	r1, r3, #1
 80058ac:	d103      	bne.n	80058b6 <_raise_r+0x42>
 80058ae:	2316      	movs	r3, #22
 80058b0:	6003      	str	r3, [r0, #0]
 80058b2:	2001      	movs	r0, #1
 80058b4:	e7e7      	b.n	8005886 <_raise_r+0x12>
 80058b6:	2400      	movs	r4, #0
 80058b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058bc:	4628      	mov	r0, r5
 80058be:	4798      	blx	r3
 80058c0:	2000      	movs	r0, #0
 80058c2:	e7e0      	b.n	8005886 <_raise_r+0x12>

080058c4 <raise>:
 80058c4:	4b02      	ldr	r3, [pc, #8]	; (80058d0 <raise+0xc>)
 80058c6:	4601      	mov	r1, r0
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	f7ff bfd3 	b.w	8005874 <_raise_r>
 80058ce:	bf00      	nop
 80058d0:	20000064 	.word	0x20000064

080058d4 <_kill_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d07      	ldr	r5, [pc, #28]	; (80058f4 <_kill_r+0x20>)
 80058d8:	2300      	movs	r3, #0
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	4611      	mov	r1, r2
 80058e0:	602b      	str	r3, [r5, #0]
 80058e2:	f7fb f9b9 	bl	8000c58 <_kill>
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	d102      	bne.n	80058f0 <_kill_r+0x1c>
 80058ea:	682b      	ldr	r3, [r5, #0]
 80058ec:	b103      	cbz	r3, 80058f0 <_kill_r+0x1c>
 80058ee:	6023      	str	r3, [r4, #0]
 80058f0:	bd38      	pop	{r3, r4, r5, pc}
 80058f2:	bf00      	nop
 80058f4:	20000410 	.word	0x20000410

080058f8 <_getpid_r>:
 80058f8:	f7fb b9a6 	b.w	8000c48 <_getpid>

080058fc <__swhatbuf_r>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	460c      	mov	r4, r1
 8005900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005904:	2900      	cmp	r1, #0
 8005906:	b096      	sub	sp, #88	; 0x58
 8005908:	4615      	mov	r5, r2
 800590a:	461e      	mov	r6, r3
 800590c:	da0d      	bge.n	800592a <__swhatbuf_r+0x2e>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005914:	f04f 0100 	mov.w	r1, #0
 8005918:	bf0c      	ite	eq
 800591a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800591e:	2340      	movne	r3, #64	; 0x40
 8005920:	2000      	movs	r0, #0
 8005922:	6031      	str	r1, [r6, #0]
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	b016      	add	sp, #88	; 0x58
 8005928:	bd70      	pop	{r4, r5, r6, pc}
 800592a:	466a      	mov	r2, sp
 800592c:	f000 f848 	bl	80059c0 <_fstat_r>
 8005930:	2800      	cmp	r0, #0
 8005932:	dbec      	blt.n	800590e <__swhatbuf_r+0x12>
 8005934:	9901      	ldr	r1, [sp, #4]
 8005936:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800593a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800593e:	4259      	negs	r1, r3
 8005940:	4159      	adcs	r1, r3
 8005942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005946:	e7eb      	b.n	8005920 <__swhatbuf_r+0x24>

08005948 <__smakebuf_r>:
 8005948:	898b      	ldrh	r3, [r1, #12]
 800594a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800594c:	079d      	lsls	r5, r3, #30
 800594e:	4606      	mov	r6, r0
 8005950:	460c      	mov	r4, r1
 8005952:	d507      	bpl.n	8005964 <__smakebuf_r+0x1c>
 8005954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	6123      	str	r3, [r4, #16]
 800595c:	2301      	movs	r3, #1
 800595e:	6163      	str	r3, [r4, #20]
 8005960:	b002      	add	sp, #8
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	ab01      	add	r3, sp, #4
 8005966:	466a      	mov	r2, sp
 8005968:	f7ff ffc8 	bl	80058fc <__swhatbuf_r>
 800596c:	9900      	ldr	r1, [sp, #0]
 800596e:	4605      	mov	r5, r0
 8005970:	4630      	mov	r0, r6
 8005972:	f7ff f865 	bl	8004a40 <_malloc_r>
 8005976:	b948      	cbnz	r0, 800598c <__smakebuf_r+0x44>
 8005978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800597c:	059a      	lsls	r2, r3, #22
 800597e:	d4ef      	bmi.n	8005960 <__smakebuf_r+0x18>
 8005980:	f023 0303 	bic.w	r3, r3, #3
 8005984:	f043 0302 	orr.w	r3, r3, #2
 8005988:	81a3      	strh	r3, [r4, #12]
 800598a:	e7e3      	b.n	8005954 <__smakebuf_r+0xc>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	6020      	str	r0, [r4, #0]
 8005990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	9b00      	ldr	r3, [sp, #0]
 8005998:	6163      	str	r3, [r4, #20]
 800599a:	9b01      	ldr	r3, [sp, #4]
 800599c:	6120      	str	r0, [r4, #16]
 800599e:	b15b      	cbz	r3, 80059b8 <__smakebuf_r+0x70>
 80059a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059a4:	4630      	mov	r0, r6
 80059a6:	f000 f81d 	bl	80059e4 <_isatty_r>
 80059aa:	b128      	cbz	r0, 80059b8 <__smakebuf_r+0x70>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	81a3      	strh	r3, [r4, #12]
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	431d      	orrs	r5, r3
 80059bc:	81a5      	strh	r5, [r4, #12]
 80059be:	e7cf      	b.n	8005960 <__smakebuf_r+0x18>

080059c0 <_fstat_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d07      	ldr	r5, [pc, #28]	; (80059e0 <_fstat_r+0x20>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	602b      	str	r3, [r5, #0]
 80059ce:	f7fb f9a2 	bl	8000d16 <_fstat>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	d102      	bne.n	80059dc <_fstat_r+0x1c>
 80059d6:	682b      	ldr	r3, [r5, #0]
 80059d8:	b103      	cbz	r3, 80059dc <_fstat_r+0x1c>
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	bd38      	pop	{r3, r4, r5, pc}
 80059de:	bf00      	nop
 80059e0:	20000410 	.word	0x20000410

080059e4 <_isatty_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4d06      	ldr	r5, [pc, #24]	; (8005a00 <_isatty_r+0x1c>)
 80059e8:	2300      	movs	r3, #0
 80059ea:	4604      	mov	r4, r0
 80059ec:	4608      	mov	r0, r1
 80059ee:	602b      	str	r3, [r5, #0]
 80059f0:	f7fb f9a1 	bl	8000d36 <_isatty>
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d102      	bne.n	80059fe <_isatty_r+0x1a>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	b103      	cbz	r3, 80059fe <_isatty_r+0x1a>
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	20000410 	.word	0x20000410

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
