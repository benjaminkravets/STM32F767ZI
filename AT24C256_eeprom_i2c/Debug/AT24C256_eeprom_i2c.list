
AT24C256_eeprom_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006554  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08006758  08006758  00007758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae8  08006ae8  00008210  2**0
                  CONTENTS
  4 .ARM          00000008  08006ae8  08006ae8  00007ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af0  08006af0  00008210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af0  08006af0  00007af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af4  08006af4  00007af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08006af8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000210  08006d08  00008210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08006d08  00008524  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d08d  00000000  00000000  0000823e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d41  00000000  00000000  000152cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00017010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000835  00000000  00000000  00017ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280c0  00000000  00000000  000182e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edd7  00000000  00000000  000403a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f476f  00000000  00000000  0004f17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001438eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003918  00000000  00000000  00143930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00147248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000210 	.word	0x20000210
 800021c:	00000000 	.word	0x00000000
 8000220:	0800673c 	.word	0x0800673c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000214 	.word	0x20000214
 800023c:	0800673c 	.word	0x0800673c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <remaining_bytes>:




//return how many bytes remain to be read or written during current operation
uint16_t remaining_bytes (uint16_t size, uint16_t offset){
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	80bb      	strh	r3, [r7, #4]
	if ((size+offset) < PAGE_SIZE) return size;
 80005f0:	88fa      	ldrh	r2, [r7, #6]
 80005f2:	88bb      	ldrh	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80005f8:	dc01      	bgt.n	80005fe <remaining_bytes+0x1e>
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	e003      	b.n	8000606 <remaining_bytes+0x26>
	else return PAGE_SIZE-offset;
 80005fe:	88bb      	ldrh	r3, [r7, #4]
 8000600:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000604:	b29b      	uxth	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <eeprom_write_bytes>:
 * @param data pointer to bytes to write
 * @param size how many bytes to write
 *
 */

void eeprom_write_bytes(I2C_HandleTypeDef* i2c, uint16_t page, uint16_t offset, uint8_t* data, uint16_t size){
 8000612:	b580      	push	{r7, lr}
 8000614:	b08e      	sub	sp, #56	@ 0x38
 8000616:	af04      	add	r7, sp, #16
 8000618:	60f8      	str	r0, [r7, #12]
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	817b      	strh	r3, [r7, #10]
 8000620:	4613      	mov	r3, r2
 8000622:	813b      	strh	r3, [r7, #8]

	//Calculate bits to shift page number by
	int page_address_offset = log(PAGE_SIZE) / log(2);
 8000624:	2306      	movs	r3, #6
 8000626:	61fb      	str	r3, [r7, #28]

	//start and end pages
	uint16_t start_page = page;
 8000628:	897b      	ldrh	r3, [r7, #10]
 800062a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t end_page = page + ((size+offset)/PAGE_SIZE);
 800062c:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800062e:	893b      	ldrh	r3, [r7, #8]
 8000630:	4413      	add	r3, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	da00      	bge.n	8000638 <eeprom_write_bytes+0x26>
 8000636:	333f      	adds	r3, #63	@ 0x3f
 8000638:	119b      	asrs	r3, r3, #6
 800063a:	b29a      	uxth	r2, r3
 800063c:	897b      	ldrh	r3, [r7, #10]
 800063e:	4413      	add	r3, r2
 8000640:	837b      	strh	r3, [r7, #26]

	//number of pages to write
	uint16_t pages_to_write = (end_page-start_page) + 1;
 8000642:	8b7a      	ldrh	r2, [r7, #26]
 8000644:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	b29b      	uxth	r3, r3
 800064a:	3301      	adds	r3, #1
 800064c:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800064e:	2300      	movs	r3, #0
 8000650:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i = 0; i<pages_to_write; i++){
 8000652:	2300      	movs	r3, #0
 8000654:	623b      	str	r3, [r7, #32]
 8000656:	e034      	b.n	80006c2 <eeprom_write_bytes+0xb0>

		//get operative memory address by making page start 9 bits more significant, then "adding" the page offset.
		uint16_t mem_address = start_page << page_address_offset | offset;
 8000658:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	b21a      	sxth	r2, r3
 8000662:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
 8000668:	b21b      	sxth	r3, r3
 800066a:	82fb      	strh	r3, [r7, #22]
		uint16_t bytes_remaining = remaining_bytes(size, offset);
 800066c:	893a      	ldrh	r2, [r7, #8]
 800066e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffb4 	bl	80005e0 <remaining_bytes>
 8000678:	4603      	mov	r3, r0
 800067a:	82bb      	strh	r3, [r7, #20]

		//write to chip
		HAL_I2C_Mem_Write(i2c, EEPROM_ADDR, mem_address, 2, &data[pos], bytes_remaining, 1000);
 800067c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	8af9      	ldrh	r1, [r7, #22]
 8000684:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000688:	9202      	str	r2, [sp, #8]
 800068a:	8aba      	ldrh	r2, [r7, #20]
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2302      	movs	r3, #2
 8000692:	460a      	mov	r2, r1
 8000694:	21a0      	movs	r1, #160	@ 0xa0
 8000696:	68f8      	ldr	r0, [r7, #12]
 8000698:	f001 f918 	bl	80018cc <HAL_I2C_Mem_Write>

		//increase the start page and adjust offset, size, and position going forward.
		start_page += 1;
 800069c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800069e:	3301      	adds	r3, #1
 80006a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	813b      	strh	r3, [r7, #8]
		size = size-bytes_remaining;
 80006a6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80006a8:	8abb      	ldrh	r3, [r7, #20]
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	863b      	strh	r3, [r7, #48]	@ 0x30
		pos += bytes_remaining;
 80006ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80006b0:	8abb      	ldrh	r3, [r7, #20]
 80006b2:	4413      	add	r3, r2
 80006b4:	84bb      	strh	r3, [r7, #36]	@ 0x24

		HAL_Delay(5);
 80006b6:	2005      	movs	r0, #5
 80006b8:	f000 fd8e 	bl	80011d8 <HAL_Delay>
	for (int i = 0; i<pages_to_write; i++){
 80006bc:	6a3b      	ldr	r3, [r7, #32]
 80006be:	3301      	adds	r3, #1
 80006c0:	623b      	str	r3, [r7, #32]
 80006c2:	8b3b      	ldrh	r3, [r7, #24]
 80006c4:	6a3a      	ldr	r2, [r7, #32]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbc6      	blt.n	8000658 <eeprom_write_bytes+0x46>
	}
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	@ 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <eeprom_read_bytes>:
 * @param data pointer to which data is read
 * @param size how many bytes to read
 *
 */

void eeprom_read_bytes(I2C_HandleTypeDef* i2c, uint16_t page, uint16_t offset, uint8_t* data, uint16_t size){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08e      	sub	sp, #56	@ 0x38
 80006d8:	af04      	add	r7, sp, #16
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	460b      	mov	r3, r1
 80006e0:	817b      	strh	r3, [r7, #10]
 80006e2:	4613      	mov	r3, r2
 80006e4:	813b      	strh	r3, [r7, #8]

	//Calculate bits to shift page number by
	int page_address_offset = log(PAGE_SIZE) / log(2);
 80006e6:	2306      	movs	r3, #6
 80006e8:	61fb      	str	r3, [r7, #28]

	//start and end pages
	uint16_t start_page = page;
 80006ea:	897b      	ldrh	r3, [r7, #10]
 80006ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t end_page = page + ((size+offset)/PAGE_SIZE);
 80006ee:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80006f0:	893b      	ldrh	r3, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	da00      	bge.n	80006fa <eeprom_read_bytes+0x26>
 80006f8:	333f      	adds	r3, #63	@ 0x3f
 80006fa:	119b      	asrs	r3, r3, #6
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	897b      	ldrh	r3, [r7, #10]
 8000700:	4413      	add	r3, r2
 8000702:	837b      	strh	r3, [r7, #26]

	//number of pages to write
	uint16_t pages_to_write = (end_page-start_page) + 1;
 8000704:	8b7a      	ldrh	r2, [r7, #26]
 8000706:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	b29b      	uxth	r3, r3
 800070c:	3301      	adds	r3, #1
 800070e:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 8000710:	2300      	movs	r3, #0
 8000712:	84bb      	strh	r3, [r7, #36]	@ 0x24

	for (int i = 0; i<pages_to_write; i++){
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
 8000718:	e031      	b.n	800077e <eeprom_read_bytes+0xaa>

		//get operative memory address by making page start 9 bits more significant, then "adding" the page offset.
		uint16_t mem_address = start_page<<page_address_offset | offset;
 800071a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	b21a      	sxth	r2, r3
 8000724:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000728:	4313      	orrs	r3, r2
 800072a:	b21b      	sxth	r3, r3
 800072c:	82fb      	strh	r3, [r7, #22]
		uint16_t bytes_remaining = remaining_bytes(size, offset);
 800072e:	893a      	ldrh	r2, [r7, #8]
 8000730:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff53 	bl	80005e0 <remaining_bytes>
 800073a:	4603      	mov	r3, r0
 800073c:	82bb      	strh	r3, [r7, #20]

		//write to chip
		HAL_I2C_Mem_Read(i2c, EEPROM_ADDR, mem_address, 2, &data[pos], bytes_remaining, 1000);
 800073e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	8af9      	ldrh	r1, [r7, #22]
 8000746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800074a:	9202      	str	r2, [sp, #8]
 800074c:	8aba      	ldrh	r2, [r7, #20]
 800074e:	9201      	str	r2, [sp, #4]
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2302      	movs	r3, #2
 8000754:	460a      	mov	r2, r1
 8000756:	21a0      	movs	r1, #160	@ 0xa0
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f001 f9cb 	bl	8001af4 <HAL_I2C_Mem_Read>

		//increase the start page and adjust offset, size, and position going forward.
		start_page += 1;
 800075e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000760:	3301      	adds	r3, #1
 8000762:	84fb      	strh	r3, [r7, #38]	@ 0x26
		offset = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	813b      	strh	r3, [r7, #8]
		size = size-bytes_remaining;
 8000768:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800076a:	8abb      	ldrh	r3, [r7, #20]
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	863b      	strh	r3, [r7, #48]	@ 0x30
		pos += bytes_remaining;
 8000770:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000772:	8abb      	ldrh	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (int i = 0; i<pages_to_write; i++){
 8000778:	6a3b      	ldr	r3, [r7, #32]
 800077a:	3301      	adds	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
 800077e:	8b3b      	ldrh	r3, [r7, #24]
 8000780:	6a3a      	ldr	r2, [r7, #32]
 8000782:	429a      	cmp	r2, r3
 8000784:	dbc9      	blt.n	800071a <eeprom_read_bytes+0x46>

	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <eeprom_erasepage>:
 * Erase page
 * @param i2c handler for i2c instance to use
 * @param page to erase
 */

void eeprom_erasepage(I2C_HandleTypeDef* i2c, uint16_t page){
 8000790:	b580      	push	{r7, lr}
 8000792:	b098      	sub	sp, #96	@ 0x60
 8000794:	af04      	add	r7, sp, #16
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]

	//Calculate bits to shift page number by
	int page_address_offset = log(PAGE_SIZE)/log(2);
 800079c:	2306      	movs	r3, #6
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	//get operative memory address by making page start 9 bits more significant
	uint16_t mem_address = page << page_address_offset;
 80007a0:	887a      	ldrh	r2, [r7, #2]
 80007a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	//create memory of just zeroes to write to chip
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	2240      	movs	r2, #64	@ 0x40
 80007b2:	21ff      	movs	r1, #255	@ 0xff
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 f90c 	bl	80049d2 <memset>

	//write page as blank
	HAL_I2C_Mem_Write(i2c, EEPROM_ADDR, mem_address, 2, data, PAGE_SIZE, 1000);
 80007ba:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80007be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c2:	9302      	str	r3, [sp, #8]
 80007c4:	2340      	movs	r3, #64	@ 0x40
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2302      	movs	r3, #2
 80007d0:	21a0      	movs	r1, #160	@ 0xa0
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f001 f87a 	bl	80018cc <HAL_I2C_Mem_Write>

	HAL_Delay(5);
 80007d8:	2005      	movs	r0, #5
 80007da:	f000 fcfd 	bl	80011d8 <HAL_Delay>

}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	@ 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <print_to_uart>:
uint8_t dataw2[] = "goodbye from STM32 to EEPROM!";

uint8_t datar1[100];
uint8_t datar2[100];

void print_to_uart(uint8_t* str){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, str, strlen(str), 500);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fd75 	bl	80002e0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4806      	ldr	r0, [pc, #24]	@ (800081c <print_to_uart+0x34>)
 8000802:	f002 ff0b 	bl	800361c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, "\r\n", 2, 500);
 8000806:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800080a:	2202      	movs	r2, #2
 800080c:	4904      	ldr	r1, [pc, #16]	@ (8000820 <print_to_uart+0x38>)
 800080e:	4803      	ldr	r0, [pc, #12]	@ (800081c <print_to_uart+0x34>)
 8000810:	f002 ff04 	bl	800361c <HAL_UART_Transmit>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000280 	.word	0x20000280
 8000820:	08006758 	.word	0x08006758

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fc78 	bl	800111e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f859 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f000 f921 	bl	8000a78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000836:	f000 f8b1 	bl	800099c <MX_I2C1_Init>
  MX_UART4_Init();
 800083a:	f000 f8ed 	bl	8000a18 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  for (int i = 0; i < PAGE_SIZE; i++){
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	e008      	b.n	8000856 <main+0x32>
	  eeprom_erasepage(&hi2c1, i);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	b29b      	uxth	r3, r3
 8000848:	4619      	mov	r1, r3
 800084a:	4820      	ldr	r0, [pc, #128]	@ (80008cc <main+0xa8>)
 800084c:	f7ff ffa0 	bl	8000790 <eeprom_erasepage>
  for (int i = 0; i < PAGE_SIZE; i++){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3301      	adds	r3, #1
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b3f      	cmp	r3, #63	@ 0x3f
 800085a:	ddf3      	ble.n	8000844 <main+0x20>
  }

  eeprom_write_bytes(&hi2c1, 26, 7, dataw1, strlen((char *)dataw1));
 800085c:	481c      	ldr	r0, [pc, #112]	@ (80008d0 <main+0xac>)
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29b      	uxth	r3, r3
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <main+0xac>)
 800086a:	2207      	movs	r2, #7
 800086c:	211a      	movs	r1, #26
 800086e:	4817      	ldr	r0, [pc, #92]	@ (80008cc <main+0xa8>)
 8000870:	f7ff fecf 	bl	8000612 <eeprom_write_bytes>

  eeprom_write_bytes(&hi2c1, 42, 20, dataw2, strlen((char *)dataw2));
 8000874:	4817      	ldr	r0, [pc, #92]	@ (80008d4 <main+0xb0>)
 8000876:	f7ff fd33 	bl	80002e0 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29b      	uxth	r3, r3
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <main+0xb0>)
 8000882:	2214      	movs	r2, #20
 8000884:	212a      	movs	r1, #42	@ 0x2a
 8000886:	4811      	ldr	r0, [pc, #68]	@ (80008cc <main+0xa8>)
 8000888:	f7ff fec3 	bl	8000612 <eeprom_write_bytes>


  eeprom_read_bytes(&hi2c1, 26, 0, datar1, 50);
 800088c:	2332      	movs	r3, #50	@ 0x32
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <main+0xb4>)
 8000892:	2200      	movs	r2, #0
 8000894:	211a      	movs	r1, #26
 8000896:	480d      	ldr	r0, [pc, #52]	@ (80008cc <main+0xa8>)
 8000898:	f7ff ff1c 	bl	80006d4 <eeprom_read_bytes>

  eeprom_read_bytes(&hi2c1, 42, 15, datar2, 50);
 800089c:	2332      	movs	r3, #50	@ 0x32
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <main+0xb8>)
 80008a2:	220f      	movs	r2, #15
 80008a4:	212a      	movs	r1, #42	@ 0x2a
 80008a6:	4809      	ldr	r0, [pc, #36]	@ (80008cc <main+0xa8>)
 80008a8:	f7ff ff14 	bl	80006d4 <eeprom_read_bytes>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <main+0xbc>)
 80008b0:	f000 ff61 	bl	8001776 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b8:	f000 fc8e 	bl	80011d8 <HAL_Delay>

	print_to_uart(&datar1);
 80008bc:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <main+0xb4>)
 80008be:	f7ff ff93 	bl	80007e8 <print_to_uart>
	print_to_uart(&datar2);
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <main+0xb8>)
 80008c4:	f7ff ff90 	bl	80007e8 <print_to_uart>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008c8:	bf00      	nop
 80008ca:	e7ef      	b.n	80008ac <main+0x88>
 80008cc:	2000022c 	.word	0x2000022c
 80008d0:	20000000 	.word	0x20000000
 80008d4:	2000001c 	.word	0x2000001c
 80008d8:	20000308 	.word	0x20000308
 80008dc:	2000036c 	.word	0x2000036c
 80008e0:	40020400 	.word	0x40020400

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	@ 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2234      	movs	r2, #52	@ 0x34
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 f86d 	bl	80049d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <SystemClock_Config+0xb0>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <SystemClock_Config+0xb0>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	@ 0x40
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <SystemClock_Config+0xb0>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <SystemClock_Config+0xb4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000928:	4a1b      	ldr	r2, [pc, #108]	@ (8000998 <SystemClock_Config+0xb4>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <SystemClock_Config+0xb4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000948:	2300      	movs	r3, #0
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4618      	mov	r0, r3
 8000952:	f001 fd1b 	bl	800238c <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800095c:	f000 f9a2 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000970:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f001 ffb3 	bl	80028e8 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000988:	f000 f98c 	bl	8000ca4 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	@ 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a14 <MX_I2C1_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009a8:	f240 220b 	movw	r2, #523	@ 0x20b
 80009ac:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c6:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d8:	480d      	ldr	r0, [pc, #52]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009da:	f000 fee7 	bl	80017ac <HAL_I2C_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e4:	f000 f95e 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4809      	ldr	r0, [pc, #36]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009ec:	f001 fc36 	bl	800225c <HAL_I2CEx_ConfigAnalogFilter>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009f6:	f000 f955 	bl	8000ca4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_I2C1_Init+0x74>)
 80009fe:	f001 fc78 	bl	80022f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a08:	f000 f94c 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000022c 	.word	0x2000022c
 8000a14:	40005400 	.word	0x40005400

08000a18 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a1e:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <MX_UART4_Init+0x5c>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_UART4_Init+0x58>)
 8000a5c:	f002 fd90 	bl	8003580 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a66:	f000 f91d 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000280 	.word	0x20000280
 8000a74:	40004c00 	.word	0x40004c00

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	@ 0x30
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a7e      	ldr	r2, [pc, #504]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	4b79      	ldr	r3, [pc, #484]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a78      	ldr	r2, [pc, #480]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b76      	ldr	r3, [pc, #472]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b73      	ldr	r3, [pc, #460]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a72      	ldr	r2, [pc, #456]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b70      	ldr	r3, [pc, #448]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a6c      	ldr	r2, [pc, #432]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b67      	ldr	r3, [pc, #412]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a66      	ldr	r2, [pc, #408]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b64      	ldr	r3, [pc, #400]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b06:	4b61      	ldr	r3, [pc, #388]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a60      	ldr	r2, [pc, #384]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b5e      	ldr	r3, [pc, #376]	@ (8000c8c <MX_GPIO_Init+0x214>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b24:	485a      	ldr	r0, [pc, #360]	@ (8000c90 <MX_GPIO_Init+0x218>)
 8000b26:	f000 fe0d 	bl	8001744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2140      	movs	r1, #64	@ 0x40
 8000b2e:	4859      	ldr	r0, [pc, #356]	@ (8000c94 <MX_GPIO_Init+0x21c>)
 8000b30:	f000 fe08 	bl	8001744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4853      	ldr	r0, [pc, #332]	@ (8000c98 <MX_GPIO_Init+0x220>)
 8000b4c:	f000 fc4e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b50:	2332      	movs	r3, #50	@ 0x32
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b60:	230b      	movs	r3, #11
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	484b      	ldr	r0, [pc, #300]	@ (8000c98 <MX_GPIO_Init+0x220>)
 8000b6c:	f000 fc3e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b70:	2386      	movs	r3, #134	@ 0x86
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b80:	230b      	movs	r3, #11
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4844      	ldr	r0, [pc, #272]	@ (8000c9c <MX_GPIO_Init+0x224>)
 8000b8c:	f000 fc2e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b90:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4839      	ldr	r0, [pc, #228]	@ (8000c90 <MX_GPIO_Init+0x218>)
 8000baa:	f000 fc1f 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4831      	ldr	r0, [pc, #196]	@ (8000c90 <MX_GPIO_Init+0x218>)
 8000bcc:	f000 fc0e 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bd0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000be2:	2307      	movs	r3, #7
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	482c      	ldr	r0, [pc, #176]	@ (8000ca0 <MX_GPIO_Init+0x228>)
 8000bee:	f000 fbfd 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf2:	2340      	movs	r3, #64	@ 0x40
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4822      	ldr	r0, [pc, #136]	@ (8000c94 <MX_GPIO_Init+0x21c>)
 8000c0a:	f000 fbef 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c0e:	2380      	movs	r3, #128	@ 0x80
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481c      	ldr	r0, [pc, #112]	@ (8000c94 <MX_GPIO_Init+0x21c>)
 8000c22:	f000 fbe3 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c26:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c38:	230a      	movs	r3, #10
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4816      	ldr	r0, [pc, #88]	@ (8000c9c <MX_GPIO_Init+0x224>)
 8000c44:	f000 fbd2 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <MX_GPIO_Init+0x224>)
 8000c5e:	f000 fbc5 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c62:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_GPIO_Init+0x21c>)
 8000c80:	f000 fbb4 	bl	80013ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c84:	bf00      	nop
 8000c86:	3730      	adds	r7, #48	@ 0x30
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40021800 	.word	0x40021800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020c00 	.word	0x40020c00

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a08      	ldr	r2, [pc, #32]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0ae      	sub	sp, #184	@ 0xb8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2290      	movs	r2, #144	@ 0x90
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 fe5a 	bl	80049d2 <memset>
  if(hi2c->Instance==I2C1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a22      	ldr	r2, [pc, #136]	@ (8000dac <HAL_I2C_MspInit+0xb4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d13c      	bne.n	8000da2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fffa 	bl	8002d30 <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d42:	f7ff ffaf 	bl	8000ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <HAL_I2C_MspInit+0xb8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a19      	ldr	r2, [pc, #100]	@ (8000db0 <HAL_I2C_MspInit+0xb8>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <HAL_I2C_MspInit+0xb8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d5e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d66:	2312      	movs	r3, #18
 8000d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d82:	4619      	mov	r1, r3
 8000d84:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <HAL_I2C_MspInit+0xbc>)
 8000d86:	f000 fb31 	bl	80013ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_I2C_MspInit+0xb8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <HAL_I2C_MspInit+0xb8>)
 8000d90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_I2C_MspInit+0xb8>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	37b8      	adds	r7, #184	@ 0xb8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40005400 	.word	0x40005400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0ae      	sub	sp, #184	@ 0xb8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2290      	movs	r2, #144	@ 0x90
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 fdfa 	bl	80049d2 <memset>
  if(huart->Instance==UART4)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a32      	ldr	r2, [pc, #200]	@ (8000eac <HAL_UART_MspInit+0xf4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d15d      	bne.n	8000ea4 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 ff9a 	bl	8002d30 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e02:	f7ff ff4f 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e06:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <HAL_UART_MspInit+0xf8>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	4a29      	ldr	r2, [pc, #164]	@ (8000eb0 <HAL_UART_MspInit+0xf8>)
 8000e0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e12:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <HAL_UART_MspInit+0xf8>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <HAL_UART_MspInit+0xf8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a23      	ldr	r2, [pc, #140]	@ (8000eb0 <HAL_UART_MspInit+0xf8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <HAL_UART_MspInit+0xf8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <HAL_UART_MspInit+0xf8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb0 <HAL_UART_MspInit+0xf8>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_UART_MspInit+0xf8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e66:	2308      	movs	r3, #8
 8000e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4810      	ldr	r0, [pc, #64]	@ (8000eb4 <HAL_UART_MspInit+0xfc>)
 8000e74:	f000 faba 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e92:	2308      	movs	r3, #8
 8000e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <HAL_UART_MspInit+0x100>)
 8000ea0:	f000 faa4 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	37b8      	adds	r7, #184	@ 0xb8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40004c00 	.word	0x40004c00
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020800 	.word	0x40020800

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 f941 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_kill>:

int _kill(int pid, int sig)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f34:	f003 fda0 	bl	8004a78 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2216      	movs	r2, #22
 8000f3c:	601a      	str	r2, [r3, #0]
  return -1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_exit>:

void _exit (int status)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f52:	f04f 31ff 	mov.w	r1, #4294967295
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffe7 	bl	8000f2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <_exit+0x12>

08000f60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00a      	b.n	8000f88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f72:	f3af 8000 	nop.w
 8000f76:	4601      	mov	r1, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf0      	blt.n	8000f72 <_read+0x12>
  }

  return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e009      	b.n	8000fc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	60ba      	str	r2, [r7, #8]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf1      	blt.n	8000fac <_write+0x12>
  }
  return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_close>:

int _close(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ffa:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_isatty>:

int _isatty(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f003 fd04 	bl	8004a78 <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20080000 	.word	0x20080000
 800109c:	00000400 	.word	0x00000400
 80010a0:	200003d0 	.word	0x200003d0
 80010a4:	20000528 	.word	0x20000528

080010a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001104 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480d      	ldr	r0, [pc, #52]	@ (8001108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d2:	490e      	ldr	r1, [pc, #56]	@ (800110c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e8:	4c0b      	ldr	r4, [pc, #44]	@ (8001118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f6:	f7ff ffd7 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f003 fcc3 	bl	8004a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fb91 	bl	8000824 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001110:	08006af8 	.word	0x08006af8
  ldr r2, =_sbss
 8001114:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001118:	20000524 	.word	0x20000524

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>

0800111e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f92e 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f805 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112e:	f7ff fdbf 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f93b 	bl	80013d2 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f911 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000003c 	.word	0x2000003c
 8001190:	20000044 	.word	0x20000044
 8001194:	20000040 	.word	0x20000040

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000044 	.word	0x20000044
 80011bc:	200003d4 	.word	0x200003d4

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200003d4 	.word	0x200003d4

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000044 	.word	0x20000044

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	4313      	orrs	r3, r2
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	05fa0000 	.word	0x05fa0000

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	@ (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff47 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff5c 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffb0 	bl	8001340 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e175      	b.n	80016f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8164 	bne.w	80016f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d005      	beq.n	8001442 <HAL_GPIO_Init+0x56>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d130      	bne.n	80014a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d017      	beq.n	80014e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d123      	bne.n	8001534 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	69b9      	ldr	r1, [r7, #24]
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80be 	beq.w	80016f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b66      	ldr	r3, [pc, #408]	@ (8001710 <HAL_GPIO_Init+0x324>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	4a65      	ldr	r2, [pc, #404]	@ (8001710 <HAL_GPIO_Init+0x324>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001580:	6453      	str	r3, [r2, #68]	@ 0x44
 8001582:	4b63      	ldr	r3, [pc, #396]	@ (8001710 <HAL_GPIO_Init+0x324>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800158e:	4a61      	ldr	r2, [pc, #388]	@ (8001714 <HAL_GPIO_Init+0x328>)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a58      	ldr	r2, [pc, #352]	@ (8001718 <HAL_GPIO_Init+0x32c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d037      	beq.n	800162a <HAL_GPIO_Init+0x23e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a57      	ldr	r2, [pc, #348]	@ (800171c <HAL_GPIO_Init+0x330>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d031      	beq.n	8001626 <HAL_GPIO_Init+0x23a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a56      	ldr	r2, [pc, #344]	@ (8001720 <HAL_GPIO_Init+0x334>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d02b      	beq.n	8001622 <HAL_GPIO_Init+0x236>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a55      	ldr	r2, [pc, #340]	@ (8001724 <HAL_GPIO_Init+0x338>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d025      	beq.n	800161e <HAL_GPIO_Init+0x232>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a54      	ldr	r2, [pc, #336]	@ (8001728 <HAL_GPIO_Init+0x33c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01f      	beq.n	800161a <HAL_GPIO_Init+0x22e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a53      	ldr	r2, [pc, #332]	@ (800172c <HAL_GPIO_Init+0x340>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x22a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a52      	ldr	r2, [pc, #328]	@ (8001730 <HAL_GPIO_Init+0x344>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x226>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a51      	ldr	r2, [pc, #324]	@ (8001734 <HAL_GPIO_Init+0x348>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x222>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a50      	ldr	r2, [pc, #320]	@ (8001738 <HAL_GPIO_Init+0x34c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x21e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4f      	ldr	r2, [pc, #316]	@ (800173c <HAL_GPIO_Init+0x350>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x21a>
 8001602:	2309      	movs	r3, #9
 8001604:	e012      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001606:	230a      	movs	r3, #10
 8001608:	e010      	b.n	800162c <HAL_GPIO_Init+0x240>
 800160a:	2308      	movs	r3, #8
 800160c:	e00e      	b.n	800162c <HAL_GPIO_Init+0x240>
 800160e:	2307      	movs	r3, #7
 8001610:	e00c      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001612:	2306      	movs	r3, #6
 8001614:	e00a      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001616:	2305      	movs	r3, #5
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x240>
 800161a:	2304      	movs	r3, #4
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x240>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x240>
 800162a:	2300      	movs	r3, #0
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800163c:	4935      	ldr	r1, [pc, #212]	@ (8001714 <HAL_GPIO_Init+0x328>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164a:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <HAL_GPIO_Init+0x354>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166e:	4a34      	ldr	r2, [pc, #208]	@ (8001740 <HAL_GPIO_Init+0x354>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001674:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <HAL_GPIO_Init+0x354>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001698:	4a29      	ldr	r2, [pc, #164]	@ (8001740 <HAL_GPIO_Init+0x354>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169e:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <HAL_GPIO_Init+0x354>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001740 <HAL_GPIO_Init+0x354>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_GPIO_Init+0x354>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <HAL_GPIO_Init+0x354>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f67f ae86 	bls.w	800140c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3724      	adds	r7, #36	@ 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40021400 	.word	0x40021400
 8001730:	40021800 	.word	0x40021800
 8001734:	40021c00 	.word	0x40021c00
 8001738:	40022000 	.word	0x40022000
 800173c:	40022400 	.word	0x40022400
 8001740:	40013c00 	.word	0x40013c00

08001744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	4613      	mov	r3, r2
 8001752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001754:	787b      	ldrb	r3, [r7, #1]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001760:	e003      	b.n	800176a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	041a      	lsls	r2, r3, #16
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	619a      	str	r2, [r3, #24]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001788:	887a      	ldrh	r2, [r7, #2]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4013      	ands	r3, r2
 800178e:	041a      	lsls	r2, r3, #16
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43d9      	mvns	r1, r3
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	400b      	ands	r3, r1
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fa90 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	@ 0x24
 80017dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800180c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e006      	b.n	8001834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d104      	bne.n	8001846 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001844:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <HAL_I2C_Init+0x11c>)
 8001852:	430b      	orrs	r3, r1
 8001854:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001864:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69d9      	ldr	r1, [r3, #28]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	02008000 	.word	0x02008000

080018cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	817b      	strh	r3, [r7, #10]
 80018de:	460b      	mov	r3, r1
 80018e0:	813b      	strh	r3, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	f040 80f9 	bne.w	8001ae6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_I2C_Mem_Write+0x34>
 80018fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001906:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0ed      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_I2C_Mem_Write+0x4e>
 8001916:	2302      	movs	r3, #2
 8001918:	e0e6      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001922:	f7ff fc4d 	bl	80011c0 <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2319      	movs	r3, #25
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 fac3 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0d1      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2221      	movs	r2, #33	@ 0x21
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2240      	movs	r2, #64	@ 0x40
 8001950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800196c:	88f8      	ldrh	r0, [r7, #6]
 800196e:	893a      	ldrh	r2, [r7, #8]
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4603      	mov	r3, r0
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f9d3 	bl	8001d28 <I2C_RequestMemoryWrite>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0a9      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001998:	b29b      	uxth	r3, r3
 800199a:	2bff      	cmp	r3, #255	@ 0xff
 800199c:	d90e      	bls.n	80019bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	22ff      	movs	r2, #255	@ 0xff
 80019a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	8979      	ldrh	r1, [r7, #10]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fc1f 	bl	80021f8 <I2C_TransferConfig>
 80019ba:	e00f      	b.n	80019dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	8979      	ldrh	r1, [r7, #10]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fc0e 	bl	80021f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 faad 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e07b      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d034      	beq.n	8001a94 <HAL_I2C_Mem_Write+0x1c8>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d130      	bne.n	8001a94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2180      	movs	r1, #128	@ 0x80
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fa3f 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e04d      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2bff      	cmp	r3, #255	@ 0xff
 8001a54:	d90e      	bls.n	8001a74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	22ff      	movs	r2, #255	@ 0xff
 8001a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	8979      	ldrh	r1, [r7, #10]
 8001a64:	2300      	movs	r3, #0
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fbc3 	bl	80021f8 <I2C_TransferConfig>
 8001a72:	e00f      	b.n	8001a94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	8979      	ldrh	r1, [r7, #10]
 8001a86:	2300      	movs	r3, #0
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 fbb2 	bl	80021f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d19e      	bne.n	80019dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fa8c 	bl	8001fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e01a      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_I2C_Mem_Write+0x224>)
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	fe00e800 	.word	0xfe00e800

08001af4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	817b      	strh	r3, [r7, #10]
 8001b06:	460b      	mov	r3, r1
 8001b08:	813b      	strh	r3, [r7, #8]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	f040 80fd 	bne.w	8001d16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_I2C_Mem_Read+0x34>
 8001b22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0f1      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2C_Mem_Read+0x4e>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e0ea      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b4a:	f7ff fb39 	bl	80011c0 <HAL_GetTick>
 8001b4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2319      	movs	r3, #25
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f9af 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0d5      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2222      	movs	r2, #34	@ 0x22
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2240      	movs	r2, #64	@ 0x40
 8001b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b94:	88f8      	ldrh	r0, [r7, #6]
 8001b96:	893a      	ldrh	r2, [r7, #8]
 8001b98:	8979      	ldrh	r1, [r7, #10]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f913 	bl	8001dd0 <I2C_RequestMemoryRead>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0ad      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2bff      	cmp	r3, #255	@ 0xff
 8001bc4:	d90e      	bls.n	8001be4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	22ff      	movs	r2, #255	@ 0xff
 8001bca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	8979      	ldrh	r1, [r7, #10]
 8001bd4:	4b52      	ldr	r3, [pc, #328]	@ (8001d20 <HAL_I2C_Mem_Read+0x22c>)
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 fb0b 	bl	80021f8 <I2C_TransferConfig>
 8001be2:	e00f      	b.n	8001c04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	8979      	ldrh	r1, [r7, #10]
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d20 <HAL_I2C_Mem_Read+0x22c>)
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fafa 	bl	80021f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f956 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07c      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d034      	beq.n	8001cc4 <HAL_I2C_Mem_Read+0x1d0>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d130      	bne.n	8001cc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2180      	movs	r1, #128	@ 0x80
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f927 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e04d      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2bff      	cmp	r3, #255	@ 0xff
 8001c84:	d90e      	bls.n	8001ca4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	22ff      	movs	r2, #255	@ 0xff
 8001c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	8979      	ldrh	r1, [r7, #10]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 faab 	bl	80021f8 <I2C_TransferConfig>
 8001ca2:	e00f      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	8979      	ldrh	r1, [r7, #10]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fa9a 	bl	80021f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d19a      	bne.n	8001c04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f974 	bl	8001fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e01a      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_I2C_Mem_Read+0x230>)
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d16:	2302      	movs	r3, #2
  }
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	80002400 	.word	0x80002400
 8001d24:	fe00e800 	.word	0xfe00e800

08001d28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	813b      	strh	r3, [r7, #8]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	8979      	ldrh	r1, [r7, #10]
 8001d48:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <I2C_RequestMemoryWrite+0xa4>)
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fa51 	bl	80021f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	69b9      	ldr	r1, [r7, #24]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f8f0 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e02c      	b.n	8001dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d70:	893b      	ldrh	r3, [r7, #8]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d7a:	e015      	b.n	8001da8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d7c:	893b      	ldrh	r3, [r7, #8]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	69b9      	ldr	r1, [r7, #24]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f8d6 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e012      	b.n	8001dc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d9e:	893b      	ldrh	r3, [r7, #8]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2200      	movs	r2, #0
 8001db0:	2180      	movs	r1, #128	@ 0x80
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f884 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	80002000 	.word	0x80002000

08001dd0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	817b      	strh	r3, [r7, #10]
 8001de2:	460b      	mov	r3, r1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	8979      	ldrh	r1, [r7, #10]
 8001df0:	4b20      	ldr	r3, [pc, #128]	@ (8001e74 <I2C_RequestMemoryRead+0xa4>)
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2300      	movs	r3, #0
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f9fe 	bl	80021f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f89d 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e02c      	b.n	8001e6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e16:	893b      	ldrh	r3, [r7, #8]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e20:	e015      	b.n	8001e4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e22:	893b      	ldrh	r3, [r7, #8]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f883 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e012      	b.n	8001e6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e44:	893b      	ldrh	r3, [r7, #8]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2200      	movs	r2, #0
 8001e56:	2140      	movs	r1, #64	@ 0x40
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 f831 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	80002000 	.word	0x80002000

08001e78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d103      	bne.n	8001e96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d007      	beq.n	8001eb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	619a      	str	r2, [r3, #24]
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed0:	e022      	b.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d01e      	beq.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7ff f971 	bl	80011c0 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d113      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00f      	b.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4013      	ands	r3, r2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d0cd      	beq.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f4c:	e02c      	b.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f870 	bl	8002038 <I2C_IsErrorOccurred>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e02a      	b.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d01e      	beq.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6a:	f7ff f929 	bl	80011c0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d302      	bcc.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d113      	bne.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e007      	b.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d1cb      	bne.n	8001f4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fcc:	e028      	b.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f830 	bl	8002038 <I2C_IsErrorOccurred>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e026      	b.n	8002030 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7ff f8ed 	bl	80011c0 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d113      	bne.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d1cf      	bne.n	8001fce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	@ 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d068      	beq.n	8002136 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2210      	movs	r2, #16
 800206a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800206c:	e049      	b.n	8002102 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d045      	beq.n	8002102 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002076:	f7ff f8a3 	bl	80011c0 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d302      	bcc.n	800208c <I2C_IsErrorOccurred+0x54>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d13a      	bne.n	8002102 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002096:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800209e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020ae:	d121      	bne.n	80020f4 <I2C_IsErrorOccurred+0xbc>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020b6:	d01d      	beq.n	80020f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d01a      	beq.n	80020f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020ce:	f7ff f877 	bl	80011c0 <HAL_GetTick>
 80020d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d4:	e00e      	b.n	80020f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020d6:	f7ff f873 	bl	80011c0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b19      	cmp	r3, #25
 80020e2:	d907      	bls.n	80020f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	f043 0320 	orr.w	r3, r3, #32
 80020ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80020f2:	e006      	b.n	8002102 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d1e9      	bne.n	80020d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b20      	cmp	r3, #32
 800210e:	d003      	beq.n	8002118 <I2C_IsErrorOccurred+0xe0>
 8002110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0aa      	beq.n	800206e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2220      	movs	r2, #32
 8002126:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002158:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800217a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00b      	beq.n	80021a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800219c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80021a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01c      	beq.n	80021e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff fe63 	bl	8001e78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b0d      	ldr	r3, [pc, #52]	@ (80021f4 <I2C_IsErrorOccurred+0x1bc>)
 80021be:	400b      	ands	r3, r1
 80021c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80021e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3728      	adds	r7, #40	@ 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	fe00e800 	.word	0xfe00e800

080021f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	817b      	strh	r3, [r7, #10]
 8002206:	4613      	mov	r3, r2
 8002208:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800220a:	897b      	ldrh	r3, [r7, #10]
 800220c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002210:	7a7b      	ldrb	r3, [r7, #9]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002218:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	4313      	orrs	r3, r2
 8002222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002226:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	0d5b      	lsrs	r3, r3, #21
 8002232:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <I2C_TransferConfig+0x60>)
 8002238:	430b      	orrs	r3, r1
 800223a:	43db      	mvns	r3, r3
 800223c:	ea02 0103 	and.w	r1, r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	03ff63ff 	.word	0x03ff63ff

0800225c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	d138      	bne.n	80022e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800227c:	2302      	movs	r3, #2
 800227e:	e032      	b.n	80022e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	@ 0x24
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e000      	b.n	80022e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
  }
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b20      	cmp	r3, #32
 8002306:	d139      	bne.n	800237c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002312:	2302      	movs	r3, #2
 8002314:	e033      	b.n	800237e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2224      	movs	r2, #36	@ 0x24
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002344:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e29b      	b.n	80028da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8087 	beq.w	80024be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b0:	4b96      	ldr	r3, [pc, #600]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d00c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023bc:	4b93      	ldr	r3, [pc, #588]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d112      	bne.n	80023ee <HAL_RCC_OscConfig+0x62>
 80023c8:	4b90      	ldr	r3, [pc, #576]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d4:	d10b      	bne.n	80023ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d6:	4b8d      	ldr	r3, [pc, #564]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06c      	beq.n	80024bc <HAL_RCC_OscConfig+0x130>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d168      	bne.n	80024bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e275      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x7a>
 80023f8:	4b84      	ldr	r3, [pc, #528]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a83      	ldr	r2, [pc, #524]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e02e      	b.n	8002464 <HAL_RCC_OscConfig+0xd8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x9c>
 800240e:	4b7f      	ldr	r3, [pc, #508]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7e      	ldr	r2, [pc, #504]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b7c      	ldr	r3, [pc, #496]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7b      	ldr	r2, [pc, #492]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002420:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e01d      	b.n	8002464 <HAL_RCC_OscConfig+0xd8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0xc0>
 8002432:	4b76      	ldr	r3, [pc, #472]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a75      	ldr	r2, [pc, #468]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b73      	ldr	r3, [pc, #460]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a72      	ldr	r2, [pc, #456]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0xd8>
 800244c:	4b6f      	ldr	r3, [pc, #444]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6e      	ldr	r2, [pc, #440]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b6c      	ldr	r3, [pc, #432]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6b      	ldr	r2, [pc, #428]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 800245e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe fea8 	bl	80011c0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe fea4 	bl	80011c0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	@ 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e229      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b61      	ldr	r3, [pc, #388]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0xe8>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fe94 	bl	80011c0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7fe fe90 	bl	80011c0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	@ 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e215      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	4b57      	ldr	r3, [pc, #348]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x110>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d069      	beq.n	800259e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ca:	4b50      	ldr	r3, [pc, #320]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d6:	4b4d      	ldr	r3, [pc, #308]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d11c      	bne.n	800251c <HAL_RCC_OscConfig+0x190>
 80024e2:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d116      	bne.n	800251c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	4b47      	ldr	r3, [pc, #284]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_RCC_OscConfig+0x17a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e1e9      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4b41      	ldr	r3, [pc, #260]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	493d      	ldr	r1, [pc, #244]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	e040      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d023      	beq.n	800256c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002524:	4b39      	ldr	r3, [pc, #228]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a38      	ldr	r2, [pc, #224]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fe46 	bl	80011c0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fe42 	bl	80011c0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1c7      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	4b30      	ldr	r3, [pc, #192]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	4b2d      	ldr	r3, [pc, #180]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4929      	ldr	r1, [pc, #164]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
 800256a:	e018      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256c:	4b27      	ldr	r3, [pc, #156]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a26      	ldr	r2, [pc, #152]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fe22 	bl	80011c0 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002580:	f7fe fe1e 	bl	80011c0 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1a3      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b1e      	ldr	r3, [pc, #120]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d038      	beq.n	800261c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d019      	beq.n	80025e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b16      	ldr	r3, [pc, #88]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80025b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b6:	4a15      	ldr	r2, [pc, #84]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fe fdff 	bl	80011c0 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c6:	f7fe fdfb 	bl	80011c0 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e180      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80025da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x23a>
 80025e4:	e01a      	b.n	800261c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80025e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ea:	4a08      	ldr	r2, [pc, #32]	@ (800260c <HAL_RCC_OscConfig+0x280>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fde5 	bl	80011c0 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fa:	f7fe fde1 	bl	80011c0 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d903      	bls.n	8002610 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e166      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
 800260c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	4b92      	ldr	r3, [pc, #584]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ee      	bne.n	80025fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80a4 	beq.w	8002772 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262a:	4b8c      	ldr	r3, [pc, #560]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	4b89      	ldr	r3, [pc, #548]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	4a88      	ldr	r2, [pc, #544]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	@ 0x40
 8002642:	4b86      	ldr	r3, [pc, #536]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002652:	4b83      	ldr	r3, [pc, #524]	@ (8002860 <HAL_RCC_OscConfig+0x4d4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800265e:	4b80      	ldr	r3, [pc, #512]	@ (8002860 <HAL_RCC_OscConfig+0x4d4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7f      	ldr	r2, [pc, #508]	@ (8002860 <HAL_RCC_OscConfig+0x4d4>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe fda9 	bl	80011c0 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe fda5 	bl	80011c0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b64      	cmp	r3, #100	@ 0x64
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e12a      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	4b76      	ldr	r3, [pc, #472]	@ (8002860 <HAL_RCC_OscConfig+0x4d4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x31a>
 8002698:	4b70      	ldr	r3, [pc, #448]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4a6f      	ldr	r2, [pc, #444]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a4:	e02d      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x33c>
 80026ae:	4b6b      	ldr	r3, [pc, #428]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	4a6a      	ldr	r2, [pc, #424]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ba:	4b68      	ldr	r3, [pc, #416]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	4a67      	ldr	r2, [pc, #412]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c6:	e01c      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x35e>
 80026d0:	4b62      	ldr	r3, [pc, #392]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d4:	4a61      	ldr	r2, [pc, #388]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	@ 0x70
 80026dc:	4b5f      	ldr	r3, [pc, #380]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e0:	4a5e      	ldr	r2, [pc, #376]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
 80026ea:	4b5c      	ldr	r3, [pc, #368]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ee:	4a5b      	ldr	r2, [pc, #364]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f6:	4b59      	ldr	r3, [pc, #356]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	4a58      	ldr	r2, [pc, #352]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d015      	beq.n	8002736 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7fe fd59 	bl	80011c0 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fd55 	bl	80011c0 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0d8      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	4b4c      	ldr	r3, [pc, #304]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ee      	beq.n	8002712 <HAL_RCC_OscConfig+0x386>
 8002734:	e014      	b.n	8002760 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe fd43 	bl	80011c0 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fd3f 	bl	80011c0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0c2      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	4b41      	ldr	r3, [pc, #260]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ee      	bne.n	800273e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4b3d      	ldr	r3, [pc, #244]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	4a3c      	ldr	r2, [pc, #240]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80ae 	beq.w	80028d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277c:	4b37      	ldr	r3, [pc, #220]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	d06d      	beq.n	8002864 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d14b      	bne.n	8002828 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002790:	4b32      	ldr	r3, [pc, #200]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a31      	ldr	r2, [pc, #196]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fd10 	bl	80011c0 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe fd0c 	bl	80011c0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e091      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	4b29      	ldr	r3, [pc, #164]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	3b01      	subs	r3, #1
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ec:	071b      	lsls	r3, r3, #28
 80027ee:	491b      	ldr	r1, [pc, #108]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a18      	ldr	r2, [pc, #96]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fcde 	bl	80011c0 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fcda 	bl	80011c0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e05f      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b10      	ldr	r3, [pc, #64]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x47c>
 8002826:	e057      	b.n	80028d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0b      	ldr	r2, [pc, #44]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 800282e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fcc4 	bl	80011c0 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fcc0 	bl	80011c0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e045      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x4b0>
 800285a:	e03d      	b.n	80028d8 <HAL_RCC_OscConfig+0x54c>
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <HAL_RCC_OscConfig+0x558>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d030      	beq.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d129      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d122      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800289a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800289c:	4293      	cmp	r3, r2
 800289e:	d119      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d10f      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0d0      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b6a      	ldr	r3, [pc, #424]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b67      	ldr	r3, [pc, #412]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 020f 	bic.w	r2, r3, #15
 8002916:	4965      	ldr	r1, [pc, #404]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b63      	ldr	r3, [pc, #396]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0b8      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d020      	beq.n	800297e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002948:	4b59      	ldr	r3, [pc, #356]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a58      	ldr	r2, [pc, #352]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800294e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002952:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002960:	4b53      	ldr	r3, [pc, #332]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a52      	ldr	r2, [pc, #328]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002966:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800296a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b50      	ldr	r3, [pc, #320]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	494d      	ldr	r1, [pc, #308]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d040      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d115      	bne.n	80029ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07f      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	4b41      	ldr	r3, [pc, #260]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e073      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06b      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b39      	ldr	r3, [pc, #228]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4936      	ldr	r1, [pc, #216]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe fbf0 	bl	80011c0 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe fbec 	bl	80011c0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e053      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d210      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b24      	ldr	r3, [pc, #144]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 020f 	bic.w	r2, r3, #15
 8002a22:	4922      	ldr	r1, [pc, #136]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e032      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a48:	4b19      	ldr	r3, [pc, #100]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4916      	ldr	r1, [pc, #88]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a66:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	490e      	ldr	r1, [pc, #56]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a7a:	f000 f821 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	490a      	ldr	r1, [pc, #40]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8002a8c:	5ccb      	ldrb	r3, [r1, r3]
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a96:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_RCC_ClockConfig+0x1d4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fb4c 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023c00 	.word	0x40023c00
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	0800675c 	.word	0x0800675c
 8002ab8:	2000003c 	.word	0x2000003c
 8002abc:	20000040 	.word	0x20000040

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac4:	b094      	sub	sp, #80	@ 0x50
 8002ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002acc:	2300      	movs	r3, #0
 8002ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad8:	4b79      	ldr	r3, [pc, #484]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d00d      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	f200 80e1 	bhi.w	8002cac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x34>
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0x3a>
 8002af2:	e0db      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b73      	ldr	r3, [pc, #460]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002af6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002af8:	e0db      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afa:	4b72      	ldr	r3, [pc, #456]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002afc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002afe:	e0d8      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b00:	4b6f      	ldr	r3, [pc, #444]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b08:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b0a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d063      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b16:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	099b      	lsrs	r3, r3, #6
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b32:	4622      	mov	r2, r4
 8002b34:	462b      	mov	r3, r5
 8002b36:	f04f 0000 	mov.w	r0, #0
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	0159      	lsls	r1, r3, #5
 8002b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b44:	0150      	lsls	r0, r2, #5
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	1a51      	subs	r1, r2, r1
 8002b4e:	6139      	str	r1, [r7, #16]
 8002b50:	4629      	mov	r1, r5
 8002b52:	eb63 0301 	sbc.w	r3, r3, r1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b64:	4659      	mov	r1, fp
 8002b66:	018b      	lsls	r3, r1, #6
 8002b68:	4651      	mov	r1, sl
 8002b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b6e:	4651      	mov	r1, sl
 8002b70:	018a      	lsls	r2, r1, #6
 8002b72:	4651      	mov	r1, sl
 8002b74:	ebb2 0801 	subs.w	r8, r2, r1
 8002b78:	4659      	mov	r1, fp
 8002b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b92:	4690      	mov	r8, r2
 8002b94:	4699      	mov	r9, r3
 8002b96:	4623      	mov	r3, r4
 8002b98:	eb18 0303 	adds.w	r3, r8, r3
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	eb49 0303 	adc.w	r3, r9, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	028b      	lsls	r3, r1, #10
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	028a      	lsls	r2, r1, #10
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bd0:	f7fd fb8e 	bl	80002f0 <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bdc:	e058      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bde:	4b38      	ldr	r3, [pc, #224]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	2200      	movs	r2, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	4611      	mov	r1, r2
 8002bea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	f04f 0000 	mov.w	r0, #0
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	0159      	lsls	r1, r3, #5
 8002c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0a:	0150      	lsls	r0, r2, #5
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4641      	mov	r1, r8
 8002c12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c16:	4649      	mov	r1, r9
 8002c18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c30:	ebb2 040a 	subs.w	r4, r2, sl
 8002c34:	eb63 050b 	sbc.w	r5, r3, fp
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	00eb      	lsls	r3, r5, #3
 8002c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c46:	00e2      	lsls	r2, r4, #3
 8002c48:	4614      	mov	r4, r2
 8002c4a:	461d      	mov	r5, r3
 8002c4c:	4643      	mov	r3, r8
 8002c4e:	18e3      	adds	r3, r4, r3
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	464b      	mov	r3, r9
 8002c54:	eb45 0303 	adc.w	r3, r5, r3
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c66:	4629      	mov	r1, r5
 8002c68:	028b      	lsls	r3, r1, #10
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c70:	4621      	mov	r1, r4
 8002c72:	028a      	lsls	r2, r1, #10
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	61fa      	str	r2, [r7, #28]
 8002c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c84:	f7fd fb34 	bl	80002f0 <__aeabi_uldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ca0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3750      	adds	r7, #80	@ 0x50
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	00f42400 	.word	0x00f42400

08002cc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	@ (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000003c 	.word	0x2000003c

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	@ (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	0800676c 	.word	0x0800676c

08002d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d0c:	f7ff ffdc 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0b5b      	lsrs	r3, r3, #13
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	@ (8002d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	0800676c 	.word	0x0800676c

08002d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d58:	4b69      	ldr	r3, [pc, #420]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a68      	ldr	r2, [pc, #416]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d62:	6093      	str	r3, [r2, #8]
 8002d64:	4b66      	ldr	r3, [pc, #408]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6c:	4964      	ldr	r1, [pc, #400]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d017      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d90:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	4959      	ldr	r1, [pc, #356]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002da8:	d101      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d017      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	494a      	ldr	r1, [pc, #296]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de4:	d101      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 808b 	beq.w	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	4b3a      	ldr	r3, [pc, #232]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	4a39      	ldr	r2, [pc, #228]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e20:	4b37      	ldr	r3, [pc, #220]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e2c:	4b35      	ldr	r3, [pc, #212]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a34      	ldr	r2, [pc, #208]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e38:	f7fe f9c2 	bl	80011c0 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7fe f9be 	bl	80011c0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	@ 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e38f      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e52:	4b2c      	ldr	r3, [pc, #176]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e5e:	4b28      	ldr	r3, [pc, #160]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d035      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d02e      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e7c:	4b20      	ldr	r3, [pc, #128]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e86:	4b1e      	ldr	r3, [pc, #120]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e90:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e92:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	4a1a      	ldr	r2, [pc, #104]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e9c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e9e:	4a18      	ldr	r2, [pc, #96]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ea4:	4b16      	ldr	r3, [pc, #88]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d114      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe f986 	bl	80011c0 <HAL_GetTick>
 8002eb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe f982 	bl	80011c0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e351      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ee      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ee6:	d111      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ee8:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ef6:	400b      	ands	r3, r1
 8002ef8:	4901      	ldr	r1, [pc, #4]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40007000 	.word	0x40007000
 8002f08:	0ffffcff 	.word	0x0ffffcff
 8002f0c:	4bac      	ldr	r3, [pc, #688]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4aab      	ldr	r2, [pc, #684]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002f16:	6093      	str	r3, [r2, #8]
 8002f18:	4ba9      	ldr	r3, [pc, #676]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	49a6      	ldr	r1, [pc, #664]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f36:	4ba2      	ldr	r3, [pc, #648]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f3c:	4aa0      	ldr	r2, [pc, #640]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f46:	4b9e      	ldr	r3, [pc, #632]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f48:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f50:	499b      	ldr	r1, [pc, #620]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f64:	4b96      	ldr	r3, [pc, #600]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f72:	4993      	ldr	r1, [pc, #588]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f86:	4b8e      	ldr	r3, [pc, #568]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f94:	498a      	ldr	r1, [pc, #552]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fa8:	4b85      	ldr	r3, [pc, #532]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fb6:	4982      	ldr	r1, [pc, #520]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fca:	4b7d      	ldr	r3, [pc, #500]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd8:	4979      	ldr	r1, [pc, #484]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fec:	4b74      	ldr	r3, [pc, #464]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	4971      	ldr	r1, [pc, #452]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800300e:	4b6c      	ldr	r3, [pc, #432]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003014:	f023 020c 	bic.w	r2, r3, #12
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301c:	4968      	ldr	r1, [pc, #416]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003030:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003036:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303e:	4960      	ldr	r1, [pc, #384]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003052:	4b5b      	ldr	r3, [pc, #364]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003058:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003060:	4957      	ldr	r1, [pc, #348]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003074:	4b52      	ldr	r3, [pc, #328]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	494f      	ldr	r1, [pc, #316]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003096:	4b4a      	ldr	r3, [pc, #296]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a4:	4946      	ldr	r1, [pc, #280]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030b8:	4b41      	ldr	r3, [pc, #260]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c6:	493e      	ldr	r1, [pc, #248]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030da:	4b39      	ldr	r3, [pc, #228]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e8:	4935      	ldr	r1, [pc, #212]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030fc:	4b30      	ldr	r3, [pc, #192]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003102:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800310a:	492d      	ldr	r1, [pc, #180]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d011      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800311e:	4b28      	ldr	r3, [pc, #160]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003124:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800312c:	4924      	ldr	r1, [pc, #144]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800313c:	d101      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800315e:	4b18      	ldr	r3, [pc, #96]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003164:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800316c:	4914      	ldr	r1, [pc, #80]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003180:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003186:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003190:	490b      	ldr	r1, [pc, #44]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00f      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031b4:	4902      	ldr	r1, [pc, #8]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031bc:	e002      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031d0:	4b8a      	ldr	r3, [pc, #552]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e0:	4986      	ldr	r1, [pc, #536]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031f4:	4b81      	ldr	r3, [pc, #516]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031fa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003204:	497d      	ldr	r1, [pc, #500]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d006      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80d6 	beq.w	80033cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003220:	4b76      	ldr	r3, [pc, #472]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a75      	ldr	r2, [pc, #468]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003226:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800322a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fd ffc8 	bl	80011c0 <HAL_GetTick>
 8003230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003234:	f7fd ffc4 	bl	80011c0 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	@ 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e195      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003246:	4b6d      	ldr	r3, [pc, #436]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d021      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11d      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003266:	4b65      	ldr	r3, [pc, #404]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003274:	4b61      	ldr	r3, [pc, #388]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800327a:	0e1b      	lsrs	r3, r3, #24
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	019a      	lsls	r2, r3, #6
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	071b      	lsls	r3, r3, #28
 800329a:	4958      	ldr	r1, [pc, #352]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d02e      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032cc:	d129      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032ce:	4b4b      	ldr	r3, [pc, #300]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032dc:	4b47      	ldr	r3, [pc, #284]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032e2:	0f1b      	lsrs	r3, r3, #28
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	019a      	lsls	r2, r3, #6
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	061b      	lsls	r3, r3, #24
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	071b      	lsls	r3, r3, #28
 8003302:	493e      	ldr	r1, [pc, #248]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800330a:	4b3c      	ldr	r3, [pc, #240]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003310:	f023 021f 	bic.w	r2, r3, #31
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	3b01      	subs	r3, #1
 800331a:	4938      	ldr	r1, [pc, #224]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01d      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800332e:	4b33      	ldr	r3, [pc, #204]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003334:	0e1b      	lsrs	r3, r3, #24
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800333c:	4b2f      	ldr	r3, [pc, #188]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003342:	0f1b      	lsrs	r3, r3, #28
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	019a      	lsls	r2, r3, #6
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	4926      	ldr	r1, [pc, #152]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d011      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	019a      	lsls	r2, r3, #6
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	071b      	lsls	r3, r3, #28
 8003392:	491a      	ldr	r1, [pc, #104]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800339a:	4b18      	ldr	r3, [pc, #96]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a6:	f7fd ff0b 	bl	80011c0 <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033ae:	f7fd ff07 	bl	80011c0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b64      	cmp	r3, #100	@ 0x64
 80033ba:	d901      	bls.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0d8      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033c0:	4b0e      	ldr	r3, [pc, #56]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 80ce 	bne.w	8003570 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033d4:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a08      	ldr	r2, [pc, #32]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e0:	f7fd feee 	bl	80011c0 <HAL_GetTick>
 80033e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033e6:	e00b      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033e8:	f7fd feea 	bl	80011c0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d904      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0bb      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003400:	4b5e      	ldr	r3, [pc, #376]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800340c:	d0ec      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02e      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d12a      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003436:	4b51      	ldr	r3, [pc, #324]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003444:	4b4d      	ldr	r3, [pc, #308]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344a:	0f1b      	lsrs	r3, r3, #28
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	019a      	lsls	r2, r3, #6
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	071b      	lsls	r3, r3, #28
 800346a:	4944      	ldr	r1, [pc, #272]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003472:	4b42      	ldr	r3, [pc, #264]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003478:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003480:	3b01      	subs	r3, #1
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	493d      	ldr	r1, [pc, #244]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d022      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800349c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034a0:	d11d      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034a2:	4b36      	ldr	r3, [pc, #216]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a8:	0e1b      	lsrs	r3, r3, #24
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034b0:	4b32      	ldr	r3, [pc, #200]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b6:	0f1b      	lsrs	r3, r3, #28
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	019a      	lsls	r2, r3, #6
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	431a      	orrs	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	061b      	lsls	r3, r3, #24
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	071b      	lsls	r3, r3, #28
 80034d6:	4929      	ldr	r1, [pc, #164]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d028      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ea:	4b24      	ldr	r3, [pc, #144]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f0:	0e1b      	lsrs	r3, r3, #24
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034f8:	4b20      	ldr	r3, [pc, #128]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	019a      	lsls	r2, r3, #6
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	431a      	orrs	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	071b      	lsls	r3, r3, #28
 800351e:	4917      	ldr	r1, [pc, #92]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003526:	4b15      	ldr	r3, [pc, #84]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800352c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	4911      	ldr	r1, [pc, #68]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800353c:	4b0f      	ldr	r3, [pc, #60]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0e      	ldr	r2, [pc, #56]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003548:	f7fd fe3a 	bl	80011c0 <HAL_GetTick>
 800354c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003550:	f7fd fe36 	bl	80011c0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	@ 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e007      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003562:	4b06      	ldr	r3, [pc, #24]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800356a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800356e:	d1ef      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800

08003580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e040      	b.n	8003614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fc08 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	@ 0x24
 80035ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8b0 	bl	8003724 <UART_SetConfig>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e022      	b.n	8003614 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fb08 	bl	8003bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb8f 	bl	8003d30 <UART_CheckIdleState>
 8003612:	4603      	mov	r3, r0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	@ 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003630:	2b20      	cmp	r3, #32
 8003632:	d171      	bne.n	8003718 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_UART_Transmit+0x24>
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e06a      	b.n	800371a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2221      	movs	r2, #33	@ 0x21
 8003650:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003652:	f7fd fdb5 	bl	80011c0 <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003670:	d108      	bne.n	8003684 <HAL_UART_Transmit+0x68>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	e003      	b.n	800368c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800368c:	e02c      	b.n	80036e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	2180      	movs	r1, #128	@ 0x80
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fb96 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e038      	b.n	800371a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	3302      	adds	r3, #2
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	e007      	b.n	80036d6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	3301      	adds	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1cc      	bne.n	800368e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2200      	movs	r2, #0
 80036fc:	2140      	movs	r1, #64	@ 0x40
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fb63 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e005      	b.n	800371a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4ba6      	ldr	r3, [pc, #664]	@ (80039e8 <UART_SetConfig+0x2c4>)
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	6979      	ldr	r1, [r7, #20]
 8003758:	430b      	orrs	r3, r1
 800375a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	430a      	orrs	r2, r1
 8003794:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a94      	ldr	r2, [pc, #592]	@ (80039ec <UART_SetConfig+0x2c8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d120      	bne.n	80037e2 <UART_SetConfig+0xbe>
 80037a0:	4b93      	ldr	r3, [pc, #588]	@ (80039f0 <UART_SetConfig+0x2cc>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d816      	bhi.n	80037dc <UART_SetConfig+0xb8>
 80037ae:	a201      	add	r2, pc, #4	@ (adr r2, 80037b4 <UART_SetConfig+0x90>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d1 	.word	0x080037d1
 80037bc:	080037cb 	.word	0x080037cb
 80037c0:	080037d7 	.word	0x080037d7
 80037c4:	2301      	movs	r3, #1
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e150      	b.n	8003a6c <UART_SetConfig+0x348>
 80037ca:	2302      	movs	r3, #2
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e14d      	b.n	8003a6c <UART_SetConfig+0x348>
 80037d0:	2304      	movs	r3, #4
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e14a      	b.n	8003a6c <UART_SetConfig+0x348>
 80037d6:	2308      	movs	r3, #8
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e147      	b.n	8003a6c <UART_SetConfig+0x348>
 80037dc:	2310      	movs	r3, #16
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e144      	b.n	8003a6c <UART_SetConfig+0x348>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a83      	ldr	r2, [pc, #524]	@ (80039f4 <UART_SetConfig+0x2d0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d132      	bne.n	8003852 <UART_SetConfig+0x12e>
 80037ec:	4b80      	ldr	r3, [pc, #512]	@ (80039f0 <UART_SetConfig+0x2cc>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d828      	bhi.n	800384c <UART_SetConfig+0x128>
 80037fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003800 <UART_SetConfig+0xdc>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003835 	.word	0x08003835
 8003804:	0800384d 	.word	0x0800384d
 8003808:	0800384d 	.word	0x0800384d
 800380c:	0800384d 	.word	0x0800384d
 8003810:	08003841 	.word	0x08003841
 8003814:	0800384d 	.word	0x0800384d
 8003818:	0800384d 	.word	0x0800384d
 800381c:	0800384d 	.word	0x0800384d
 8003820:	0800383b 	.word	0x0800383b
 8003824:	0800384d 	.word	0x0800384d
 8003828:	0800384d 	.word	0x0800384d
 800382c:	0800384d 	.word	0x0800384d
 8003830:	08003847 	.word	0x08003847
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e118      	b.n	8003a6c <UART_SetConfig+0x348>
 800383a:	2302      	movs	r3, #2
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e115      	b.n	8003a6c <UART_SetConfig+0x348>
 8003840:	2304      	movs	r3, #4
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e112      	b.n	8003a6c <UART_SetConfig+0x348>
 8003846:	2308      	movs	r3, #8
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e10f      	b.n	8003a6c <UART_SetConfig+0x348>
 800384c:	2310      	movs	r3, #16
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e10c      	b.n	8003a6c <UART_SetConfig+0x348>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a68      	ldr	r2, [pc, #416]	@ (80039f8 <UART_SetConfig+0x2d4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d120      	bne.n	800389e <UART_SetConfig+0x17a>
 800385c:	4b64      	ldr	r3, [pc, #400]	@ (80039f0 <UART_SetConfig+0x2cc>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003866:	2b30      	cmp	r3, #48	@ 0x30
 8003868:	d013      	beq.n	8003892 <UART_SetConfig+0x16e>
 800386a:	2b30      	cmp	r3, #48	@ 0x30
 800386c:	d814      	bhi.n	8003898 <UART_SetConfig+0x174>
 800386e:	2b20      	cmp	r3, #32
 8003870:	d009      	beq.n	8003886 <UART_SetConfig+0x162>
 8003872:	2b20      	cmp	r3, #32
 8003874:	d810      	bhi.n	8003898 <UART_SetConfig+0x174>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <UART_SetConfig+0x15c>
 800387a:	2b10      	cmp	r3, #16
 800387c:	d006      	beq.n	800388c <UART_SetConfig+0x168>
 800387e:	e00b      	b.n	8003898 <UART_SetConfig+0x174>
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e0f2      	b.n	8003a6c <UART_SetConfig+0x348>
 8003886:	2302      	movs	r3, #2
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e0ef      	b.n	8003a6c <UART_SetConfig+0x348>
 800388c:	2304      	movs	r3, #4
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e0ec      	b.n	8003a6c <UART_SetConfig+0x348>
 8003892:	2308      	movs	r3, #8
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e0e9      	b.n	8003a6c <UART_SetConfig+0x348>
 8003898:	2310      	movs	r3, #16
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e0e6      	b.n	8003a6c <UART_SetConfig+0x348>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a56      	ldr	r2, [pc, #344]	@ (80039fc <UART_SetConfig+0x2d8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d120      	bne.n	80038ea <UART_SetConfig+0x1c6>
 80038a8:	4b51      	ldr	r3, [pc, #324]	@ (80039f0 <UART_SetConfig+0x2cc>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80038b4:	d013      	beq.n	80038de <UART_SetConfig+0x1ba>
 80038b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038b8:	d814      	bhi.n	80038e4 <UART_SetConfig+0x1c0>
 80038ba:	2b80      	cmp	r3, #128	@ 0x80
 80038bc:	d009      	beq.n	80038d2 <UART_SetConfig+0x1ae>
 80038be:	2b80      	cmp	r3, #128	@ 0x80
 80038c0:	d810      	bhi.n	80038e4 <UART_SetConfig+0x1c0>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <UART_SetConfig+0x1a8>
 80038c6:	2b40      	cmp	r3, #64	@ 0x40
 80038c8:	d006      	beq.n	80038d8 <UART_SetConfig+0x1b4>
 80038ca:	e00b      	b.n	80038e4 <UART_SetConfig+0x1c0>
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e0cc      	b.n	8003a6c <UART_SetConfig+0x348>
 80038d2:	2302      	movs	r3, #2
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e0c9      	b.n	8003a6c <UART_SetConfig+0x348>
 80038d8:	2304      	movs	r3, #4
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e0c6      	b.n	8003a6c <UART_SetConfig+0x348>
 80038de:	2308      	movs	r3, #8
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e0c3      	b.n	8003a6c <UART_SetConfig+0x348>
 80038e4:	2310      	movs	r3, #16
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e0c0      	b.n	8003a6c <UART_SetConfig+0x348>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a44      	ldr	r2, [pc, #272]	@ (8003a00 <UART_SetConfig+0x2dc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d125      	bne.n	8003940 <UART_SetConfig+0x21c>
 80038f4:	4b3e      	ldr	r3, [pc, #248]	@ (80039f0 <UART_SetConfig+0x2cc>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003902:	d017      	beq.n	8003934 <UART_SetConfig+0x210>
 8003904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003908:	d817      	bhi.n	800393a <UART_SetConfig+0x216>
 800390a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390e:	d00b      	beq.n	8003928 <UART_SetConfig+0x204>
 8003910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003914:	d811      	bhi.n	800393a <UART_SetConfig+0x216>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <UART_SetConfig+0x1fe>
 800391a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800391e:	d006      	beq.n	800392e <UART_SetConfig+0x20a>
 8003920:	e00b      	b.n	800393a <UART_SetConfig+0x216>
 8003922:	2300      	movs	r3, #0
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e0a1      	b.n	8003a6c <UART_SetConfig+0x348>
 8003928:	2302      	movs	r3, #2
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e09e      	b.n	8003a6c <UART_SetConfig+0x348>
 800392e:	2304      	movs	r3, #4
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e09b      	b.n	8003a6c <UART_SetConfig+0x348>
 8003934:	2308      	movs	r3, #8
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e098      	b.n	8003a6c <UART_SetConfig+0x348>
 800393a:	2310      	movs	r3, #16
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e095      	b.n	8003a6c <UART_SetConfig+0x348>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2f      	ldr	r2, [pc, #188]	@ (8003a04 <UART_SetConfig+0x2e0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d125      	bne.n	8003996 <UART_SetConfig+0x272>
 800394a:	4b29      	ldr	r3, [pc, #164]	@ (80039f0 <UART_SetConfig+0x2cc>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003950:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003954:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003958:	d017      	beq.n	800398a <UART_SetConfig+0x266>
 800395a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800395e:	d817      	bhi.n	8003990 <UART_SetConfig+0x26c>
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003964:	d00b      	beq.n	800397e <UART_SetConfig+0x25a>
 8003966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800396a:	d811      	bhi.n	8003990 <UART_SetConfig+0x26c>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <UART_SetConfig+0x254>
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003974:	d006      	beq.n	8003984 <UART_SetConfig+0x260>
 8003976:	e00b      	b.n	8003990 <UART_SetConfig+0x26c>
 8003978:	2301      	movs	r3, #1
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e076      	b.n	8003a6c <UART_SetConfig+0x348>
 800397e:	2302      	movs	r3, #2
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e073      	b.n	8003a6c <UART_SetConfig+0x348>
 8003984:	2304      	movs	r3, #4
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e070      	b.n	8003a6c <UART_SetConfig+0x348>
 800398a:	2308      	movs	r3, #8
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e06d      	b.n	8003a6c <UART_SetConfig+0x348>
 8003990:	2310      	movs	r3, #16
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e06a      	b.n	8003a6c <UART_SetConfig+0x348>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a08 <UART_SetConfig+0x2e4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d138      	bne.n	8003a12 <UART_SetConfig+0x2ee>
 80039a0:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <UART_SetConfig+0x2cc>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80039aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039ae:	d017      	beq.n	80039e0 <UART_SetConfig+0x2bc>
 80039b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039b4:	d82a      	bhi.n	8003a0c <UART_SetConfig+0x2e8>
 80039b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ba:	d00b      	beq.n	80039d4 <UART_SetConfig+0x2b0>
 80039bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039c0:	d824      	bhi.n	8003a0c <UART_SetConfig+0x2e8>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <UART_SetConfig+0x2aa>
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ca:	d006      	beq.n	80039da <UART_SetConfig+0x2b6>
 80039cc:	e01e      	b.n	8003a0c <UART_SetConfig+0x2e8>
 80039ce:	2300      	movs	r3, #0
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e04b      	b.n	8003a6c <UART_SetConfig+0x348>
 80039d4:	2302      	movs	r3, #2
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e048      	b.n	8003a6c <UART_SetConfig+0x348>
 80039da:	2304      	movs	r3, #4
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e045      	b.n	8003a6c <UART_SetConfig+0x348>
 80039e0:	2308      	movs	r3, #8
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e042      	b.n	8003a6c <UART_SetConfig+0x348>
 80039e6:	bf00      	nop
 80039e8:	efff69f3 	.word	0xefff69f3
 80039ec:	40011000 	.word	0x40011000
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40004400 	.word	0x40004400
 80039f8:	40004800 	.word	0x40004800
 80039fc:	40004c00 	.word	0x40004c00
 8003a00:	40005000 	.word	0x40005000
 8003a04:	40011400 	.word	0x40011400
 8003a08:	40007800 	.word	0x40007800
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e02c      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a72      	ldr	r2, [pc, #456]	@ (8003be0 <UART_SetConfig+0x4bc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d125      	bne.n	8003a68 <UART_SetConfig+0x344>
 8003a1c:	4b71      	ldr	r3, [pc, #452]	@ (8003be4 <UART_SetConfig+0x4c0>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a26:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a2a:	d017      	beq.n	8003a5c <UART_SetConfig+0x338>
 8003a2c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a30:	d817      	bhi.n	8003a62 <UART_SetConfig+0x33e>
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a36:	d00b      	beq.n	8003a50 <UART_SetConfig+0x32c>
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a3c:	d811      	bhi.n	8003a62 <UART_SetConfig+0x33e>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <UART_SetConfig+0x326>
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a46:	d006      	beq.n	8003a56 <UART_SetConfig+0x332>
 8003a48:	e00b      	b.n	8003a62 <UART_SetConfig+0x33e>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e00d      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a50:	2302      	movs	r3, #2
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e00a      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a56:	2304      	movs	r3, #4
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e007      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e004      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a62:	2310      	movs	r3, #16
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e001      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a74:	d15b      	bne.n	8003b2e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a76:	7ffb      	ldrb	r3, [r7, #31]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d828      	bhi.n	8003ace <UART_SetConfig+0x3aa>
 8003a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <UART_SetConfig+0x360>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003ab9 	.word	0x08003ab9
 8003a90:	08003acf 	.word	0x08003acf
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003acf 	.word	0x08003acf
 8003a9c:	08003acf 	.word	0x08003acf
 8003aa0:	08003acf 	.word	0x08003acf
 8003aa4:	08003ac7 	.word	0x08003ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7ff f91a 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8003aac:	61b8      	str	r0, [r7, #24]
        break;
 8003aae:	e013      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab0:	f7ff f92a 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8003ab4:	61b8      	str	r0, [r7, #24]
        break;
 8003ab6:	e00f      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8003be8 <UART_SetConfig+0x4c4>)
 8003aba:	61bb      	str	r3, [r7, #24]
        break;
 8003abc:	e00c      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003abe:	f7fe ffff 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8003ac2:	61b8      	str	r0, [r7, #24]
        break;
 8003ac4:	e008      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aca:	61bb      	str	r3, [r7, #24]
        break;
 8003acc:	e004      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ad6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d074      	beq.n	8003bc8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	005a      	lsls	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	441a      	add	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	d916      	bls.n	8003b28 <UART_SetConfig+0x404>
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d212      	bcs.n	8003b28 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f023 030f 	bic.w	r3, r3, #15
 8003b0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	89fb      	ldrh	r3, [r7, #14]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	89fa      	ldrh	r2, [r7, #14]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	e04f      	b.n	8003bc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	77bb      	strb	r3, [r7, #30]
 8003b2c:	e04c      	b.n	8003bc8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b2e:	7ffb      	ldrb	r3, [r7, #31]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d828      	bhi.n	8003b86 <UART_SetConfig+0x462>
 8003b34:	a201      	add	r2, pc, #4	@ (adr r2, 8003b3c <UART_SetConfig+0x418>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003b69 	.word	0x08003b69
 8003b44:	08003b71 	.word	0x08003b71
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b77 	.word	0x08003b77
 8003b50:	08003b87 	.word	0x08003b87
 8003b54:	08003b87 	.word	0x08003b87
 8003b58:	08003b87 	.word	0x08003b87
 8003b5c:	08003b7f 	.word	0x08003b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b60:	f7ff f8be 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8003b64:	61b8      	str	r0, [r7, #24]
        break;
 8003b66:	e013      	b.n	8003b90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b68:	f7ff f8ce 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8003b6c:	61b8      	str	r0, [r7, #24]
        break;
 8003b6e:	e00f      	b.n	8003b90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <UART_SetConfig+0x4c4>)
 8003b72:	61bb      	str	r3, [r7, #24]
        break;
 8003b74:	e00c      	b.n	8003b90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b76:	f7fe ffa3 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8003b7a:	61b8      	str	r0, [r7, #24]
        break;
 8003b7c:	e008      	b.n	8003b90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b82:	61bb      	str	r3, [r7, #24]
        break;
 8003b84:	e004      	b.n	8003b90 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d018      	beq.n	8003bc8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	085a      	lsrs	r2, r3, #1
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d909      	bls.n	8003bc4 <UART_SetConfig+0x4a0>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb6:	d205      	bcs.n	8003bc4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	e001      	b.n	8003bc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003bd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40007c00 	.word	0x40007c00
 8003be4:	40023800 	.word	0x40023800
 8003be8:	00f42400 	.word	0x00f42400

08003bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01a      	beq.n	8003d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cea:	d10a      	bne.n	8003d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d40:	f7fd fa3e 	bl	80011c0 <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d10e      	bne.n	8003d72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f831 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e027      	b.n	8003dc2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d10e      	bne.n	8003d9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f81b 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e011      	b.n	8003dc2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b09c      	sub	sp, #112	@ 0x70
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dda:	e0a7      	b.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	f000 80a3 	beq.w	8003f2c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fd f9eb 	bl	80011c0 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x32>
 8003df6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d13f      	bne.n	8003e7c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003e10:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003e20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e6      	bne.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e4e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003e50:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e068      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d050      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e98:	d148      	bne.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ea2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ec4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ec8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e6      	bne.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003ef6:	623a      	str	r2, [r7, #32]
 8003ef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	69f9      	ldr	r1, [r7, #28]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e010      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	f43f af48 	beq.w	8003ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3770      	adds	r7, #112	@ 0x70
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <__cvt>:
 8003f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f58:	ed2d 8b02 	vpush	{d8}
 8003f5c:	eeb0 8b40 	vmov.f64	d8, d0
 8003f60:	b085      	sub	sp, #20
 8003f62:	4617      	mov	r7, r2
 8003f64:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8003f66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f68:	ee18 2a90 	vmov	r2, s17
 8003f6c:	f025 0520 	bic.w	r5, r5, #32
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	bfb6      	itet	lt
 8003f74:	222d      	movlt	r2, #45	@ 0x2d
 8003f76:	2200      	movge	r2, #0
 8003f78:	eeb1 8b40 	vneglt.f64	d8, d0
 8003f7c:	2d46      	cmp	r5, #70	@ 0x46
 8003f7e:	460c      	mov	r4, r1
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	d004      	beq.n	8003f8e <__cvt+0x38>
 8003f84:	2d45      	cmp	r5, #69	@ 0x45
 8003f86:	d100      	bne.n	8003f8a <__cvt+0x34>
 8003f88:	3401      	adds	r4, #1
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	e000      	b.n	8003f90 <__cvt+0x3a>
 8003f8e:	2103      	movs	r1, #3
 8003f90:	ab03      	add	r3, sp, #12
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	ab02      	add	r3, sp, #8
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4622      	mov	r2, r4
 8003f9a:	4633      	mov	r3, r6
 8003f9c:	eeb0 0b48 	vmov.f64	d0, d8
 8003fa0:	f000 fe22 	bl	8004be8 <_dtoa_r>
 8003fa4:	2d47      	cmp	r5, #71	@ 0x47
 8003fa6:	d114      	bne.n	8003fd2 <__cvt+0x7c>
 8003fa8:	07fb      	lsls	r3, r7, #31
 8003faa:	d50a      	bpl.n	8003fc2 <__cvt+0x6c>
 8003fac:	1902      	adds	r2, r0, r4
 8003fae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb6:	bf08      	it	eq
 8003fb8:	9203      	streq	r2, [sp, #12]
 8003fba:	2130      	movs	r1, #48	@ 0x30
 8003fbc:	9b03      	ldr	r3, [sp, #12]
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d319      	bcc.n	8003ff6 <__cvt+0xa0>
 8003fc2:	9b03      	ldr	r3, [sp, #12]
 8003fc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003fc6:	1a1b      	subs	r3, r3, r0
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	b005      	add	sp, #20
 8003fcc:	ecbd 8b02 	vpop	{d8}
 8003fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd2:	2d46      	cmp	r5, #70	@ 0x46
 8003fd4:	eb00 0204 	add.w	r2, r0, r4
 8003fd8:	d1e9      	bne.n	8003fae <__cvt+0x58>
 8003fda:	7803      	ldrb	r3, [r0, #0]
 8003fdc:	2b30      	cmp	r3, #48	@ 0x30
 8003fde:	d107      	bne.n	8003ff0 <__cvt+0x9a>
 8003fe0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe8:	bf1c      	itt	ne
 8003fea:	f1c4 0401 	rsbne	r4, r4, #1
 8003fee:	6034      	strne	r4, [r6, #0]
 8003ff0:	6833      	ldr	r3, [r6, #0]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	e7db      	b.n	8003fae <__cvt+0x58>
 8003ff6:	1c5c      	adds	r4, r3, #1
 8003ff8:	9403      	str	r4, [sp, #12]
 8003ffa:	7019      	strb	r1, [r3, #0]
 8003ffc:	e7de      	b.n	8003fbc <__cvt+0x66>

08003ffe <__exponent>:
 8003ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004000:	2900      	cmp	r1, #0
 8004002:	bfba      	itte	lt
 8004004:	4249      	neglt	r1, r1
 8004006:	232d      	movlt	r3, #45	@ 0x2d
 8004008:	232b      	movge	r3, #43	@ 0x2b
 800400a:	2909      	cmp	r1, #9
 800400c:	7002      	strb	r2, [r0, #0]
 800400e:	7043      	strb	r3, [r0, #1]
 8004010:	dd29      	ble.n	8004066 <__exponent+0x68>
 8004012:	f10d 0307 	add.w	r3, sp, #7
 8004016:	461d      	mov	r5, r3
 8004018:	270a      	movs	r7, #10
 800401a:	461a      	mov	r2, r3
 800401c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004020:	fb07 1416 	mls	r4, r7, r6, r1
 8004024:	3430      	adds	r4, #48	@ 0x30
 8004026:	f802 4c01 	strb.w	r4, [r2, #-1]
 800402a:	460c      	mov	r4, r1
 800402c:	2c63      	cmp	r4, #99	@ 0x63
 800402e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004032:	4631      	mov	r1, r6
 8004034:	dcf1      	bgt.n	800401a <__exponent+0x1c>
 8004036:	3130      	adds	r1, #48	@ 0x30
 8004038:	1e94      	subs	r4, r2, #2
 800403a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800403e:	1c41      	adds	r1, r0, #1
 8004040:	4623      	mov	r3, r4
 8004042:	42ab      	cmp	r3, r5
 8004044:	d30a      	bcc.n	800405c <__exponent+0x5e>
 8004046:	f10d 0309 	add.w	r3, sp, #9
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	42ac      	cmp	r4, r5
 800404e:	bf88      	it	hi
 8004050:	2300      	movhi	r3, #0
 8004052:	3302      	adds	r3, #2
 8004054:	4403      	add	r3, r0
 8004056:	1a18      	subs	r0, r3, r0
 8004058:	b003      	add	sp, #12
 800405a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800405c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004060:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004064:	e7ed      	b.n	8004042 <__exponent+0x44>
 8004066:	2330      	movs	r3, #48	@ 0x30
 8004068:	3130      	adds	r1, #48	@ 0x30
 800406a:	7083      	strb	r3, [r0, #2]
 800406c:	70c1      	strb	r1, [r0, #3]
 800406e:	1d03      	adds	r3, r0, #4
 8004070:	e7f1      	b.n	8004056 <__exponent+0x58>
 8004072:	0000      	movs	r0, r0
 8004074:	0000      	movs	r0, r0
	...

08004078 <_printf_float>:
 8004078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	b08d      	sub	sp, #52	@ 0x34
 800407e:	460c      	mov	r4, r1
 8004080:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004084:	4616      	mov	r6, r2
 8004086:	461f      	mov	r7, r3
 8004088:	4605      	mov	r5, r0
 800408a:	f000 fcab 	bl	80049e4 <_localeconv_r>
 800408e:	f8d0 b000 	ldr.w	fp, [r0]
 8004092:	4658      	mov	r0, fp
 8004094:	f7fc f924 	bl	80002e0 <strlen>
 8004098:	2300      	movs	r3, #0
 800409a:	930a      	str	r3, [sp, #40]	@ 0x28
 800409c:	f8d8 3000 	ldr.w	r3, [r8]
 80040a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80040a4:	6822      	ldr	r2, [r4, #0]
 80040a6:	9005      	str	r0, [sp, #20]
 80040a8:	3307      	adds	r3, #7
 80040aa:	f023 0307 	bic.w	r3, r3, #7
 80040ae:	f103 0108 	add.w	r1, r3, #8
 80040b2:	f8c8 1000 	str.w	r1, [r8]
 80040b6:	ed93 0b00 	vldr	d0, [r3]
 80040ba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8004318 <_printf_float+0x2a0>
 80040be:	eeb0 7bc0 	vabs.f64	d7, d0
 80040c2:	eeb4 7b46 	vcmp.f64	d7, d6
 80040c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80040ce:	dd24      	ble.n	800411a <_printf_float+0xa2>
 80040d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80040d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d8:	d502      	bpl.n	80040e0 <_printf_float+0x68>
 80040da:	232d      	movs	r3, #45	@ 0x2d
 80040dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040e0:	498f      	ldr	r1, [pc, #572]	@ (8004320 <_printf_float+0x2a8>)
 80040e2:	4b90      	ldr	r3, [pc, #576]	@ (8004324 <_printf_float+0x2ac>)
 80040e4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80040e8:	bf94      	ite	ls
 80040ea:	4688      	movls	r8, r1
 80040ec:	4698      	movhi	r8, r3
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	2303      	movs	r3, #3
 80040f4:	6123      	str	r3, [r4, #16]
 80040f6:	6022      	str	r2, [r4, #0]
 80040f8:	f04f 0a00 	mov.w	sl, #0
 80040fc:	9700      	str	r7, [sp, #0]
 80040fe:	4633      	mov	r3, r6
 8004100:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004102:	4621      	mov	r1, r4
 8004104:	4628      	mov	r0, r5
 8004106:	f000 f9d1 	bl	80044ac <_printf_common>
 800410a:	3001      	adds	r0, #1
 800410c:	f040 8089 	bne.w	8004222 <_printf_float+0x1aa>
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	b00d      	add	sp, #52	@ 0x34
 8004116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800411a:	eeb4 0b40 	vcmp.f64	d0, d0
 800411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004122:	d709      	bvc.n	8004138 <_printf_float+0xc0>
 8004124:	ee10 3a90 	vmov	r3, s1
 8004128:	2b00      	cmp	r3, #0
 800412a:	bfbc      	itt	lt
 800412c:	232d      	movlt	r3, #45	@ 0x2d
 800412e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004132:	497d      	ldr	r1, [pc, #500]	@ (8004328 <_printf_float+0x2b0>)
 8004134:	4b7d      	ldr	r3, [pc, #500]	@ (800432c <_printf_float+0x2b4>)
 8004136:	e7d5      	b.n	80040e4 <_printf_float+0x6c>
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	1c59      	adds	r1, r3, #1
 800413c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004140:	d139      	bne.n	80041b6 <_printf_float+0x13e>
 8004142:	2306      	movs	r3, #6
 8004144:	6063      	str	r3, [r4, #4]
 8004146:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800414a:	2300      	movs	r3, #0
 800414c:	6022      	str	r2, [r4, #0]
 800414e:	9303      	str	r3, [sp, #12]
 8004150:	ab0a      	add	r3, sp, #40	@ 0x28
 8004152:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004156:	ab09      	add	r3, sp, #36	@ 0x24
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	6861      	ldr	r1, [r4, #4]
 800415c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004160:	4628      	mov	r0, r5
 8004162:	f7ff fef8 	bl	8003f56 <__cvt>
 8004166:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800416a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800416c:	4680      	mov	r8, r0
 800416e:	d129      	bne.n	80041c4 <_printf_float+0x14c>
 8004170:	1cc8      	adds	r0, r1, #3
 8004172:	db02      	blt.n	800417a <_printf_float+0x102>
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	4299      	cmp	r1, r3
 8004178:	dd41      	ble.n	80041fe <_printf_float+0x186>
 800417a:	f1a9 0902 	sub.w	r9, r9, #2
 800417e:	fa5f f989 	uxtb.w	r9, r9
 8004182:	3901      	subs	r1, #1
 8004184:	464a      	mov	r2, r9
 8004186:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800418a:	9109      	str	r1, [sp, #36]	@ 0x24
 800418c:	f7ff ff37 	bl	8003ffe <__exponent>
 8004190:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004192:	1813      	adds	r3, r2, r0
 8004194:	2a01      	cmp	r2, #1
 8004196:	4682      	mov	sl, r0
 8004198:	6123      	str	r3, [r4, #16]
 800419a:	dc02      	bgt.n	80041a2 <_printf_float+0x12a>
 800419c:	6822      	ldr	r2, [r4, #0]
 800419e:	07d2      	lsls	r2, r2, #31
 80041a0:	d501      	bpl.n	80041a6 <_printf_float+0x12e>
 80041a2:	3301      	adds	r3, #1
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0a6      	beq.n	80040fc <_printf_float+0x84>
 80041ae:	232d      	movs	r3, #45	@ 0x2d
 80041b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041b4:	e7a2      	b.n	80040fc <_printf_float+0x84>
 80041b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041ba:	d1c4      	bne.n	8004146 <_printf_float+0xce>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1c2      	bne.n	8004146 <_printf_float+0xce>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e7bf      	b.n	8004144 <_printf_float+0xcc>
 80041c4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80041c8:	d9db      	bls.n	8004182 <_printf_float+0x10a>
 80041ca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80041ce:	d118      	bne.n	8004202 <_printf_float+0x18a>
 80041d0:	2900      	cmp	r1, #0
 80041d2:	6863      	ldr	r3, [r4, #4]
 80041d4:	dd0b      	ble.n	80041ee <_printf_float+0x176>
 80041d6:	6121      	str	r1, [r4, #16]
 80041d8:	b913      	cbnz	r3, 80041e0 <_printf_float+0x168>
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	07d0      	lsls	r0, r2, #31
 80041de:	d502      	bpl.n	80041e6 <_printf_float+0x16e>
 80041e0:	3301      	adds	r3, #1
 80041e2:	440b      	add	r3, r1
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80041e8:	f04f 0a00 	mov.w	sl, #0
 80041ec:	e7db      	b.n	80041a6 <_printf_float+0x12e>
 80041ee:	b913      	cbnz	r3, 80041f6 <_printf_float+0x17e>
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	07d2      	lsls	r2, r2, #31
 80041f4:	d501      	bpl.n	80041fa <_printf_float+0x182>
 80041f6:	3302      	adds	r3, #2
 80041f8:	e7f4      	b.n	80041e4 <_printf_float+0x16c>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e7f2      	b.n	80041e4 <_printf_float+0x16c>
 80041fe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004204:	4299      	cmp	r1, r3
 8004206:	db05      	blt.n	8004214 <_printf_float+0x19c>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	6121      	str	r1, [r4, #16]
 800420c:	07d8      	lsls	r0, r3, #31
 800420e:	d5ea      	bpl.n	80041e6 <_printf_float+0x16e>
 8004210:	1c4b      	adds	r3, r1, #1
 8004212:	e7e7      	b.n	80041e4 <_printf_float+0x16c>
 8004214:	2900      	cmp	r1, #0
 8004216:	bfd4      	ite	le
 8004218:	f1c1 0202 	rsble	r2, r1, #2
 800421c:	2201      	movgt	r2, #1
 800421e:	4413      	add	r3, r2
 8004220:	e7e0      	b.n	80041e4 <_printf_float+0x16c>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	055a      	lsls	r2, r3, #21
 8004226:	d407      	bmi.n	8004238 <_printf_float+0x1c0>
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	4642      	mov	r2, r8
 800422c:	4631      	mov	r1, r6
 800422e:	4628      	mov	r0, r5
 8004230:	47b8      	blx	r7
 8004232:	3001      	adds	r0, #1
 8004234:	d12a      	bne.n	800428c <_printf_float+0x214>
 8004236:	e76b      	b.n	8004110 <_printf_float+0x98>
 8004238:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800423c:	f240 80e0 	bls.w	8004400 <_printf_float+0x388>
 8004240:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004244:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424c:	d133      	bne.n	80042b6 <_printf_float+0x23e>
 800424e:	4a38      	ldr	r2, [pc, #224]	@ (8004330 <_printf_float+0x2b8>)
 8004250:	2301      	movs	r3, #1
 8004252:	4631      	mov	r1, r6
 8004254:	4628      	mov	r0, r5
 8004256:	47b8      	blx	r7
 8004258:	3001      	adds	r0, #1
 800425a:	f43f af59 	beq.w	8004110 <_printf_float+0x98>
 800425e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004262:	4543      	cmp	r3, r8
 8004264:	db02      	blt.n	800426c <_printf_float+0x1f4>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	07d8      	lsls	r0, r3, #31
 800426a:	d50f      	bpl.n	800428c <_printf_float+0x214>
 800426c:	9b05      	ldr	r3, [sp, #20]
 800426e:	465a      	mov	r2, fp
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	f43f af4a 	beq.w	8004110 <_printf_float+0x98>
 800427c:	f04f 0900 	mov.w	r9, #0
 8004280:	f108 38ff 	add.w	r8, r8, #4294967295
 8004284:	f104 0a1a 	add.w	sl, r4, #26
 8004288:	45c8      	cmp	r8, r9
 800428a:	dc09      	bgt.n	80042a0 <_printf_float+0x228>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	079b      	lsls	r3, r3, #30
 8004290:	f100 8107 	bmi.w	80044a2 <_printf_float+0x42a>
 8004294:	68e0      	ldr	r0, [r4, #12]
 8004296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004298:	4298      	cmp	r0, r3
 800429a:	bfb8      	it	lt
 800429c:	4618      	movlt	r0, r3
 800429e:	e739      	b.n	8004114 <_printf_float+0x9c>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4652      	mov	r2, sl
 80042a4:	4631      	mov	r1, r6
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	f43f af30 	beq.w	8004110 <_printf_float+0x98>
 80042b0:	f109 0901 	add.w	r9, r9, #1
 80042b4:	e7e8      	b.n	8004288 <_printf_float+0x210>
 80042b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dc3b      	bgt.n	8004334 <_printf_float+0x2bc>
 80042bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004330 <_printf_float+0x2b8>)
 80042be:	2301      	movs	r3, #1
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f af22 	beq.w	8004110 <_printf_float+0x98>
 80042cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80042d0:	ea59 0303 	orrs.w	r3, r9, r3
 80042d4:	d102      	bne.n	80042dc <_printf_float+0x264>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	07d9      	lsls	r1, r3, #31
 80042da:	d5d7      	bpl.n	800428c <_printf_float+0x214>
 80042dc:	9b05      	ldr	r3, [sp, #20]
 80042de:	465a      	mov	r2, fp
 80042e0:	4631      	mov	r1, r6
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b8      	blx	r7
 80042e6:	3001      	adds	r0, #1
 80042e8:	f43f af12 	beq.w	8004110 <_printf_float+0x98>
 80042ec:	f04f 0a00 	mov.w	sl, #0
 80042f0:	f104 0b1a 	add.w	fp, r4, #26
 80042f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042f6:	425b      	negs	r3, r3
 80042f8:	4553      	cmp	r3, sl
 80042fa:	dc01      	bgt.n	8004300 <_printf_float+0x288>
 80042fc:	464b      	mov	r3, r9
 80042fe:	e794      	b.n	800422a <_printf_float+0x1b2>
 8004300:	2301      	movs	r3, #1
 8004302:	465a      	mov	r2, fp
 8004304:	4631      	mov	r1, r6
 8004306:	4628      	mov	r0, r5
 8004308:	47b8      	blx	r7
 800430a:	3001      	adds	r0, #1
 800430c:	f43f af00 	beq.w	8004110 <_printf_float+0x98>
 8004310:	f10a 0a01 	add.w	sl, sl, #1
 8004314:	e7ee      	b.n	80042f4 <_printf_float+0x27c>
 8004316:	bf00      	nop
 8004318:	ffffffff 	.word	0xffffffff
 800431c:	7fefffff 	.word	0x7fefffff
 8004320:	08006774 	.word	0x08006774
 8004324:	08006778 	.word	0x08006778
 8004328:	0800677c 	.word	0x0800677c
 800432c:	08006780 	.word	0x08006780
 8004330:	08006784 	.word	0x08006784
 8004334:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004336:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800433a:	4553      	cmp	r3, sl
 800433c:	bfa8      	it	ge
 800433e:	4653      	movge	r3, sl
 8004340:	2b00      	cmp	r3, #0
 8004342:	4699      	mov	r9, r3
 8004344:	dc37      	bgt.n	80043b6 <_printf_float+0x33e>
 8004346:	2300      	movs	r3, #0
 8004348:	9307      	str	r3, [sp, #28]
 800434a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800434e:	f104 021a 	add.w	r2, r4, #26
 8004352:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004354:	9907      	ldr	r1, [sp, #28]
 8004356:	9306      	str	r3, [sp, #24]
 8004358:	eba3 0309 	sub.w	r3, r3, r9
 800435c:	428b      	cmp	r3, r1
 800435e:	dc31      	bgt.n	80043c4 <_printf_float+0x34c>
 8004360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004362:	459a      	cmp	sl, r3
 8004364:	dc3b      	bgt.n	80043de <_printf_float+0x366>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	07da      	lsls	r2, r3, #31
 800436a:	d438      	bmi.n	80043de <_printf_float+0x366>
 800436c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800436e:	ebaa 0903 	sub.w	r9, sl, r3
 8004372:	9b06      	ldr	r3, [sp, #24]
 8004374:	ebaa 0303 	sub.w	r3, sl, r3
 8004378:	4599      	cmp	r9, r3
 800437a:	bfa8      	it	ge
 800437c:	4699      	movge	r9, r3
 800437e:	f1b9 0f00 	cmp.w	r9, #0
 8004382:	dc34      	bgt.n	80043ee <_printf_float+0x376>
 8004384:	f04f 0800 	mov.w	r8, #0
 8004388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800438c:	f104 0b1a 	add.w	fp, r4, #26
 8004390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004392:	ebaa 0303 	sub.w	r3, sl, r3
 8004396:	eba3 0309 	sub.w	r3, r3, r9
 800439a:	4543      	cmp	r3, r8
 800439c:	f77f af76 	ble.w	800428c <_printf_float+0x214>
 80043a0:	2301      	movs	r3, #1
 80043a2:	465a      	mov	r2, fp
 80043a4:	4631      	mov	r1, r6
 80043a6:	4628      	mov	r0, r5
 80043a8:	47b8      	blx	r7
 80043aa:	3001      	adds	r0, #1
 80043ac:	f43f aeb0 	beq.w	8004110 <_printf_float+0x98>
 80043b0:	f108 0801 	add.w	r8, r8, #1
 80043b4:	e7ec      	b.n	8004390 <_printf_float+0x318>
 80043b6:	4642      	mov	r2, r8
 80043b8:	4631      	mov	r1, r6
 80043ba:	4628      	mov	r0, r5
 80043bc:	47b8      	blx	r7
 80043be:	3001      	adds	r0, #1
 80043c0:	d1c1      	bne.n	8004346 <_printf_float+0x2ce>
 80043c2:	e6a5      	b.n	8004110 <_printf_float+0x98>
 80043c4:	2301      	movs	r3, #1
 80043c6:	4631      	mov	r1, r6
 80043c8:	4628      	mov	r0, r5
 80043ca:	9206      	str	r2, [sp, #24]
 80043cc:	47b8      	blx	r7
 80043ce:	3001      	adds	r0, #1
 80043d0:	f43f ae9e 	beq.w	8004110 <_printf_float+0x98>
 80043d4:	9b07      	ldr	r3, [sp, #28]
 80043d6:	9a06      	ldr	r2, [sp, #24]
 80043d8:	3301      	adds	r3, #1
 80043da:	9307      	str	r3, [sp, #28]
 80043dc:	e7b9      	b.n	8004352 <_printf_float+0x2da>
 80043de:	9b05      	ldr	r3, [sp, #20]
 80043e0:	465a      	mov	r2, fp
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	d1bf      	bne.n	800436c <_printf_float+0x2f4>
 80043ec:	e690      	b.n	8004110 <_printf_float+0x98>
 80043ee:	9a06      	ldr	r2, [sp, #24]
 80043f0:	464b      	mov	r3, r9
 80043f2:	4442      	add	r2, r8
 80043f4:	4631      	mov	r1, r6
 80043f6:	4628      	mov	r0, r5
 80043f8:	47b8      	blx	r7
 80043fa:	3001      	adds	r0, #1
 80043fc:	d1c2      	bne.n	8004384 <_printf_float+0x30c>
 80043fe:	e687      	b.n	8004110 <_printf_float+0x98>
 8004400:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8004404:	f1b9 0f01 	cmp.w	r9, #1
 8004408:	dc01      	bgt.n	800440e <_printf_float+0x396>
 800440a:	07db      	lsls	r3, r3, #31
 800440c:	d536      	bpl.n	800447c <_printf_float+0x404>
 800440e:	2301      	movs	r3, #1
 8004410:	4642      	mov	r2, r8
 8004412:	4631      	mov	r1, r6
 8004414:	4628      	mov	r0, r5
 8004416:	47b8      	blx	r7
 8004418:	3001      	adds	r0, #1
 800441a:	f43f ae79 	beq.w	8004110 <_printf_float+0x98>
 800441e:	9b05      	ldr	r3, [sp, #20]
 8004420:	465a      	mov	r2, fp
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	f43f ae71 	beq.w	8004110 <_printf_float+0x98>
 800442e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004432:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	f109 39ff 	add.w	r9, r9, #4294967295
 800443e:	d018      	beq.n	8004472 <_printf_float+0x3fa>
 8004440:	464b      	mov	r3, r9
 8004442:	f108 0201 	add.w	r2, r8, #1
 8004446:	4631      	mov	r1, r6
 8004448:	4628      	mov	r0, r5
 800444a:	47b8      	blx	r7
 800444c:	3001      	adds	r0, #1
 800444e:	d10c      	bne.n	800446a <_printf_float+0x3f2>
 8004450:	e65e      	b.n	8004110 <_printf_float+0x98>
 8004452:	2301      	movs	r3, #1
 8004454:	465a      	mov	r2, fp
 8004456:	4631      	mov	r1, r6
 8004458:	4628      	mov	r0, r5
 800445a:	47b8      	blx	r7
 800445c:	3001      	adds	r0, #1
 800445e:	f43f ae57 	beq.w	8004110 <_printf_float+0x98>
 8004462:	f108 0801 	add.w	r8, r8, #1
 8004466:	45c8      	cmp	r8, r9
 8004468:	dbf3      	blt.n	8004452 <_printf_float+0x3da>
 800446a:	4653      	mov	r3, sl
 800446c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004470:	e6dc      	b.n	800422c <_printf_float+0x1b4>
 8004472:	f04f 0800 	mov.w	r8, #0
 8004476:	f104 0b1a 	add.w	fp, r4, #26
 800447a:	e7f4      	b.n	8004466 <_printf_float+0x3ee>
 800447c:	2301      	movs	r3, #1
 800447e:	4642      	mov	r2, r8
 8004480:	e7e1      	b.n	8004446 <_printf_float+0x3ce>
 8004482:	2301      	movs	r3, #1
 8004484:	464a      	mov	r2, r9
 8004486:	4631      	mov	r1, r6
 8004488:	4628      	mov	r0, r5
 800448a:	47b8      	blx	r7
 800448c:	3001      	adds	r0, #1
 800448e:	f43f ae3f 	beq.w	8004110 <_printf_float+0x98>
 8004492:	f108 0801 	add.w	r8, r8, #1
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800449a:	1a5b      	subs	r3, r3, r1
 800449c:	4543      	cmp	r3, r8
 800449e:	dcf0      	bgt.n	8004482 <_printf_float+0x40a>
 80044a0:	e6f8      	b.n	8004294 <_printf_float+0x21c>
 80044a2:	f04f 0800 	mov.w	r8, #0
 80044a6:	f104 0919 	add.w	r9, r4, #25
 80044aa:	e7f4      	b.n	8004496 <_printf_float+0x41e>

080044ac <_printf_common>:
 80044ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b0:	4616      	mov	r6, r2
 80044b2:	4698      	mov	r8, r3
 80044b4:	688a      	ldr	r2, [r1, #8]
 80044b6:	690b      	ldr	r3, [r1, #16]
 80044b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044bc:	4293      	cmp	r3, r2
 80044be:	bfb8      	it	lt
 80044c0:	4613      	movlt	r3, r2
 80044c2:	6033      	str	r3, [r6, #0]
 80044c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044c8:	4607      	mov	r7, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	b10a      	cbz	r2, 80044d2 <_printf_common+0x26>
 80044ce:	3301      	adds	r3, #1
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	0699      	lsls	r1, r3, #26
 80044d6:	bf42      	ittt	mi
 80044d8:	6833      	ldrmi	r3, [r6, #0]
 80044da:	3302      	addmi	r3, #2
 80044dc:	6033      	strmi	r3, [r6, #0]
 80044de:	6825      	ldr	r5, [r4, #0]
 80044e0:	f015 0506 	ands.w	r5, r5, #6
 80044e4:	d106      	bne.n	80044f4 <_printf_common+0x48>
 80044e6:	f104 0a19 	add.w	sl, r4, #25
 80044ea:	68e3      	ldr	r3, [r4, #12]
 80044ec:	6832      	ldr	r2, [r6, #0]
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	42ab      	cmp	r3, r5
 80044f2:	dc26      	bgt.n	8004542 <_printf_common+0x96>
 80044f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044f8:	6822      	ldr	r2, [r4, #0]
 80044fa:	3b00      	subs	r3, #0
 80044fc:	bf18      	it	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	0692      	lsls	r2, r2, #26
 8004502:	d42b      	bmi.n	800455c <_printf_common+0xb0>
 8004504:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004508:	4641      	mov	r1, r8
 800450a:	4638      	mov	r0, r7
 800450c:	47c8      	blx	r9
 800450e:	3001      	adds	r0, #1
 8004510:	d01e      	beq.n	8004550 <_printf_common+0xa4>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	6922      	ldr	r2, [r4, #16]
 8004516:	f003 0306 	and.w	r3, r3, #6
 800451a:	2b04      	cmp	r3, #4
 800451c:	bf02      	ittt	eq
 800451e:	68e5      	ldreq	r5, [r4, #12]
 8004520:	6833      	ldreq	r3, [r6, #0]
 8004522:	1aed      	subeq	r5, r5, r3
 8004524:	68a3      	ldr	r3, [r4, #8]
 8004526:	bf0c      	ite	eq
 8004528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800452c:	2500      	movne	r5, #0
 800452e:	4293      	cmp	r3, r2
 8004530:	bfc4      	itt	gt
 8004532:	1a9b      	subgt	r3, r3, r2
 8004534:	18ed      	addgt	r5, r5, r3
 8004536:	2600      	movs	r6, #0
 8004538:	341a      	adds	r4, #26
 800453a:	42b5      	cmp	r5, r6
 800453c:	d11a      	bne.n	8004574 <_printf_common+0xc8>
 800453e:	2000      	movs	r0, #0
 8004540:	e008      	b.n	8004554 <_printf_common+0xa8>
 8004542:	2301      	movs	r3, #1
 8004544:	4652      	mov	r2, sl
 8004546:	4641      	mov	r1, r8
 8004548:	4638      	mov	r0, r7
 800454a:	47c8      	blx	r9
 800454c:	3001      	adds	r0, #1
 800454e:	d103      	bne.n	8004558 <_printf_common+0xac>
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004558:	3501      	adds	r5, #1
 800455a:	e7c6      	b.n	80044ea <_printf_common+0x3e>
 800455c:	18e1      	adds	r1, r4, r3
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	2030      	movs	r0, #48	@ 0x30
 8004562:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004566:	4422      	add	r2, r4
 8004568:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800456c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004570:	3302      	adds	r3, #2
 8004572:	e7c7      	b.n	8004504 <_printf_common+0x58>
 8004574:	2301      	movs	r3, #1
 8004576:	4622      	mov	r2, r4
 8004578:	4641      	mov	r1, r8
 800457a:	4638      	mov	r0, r7
 800457c:	47c8      	blx	r9
 800457e:	3001      	adds	r0, #1
 8004580:	d0e6      	beq.n	8004550 <_printf_common+0xa4>
 8004582:	3601      	adds	r6, #1
 8004584:	e7d9      	b.n	800453a <_printf_common+0x8e>
	...

08004588 <_printf_i>:
 8004588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800458c:	7e0f      	ldrb	r7, [r1, #24]
 800458e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004590:	2f78      	cmp	r7, #120	@ 0x78
 8004592:	4691      	mov	r9, r2
 8004594:	4680      	mov	r8, r0
 8004596:	460c      	mov	r4, r1
 8004598:	469a      	mov	sl, r3
 800459a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800459e:	d807      	bhi.n	80045b0 <_printf_i+0x28>
 80045a0:	2f62      	cmp	r7, #98	@ 0x62
 80045a2:	d80a      	bhi.n	80045ba <_printf_i+0x32>
 80045a4:	2f00      	cmp	r7, #0
 80045a6:	f000 80d2 	beq.w	800474e <_printf_i+0x1c6>
 80045aa:	2f58      	cmp	r7, #88	@ 0x58
 80045ac:	f000 80b9 	beq.w	8004722 <_printf_i+0x19a>
 80045b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045b8:	e03a      	b.n	8004630 <_printf_i+0xa8>
 80045ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045be:	2b15      	cmp	r3, #21
 80045c0:	d8f6      	bhi.n	80045b0 <_printf_i+0x28>
 80045c2:	a101      	add	r1, pc, #4	@ (adr r1, 80045c8 <_printf_i+0x40>)
 80045c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045c8:	08004621 	.word	0x08004621
 80045cc:	08004635 	.word	0x08004635
 80045d0:	080045b1 	.word	0x080045b1
 80045d4:	080045b1 	.word	0x080045b1
 80045d8:	080045b1 	.word	0x080045b1
 80045dc:	080045b1 	.word	0x080045b1
 80045e0:	08004635 	.word	0x08004635
 80045e4:	080045b1 	.word	0x080045b1
 80045e8:	080045b1 	.word	0x080045b1
 80045ec:	080045b1 	.word	0x080045b1
 80045f0:	080045b1 	.word	0x080045b1
 80045f4:	08004735 	.word	0x08004735
 80045f8:	0800465f 	.word	0x0800465f
 80045fc:	080046ef 	.word	0x080046ef
 8004600:	080045b1 	.word	0x080045b1
 8004604:	080045b1 	.word	0x080045b1
 8004608:	08004757 	.word	0x08004757
 800460c:	080045b1 	.word	0x080045b1
 8004610:	0800465f 	.word	0x0800465f
 8004614:	080045b1 	.word	0x080045b1
 8004618:	080045b1 	.word	0x080045b1
 800461c:	080046f7 	.word	0x080046f7
 8004620:	6833      	ldr	r3, [r6, #0]
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6032      	str	r2, [r6, #0]
 8004628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800462c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004630:	2301      	movs	r3, #1
 8004632:	e09d      	b.n	8004770 <_printf_i+0x1e8>
 8004634:	6833      	ldr	r3, [r6, #0]
 8004636:	6820      	ldr	r0, [r4, #0]
 8004638:	1d19      	adds	r1, r3, #4
 800463a:	6031      	str	r1, [r6, #0]
 800463c:	0606      	lsls	r6, r0, #24
 800463e:	d501      	bpl.n	8004644 <_printf_i+0xbc>
 8004640:	681d      	ldr	r5, [r3, #0]
 8004642:	e003      	b.n	800464c <_printf_i+0xc4>
 8004644:	0645      	lsls	r5, r0, #25
 8004646:	d5fb      	bpl.n	8004640 <_printf_i+0xb8>
 8004648:	f9b3 5000 	ldrsh.w	r5, [r3]
 800464c:	2d00      	cmp	r5, #0
 800464e:	da03      	bge.n	8004658 <_printf_i+0xd0>
 8004650:	232d      	movs	r3, #45	@ 0x2d
 8004652:	426d      	negs	r5, r5
 8004654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004658:	4859      	ldr	r0, [pc, #356]	@ (80047c0 <_printf_i+0x238>)
 800465a:	230a      	movs	r3, #10
 800465c:	e011      	b.n	8004682 <_printf_i+0xfa>
 800465e:	6821      	ldr	r1, [r4, #0]
 8004660:	6833      	ldr	r3, [r6, #0]
 8004662:	0608      	lsls	r0, r1, #24
 8004664:	f853 5b04 	ldr.w	r5, [r3], #4
 8004668:	d402      	bmi.n	8004670 <_printf_i+0xe8>
 800466a:	0649      	lsls	r1, r1, #25
 800466c:	bf48      	it	mi
 800466e:	b2ad      	uxthmi	r5, r5
 8004670:	2f6f      	cmp	r7, #111	@ 0x6f
 8004672:	4853      	ldr	r0, [pc, #332]	@ (80047c0 <_printf_i+0x238>)
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	bf14      	ite	ne
 8004678:	230a      	movne	r3, #10
 800467a:	2308      	moveq	r3, #8
 800467c:	2100      	movs	r1, #0
 800467e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004682:	6866      	ldr	r6, [r4, #4]
 8004684:	60a6      	str	r6, [r4, #8]
 8004686:	2e00      	cmp	r6, #0
 8004688:	bfa2      	ittt	ge
 800468a:	6821      	ldrge	r1, [r4, #0]
 800468c:	f021 0104 	bicge.w	r1, r1, #4
 8004690:	6021      	strge	r1, [r4, #0]
 8004692:	b90d      	cbnz	r5, 8004698 <_printf_i+0x110>
 8004694:	2e00      	cmp	r6, #0
 8004696:	d04b      	beq.n	8004730 <_printf_i+0x1a8>
 8004698:	4616      	mov	r6, r2
 800469a:	fbb5 f1f3 	udiv	r1, r5, r3
 800469e:	fb03 5711 	mls	r7, r3, r1, r5
 80046a2:	5dc7      	ldrb	r7, [r0, r7]
 80046a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046a8:	462f      	mov	r7, r5
 80046aa:	42bb      	cmp	r3, r7
 80046ac:	460d      	mov	r5, r1
 80046ae:	d9f4      	bls.n	800469a <_printf_i+0x112>
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d10b      	bne.n	80046cc <_printf_i+0x144>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	07df      	lsls	r7, r3, #31
 80046b8:	d508      	bpl.n	80046cc <_printf_i+0x144>
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	6861      	ldr	r1, [r4, #4]
 80046be:	4299      	cmp	r1, r3
 80046c0:	bfde      	ittt	le
 80046c2:	2330      	movle	r3, #48	@ 0x30
 80046c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046cc:	1b92      	subs	r2, r2, r6
 80046ce:	6122      	str	r2, [r4, #16]
 80046d0:	f8cd a000 	str.w	sl, [sp]
 80046d4:	464b      	mov	r3, r9
 80046d6:	aa03      	add	r2, sp, #12
 80046d8:	4621      	mov	r1, r4
 80046da:	4640      	mov	r0, r8
 80046dc:	f7ff fee6 	bl	80044ac <_printf_common>
 80046e0:	3001      	adds	r0, #1
 80046e2:	d14a      	bne.n	800477a <_printf_i+0x1f2>
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	b004      	add	sp, #16
 80046ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	f043 0320 	orr.w	r3, r3, #32
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	4833      	ldr	r0, [pc, #204]	@ (80047c4 <_printf_i+0x23c>)
 80046f8:	2778      	movs	r7, #120	@ 0x78
 80046fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	6831      	ldr	r1, [r6, #0]
 8004702:	061f      	lsls	r7, r3, #24
 8004704:	f851 5b04 	ldr.w	r5, [r1], #4
 8004708:	d402      	bmi.n	8004710 <_printf_i+0x188>
 800470a:	065f      	lsls	r7, r3, #25
 800470c:	bf48      	it	mi
 800470e:	b2ad      	uxthmi	r5, r5
 8004710:	6031      	str	r1, [r6, #0]
 8004712:	07d9      	lsls	r1, r3, #31
 8004714:	bf44      	itt	mi
 8004716:	f043 0320 	orrmi.w	r3, r3, #32
 800471a:	6023      	strmi	r3, [r4, #0]
 800471c:	b11d      	cbz	r5, 8004726 <_printf_i+0x19e>
 800471e:	2310      	movs	r3, #16
 8004720:	e7ac      	b.n	800467c <_printf_i+0xf4>
 8004722:	4827      	ldr	r0, [pc, #156]	@ (80047c0 <_printf_i+0x238>)
 8004724:	e7e9      	b.n	80046fa <_printf_i+0x172>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	f023 0320 	bic.w	r3, r3, #32
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	e7f6      	b.n	800471e <_printf_i+0x196>
 8004730:	4616      	mov	r6, r2
 8004732:	e7bd      	b.n	80046b0 <_printf_i+0x128>
 8004734:	6833      	ldr	r3, [r6, #0]
 8004736:	6825      	ldr	r5, [r4, #0]
 8004738:	6961      	ldr	r1, [r4, #20]
 800473a:	1d18      	adds	r0, r3, #4
 800473c:	6030      	str	r0, [r6, #0]
 800473e:	062e      	lsls	r6, r5, #24
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	d501      	bpl.n	8004748 <_printf_i+0x1c0>
 8004744:	6019      	str	r1, [r3, #0]
 8004746:	e002      	b.n	800474e <_printf_i+0x1c6>
 8004748:	0668      	lsls	r0, r5, #25
 800474a:	d5fb      	bpl.n	8004744 <_printf_i+0x1bc>
 800474c:	8019      	strh	r1, [r3, #0]
 800474e:	2300      	movs	r3, #0
 8004750:	6123      	str	r3, [r4, #16]
 8004752:	4616      	mov	r6, r2
 8004754:	e7bc      	b.n	80046d0 <_printf_i+0x148>
 8004756:	6833      	ldr	r3, [r6, #0]
 8004758:	1d1a      	adds	r2, r3, #4
 800475a:	6032      	str	r2, [r6, #0]
 800475c:	681e      	ldr	r6, [r3, #0]
 800475e:	6862      	ldr	r2, [r4, #4]
 8004760:	2100      	movs	r1, #0
 8004762:	4630      	mov	r0, r6
 8004764:	f7fb fd6c 	bl	8000240 <memchr>
 8004768:	b108      	cbz	r0, 800476e <_printf_i+0x1e6>
 800476a:	1b80      	subs	r0, r0, r6
 800476c:	6060      	str	r0, [r4, #4]
 800476e:	6863      	ldr	r3, [r4, #4]
 8004770:	6123      	str	r3, [r4, #16]
 8004772:	2300      	movs	r3, #0
 8004774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004778:	e7aa      	b.n	80046d0 <_printf_i+0x148>
 800477a:	6923      	ldr	r3, [r4, #16]
 800477c:	4632      	mov	r2, r6
 800477e:	4649      	mov	r1, r9
 8004780:	4640      	mov	r0, r8
 8004782:	47d0      	blx	sl
 8004784:	3001      	adds	r0, #1
 8004786:	d0ad      	beq.n	80046e4 <_printf_i+0x15c>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	079b      	lsls	r3, r3, #30
 800478c:	d413      	bmi.n	80047b6 <_printf_i+0x22e>
 800478e:	68e0      	ldr	r0, [r4, #12]
 8004790:	9b03      	ldr	r3, [sp, #12]
 8004792:	4298      	cmp	r0, r3
 8004794:	bfb8      	it	lt
 8004796:	4618      	movlt	r0, r3
 8004798:	e7a6      	b.n	80046e8 <_printf_i+0x160>
 800479a:	2301      	movs	r3, #1
 800479c:	4632      	mov	r2, r6
 800479e:	4649      	mov	r1, r9
 80047a0:	4640      	mov	r0, r8
 80047a2:	47d0      	blx	sl
 80047a4:	3001      	adds	r0, #1
 80047a6:	d09d      	beq.n	80046e4 <_printf_i+0x15c>
 80047a8:	3501      	adds	r5, #1
 80047aa:	68e3      	ldr	r3, [r4, #12]
 80047ac:	9903      	ldr	r1, [sp, #12]
 80047ae:	1a5b      	subs	r3, r3, r1
 80047b0:	42ab      	cmp	r3, r5
 80047b2:	dcf2      	bgt.n	800479a <_printf_i+0x212>
 80047b4:	e7eb      	b.n	800478e <_printf_i+0x206>
 80047b6:	2500      	movs	r5, #0
 80047b8:	f104 0619 	add.w	r6, r4, #25
 80047bc:	e7f5      	b.n	80047aa <_printf_i+0x222>
 80047be:	bf00      	nop
 80047c0:	08006786 	.word	0x08006786
 80047c4:	08006797 	.word	0x08006797

080047c8 <std>:
 80047c8:	2300      	movs	r3, #0
 80047ca:	b510      	push	{r4, lr}
 80047cc:	4604      	mov	r4, r0
 80047ce:	e9c0 3300 	strd	r3, r3, [r0]
 80047d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047d6:	6083      	str	r3, [r0, #8]
 80047d8:	8181      	strh	r1, [r0, #12]
 80047da:	6643      	str	r3, [r0, #100]	@ 0x64
 80047dc:	81c2      	strh	r2, [r0, #14]
 80047de:	6183      	str	r3, [r0, #24]
 80047e0:	4619      	mov	r1, r3
 80047e2:	2208      	movs	r2, #8
 80047e4:	305c      	adds	r0, #92	@ 0x5c
 80047e6:	f000 f8f4 	bl	80049d2 <memset>
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <std+0x58>)
 80047ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80047ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <std+0x5c>)
 80047f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004828 <std+0x60>)
 80047f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047f6:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <std+0x64>)
 80047f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <std+0x68>)
 80047fc:	6224      	str	r4, [r4, #32]
 80047fe:	429c      	cmp	r4, r3
 8004800:	d006      	beq.n	8004810 <std+0x48>
 8004802:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004806:	4294      	cmp	r4, r2
 8004808:	d002      	beq.n	8004810 <std+0x48>
 800480a:	33d0      	adds	r3, #208	@ 0xd0
 800480c:	429c      	cmp	r4, r3
 800480e:	d105      	bne.n	800481c <std+0x54>
 8004810:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004818:	f000 b958 	b.w	8004acc <__retarget_lock_init_recursive>
 800481c:	bd10      	pop	{r4, pc}
 800481e:	bf00      	nop
 8004820:	0800494d 	.word	0x0800494d
 8004824:	0800496f 	.word	0x0800496f
 8004828:	080049a7 	.word	0x080049a7
 800482c:	080049cb 	.word	0x080049cb
 8004830:	200003d8 	.word	0x200003d8

08004834 <stdio_exit_handler>:
 8004834:	4a02      	ldr	r2, [pc, #8]	@ (8004840 <stdio_exit_handler+0xc>)
 8004836:	4903      	ldr	r1, [pc, #12]	@ (8004844 <stdio_exit_handler+0x10>)
 8004838:	4803      	ldr	r0, [pc, #12]	@ (8004848 <stdio_exit_handler+0x14>)
 800483a:	f000 b869 	b.w	8004910 <_fwalk_sglue>
 800483e:	bf00      	nop
 8004840:	20000048 	.word	0x20000048
 8004844:	080060a1 	.word	0x080060a1
 8004848:	20000058 	.word	0x20000058

0800484c <cleanup_stdio>:
 800484c:	6841      	ldr	r1, [r0, #4]
 800484e:	4b0c      	ldr	r3, [pc, #48]	@ (8004880 <cleanup_stdio+0x34>)
 8004850:	4299      	cmp	r1, r3
 8004852:	b510      	push	{r4, lr}
 8004854:	4604      	mov	r4, r0
 8004856:	d001      	beq.n	800485c <cleanup_stdio+0x10>
 8004858:	f001 fc22 	bl	80060a0 <_fflush_r>
 800485c:	68a1      	ldr	r1, [r4, #8]
 800485e:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <cleanup_stdio+0x38>)
 8004860:	4299      	cmp	r1, r3
 8004862:	d002      	beq.n	800486a <cleanup_stdio+0x1e>
 8004864:	4620      	mov	r0, r4
 8004866:	f001 fc1b 	bl	80060a0 <_fflush_r>
 800486a:	68e1      	ldr	r1, [r4, #12]
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <cleanup_stdio+0x3c>)
 800486e:	4299      	cmp	r1, r3
 8004870:	d004      	beq.n	800487c <cleanup_stdio+0x30>
 8004872:	4620      	mov	r0, r4
 8004874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004878:	f001 bc12 	b.w	80060a0 <_fflush_r>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	bf00      	nop
 8004880:	200003d8 	.word	0x200003d8
 8004884:	20000440 	.word	0x20000440
 8004888:	200004a8 	.word	0x200004a8

0800488c <global_stdio_init.part.0>:
 800488c:	b510      	push	{r4, lr}
 800488e:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <global_stdio_init.part.0+0x30>)
 8004890:	4c0b      	ldr	r4, [pc, #44]	@ (80048c0 <global_stdio_init.part.0+0x34>)
 8004892:	4a0c      	ldr	r2, [pc, #48]	@ (80048c4 <global_stdio_init.part.0+0x38>)
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	4620      	mov	r0, r4
 8004898:	2200      	movs	r2, #0
 800489a:	2104      	movs	r1, #4
 800489c:	f7ff ff94 	bl	80047c8 <std>
 80048a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048a4:	2201      	movs	r2, #1
 80048a6:	2109      	movs	r1, #9
 80048a8:	f7ff ff8e 	bl	80047c8 <std>
 80048ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048b0:	2202      	movs	r2, #2
 80048b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b6:	2112      	movs	r1, #18
 80048b8:	f7ff bf86 	b.w	80047c8 <std>
 80048bc:	20000510 	.word	0x20000510
 80048c0:	200003d8 	.word	0x200003d8
 80048c4:	08004835 	.word	0x08004835

080048c8 <__sfp_lock_acquire>:
 80048c8:	4801      	ldr	r0, [pc, #4]	@ (80048d0 <__sfp_lock_acquire+0x8>)
 80048ca:	f000 b900 	b.w	8004ace <__retarget_lock_acquire_recursive>
 80048ce:	bf00      	nop
 80048d0:	20000519 	.word	0x20000519

080048d4 <__sfp_lock_release>:
 80048d4:	4801      	ldr	r0, [pc, #4]	@ (80048dc <__sfp_lock_release+0x8>)
 80048d6:	f000 b8fb 	b.w	8004ad0 <__retarget_lock_release_recursive>
 80048da:	bf00      	nop
 80048dc:	20000519 	.word	0x20000519

080048e0 <__sinit>:
 80048e0:	b510      	push	{r4, lr}
 80048e2:	4604      	mov	r4, r0
 80048e4:	f7ff fff0 	bl	80048c8 <__sfp_lock_acquire>
 80048e8:	6a23      	ldr	r3, [r4, #32]
 80048ea:	b11b      	cbz	r3, 80048f4 <__sinit+0x14>
 80048ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f0:	f7ff bff0 	b.w	80048d4 <__sfp_lock_release>
 80048f4:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <__sinit+0x28>)
 80048f6:	6223      	str	r3, [r4, #32]
 80048f8:	4b04      	ldr	r3, [pc, #16]	@ (800490c <__sinit+0x2c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f5      	bne.n	80048ec <__sinit+0xc>
 8004900:	f7ff ffc4 	bl	800488c <global_stdio_init.part.0>
 8004904:	e7f2      	b.n	80048ec <__sinit+0xc>
 8004906:	bf00      	nop
 8004908:	0800484d 	.word	0x0800484d
 800490c:	20000510 	.word	0x20000510

08004910 <_fwalk_sglue>:
 8004910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004914:	4607      	mov	r7, r0
 8004916:	4688      	mov	r8, r1
 8004918:	4614      	mov	r4, r2
 800491a:	2600      	movs	r6, #0
 800491c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004920:	f1b9 0901 	subs.w	r9, r9, #1
 8004924:	d505      	bpl.n	8004932 <_fwalk_sglue+0x22>
 8004926:	6824      	ldr	r4, [r4, #0]
 8004928:	2c00      	cmp	r4, #0
 800492a:	d1f7      	bne.n	800491c <_fwalk_sglue+0xc>
 800492c:	4630      	mov	r0, r6
 800492e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004932:	89ab      	ldrh	r3, [r5, #12]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d907      	bls.n	8004948 <_fwalk_sglue+0x38>
 8004938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800493c:	3301      	adds	r3, #1
 800493e:	d003      	beq.n	8004948 <_fwalk_sglue+0x38>
 8004940:	4629      	mov	r1, r5
 8004942:	4638      	mov	r0, r7
 8004944:	47c0      	blx	r8
 8004946:	4306      	orrs	r6, r0
 8004948:	3568      	adds	r5, #104	@ 0x68
 800494a:	e7e9      	b.n	8004920 <_fwalk_sglue+0x10>

0800494c <__sread>:
 800494c:	b510      	push	{r4, lr}
 800494e:	460c      	mov	r4, r1
 8004950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004954:	f000 f86c 	bl	8004a30 <_read_r>
 8004958:	2800      	cmp	r0, #0
 800495a:	bfab      	itete	ge
 800495c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800495e:	89a3      	ldrhlt	r3, [r4, #12]
 8004960:	181b      	addge	r3, r3, r0
 8004962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004966:	bfac      	ite	ge
 8004968:	6563      	strge	r3, [r4, #84]	@ 0x54
 800496a:	81a3      	strhlt	r3, [r4, #12]
 800496c:	bd10      	pop	{r4, pc}

0800496e <__swrite>:
 800496e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004972:	461f      	mov	r7, r3
 8004974:	898b      	ldrh	r3, [r1, #12]
 8004976:	05db      	lsls	r3, r3, #23
 8004978:	4605      	mov	r5, r0
 800497a:	460c      	mov	r4, r1
 800497c:	4616      	mov	r6, r2
 800497e:	d505      	bpl.n	800498c <__swrite+0x1e>
 8004980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004984:	2302      	movs	r3, #2
 8004986:	2200      	movs	r2, #0
 8004988:	f000 f840 	bl	8004a0c <_lseek_r>
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004996:	81a3      	strh	r3, [r4, #12]
 8004998:	4632      	mov	r2, r6
 800499a:	463b      	mov	r3, r7
 800499c:	4628      	mov	r0, r5
 800499e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a2:	f000 b857 	b.w	8004a54 <_write_r>

080049a6 <__sseek>:
 80049a6:	b510      	push	{r4, lr}
 80049a8:	460c      	mov	r4, r1
 80049aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ae:	f000 f82d 	bl	8004a0c <_lseek_r>
 80049b2:	1c43      	adds	r3, r0, #1
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	bf15      	itete	ne
 80049b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049c2:	81a3      	strheq	r3, [r4, #12]
 80049c4:	bf18      	it	ne
 80049c6:	81a3      	strhne	r3, [r4, #12]
 80049c8:	bd10      	pop	{r4, pc}

080049ca <__sclose>:
 80049ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ce:	f000 b80d 	b.w	80049ec <_close_r>

080049d2 <memset>:
 80049d2:	4402      	add	r2, r0
 80049d4:	4603      	mov	r3, r0
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d100      	bne.n	80049dc <memset+0xa>
 80049da:	4770      	bx	lr
 80049dc:	f803 1b01 	strb.w	r1, [r3], #1
 80049e0:	e7f9      	b.n	80049d6 <memset+0x4>
	...

080049e4 <_localeconv_r>:
 80049e4:	4800      	ldr	r0, [pc, #0]	@ (80049e8 <_localeconv_r+0x4>)
 80049e6:	4770      	bx	lr
 80049e8:	20000194 	.word	0x20000194

080049ec <_close_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d06      	ldr	r5, [pc, #24]	@ (8004a08 <_close_r+0x1c>)
 80049f0:	2300      	movs	r3, #0
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	f7fc faeb 	bl	8000fd2 <_close>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_close_r+0x1a>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_close_r+0x1a>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	20000514 	.word	0x20000514

08004a0c <_lseek_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d07      	ldr	r5, [pc, #28]	@ (8004a2c <_lseek_r+0x20>)
 8004a10:	4604      	mov	r4, r0
 8004a12:	4608      	mov	r0, r1
 8004a14:	4611      	mov	r1, r2
 8004a16:	2200      	movs	r2, #0
 8004a18:	602a      	str	r2, [r5, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f7fc fb00 	bl	8001020 <_lseek>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_lseek_r+0x1e>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_lseek_r+0x1e>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	20000514 	.word	0x20000514

08004a30 <_read_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4d07      	ldr	r5, [pc, #28]	@ (8004a50 <_read_r+0x20>)
 8004a34:	4604      	mov	r4, r0
 8004a36:	4608      	mov	r0, r1
 8004a38:	4611      	mov	r1, r2
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	602a      	str	r2, [r5, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f7fc fa8e 	bl	8000f60 <_read>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_read_r+0x1e>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_read_r+0x1e>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	20000514 	.word	0x20000514

08004a54 <_write_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d07      	ldr	r5, [pc, #28]	@ (8004a74 <_write_r+0x20>)
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	2200      	movs	r2, #0
 8004a60:	602a      	str	r2, [r5, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f7fc fa99 	bl	8000f9a <_write>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_write_r+0x1e>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_write_r+0x1e>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000514 	.word	0x20000514

08004a78 <__errno>:
 8004a78:	4b01      	ldr	r3, [pc, #4]	@ (8004a80 <__errno+0x8>)
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000054 	.word	0x20000054

08004a84 <__libc_init_array>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	4d0d      	ldr	r5, [pc, #52]	@ (8004abc <__libc_init_array+0x38>)
 8004a88:	4c0d      	ldr	r4, [pc, #52]	@ (8004ac0 <__libc_init_array+0x3c>)
 8004a8a:	1b64      	subs	r4, r4, r5
 8004a8c:	10a4      	asrs	r4, r4, #2
 8004a8e:	2600      	movs	r6, #0
 8004a90:	42a6      	cmp	r6, r4
 8004a92:	d109      	bne.n	8004aa8 <__libc_init_array+0x24>
 8004a94:	4d0b      	ldr	r5, [pc, #44]	@ (8004ac4 <__libc_init_array+0x40>)
 8004a96:	4c0c      	ldr	r4, [pc, #48]	@ (8004ac8 <__libc_init_array+0x44>)
 8004a98:	f001 fe50 	bl	800673c <_init>
 8004a9c:	1b64      	subs	r4, r4, r5
 8004a9e:	10a4      	asrs	r4, r4, #2
 8004aa0:	2600      	movs	r6, #0
 8004aa2:	42a6      	cmp	r6, r4
 8004aa4:	d105      	bne.n	8004ab2 <__libc_init_array+0x2e>
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
 8004aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aac:	4798      	blx	r3
 8004aae:	3601      	adds	r6, #1
 8004ab0:	e7ee      	b.n	8004a90 <__libc_init_array+0xc>
 8004ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab6:	4798      	blx	r3
 8004ab8:	3601      	adds	r6, #1
 8004aba:	e7f2      	b.n	8004aa2 <__libc_init_array+0x1e>
 8004abc:	08006af0 	.word	0x08006af0
 8004ac0:	08006af0 	.word	0x08006af0
 8004ac4:	08006af0 	.word	0x08006af0
 8004ac8:	08006af4 	.word	0x08006af4

08004acc <__retarget_lock_init_recursive>:
 8004acc:	4770      	bx	lr

08004ace <__retarget_lock_acquire_recursive>:
 8004ace:	4770      	bx	lr

08004ad0 <__retarget_lock_release_recursive>:
 8004ad0:	4770      	bx	lr

08004ad2 <quorem>:
 8004ad2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad6:	6903      	ldr	r3, [r0, #16]
 8004ad8:	690c      	ldr	r4, [r1, #16]
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	4607      	mov	r7, r0
 8004ade:	db7e      	blt.n	8004bde <quorem+0x10c>
 8004ae0:	3c01      	subs	r4, #1
 8004ae2:	f101 0814 	add.w	r8, r1, #20
 8004ae6:	00a3      	lsls	r3, r4, #2
 8004ae8:	f100 0514 	add.w	r5, r0, #20
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004afc:	3301      	adds	r3, #1
 8004afe:	429a      	cmp	r2, r3
 8004b00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b04:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b08:	d32e      	bcc.n	8004b68 <quorem+0x96>
 8004b0a:	f04f 0a00 	mov.w	sl, #0
 8004b0e:	46c4      	mov	ip, r8
 8004b10:	46ae      	mov	lr, r5
 8004b12:	46d3      	mov	fp, sl
 8004b14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b18:	b298      	uxth	r0, r3
 8004b1a:	fb06 a000 	mla	r0, r6, r0, sl
 8004b1e:	0c02      	lsrs	r2, r0, #16
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	fb06 2303 	mla	r3, r6, r3, r2
 8004b26:	f8de 2000 	ldr.w	r2, [lr]
 8004b2a:	b280      	uxth	r0, r0
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	1a12      	subs	r2, r2, r0
 8004b30:	445a      	add	r2, fp
 8004b32:	f8de 0000 	ldr.w	r0, [lr]
 8004b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004b40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004b44:	b292      	uxth	r2, r2
 8004b46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b4a:	45e1      	cmp	r9, ip
 8004b4c:	f84e 2b04 	str.w	r2, [lr], #4
 8004b50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004b54:	d2de      	bcs.n	8004b14 <quorem+0x42>
 8004b56:	9b00      	ldr	r3, [sp, #0]
 8004b58:	58eb      	ldr	r3, [r5, r3]
 8004b5a:	b92b      	cbnz	r3, 8004b68 <quorem+0x96>
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	3b04      	subs	r3, #4
 8004b60:	429d      	cmp	r5, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	d32f      	bcc.n	8004bc6 <quorem+0xf4>
 8004b66:	613c      	str	r4, [r7, #16]
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f001 f90d 	bl	8005d88 <__mcmp>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	db25      	blt.n	8004bbe <quorem+0xec>
 8004b72:	4629      	mov	r1, r5
 8004b74:	2000      	movs	r0, #0
 8004b76:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b7a:	f8d1 c000 	ldr.w	ip, [r1]
 8004b7e:	fa1f fe82 	uxth.w	lr, r2
 8004b82:	fa1f f38c 	uxth.w	r3, ip
 8004b86:	eba3 030e 	sub.w	r3, r3, lr
 8004b8a:	4403      	add	r3, r0
 8004b8c:	0c12      	lsrs	r2, r2, #16
 8004b8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004b92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b9c:	45c1      	cmp	r9, r8
 8004b9e:	f841 3b04 	str.w	r3, [r1], #4
 8004ba2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ba6:	d2e6      	bcs.n	8004b76 <quorem+0xa4>
 8004ba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bb0:	b922      	cbnz	r2, 8004bbc <quorem+0xea>
 8004bb2:	3b04      	subs	r3, #4
 8004bb4:	429d      	cmp	r5, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	d30b      	bcc.n	8004bd2 <quorem+0x100>
 8004bba:	613c      	str	r4, [r7, #16]
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	b003      	add	sp, #12
 8004bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	3b04      	subs	r3, #4
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	d1cb      	bne.n	8004b66 <quorem+0x94>
 8004bce:	3c01      	subs	r4, #1
 8004bd0:	e7c6      	b.n	8004b60 <quorem+0x8e>
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	3b04      	subs	r3, #4
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	d1ef      	bne.n	8004bba <quorem+0xe8>
 8004bda:	3c01      	subs	r4, #1
 8004bdc:	e7ea      	b.n	8004bb4 <quorem+0xe2>
 8004bde:	2000      	movs	r0, #0
 8004be0:	e7ee      	b.n	8004bc0 <quorem+0xee>
 8004be2:	0000      	movs	r0, r0
 8004be4:	0000      	movs	r0, r0
	...

08004be8 <_dtoa_r>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	ed2d 8b02 	vpush	{d8}
 8004bf0:	69c7      	ldr	r7, [r0, #28]
 8004bf2:	b091      	sub	sp, #68	@ 0x44
 8004bf4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004bf8:	ec55 4b10 	vmov	r4, r5, d0
 8004bfc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8004bfe:	9107      	str	r1, [sp, #28]
 8004c00:	4681      	mov	r9, r0
 8004c02:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c04:	930d      	str	r3, [sp, #52]	@ 0x34
 8004c06:	b97f      	cbnz	r7, 8004c28 <_dtoa_r+0x40>
 8004c08:	2010      	movs	r0, #16
 8004c0a:	f000 fd8d 	bl	8005728 <malloc>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	f8c9 001c 	str.w	r0, [r9, #28]
 8004c14:	b920      	cbnz	r0, 8004c20 <_dtoa_r+0x38>
 8004c16:	4ba0      	ldr	r3, [pc, #640]	@ (8004e98 <_dtoa_r+0x2b0>)
 8004c18:	21ef      	movs	r1, #239	@ 0xef
 8004c1a:	48a0      	ldr	r0, [pc, #640]	@ (8004e9c <_dtoa_r+0x2b4>)
 8004c1c:	f001 fa86 	bl	800612c <__assert_func>
 8004c20:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004c24:	6007      	str	r7, [r0, #0]
 8004c26:	60c7      	str	r7, [r0, #12]
 8004c28:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	b159      	cbz	r1, 8004c48 <_dtoa_r+0x60>
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	604a      	str	r2, [r1, #4]
 8004c34:	2301      	movs	r3, #1
 8004c36:	4093      	lsls	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
 8004c3a:	4648      	mov	r0, r9
 8004c3c:	f000 fe6a 	bl	8005914 <_Bfree>
 8004c40:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	1e2b      	subs	r3, r5, #0
 8004c4a:	bfbb      	ittet	lt
 8004c4c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004c50:	9303      	strlt	r3, [sp, #12]
 8004c52:	2300      	movge	r3, #0
 8004c54:	2201      	movlt	r2, #1
 8004c56:	bfac      	ite	ge
 8004c58:	6033      	strge	r3, [r6, #0]
 8004c5a:	6032      	strlt	r2, [r6, #0]
 8004c5c:	4b90      	ldr	r3, [pc, #576]	@ (8004ea0 <_dtoa_r+0x2b8>)
 8004c5e:	9e03      	ldr	r6, [sp, #12]
 8004c60:	43b3      	bics	r3, r6
 8004c62:	d110      	bne.n	8004c86 <_dtoa_r+0x9e>
 8004c64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004c66:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8004c70:	4323      	orrs	r3, r4
 8004c72:	f000 84de 	beq.w	8005632 <_dtoa_r+0xa4a>
 8004c76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004c78:	4f8a      	ldr	r7, [pc, #552]	@ (8004ea4 <_dtoa_r+0x2bc>)
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 84e0 	beq.w	8005640 <_dtoa_r+0xa58>
 8004c80:	1cfb      	adds	r3, r7, #3
 8004c82:	f000 bcdb 	b.w	800563c <_dtoa_r+0xa54>
 8004c86:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004c8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c92:	d10a      	bne.n	8004caa <_dtoa_r+0xc2>
 8004c94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004c96:	2301      	movs	r3, #1
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004c9c:	b113      	cbz	r3, 8004ca4 <_dtoa_r+0xbc>
 8004c9e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8004ca0:	4b81      	ldr	r3, [pc, #516]	@ (8004ea8 <_dtoa_r+0x2c0>)
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	4f81      	ldr	r7, [pc, #516]	@ (8004eac <_dtoa_r+0x2c4>)
 8004ca6:	f000 bccb 	b.w	8005640 <_dtoa_r+0xa58>
 8004caa:	aa0e      	add	r2, sp, #56	@ 0x38
 8004cac:	a90f      	add	r1, sp, #60	@ 0x3c
 8004cae:	4648      	mov	r0, r9
 8004cb0:	eeb0 0b48 	vmov.f64	d0, d8
 8004cb4:	f001 f918 	bl	8005ee8 <__d2b>
 8004cb8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8004cbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004cbe:	9001      	str	r0, [sp, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d045      	beq.n	8004d50 <_dtoa_r+0x168>
 8004cc4:	eeb0 7b48 	vmov.f64	d7, d8
 8004cc8:	ee18 1a90 	vmov	r1, s17
 8004ccc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004cd0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8004cd4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8004cd8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004cdc:	2500      	movs	r5, #0
 8004cde:	ee07 1a90 	vmov	s15, r1
 8004ce2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8004ce6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004e80 <_dtoa_r+0x298>
 8004cea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004cee:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8004e88 <_dtoa_r+0x2a0>
 8004cf2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004cf6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8004e90 <_dtoa_r+0x2a8>
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004d02:	eeb0 7b46 	vmov.f64	d7, d6
 8004d06:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004d0a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004d0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d16:	ee16 8a90 	vmov	r8, s13
 8004d1a:	d508      	bpl.n	8004d2e <_dtoa_r+0x146>
 8004d1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004d20:	eeb4 6b47 	vcmp.f64	d6, d7
 8004d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d28:	bf18      	it	ne
 8004d2a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8004d2e:	f1b8 0f16 	cmp.w	r8, #22
 8004d32:	d82b      	bhi.n	8004d8c <_dtoa_r+0x1a4>
 8004d34:	495e      	ldr	r1, [pc, #376]	@ (8004eb0 <_dtoa_r+0x2c8>)
 8004d36:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8004d3a:	ed91 7b00 	vldr	d7, [r1]
 8004d3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d46:	d501      	bpl.n	8004d4c <_dtoa_r+0x164>
 8004d48:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	e01e      	b.n	8004d8e <_dtoa_r+0x1a6>
 8004d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d52:	4413      	add	r3, r2
 8004d54:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8004d58:	2920      	cmp	r1, #32
 8004d5a:	bfc1      	itttt	gt
 8004d5c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8004d60:	408e      	lslgt	r6, r1
 8004d62:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8004d66:	fa24 f101 	lsrgt.w	r1, r4, r1
 8004d6a:	bfd6      	itet	le
 8004d6c:	f1c1 0120 	rsble	r1, r1, #32
 8004d70:	4331      	orrgt	r1, r6
 8004d72:	fa04 f101 	lslle.w	r1, r4, r1
 8004d76:	ee07 1a90 	vmov	s15, r1
 8004d7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	ee17 1a90 	vmov	r1, s15
 8004d84:	2501      	movs	r5, #1
 8004d86:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8004d8a:	e7a8      	b.n	8004cde <_dtoa_r+0xf6>
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	1e53      	subs	r3, r2, #1
 8004d92:	9306      	str	r3, [sp, #24]
 8004d94:	bf45      	ittet	mi
 8004d96:	f1c2 0301 	rsbmi	r3, r2, #1
 8004d9a:	9305      	strmi	r3, [sp, #20]
 8004d9c:	2300      	movpl	r3, #0
 8004d9e:	2300      	movmi	r3, #0
 8004da0:	bf4c      	ite	mi
 8004da2:	9306      	strmi	r3, [sp, #24]
 8004da4:	9305      	strpl	r3, [sp, #20]
 8004da6:	f1b8 0f00 	cmp.w	r8, #0
 8004daa:	910c      	str	r1, [sp, #48]	@ 0x30
 8004dac:	db18      	blt.n	8004de0 <_dtoa_r+0x1f8>
 8004dae:	9b06      	ldr	r3, [sp, #24]
 8004db0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004db4:	4443      	add	r3, r8
 8004db6:	9306      	str	r3, [sp, #24]
 8004db8:	2300      	movs	r3, #0
 8004dba:	9a07      	ldr	r2, [sp, #28]
 8004dbc:	2a09      	cmp	r2, #9
 8004dbe:	d849      	bhi.n	8004e54 <_dtoa_r+0x26c>
 8004dc0:	2a05      	cmp	r2, #5
 8004dc2:	bfc4      	itt	gt
 8004dc4:	3a04      	subgt	r2, #4
 8004dc6:	9207      	strgt	r2, [sp, #28]
 8004dc8:	9a07      	ldr	r2, [sp, #28]
 8004dca:	f1a2 0202 	sub.w	r2, r2, #2
 8004dce:	bfcc      	ite	gt
 8004dd0:	2400      	movgt	r4, #0
 8004dd2:	2401      	movle	r4, #1
 8004dd4:	2a03      	cmp	r2, #3
 8004dd6:	d848      	bhi.n	8004e6a <_dtoa_r+0x282>
 8004dd8:	e8df f002 	tbb	[pc, r2]
 8004ddc:	3a2c2e0b 	.word	0x3a2c2e0b
 8004de0:	9b05      	ldr	r3, [sp, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	eba3 0308 	sub.w	r3, r3, r8
 8004de8:	9305      	str	r3, [sp, #20]
 8004dea:	920a      	str	r2, [sp, #40]	@ 0x28
 8004dec:	f1c8 0300 	rsb	r3, r8, #0
 8004df0:	e7e3      	b.n	8004dba <_dtoa_r+0x1d2>
 8004df2:	2200      	movs	r2, #0
 8004df4:	9208      	str	r2, [sp, #32]
 8004df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	dc39      	bgt.n	8004e70 <_dtoa_r+0x288>
 8004dfc:	f04f 0b01 	mov.w	fp, #1
 8004e00:	46da      	mov	sl, fp
 8004e02:	465a      	mov	r2, fp
 8004e04:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8004e08:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	2004      	movs	r0, #4
 8004e10:	f100 0614 	add.w	r6, r0, #20
 8004e14:	4296      	cmp	r6, r2
 8004e16:	d930      	bls.n	8004e7a <_dtoa_r+0x292>
 8004e18:	6079      	str	r1, [r7, #4]
 8004e1a:	4648      	mov	r0, r9
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	f000 fd39 	bl	8005894 <_Balloc>
 8004e22:	9b04      	ldr	r3, [sp, #16]
 8004e24:	4607      	mov	r7, r0
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d146      	bne.n	8004eb8 <_dtoa_r+0x2d0>
 8004e2a:	4b22      	ldr	r3, [pc, #136]	@ (8004eb4 <_dtoa_r+0x2cc>)
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004e32:	e6f2      	b.n	8004c1a <_dtoa_r+0x32>
 8004e34:	2201      	movs	r2, #1
 8004e36:	e7dd      	b.n	8004df4 <_dtoa_r+0x20c>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	9208      	str	r2, [sp, #32]
 8004e3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e3e:	eb08 0b02 	add.w	fp, r8, r2
 8004e42:	f10b 0a01 	add.w	sl, fp, #1
 8004e46:	4652      	mov	r2, sl
 8004e48:	2a01      	cmp	r2, #1
 8004e4a:	bfb8      	it	lt
 8004e4c:	2201      	movlt	r2, #1
 8004e4e:	e7db      	b.n	8004e08 <_dtoa_r+0x220>
 8004e50:	2201      	movs	r2, #1
 8004e52:	e7f2      	b.n	8004e3a <_dtoa_r+0x252>
 8004e54:	2401      	movs	r4, #1
 8004e56:	2200      	movs	r2, #0
 8004e58:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8004e5c:	f04f 3bff 	mov.w	fp, #4294967295
 8004e60:	2100      	movs	r1, #0
 8004e62:	46da      	mov	sl, fp
 8004e64:	2212      	movs	r2, #18
 8004e66:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e68:	e7ce      	b.n	8004e08 <_dtoa_r+0x220>
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	9208      	str	r2, [sp, #32]
 8004e6e:	e7f5      	b.n	8004e5c <_dtoa_r+0x274>
 8004e70:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8004e74:	46da      	mov	sl, fp
 8004e76:	465a      	mov	r2, fp
 8004e78:	e7c6      	b.n	8004e08 <_dtoa_r+0x220>
 8004e7a:	3101      	adds	r1, #1
 8004e7c:	0040      	lsls	r0, r0, #1
 8004e7e:	e7c7      	b.n	8004e10 <_dtoa_r+0x228>
 8004e80:	636f4361 	.word	0x636f4361
 8004e84:	3fd287a7 	.word	0x3fd287a7
 8004e88:	8b60c8b3 	.word	0x8b60c8b3
 8004e8c:	3fc68a28 	.word	0x3fc68a28
 8004e90:	509f79fb 	.word	0x509f79fb
 8004e94:	3fd34413 	.word	0x3fd34413
 8004e98:	080067b5 	.word	0x080067b5
 8004e9c:	080067cc 	.word	0x080067cc
 8004ea0:	7ff00000 	.word	0x7ff00000
 8004ea4:	080067b1 	.word	0x080067b1
 8004ea8:	08006785 	.word	0x08006785
 8004eac:	08006784 	.word	0x08006784
 8004eb0:	080068c8 	.word	0x080068c8
 8004eb4:	08006824 	.word	0x08006824
 8004eb8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8004ebc:	f1ba 0f0e 	cmp.w	sl, #14
 8004ec0:	6010      	str	r0, [r2, #0]
 8004ec2:	d86f      	bhi.n	8004fa4 <_dtoa_r+0x3bc>
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	d06d      	beq.n	8004fa4 <_dtoa_r+0x3bc>
 8004ec8:	f1b8 0f00 	cmp.w	r8, #0
 8004ecc:	f340 80c2 	ble.w	8005054 <_dtoa_r+0x46c>
 8004ed0:	4aca      	ldr	r2, [pc, #808]	@ (80051fc <_dtoa_r+0x614>)
 8004ed2:	f008 010f 	and.w	r1, r8, #15
 8004ed6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004eda:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8004ede:	ed92 7b00 	vldr	d7, [r2]
 8004ee2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8004ee6:	f000 80a9 	beq.w	800503c <_dtoa_r+0x454>
 8004eea:	4ac5      	ldr	r2, [pc, #788]	@ (8005200 <_dtoa_r+0x618>)
 8004eec:	ed92 6b08 	vldr	d6, [r2, #32]
 8004ef0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004ef4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004ef8:	f001 010f 	and.w	r1, r1, #15
 8004efc:	2203      	movs	r2, #3
 8004efe:	48c0      	ldr	r0, [pc, #768]	@ (8005200 <_dtoa_r+0x618>)
 8004f00:	2900      	cmp	r1, #0
 8004f02:	f040 809d 	bne.w	8005040 <_dtoa_r+0x458>
 8004f06:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004f0a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004f0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004f14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	f000 80c1 	beq.w	80050a0 <_dtoa_r+0x4b8>
 8004f1e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004f22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2a:	f140 80b9 	bpl.w	80050a0 <_dtoa_r+0x4b8>
 8004f2e:	f1ba 0f00 	cmp.w	sl, #0
 8004f32:	f000 80b5 	beq.w	80050a0 <_dtoa_r+0x4b8>
 8004f36:	f1bb 0f00 	cmp.w	fp, #0
 8004f3a:	dd31      	ble.n	8004fa0 <_dtoa_r+0x3b8>
 8004f3c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8004f40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f48:	f108 31ff 	add.w	r1, r8, #4294967295
 8004f4c:	9104      	str	r1, [sp, #16]
 8004f4e:	3201      	adds	r2, #1
 8004f50:	465c      	mov	r4, fp
 8004f52:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004f56:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8004f5a:	ee07 2a90 	vmov	s15, r2
 8004f5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f62:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004f66:	ee15 2a90 	vmov	r2, s11
 8004f6a:	ec51 0b15 	vmov	r0, r1, d5
 8004f6e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8004f72:	2c00      	cmp	r4, #0
 8004f74:	f040 8098 	bne.w	80050a8 <_dtoa_r+0x4c0>
 8004f78:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8004f7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f80:	ec41 0b17 	vmov	d7, r0, r1
 8004f84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8c:	f300 8261 	bgt.w	8005452 <_dtoa_r+0x86a>
 8004f90:	eeb1 7b47 	vneg.f64	d7, d7
 8004f94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9c:	f100 80f5 	bmi.w	800518a <_dtoa_r+0x5a2>
 8004fa0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004fa4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	f2c0 812c 	blt.w	8005204 <_dtoa_r+0x61c>
 8004fac:	f1b8 0f0e 	cmp.w	r8, #14
 8004fb0:	f300 8128 	bgt.w	8005204 <_dtoa_r+0x61c>
 8004fb4:	4b91      	ldr	r3, [pc, #580]	@ (80051fc <_dtoa_r+0x614>)
 8004fb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004fba:	ed93 6b00 	vldr	d6, [r3]
 8004fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	da03      	bge.n	8004fcc <_dtoa_r+0x3e4>
 8004fc4:	f1ba 0f00 	cmp.w	sl, #0
 8004fc8:	f340 80d2 	ble.w	8005170 <_dtoa_r+0x588>
 8004fcc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8004fd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fd4:	463e      	mov	r6, r7
 8004fd6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004fda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004fde:	ee15 3a10 	vmov	r3, s10
 8004fe2:	3330      	adds	r3, #48	@ 0x30
 8004fe4:	f806 3b01 	strb.w	r3, [r6], #1
 8004fe8:	1bf3      	subs	r3, r6, r7
 8004fea:	459a      	cmp	sl, r3
 8004fec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004ff0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004ff4:	f040 80f8 	bne.w	80051e8 <_dtoa_r+0x600>
 8004ff8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ffc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005004:	f300 80dd 	bgt.w	80051c2 <_dtoa_r+0x5da>
 8005008:	eeb4 7b46 	vcmp.f64	d7, d6
 800500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005010:	d104      	bne.n	800501c <_dtoa_r+0x434>
 8005012:	ee15 3a10 	vmov	r3, s10
 8005016:	07db      	lsls	r3, r3, #31
 8005018:	f100 80d3 	bmi.w	80051c2 <_dtoa_r+0x5da>
 800501c:	9901      	ldr	r1, [sp, #4]
 800501e:	4648      	mov	r0, r9
 8005020:	f000 fc78 	bl	8005914 <_Bfree>
 8005024:	2300      	movs	r3, #0
 8005026:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005028:	7033      	strb	r3, [r6, #0]
 800502a:	f108 0301 	add.w	r3, r8, #1
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8304 	beq.w	8005640 <_dtoa_r+0xa58>
 8005038:	601e      	str	r6, [r3, #0]
 800503a:	e301      	b.n	8005640 <_dtoa_r+0xa58>
 800503c:	2202      	movs	r2, #2
 800503e:	e75e      	b.n	8004efe <_dtoa_r+0x316>
 8005040:	07cc      	lsls	r4, r1, #31
 8005042:	d504      	bpl.n	800504e <_dtoa_r+0x466>
 8005044:	ed90 6b00 	vldr	d6, [r0]
 8005048:	3201      	adds	r2, #1
 800504a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800504e:	1049      	asrs	r1, r1, #1
 8005050:	3008      	adds	r0, #8
 8005052:	e755      	b.n	8004f00 <_dtoa_r+0x318>
 8005054:	d022      	beq.n	800509c <_dtoa_r+0x4b4>
 8005056:	f1c8 0100 	rsb	r1, r8, #0
 800505a:	4a68      	ldr	r2, [pc, #416]	@ (80051fc <_dtoa_r+0x614>)
 800505c:	f001 000f 	and.w	r0, r1, #15
 8005060:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005064:	ed92 7b00 	vldr	d7, [r2]
 8005068:	ee28 7b07 	vmul.f64	d7, d8, d7
 800506c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005070:	4863      	ldr	r0, [pc, #396]	@ (8005200 <_dtoa_r+0x618>)
 8005072:	1109      	asrs	r1, r1, #4
 8005074:	2400      	movs	r4, #0
 8005076:	2202      	movs	r2, #2
 8005078:	b929      	cbnz	r1, 8005086 <_dtoa_r+0x49e>
 800507a:	2c00      	cmp	r4, #0
 800507c:	f43f af49 	beq.w	8004f12 <_dtoa_r+0x32a>
 8005080:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005084:	e745      	b.n	8004f12 <_dtoa_r+0x32a>
 8005086:	07ce      	lsls	r6, r1, #31
 8005088:	d505      	bpl.n	8005096 <_dtoa_r+0x4ae>
 800508a:	ed90 6b00 	vldr	d6, [r0]
 800508e:	3201      	adds	r2, #1
 8005090:	2401      	movs	r4, #1
 8005092:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005096:	1049      	asrs	r1, r1, #1
 8005098:	3008      	adds	r0, #8
 800509a:	e7ed      	b.n	8005078 <_dtoa_r+0x490>
 800509c:	2202      	movs	r2, #2
 800509e:	e738      	b.n	8004f12 <_dtoa_r+0x32a>
 80050a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80050a4:	4654      	mov	r4, sl
 80050a6:	e754      	b.n	8004f52 <_dtoa_r+0x36a>
 80050a8:	4a54      	ldr	r2, [pc, #336]	@ (80051fc <_dtoa_r+0x614>)
 80050aa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80050ae:	ed12 4b02 	vldr	d4, [r2, #-8]
 80050b2:	9a08      	ldr	r2, [sp, #32]
 80050b4:	ec41 0b17 	vmov	d7, r0, r1
 80050b8:	443c      	add	r4, r7
 80050ba:	b34a      	cbz	r2, 8005110 <_dtoa_r+0x528>
 80050bc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80050c0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80050c4:	463e      	mov	r6, r7
 80050c6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80050ca:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80050ce:	ee35 7b47 	vsub.f64	d7, d5, d7
 80050d2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80050d6:	ee14 2a90 	vmov	r2, s9
 80050da:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80050de:	3230      	adds	r2, #48	@ 0x30
 80050e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80050e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ec:	f806 2b01 	strb.w	r2, [r6], #1
 80050f0:	d438      	bmi.n	8005164 <_dtoa_r+0x57c>
 80050f2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80050f6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80050fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fe:	d462      	bmi.n	80051c6 <_dtoa_r+0x5de>
 8005100:	42a6      	cmp	r6, r4
 8005102:	f43f af4d 	beq.w	8004fa0 <_dtoa_r+0x3b8>
 8005106:	ee27 7b03 	vmul.f64	d7, d7, d3
 800510a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800510e:	e7e0      	b.n	80050d2 <_dtoa_r+0x4ea>
 8005110:	4621      	mov	r1, r4
 8005112:	463e      	mov	r6, r7
 8005114:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005118:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800511c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005120:	ee14 2a90 	vmov	r2, s9
 8005124:	3230      	adds	r2, #48	@ 0x30
 8005126:	f806 2b01 	strb.w	r2, [r6], #1
 800512a:	42a6      	cmp	r6, r4
 800512c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005130:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005134:	d119      	bne.n	800516a <_dtoa_r+0x582>
 8005136:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800513a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800513e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005146:	dc3e      	bgt.n	80051c6 <_dtoa_r+0x5de>
 8005148:	ee35 5b47 	vsub.f64	d5, d5, d7
 800514c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005154:	f57f af24 	bpl.w	8004fa0 <_dtoa_r+0x3b8>
 8005158:	460e      	mov	r6, r1
 800515a:	3901      	subs	r1, #1
 800515c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005160:	2b30      	cmp	r3, #48	@ 0x30
 8005162:	d0f9      	beq.n	8005158 <_dtoa_r+0x570>
 8005164:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005168:	e758      	b.n	800501c <_dtoa_r+0x434>
 800516a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800516e:	e7d5      	b.n	800511c <_dtoa_r+0x534>
 8005170:	d10b      	bne.n	800518a <_dtoa_r+0x5a2>
 8005172:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005176:	ee26 6b07 	vmul.f64	d6, d6, d7
 800517a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800517e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005186:	f2c0 8161 	blt.w	800544c <_dtoa_r+0x864>
 800518a:	2400      	movs	r4, #0
 800518c:	4625      	mov	r5, r4
 800518e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005190:	43db      	mvns	r3, r3
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	463e      	mov	r6, r7
 8005196:	f04f 0800 	mov.w	r8, #0
 800519a:	4621      	mov	r1, r4
 800519c:	4648      	mov	r0, r9
 800519e:	f000 fbb9 	bl	8005914 <_Bfree>
 80051a2:	2d00      	cmp	r5, #0
 80051a4:	d0de      	beq.n	8005164 <_dtoa_r+0x57c>
 80051a6:	f1b8 0f00 	cmp.w	r8, #0
 80051aa:	d005      	beq.n	80051b8 <_dtoa_r+0x5d0>
 80051ac:	45a8      	cmp	r8, r5
 80051ae:	d003      	beq.n	80051b8 <_dtoa_r+0x5d0>
 80051b0:	4641      	mov	r1, r8
 80051b2:	4648      	mov	r0, r9
 80051b4:	f000 fbae 	bl	8005914 <_Bfree>
 80051b8:	4629      	mov	r1, r5
 80051ba:	4648      	mov	r0, r9
 80051bc:	f000 fbaa 	bl	8005914 <_Bfree>
 80051c0:	e7d0      	b.n	8005164 <_dtoa_r+0x57c>
 80051c2:	f8cd 8010 	str.w	r8, [sp, #16]
 80051c6:	4633      	mov	r3, r6
 80051c8:	461e      	mov	r6, r3
 80051ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051ce:	2a39      	cmp	r2, #57	@ 0x39
 80051d0:	d106      	bne.n	80051e0 <_dtoa_r+0x5f8>
 80051d2:	429f      	cmp	r7, r3
 80051d4:	d1f8      	bne.n	80051c8 <_dtoa_r+0x5e0>
 80051d6:	9a04      	ldr	r2, [sp, #16]
 80051d8:	3201      	adds	r2, #1
 80051da:	9204      	str	r2, [sp, #16]
 80051dc:	2230      	movs	r2, #48	@ 0x30
 80051de:	703a      	strb	r2, [r7, #0]
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	3201      	adds	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e7bd      	b.n	8005164 <_dtoa_r+0x57c>
 80051e8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80051ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80051f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f4:	f47f aeef 	bne.w	8004fd6 <_dtoa_r+0x3ee>
 80051f8:	e710      	b.n	800501c <_dtoa_r+0x434>
 80051fa:	bf00      	nop
 80051fc:	080068c8 	.word	0x080068c8
 8005200:	080068a0 	.word	0x080068a0
 8005204:	9908      	ldr	r1, [sp, #32]
 8005206:	2900      	cmp	r1, #0
 8005208:	f000 80e3 	beq.w	80053d2 <_dtoa_r+0x7ea>
 800520c:	9907      	ldr	r1, [sp, #28]
 800520e:	2901      	cmp	r1, #1
 8005210:	f300 80c8 	bgt.w	80053a4 <_dtoa_r+0x7bc>
 8005214:	2d00      	cmp	r5, #0
 8005216:	f000 80c1 	beq.w	800539c <_dtoa_r+0x7b4>
 800521a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800521e:	9e05      	ldr	r6, [sp, #20]
 8005220:	461c      	mov	r4, r3
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	9b05      	ldr	r3, [sp, #20]
 8005226:	4413      	add	r3, r2
 8005228:	9305      	str	r3, [sp, #20]
 800522a:	9b06      	ldr	r3, [sp, #24]
 800522c:	2101      	movs	r1, #1
 800522e:	4413      	add	r3, r2
 8005230:	4648      	mov	r0, r9
 8005232:	9306      	str	r3, [sp, #24]
 8005234:	f000 fc22 	bl	8005a7c <__i2b>
 8005238:	9b04      	ldr	r3, [sp, #16]
 800523a:	4605      	mov	r5, r0
 800523c:	b166      	cbz	r6, 8005258 <_dtoa_r+0x670>
 800523e:	9a06      	ldr	r2, [sp, #24]
 8005240:	2a00      	cmp	r2, #0
 8005242:	dd09      	ble.n	8005258 <_dtoa_r+0x670>
 8005244:	42b2      	cmp	r2, r6
 8005246:	9905      	ldr	r1, [sp, #20]
 8005248:	bfa8      	it	ge
 800524a:	4632      	movge	r2, r6
 800524c:	1a89      	subs	r1, r1, r2
 800524e:	9105      	str	r1, [sp, #20]
 8005250:	9906      	ldr	r1, [sp, #24]
 8005252:	1ab6      	subs	r6, r6, r2
 8005254:	1a8a      	subs	r2, r1, r2
 8005256:	9206      	str	r2, [sp, #24]
 8005258:	b1fb      	cbz	r3, 800529a <_dtoa_r+0x6b2>
 800525a:	9a08      	ldr	r2, [sp, #32]
 800525c:	2a00      	cmp	r2, #0
 800525e:	f000 80bc 	beq.w	80053da <_dtoa_r+0x7f2>
 8005262:	b19c      	cbz	r4, 800528c <_dtoa_r+0x6a4>
 8005264:	4629      	mov	r1, r5
 8005266:	4622      	mov	r2, r4
 8005268:	4648      	mov	r0, r9
 800526a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800526c:	f000 fcc6 	bl	8005bfc <__pow5mult>
 8005270:	9a01      	ldr	r2, [sp, #4]
 8005272:	4601      	mov	r1, r0
 8005274:	4605      	mov	r5, r0
 8005276:	4648      	mov	r0, r9
 8005278:	f000 fc16 	bl	8005aa8 <__multiply>
 800527c:	9901      	ldr	r1, [sp, #4]
 800527e:	9004      	str	r0, [sp, #16]
 8005280:	4648      	mov	r0, r9
 8005282:	f000 fb47 	bl	8005914 <_Bfree>
 8005286:	9a04      	ldr	r2, [sp, #16]
 8005288:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800528a:	9201      	str	r2, [sp, #4]
 800528c:	1b1a      	subs	r2, r3, r4
 800528e:	d004      	beq.n	800529a <_dtoa_r+0x6b2>
 8005290:	9901      	ldr	r1, [sp, #4]
 8005292:	4648      	mov	r0, r9
 8005294:	f000 fcb2 	bl	8005bfc <__pow5mult>
 8005298:	9001      	str	r0, [sp, #4]
 800529a:	2101      	movs	r1, #1
 800529c:	4648      	mov	r0, r9
 800529e:	f000 fbed 	bl	8005a7c <__i2b>
 80052a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052a4:	4604      	mov	r4, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 81d0 	beq.w	800564c <_dtoa_r+0xa64>
 80052ac:	461a      	mov	r2, r3
 80052ae:	4601      	mov	r1, r0
 80052b0:	4648      	mov	r0, r9
 80052b2:	f000 fca3 	bl	8005bfc <__pow5mult>
 80052b6:	9b07      	ldr	r3, [sp, #28]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	4604      	mov	r4, r0
 80052bc:	f300 8095 	bgt.w	80053ea <_dtoa_r+0x802>
 80052c0:	9b02      	ldr	r3, [sp, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 808b 	bne.w	80053de <_dtoa_r+0x7f6>
 80052c8:	9b03      	ldr	r3, [sp, #12]
 80052ca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	f040 8087 	bne.w	80053e2 <_dtoa_r+0x7fa>
 80052d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052d8:	0d12      	lsrs	r2, r2, #20
 80052da:	0512      	lsls	r2, r2, #20
 80052dc:	2a00      	cmp	r2, #0
 80052de:	f000 8082 	beq.w	80053e6 <_dtoa_r+0x7fe>
 80052e2:	9b05      	ldr	r3, [sp, #20]
 80052e4:	3301      	adds	r3, #1
 80052e6:	9305      	str	r3, [sp, #20]
 80052e8:	9b06      	ldr	r3, [sp, #24]
 80052ea:	3301      	adds	r3, #1
 80052ec:	9306      	str	r3, [sp, #24]
 80052ee:	2301      	movs	r3, #1
 80052f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 81af 	beq.w	8005658 <_dtoa_r+0xa70>
 80052fa:	6922      	ldr	r2, [r4, #16]
 80052fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005300:	6910      	ldr	r0, [r2, #16]
 8005302:	f000 fb6f 	bl	80059e4 <__hi0bits>
 8005306:	f1c0 0020 	rsb	r0, r0, #32
 800530a:	9b06      	ldr	r3, [sp, #24]
 800530c:	4418      	add	r0, r3
 800530e:	f010 001f 	ands.w	r0, r0, #31
 8005312:	d076      	beq.n	8005402 <_dtoa_r+0x81a>
 8005314:	f1c0 0220 	rsb	r2, r0, #32
 8005318:	2a04      	cmp	r2, #4
 800531a:	dd69      	ble.n	80053f0 <_dtoa_r+0x808>
 800531c:	9b05      	ldr	r3, [sp, #20]
 800531e:	f1c0 001c 	rsb	r0, r0, #28
 8005322:	4403      	add	r3, r0
 8005324:	9305      	str	r3, [sp, #20]
 8005326:	9b06      	ldr	r3, [sp, #24]
 8005328:	4406      	add	r6, r0
 800532a:	4403      	add	r3, r0
 800532c:	9306      	str	r3, [sp, #24]
 800532e:	9b05      	ldr	r3, [sp, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	dd05      	ble.n	8005340 <_dtoa_r+0x758>
 8005334:	9901      	ldr	r1, [sp, #4]
 8005336:	461a      	mov	r2, r3
 8005338:	4648      	mov	r0, r9
 800533a:	f000 fcb9 	bl	8005cb0 <__lshift>
 800533e:	9001      	str	r0, [sp, #4]
 8005340:	9b06      	ldr	r3, [sp, #24]
 8005342:	2b00      	cmp	r3, #0
 8005344:	dd05      	ble.n	8005352 <_dtoa_r+0x76a>
 8005346:	4621      	mov	r1, r4
 8005348:	461a      	mov	r2, r3
 800534a:	4648      	mov	r0, r9
 800534c:	f000 fcb0 	bl	8005cb0 <__lshift>
 8005350:	4604      	mov	r4, r0
 8005352:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	d056      	beq.n	8005406 <_dtoa_r+0x81e>
 8005358:	9801      	ldr	r0, [sp, #4]
 800535a:	4621      	mov	r1, r4
 800535c:	f000 fd14 	bl	8005d88 <__mcmp>
 8005360:	2800      	cmp	r0, #0
 8005362:	da50      	bge.n	8005406 <_dtoa_r+0x81e>
 8005364:	f108 33ff 	add.w	r3, r8, #4294967295
 8005368:	9304      	str	r3, [sp, #16]
 800536a:	9901      	ldr	r1, [sp, #4]
 800536c:	2300      	movs	r3, #0
 800536e:	220a      	movs	r2, #10
 8005370:	4648      	mov	r0, r9
 8005372:	f000 faf1 	bl	8005958 <__multadd>
 8005376:	9b08      	ldr	r3, [sp, #32]
 8005378:	9001      	str	r0, [sp, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 816e 	beq.w	800565c <_dtoa_r+0xa74>
 8005380:	4629      	mov	r1, r5
 8005382:	2300      	movs	r3, #0
 8005384:	220a      	movs	r2, #10
 8005386:	4648      	mov	r0, r9
 8005388:	f000 fae6 	bl	8005958 <__multadd>
 800538c:	f1bb 0f00 	cmp.w	fp, #0
 8005390:	4605      	mov	r5, r0
 8005392:	dc64      	bgt.n	800545e <_dtoa_r+0x876>
 8005394:	9b07      	ldr	r3, [sp, #28]
 8005396:	2b02      	cmp	r3, #2
 8005398:	dc3e      	bgt.n	8005418 <_dtoa_r+0x830>
 800539a:	e060      	b.n	800545e <_dtoa_r+0x876>
 800539c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800539e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80053a2:	e73c      	b.n	800521e <_dtoa_r+0x636>
 80053a4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	bfbf      	itttt	lt
 80053ac:	1ae2      	sublt	r2, r4, r3
 80053ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80053b0:	189b      	addlt	r3, r3, r2
 80053b2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80053b4:	bfae      	itee	ge
 80053b6:	1b1c      	subge	r4, r3, r4
 80053b8:	4623      	movlt	r3, r4
 80053ba:	2400      	movlt	r4, #0
 80053bc:	f1ba 0f00 	cmp.w	sl, #0
 80053c0:	bfb5      	itete	lt
 80053c2:	9a05      	ldrlt	r2, [sp, #20]
 80053c4:	9e05      	ldrge	r6, [sp, #20]
 80053c6:	eba2 060a 	sublt.w	r6, r2, sl
 80053ca:	4652      	movge	r2, sl
 80053cc:	bfb8      	it	lt
 80053ce:	2200      	movlt	r2, #0
 80053d0:	e727      	b.n	8005222 <_dtoa_r+0x63a>
 80053d2:	9e05      	ldr	r6, [sp, #20]
 80053d4:	9d08      	ldr	r5, [sp, #32]
 80053d6:	461c      	mov	r4, r3
 80053d8:	e730      	b.n	800523c <_dtoa_r+0x654>
 80053da:	461a      	mov	r2, r3
 80053dc:	e758      	b.n	8005290 <_dtoa_r+0x6a8>
 80053de:	2300      	movs	r3, #0
 80053e0:	e786      	b.n	80052f0 <_dtoa_r+0x708>
 80053e2:	9b02      	ldr	r3, [sp, #8]
 80053e4:	e784      	b.n	80052f0 <_dtoa_r+0x708>
 80053e6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80053e8:	e783      	b.n	80052f2 <_dtoa_r+0x70a>
 80053ea:	2300      	movs	r3, #0
 80053ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053ee:	e784      	b.n	80052fa <_dtoa_r+0x712>
 80053f0:	d09d      	beq.n	800532e <_dtoa_r+0x746>
 80053f2:	9b05      	ldr	r3, [sp, #20]
 80053f4:	321c      	adds	r2, #28
 80053f6:	4413      	add	r3, r2
 80053f8:	9305      	str	r3, [sp, #20]
 80053fa:	9b06      	ldr	r3, [sp, #24]
 80053fc:	4416      	add	r6, r2
 80053fe:	4413      	add	r3, r2
 8005400:	e794      	b.n	800532c <_dtoa_r+0x744>
 8005402:	4602      	mov	r2, r0
 8005404:	e7f5      	b.n	80053f2 <_dtoa_r+0x80a>
 8005406:	f1ba 0f00 	cmp.w	sl, #0
 800540a:	f8cd 8010 	str.w	r8, [sp, #16]
 800540e:	46d3      	mov	fp, sl
 8005410:	dc21      	bgt.n	8005456 <_dtoa_r+0x86e>
 8005412:	9b07      	ldr	r3, [sp, #28]
 8005414:	2b02      	cmp	r3, #2
 8005416:	dd1e      	ble.n	8005456 <_dtoa_r+0x86e>
 8005418:	f1bb 0f00 	cmp.w	fp, #0
 800541c:	f47f aeb7 	bne.w	800518e <_dtoa_r+0x5a6>
 8005420:	4621      	mov	r1, r4
 8005422:	465b      	mov	r3, fp
 8005424:	2205      	movs	r2, #5
 8005426:	4648      	mov	r0, r9
 8005428:	f000 fa96 	bl	8005958 <__multadd>
 800542c:	4601      	mov	r1, r0
 800542e:	4604      	mov	r4, r0
 8005430:	9801      	ldr	r0, [sp, #4]
 8005432:	f000 fca9 	bl	8005d88 <__mcmp>
 8005436:	2800      	cmp	r0, #0
 8005438:	f77f aea9 	ble.w	800518e <_dtoa_r+0x5a6>
 800543c:	463e      	mov	r6, r7
 800543e:	2331      	movs	r3, #49	@ 0x31
 8005440:	f806 3b01 	strb.w	r3, [r6], #1
 8005444:	9b04      	ldr	r3, [sp, #16]
 8005446:	3301      	adds	r3, #1
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	e6a4      	b.n	8005196 <_dtoa_r+0x5ae>
 800544c:	f8cd 8010 	str.w	r8, [sp, #16]
 8005450:	4654      	mov	r4, sl
 8005452:	4625      	mov	r5, r4
 8005454:	e7f2      	b.n	800543c <_dtoa_r+0x854>
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8103 	beq.w	8005664 <_dtoa_r+0xa7c>
 800545e:	2e00      	cmp	r6, #0
 8005460:	dd05      	ble.n	800546e <_dtoa_r+0x886>
 8005462:	4629      	mov	r1, r5
 8005464:	4632      	mov	r2, r6
 8005466:	4648      	mov	r0, r9
 8005468:	f000 fc22 	bl	8005cb0 <__lshift>
 800546c:	4605      	mov	r5, r0
 800546e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d058      	beq.n	8005526 <_dtoa_r+0x93e>
 8005474:	6869      	ldr	r1, [r5, #4]
 8005476:	4648      	mov	r0, r9
 8005478:	f000 fa0c 	bl	8005894 <_Balloc>
 800547c:	4606      	mov	r6, r0
 800547e:	b928      	cbnz	r0, 800548c <_dtoa_r+0x8a4>
 8005480:	4b82      	ldr	r3, [pc, #520]	@ (800568c <_dtoa_r+0xaa4>)
 8005482:	4602      	mov	r2, r0
 8005484:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005488:	f7ff bbc7 	b.w	8004c1a <_dtoa_r+0x32>
 800548c:	692a      	ldr	r2, [r5, #16]
 800548e:	3202      	adds	r2, #2
 8005490:	0092      	lsls	r2, r2, #2
 8005492:	f105 010c 	add.w	r1, r5, #12
 8005496:	300c      	adds	r0, #12
 8005498:	f000 fe3a 	bl	8006110 <memcpy>
 800549c:	2201      	movs	r2, #1
 800549e:	4631      	mov	r1, r6
 80054a0:	4648      	mov	r0, r9
 80054a2:	f000 fc05 	bl	8005cb0 <__lshift>
 80054a6:	1c7b      	adds	r3, r7, #1
 80054a8:	9305      	str	r3, [sp, #20]
 80054aa:	eb07 030b 	add.w	r3, r7, fp
 80054ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	46a8      	mov	r8, r5
 80054b8:	9308      	str	r3, [sp, #32]
 80054ba:	4605      	mov	r5, r0
 80054bc:	9b05      	ldr	r3, [sp, #20]
 80054be:	9801      	ldr	r0, [sp, #4]
 80054c0:	4621      	mov	r1, r4
 80054c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80054c6:	f7ff fb04 	bl	8004ad2 <quorem>
 80054ca:	4641      	mov	r1, r8
 80054cc:	9002      	str	r0, [sp, #8]
 80054ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80054d2:	9801      	ldr	r0, [sp, #4]
 80054d4:	f000 fc58 	bl	8005d88 <__mcmp>
 80054d8:	462a      	mov	r2, r5
 80054da:	9006      	str	r0, [sp, #24]
 80054dc:	4621      	mov	r1, r4
 80054de:	4648      	mov	r0, r9
 80054e0:	f000 fc6e 	bl	8005dc0 <__mdiff>
 80054e4:	68c2      	ldr	r2, [r0, #12]
 80054e6:	4606      	mov	r6, r0
 80054e8:	b9fa      	cbnz	r2, 800552a <_dtoa_r+0x942>
 80054ea:	4601      	mov	r1, r0
 80054ec:	9801      	ldr	r0, [sp, #4]
 80054ee:	f000 fc4b 	bl	8005d88 <__mcmp>
 80054f2:	4602      	mov	r2, r0
 80054f4:	4631      	mov	r1, r6
 80054f6:	4648      	mov	r0, r9
 80054f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80054fa:	f000 fa0b 	bl	8005914 <_Bfree>
 80054fe:	9b07      	ldr	r3, [sp, #28]
 8005500:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005502:	9e05      	ldr	r6, [sp, #20]
 8005504:	ea43 0102 	orr.w	r1, r3, r2
 8005508:	9b08      	ldr	r3, [sp, #32]
 800550a:	4319      	orrs	r1, r3
 800550c:	d10f      	bne.n	800552e <_dtoa_r+0x946>
 800550e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005512:	d028      	beq.n	8005566 <_dtoa_r+0x97e>
 8005514:	9b06      	ldr	r3, [sp, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	dd02      	ble.n	8005520 <_dtoa_r+0x938>
 800551a:	9b02      	ldr	r3, [sp, #8]
 800551c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8005520:	f88b a000 	strb.w	sl, [fp]
 8005524:	e639      	b.n	800519a <_dtoa_r+0x5b2>
 8005526:	4628      	mov	r0, r5
 8005528:	e7bd      	b.n	80054a6 <_dtoa_r+0x8be>
 800552a:	2201      	movs	r2, #1
 800552c:	e7e2      	b.n	80054f4 <_dtoa_r+0x90c>
 800552e:	9b06      	ldr	r3, [sp, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	db04      	blt.n	800553e <_dtoa_r+0x956>
 8005534:	9907      	ldr	r1, [sp, #28]
 8005536:	430b      	orrs	r3, r1
 8005538:	9908      	ldr	r1, [sp, #32]
 800553a:	430b      	orrs	r3, r1
 800553c:	d120      	bne.n	8005580 <_dtoa_r+0x998>
 800553e:	2a00      	cmp	r2, #0
 8005540:	ddee      	ble.n	8005520 <_dtoa_r+0x938>
 8005542:	9901      	ldr	r1, [sp, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	4648      	mov	r0, r9
 8005548:	f000 fbb2 	bl	8005cb0 <__lshift>
 800554c:	4621      	mov	r1, r4
 800554e:	9001      	str	r0, [sp, #4]
 8005550:	f000 fc1a 	bl	8005d88 <__mcmp>
 8005554:	2800      	cmp	r0, #0
 8005556:	dc03      	bgt.n	8005560 <_dtoa_r+0x978>
 8005558:	d1e2      	bne.n	8005520 <_dtoa_r+0x938>
 800555a:	f01a 0f01 	tst.w	sl, #1
 800555e:	d0df      	beq.n	8005520 <_dtoa_r+0x938>
 8005560:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005564:	d1d9      	bne.n	800551a <_dtoa_r+0x932>
 8005566:	2339      	movs	r3, #57	@ 0x39
 8005568:	f88b 3000 	strb.w	r3, [fp]
 800556c:	4633      	mov	r3, r6
 800556e:	461e      	mov	r6, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005576:	2a39      	cmp	r2, #57	@ 0x39
 8005578:	d053      	beq.n	8005622 <_dtoa_r+0xa3a>
 800557a:	3201      	adds	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e60c      	b.n	800519a <_dtoa_r+0x5b2>
 8005580:	2a00      	cmp	r2, #0
 8005582:	dd07      	ble.n	8005594 <_dtoa_r+0x9ac>
 8005584:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8005588:	d0ed      	beq.n	8005566 <_dtoa_r+0x97e>
 800558a:	f10a 0301 	add.w	r3, sl, #1
 800558e:	f88b 3000 	strb.w	r3, [fp]
 8005592:	e602      	b.n	800519a <_dtoa_r+0x5b2>
 8005594:	9b05      	ldr	r3, [sp, #20]
 8005596:	9a05      	ldr	r2, [sp, #20]
 8005598:	f803 ac01 	strb.w	sl, [r3, #-1]
 800559c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800559e:	4293      	cmp	r3, r2
 80055a0:	d029      	beq.n	80055f6 <_dtoa_r+0xa0e>
 80055a2:	9901      	ldr	r1, [sp, #4]
 80055a4:	2300      	movs	r3, #0
 80055a6:	220a      	movs	r2, #10
 80055a8:	4648      	mov	r0, r9
 80055aa:	f000 f9d5 	bl	8005958 <__multadd>
 80055ae:	45a8      	cmp	r8, r5
 80055b0:	9001      	str	r0, [sp, #4]
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	f04f 020a 	mov.w	r2, #10
 80055ba:	4641      	mov	r1, r8
 80055bc:	4648      	mov	r0, r9
 80055be:	d107      	bne.n	80055d0 <_dtoa_r+0x9e8>
 80055c0:	f000 f9ca 	bl	8005958 <__multadd>
 80055c4:	4680      	mov	r8, r0
 80055c6:	4605      	mov	r5, r0
 80055c8:	9b05      	ldr	r3, [sp, #20]
 80055ca:	3301      	adds	r3, #1
 80055cc:	9305      	str	r3, [sp, #20]
 80055ce:	e775      	b.n	80054bc <_dtoa_r+0x8d4>
 80055d0:	f000 f9c2 	bl	8005958 <__multadd>
 80055d4:	4629      	mov	r1, r5
 80055d6:	4680      	mov	r8, r0
 80055d8:	2300      	movs	r3, #0
 80055da:	220a      	movs	r2, #10
 80055dc:	4648      	mov	r0, r9
 80055de:	f000 f9bb 	bl	8005958 <__multadd>
 80055e2:	4605      	mov	r5, r0
 80055e4:	e7f0      	b.n	80055c8 <_dtoa_r+0x9e0>
 80055e6:	f1bb 0f00 	cmp.w	fp, #0
 80055ea:	bfcc      	ite	gt
 80055ec:	465e      	movgt	r6, fp
 80055ee:	2601      	movle	r6, #1
 80055f0:	443e      	add	r6, r7
 80055f2:	f04f 0800 	mov.w	r8, #0
 80055f6:	9901      	ldr	r1, [sp, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	4648      	mov	r0, r9
 80055fc:	f000 fb58 	bl	8005cb0 <__lshift>
 8005600:	4621      	mov	r1, r4
 8005602:	9001      	str	r0, [sp, #4]
 8005604:	f000 fbc0 	bl	8005d88 <__mcmp>
 8005608:	2800      	cmp	r0, #0
 800560a:	dcaf      	bgt.n	800556c <_dtoa_r+0x984>
 800560c:	d102      	bne.n	8005614 <_dtoa_r+0xa2c>
 800560e:	f01a 0f01 	tst.w	sl, #1
 8005612:	d1ab      	bne.n	800556c <_dtoa_r+0x984>
 8005614:	4633      	mov	r3, r6
 8005616:	461e      	mov	r6, r3
 8005618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800561c:	2a30      	cmp	r2, #48	@ 0x30
 800561e:	d0fa      	beq.n	8005616 <_dtoa_r+0xa2e>
 8005620:	e5bb      	b.n	800519a <_dtoa_r+0x5b2>
 8005622:	429f      	cmp	r7, r3
 8005624:	d1a3      	bne.n	800556e <_dtoa_r+0x986>
 8005626:	9b04      	ldr	r3, [sp, #16]
 8005628:	3301      	adds	r3, #1
 800562a:	9304      	str	r3, [sp, #16]
 800562c:	2331      	movs	r3, #49	@ 0x31
 800562e:	703b      	strb	r3, [r7, #0]
 8005630:	e5b3      	b.n	800519a <_dtoa_r+0x5b2>
 8005632:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005634:	4f16      	ldr	r7, [pc, #88]	@ (8005690 <_dtoa_r+0xaa8>)
 8005636:	b11b      	cbz	r3, 8005640 <_dtoa_r+0xa58>
 8005638:	f107 0308 	add.w	r3, r7, #8
 800563c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4638      	mov	r0, r7
 8005642:	b011      	add	sp, #68	@ 0x44
 8005644:	ecbd 8b02 	vpop	{d8}
 8005648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564c:	9b07      	ldr	r3, [sp, #28]
 800564e:	2b01      	cmp	r3, #1
 8005650:	f77f ae36 	ble.w	80052c0 <_dtoa_r+0x6d8>
 8005654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005656:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005658:	2001      	movs	r0, #1
 800565a:	e656      	b.n	800530a <_dtoa_r+0x722>
 800565c:	f1bb 0f00 	cmp.w	fp, #0
 8005660:	f77f aed7 	ble.w	8005412 <_dtoa_r+0x82a>
 8005664:	463e      	mov	r6, r7
 8005666:	9801      	ldr	r0, [sp, #4]
 8005668:	4621      	mov	r1, r4
 800566a:	f7ff fa32 	bl	8004ad2 <quorem>
 800566e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8005672:	f806 ab01 	strb.w	sl, [r6], #1
 8005676:	1bf2      	subs	r2, r6, r7
 8005678:	4593      	cmp	fp, r2
 800567a:	ddb4      	ble.n	80055e6 <_dtoa_r+0x9fe>
 800567c:	9901      	ldr	r1, [sp, #4]
 800567e:	2300      	movs	r3, #0
 8005680:	220a      	movs	r2, #10
 8005682:	4648      	mov	r0, r9
 8005684:	f000 f968 	bl	8005958 <__multadd>
 8005688:	9001      	str	r0, [sp, #4]
 800568a:	e7ec      	b.n	8005666 <_dtoa_r+0xa7e>
 800568c:	08006824 	.word	0x08006824
 8005690:	080067a8 	.word	0x080067a8

08005694 <_free_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4605      	mov	r5, r0
 8005698:	2900      	cmp	r1, #0
 800569a:	d041      	beq.n	8005720 <_free_r+0x8c>
 800569c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a0:	1f0c      	subs	r4, r1, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bfb8      	it	lt
 80056a6:	18e4      	addlt	r4, r4, r3
 80056a8:	f000 f8e8 	bl	800587c <__malloc_lock>
 80056ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005724 <_free_r+0x90>)
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	b933      	cbnz	r3, 80056c0 <_free_r+0x2c>
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	6014      	str	r4, [r2, #0]
 80056b6:	4628      	mov	r0, r5
 80056b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056bc:	f000 b8e4 	b.w	8005888 <__malloc_unlock>
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	d908      	bls.n	80056d6 <_free_r+0x42>
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	1821      	adds	r1, r4, r0
 80056c8:	428b      	cmp	r3, r1
 80056ca:	bf01      	itttt	eq
 80056cc:	6819      	ldreq	r1, [r3, #0]
 80056ce:	685b      	ldreq	r3, [r3, #4]
 80056d0:	1809      	addeq	r1, r1, r0
 80056d2:	6021      	streq	r1, [r4, #0]
 80056d4:	e7ed      	b.n	80056b2 <_free_r+0x1e>
 80056d6:	461a      	mov	r2, r3
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	b10b      	cbz	r3, 80056e0 <_free_r+0x4c>
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d9fa      	bls.n	80056d6 <_free_r+0x42>
 80056e0:	6811      	ldr	r1, [r2, #0]
 80056e2:	1850      	adds	r0, r2, r1
 80056e4:	42a0      	cmp	r0, r4
 80056e6:	d10b      	bne.n	8005700 <_free_r+0x6c>
 80056e8:	6820      	ldr	r0, [r4, #0]
 80056ea:	4401      	add	r1, r0
 80056ec:	1850      	adds	r0, r2, r1
 80056ee:	4283      	cmp	r3, r0
 80056f0:	6011      	str	r1, [r2, #0]
 80056f2:	d1e0      	bne.n	80056b6 <_free_r+0x22>
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	6053      	str	r3, [r2, #4]
 80056fa:	4408      	add	r0, r1
 80056fc:	6010      	str	r0, [r2, #0]
 80056fe:	e7da      	b.n	80056b6 <_free_r+0x22>
 8005700:	d902      	bls.n	8005708 <_free_r+0x74>
 8005702:	230c      	movs	r3, #12
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	e7d6      	b.n	80056b6 <_free_r+0x22>
 8005708:	6820      	ldr	r0, [r4, #0]
 800570a:	1821      	adds	r1, r4, r0
 800570c:	428b      	cmp	r3, r1
 800570e:	bf04      	itt	eq
 8005710:	6819      	ldreq	r1, [r3, #0]
 8005712:	685b      	ldreq	r3, [r3, #4]
 8005714:	6063      	str	r3, [r4, #4]
 8005716:	bf04      	itt	eq
 8005718:	1809      	addeq	r1, r1, r0
 800571a:	6021      	streq	r1, [r4, #0]
 800571c:	6054      	str	r4, [r2, #4]
 800571e:	e7ca      	b.n	80056b6 <_free_r+0x22>
 8005720:	bd38      	pop	{r3, r4, r5, pc}
 8005722:	bf00      	nop
 8005724:	20000520 	.word	0x20000520

08005728 <malloc>:
 8005728:	4b02      	ldr	r3, [pc, #8]	@ (8005734 <malloc+0xc>)
 800572a:	4601      	mov	r1, r0
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	f000 b825 	b.w	800577c <_malloc_r>
 8005732:	bf00      	nop
 8005734:	20000054 	.word	0x20000054

08005738 <sbrk_aligned>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4e0f      	ldr	r6, [pc, #60]	@ (8005778 <sbrk_aligned+0x40>)
 800573c:	460c      	mov	r4, r1
 800573e:	6831      	ldr	r1, [r6, #0]
 8005740:	4605      	mov	r5, r0
 8005742:	b911      	cbnz	r1, 800574a <sbrk_aligned+0x12>
 8005744:	f000 fcd4 	bl	80060f0 <_sbrk_r>
 8005748:	6030      	str	r0, [r6, #0]
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	f000 fccf 	bl	80060f0 <_sbrk_r>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	d103      	bne.n	800575e <sbrk_aligned+0x26>
 8005756:	f04f 34ff 	mov.w	r4, #4294967295
 800575a:	4620      	mov	r0, r4
 800575c:	bd70      	pop	{r4, r5, r6, pc}
 800575e:	1cc4      	adds	r4, r0, #3
 8005760:	f024 0403 	bic.w	r4, r4, #3
 8005764:	42a0      	cmp	r0, r4
 8005766:	d0f8      	beq.n	800575a <sbrk_aligned+0x22>
 8005768:	1a21      	subs	r1, r4, r0
 800576a:	4628      	mov	r0, r5
 800576c:	f000 fcc0 	bl	80060f0 <_sbrk_r>
 8005770:	3001      	adds	r0, #1
 8005772:	d1f2      	bne.n	800575a <sbrk_aligned+0x22>
 8005774:	e7ef      	b.n	8005756 <sbrk_aligned+0x1e>
 8005776:	bf00      	nop
 8005778:	2000051c 	.word	0x2000051c

0800577c <_malloc_r>:
 800577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005780:	1ccd      	adds	r5, r1, #3
 8005782:	f025 0503 	bic.w	r5, r5, #3
 8005786:	3508      	adds	r5, #8
 8005788:	2d0c      	cmp	r5, #12
 800578a:	bf38      	it	cc
 800578c:	250c      	movcc	r5, #12
 800578e:	2d00      	cmp	r5, #0
 8005790:	4606      	mov	r6, r0
 8005792:	db01      	blt.n	8005798 <_malloc_r+0x1c>
 8005794:	42a9      	cmp	r1, r5
 8005796:	d904      	bls.n	80057a2 <_malloc_r+0x26>
 8005798:	230c      	movs	r3, #12
 800579a:	6033      	str	r3, [r6, #0]
 800579c:	2000      	movs	r0, #0
 800579e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005878 <_malloc_r+0xfc>
 80057a6:	f000 f869 	bl	800587c <__malloc_lock>
 80057aa:	f8d8 3000 	ldr.w	r3, [r8]
 80057ae:	461c      	mov	r4, r3
 80057b0:	bb44      	cbnz	r4, 8005804 <_malloc_r+0x88>
 80057b2:	4629      	mov	r1, r5
 80057b4:	4630      	mov	r0, r6
 80057b6:	f7ff ffbf 	bl	8005738 <sbrk_aligned>
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	4604      	mov	r4, r0
 80057be:	d158      	bne.n	8005872 <_malloc_r+0xf6>
 80057c0:	f8d8 4000 	ldr.w	r4, [r8]
 80057c4:	4627      	mov	r7, r4
 80057c6:	2f00      	cmp	r7, #0
 80057c8:	d143      	bne.n	8005852 <_malloc_r+0xd6>
 80057ca:	2c00      	cmp	r4, #0
 80057cc:	d04b      	beq.n	8005866 <_malloc_r+0xea>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	4639      	mov	r1, r7
 80057d2:	4630      	mov	r0, r6
 80057d4:	eb04 0903 	add.w	r9, r4, r3
 80057d8:	f000 fc8a 	bl	80060f0 <_sbrk_r>
 80057dc:	4581      	cmp	r9, r0
 80057de:	d142      	bne.n	8005866 <_malloc_r+0xea>
 80057e0:	6821      	ldr	r1, [r4, #0]
 80057e2:	1a6d      	subs	r5, r5, r1
 80057e4:	4629      	mov	r1, r5
 80057e6:	4630      	mov	r0, r6
 80057e8:	f7ff ffa6 	bl	8005738 <sbrk_aligned>
 80057ec:	3001      	adds	r0, #1
 80057ee:	d03a      	beq.n	8005866 <_malloc_r+0xea>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	442b      	add	r3, r5
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	f8d8 3000 	ldr.w	r3, [r8]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	bb62      	cbnz	r2, 8005858 <_malloc_r+0xdc>
 80057fe:	f8c8 7000 	str.w	r7, [r8]
 8005802:	e00f      	b.n	8005824 <_malloc_r+0xa8>
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	1b52      	subs	r2, r2, r5
 8005808:	d420      	bmi.n	800584c <_malloc_r+0xd0>
 800580a:	2a0b      	cmp	r2, #11
 800580c:	d917      	bls.n	800583e <_malloc_r+0xc2>
 800580e:	1961      	adds	r1, r4, r5
 8005810:	42a3      	cmp	r3, r4
 8005812:	6025      	str	r5, [r4, #0]
 8005814:	bf18      	it	ne
 8005816:	6059      	strne	r1, [r3, #4]
 8005818:	6863      	ldr	r3, [r4, #4]
 800581a:	bf08      	it	eq
 800581c:	f8c8 1000 	streq.w	r1, [r8]
 8005820:	5162      	str	r2, [r4, r5]
 8005822:	604b      	str	r3, [r1, #4]
 8005824:	4630      	mov	r0, r6
 8005826:	f000 f82f 	bl	8005888 <__malloc_unlock>
 800582a:	f104 000b 	add.w	r0, r4, #11
 800582e:	1d23      	adds	r3, r4, #4
 8005830:	f020 0007 	bic.w	r0, r0, #7
 8005834:	1ac2      	subs	r2, r0, r3
 8005836:	bf1c      	itt	ne
 8005838:	1a1b      	subne	r3, r3, r0
 800583a:	50a3      	strne	r3, [r4, r2]
 800583c:	e7af      	b.n	800579e <_malloc_r+0x22>
 800583e:	6862      	ldr	r2, [r4, #4]
 8005840:	42a3      	cmp	r3, r4
 8005842:	bf0c      	ite	eq
 8005844:	f8c8 2000 	streq.w	r2, [r8]
 8005848:	605a      	strne	r2, [r3, #4]
 800584a:	e7eb      	b.n	8005824 <_malloc_r+0xa8>
 800584c:	4623      	mov	r3, r4
 800584e:	6864      	ldr	r4, [r4, #4]
 8005850:	e7ae      	b.n	80057b0 <_malloc_r+0x34>
 8005852:	463c      	mov	r4, r7
 8005854:	687f      	ldr	r7, [r7, #4]
 8005856:	e7b6      	b.n	80057c6 <_malloc_r+0x4a>
 8005858:	461a      	mov	r2, r3
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	42a3      	cmp	r3, r4
 800585e:	d1fb      	bne.n	8005858 <_malloc_r+0xdc>
 8005860:	2300      	movs	r3, #0
 8005862:	6053      	str	r3, [r2, #4]
 8005864:	e7de      	b.n	8005824 <_malloc_r+0xa8>
 8005866:	230c      	movs	r3, #12
 8005868:	6033      	str	r3, [r6, #0]
 800586a:	4630      	mov	r0, r6
 800586c:	f000 f80c 	bl	8005888 <__malloc_unlock>
 8005870:	e794      	b.n	800579c <_malloc_r+0x20>
 8005872:	6005      	str	r5, [r0, #0]
 8005874:	e7d6      	b.n	8005824 <_malloc_r+0xa8>
 8005876:	bf00      	nop
 8005878:	20000520 	.word	0x20000520

0800587c <__malloc_lock>:
 800587c:	4801      	ldr	r0, [pc, #4]	@ (8005884 <__malloc_lock+0x8>)
 800587e:	f7ff b926 	b.w	8004ace <__retarget_lock_acquire_recursive>
 8005882:	bf00      	nop
 8005884:	20000518 	.word	0x20000518

08005888 <__malloc_unlock>:
 8005888:	4801      	ldr	r0, [pc, #4]	@ (8005890 <__malloc_unlock+0x8>)
 800588a:	f7ff b921 	b.w	8004ad0 <__retarget_lock_release_recursive>
 800588e:	bf00      	nop
 8005890:	20000518 	.word	0x20000518

08005894 <_Balloc>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	69c6      	ldr	r6, [r0, #28]
 8005898:	4604      	mov	r4, r0
 800589a:	460d      	mov	r5, r1
 800589c:	b976      	cbnz	r6, 80058bc <_Balloc+0x28>
 800589e:	2010      	movs	r0, #16
 80058a0:	f7ff ff42 	bl	8005728 <malloc>
 80058a4:	4602      	mov	r2, r0
 80058a6:	61e0      	str	r0, [r4, #28]
 80058a8:	b920      	cbnz	r0, 80058b4 <_Balloc+0x20>
 80058aa:	4b18      	ldr	r3, [pc, #96]	@ (800590c <_Balloc+0x78>)
 80058ac:	4818      	ldr	r0, [pc, #96]	@ (8005910 <_Balloc+0x7c>)
 80058ae:	216b      	movs	r1, #107	@ 0x6b
 80058b0:	f000 fc3c 	bl	800612c <__assert_func>
 80058b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058b8:	6006      	str	r6, [r0, #0]
 80058ba:	60c6      	str	r6, [r0, #12]
 80058bc:	69e6      	ldr	r6, [r4, #28]
 80058be:	68f3      	ldr	r3, [r6, #12]
 80058c0:	b183      	cbz	r3, 80058e4 <_Balloc+0x50>
 80058c2:	69e3      	ldr	r3, [r4, #28]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058ca:	b9b8      	cbnz	r0, 80058fc <_Balloc+0x68>
 80058cc:	2101      	movs	r1, #1
 80058ce:	fa01 f605 	lsl.w	r6, r1, r5
 80058d2:	1d72      	adds	r2, r6, #5
 80058d4:	0092      	lsls	r2, r2, #2
 80058d6:	4620      	mov	r0, r4
 80058d8:	f000 fc46 	bl	8006168 <_calloc_r>
 80058dc:	b160      	cbz	r0, 80058f8 <_Balloc+0x64>
 80058de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058e2:	e00e      	b.n	8005902 <_Balloc+0x6e>
 80058e4:	2221      	movs	r2, #33	@ 0x21
 80058e6:	2104      	movs	r1, #4
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fc3d 	bl	8006168 <_calloc_r>
 80058ee:	69e3      	ldr	r3, [r4, #28]
 80058f0:	60f0      	str	r0, [r6, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e4      	bne.n	80058c2 <_Balloc+0x2e>
 80058f8:	2000      	movs	r0, #0
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	6802      	ldr	r2, [r0, #0]
 80058fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005902:	2300      	movs	r3, #0
 8005904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005908:	e7f7      	b.n	80058fa <_Balloc+0x66>
 800590a:	bf00      	nop
 800590c:	080067b5 	.word	0x080067b5
 8005910:	08006835 	.word	0x08006835

08005914 <_Bfree>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	69c6      	ldr	r6, [r0, #28]
 8005918:	4605      	mov	r5, r0
 800591a:	460c      	mov	r4, r1
 800591c:	b976      	cbnz	r6, 800593c <_Bfree+0x28>
 800591e:	2010      	movs	r0, #16
 8005920:	f7ff ff02 	bl	8005728 <malloc>
 8005924:	4602      	mov	r2, r0
 8005926:	61e8      	str	r0, [r5, #28]
 8005928:	b920      	cbnz	r0, 8005934 <_Bfree+0x20>
 800592a:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <_Bfree+0x3c>)
 800592c:	4809      	ldr	r0, [pc, #36]	@ (8005954 <_Bfree+0x40>)
 800592e:	218f      	movs	r1, #143	@ 0x8f
 8005930:	f000 fbfc 	bl	800612c <__assert_func>
 8005934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005938:	6006      	str	r6, [r0, #0]
 800593a:	60c6      	str	r6, [r0, #12]
 800593c:	b13c      	cbz	r4, 800594e <_Bfree+0x3a>
 800593e:	69eb      	ldr	r3, [r5, #28]
 8005940:	6862      	ldr	r2, [r4, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005948:	6021      	str	r1, [r4, #0]
 800594a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	080067b5 	.word	0x080067b5
 8005954:	08006835 	.word	0x08006835

08005958 <__multadd>:
 8005958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595c:	690d      	ldr	r5, [r1, #16]
 800595e:	4607      	mov	r7, r0
 8005960:	460c      	mov	r4, r1
 8005962:	461e      	mov	r6, r3
 8005964:	f101 0c14 	add.w	ip, r1, #20
 8005968:	2000      	movs	r0, #0
 800596a:	f8dc 3000 	ldr.w	r3, [ip]
 800596e:	b299      	uxth	r1, r3
 8005970:	fb02 6101 	mla	r1, r2, r1, r6
 8005974:	0c1e      	lsrs	r6, r3, #16
 8005976:	0c0b      	lsrs	r3, r1, #16
 8005978:	fb02 3306 	mla	r3, r2, r6, r3
 800597c:	b289      	uxth	r1, r1
 800597e:	3001      	adds	r0, #1
 8005980:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005984:	4285      	cmp	r5, r0
 8005986:	f84c 1b04 	str.w	r1, [ip], #4
 800598a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800598e:	dcec      	bgt.n	800596a <__multadd+0x12>
 8005990:	b30e      	cbz	r6, 80059d6 <__multadd+0x7e>
 8005992:	68a3      	ldr	r3, [r4, #8]
 8005994:	42ab      	cmp	r3, r5
 8005996:	dc19      	bgt.n	80059cc <__multadd+0x74>
 8005998:	6861      	ldr	r1, [r4, #4]
 800599a:	4638      	mov	r0, r7
 800599c:	3101      	adds	r1, #1
 800599e:	f7ff ff79 	bl	8005894 <_Balloc>
 80059a2:	4680      	mov	r8, r0
 80059a4:	b928      	cbnz	r0, 80059b2 <__multadd+0x5a>
 80059a6:	4602      	mov	r2, r0
 80059a8:	4b0c      	ldr	r3, [pc, #48]	@ (80059dc <__multadd+0x84>)
 80059aa:	480d      	ldr	r0, [pc, #52]	@ (80059e0 <__multadd+0x88>)
 80059ac:	21ba      	movs	r1, #186	@ 0xba
 80059ae:	f000 fbbd 	bl	800612c <__assert_func>
 80059b2:	6922      	ldr	r2, [r4, #16]
 80059b4:	3202      	adds	r2, #2
 80059b6:	f104 010c 	add.w	r1, r4, #12
 80059ba:	0092      	lsls	r2, r2, #2
 80059bc:	300c      	adds	r0, #12
 80059be:	f000 fba7 	bl	8006110 <memcpy>
 80059c2:	4621      	mov	r1, r4
 80059c4:	4638      	mov	r0, r7
 80059c6:	f7ff ffa5 	bl	8005914 <_Bfree>
 80059ca:	4644      	mov	r4, r8
 80059cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059d0:	3501      	adds	r5, #1
 80059d2:	615e      	str	r6, [r3, #20]
 80059d4:	6125      	str	r5, [r4, #16]
 80059d6:	4620      	mov	r0, r4
 80059d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059dc:	08006824 	.word	0x08006824
 80059e0:	08006835 	.word	0x08006835

080059e4 <__hi0bits>:
 80059e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80059e8:	4603      	mov	r3, r0
 80059ea:	bf36      	itet	cc
 80059ec:	0403      	lslcc	r3, r0, #16
 80059ee:	2000      	movcs	r0, #0
 80059f0:	2010      	movcc	r0, #16
 80059f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059f6:	bf3c      	itt	cc
 80059f8:	021b      	lslcc	r3, r3, #8
 80059fa:	3008      	addcc	r0, #8
 80059fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a00:	bf3c      	itt	cc
 8005a02:	011b      	lslcc	r3, r3, #4
 8005a04:	3004      	addcc	r0, #4
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0a:	bf3c      	itt	cc
 8005a0c:	009b      	lslcc	r3, r3, #2
 8005a0e:	3002      	addcc	r0, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	db05      	blt.n	8005a20 <__hi0bits+0x3c>
 8005a14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a18:	f100 0001 	add.w	r0, r0, #1
 8005a1c:	bf08      	it	eq
 8005a1e:	2020      	moveq	r0, #32
 8005a20:	4770      	bx	lr

08005a22 <__lo0bits>:
 8005a22:	6803      	ldr	r3, [r0, #0]
 8005a24:	4602      	mov	r2, r0
 8005a26:	f013 0007 	ands.w	r0, r3, #7
 8005a2a:	d00b      	beq.n	8005a44 <__lo0bits+0x22>
 8005a2c:	07d9      	lsls	r1, r3, #31
 8005a2e:	d421      	bmi.n	8005a74 <__lo0bits+0x52>
 8005a30:	0798      	lsls	r0, r3, #30
 8005a32:	bf49      	itett	mi
 8005a34:	085b      	lsrmi	r3, r3, #1
 8005a36:	089b      	lsrpl	r3, r3, #2
 8005a38:	2001      	movmi	r0, #1
 8005a3a:	6013      	strmi	r3, [r2, #0]
 8005a3c:	bf5c      	itt	pl
 8005a3e:	6013      	strpl	r3, [r2, #0]
 8005a40:	2002      	movpl	r0, #2
 8005a42:	4770      	bx	lr
 8005a44:	b299      	uxth	r1, r3
 8005a46:	b909      	cbnz	r1, 8005a4c <__lo0bits+0x2a>
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	2010      	movs	r0, #16
 8005a4c:	b2d9      	uxtb	r1, r3
 8005a4e:	b909      	cbnz	r1, 8005a54 <__lo0bits+0x32>
 8005a50:	3008      	adds	r0, #8
 8005a52:	0a1b      	lsrs	r3, r3, #8
 8005a54:	0719      	lsls	r1, r3, #28
 8005a56:	bf04      	itt	eq
 8005a58:	091b      	lsreq	r3, r3, #4
 8005a5a:	3004      	addeq	r0, #4
 8005a5c:	0799      	lsls	r1, r3, #30
 8005a5e:	bf04      	itt	eq
 8005a60:	089b      	lsreq	r3, r3, #2
 8005a62:	3002      	addeq	r0, #2
 8005a64:	07d9      	lsls	r1, r3, #31
 8005a66:	d403      	bmi.n	8005a70 <__lo0bits+0x4e>
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	f100 0001 	add.w	r0, r0, #1
 8005a6e:	d003      	beq.n	8005a78 <__lo0bits+0x56>
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	4770      	bx	lr
 8005a74:	2000      	movs	r0, #0
 8005a76:	4770      	bx	lr
 8005a78:	2020      	movs	r0, #32
 8005a7a:	4770      	bx	lr

08005a7c <__i2b>:
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	460c      	mov	r4, r1
 8005a80:	2101      	movs	r1, #1
 8005a82:	f7ff ff07 	bl	8005894 <_Balloc>
 8005a86:	4602      	mov	r2, r0
 8005a88:	b928      	cbnz	r0, 8005a96 <__i2b+0x1a>
 8005a8a:	4b05      	ldr	r3, [pc, #20]	@ (8005aa0 <__i2b+0x24>)
 8005a8c:	4805      	ldr	r0, [pc, #20]	@ (8005aa4 <__i2b+0x28>)
 8005a8e:	f240 1145 	movw	r1, #325	@ 0x145
 8005a92:	f000 fb4b 	bl	800612c <__assert_func>
 8005a96:	2301      	movs	r3, #1
 8005a98:	6144      	str	r4, [r0, #20]
 8005a9a:	6103      	str	r3, [r0, #16]
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	bf00      	nop
 8005aa0:	08006824 	.word	0x08006824
 8005aa4:	08006835 	.word	0x08006835

08005aa8 <__multiply>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	4614      	mov	r4, r2
 8005aae:	690a      	ldr	r2, [r1, #16]
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	bfa8      	it	ge
 8005ab6:	4623      	movge	r3, r4
 8005ab8:	460f      	mov	r7, r1
 8005aba:	bfa4      	itt	ge
 8005abc:	460c      	movge	r4, r1
 8005abe:	461f      	movge	r7, r3
 8005ac0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005ac4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005ac8:	68a3      	ldr	r3, [r4, #8]
 8005aca:	6861      	ldr	r1, [r4, #4]
 8005acc:	eb0a 0609 	add.w	r6, sl, r9
 8005ad0:	42b3      	cmp	r3, r6
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	bfb8      	it	lt
 8005ad6:	3101      	addlt	r1, #1
 8005ad8:	f7ff fedc 	bl	8005894 <_Balloc>
 8005adc:	b930      	cbnz	r0, 8005aec <__multiply+0x44>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b44      	ldr	r3, [pc, #272]	@ (8005bf4 <__multiply+0x14c>)
 8005ae2:	4845      	ldr	r0, [pc, #276]	@ (8005bf8 <__multiply+0x150>)
 8005ae4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ae8:	f000 fb20 	bl	800612c <__assert_func>
 8005aec:	f100 0514 	add.w	r5, r0, #20
 8005af0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005af4:	462b      	mov	r3, r5
 8005af6:	2200      	movs	r2, #0
 8005af8:	4543      	cmp	r3, r8
 8005afa:	d321      	bcc.n	8005b40 <__multiply+0x98>
 8005afc:	f107 0114 	add.w	r1, r7, #20
 8005b00:	f104 0214 	add.w	r2, r4, #20
 8005b04:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005b08:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005b0c:	9302      	str	r3, [sp, #8]
 8005b0e:	1b13      	subs	r3, r2, r4
 8005b10:	3b15      	subs	r3, #21
 8005b12:	f023 0303 	bic.w	r3, r3, #3
 8005b16:	3304      	adds	r3, #4
 8005b18:	f104 0715 	add.w	r7, r4, #21
 8005b1c:	42ba      	cmp	r2, r7
 8005b1e:	bf38      	it	cc
 8005b20:	2304      	movcc	r3, #4
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	9b02      	ldr	r3, [sp, #8]
 8005b26:	9103      	str	r1, [sp, #12]
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	d80c      	bhi.n	8005b46 <__multiply+0x9e>
 8005b2c:	2e00      	cmp	r6, #0
 8005b2e:	dd03      	ble.n	8005b38 <__multiply+0x90>
 8005b30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d05b      	beq.n	8005bf0 <__multiply+0x148>
 8005b38:	6106      	str	r6, [r0, #16]
 8005b3a:	b005      	add	sp, #20
 8005b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b40:	f843 2b04 	str.w	r2, [r3], #4
 8005b44:	e7d8      	b.n	8005af8 <__multiply+0x50>
 8005b46:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b4a:	f1ba 0f00 	cmp.w	sl, #0
 8005b4e:	d024      	beq.n	8005b9a <__multiply+0xf2>
 8005b50:	f104 0e14 	add.w	lr, r4, #20
 8005b54:	46a9      	mov	r9, r5
 8005b56:	f04f 0c00 	mov.w	ip, #0
 8005b5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005b5e:	f8d9 3000 	ldr.w	r3, [r9]
 8005b62:	fa1f fb87 	uxth.w	fp, r7
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	fb0a 330b 	mla	r3, sl, fp, r3
 8005b6c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005b70:	f8d9 7000 	ldr.w	r7, [r9]
 8005b74:	4463      	add	r3, ip
 8005b76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005b7a:	fb0a c70b 	mla	r7, sl, fp, ip
 8005b7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005b88:	4572      	cmp	r2, lr
 8005b8a:	f849 3b04 	str.w	r3, [r9], #4
 8005b8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005b92:	d8e2      	bhi.n	8005b5a <__multiply+0xb2>
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	f845 c003 	str.w	ip, [r5, r3]
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005ba0:	3104      	adds	r1, #4
 8005ba2:	f1b9 0f00 	cmp.w	r9, #0
 8005ba6:	d021      	beq.n	8005bec <__multiply+0x144>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	f104 0c14 	add.w	ip, r4, #20
 8005bae:	46ae      	mov	lr, r5
 8005bb0:	f04f 0a00 	mov.w	sl, #0
 8005bb4:	f8bc b000 	ldrh.w	fp, [ip]
 8005bb8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005bbc:	fb09 770b 	mla	r7, r9, fp, r7
 8005bc0:	4457      	add	r7, sl
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005bc8:	f84e 3b04 	str.w	r3, [lr], #4
 8005bcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005bd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bd4:	f8be 3000 	ldrh.w	r3, [lr]
 8005bd8:	fb09 330a 	mla	r3, r9, sl, r3
 8005bdc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005be0:	4562      	cmp	r2, ip
 8005be2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005be6:	d8e5      	bhi.n	8005bb4 <__multiply+0x10c>
 8005be8:	9f01      	ldr	r7, [sp, #4]
 8005bea:	51eb      	str	r3, [r5, r7]
 8005bec:	3504      	adds	r5, #4
 8005bee:	e799      	b.n	8005b24 <__multiply+0x7c>
 8005bf0:	3e01      	subs	r6, #1
 8005bf2:	e79b      	b.n	8005b2c <__multiply+0x84>
 8005bf4:	08006824 	.word	0x08006824
 8005bf8:	08006835 	.word	0x08006835

08005bfc <__pow5mult>:
 8005bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c00:	4615      	mov	r5, r2
 8005c02:	f012 0203 	ands.w	r2, r2, #3
 8005c06:	4607      	mov	r7, r0
 8005c08:	460e      	mov	r6, r1
 8005c0a:	d007      	beq.n	8005c1c <__pow5mult+0x20>
 8005c0c:	4c25      	ldr	r4, [pc, #148]	@ (8005ca4 <__pow5mult+0xa8>)
 8005c0e:	3a01      	subs	r2, #1
 8005c10:	2300      	movs	r3, #0
 8005c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c16:	f7ff fe9f 	bl	8005958 <__multadd>
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	10ad      	asrs	r5, r5, #2
 8005c1e:	d03d      	beq.n	8005c9c <__pow5mult+0xa0>
 8005c20:	69fc      	ldr	r4, [r7, #28]
 8005c22:	b97c      	cbnz	r4, 8005c44 <__pow5mult+0x48>
 8005c24:	2010      	movs	r0, #16
 8005c26:	f7ff fd7f 	bl	8005728 <malloc>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	61f8      	str	r0, [r7, #28]
 8005c2e:	b928      	cbnz	r0, 8005c3c <__pow5mult+0x40>
 8005c30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca8 <__pow5mult+0xac>)
 8005c32:	481e      	ldr	r0, [pc, #120]	@ (8005cac <__pow5mult+0xb0>)
 8005c34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c38:	f000 fa78 	bl	800612c <__assert_func>
 8005c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c40:	6004      	str	r4, [r0, #0]
 8005c42:	60c4      	str	r4, [r0, #12]
 8005c44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c4c:	b94c      	cbnz	r4, 8005c62 <__pow5mult+0x66>
 8005c4e:	f240 2171 	movw	r1, #625	@ 0x271
 8005c52:	4638      	mov	r0, r7
 8005c54:	f7ff ff12 	bl	8005a7c <__i2b>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c5e:	4604      	mov	r4, r0
 8005c60:	6003      	str	r3, [r0, #0]
 8005c62:	f04f 0900 	mov.w	r9, #0
 8005c66:	07eb      	lsls	r3, r5, #31
 8005c68:	d50a      	bpl.n	8005c80 <__pow5mult+0x84>
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	4638      	mov	r0, r7
 8005c70:	f7ff ff1a 	bl	8005aa8 <__multiply>
 8005c74:	4631      	mov	r1, r6
 8005c76:	4680      	mov	r8, r0
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7ff fe4b 	bl	8005914 <_Bfree>
 8005c7e:	4646      	mov	r6, r8
 8005c80:	106d      	asrs	r5, r5, #1
 8005c82:	d00b      	beq.n	8005c9c <__pow5mult+0xa0>
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	b938      	cbnz	r0, 8005c98 <__pow5mult+0x9c>
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	f7ff ff0b 	bl	8005aa8 <__multiply>
 8005c92:	6020      	str	r0, [r4, #0]
 8005c94:	f8c0 9000 	str.w	r9, [r0]
 8005c98:	4604      	mov	r4, r0
 8005c9a:	e7e4      	b.n	8005c66 <__pow5mult+0x6a>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca2:	bf00      	nop
 8005ca4:	08006890 	.word	0x08006890
 8005ca8:	080067b5 	.word	0x080067b5
 8005cac:	08006835 	.word	0x08006835

08005cb0 <__lshift>:
 8005cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	6849      	ldr	r1, [r1, #4]
 8005cb8:	6923      	ldr	r3, [r4, #16]
 8005cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	4607      	mov	r7, r0
 8005cc2:	4691      	mov	r9, r2
 8005cc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cc8:	f108 0601 	add.w	r6, r8, #1
 8005ccc:	42b3      	cmp	r3, r6
 8005cce:	db0b      	blt.n	8005ce8 <__lshift+0x38>
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	f7ff fddf 	bl	8005894 <_Balloc>
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	b948      	cbnz	r0, 8005cee <__lshift+0x3e>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	4b28      	ldr	r3, [pc, #160]	@ (8005d80 <__lshift+0xd0>)
 8005cde:	4829      	ldr	r0, [pc, #164]	@ (8005d84 <__lshift+0xd4>)
 8005ce0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005ce4:	f000 fa22 	bl	800612c <__assert_func>
 8005ce8:	3101      	adds	r1, #1
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	e7ee      	b.n	8005ccc <__lshift+0x1c>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f100 0114 	add.w	r1, r0, #20
 8005cf4:	f100 0210 	add.w	r2, r0, #16
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	4553      	cmp	r3, sl
 8005cfc:	db33      	blt.n	8005d66 <__lshift+0xb6>
 8005cfe:	6920      	ldr	r0, [r4, #16]
 8005d00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d04:	f104 0314 	add.w	r3, r4, #20
 8005d08:	f019 091f 	ands.w	r9, r9, #31
 8005d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d14:	d02b      	beq.n	8005d6e <__lshift+0xbe>
 8005d16:	f1c9 0e20 	rsb	lr, r9, #32
 8005d1a:	468a      	mov	sl, r1
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	fa00 f009 	lsl.w	r0, r0, r9
 8005d24:	4310      	orrs	r0, r2
 8005d26:	f84a 0b04 	str.w	r0, [sl], #4
 8005d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2e:	459c      	cmp	ip, r3
 8005d30:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d34:	d8f3      	bhi.n	8005d1e <__lshift+0x6e>
 8005d36:	ebac 0304 	sub.w	r3, ip, r4
 8005d3a:	3b15      	subs	r3, #21
 8005d3c:	f023 0303 	bic.w	r3, r3, #3
 8005d40:	3304      	adds	r3, #4
 8005d42:	f104 0015 	add.w	r0, r4, #21
 8005d46:	4584      	cmp	ip, r0
 8005d48:	bf38      	it	cc
 8005d4a:	2304      	movcc	r3, #4
 8005d4c:	50ca      	str	r2, [r1, r3]
 8005d4e:	b10a      	cbz	r2, 8005d54 <__lshift+0xa4>
 8005d50:	f108 0602 	add.w	r6, r8, #2
 8005d54:	3e01      	subs	r6, #1
 8005d56:	4638      	mov	r0, r7
 8005d58:	612e      	str	r6, [r5, #16]
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	f7ff fdda 	bl	8005914 <_Bfree>
 8005d60:	4628      	mov	r0, r5
 8005d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	e7c5      	b.n	8005cfa <__lshift+0x4a>
 8005d6e:	3904      	subs	r1, #4
 8005d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d74:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d78:	459c      	cmp	ip, r3
 8005d7a:	d8f9      	bhi.n	8005d70 <__lshift+0xc0>
 8005d7c:	e7ea      	b.n	8005d54 <__lshift+0xa4>
 8005d7e:	bf00      	nop
 8005d80:	08006824 	.word	0x08006824
 8005d84:	08006835 	.word	0x08006835

08005d88 <__mcmp>:
 8005d88:	690a      	ldr	r2, [r1, #16]
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	6900      	ldr	r0, [r0, #16]
 8005d8e:	1a80      	subs	r0, r0, r2
 8005d90:	b530      	push	{r4, r5, lr}
 8005d92:	d10e      	bne.n	8005db2 <__mcmp+0x2a>
 8005d94:	3314      	adds	r3, #20
 8005d96:	3114      	adds	r1, #20
 8005d98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005da0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005da4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005da8:	4295      	cmp	r5, r2
 8005daa:	d003      	beq.n	8005db4 <__mcmp+0x2c>
 8005dac:	d205      	bcs.n	8005dba <__mcmp+0x32>
 8005dae:	f04f 30ff 	mov.w	r0, #4294967295
 8005db2:	bd30      	pop	{r4, r5, pc}
 8005db4:	42a3      	cmp	r3, r4
 8005db6:	d3f3      	bcc.n	8005da0 <__mcmp+0x18>
 8005db8:	e7fb      	b.n	8005db2 <__mcmp+0x2a>
 8005dba:	2001      	movs	r0, #1
 8005dbc:	e7f9      	b.n	8005db2 <__mcmp+0x2a>
	...

08005dc0 <__mdiff>:
 8005dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	4689      	mov	r9, r1
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4648      	mov	r0, r9
 8005dcc:	4614      	mov	r4, r2
 8005dce:	f7ff ffdb 	bl	8005d88 <__mcmp>
 8005dd2:	1e05      	subs	r5, r0, #0
 8005dd4:	d112      	bne.n	8005dfc <__mdiff+0x3c>
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f7ff fd5b 	bl	8005894 <_Balloc>
 8005dde:	4602      	mov	r2, r0
 8005de0:	b928      	cbnz	r0, 8005dee <__mdiff+0x2e>
 8005de2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ee0 <__mdiff+0x120>)
 8005de4:	f240 2137 	movw	r1, #567	@ 0x237
 8005de8:	483e      	ldr	r0, [pc, #248]	@ (8005ee4 <__mdiff+0x124>)
 8005dea:	f000 f99f 	bl	800612c <__assert_func>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005df4:	4610      	mov	r0, r2
 8005df6:	b003      	add	sp, #12
 8005df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfc:	bfbc      	itt	lt
 8005dfe:	464b      	movlt	r3, r9
 8005e00:	46a1      	movlt	r9, r4
 8005e02:	4630      	mov	r0, r6
 8005e04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e08:	bfba      	itte	lt
 8005e0a:	461c      	movlt	r4, r3
 8005e0c:	2501      	movlt	r5, #1
 8005e0e:	2500      	movge	r5, #0
 8005e10:	f7ff fd40 	bl	8005894 <_Balloc>
 8005e14:	4602      	mov	r2, r0
 8005e16:	b918      	cbnz	r0, 8005e20 <__mdiff+0x60>
 8005e18:	4b31      	ldr	r3, [pc, #196]	@ (8005ee0 <__mdiff+0x120>)
 8005e1a:	f240 2145 	movw	r1, #581	@ 0x245
 8005e1e:	e7e3      	b.n	8005de8 <__mdiff+0x28>
 8005e20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e24:	6926      	ldr	r6, [r4, #16]
 8005e26:	60c5      	str	r5, [r0, #12]
 8005e28:	f109 0310 	add.w	r3, r9, #16
 8005e2c:	f109 0514 	add.w	r5, r9, #20
 8005e30:	f104 0e14 	add.w	lr, r4, #20
 8005e34:	f100 0b14 	add.w	fp, r0, #20
 8005e38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005e3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	46d9      	mov	r9, fp
 8005e44:	f04f 0c00 	mov.w	ip, #0
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	fa1f f38a 	uxth.w	r3, sl
 8005e58:	4619      	mov	r1, r3
 8005e5a:	b283      	uxth	r3, r0
 8005e5c:	1acb      	subs	r3, r1, r3
 8005e5e:	0c00      	lsrs	r0, r0, #16
 8005e60:	4463      	add	r3, ip
 8005e62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e70:	4576      	cmp	r6, lr
 8005e72:	f849 3b04 	str.w	r3, [r9], #4
 8005e76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e7a:	d8e5      	bhi.n	8005e48 <__mdiff+0x88>
 8005e7c:	1b33      	subs	r3, r6, r4
 8005e7e:	3b15      	subs	r3, #21
 8005e80:	f023 0303 	bic.w	r3, r3, #3
 8005e84:	3415      	adds	r4, #21
 8005e86:	3304      	adds	r3, #4
 8005e88:	42a6      	cmp	r6, r4
 8005e8a:	bf38      	it	cc
 8005e8c:	2304      	movcc	r3, #4
 8005e8e:	441d      	add	r5, r3
 8005e90:	445b      	add	r3, fp
 8005e92:	461e      	mov	r6, r3
 8005e94:	462c      	mov	r4, r5
 8005e96:	4544      	cmp	r4, r8
 8005e98:	d30e      	bcc.n	8005eb8 <__mdiff+0xf8>
 8005e9a:	f108 0103 	add.w	r1, r8, #3
 8005e9e:	1b49      	subs	r1, r1, r5
 8005ea0:	f021 0103 	bic.w	r1, r1, #3
 8005ea4:	3d03      	subs	r5, #3
 8005ea6:	45a8      	cmp	r8, r5
 8005ea8:	bf38      	it	cc
 8005eaa:	2100      	movcc	r1, #0
 8005eac:	440b      	add	r3, r1
 8005eae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005eb2:	b191      	cbz	r1, 8005eda <__mdiff+0x11a>
 8005eb4:	6117      	str	r7, [r2, #16]
 8005eb6:	e79d      	b.n	8005df4 <__mdiff+0x34>
 8005eb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8005ebc:	46e6      	mov	lr, ip
 8005ebe:	0c08      	lsrs	r0, r1, #16
 8005ec0:	fa1c fc81 	uxtah	ip, ip, r1
 8005ec4:	4471      	add	r1, lr
 8005ec6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005eca:	b289      	uxth	r1, r1
 8005ecc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005ed0:	f846 1b04 	str.w	r1, [r6], #4
 8005ed4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ed8:	e7dd      	b.n	8005e96 <__mdiff+0xd6>
 8005eda:	3f01      	subs	r7, #1
 8005edc:	e7e7      	b.n	8005eae <__mdiff+0xee>
 8005ede:	bf00      	nop
 8005ee0:	08006824 	.word	0x08006824
 8005ee4:	08006835 	.word	0x08006835

08005ee8 <__d2b>:
 8005ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005eec:	460f      	mov	r7, r1
 8005eee:	2101      	movs	r1, #1
 8005ef0:	ec59 8b10 	vmov	r8, r9, d0
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	f7ff fccd 	bl	8005894 <_Balloc>
 8005efa:	4604      	mov	r4, r0
 8005efc:	b930      	cbnz	r0, 8005f0c <__d2b+0x24>
 8005efe:	4602      	mov	r2, r0
 8005f00:	4b23      	ldr	r3, [pc, #140]	@ (8005f90 <__d2b+0xa8>)
 8005f02:	4824      	ldr	r0, [pc, #144]	@ (8005f94 <__d2b+0xac>)
 8005f04:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f08:	f000 f910 	bl	800612c <__assert_func>
 8005f0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f14:	b10d      	cbz	r5, 8005f1a <__d2b+0x32>
 8005f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	f1b8 0300 	subs.w	r3, r8, #0
 8005f20:	d023      	beq.n	8005f6a <__d2b+0x82>
 8005f22:	4668      	mov	r0, sp
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	f7ff fd7c 	bl	8005a22 <__lo0bits>
 8005f2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f2e:	b1d0      	cbz	r0, 8005f66 <__d2b+0x7e>
 8005f30:	f1c0 0320 	rsb	r3, r0, #32
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	40c2      	lsrs	r2, r0
 8005f3c:	6163      	str	r3, [r4, #20]
 8005f3e:	9201      	str	r2, [sp, #4]
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	61a3      	str	r3, [r4, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bf0c      	ite	eq
 8005f48:	2201      	moveq	r2, #1
 8005f4a:	2202      	movne	r2, #2
 8005f4c:	6122      	str	r2, [r4, #16]
 8005f4e:	b1a5      	cbz	r5, 8005f7a <__d2b+0x92>
 8005f50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f54:	4405      	add	r5, r0
 8005f56:	603d      	str	r5, [r7, #0]
 8005f58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f5c:	6030      	str	r0, [r6, #0]
 8005f5e:	4620      	mov	r0, r4
 8005f60:	b003      	add	sp, #12
 8005f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f66:	6161      	str	r1, [r4, #20]
 8005f68:	e7ea      	b.n	8005f40 <__d2b+0x58>
 8005f6a:	a801      	add	r0, sp, #4
 8005f6c:	f7ff fd59 	bl	8005a22 <__lo0bits>
 8005f70:	9b01      	ldr	r3, [sp, #4]
 8005f72:	6163      	str	r3, [r4, #20]
 8005f74:	3020      	adds	r0, #32
 8005f76:	2201      	movs	r2, #1
 8005f78:	e7e8      	b.n	8005f4c <__d2b+0x64>
 8005f7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f82:	6038      	str	r0, [r7, #0]
 8005f84:	6918      	ldr	r0, [r3, #16]
 8005f86:	f7ff fd2d 	bl	80059e4 <__hi0bits>
 8005f8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f8e:	e7e5      	b.n	8005f5c <__d2b+0x74>
 8005f90:	08006824 	.word	0x08006824
 8005f94:	08006835 	.word	0x08006835

08005f98 <__sflush_r>:
 8005f98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa0:	0716      	lsls	r6, r2, #28
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	d454      	bmi.n	8006052 <__sflush_r+0xba>
 8005fa8:	684b      	ldr	r3, [r1, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dc02      	bgt.n	8005fb4 <__sflush_r+0x1c>
 8005fae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	dd48      	ble.n	8006046 <__sflush_r+0xae>
 8005fb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fb6:	2e00      	cmp	r6, #0
 8005fb8:	d045      	beq.n	8006046 <__sflush_r+0xae>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fc0:	682f      	ldr	r7, [r5, #0]
 8005fc2:	6a21      	ldr	r1, [r4, #32]
 8005fc4:	602b      	str	r3, [r5, #0]
 8005fc6:	d030      	beq.n	800602a <__sflush_r+0x92>
 8005fc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	0759      	lsls	r1, r3, #29
 8005fce:	d505      	bpl.n	8005fdc <__sflush_r+0x44>
 8005fd0:	6863      	ldr	r3, [r4, #4]
 8005fd2:	1ad2      	subs	r2, r2, r3
 8005fd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fd6:	b10b      	cbz	r3, 8005fdc <__sflush_r+0x44>
 8005fd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fda:	1ad2      	subs	r2, r2, r3
 8005fdc:	2300      	movs	r3, #0
 8005fde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fe0:	6a21      	ldr	r1, [r4, #32]
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b0      	blx	r6
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	d106      	bne.n	8005ffa <__sflush_r+0x62>
 8005fec:	6829      	ldr	r1, [r5, #0]
 8005fee:	291d      	cmp	r1, #29
 8005ff0:	d82b      	bhi.n	800604a <__sflush_r+0xb2>
 8005ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800609c <__sflush_r+0x104>)
 8005ff4:	410a      	asrs	r2, r1
 8005ff6:	07d6      	lsls	r6, r2, #31
 8005ff8:	d427      	bmi.n	800604a <__sflush_r+0xb2>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	6062      	str	r2, [r4, #4]
 8005ffe:	04d9      	lsls	r1, r3, #19
 8006000:	6922      	ldr	r2, [r4, #16]
 8006002:	6022      	str	r2, [r4, #0]
 8006004:	d504      	bpl.n	8006010 <__sflush_r+0x78>
 8006006:	1c42      	adds	r2, r0, #1
 8006008:	d101      	bne.n	800600e <__sflush_r+0x76>
 800600a:	682b      	ldr	r3, [r5, #0]
 800600c:	b903      	cbnz	r3, 8006010 <__sflush_r+0x78>
 800600e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006010:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006012:	602f      	str	r7, [r5, #0]
 8006014:	b1b9      	cbz	r1, 8006046 <__sflush_r+0xae>
 8006016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800601a:	4299      	cmp	r1, r3
 800601c:	d002      	beq.n	8006024 <__sflush_r+0x8c>
 800601e:	4628      	mov	r0, r5
 8006020:	f7ff fb38 	bl	8005694 <_free_r>
 8006024:	2300      	movs	r3, #0
 8006026:	6363      	str	r3, [r4, #52]	@ 0x34
 8006028:	e00d      	b.n	8006046 <__sflush_r+0xae>
 800602a:	2301      	movs	r3, #1
 800602c:	4628      	mov	r0, r5
 800602e:	47b0      	blx	r6
 8006030:	4602      	mov	r2, r0
 8006032:	1c50      	adds	r0, r2, #1
 8006034:	d1c9      	bne.n	8005fca <__sflush_r+0x32>
 8006036:	682b      	ldr	r3, [r5, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0c6      	beq.n	8005fca <__sflush_r+0x32>
 800603c:	2b1d      	cmp	r3, #29
 800603e:	d001      	beq.n	8006044 <__sflush_r+0xac>
 8006040:	2b16      	cmp	r3, #22
 8006042:	d11e      	bne.n	8006082 <__sflush_r+0xea>
 8006044:	602f      	str	r7, [r5, #0]
 8006046:	2000      	movs	r0, #0
 8006048:	e022      	b.n	8006090 <__sflush_r+0xf8>
 800604a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800604e:	b21b      	sxth	r3, r3
 8006050:	e01b      	b.n	800608a <__sflush_r+0xf2>
 8006052:	690f      	ldr	r7, [r1, #16]
 8006054:	2f00      	cmp	r7, #0
 8006056:	d0f6      	beq.n	8006046 <__sflush_r+0xae>
 8006058:	0793      	lsls	r3, r2, #30
 800605a:	680e      	ldr	r6, [r1, #0]
 800605c:	bf08      	it	eq
 800605e:	694b      	ldreq	r3, [r1, #20]
 8006060:	600f      	str	r7, [r1, #0]
 8006062:	bf18      	it	ne
 8006064:	2300      	movne	r3, #0
 8006066:	eba6 0807 	sub.w	r8, r6, r7
 800606a:	608b      	str	r3, [r1, #8]
 800606c:	f1b8 0f00 	cmp.w	r8, #0
 8006070:	dde9      	ble.n	8006046 <__sflush_r+0xae>
 8006072:	6a21      	ldr	r1, [r4, #32]
 8006074:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006076:	4643      	mov	r3, r8
 8006078:	463a      	mov	r2, r7
 800607a:	4628      	mov	r0, r5
 800607c:	47b0      	blx	r6
 800607e:	2800      	cmp	r0, #0
 8006080:	dc08      	bgt.n	8006094 <__sflush_r+0xfc>
 8006082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006094:	4407      	add	r7, r0
 8006096:	eba8 0800 	sub.w	r8, r8, r0
 800609a:	e7e7      	b.n	800606c <__sflush_r+0xd4>
 800609c:	dfbffffe 	.word	0xdfbffffe

080060a0 <_fflush_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	690b      	ldr	r3, [r1, #16]
 80060a4:	4605      	mov	r5, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	b913      	cbnz	r3, 80060b0 <_fflush_r+0x10>
 80060aa:	2500      	movs	r5, #0
 80060ac:	4628      	mov	r0, r5
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	b118      	cbz	r0, 80060ba <_fflush_r+0x1a>
 80060b2:	6a03      	ldr	r3, [r0, #32]
 80060b4:	b90b      	cbnz	r3, 80060ba <_fflush_r+0x1a>
 80060b6:	f7fe fc13 	bl	80048e0 <__sinit>
 80060ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f3      	beq.n	80060aa <_fflush_r+0xa>
 80060c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060c4:	07d0      	lsls	r0, r2, #31
 80060c6:	d404      	bmi.n	80060d2 <_fflush_r+0x32>
 80060c8:	0599      	lsls	r1, r3, #22
 80060ca:	d402      	bmi.n	80060d2 <_fflush_r+0x32>
 80060cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ce:	f7fe fcfe 	bl	8004ace <__retarget_lock_acquire_recursive>
 80060d2:	4628      	mov	r0, r5
 80060d4:	4621      	mov	r1, r4
 80060d6:	f7ff ff5f 	bl	8005f98 <__sflush_r>
 80060da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060dc:	07da      	lsls	r2, r3, #31
 80060de:	4605      	mov	r5, r0
 80060e0:	d4e4      	bmi.n	80060ac <_fflush_r+0xc>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	059b      	lsls	r3, r3, #22
 80060e6:	d4e1      	bmi.n	80060ac <_fflush_r+0xc>
 80060e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ea:	f7fe fcf1 	bl	8004ad0 <__retarget_lock_release_recursive>
 80060ee:	e7dd      	b.n	80060ac <_fflush_r+0xc>

080060f0 <_sbrk_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d06      	ldr	r5, [pc, #24]	@ (800610c <_sbrk_r+0x1c>)
 80060f4:	2300      	movs	r3, #0
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	f7fa ff9e 	bl	800103c <_sbrk>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_sbrk_r+0x1a>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_sbrk_r+0x1a>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20000514 	.word	0x20000514

08006110 <memcpy>:
 8006110:	440a      	add	r2, r1
 8006112:	4291      	cmp	r1, r2
 8006114:	f100 33ff 	add.w	r3, r0, #4294967295
 8006118:	d100      	bne.n	800611c <memcpy+0xc>
 800611a:	4770      	bx	lr
 800611c:	b510      	push	{r4, lr}
 800611e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006126:	4291      	cmp	r1, r2
 8006128:	d1f9      	bne.n	800611e <memcpy+0xe>
 800612a:	bd10      	pop	{r4, pc}

0800612c <__assert_func>:
 800612c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800612e:	4614      	mov	r4, r2
 8006130:	461a      	mov	r2, r3
 8006132:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <__assert_func+0x2c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4605      	mov	r5, r0
 8006138:	68d8      	ldr	r0, [r3, #12]
 800613a:	b954      	cbnz	r4, 8006152 <__assert_func+0x26>
 800613c:	4b07      	ldr	r3, [pc, #28]	@ (800615c <__assert_func+0x30>)
 800613e:	461c      	mov	r4, r3
 8006140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006144:	9100      	str	r1, [sp, #0]
 8006146:	462b      	mov	r3, r5
 8006148:	4905      	ldr	r1, [pc, #20]	@ (8006160 <__assert_func+0x34>)
 800614a:	f000 f841 	bl	80061d0 <fiprintf>
 800614e:	f000 f851 	bl	80061f4 <abort>
 8006152:	4b04      	ldr	r3, [pc, #16]	@ (8006164 <__assert_func+0x38>)
 8006154:	e7f4      	b.n	8006140 <__assert_func+0x14>
 8006156:	bf00      	nop
 8006158:	20000054 	.word	0x20000054
 800615c:	080069d5 	.word	0x080069d5
 8006160:	080069a7 	.word	0x080069a7
 8006164:	0800699a 	.word	0x0800699a

08006168 <_calloc_r>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	fba1 5402 	umull	r5, r4, r1, r2
 800616e:	b93c      	cbnz	r4, 8006180 <_calloc_r+0x18>
 8006170:	4629      	mov	r1, r5
 8006172:	f7ff fb03 	bl	800577c <_malloc_r>
 8006176:	4606      	mov	r6, r0
 8006178:	b928      	cbnz	r0, 8006186 <_calloc_r+0x1e>
 800617a:	2600      	movs	r6, #0
 800617c:	4630      	mov	r0, r6
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	220c      	movs	r2, #12
 8006182:	6002      	str	r2, [r0, #0]
 8006184:	e7f9      	b.n	800617a <_calloc_r+0x12>
 8006186:	462a      	mov	r2, r5
 8006188:	4621      	mov	r1, r4
 800618a:	f7fe fc22 	bl	80049d2 <memset>
 800618e:	e7f5      	b.n	800617c <_calloc_r+0x14>

08006190 <__ascii_mbtowc>:
 8006190:	b082      	sub	sp, #8
 8006192:	b901      	cbnz	r1, 8006196 <__ascii_mbtowc+0x6>
 8006194:	a901      	add	r1, sp, #4
 8006196:	b142      	cbz	r2, 80061aa <__ascii_mbtowc+0x1a>
 8006198:	b14b      	cbz	r3, 80061ae <__ascii_mbtowc+0x1e>
 800619a:	7813      	ldrb	r3, [r2, #0]
 800619c:	600b      	str	r3, [r1, #0]
 800619e:	7812      	ldrb	r2, [r2, #0]
 80061a0:	1e10      	subs	r0, r2, #0
 80061a2:	bf18      	it	ne
 80061a4:	2001      	movne	r0, #1
 80061a6:	b002      	add	sp, #8
 80061a8:	4770      	bx	lr
 80061aa:	4610      	mov	r0, r2
 80061ac:	e7fb      	b.n	80061a6 <__ascii_mbtowc+0x16>
 80061ae:	f06f 0001 	mvn.w	r0, #1
 80061b2:	e7f8      	b.n	80061a6 <__ascii_mbtowc+0x16>

080061b4 <__ascii_wctomb>:
 80061b4:	4603      	mov	r3, r0
 80061b6:	4608      	mov	r0, r1
 80061b8:	b141      	cbz	r1, 80061cc <__ascii_wctomb+0x18>
 80061ba:	2aff      	cmp	r2, #255	@ 0xff
 80061bc:	d904      	bls.n	80061c8 <__ascii_wctomb+0x14>
 80061be:	228a      	movs	r2, #138	@ 0x8a
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	f04f 30ff 	mov.w	r0, #4294967295
 80061c6:	4770      	bx	lr
 80061c8:	700a      	strb	r2, [r1, #0]
 80061ca:	2001      	movs	r0, #1
 80061cc:	4770      	bx	lr
	...

080061d0 <fiprintf>:
 80061d0:	b40e      	push	{r1, r2, r3}
 80061d2:	b503      	push	{r0, r1, lr}
 80061d4:	4601      	mov	r1, r0
 80061d6:	ab03      	add	r3, sp, #12
 80061d8:	4805      	ldr	r0, [pc, #20]	@ (80061f0 <fiprintf+0x20>)
 80061da:	f853 2b04 	ldr.w	r2, [r3], #4
 80061de:	6800      	ldr	r0, [r0, #0]
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	f000 f837 	bl	8006254 <_vfiprintf_r>
 80061e6:	b002      	add	sp, #8
 80061e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061ec:	b003      	add	sp, #12
 80061ee:	4770      	bx	lr
 80061f0:	20000054 	.word	0x20000054

080061f4 <abort>:
 80061f4:	b508      	push	{r3, lr}
 80061f6:	2006      	movs	r0, #6
 80061f8:	f000 fa00 	bl	80065fc <raise>
 80061fc:	2001      	movs	r0, #1
 80061fe:	f7fa fea4 	bl	8000f4a <_exit>

08006202 <__sfputc_r>:
 8006202:	6893      	ldr	r3, [r2, #8]
 8006204:	3b01      	subs	r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	b410      	push	{r4}
 800620a:	6093      	str	r3, [r2, #8]
 800620c:	da08      	bge.n	8006220 <__sfputc_r+0x1e>
 800620e:	6994      	ldr	r4, [r2, #24]
 8006210:	42a3      	cmp	r3, r4
 8006212:	db01      	blt.n	8006218 <__sfputc_r+0x16>
 8006214:	290a      	cmp	r1, #10
 8006216:	d103      	bne.n	8006220 <__sfputc_r+0x1e>
 8006218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800621c:	f000 b932 	b.w	8006484 <__swbuf_r>
 8006220:	6813      	ldr	r3, [r2, #0]
 8006222:	1c58      	adds	r0, r3, #1
 8006224:	6010      	str	r0, [r2, #0]
 8006226:	7019      	strb	r1, [r3, #0]
 8006228:	4608      	mov	r0, r1
 800622a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800622e:	4770      	bx	lr

08006230 <__sfputs_r>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	4606      	mov	r6, r0
 8006234:	460f      	mov	r7, r1
 8006236:	4614      	mov	r4, r2
 8006238:	18d5      	adds	r5, r2, r3
 800623a:	42ac      	cmp	r4, r5
 800623c:	d101      	bne.n	8006242 <__sfputs_r+0x12>
 800623e:	2000      	movs	r0, #0
 8006240:	e007      	b.n	8006252 <__sfputs_r+0x22>
 8006242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006246:	463a      	mov	r2, r7
 8006248:	4630      	mov	r0, r6
 800624a:	f7ff ffda 	bl	8006202 <__sfputc_r>
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	d1f3      	bne.n	800623a <__sfputs_r+0xa>
 8006252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006254 <_vfiprintf_r>:
 8006254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006258:	460d      	mov	r5, r1
 800625a:	b09d      	sub	sp, #116	@ 0x74
 800625c:	4614      	mov	r4, r2
 800625e:	4698      	mov	r8, r3
 8006260:	4606      	mov	r6, r0
 8006262:	b118      	cbz	r0, 800626c <_vfiprintf_r+0x18>
 8006264:	6a03      	ldr	r3, [r0, #32]
 8006266:	b90b      	cbnz	r3, 800626c <_vfiprintf_r+0x18>
 8006268:	f7fe fb3a 	bl	80048e0 <__sinit>
 800626c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800626e:	07d9      	lsls	r1, r3, #31
 8006270:	d405      	bmi.n	800627e <_vfiprintf_r+0x2a>
 8006272:	89ab      	ldrh	r3, [r5, #12]
 8006274:	059a      	lsls	r2, r3, #22
 8006276:	d402      	bmi.n	800627e <_vfiprintf_r+0x2a>
 8006278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800627a:	f7fe fc28 	bl	8004ace <__retarget_lock_acquire_recursive>
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	071b      	lsls	r3, r3, #28
 8006282:	d501      	bpl.n	8006288 <_vfiprintf_r+0x34>
 8006284:	692b      	ldr	r3, [r5, #16]
 8006286:	b99b      	cbnz	r3, 80062b0 <_vfiprintf_r+0x5c>
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	f000 f938 	bl	8006500 <__swsetup_r>
 8006290:	b170      	cbz	r0, 80062b0 <_vfiprintf_r+0x5c>
 8006292:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006294:	07dc      	lsls	r4, r3, #31
 8006296:	d504      	bpl.n	80062a2 <_vfiprintf_r+0x4e>
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	b01d      	add	sp, #116	@ 0x74
 800629e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a2:	89ab      	ldrh	r3, [r5, #12]
 80062a4:	0598      	lsls	r0, r3, #22
 80062a6:	d4f7      	bmi.n	8006298 <_vfiprintf_r+0x44>
 80062a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062aa:	f7fe fc11 	bl	8004ad0 <__retarget_lock_release_recursive>
 80062ae:	e7f3      	b.n	8006298 <_vfiprintf_r+0x44>
 80062b0:	2300      	movs	r3, #0
 80062b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b4:	2320      	movs	r3, #32
 80062b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80062be:	2330      	movs	r3, #48	@ 0x30
 80062c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006470 <_vfiprintf_r+0x21c>
 80062c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062c8:	f04f 0901 	mov.w	r9, #1
 80062cc:	4623      	mov	r3, r4
 80062ce:	469a      	mov	sl, r3
 80062d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d4:	b10a      	cbz	r2, 80062da <_vfiprintf_r+0x86>
 80062d6:	2a25      	cmp	r2, #37	@ 0x25
 80062d8:	d1f9      	bne.n	80062ce <_vfiprintf_r+0x7a>
 80062da:	ebba 0b04 	subs.w	fp, sl, r4
 80062de:	d00b      	beq.n	80062f8 <_vfiprintf_r+0xa4>
 80062e0:	465b      	mov	r3, fp
 80062e2:	4622      	mov	r2, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	4630      	mov	r0, r6
 80062e8:	f7ff ffa2 	bl	8006230 <__sfputs_r>
 80062ec:	3001      	adds	r0, #1
 80062ee:	f000 80a7 	beq.w	8006440 <_vfiprintf_r+0x1ec>
 80062f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f4:	445a      	add	r2, fp
 80062f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80062f8:	f89a 3000 	ldrb.w	r3, [sl]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 809f 	beq.w	8006440 <_vfiprintf_r+0x1ec>
 8006302:	2300      	movs	r3, #0
 8006304:	f04f 32ff 	mov.w	r2, #4294967295
 8006308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800630c:	f10a 0a01 	add.w	sl, sl, #1
 8006310:	9304      	str	r3, [sp, #16]
 8006312:	9307      	str	r3, [sp, #28]
 8006314:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006318:	931a      	str	r3, [sp, #104]	@ 0x68
 800631a:	4654      	mov	r4, sl
 800631c:	2205      	movs	r2, #5
 800631e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006322:	4853      	ldr	r0, [pc, #332]	@ (8006470 <_vfiprintf_r+0x21c>)
 8006324:	f7f9 ff8c 	bl	8000240 <memchr>
 8006328:	9a04      	ldr	r2, [sp, #16]
 800632a:	b9d8      	cbnz	r0, 8006364 <_vfiprintf_r+0x110>
 800632c:	06d1      	lsls	r1, r2, #27
 800632e:	bf44      	itt	mi
 8006330:	2320      	movmi	r3, #32
 8006332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006336:	0713      	lsls	r3, r2, #28
 8006338:	bf44      	itt	mi
 800633a:	232b      	movmi	r3, #43	@ 0x2b
 800633c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006340:	f89a 3000 	ldrb.w	r3, [sl]
 8006344:	2b2a      	cmp	r3, #42	@ 0x2a
 8006346:	d015      	beq.n	8006374 <_vfiprintf_r+0x120>
 8006348:	9a07      	ldr	r2, [sp, #28]
 800634a:	4654      	mov	r4, sl
 800634c:	2000      	movs	r0, #0
 800634e:	f04f 0c0a 	mov.w	ip, #10
 8006352:	4621      	mov	r1, r4
 8006354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006358:	3b30      	subs	r3, #48	@ 0x30
 800635a:	2b09      	cmp	r3, #9
 800635c:	d94b      	bls.n	80063f6 <_vfiprintf_r+0x1a2>
 800635e:	b1b0      	cbz	r0, 800638e <_vfiprintf_r+0x13a>
 8006360:	9207      	str	r2, [sp, #28]
 8006362:	e014      	b.n	800638e <_vfiprintf_r+0x13a>
 8006364:	eba0 0308 	sub.w	r3, r0, r8
 8006368:	fa09 f303 	lsl.w	r3, r9, r3
 800636c:	4313      	orrs	r3, r2
 800636e:	9304      	str	r3, [sp, #16]
 8006370:	46a2      	mov	sl, r4
 8006372:	e7d2      	b.n	800631a <_vfiprintf_r+0xc6>
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	1d19      	adds	r1, r3, #4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	9103      	str	r1, [sp, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	bfbb      	ittet	lt
 8006380:	425b      	neglt	r3, r3
 8006382:	f042 0202 	orrlt.w	r2, r2, #2
 8006386:	9307      	strge	r3, [sp, #28]
 8006388:	9307      	strlt	r3, [sp, #28]
 800638a:	bfb8      	it	lt
 800638c:	9204      	strlt	r2, [sp, #16]
 800638e:	7823      	ldrb	r3, [r4, #0]
 8006390:	2b2e      	cmp	r3, #46	@ 0x2e
 8006392:	d10a      	bne.n	80063aa <_vfiprintf_r+0x156>
 8006394:	7863      	ldrb	r3, [r4, #1]
 8006396:	2b2a      	cmp	r3, #42	@ 0x2a
 8006398:	d132      	bne.n	8006400 <_vfiprintf_r+0x1ac>
 800639a:	9b03      	ldr	r3, [sp, #12]
 800639c:	1d1a      	adds	r2, r3, #4
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	9203      	str	r2, [sp, #12]
 80063a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063a6:	3402      	adds	r4, #2
 80063a8:	9305      	str	r3, [sp, #20]
 80063aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006480 <_vfiprintf_r+0x22c>
 80063ae:	7821      	ldrb	r1, [r4, #0]
 80063b0:	2203      	movs	r2, #3
 80063b2:	4650      	mov	r0, sl
 80063b4:	f7f9 ff44 	bl	8000240 <memchr>
 80063b8:	b138      	cbz	r0, 80063ca <_vfiprintf_r+0x176>
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	eba0 000a 	sub.w	r0, r0, sl
 80063c0:	2240      	movs	r2, #64	@ 0x40
 80063c2:	4082      	lsls	r2, r0
 80063c4:	4313      	orrs	r3, r2
 80063c6:	3401      	adds	r4, #1
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ce:	4829      	ldr	r0, [pc, #164]	@ (8006474 <_vfiprintf_r+0x220>)
 80063d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063d4:	2206      	movs	r2, #6
 80063d6:	f7f9 ff33 	bl	8000240 <memchr>
 80063da:	2800      	cmp	r0, #0
 80063dc:	d03f      	beq.n	800645e <_vfiprintf_r+0x20a>
 80063de:	4b26      	ldr	r3, [pc, #152]	@ (8006478 <_vfiprintf_r+0x224>)
 80063e0:	bb1b      	cbnz	r3, 800642a <_vfiprintf_r+0x1d6>
 80063e2:	9b03      	ldr	r3, [sp, #12]
 80063e4:	3307      	adds	r3, #7
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	3308      	adds	r3, #8
 80063ec:	9303      	str	r3, [sp, #12]
 80063ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f0:	443b      	add	r3, r7
 80063f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f4:	e76a      	b.n	80062cc <_vfiprintf_r+0x78>
 80063f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063fa:	460c      	mov	r4, r1
 80063fc:	2001      	movs	r0, #1
 80063fe:	e7a8      	b.n	8006352 <_vfiprintf_r+0xfe>
 8006400:	2300      	movs	r3, #0
 8006402:	3401      	adds	r4, #1
 8006404:	9305      	str	r3, [sp, #20]
 8006406:	4619      	mov	r1, r3
 8006408:	f04f 0c0a 	mov.w	ip, #10
 800640c:	4620      	mov	r0, r4
 800640e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006412:	3a30      	subs	r2, #48	@ 0x30
 8006414:	2a09      	cmp	r2, #9
 8006416:	d903      	bls.n	8006420 <_vfiprintf_r+0x1cc>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0c6      	beq.n	80063aa <_vfiprintf_r+0x156>
 800641c:	9105      	str	r1, [sp, #20]
 800641e:	e7c4      	b.n	80063aa <_vfiprintf_r+0x156>
 8006420:	fb0c 2101 	mla	r1, ip, r1, r2
 8006424:	4604      	mov	r4, r0
 8006426:	2301      	movs	r3, #1
 8006428:	e7f0      	b.n	800640c <_vfiprintf_r+0x1b8>
 800642a:	ab03      	add	r3, sp, #12
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	462a      	mov	r2, r5
 8006430:	4b12      	ldr	r3, [pc, #72]	@ (800647c <_vfiprintf_r+0x228>)
 8006432:	a904      	add	r1, sp, #16
 8006434:	4630      	mov	r0, r6
 8006436:	f7fd fe1f 	bl	8004078 <_printf_float>
 800643a:	4607      	mov	r7, r0
 800643c:	1c78      	adds	r0, r7, #1
 800643e:	d1d6      	bne.n	80063ee <_vfiprintf_r+0x19a>
 8006440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006442:	07d9      	lsls	r1, r3, #31
 8006444:	d405      	bmi.n	8006452 <_vfiprintf_r+0x1fe>
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	059a      	lsls	r2, r3, #22
 800644a:	d402      	bmi.n	8006452 <_vfiprintf_r+0x1fe>
 800644c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800644e:	f7fe fb3f 	bl	8004ad0 <__retarget_lock_release_recursive>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	065b      	lsls	r3, r3, #25
 8006456:	f53f af1f 	bmi.w	8006298 <_vfiprintf_r+0x44>
 800645a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800645c:	e71e      	b.n	800629c <_vfiprintf_r+0x48>
 800645e:	ab03      	add	r3, sp, #12
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	462a      	mov	r2, r5
 8006464:	4b05      	ldr	r3, [pc, #20]	@ (800647c <_vfiprintf_r+0x228>)
 8006466:	a904      	add	r1, sp, #16
 8006468:	4630      	mov	r0, r6
 800646a:	f7fe f88d 	bl	8004588 <_printf_i>
 800646e:	e7e4      	b.n	800643a <_vfiprintf_r+0x1e6>
 8006470:	08006ad7 	.word	0x08006ad7
 8006474:	08006ae1 	.word	0x08006ae1
 8006478:	08004079 	.word	0x08004079
 800647c:	08006231 	.word	0x08006231
 8006480:	08006add 	.word	0x08006add

08006484 <__swbuf_r>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	460e      	mov	r6, r1
 8006488:	4614      	mov	r4, r2
 800648a:	4605      	mov	r5, r0
 800648c:	b118      	cbz	r0, 8006496 <__swbuf_r+0x12>
 800648e:	6a03      	ldr	r3, [r0, #32]
 8006490:	b90b      	cbnz	r3, 8006496 <__swbuf_r+0x12>
 8006492:	f7fe fa25 	bl	80048e0 <__sinit>
 8006496:	69a3      	ldr	r3, [r4, #24]
 8006498:	60a3      	str	r3, [r4, #8]
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	071a      	lsls	r2, r3, #28
 800649e:	d501      	bpl.n	80064a4 <__swbuf_r+0x20>
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	b943      	cbnz	r3, 80064b6 <__swbuf_r+0x32>
 80064a4:	4621      	mov	r1, r4
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f82a 	bl	8006500 <__swsetup_r>
 80064ac:	b118      	cbz	r0, 80064b6 <__swbuf_r+0x32>
 80064ae:	f04f 37ff 	mov.w	r7, #4294967295
 80064b2:	4638      	mov	r0, r7
 80064b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	6922      	ldr	r2, [r4, #16]
 80064ba:	1a98      	subs	r0, r3, r2
 80064bc:	6963      	ldr	r3, [r4, #20]
 80064be:	b2f6      	uxtb	r6, r6
 80064c0:	4283      	cmp	r3, r0
 80064c2:	4637      	mov	r7, r6
 80064c4:	dc05      	bgt.n	80064d2 <__swbuf_r+0x4e>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4628      	mov	r0, r5
 80064ca:	f7ff fde9 	bl	80060a0 <_fflush_r>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d1ed      	bne.n	80064ae <__swbuf_r+0x2a>
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	60a3      	str	r3, [r4, #8]
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	6022      	str	r2, [r4, #0]
 80064de:	701e      	strb	r6, [r3, #0]
 80064e0:	6962      	ldr	r2, [r4, #20]
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d004      	beq.n	80064f2 <__swbuf_r+0x6e>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	07db      	lsls	r3, r3, #31
 80064ec:	d5e1      	bpl.n	80064b2 <__swbuf_r+0x2e>
 80064ee:	2e0a      	cmp	r6, #10
 80064f0:	d1df      	bne.n	80064b2 <__swbuf_r+0x2e>
 80064f2:	4621      	mov	r1, r4
 80064f4:	4628      	mov	r0, r5
 80064f6:	f7ff fdd3 	bl	80060a0 <_fflush_r>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d0d9      	beq.n	80064b2 <__swbuf_r+0x2e>
 80064fe:	e7d6      	b.n	80064ae <__swbuf_r+0x2a>

08006500 <__swsetup_r>:
 8006500:	b538      	push	{r3, r4, r5, lr}
 8006502:	4b29      	ldr	r3, [pc, #164]	@ (80065a8 <__swsetup_r+0xa8>)
 8006504:	4605      	mov	r5, r0
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	460c      	mov	r4, r1
 800650a:	b118      	cbz	r0, 8006514 <__swsetup_r+0x14>
 800650c:	6a03      	ldr	r3, [r0, #32]
 800650e:	b90b      	cbnz	r3, 8006514 <__swsetup_r+0x14>
 8006510:	f7fe f9e6 	bl	80048e0 <__sinit>
 8006514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006518:	0719      	lsls	r1, r3, #28
 800651a:	d422      	bmi.n	8006562 <__swsetup_r+0x62>
 800651c:	06da      	lsls	r2, r3, #27
 800651e:	d407      	bmi.n	8006530 <__swsetup_r+0x30>
 8006520:	2209      	movs	r2, #9
 8006522:	602a      	str	r2, [r5, #0]
 8006524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	f04f 30ff 	mov.w	r0, #4294967295
 800652e:	e033      	b.n	8006598 <__swsetup_r+0x98>
 8006530:	0758      	lsls	r0, r3, #29
 8006532:	d512      	bpl.n	800655a <__swsetup_r+0x5a>
 8006534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006536:	b141      	cbz	r1, 800654a <__swsetup_r+0x4a>
 8006538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800653c:	4299      	cmp	r1, r3
 800653e:	d002      	beq.n	8006546 <__swsetup_r+0x46>
 8006540:	4628      	mov	r0, r5
 8006542:	f7ff f8a7 	bl	8005694 <_free_r>
 8006546:	2300      	movs	r3, #0
 8006548:	6363      	str	r3, [r4, #52]	@ 0x34
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006550:	81a3      	strh	r3, [r4, #12]
 8006552:	2300      	movs	r3, #0
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	f043 0308 	orr.w	r3, r3, #8
 8006560:	81a3      	strh	r3, [r4, #12]
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	b94b      	cbnz	r3, 800657a <__swsetup_r+0x7a>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800656c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006570:	d003      	beq.n	800657a <__swsetup_r+0x7a>
 8006572:	4621      	mov	r1, r4
 8006574:	4628      	mov	r0, r5
 8006576:	f000 f883 	bl	8006680 <__smakebuf_r>
 800657a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657e:	f013 0201 	ands.w	r2, r3, #1
 8006582:	d00a      	beq.n	800659a <__swsetup_r+0x9a>
 8006584:	2200      	movs	r2, #0
 8006586:	60a2      	str	r2, [r4, #8]
 8006588:	6962      	ldr	r2, [r4, #20]
 800658a:	4252      	negs	r2, r2
 800658c:	61a2      	str	r2, [r4, #24]
 800658e:	6922      	ldr	r2, [r4, #16]
 8006590:	b942      	cbnz	r2, 80065a4 <__swsetup_r+0xa4>
 8006592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006596:	d1c5      	bne.n	8006524 <__swsetup_r+0x24>
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	0799      	lsls	r1, r3, #30
 800659c:	bf58      	it	pl
 800659e:	6962      	ldrpl	r2, [r4, #20]
 80065a0:	60a2      	str	r2, [r4, #8]
 80065a2:	e7f4      	b.n	800658e <__swsetup_r+0x8e>
 80065a4:	2000      	movs	r0, #0
 80065a6:	e7f7      	b.n	8006598 <__swsetup_r+0x98>
 80065a8:	20000054 	.word	0x20000054

080065ac <_raise_r>:
 80065ac:	291f      	cmp	r1, #31
 80065ae:	b538      	push	{r3, r4, r5, lr}
 80065b0:	4605      	mov	r5, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	d904      	bls.n	80065c0 <_raise_r+0x14>
 80065b6:	2316      	movs	r3, #22
 80065b8:	6003      	str	r3, [r0, #0]
 80065ba:	f04f 30ff 	mov.w	r0, #4294967295
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80065c2:	b112      	cbz	r2, 80065ca <_raise_r+0x1e>
 80065c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065c8:	b94b      	cbnz	r3, 80065de <_raise_r+0x32>
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 f830 	bl	8006630 <_getpid_r>
 80065d0:	4622      	mov	r2, r4
 80065d2:	4601      	mov	r1, r0
 80065d4:	4628      	mov	r0, r5
 80065d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065da:	f000 b817 	b.w	800660c <_kill_r>
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d00a      	beq.n	80065f8 <_raise_r+0x4c>
 80065e2:	1c59      	adds	r1, r3, #1
 80065e4:	d103      	bne.n	80065ee <_raise_r+0x42>
 80065e6:	2316      	movs	r3, #22
 80065e8:	6003      	str	r3, [r0, #0]
 80065ea:	2001      	movs	r0, #1
 80065ec:	e7e7      	b.n	80065be <_raise_r+0x12>
 80065ee:	2100      	movs	r1, #0
 80065f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065f4:	4620      	mov	r0, r4
 80065f6:	4798      	blx	r3
 80065f8:	2000      	movs	r0, #0
 80065fa:	e7e0      	b.n	80065be <_raise_r+0x12>

080065fc <raise>:
 80065fc:	4b02      	ldr	r3, [pc, #8]	@ (8006608 <raise+0xc>)
 80065fe:	4601      	mov	r1, r0
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	f7ff bfd3 	b.w	80065ac <_raise_r>
 8006606:	bf00      	nop
 8006608:	20000054 	.word	0x20000054

0800660c <_kill_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d07      	ldr	r5, [pc, #28]	@ (800662c <_kill_r+0x20>)
 8006610:	2300      	movs	r3, #0
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	4611      	mov	r1, r2
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	f7fa fc86 	bl	8000f2a <_kill>
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	d102      	bne.n	8006628 <_kill_r+0x1c>
 8006622:	682b      	ldr	r3, [r5, #0]
 8006624:	b103      	cbz	r3, 8006628 <_kill_r+0x1c>
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	bd38      	pop	{r3, r4, r5, pc}
 800662a:	bf00      	nop
 800662c:	20000514 	.word	0x20000514

08006630 <_getpid_r>:
 8006630:	f7fa bc73 	b.w	8000f1a <_getpid>

08006634 <__swhatbuf_r>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	460c      	mov	r4, r1
 8006638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663c:	2900      	cmp	r1, #0
 800663e:	b096      	sub	sp, #88	@ 0x58
 8006640:	4615      	mov	r5, r2
 8006642:	461e      	mov	r6, r3
 8006644:	da0d      	bge.n	8006662 <__swhatbuf_r+0x2e>
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800664c:	f04f 0100 	mov.w	r1, #0
 8006650:	bf14      	ite	ne
 8006652:	2340      	movne	r3, #64	@ 0x40
 8006654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006658:	2000      	movs	r0, #0
 800665a:	6031      	str	r1, [r6, #0]
 800665c:	602b      	str	r3, [r5, #0]
 800665e:	b016      	add	sp, #88	@ 0x58
 8006660:	bd70      	pop	{r4, r5, r6, pc}
 8006662:	466a      	mov	r2, sp
 8006664:	f000 f848 	bl	80066f8 <_fstat_r>
 8006668:	2800      	cmp	r0, #0
 800666a:	dbec      	blt.n	8006646 <__swhatbuf_r+0x12>
 800666c:	9901      	ldr	r1, [sp, #4]
 800666e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006676:	4259      	negs	r1, r3
 8006678:	4159      	adcs	r1, r3
 800667a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800667e:	e7eb      	b.n	8006658 <__swhatbuf_r+0x24>

08006680 <__smakebuf_r>:
 8006680:	898b      	ldrh	r3, [r1, #12]
 8006682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006684:	079d      	lsls	r5, r3, #30
 8006686:	4606      	mov	r6, r0
 8006688:	460c      	mov	r4, r1
 800668a:	d507      	bpl.n	800669c <__smakebuf_r+0x1c>
 800668c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	6123      	str	r3, [r4, #16]
 8006694:	2301      	movs	r3, #1
 8006696:	6163      	str	r3, [r4, #20]
 8006698:	b003      	add	sp, #12
 800669a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669c:	ab01      	add	r3, sp, #4
 800669e:	466a      	mov	r2, sp
 80066a0:	f7ff ffc8 	bl	8006634 <__swhatbuf_r>
 80066a4:	9f00      	ldr	r7, [sp, #0]
 80066a6:	4605      	mov	r5, r0
 80066a8:	4639      	mov	r1, r7
 80066aa:	4630      	mov	r0, r6
 80066ac:	f7ff f866 	bl	800577c <_malloc_r>
 80066b0:	b948      	cbnz	r0, 80066c6 <__smakebuf_r+0x46>
 80066b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b6:	059a      	lsls	r2, r3, #22
 80066b8:	d4ee      	bmi.n	8006698 <__smakebuf_r+0x18>
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	f043 0302 	orr.w	r3, r3, #2
 80066c2:	81a3      	strh	r3, [r4, #12]
 80066c4:	e7e2      	b.n	800668c <__smakebuf_r+0xc>
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	6020      	str	r0, [r4, #0]
 80066ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066d6:	b15b      	cbz	r3, 80066f0 <__smakebuf_r+0x70>
 80066d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f81d 	bl	800671c <_isatty_r>
 80066e2:	b128      	cbz	r0, 80066f0 <__smakebuf_r+0x70>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	f043 0301 	orr.w	r3, r3, #1
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	89a3      	ldrh	r3, [r4, #12]
 80066f2:	431d      	orrs	r5, r3
 80066f4:	81a5      	strh	r5, [r4, #12]
 80066f6:	e7cf      	b.n	8006698 <__smakebuf_r+0x18>

080066f8 <_fstat_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d07      	ldr	r5, [pc, #28]	@ (8006718 <_fstat_r+0x20>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	4604      	mov	r4, r0
 8006700:	4608      	mov	r0, r1
 8006702:	4611      	mov	r1, r2
 8006704:	602b      	str	r3, [r5, #0]
 8006706:	f7fa fc70 	bl	8000fea <_fstat>
 800670a:	1c43      	adds	r3, r0, #1
 800670c:	d102      	bne.n	8006714 <_fstat_r+0x1c>
 800670e:	682b      	ldr	r3, [r5, #0]
 8006710:	b103      	cbz	r3, 8006714 <_fstat_r+0x1c>
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	bd38      	pop	{r3, r4, r5, pc}
 8006716:	bf00      	nop
 8006718:	20000514 	.word	0x20000514

0800671c <_isatty_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d06      	ldr	r5, [pc, #24]	@ (8006738 <_isatty_r+0x1c>)
 8006720:	2300      	movs	r3, #0
 8006722:	4604      	mov	r4, r0
 8006724:	4608      	mov	r0, r1
 8006726:	602b      	str	r3, [r5, #0]
 8006728:	f7fa fc6f 	bl	800100a <_isatty>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_isatty_r+0x1a>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_isatty_r+0x1a>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	20000514 	.word	0x20000514

0800673c <_init>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	bf00      	nop
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr

08006748 <_fini>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	bf00      	nop
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr
