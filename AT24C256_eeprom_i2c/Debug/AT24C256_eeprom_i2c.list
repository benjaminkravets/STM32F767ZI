
AT24C256_eeprom_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08006788  08006788  00016788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b14  08006b14  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b1c  08006b1c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b1c  08006b1c  00016b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b20  08006b20  00016b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08006b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000210  08006d34  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08006d34  00020524  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d080  00000000  00000000  00020281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d2f  00000000  00000000  0002d301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002f030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000835  00000000  00000000  0002fad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280a0  00000000  00000000  00030305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ece3  00000000  00000000  000583a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f473e  00000000  00000000  00067088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003918  00000000  00000000  0015b7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000210 	.word	0x20000210
 800021c:	00000000 	.word	0x00000000
 8000220:	0800676c 	.word	0x0800676c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000214 	.word	0x20000214
 800023c:	0800676c 	.word	0x0800676c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <remaining_bytes>:




//return how many bytes remain to be read or written during current operation
uint16_t remaining_bytes (uint16_t size, uint16_t offset){
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	80fb      	strh	r3, [r7, #6]
 80005f8:	4613      	mov	r3, r2
 80005fa:	80bb      	strh	r3, [r7, #4]
	if ((size+offset) < PAGE_SIZE) return size;
 80005fc:	88fa      	ldrh	r2, [r7, #6]
 80005fe:	88bb      	ldrh	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	2b3f      	cmp	r3, #63	; 0x3f
 8000604:	dc01      	bgt.n	800060a <remaining_bytes+0x1e>
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	e003      	b.n	8000612 <remaining_bytes+0x26>
	else return PAGE_SIZE-offset;
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000610:	b29b      	uxth	r3, r3
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <eeprom_write_bytes>:
 * @param data pointer to bytes to write
 * @param size how many bytes to write
 *
 */

void eeprom_write_bytes(I2C_HandleTypeDef* i2c, uint16_t page, uint16_t offset, uint8_t* data, uint16_t size){
 800061e:	b580      	push	{r7, lr}
 8000620:	b08e      	sub	sp, #56	; 0x38
 8000622:	af04      	add	r7, sp, #16
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	817b      	strh	r3, [r7, #10]
 800062c:	4613      	mov	r3, r2
 800062e:	813b      	strh	r3, [r7, #8]

	//Calculate bits to shift page number by
	int page_address_offset = log(PAGE_SIZE) / log(2);
 8000630:	2306      	movs	r3, #6
 8000632:	61fb      	str	r3, [r7, #28]

	//start and end pages
	uint16_t start_page = page;
 8000634:	897b      	ldrh	r3, [r7, #10]
 8000636:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t end_page = page + ((size+offset)/PAGE_SIZE);
 8000638:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800063a:	893b      	ldrh	r3, [r7, #8]
 800063c:	4413      	add	r3, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	da00      	bge.n	8000644 <eeprom_write_bytes+0x26>
 8000642:	333f      	adds	r3, #63	; 0x3f
 8000644:	119b      	asrs	r3, r3, #6
 8000646:	b29a      	uxth	r2, r3
 8000648:	897b      	ldrh	r3, [r7, #10]
 800064a:	4413      	add	r3, r2
 800064c:	837b      	strh	r3, [r7, #26]

	//number of pages to write
	uint16_t pages_to_write = (end_page-start_page) + 1;
 800064e:	8b7a      	ldrh	r2, [r7, #26]
 8000650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	b29b      	uxth	r3, r3
 8000656:	3301      	adds	r3, #1
 8000658:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800065a:	2300      	movs	r3, #0
 800065c:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i = 0; i<pages_to_write; i++){
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
 8000662:	e034      	b.n	80006ce <eeprom_write_bytes+0xb0>

		//get operative memory address by making page start 9 bits more significant, then "adding" the page offset.
		uint16_t mem_address = start_page << page_address_offset | offset;
 8000664:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	b21a      	sxth	r2, r3
 800066e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000672:	4313      	orrs	r3, r2
 8000674:	b21b      	sxth	r3, r3
 8000676:	82fb      	strh	r3, [r7, #22]
		uint16_t bytes_remaining = remaining_bytes(size, offset);
 8000678:	893a      	ldrh	r2, [r7, #8]
 800067a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffb4 	bl	80005ec <remaining_bytes>
 8000684:	4603      	mov	r3, r0
 8000686:	82bb      	strh	r3, [r7, #20]

		//write to chip
		HAL_I2C_Mem_Write(i2c, EEPROM_ADDR, mem_address, 2, &data[pos], bytes_remaining, 1000);
 8000688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	8af9      	ldrh	r1, [r7, #22]
 8000690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000694:	9202      	str	r2, [sp, #8]
 8000696:	8aba      	ldrh	r2, [r7, #20]
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2302      	movs	r3, #2
 800069e:	460a      	mov	r2, r1
 80006a0:	21a0      	movs	r1, #160	; 0xa0
 80006a2:	68f8      	ldr	r0, [r7, #12]
 80006a4:	f001 f912 	bl	80018cc <HAL_I2C_Mem_Write>

		//increase the start page and adjust offset, size, and position going forward.
		start_page += 1;
 80006a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006aa:	3301      	adds	r3, #1
 80006ac:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	813b      	strh	r3, [r7, #8]
		size = size-bytes_remaining;
 80006b2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80006b4:	8abb      	ldrh	r3, [r7, #20]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	863b      	strh	r3, [r7, #48]	; 0x30
		pos += bytes_remaining;
 80006ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006bc:	8abb      	ldrh	r3, [r7, #20]
 80006be:	4413      	add	r3, r2
 80006c0:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay(5);
 80006c2:	2005      	movs	r0, #5
 80006c4:	f000 fd88 	bl	80011d8 <HAL_Delay>
	for (int i = 0; i<pages_to_write; i++){
 80006c8:	6a3b      	ldr	r3, [r7, #32]
 80006ca:	3301      	adds	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
 80006ce:	8b3b      	ldrh	r3, [r7, #24]
 80006d0:	6a3a      	ldr	r2, [r7, #32]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbc6      	blt.n	8000664 <eeprom_write_bytes+0x46>
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <eeprom_read_bytes>:
 * @param data pointer to which data is read
 * @param size how many bytes to read
 *
 */

void eeprom_read_bytes(I2C_HandleTypeDef* i2c, uint16_t page, uint16_t offset, uint8_t* data, uint16_t size){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	; 0x38
 80006e4:	af04      	add	r7, sp, #16
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	460b      	mov	r3, r1
 80006ec:	817b      	strh	r3, [r7, #10]
 80006ee:	4613      	mov	r3, r2
 80006f0:	813b      	strh	r3, [r7, #8]

	//Calculate bits to shift page number by
	int page_address_offset = log(PAGE_SIZE) / log(2);
 80006f2:	2306      	movs	r3, #6
 80006f4:	61fb      	str	r3, [r7, #28]

	//start and end pages
	uint16_t start_page = page;
 80006f6:	897b      	ldrh	r3, [r7, #10]
 80006f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t end_page = page + ((size+offset)/PAGE_SIZE);
 80006fa:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80006fc:	893b      	ldrh	r3, [r7, #8]
 80006fe:	4413      	add	r3, r2
 8000700:	2b00      	cmp	r3, #0
 8000702:	da00      	bge.n	8000706 <eeprom_read_bytes+0x26>
 8000704:	333f      	adds	r3, #63	; 0x3f
 8000706:	119b      	asrs	r3, r3, #6
 8000708:	b29a      	uxth	r2, r3
 800070a:	897b      	ldrh	r3, [r7, #10]
 800070c:	4413      	add	r3, r2
 800070e:	837b      	strh	r3, [r7, #26]

	//number of pages to write
	uint16_t pages_to_write = (end_page-start_page) + 1;
 8000710:	8b7a      	ldrh	r2, [r7, #26]
 8000712:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800071c:	2300      	movs	r3, #0
 800071e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i = 0; i<pages_to_write; i++){
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
 8000724:	e031      	b.n	800078a <eeprom_read_bytes+0xaa>

		//get operative memory address by making page start 9 bits more significant, then "adding" the page offset.
		uint16_t mem_address = start_page<<page_address_offset | offset;
 8000726:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	b21a      	sxth	r2, r3
 8000730:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	82fb      	strh	r3, [r7, #22]
		uint16_t bytes_remaining = remaining_bytes(size, offset);
 800073a:	893a      	ldrh	r2, [r7, #8]
 800073c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff53 	bl	80005ec <remaining_bytes>
 8000746:	4603      	mov	r3, r0
 8000748:	82bb      	strh	r3, [r7, #20]

		//write to chip
		HAL_I2C_Mem_Read(i2c, EEPROM_ADDR, mem_address, 2, &data[pos], bytes_remaining, 1000);
 800074a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	4413      	add	r3, r2
 8000750:	8af9      	ldrh	r1, [r7, #22]
 8000752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000756:	9202      	str	r2, [sp, #8]
 8000758:	8aba      	ldrh	r2, [r7, #20]
 800075a:	9201      	str	r2, [sp, #4]
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2302      	movs	r3, #2
 8000760:	460a      	mov	r2, r1
 8000762:	21a0      	movs	r1, #160	; 0xa0
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f001 f9c5 	bl	8001af4 <HAL_I2C_Mem_Read>

		//increase the start page and adjust offset, size, and position going forward.
		start_page += 1;
 800076a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800076c:	3301      	adds	r3, #1
 800076e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	813b      	strh	r3, [r7, #8]
		size = size-bytes_remaining;
 8000774:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000776:	8abb      	ldrh	r3, [r7, #20]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	863b      	strh	r3, [r7, #48]	; 0x30
		pos += bytes_remaining;
 800077c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800077e:	8abb      	ldrh	r3, [r7, #20]
 8000780:	4413      	add	r3, r2
 8000782:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i = 0; i<pages_to_write; i++){
 8000784:	6a3b      	ldr	r3, [r7, #32]
 8000786:	3301      	adds	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
 800078a:	8b3b      	ldrh	r3, [r7, #24]
 800078c:	6a3a      	ldr	r2, [r7, #32]
 800078e:	429a      	cmp	r2, r3
 8000790:	dbc9      	blt.n	8000726 <eeprom_read_bytes+0x46>

	}
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <eeprom_erasepage>:
 * Erase page
 * @param i2c handler for i2c instance to use
 * @param page to erase
 */

void eeprom_erasepage(I2C_HandleTypeDef* i2c, uint16_t page){
 800079c:	b580      	push	{r7, lr}
 800079e:	b098      	sub	sp, #96	; 0x60
 80007a0:	af04      	add	r7, sp, #16
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	807b      	strh	r3, [r7, #2]

	//Calculate bits to shift page number by
	int page_address_offset = log(PAGE_SIZE)/log(2);
 80007a8:	2306      	movs	r3, #6
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c

	//get operative memory address by making page start 9 bits more significant
	uint16_t mem_address = page << page_address_offset;
 80007ac:	887a      	ldrh	r2, [r7, #2]
 80007ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	//create memory of just zeroes to write to chip
	uint8_t data[PAGE_SIZE];
	memset(data,0xff,PAGE_SIZE);
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	2240      	movs	r2, #64	; 0x40
 80007be:	21ff      	movs	r1, #255	; 0xff
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 f908 	bl	80049d6 <memset>

	//write page as blank
	HAL_I2C_Mem_Write(i2c, EEPROM_ADDR, mem_address, 2, data, PAGE_SIZE, 1000);
 80007c6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	2340      	movs	r3, #64	; 0x40
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2302      	movs	r3, #2
 80007dc:	21a0      	movs	r1, #160	; 0xa0
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f001 f874 	bl	80018cc <HAL_I2C_Mem_Write>

	HAL_Delay(5);
 80007e4:	2005      	movs	r0, #5
 80007e6:	f000 fcf7 	bl	80011d8 <HAL_Delay>

}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <print_to_uart>:
uint8_t dataw2[] = "goodbye from STM32 to EEPROM!";

uint8_t datar1[100];
uint8_t datar2[100];

void print_to_uart(uint8_t* str){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, str, strlen(str), 500);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fd6f 	bl	80002e0 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	b29a      	uxth	r2, r3
 8000806:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	4806      	ldr	r0, [pc, #24]	; (8000828 <print_to_uart+0x34>)
 800080e:	f002 ff05 	bl	800361c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4, "\r\n", 2, 500);
 8000812:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000816:	2202      	movs	r2, #2
 8000818:	4904      	ldr	r1, [pc, #16]	; (800082c <print_to_uart+0x38>)
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <print_to_uart+0x34>)
 800081c:	f002 fefe 	bl	800361c <HAL_UART_Transmit>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000280 	.word	0x20000280
 800082c:	08006788 	.word	0x08006788

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f000 fc72 	bl	800111e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f859 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f921 	bl	8000a84 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000842:	f000 f8b1 	bl	80009a8 <MX_I2C1_Init>
  MX_UART4_Init();
 8000846:	f000 f8ed 	bl	8000a24 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  for (int i = 0; i < PAGE_SIZE; i++){
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	e008      	b.n	8000862 <main+0x32>
	  eeprom_erasepage(&hi2c1, i);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	b29b      	uxth	r3, r3
 8000854:	4619      	mov	r1, r3
 8000856:	4820      	ldr	r0, [pc, #128]	; (80008d8 <main+0xa8>)
 8000858:	f7ff ffa0 	bl	800079c <eeprom_erasepage>
  for (int i = 0; i < PAGE_SIZE; i++){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3301      	adds	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b3f      	cmp	r3, #63	; 0x3f
 8000866:	ddf3      	ble.n	8000850 <main+0x20>
  }

  eeprom_write_bytes(&hi2c1, 26, 7, dataw1, strlen((char *)dataw1));
 8000868:	481c      	ldr	r0, [pc, #112]	; (80008dc <main+0xac>)
 800086a:	f7ff fd39 	bl	80002e0 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29b      	uxth	r3, r3
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <main+0xac>)
 8000876:	2207      	movs	r2, #7
 8000878:	211a      	movs	r1, #26
 800087a:	4817      	ldr	r0, [pc, #92]	; (80008d8 <main+0xa8>)
 800087c:	f7ff fecf 	bl	800061e <eeprom_write_bytes>

  eeprom_write_bytes(&hi2c1, 42, 20, dataw2, strlen((char *)dataw2));
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <main+0xb0>)
 8000882:	f7ff fd2d 	bl	80002e0 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b29b      	uxth	r3, r3
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <main+0xb0>)
 800088e:	2214      	movs	r2, #20
 8000890:	212a      	movs	r1, #42	; 0x2a
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <main+0xa8>)
 8000894:	f7ff fec3 	bl	800061e <eeprom_write_bytes>


  eeprom_read_bytes(&hi2c1, 26, 0, datar1, 50);
 8000898:	2332      	movs	r3, #50	; 0x32
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <main+0xb4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	211a      	movs	r1, #26
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <main+0xa8>)
 80008a4:	f7ff ff1c 	bl	80006e0 <eeprom_read_bytes>

  eeprom_read_bytes(&hi2c1, 42, 15, datar2, 50);
 80008a8:	2332      	movs	r3, #50	; 0x32
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <main+0xb8>)
 80008ae:	220f      	movs	r2, #15
 80008b0:	212a      	movs	r1, #42	; 0x2a
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <main+0xa8>)
 80008b4:	f7ff ff14 	bl	80006e0 <eeprom_read_bytes>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <main+0xbc>)
 80008bc:	f000 ff5b 	bl	8001776 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80008c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c4:	f000 fc88 	bl	80011d8 <HAL_Delay>

	print_to_uart(&datar1);
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <main+0xb4>)
 80008ca:	f7ff ff93 	bl	80007f4 <print_to_uart>
	print_to_uart(&datar2);
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <main+0xb8>)
 80008d0:	f7ff ff90 	bl	80007f4 <print_to_uart>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008d4:	e7f0      	b.n	80008b8 <main+0x88>
 80008d6:	bf00      	nop
 80008d8:	2000022c 	.word	0x2000022c
 80008dc:	20000000 	.word	0x20000000
 80008e0:	2000001c 	.word	0x2000001c
 80008e4:	20000308 	.word	0x20000308
 80008e8:	2000036c 	.word	0x2000036c
 80008ec:	40020400 	.word	0x40020400

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	; 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2234      	movs	r2, #52	; 0x34
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 f869 	bl	80049d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <SystemClock_Config+0xb0>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <SystemClock_Config+0xb0>)
 800091a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091e:	6413      	str	r3, [r2, #64]	; 0x40
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <SystemClock_Config+0xb0>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <SystemClock_Config+0xb4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <SystemClock_Config+0xb4>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <SystemClock_Config+0xb4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000948:	2302      	movs	r3, #2
 800094a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094c:	2301      	movs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000950:	2310      	movs	r3, #16
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000954:	2300      	movs	r3, #0
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fd15 	bl	800238c <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000968:	f000 f9a2 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f001 ffad 	bl	80028e8 <HAL_RCC_ClockConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000994:	f000 f98c 	bl	8000cb0 <Error_Handler>
  }
}
 8000998:	bf00      	nop
 800099a:	3750      	adds	r7, #80	; 0x50
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40007000 	.word	0x40007000

080009a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_I2C1_Init+0x78>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009b4:	f240 220b 	movw	r2, #523	; 0x20b
 80009b8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009e6:	f000 fee1 	bl	80017ac <HAL_I2C_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 f95e 	bl	8000cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <MX_I2C1_Init+0x74>)
 80009f8:	f001 fc30 	bl	800225c <HAL_I2CEx_ConfigAnalogFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a02:	f000 f955 	bl	8000cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_I2C1_Init+0x74>)
 8000a0a:	f001 fc72 	bl	80022f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a14:	f000 f94c 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000022c 	.word	0x2000022c
 8000a20:	40005400 	.word	0x40005400

08000a24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a2a:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <MX_UART4_Init+0x5c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_UART4_Init+0x58>)
 8000a68:	f002 fd8a 	bl	8003580 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 f91d 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000280 	.word	0x20000280
 8000a80:	40004c00 	.word	0x40004c00

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a7e      	ldr	r2, [pc, #504]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b7c      	ldr	r3, [pc, #496]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a78      	ldr	r2, [pc, #480]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b73      	ldr	r3, [pc, #460]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a72      	ldr	r2, [pc, #456]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b70      	ldr	r3, [pc, #448]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b6d      	ldr	r3, [pc, #436]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a6c      	ldr	r2, [pc, #432]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b67      	ldr	r3, [pc, #412]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a66      	ldr	r2, [pc, #408]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b64      	ldr	r3, [pc, #400]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b12:	4b61      	ldr	r3, [pc, #388]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a60      	ldr	r2, [pc, #384]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b5e      	ldr	r3, [pc, #376]	; (8000c98 <MX_GPIO_Init+0x214>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b30:	485a      	ldr	r0, [pc, #360]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000b32:	f000 fe07 	bl	8001744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	4859      	ldr	r0, [pc, #356]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000b3c:	f000 fe02 	bl	8001744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4853      	ldr	r0, [pc, #332]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b58:	f000 fc48 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b5c:	2332      	movs	r3, #50	; 0x32
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	484b      	ldr	r0, [pc, #300]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b78:	f000 fc38 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b7c:	2386      	movs	r3, #134	; 0x86
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4844      	ldr	r0, [pc, #272]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000b98:	f000 fc28 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b9c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4839      	ldr	r0, [pc, #228]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000bb6:	f000 fc19 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4831      	ldr	r0, [pc, #196]	; (8000c9c <MX_GPIO_Init+0x218>)
 8000bd8:	f000 fc08 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	482c      	ldr	r0, [pc, #176]	; (8000cac <MX_GPIO_Init+0x228>)
 8000bfa:	f000 fbf7 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bfe:	2340      	movs	r3, #64	; 0x40
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4822      	ldr	r0, [pc, #136]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c16:	f000 fbe9 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481c      	ldr	r0, [pc, #112]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c2e:	f000 fbdd 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c44:	230a      	movs	r3, #10
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000c50:	f000 fbcc 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000c6a:	f000 fbbf 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c80:	230b      	movs	r3, #11
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c8c:	f000 fbae 	bl	80013ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c90:	bf00      	nop
 8000c92:	3730      	adds	r7, #48	; 0x30
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	40021800 	.word	0x40021800
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020c00 	.word	0x40020c00

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ae      	sub	sp, #184	; 0xb8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2290      	movs	r2, #144	; 0x90
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fe56 	bl	80049d6 <memset>
  if(hi2c->Instance==I2C1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_I2C_MspInit+0xb4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d13c      	bne.n	8000dae <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fff4 	bl	8002d30 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d4e:	f7ff ffaf 	bl	8000cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d72:	2312      	movs	r3, #18
 8000d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d84:	2304      	movs	r3, #4
 8000d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_I2C_MspInit+0xbc>)
 8000d92:	f000 fb2b 	bl	80013ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	37b8      	adds	r7, #184	; 0xb8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ae      	sub	sp, #184	; 0xb8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2290      	movs	r2, #144	; 0x90
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 fdf6 	bl	80049d6 <memset>
  if(huart->Instance==UART4)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a32      	ldr	r2, [pc, #200]	; (8000eb8 <HAL_UART_MspInit+0xf4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d15d      	bne.n	8000eb0 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 ff94 	bl	8002d30 <HAL_RCCEx_PeriphCLKConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e0e:	f7ff ff4f 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <HAL_UART_MspInit+0xf8>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a29      	ldr	r2, [pc, #164]	; (8000ebc <HAL_UART_MspInit+0xf8>)
 8000e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <HAL_UART_MspInit+0xf8>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <HAL_UART_MspInit+0xf8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_UART_MspInit+0xf8>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <HAL_UART_MspInit+0xf8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <HAL_UART_MspInit+0xf8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_UART_MspInit+0xf8>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <HAL_UART_MspInit+0xf8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e72:	2308      	movs	r3, #8
 8000e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0xfc>)
 8000e80:	f000 fab4 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <HAL_UART_MspInit+0x100>)
 8000eac:	f000 fa9e 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	37b8      	adds	r7, #184	; 0xb8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40004c00 	.word	0x40004c00
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020800 	.word	0x40020800

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f940 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return 1;
 8000f20:	2301      	movs	r3, #1
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_kill>:

int _kill(int pid, int sig)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f36:	f003 fda1 	bl	8004a7c <__errno>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2216      	movs	r2, #22
 8000f3e:	601a      	str	r2, [r3, #0]
  return -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_exit>:

void _exit (int status)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ffe7 	bl	8000f2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f5e:	e7fe      	b.n	8000f5e <_exit+0x12>

08000f60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e00a      	b.n	8000f88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f72:	f3af 8000 	nop.w
 8000f76:	4601      	mov	r1, r0
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	b2ca      	uxtb	r2, r1
 8000f80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	3301      	adds	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dbf0      	blt.n	8000f72 <_read+0x12>
  }

  return len;
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e009      	b.n	8000fc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	60ba      	str	r2, [r7, #8]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf1      	blt.n	8000fac <_write+0x12>
  }
  return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_close>:

int _close(int file)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffa:	605a      	str	r2, [r3, #4]
  return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_isatty>:

int _isatty(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f003 fd06 	bl	8004a7c <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20080000 	.word	0x20080000
 800109c:	00000400 	.word	0x00000400
 80010a0:	200003d0 	.word	0x200003d0
 80010a4:	20000528 	.word	0x20000528

080010a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d2:	490e      	ldr	r1, [pc, #56]	; (800110c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e8:	4c0b      	ldr	r4, [pc, #44]	; (8001118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f6:	f7ff ffd7 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f003 fcc5 	bl	8004a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fb97 	bl	8000830 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001110:	08006b24 	.word	0x08006b24
  ldr r2, =_sbss
 8001114:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001118:	20000524 	.word	0x20000524

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>

0800111e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f92e 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f805 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112e:	f7ff fdc5 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f93b 	bl	80013d2 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f911 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000003c 	.word	0x2000003c
 8001190:	20000044 	.word	0x20000044
 8001194:	20000040 	.word	0x20000040

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000044 	.word	0x20000044
 80011bc:	200003d4 	.word	0x200003d4

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200003d4 	.word	0x200003d4

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000044 	.word	0x20000044

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	4313      	orrs	r3, r2
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	; (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	05fa0000 	.word	0x05fa0000

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff47 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff5c 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffb0 	bl	8001340 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e175      	b.n	80016f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8164 	bne.w	80016f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d005      	beq.n	8001442 <HAL_GPIO_Init+0x56>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d130      	bne.n	80014a4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	f003 0201 	and.w	r2, r3, #1
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d017      	beq.n	80014e0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d123      	bne.n	8001534 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	69b9      	ldr	r1, [r7, #24]
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80be 	beq.w	80016f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b66      	ldr	r3, [pc, #408]	; (8001710 <HAL_GPIO_Init+0x324>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a65      	ldr	r2, [pc, #404]	; (8001710 <HAL_GPIO_Init+0x324>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_GPIO_Init+0x324>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800158e:	4a61      	ldr	r2, [pc, #388]	; (8001714 <HAL_GPIO_Init+0x328>)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a58      	ldr	r2, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x32c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d037      	beq.n	800162a <HAL_GPIO_Init+0x23e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a57      	ldr	r2, [pc, #348]	; (800171c <HAL_GPIO_Init+0x330>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d031      	beq.n	8001626 <HAL_GPIO_Init+0x23a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a56      	ldr	r2, [pc, #344]	; (8001720 <HAL_GPIO_Init+0x334>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d02b      	beq.n	8001622 <HAL_GPIO_Init+0x236>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a55      	ldr	r2, [pc, #340]	; (8001724 <HAL_GPIO_Init+0x338>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d025      	beq.n	800161e <HAL_GPIO_Init+0x232>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a54      	ldr	r2, [pc, #336]	; (8001728 <HAL_GPIO_Init+0x33c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01f      	beq.n	800161a <HAL_GPIO_Init+0x22e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a53      	ldr	r2, [pc, #332]	; (800172c <HAL_GPIO_Init+0x340>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x22a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a52      	ldr	r2, [pc, #328]	; (8001730 <HAL_GPIO_Init+0x344>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x226>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a51      	ldr	r2, [pc, #324]	; (8001734 <HAL_GPIO_Init+0x348>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x222>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a50      	ldr	r2, [pc, #320]	; (8001738 <HAL_GPIO_Init+0x34c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x21e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4f      	ldr	r2, [pc, #316]	; (800173c <HAL_GPIO_Init+0x350>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x21a>
 8001602:	2309      	movs	r3, #9
 8001604:	e012      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001606:	230a      	movs	r3, #10
 8001608:	e010      	b.n	800162c <HAL_GPIO_Init+0x240>
 800160a:	2308      	movs	r3, #8
 800160c:	e00e      	b.n	800162c <HAL_GPIO_Init+0x240>
 800160e:	2307      	movs	r3, #7
 8001610:	e00c      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001612:	2306      	movs	r3, #6
 8001614:	e00a      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001616:	2305      	movs	r3, #5
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x240>
 800161a:	2304      	movs	r3, #4
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x240>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x240>
 800162a:	2300      	movs	r3, #0
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800163c:	4935      	ldr	r1, [pc, #212]	; (8001714 <HAL_GPIO_Init+0x328>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <HAL_GPIO_Init+0x354>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166e:	4a34      	ldr	r2, [pc, #208]	; (8001740 <HAL_GPIO_Init+0x354>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <HAL_GPIO_Init+0x354>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001698:	4a29      	ldr	r2, [pc, #164]	; (8001740 <HAL_GPIO_Init+0x354>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169e:	4b28      	ldr	r3, [pc, #160]	; (8001740 <HAL_GPIO_Init+0x354>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c2:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <HAL_GPIO_Init+0x354>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_GPIO_Init+0x354>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_GPIO_Init+0x354>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f67f ae86 	bls.w	800140c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40013800 	.word	0x40013800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021000 	.word	0x40021000
 800172c:	40021400 	.word	0x40021400
 8001730:	40021800 	.word	0x40021800
 8001734:	40021c00 	.word	0x40021c00
 8001738:	40022000 	.word	0x40022000
 800173c:	40022400 	.word	0x40022400
 8001740:	40013c00 	.word	0x40013c00

08001744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	4613      	mov	r3, r2
 8001752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001754:	787b      	ldrb	r3, [r7, #1]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001760:	e003      	b.n	800176a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	041a      	lsls	r2, r3, #16
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	619a      	str	r2, [r3, #24]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001788:	887a      	ldrh	r2, [r7, #2]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4013      	ands	r3, r2
 800178e:	041a      	lsls	r2, r3, #16
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43d9      	mvns	r1, r3
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	400b      	ands	r3, r1
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fa96 	bl	8000d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	; 0x24
 80017dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800180c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e006      	b.n	8001834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d104      	bne.n	8001846 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001844:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_I2C_Init+0x11c>)
 8001852:	430b      	orrs	r3, r1
 8001854:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001864:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69d9      	ldr	r1, [r3, #28]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	02008000 	.word	0x02008000

080018cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	817b      	strh	r3, [r7, #10]
 80018de:	460b      	mov	r3, r1
 80018e0:	813b      	strh	r3, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	f040 80f9 	bne.w	8001ae6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_I2C_Mem_Write+0x34>
 80018fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001906:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0ed      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_I2C_Mem_Write+0x4e>
 8001916:	2302      	movs	r3, #2
 8001918:	e0e6      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001922:	f7ff fc4d 	bl	80011c0 <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2319      	movs	r3, #25
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 fac3 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0d1      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2221      	movs	r2, #33	; 0x21
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2240      	movs	r2, #64	; 0x40
 8001950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800196c:	88f8      	ldrh	r0, [r7, #6]
 800196e:	893a      	ldrh	r2, [r7, #8]
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4603      	mov	r3, r0
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f9d3 	bl	8001d28 <I2C_RequestMemoryWrite>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0a9      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001998:	b29b      	uxth	r3, r3
 800199a:	2bff      	cmp	r3, #255	; 0xff
 800199c:	d90e      	bls.n	80019bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	22ff      	movs	r2, #255	; 0xff
 80019a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	8979      	ldrh	r1, [r7, #10]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fc1f 	bl	80021f8 <I2C_TransferConfig>
 80019ba:	e00f      	b.n	80019dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	8979      	ldrh	r1, [r7, #10]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fc0e 	bl	80021f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 faad 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e07b      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d034      	beq.n	8001a94 <HAL_I2C_Mem_Write+0x1c8>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d130      	bne.n	8001a94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fa3f 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e04d      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2bff      	cmp	r3, #255	; 0xff
 8001a54:	d90e      	bls.n	8001a74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	22ff      	movs	r2, #255	; 0xff
 8001a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	8979      	ldrh	r1, [r7, #10]
 8001a64:	2300      	movs	r3, #0
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fbc3 	bl	80021f8 <I2C_TransferConfig>
 8001a72:	e00f      	b.n	8001a94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	8979      	ldrh	r1, [r7, #10]
 8001a86:	2300      	movs	r3, #0
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 fbb2 	bl	80021f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d19e      	bne.n	80019dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fa8c 	bl	8001fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e01a      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_I2C_Mem_Write+0x224>)
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	fe00e800 	.word	0xfe00e800

08001af4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	817b      	strh	r3, [r7, #10]
 8001b06:	460b      	mov	r3, r1
 8001b08:	813b      	strh	r3, [r7, #8]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	f040 80fd 	bne.w	8001d16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_I2C_Mem_Read+0x34>
 8001b22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0f1      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2C_Mem_Read+0x4e>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e0ea      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b4a:	f7ff fb39 	bl	80011c0 <HAL_GetTick>
 8001b4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2319      	movs	r3, #25
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f9af 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0d5      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2222      	movs	r2, #34	; 0x22
 8001b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2240      	movs	r2, #64	; 0x40
 8001b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b94:	88f8      	ldrh	r0, [r7, #6]
 8001b96:	893a      	ldrh	r2, [r7, #8]
 8001b98:	8979      	ldrh	r1, [r7, #10]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f913 	bl	8001dd0 <I2C_RequestMemoryRead>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0ad      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	d90e      	bls.n	8001be4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	22ff      	movs	r2, #255	; 0xff
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	8979      	ldrh	r1, [r7, #10]
 8001bd4:	4b52      	ldr	r3, [pc, #328]	; (8001d20 <HAL_I2C_Mem_Read+0x22c>)
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 fb0b 	bl	80021f8 <I2C_TransferConfig>
 8001be2:	e00f      	b.n	8001c04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	8979      	ldrh	r1, [r7, #10]
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_I2C_Mem_Read+0x22c>)
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 fafa 	bl	80021f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f956 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e07c      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d034      	beq.n	8001cc4 <HAL_I2C_Mem_Read+0x1d0>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d130      	bne.n	8001cc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f927 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e04d      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2bff      	cmp	r3, #255	; 0xff
 8001c84:	d90e      	bls.n	8001ca4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	22ff      	movs	r2, #255	; 0xff
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	8979      	ldrh	r1, [r7, #10]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 faab 	bl	80021f8 <I2C_TransferConfig>
 8001ca2:	e00f      	b.n	8001cc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	8979      	ldrh	r1, [r7, #10]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fa9a 	bl	80021f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d19a      	bne.n	8001c04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f974 	bl	8001fc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e01a      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_I2C_Mem_Read+0x230>)
 8001cf6:	400b      	ands	r3, r1
 8001cf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d16:	2302      	movs	r3, #2
  }
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	80002400 	.word	0x80002400
 8001d24:	fe00e800 	.word	0xfe00e800

08001d28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	813b      	strh	r3, [r7, #8]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	8979      	ldrh	r1, [r7, #10]
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <I2C_RequestMemoryWrite+0xa4>)
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fa51 	bl	80021f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	69b9      	ldr	r1, [r7, #24]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f8f0 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e02c      	b.n	8001dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d70:	893b      	ldrh	r3, [r7, #8]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
 8001d7a:	e015      	b.n	8001da8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d7c:	893b      	ldrh	r3, [r7, #8]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	69b9      	ldr	r1, [r7, #24]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 f8d6 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e012      	b.n	8001dc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d9e:	893b      	ldrh	r3, [r7, #8]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2200      	movs	r2, #0
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f884 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	80002000 	.word	0x80002000

08001dd0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	817b      	strh	r3, [r7, #10]
 8001de2:	460b      	mov	r3, r1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	8979      	ldrh	r1, [r7, #10]
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <I2C_RequestMemoryRead+0xa4>)
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2300      	movs	r3, #0
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f9fe 	bl	80021f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	69b9      	ldr	r1, [r7, #24]
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f89d 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e02c      	b.n	8001e6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e16:	893b      	ldrh	r3, [r7, #8]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e20:	e015      	b.n	8001e4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e22:	893b      	ldrh	r3, [r7, #8]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f883 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e012      	b.n	8001e6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e44:	893b      	ldrh	r3, [r7, #8]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2200      	movs	r2, #0
 8001e56:	2140      	movs	r1, #64	; 0x40
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 f831 	bl	8001ec0 <I2C_WaitOnFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	80002000 	.word	0x80002000

08001e78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d103      	bne.n	8001e96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d007      	beq.n	8001eb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	619a      	str	r2, [r3, #24]
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed0:	e022      	b.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d01e      	beq.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7ff f971 	bl	80011c0 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d113      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00f      	b.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4013      	ands	r3, r2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d0cd      	beq.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f4c:	e02c      	b.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f870 	bl	8002038 <I2C_IsErrorOccurred>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e02a      	b.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d01e      	beq.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6a:	f7ff f929 	bl	80011c0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d302      	bcc.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d113      	bne.n	8001fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e007      	b.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d1cb      	bne.n	8001f4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fcc:	e028      	b.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f830 	bl	8002038 <I2C_IsErrorOccurred>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e026      	b.n	8002030 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7ff f8ed 	bl	80011c0 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d113      	bne.n	8002020 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d1cf      	bne.n	8001fce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d068      	beq.n	8002136 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2210      	movs	r2, #16
 800206a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800206c:	e049      	b.n	8002102 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d045      	beq.n	8002102 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002076:	f7ff f8a3 	bl	80011c0 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d302      	bcc.n	800208c <I2C_IsErrorOccurred+0x54>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d13a      	bne.n	8002102 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002096:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800209e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ae:	d121      	bne.n	80020f4 <I2C_IsErrorOccurred+0xbc>
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020b6:	d01d      	beq.n	80020f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d01a      	beq.n	80020f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020ce:	f7ff f877 	bl	80011c0 <HAL_GetTick>
 80020d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d4:	e00e      	b.n	80020f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020d6:	f7ff f873 	bl	80011c0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b19      	cmp	r3, #25
 80020e2:	d907      	bls.n	80020f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	f043 0320 	orr.w	r3, r3, #32
 80020ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80020f2:	e006      	b.n	8002102 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d1e9      	bne.n	80020d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b20      	cmp	r3, #32
 800210e:	d003      	beq.n	8002118 <I2C_IsErrorOccurred+0xe0>
 8002110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0aa      	beq.n	800206e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2220      	movs	r2, #32
 8002126:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002158:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00b      	beq.n	80021a4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80021a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01c      	beq.n	80021e6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff fe63 	bl	8001e78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <I2C_IsErrorOccurred+0x1bc>)
 80021be:	400b      	ands	r3, r1
 80021c0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80021e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	fe00e800 	.word	0xfe00e800

080021f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	817b      	strh	r3, [r7, #10]
 8002206:	4613      	mov	r3, r2
 8002208:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800220a:	897b      	ldrh	r3, [r7, #10]
 800220c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002210:	7a7b      	ldrb	r3, [r7, #9]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002218:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	4313      	orrs	r3, r2
 8002222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002226:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	0d5b      	lsrs	r3, r3, #21
 8002232:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <I2C_TransferConfig+0x60>)
 8002238:	430b      	orrs	r3, r1
 800223a:	43db      	mvns	r3, r3
 800223c:	ea02 0103 	and.w	r1, r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	03ff63ff 	.word	0x03ff63ff

0800225c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	d138      	bne.n	80022e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800227c:	2302      	movs	r3, #2
 800227e:	e032      	b.n	80022e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e000      	b.n	80022e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
  }
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b20      	cmp	r3, #32
 8002306:	d139      	bne.n	800237c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002312:	2302      	movs	r3, #2
 8002314:	e033      	b.n	800237e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2224      	movs	r2, #36	; 0x24
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002344:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e29b      	b.n	80028da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8087 	beq.w	80024be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b0:	4b96      	ldr	r3, [pc, #600]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d00c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023bc:	4b93      	ldr	r3, [pc, #588]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d112      	bne.n	80023ee <HAL_RCC_OscConfig+0x62>
 80023c8:	4b90      	ldr	r3, [pc, #576]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d4:	d10b      	bne.n	80023ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d6:	4b8d      	ldr	r3, [pc, #564]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06c      	beq.n	80024bc <HAL_RCC_OscConfig+0x130>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d168      	bne.n	80024bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e275      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x7a>
 80023f8:	4b84      	ldr	r3, [pc, #528]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a83      	ldr	r2, [pc, #524]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e02e      	b.n	8002464 <HAL_RCC_OscConfig+0xd8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x9c>
 800240e:	4b7f      	ldr	r3, [pc, #508]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7e      	ldr	r2, [pc, #504]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b7c      	ldr	r3, [pc, #496]	; (800260c <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7b      	ldr	r2, [pc, #492]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e01d      	b.n	8002464 <HAL_RCC_OscConfig+0xd8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0xc0>
 8002432:	4b76      	ldr	r3, [pc, #472]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a75      	ldr	r2, [pc, #468]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b73      	ldr	r3, [pc, #460]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a72      	ldr	r2, [pc, #456]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0xd8>
 800244c:	4b6f      	ldr	r3, [pc, #444]	; (800260c <HAL_RCC_OscConfig+0x280>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a6e      	ldr	r2, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b6c      	ldr	r3, [pc, #432]	; (800260c <HAL_RCC_OscConfig+0x280>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6b      	ldr	r2, [pc, #428]	; (800260c <HAL_RCC_OscConfig+0x280>)
 800245e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe fea8 	bl	80011c0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe fea4 	bl	80011c0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e229      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4b61      	ldr	r3, [pc, #388]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0xe8>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fe94 	bl	80011c0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7fe fe90 	bl	80011c0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e215      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	4b57      	ldr	r3, [pc, #348]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x110>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d069      	beq.n	800259e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ca:	4b50      	ldr	r3, [pc, #320]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d6:	4b4d      	ldr	r3, [pc, #308]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d11c      	bne.n	800251c <HAL_RCC_OscConfig+0x190>
 80024e2:	4b4a      	ldr	r3, [pc, #296]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d116      	bne.n	800251c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_RCC_OscConfig+0x17a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e1e9      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	493d      	ldr	r1, [pc, #244]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251a:	e040      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d023      	beq.n	800256c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a38      	ldr	r2, [pc, #224]	; (800260c <HAL_RCC_OscConfig+0x280>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fe46 	bl	80011c0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fe42 	bl	80011c0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1c7      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	4b30      	ldr	r3, [pc, #192]	; (800260c <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4929      	ldr	r1, [pc, #164]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
 800256a:	e018      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCC_OscConfig+0x280>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fe22 	bl	80011c0 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002580:	f7fe fe1e 	bl	80011c0 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1a3      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b1e      	ldr	r3, [pc, #120]	; (800260c <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d038      	beq.n	800261c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d019      	beq.n	80025e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80025b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fe fdff 	bl	80011c0 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c6:	f7fe fdfb 	bl	80011c0 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e180      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80025da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x23a>
 80025e4:	e01a      	b.n	800261c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80025e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_RCC_OscConfig+0x280>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe fde5 	bl	80011c0 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fa:	f7fe fde1 	bl	80011c0 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d903      	bls.n	8002610 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e166      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
 800260c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	4b92      	ldr	r3, [pc, #584]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ee      	bne.n	80025fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80a4 	beq.w	8002772 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262a:	4b8c      	ldr	r3, [pc, #560]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	4b89      	ldr	r3, [pc, #548]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a88      	ldr	r2, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b86      	ldr	r3, [pc, #536]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002652:	4b83      	ldr	r3, [pc, #524]	; (8002860 <HAL_RCC_OscConfig+0x4d4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800265e:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0x4d4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7f      	ldr	r2, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x4d4>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe fda9 	bl	80011c0 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe fda5 	bl	80011c0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b64      	cmp	r3, #100	; 0x64
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e12a      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCC_OscConfig+0x4d4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x31a>
 8002698:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a6f      	ldr	r2, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	e02d      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x33c>
 80026ae:	4b6b      	ldr	r3, [pc, #428]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a6a      	ldr	r2, [pc, #424]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ba:	4b68      	ldr	r3, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a67      	ldr	r2, [pc, #412]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	e01c      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x35e>
 80026d0:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a61      	ldr	r2, [pc, #388]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	4b5f      	ldr	r3, [pc, #380]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a5e      	ldr	r2, [pc, #376]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
 80026ea:	4b5c      	ldr	r3, [pc, #368]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a5b      	ldr	r2, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a58      	ldr	r2, [pc, #352]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d015      	beq.n	8002736 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7fe fd59 	bl	80011c0 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fd55 	bl	80011c0 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0d8      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ee      	beq.n	8002712 <HAL_RCC_OscConfig+0x386>
 8002734:	e014      	b.n	8002760 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe fd43 	bl	80011c0 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fd3f 	bl	80011c0 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0c2      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ee      	bne.n	800273e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80ae 	beq.w	80028d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277c:	4b37      	ldr	r3, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	d06d      	beq.n	8002864 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d14b      	bne.n	8002828 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002790:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a31      	ldr	r2, [pc, #196]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fd10 	bl	80011c0 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe fd0c 	bl	80011c0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e091      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	3b01      	subs	r3, #1
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	071b      	lsls	r3, r3, #28
 80027ee:	491b      	ldr	r1, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a18      	ldr	r2, [pc, #96]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fcde 	bl	80011c0 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fcda 	bl	80011c0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e05f      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x47c>
 8002826:	e057      	b.n	80028d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 800282e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fcc4 	bl	80011c0 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fcc0 	bl	80011c0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e045      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCC_OscConfig+0x4d0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x4b0>
 800285a:	e03d      	b.n	80028d8 <HAL_RCC_OscConfig+0x54c>
 800285c:	40023800 	.word	0x40023800
 8002860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_RCC_OscConfig+0x558>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d030      	beq.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d129      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d122      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800289a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800289c:	4293      	cmp	r3, r2
 800289e:	d119      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d10f      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0d0      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d910      	bls.n	8002930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 020f 	bic.w	r2, r3, #15
 8002916:	4965      	ldr	r1, [pc, #404]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0b8      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d020      	beq.n	800297e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002948:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800294e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002952:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a52      	ldr	r2, [pc, #328]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800296a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	494d      	ldr	r1, [pc, #308]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d040      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d115      	bne.n	80029ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e07f      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e073      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06b      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4936      	ldr	r1, [pc, #216]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe fbf0 	bl	80011c0 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe fbec 	bl	80011c0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e053      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d210      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 020f 	bic.w	r2, r3, #15
 8002a22:	4922      	ldr	r1, [pc, #136]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e032      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4916      	ldr	r1, [pc, #88]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a7a:	f000 f821 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	490a      	ldr	r1, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8002a8c:	5ccb      	ldrb	r3, [r1, r3]
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1d4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fb4c 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023c00 	.word	0x40023c00
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	0800678c 	.word	0x0800678c
 8002ab8:	2000003c 	.word	0x2000003c
 8002abc:	20000040 	.word	0x20000040

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac4:	b094      	sub	sp, #80	; 0x50
 8002ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	647b      	str	r3, [r7, #68]	; 0x44
 8002acc:	2300      	movs	r3, #0
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad8:	4b79      	ldr	r3, [pc, #484]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d00d      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	f200 80e1 	bhi.w	8002cac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x34>
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0x3a>
 8002af2:	e0db      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af8:	e0db      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002afa:	4b72      	ldr	r3, [pc, #456]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002afc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002afe:	e0d8      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b00:	4b6f      	ldr	r3, [pc, #444]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b0a:	4b6d      	ldr	r3, [pc, #436]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d063      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b16:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	099b      	lsrs	r3, r3, #6
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b32:	4622      	mov	r2, r4
 8002b34:	462b      	mov	r3, r5
 8002b36:	f04f 0000 	mov.w	r0, #0
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	0159      	lsls	r1, r3, #5
 8002b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b44:	0150      	lsls	r0, r2, #5
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	1a51      	subs	r1, r2, r1
 8002b4e:	6139      	str	r1, [r7, #16]
 8002b50:	4629      	mov	r1, r5
 8002b52:	eb63 0301 	sbc.w	r3, r3, r1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b64:	4659      	mov	r1, fp
 8002b66:	018b      	lsls	r3, r1, #6
 8002b68:	4651      	mov	r1, sl
 8002b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b6e:	4651      	mov	r1, sl
 8002b70:	018a      	lsls	r2, r1, #6
 8002b72:	4651      	mov	r1, sl
 8002b74:	ebb2 0801 	subs.w	r8, r2, r1
 8002b78:	4659      	mov	r1, fp
 8002b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b92:	4690      	mov	r8, r2
 8002b94:	4699      	mov	r9, r3
 8002b96:	4623      	mov	r3, r4
 8002b98:	eb18 0303 	adds.w	r3, r8, r3
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	eb49 0303 	adc.w	r3, r9, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	028b      	lsls	r3, r1, #10
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	028a      	lsls	r2, r1, #10
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bd0:	f7fd fb8e 	bl	80002f0 <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bdc:	e058      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	2200      	movs	r2, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	4611      	mov	r1, r2
 8002bea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	f04f 0000 	mov.w	r0, #0
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	0159      	lsls	r1, r3, #5
 8002c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0a:	0150      	lsls	r0, r2, #5
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4641      	mov	r1, r8
 8002c12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c16:	4649      	mov	r1, r9
 8002c18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c30:	ebb2 040a 	subs.w	r4, r2, sl
 8002c34:	eb63 050b 	sbc.w	r5, r3, fp
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	00eb      	lsls	r3, r5, #3
 8002c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c46:	00e2      	lsls	r2, r4, #3
 8002c48:	4614      	mov	r4, r2
 8002c4a:	461d      	mov	r5, r3
 8002c4c:	4643      	mov	r3, r8
 8002c4e:	18e3      	adds	r3, r4, r3
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	464b      	mov	r3, r9
 8002c54:	eb45 0303 	adc.w	r3, r5, r3
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c66:	4629      	mov	r1, r5
 8002c68:	028b      	lsls	r3, r1, #10
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c70:	4621      	mov	r1, r4
 8002c72:	028a      	lsls	r2, r1, #10
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	61fa      	str	r2, [r7, #28]
 8002c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c84:	f7fd fb34 	bl	80002f0 <__aeabi_uldivmod>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3750      	adds	r7, #80	; 0x50
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	00f42400 	.word	0x00f42400

08002cc8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000003c 	.word	0x2000003c

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	0800679c 	.word	0x0800679c

08002d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d0c:	f7ff ffdc 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0b5b      	lsrs	r3, r3, #13
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	0800679c 	.word	0x0800679c

08002d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d012      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d58:	4b69      	ldr	r3, [pc, #420]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a68      	ldr	r2, [pc, #416]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d62:	6093      	str	r3, [r2, #8]
 8002d64:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	4964      	ldr	r1, [pc, #400]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d017      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d8a:	4b5d      	ldr	r3, [pc, #372]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	4959      	ldr	r1, [pc, #356]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da8:	d101      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d017      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dc6:	4b4e      	ldr	r3, [pc, #312]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	494a      	ldr	r1, [pc, #296]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de4:	d101      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 808b 	beq.w	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e14:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e20:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a34      	ldr	r2, [pc, #208]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e38:	f7fe f9c2 	bl	80011c0 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7fe f9be 	bl	80011c0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e38f      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d035      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d02e      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e9e:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ea4:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d114      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe f986 	bl	80011c0 <HAL_GetTick>
 8002eb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe f982 	bl	80011c0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e351      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ee      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ee6:	d111      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef4:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ef6:	400b      	ands	r3, r1
 8002ef8:	4901      	ldr	r1, [pc, #4]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40007000 	.word	0x40007000
 8002f08:	0ffffcff 	.word	0x0ffffcff
 8002f0c:	4bac      	ldr	r3, [pc, #688]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4aab      	ldr	r2, [pc, #684]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f16:	6093      	str	r3, [r2, #8]
 8002f18:	4ba9      	ldr	r3, [pc, #676]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	49a6      	ldr	r1, [pc, #664]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f36:	4ba2      	ldr	r3, [pc, #648]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3c:	4aa0      	ldr	r2, [pc, #640]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f46:	4b9e      	ldr	r3, [pc, #632]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	499b      	ldr	r1, [pc, #620]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f64:	4b96      	ldr	r3, [pc, #600]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f72:	4993      	ldr	r1, [pc, #588]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f86:	4b8e      	ldr	r3, [pc, #568]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f94:	498a      	ldr	r1, [pc, #552]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fa8:	4b85      	ldr	r3, [pc, #532]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb6:	4982      	ldr	r1, [pc, #520]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fca:	4b7d      	ldr	r3, [pc, #500]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	4979      	ldr	r1, [pc, #484]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fec:	4b74      	ldr	r3, [pc, #464]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4971      	ldr	r1, [pc, #452]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800300e:	4b6c      	ldr	r3, [pc, #432]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	f023 020c 	bic.w	r2, r3, #12
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301c:	4968      	ldr	r1, [pc, #416]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003030:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	4960      	ldr	r1, [pc, #384]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003052:	4b5b      	ldr	r3, [pc, #364]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003060:	4957      	ldr	r1, [pc, #348]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003074:	4b52      	ldr	r3, [pc, #328]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	494f      	ldr	r1, [pc, #316]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003096:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	4946      	ldr	r1, [pc, #280]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	493e      	ldr	r1, [pc, #248]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030da:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e8:	4935      	ldr	r1, [pc, #212]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030fc:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800310a:	492d      	ldr	r1, [pc, #180]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d011      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800311e:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800312c:	4924      	ldr	r1, [pc, #144]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800313c:	d101      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316c:	4914      	ldr	r1, [pc, #80]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003180:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003190:	490b      	ldr	r1, [pc, #44]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00f      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031b4:	4902      	ldr	r1, [pc, #8]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031bc:	e002      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031d0:	4b8a      	ldr	r3, [pc, #552]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	4986      	ldr	r1, [pc, #536]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031f4:	4b81      	ldr	r3, [pc, #516]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003204:	497d      	ldr	r1, [pc, #500]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d006      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80d6 	beq.w	80033cc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003220:	4b76      	ldr	r3, [pc, #472]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a75      	ldr	r2, [pc, #468]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800322a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fd ffc8 	bl	80011c0 <HAL_GetTick>
 8003230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003234:	f7fd ffc4 	bl	80011c0 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e195      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003246:	4b6d      	ldr	r3, [pc, #436]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f0      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d021      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11d      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003266:	4b65      	ldr	r3, [pc, #404]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003274:	4b61      	ldr	r3, [pc, #388]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327a:	0e1b      	lsrs	r3, r3, #24
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	019a      	lsls	r2, r3, #6
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	431a      	orrs	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	071b      	lsls	r3, r3, #28
 800329a:	4958      	ldr	r1, [pc, #352]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d02e      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032cc:	d129      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032ce:	4b4b      	ldr	r3, [pc, #300]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032dc:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	0f1b      	lsrs	r3, r3, #28
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	019a      	lsls	r2, r3, #6
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	061b      	lsls	r3, r3, #24
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	071b      	lsls	r3, r3, #28
 8003302:	493e      	ldr	r1, [pc, #248]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800330a:	4b3c      	ldr	r3, [pc, #240]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003310:	f023 021f 	bic.w	r2, r3, #31
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	3b01      	subs	r3, #1
 800331a:	4938      	ldr	r1, [pc, #224]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01d      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800332e:	4b33      	ldr	r3, [pc, #204]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003334:	0e1b      	lsrs	r3, r3, #24
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800333c:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	0f1b      	lsrs	r3, r3, #28
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	019a      	lsls	r2, r3, #6
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	4926      	ldr	r1, [pc, #152]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d011      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	019a      	lsls	r2, r3, #6
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	071b      	lsls	r3, r3, #28
 8003392:	491a      	ldr	r1, [pc, #104]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a17      	ldr	r2, [pc, #92]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a6:	f7fd ff0b 	bl	80011c0 <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033ae:	f7fd ff07 	bl	80011c0 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b64      	cmp	r3, #100	; 0x64
 80033ba:	d901      	bls.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0d8      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 80ce 	bne.w	8003570 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a08      	ldr	r2, [pc, #32]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e0:	f7fd feee 	bl	80011c0 <HAL_GetTick>
 80033e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033e6:	e00b      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033e8:	f7fd feea 	bl	80011c0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d904      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0bb      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003400:	4b5e      	ldr	r3, [pc, #376]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800340c:	d0ec      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02e      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d12a      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003436:	4b51      	ldr	r3, [pc, #324]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003444:	4b4d      	ldr	r3, [pc, #308]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	0f1b      	lsrs	r3, r3, #28
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	019a      	lsls	r2, r3, #6
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	071b      	lsls	r3, r3, #28
 800346a:	4944      	ldr	r1, [pc, #272]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003472:	4b42      	ldr	r3, [pc, #264]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003478:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	3b01      	subs	r3, #1
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	493d      	ldr	r1, [pc, #244]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d022      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800349c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a0:	d11d      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	0e1b      	lsrs	r3, r3, #24
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034b0:	4b32      	ldr	r3, [pc, #200]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	0f1b      	lsrs	r3, r3, #28
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	019a      	lsls	r2, r3, #6
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	431a      	orrs	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	061b      	lsls	r3, r3, #24
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	071b      	lsls	r3, r3, #28
 80034d6:	4929      	ldr	r1, [pc, #164]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d028      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	0e1b      	lsrs	r3, r3, #24
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	019a      	lsls	r2, r3, #6
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	431a      	orrs	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	071b      	lsls	r3, r3, #28
 800351e:	4917      	ldr	r1, [pc, #92]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800352c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4911      	ldr	r1, [pc, #68]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003548:	f7fd fe3a 	bl	80011c0 <HAL_GetTick>
 800354c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003550:	f7fd fe36 	bl	80011c0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e007      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800356a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800356e:	d1ef      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800

08003580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e040      	b.n	8003614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fc0e 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8b0 	bl	8003724 <UART_SetConfig>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e022      	b.n	8003614 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fb08 	bl	8003bec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb8f 	bl	8003d30 <UART_CheckIdleState>
 8003612:	4603      	mov	r3, r0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	; 0x28
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003630:	2b20      	cmp	r3, #32
 8003632:	d171      	bne.n	8003718 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_UART_Transmit+0x24>
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e06a      	b.n	800371a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2221      	movs	r2, #33	; 0x21
 8003650:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003652:	f7fd fdb5 	bl	80011c0 <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d108      	bne.n	8003684 <HAL_UART_Transmit+0x68>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	e003      	b.n	800368c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800368c:	e02c      	b.n	80036e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fb96 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e038      	b.n	800371a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	3302      	adds	r3, #2
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	e007      	b.n	80036d6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	3301      	adds	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1cc      	bne.n	800368e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2200      	movs	r2, #0
 80036fc:	2140      	movs	r1, #64	; 0x40
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fb63 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e005      	b.n	800371a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4ba6      	ldr	r3, [pc, #664]	; (80039e8 <UART_SetConfig+0x2c4>)
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	6979      	ldr	r1, [r7, #20]
 8003758:	430b      	orrs	r3, r1
 800375a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	430a      	orrs	r2, r1
 8003794:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a94      	ldr	r2, [pc, #592]	; (80039ec <UART_SetConfig+0x2c8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d120      	bne.n	80037e2 <UART_SetConfig+0xbe>
 80037a0:	4b93      	ldr	r3, [pc, #588]	; (80039f0 <UART_SetConfig+0x2cc>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d816      	bhi.n	80037dc <UART_SetConfig+0xb8>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0x90>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d1 	.word	0x080037d1
 80037bc:	080037cb 	.word	0x080037cb
 80037c0:	080037d7 	.word	0x080037d7
 80037c4:	2301      	movs	r3, #1
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e150      	b.n	8003a6c <UART_SetConfig+0x348>
 80037ca:	2302      	movs	r3, #2
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e14d      	b.n	8003a6c <UART_SetConfig+0x348>
 80037d0:	2304      	movs	r3, #4
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e14a      	b.n	8003a6c <UART_SetConfig+0x348>
 80037d6:	2308      	movs	r3, #8
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e147      	b.n	8003a6c <UART_SetConfig+0x348>
 80037dc:	2310      	movs	r3, #16
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e144      	b.n	8003a6c <UART_SetConfig+0x348>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a83      	ldr	r2, [pc, #524]	; (80039f4 <UART_SetConfig+0x2d0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d132      	bne.n	8003852 <UART_SetConfig+0x12e>
 80037ec:	4b80      	ldr	r3, [pc, #512]	; (80039f0 <UART_SetConfig+0x2cc>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d828      	bhi.n	800384c <UART_SetConfig+0x128>
 80037fa:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <UART_SetConfig+0xdc>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003835 	.word	0x08003835
 8003804:	0800384d 	.word	0x0800384d
 8003808:	0800384d 	.word	0x0800384d
 800380c:	0800384d 	.word	0x0800384d
 8003810:	08003841 	.word	0x08003841
 8003814:	0800384d 	.word	0x0800384d
 8003818:	0800384d 	.word	0x0800384d
 800381c:	0800384d 	.word	0x0800384d
 8003820:	0800383b 	.word	0x0800383b
 8003824:	0800384d 	.word	0x0800384d
 8003828:	0800384d 	.word	0x0800384d
 800382c:	0800384d 	.word	0x0800384d
 8003830:	08003847 	.word	0x08003847
 8003834:	2300      	movs	r3, #0
 8003836:	77fb      	strb	r3, [r7, #31]
 8003838:	e118      	b.n	8003a6c <UART_SetConfig+0x348>
 800383a:	2302      	movs	r3, #2
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e115      	b.n	8003a6c <UART_SetConfig+0x348>
 8003840:	2304      	movs	r3, #4
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e112      	b.n	8003a6c <UART_SetConfig+0x348>
 8003846:	2308      	movs	r3, #8
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e10f      	b.n	8003a6c <UART_SetConfig+0x348>
 800384c:	2310      	movs	r3, #16
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e10c      	b.n	8003a6c <UART_SetConfig+0x348>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a68      	ldr	r2, [pc, #416]	; (80039f8 <UART_SetConfig+0x2d4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d120      	bne.n	800389e <UART_SetConfig+0x17a>
 800385c:	4b64      	ldr	r3, [pc, #400]	; (80039f0 <UART_SetConfig+0x2cc>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003866:	2b30      	cmp	r3, #48	; 0x30
 8003868:	d013      	beq.n	8003892 <UART_SetConfig+0x16e>
 800386a:	2b30      	cmp	r3, #48	; 0x30
 800386c:	d814      	bhi.n	8003898 <UART_SetConfig+0x174>
 800386e:	2b20      	cmp	r3, #32
 8003870:	d009      	beq.n	8003886 <UART_SetConfig+0x162>
 8003872:	2b20      	cmp	r3, #32
 8003874:	d810      	bhi.n	8003898 <UART_SetConfig+0x174>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <UART_SetConfig+0x15c>
 800387a:	2b10      	cmp	r3, #16
 800387c:	d006      	beq.n	800388c <UART_SetConfig+0x168>
 800387e:	e00b      	b.n	8003898 <UART_SetConfig+0x174>
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e0f2      	b.n	8003a6c <UART_SetConfig+0x348>
 8003886:	2302      	movs	r3, #2
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e0ef      	b.n	8003a6c <UART_SetConfig+0x348>
 800388c:	2304      	movs	r3, #4
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e0ec      	b.n	8003a6c <UART_SetConfig+0x348>
 8003892:	2308      	movs	r3, #8
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e0e9      	b.n	8003a6c <UART_SetConfig+0x348>
 8003898:	2310      	movs	r3, #16
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e0e6      	b.n	8003a6c <UART_SetConfig+0x348>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a56      	ldr	r2, [pc, #344]	; (80039fc <UART_SetConfig+0x2d8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d120      	bne.n	80038ea <UART_SetConfig+0x1c6>
 80038a8:	4b51      	ldr	r3, [pc, #324]	; (80039f0 <UART_SetConfig+0x2cc>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038b2:	2bc0      	cmp	r3, #192	; 0xc0
 80038b4:	d013      	beq.n	80038de <UART_SetConfig+0x1ba>
 80038b6:	2bc0      	cmp	r3, #192	; 0xc0
 80038b8:	d814      	bhi.n	80038e4 <UART_SetConfig+0x1c0>
 80038ba:	2b80      	cmp	r3, #128	; 0x80
 80038bc:	d009      	beq.n	80038d2 <UART_SetConfig+0x1ae>
 80038be:	2b80      	cmp	r3, #128	; 0x80
 80038c0:	d810      	bhi.n	80038e4 <UART_SetConfig+0x1c0>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <UART_SetConfig+0x1a8>
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d006      	beq.n	80038d8 <UART_SetConfig+0x1b4>
 80038ca:	e00b      	b.n	80038e4 <UART_SetConfig+0x1c0>
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e0cc      	b.n	8003a6c <UART_SetConfig+0x348>
 80038d2:	2302      	movs	r3, #2
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e0c9      	b.n	8003a6c <UART_SetConfig+0x348>
 80038d8:	2304      	movs	r3, #4
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e0c6      	b.n	8003a6c <UART_SetConfig+0x348>
 80038de:	2308      	movs	r3, #8
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e0c3      	b.n	8003a6c <UART_SetConfig+0x348>
 80038e4:	2310      	movs	r3, #16
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e0c0      	b.n	8003a6c <UART_SetConfig+0x348>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a44      	ldr	r2, [pc, #272]	; (8003a00 <UART_SetConfig+0x2dc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d125      	bne.n	8003940 <UART_SetConfig+0x21c>
 80038f4:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <UART_SetConfig+0x2cc>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003902:	d017      	beq.n	8003934 <UART_SetConfig+0x210>
 8003904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003908:	d817      	bhi.n	800393a <UART_SetConfig+0x216>
 800390a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390e:	d00b      	beq.n	8003928 <UART_SetConfig+0x204>
 8003910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003914:	d811      	bhi.n	800393a <UART_SetConfig+0x216>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <UART_SetConfig+0x1fe>
 800391a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391e:	d006      	beq.n	800392e <UART_SetConfig+0x20a>
 8003920:	e00b      	b.n	800393a <UART_SetConfig+0x216>
 8003922:	2300      	movs	r3, #0
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e0a1      	b.n	8003a6c <UART_SetConfig+0x348>
 8003928:	2302      	movs	r3, #2
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e09e      	b.n	8003a6c <UART_SetConfig+0x348>
 800392e:	2304      	movs	r3, #4
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e09b      	b.n	8003a6c <UART_SetConfig+0x348>
 8003934:	2308      	movs	r3, #8
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e098      	b.n	8003a6c <UART_SetConfig+0x348>
 800393a:	2310      	movs	r3, #16
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e095      	b.n	8003a6c <UART_SetConfig+0x348>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2f      	ldr	r2, [pc, #188]	; (8003a04 <UART_SetConfig+0x2e0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d125      	bne.n	8003996 <UART_SetConfig+0x272>
 800394a:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <UART_SetConfig+0x2cc>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003950:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003958:	d017      	beq.n	800398a <UART_SetConfig+0x266>
 800395a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800395e:	d817      	bhi.n	8003990 <UART_SetConfig+0x26c>
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003964:	d00b      	beq.n	800397e <UART_SetConfig+0x25a>
 8003966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396a:	d811      	bhi.n	8003990 <UART_SetConfig+0x26c>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <UART_SetConfig+0x254>
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003974:	d006      	beq.n	8003984 <UART_SetConfig+0x260>
 8003976:	e00b      	b.n	8003990 <UART_SetConfig+0x26c>
 8003978:	2301      	movs	r3, #1
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e076      	b.n	8003a6c <UART_SetConfig+0x348>
 800397e:	2302      	movs	r3, #2
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e073      	b.n	8003a6c <UART_SetConfig+0x348>
 8003984:	2304      	movs	r3, #4
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e070      	b.n	8003a6c <UART_SetConfig+0x348>
 800398a:	2308      	movs	r3, #8
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e06d      	b.n	8003a6c <UART_SetConfig+0x348>
 8003990:	2310      	movs	r3, #16
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e06a      	b.n	8003a6c <UART_SetConfig+0x348>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <UART_SetConfig+0x2e4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d138      	bne.n	8003a12 <UART_SetConfig+0x2ee>
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <UART_SetConfig+0x2cc>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80039aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039ae:	d017      	beq.n	80039e0 <UART_SetConfig+0x2bc>
 80039b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039b4:	d82a      	bhi.n	8003a0c <UART_SetConfig+0x2e8>
 80039b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ba:	d00b      	beq.n	80039d4 <UART_SetConfig+0x2b0>
 80039bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c0:	d824      	bhi.n	8003a0c <UART_SetConfig+0x2e8>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <UART_SetConfig+0x2aa>
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	d006      	beq.n	80039da <UART_SetConfig+0x2b6>
 80039cc:	e01e      	b.n	8003a0c <UART_SetConfig+0x2e8>
 80039ce:	2300      	movs	r3, #0
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e04b      	b.n	8003a6c <UART_SetConfig+0x348>
 80039d4:	2302      	movs	r3, #2
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e048      	b.n	8003a6c <UART_SetConfig+0x348>
 80039da:	2304      	movs	r3, #4
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e045      	b.n	8003a6c <UART_SetConfig+0x348>
 80039e0:	2308      	movs	r3, #8
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e042      	b.n	8003a6c <UART_SetConfig+0x348>
 80039e6:	bf00      	nop
 80039e8:	efff69f3 	.word	0xefff69f3
 80039ec:	40011000 	.word	0x40011000
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40004400 	.word	0x40004400
 80039f8:	40004800 	.word	0x40004800
 80039fc:	40004c00 	.word	0x40004c00
 8003a00:	40005000 	.word	0x40005000
 8003a04:	40011400 	.word	0x40011400
 8003a08:	40007800 	.word	0x40007800
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e02c      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a72      	ldr	r2, [pc, #456]	; (8003be0 <UART_SetConfig+0x4bc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d125      	bne.n	8003a68 <UART_SetConfig+0x344>
 8003a1c:	4b71      	ldr	r3, [pc, #452]	; (8003be4 <UART_SetConfig+0x4c0>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a2a:	d017      	beq.n	8003a5c <UART_SetConfig+0x338>
 8003a2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a30:	d817      	bhi.n	8003a62 <UART_SetConfig+0x33e>
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a36:	d00b      	beq.n	8003a50 <UART_SetConfig+0x32c>
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3c:	d811      	bhi.n	8003a62 <UART_SetConfig+0x33e>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <UART_SetConfig+0x326>
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a46:	d006      	beq.n	8003a56 <UART_SetConfig+0x332>
 8003a48:	e00b      	b.n	8003a62 <UART_SetConfig+0x33e>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e00d      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a50:	2302      	movs	r3, #2
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e00a      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a56:	2304      	movs	r3, #4
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e007      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e004      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a62:	2310      	movs	r3, #16
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e001      	b.n	8003a6c <UART_SetConfig+0x348>
 8003a68:	2310      	movs	r3, #16
 8003a6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a74:	d15b      	bne.n	8003b2e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a76:	7ffb      	ldrb	r3, [r7, #31]
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d828      	bhi.n	8003ace <UART_SetConfig+0x3aa>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <UART_SetConfig+0x360>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003ab9 	.word	0x08003ab9
 8003a90:	08003acf 	.word	0x08003acf
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003acf 	.word	0x08003acf
 8003a9c:	08003acf 	.word	0x08003acf
 8003aa0:	08003acf 	.word	0x08003acf
 8003aa4:	08003ac7 	.word	0x08003ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7ff f91a 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8003aac:	61b8      	str	r0, [r7, #24]
        break;
 8003aae:	e013      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab0:	f7ff f92a 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8003ab4:	61b8      	str	r0, [r7, #24]
        break;
 8003ab6:	e00f      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <UART_SetConfig+0x4c4>)
 8003aba:	61bb      	str	r3, [r7, #24]
        break;
 8003abc:	e00c      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003abe:	f7fe ffff 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8003ac2:	61b8      	str	r0, [r7, #24]
        break;
 8003ac4:	e008      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aca:	61bb      	str	r3, [r7, #24]
        break;
 8003acc:	e004      	b.n	8003ad8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	77bb      	strb	r3, [r7, #30]
        break;
 8003ad6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d074      	beq.n	8003bc8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	005a      	lsls	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	441a      	add	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	d916      	bls.n	8003b28 <UART_SetConfig+0x404>
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b00:	d212      	bcs.n	8003b28 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f023 030f 	bic.w	r3, r3, #15
 8003b0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	89fb      	ldrh	r3, [r7, #14]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	89fa      	ldrh	r2, [r7, #14]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	e04f      	b.n	8003bc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	77bb      	strb	r3, [r7, #30]
 8003b2c:	e04c      	b.n	8003bc8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b2e:	7ffb      	ldrb	r3, [r7, #31]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d828      	bhi.n	8003b86 <UART_SetConfig+0x462>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0x418>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003b69 	.word	0x08003b69
 8003b44:	08003b71 	.word	0x08003b71
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b77 	.word	0x08003b77
 8003b50:	08003b87 	.word	0x08003b87
 8003b54:	08003b87 	.word	0x08003b87
 8003b58:	08003b87 	.word	0x08003b87
 8003b5c:	08003b7f 	.word	0x08003b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b60:	f7ff f8be 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8003b64:	61b8      	str	r0, [r7, #24]
        break;
 8003b66:	e013      	b.n	8003b90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b68:	f7ff f8ce 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 8003b6c:	61b8      	str	r0, [r7, #24]
        break;
 8003b6e:	e00f      	b.n	8003b90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <UART_SetConfig+0x4c4>)
 8003b72:	61bb      	str	r3, [r7, #24]
        break;
 8003b74:	e00c      	b.n	8003b90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b76:	f7fe ffa3 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8003b7a:	61b8      	str	r0, [r7, #24]
        break;
 8003b7c:	e008      	b.n	8003b90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b82:	61bb      	str	r3, [r7, #24]
        break;
 8003b84:	e004      	b.n	8003b90 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d018      	beq.n	8003bc8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	085a      	lsrs	r2, r3, #1
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d909      	bls.n	8003bc4 <UART_SetConfig+0x4a0>
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb6:	d205      	bcs.n	8003bc4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	e001      	b.n	8003bc8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40007c00 	.word	0x40007c00
 8003be4:	40023800 	.word	0x40023800
 8003be8:	00f42400 	.word	0x00f42400

08003bec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01a      	beq.n	8003d02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cea:	d10a      	bne.n	8003d02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d40:	f7fd fa3e 	bl	80011c0 <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d10e      	bne.n	8003d72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f831 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e027      	b.n	8003dc2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d10e      	bne.n	8003d9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f81b 	bl	8003dca <UART_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e011      	b.n	8003dc2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b09c      	sub	sp, #112	; 0x70
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dda:	e0a7      	b.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	f000 80a3 	beq.w	8003f2c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fd f9eb 	bl	80011c0 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x32>
 8003df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d13f      	bne.n	8003e7c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e10:	667b      	str	r3, [r7, #100]	; 0x64
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e6      	bne.n	8003dfc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	663b      	str	r3, [r7, #96]	; 0x60
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e068      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d050      	beq.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e98:	d148      	bne.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ea2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e6      	bne.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ef6:	623a      	str	r2, [r7, #32]
 8003ef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	69f9      	ldr	r1, [r7, #28]
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e010      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	f43f af48 	beq.w	8003ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3770      	adds	r7, #112	; 0x70
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <__cvt>:
 8003f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f58:	ed2d 8b02 	vpush	{d8}
 8003f5c:	eeb0 8b40 	vmov.f64	d8, d0
 8003f60:	b085      	sub	sp, #20
 8003f62:	4617      	mov	r7, r2
 8003f64:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003f66:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003f68:	ee18 2a90 	vmov	r2, s17
 8003f6c:	f025 0520 	bic.w	r5, r5, #32
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	bfb6      	itet	lt
 8003f74:	222d      	movlt	r2, #45	; 0x2d
 8003f76:	2200      	movge	r2, #0
 8003f78:	eeb1 8b40 	vneglt.f64	d8, d0
 8003f7c:	2d46      	cmp	r5, #70	; 0x46
 8003f7e:	460c      	mov	r4, r1
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	d004      	beq.n	8003f8e <__cvt+0x38>
 8003f84:	2d45      	cmp	r5, #69	; 0x45
 8003f86:	d100      	bne.n	8003f8a <__cvt+0x34>
 8003f88:	3401      	adds	r4, #1
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	e000      	b.n	8003f90 <__cvt+0x3a>
 8003f8e:	2103      	movs	r1, #3
 8003f90:	ab03      	add	r3, sp, #12
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	ab02      	add	r3, sp, #8
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4622      	mov	r2, r4
 8003f9a:	4633      	mov	r3, r6
 8003f9c:	eeb0 0b48 	vmov.f64	d0, d8
 8003fa0:	f000 fe22 	bl	8004be8 <_dtoa_r>
 8003fa4:	2d47      	cmp	r5, #71	; 0x47
 8003fa6:	d101      	bne.n	8003fac <__cvt+0x56>
 8003fa8:	07fb      	lsls	r3, r7, #31
 8003faa:	d51a      	bpl.n	8003fe2 <__cvt+0x8c>
 8003fac:	2d46      	cmp	r5, #70	; 0x46
 8003fae:	eb00 0204 	add.w	r2, r0, r4
 8003fb2:	d10c      	bne.n	8003fce <__cvt+0x78>
 8003fb4:	7803      	ldrb	r3, [r0, #0]
 8003fb6:	2b30      	cmp	r3, #48	; 0x30
 8003fb8:	d107      	bne.n	8003fca <__cvt+0x74>
 8003fba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc2:	bf1c      	itt	ne
 8003fc4:	f1c4 0401 	rsbne	r4, r4, #1
 8003fc8:	6034      	strne	r4, [r6, #0]
 8003fca:	6833      	ldr	r3, [r6, #0]
 8003fcc:	441a      	add	r2, r3
 8003fce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd6:	bf08      	it	eq
 8003fd8:	9203      	streq	r2, [sp, #12]
 8003fda:	2130      	movs	r1, #48	; 0x30
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d307      	bcc.n	8003ff2 <__cvt+0x9c>
 8003fe2:	9b03      	ldr	r3, [sp, #12]
 8003fe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fe6:	1a1b      	subs	r3, r3, r0
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	b005      	add	sp, #20
 8003fec:	ecbd 8b02 	vpop	{d8}
 8003ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff2:	1c5c      	adds	r4, r3, #1
 8003ff4:	9403      	str	r4, [sp, #12]
 8003ff6:	7019      	strb	r1, [r3, #0]
 8003ff8:	e7f0      	b.n	8003fdc <__cvt+0x86>

08003ffa <__exponent>:
 8003ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2900      	cmp	r1, #0
 8004000:	bfb8      	it	lt
 8004002:	4249      	neglt	r1, r1
 8004004:	f803 2b02 	strb.w	r2, [r3], #2
 8004008:	bfb4      	ite	lt
 800400a:	222d      	movlt	r2, #45	; 0x2d
 800400c:	222b      	movge	r2, #43	; 0x2b
 800400e:	2909      	cmp	r1, #9
 8004010:	7042      	strb	r2, [r0, #1]
 8004012:	dd2a      	ble.n	800406a <__exponent+0x70>
 8004014:	f10d 0207 	add.w	r2, sp, #7
 8004018:	4617      	mov	r7, r2
 800401a:	260a      	movs	r6, #10
 800401c:	4694      	mov	ip, r2
 800401e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004022:	fb06 1415 	mls	r4, r6, r5, r1
 8004026:	3430      	adds	r4, #48	; 0x30
 8004028:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800402c:	460c      	mov	r4, r1
 800402e:	2c63      	cmp	r4, #99	; 0x63
 8004030:	f102 32ff 	add.w	r2, r2, #4294967295
 8004034:	4629      	mov	r1, r5
 8004036:	dcf1      	bgt.n	800401c <__exponent+0x22>
 8004038:	3130      	adds	r1, #48	; 0x30
 800403a:	f1ac 0402 	sub.w	r4, ip, #2
 800403e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004042:	1c41      	adds	r1, r0, #1
 8004044:	4622      	mov	r2, r4
 8004046:	42ba      	cmp	r2, r7
 8004048:	d30a      	bcc.n	8004060 <__exponent+0x66>
 800404a:	f10d 0209 	add.w	r2, sp, #9
 800404e:	eba2 020c 	sub.w	r2, r2, ip
 8004052:	42bc      	cmp	r4, r7
 8004054:	bf88      	it	hi
 8004056:	2200      	movhi	r2, #0
 8004058:	4413      	add	r3, r2
 800405a:	1a18      	subs	r0, r3, r0
 800405c:	b003      	add	sp, #12
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004060:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004064:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004068:	e7ed      	b.n	8004046 <__exponent+0x4c>
 800406a:	2330      	movs	r3, #48	; 0x30
 800406c:	3130      	adds	r1, #48	; 0x30
 800406e:	7083      	strb	r3, [r0, #2]
 8004070:	70c1      	strb	r1, [r0, #3]
 8004072:	1d03      	adds	r3, r0, #4
 8004074:	e7f1      	b.n	800405a <__exponent+0x60>
	...

08004078 <_printf_float>:
 8004078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407c:	b08b      	sub	sp, #44	; 0x2c
 800407e:	460c      	mov	r4, r1
 8004080:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004084:	4616      	mov	r6, r2
 8004086:	461f      	mov	r7, r3
 8004088:	4605      	mov	r5, r0
 800408a:	f000 fcad 	bl	80049e8 <_localeconv_r>
 800408e:	f8d0 b000 	ldr.w	fp, [r0]
 8004092:	4658      	mov	r0, fp
 8004094:	f7fc f924 	bl	80002e0 <strlen>
 8004098:	2300      	movs	r3, #0
 800409a:	9308      	str	r3, [sp, #32]
 800409c:	f8d8 3000 	ldr.w	r3, [r8]
 80040a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80040a4:	6822      	ldr	r2, [r4, #0]
 80040a6:	3307      	adds	r3, #7
 80040a8:	f023 0307 	bic.w	r3, r3, #7
 80040ac:	f103 0108 	add.w	r1, r3, #8
 80040b0:	f8c8 1000 	str.w	r1, [r8]
 80040b4:	ed93 0b00 	vldr	d0, [r3]
 80040b8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004318 <_printf_float+0x2a0>
 80040bc:	eeb0 7bc0 	vabs.f64	d7, d0
 80040c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80040c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80040cc:	4682      	mov	sl, r0
 80040ce:	dd24      	ble.n	800411a <_printf_float+0xa2>
 80040d0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80040d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d8:	d502      	bpl.n	80040e0 <_printf_float+0x68>
 80040da:	232d      	movs	r3, #45	; 0x2d
 80040dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e0:	498f      	ldr	r1, [pc, #572]	; (8004320 <_printf_float+0x2a8>)
 80040e2:	4b90      	ldr	r3, [pc, #576]	; (8004324 <_printf_float+0x2ac>)
 80040e4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80040e8:	bf94      	ite	ls
 80040ea:	4688      	movls	r8, r1
 80040ec:	4698      	movhi	r8, r3
 80040ee:	2303      	movs	r3, #3
 80040f0:	6123      	str	r3, [r4, #16]
 80040f2:	f022 0204 	bic.w	r2, r2, #4
 80040f6:	2300      	movs	r3, #0
 80040f8:	6022      	str	r2, [r4, #0]
 80040fa:	9304      	str	r3, [sp, #16]
 80040fc:	9700      	str	r7, [sp, #0]
 80040fe:	4633      	mov	r3, r6
 8004100:	aa09      	add	r2, sp, #36	; 0x24
 8004102:	4621      	mov	r1, r4
 8004104:	4628      	mov	r0, r5
 8004106:	f000 f9d1 	bl	80044ac <_printf_common>
 800410a:	3001      	adds	r0, #1
 800410c:	f040 808a 	bne.w	8004224 <_printf_float+0x1ac>
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	b00b      	add	sp, #44	; 0x2c
 8004116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800411a:	eeb4 0b40 	vcmp.f64	d0, d0
 800411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004122:	d709      	bvc.n	8004138 <_printf_float+0xc0>
 8004124:	ee10 3a90 	vmov	r3, s1
 8004128:	2b00      	cmp	r3, #0
 800412a:	bfbc      	itt	lt
 800412c:	232d      	movlt	r3, #45	; 0x2d
 800412e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004132:	497d      	ldr	r1, [pc, #500]	; (8004328 <_printf_float+0x2b0>)
 8004134:	4b7d      	ldr	r3, [pc, #500]	; (800432c <_printf_float+0x2b4>)
 8004136:	e7d5      	b.n	80040e4 <_printf_float+0x6c>
 8004138:	6863      	ldr	r3, [r4, #4]
 800413a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800413e:	9104      	str	r1, [sp, #16]
 8004140:	1c59      	adds	r1, r3, #1
 8004142:	d13c      	bne.n	80041be <_printf_float+0x146>
 8004144:	2306      	movs	r3, #6
 8004146:	6063      	str	r3, [r4, #4]
 8004148:	2300      	movs	r3, #0
 800414a:	9303      	str	r3, [sp, #12]
 800414c:	ab08      	add	r3, sp, #32
 800414e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004156:	ab07      	add	r3, sp, #28
 8004158:	6861      	ldr	r1, [r4, #4]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	6022      	str	r2, [r4, #0]
 800415e:	f10d 031b 	add.w	r3, sp, #27
 8004162:	4628      	mov	r0, r5
 8004164:	f7ff fef7 	bl	8003f56 <__cvt>
 8004168:	9b04      	ldr	r3, [sp, #16]
 800416a:	9907      	ldr	r1, [sp, #28]
 800416c:	2b47      	cmp	r3, #71	; 0x47
 800416e:	4680      	mov	r8, r0
 8004170:	d108      	bne.n	8004184 <_printf_float+0x10c>
 8004172:	1cc8      	adds	r0, r1, #3
 8004174:	db02      	blt.n	800417c <_printf_float+0x104>
 8004176:	6863      	ldr	r3, [r4, #4]
 8004178:	4299      	cmp	r1, r3
 800417a:	dd41      	ble.n	8004200 <_printf_float+0x188>
 800417c:	f1a9 0902 	sub.w	r9, r9, #2
 8004180:	fa5f f989 	uxtb.w	r9, r9
 8004184:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004188:	d820      	bhi.n	80041cc <_printf_float+0x154>
 800418a:	3901      	subs	r1, #1
 800418c:	464a      	mov	r2, r9
 800418e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004192:	9107      	str	r1, [sp, #28]
 8004194:	f7ff ff31 	bl	8003ffa <__exponent>
 8004198:	9a08      	ldr	r2, [sp, #32]
 800419a:	9004      	str	r0, [sp, #16]
 800419c:	1813      	adds	r3, r2, r0
 800419e:	2a01      	cmp	r2, #1
 80041a0:	6123      	str	r3, [r4, #16]
 80041a2:	dc02      	bgt.n	80041aa <_printf_float+0x132>
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	07d2      	lsls	r2, r2, #31
 80041a8:	d501      	bpl.n	80041ae <_printf_float+0x136>
 80041aa:	3301      	adds	r3, #1
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0a2      	beq.n	80040fc <_printf_float+0x84>
 80041b6:	232d      	movs	r3, #45	; 0x2d
 80041b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041bc:	e79e      	b.n	80040fc <_printf_float+0x84>
 80041be:	9904      	ldr	r1, [sp, #16]
 80041c0:	2947      	cmp	r1, #71	; 0x47
 80041c2:	d1c1      	bne.n	8004148 <_printf_float+0xd0>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1bf      	bne.n	8004148 <_printf_float+0xd0>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e7bc      	b.n	8004146 <_printf_float+0xce>
 80041cc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80041d0:	d118      	bne.n	8004204 <_printf_float+0x18c>
 80041d2:	2900      	cmp	r1, #0
 80041d4:	6863      	ldr	r3, [r4, #4]
 80041d6:	dd0b      	ble.n	80041f0 <_printf_float+0x178>
 80041d8:	6121      	str	r1, [r4, #16]
 80041da:	b913      	cbnz	r3, 80041e2 <_printf_float+0x16a>
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	07d0      	lsls	r0, r2, #31
 80041e0:	d502      	bpl.n	80041e8 <_printf_float+0x170>
 80041e2:	3301      	adds	r3, #1
 80041e4:	440b      	add	r3, r1
 80041e6:	6123      	str	r3, [r4, #16]
 80041e8:	2300      	movs	r3, #0
 80041ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	e7de      	b.n	80041ae <_printf_float+0x136>
 80041f0:	b913      	cbnz	r3, 80041f8 <_printf_float+0x180>
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	07d2      	lsls	r2, r2, #31
 80041f6:	d501      	bpl.n	80041fc <_printf_float+0x184>
 80041f8:	3302      	adds	r3, #2
 80041fa:	e7f4      	b.n	80041e6 <_printf_float+0x16e>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e7f2      	b.n	80041e6 <_printf_float+0x16e>
 8004200:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004204:	9b08      	ldr	r3, [sp, #32]
 8004206:	4299      	cmp	r1, r3
 8004208:	db05      	blt.n	8004216 <_printf_float+0x19e>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	6121      	str	r1, [r4, #16]
 800420e:	07d8      	lsls	r0, r3, #31
 8004210:	d5ea      	bpl.n	80041e8 <_printf_float+0x170>
 8004212:	1c4b      	adds	r3, r1, #1
 8004214:	e7e7      	b.n	80041e6 <_printf_float+0x16e>
 8004216:	2900      	cmp	r1, #0
 8004218:	bfd4      	ite	le
 800421a:	f1c1 0202 	rsble	r2, r1, #2
 800421e:	2201      	movgt	r2, #1
 8004220:	4413      	add	r3, r2
 8004222:	e7e0      	b.n	80041e6 <_printf_float+0x16e>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	055a      	lsls	r2, r3, #21
 8004228:	d407      	bmi.n	800423a <_printf_float+0x1c2>
 800422a:	6923      	ldr	r3, [r4, #16]
 800422c:	4642      	mov	r2, r8
 800422e:	4631      	mov	r1, r6
 8004230:	4628      	mov	r0, r5
 8004232:	47b8      	blx	r7
 8004234:	3001      	adds	r0, #1
 8004236:	d12a      	bne.n	800428e <_printf_float+0x216>
 8004238:	e76a      	b.n	8004110 <_printf_float+0x98>
 800423a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800423e:	f240 80e0 	bls.w	8004402 <_printf_float+0x38a>
 8004242:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004246:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	d133      	bne.n	80042b8 <_printf_float+0x240>
 8004250:	4a37      	ldr	r2, [pc, #220]	; (8004330 <_printf_float+0x2b8>)
 8004252:	2301      	movs	r3, #1
 8004254:	4631      	mov	r1, r6
 8004256:	4628      	mov	r0, r5
 8004258:	47b8      	blx	r7
 800425a:	3001      	adds	r0, #1
 800425c:	f43f af58 	beq.w	8004110 <_printf_float+0x98>
 8004260:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004264:	429a      	cmp	r2, r3
 8004266:	db02      	blt.n	800426e <_printf_float+0x1f6>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	07d8      	lsls	r0, r3, #31
 800426c:	d50f      	bpl.n	800428e <_printf_float+0x216>
 800426e:	4653      	mov	r3, sl
 8004270:	465a      	mov	r2, fp
 8004272:	4631      	mov	r1, r6
 8004274:	4628      	mov	r0, r5
 8004276:	47b8      	blx	r7
 8004278:	3001      	adds	r0, #1
 800427a:	f43f af49 	beq.w	8004110 <_printf_float+0x98>
 800427e:	f04f 0800 	mov.w	r8, #0
 8004282:	f104 091a 	add.w	r9, r4, #26
 8004286:	9b08      	ldr	r3, [sp, #32]
 8004288:	3b01      	subs	r3, #1
 800428a:	4543      	cmp	r3, r8
 800428c:	dc09      	bgt.n	80042a2 <_printf_float+0x22a>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	079b      	lsls	r3, r3, #30
 8004292:	f100 8106 	bmi.w	80044a2 <_printf_float+0x42a>
 8004296:	68e0      	ldr	r0, [r4, #12]
 8004298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800429a:	4298      	cmp	r0, r3
 800429c:	bfb8      	it	lt
 800429e:	4618      	movlt	r0, r3
 80042a0:	e738      	b.n	8004114 <_printf_float+0x9c>
 80042a2:	2301      	movs	r3, #1
 80042a4:	464a      	mov	r2, r9
 80042a6:	4631      	mov	r1, r6
 80042a8:	4628      	mov	r0, r5
 80042aa:	47b8      	blx	r7
 80042ac:	3001      	adds	r0, #1
 80042ae:	f43f af2f 	beq.w	8004110 <_printf_float+0x98>
 80042b2:	f108 0801 	add.w	r8, r8, #1
 80042b6:	e7e6      	b.n	8004286 <_printf_float+0x20e>
 80042b8:	9b07      	ldr	r3, [sp, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	dc3a      	bgt.n	8004334 <_printf_float+0x2bc>
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <_printf_float+0x2b8>)
 80042c0:	2301      	movs	r3, #1
 80042c2:	4631      	mov	r1, r6
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b8      	blx	r7
 80042c8:	3001      	adds	r0, #1
 80042ca:	f43f af21 	beq.w	8004110 <_printf_float+0x98>
 80042ce:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d102      	bne.n	80042dc <_printf_float+0x264>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	07d9      	lsls	r1, r3, #31
 80042da:	d5d8      	bpl.n	800428e <_printf_float+0x216>
 80042dc:	4653      	mov	r3, sl
 80042de:	465a      	mov	r2, fp
 80042e0:	4631      	mov	r1, r6
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b8      	blx	r7
 80042e6:	3001      	adds	r0, #1
 80042e8:	f43f af12 	beq.w	8004110 <_printf_float+0x98>
 80042ec:	f04f 0900 	mov.w	r9, #0
 80042f0:	f104 0a1a 	add.w	sl, r4, #26
 80042f4:	9b07      	ldr	r3, [sp, #28]
 80042f6:	425b      	negs	r3, r3
 80042f8:	454b      	cmp	r3, r9
 80042fa:	dc01      	bgt.n	8004300 <_printf_float+0x288>
 80042fc:	9b08      	ldr	r3, [sp, #32]
 80042fe:	e795      	b.n	800422c <_printf_float+0x1b4>
 8004300:	2301      	movs	r3, #1
 8004302:	4652      	mov	r2, sl
 8004304:	4631      	mov	r1, r6
 8004306:	4628      	mov	r0, r5
 8004308:	47b8      	blx	r7
 800430a:	3001      	adds	r0, #1
 800430c:	f43f af00 	beq.w	8004110 <_printf_float+0x98>
 8004310:	f109 0901 	add.w	r9, r9, #1
 8004314:	e7ee      	b.n	80042f4 <_printf_float+0x27c>
 8004316:	bf00      	nop
 8004318:	ffffffff 	.word	0xffffffff
 800431c:	7fefffff 	.word	0x7fefffff
 8004320:	080067a4 	.word	0x080067a4
 8004324:	080067a8 	.word	0x080067a8
 8004328:	080067ac 	.word	0x080067ac
 800432c:	080067b0 	.word	0x080067b0
 8004330:	080067b4 	.word	0x080067b4
 8004334:	9a08      	ldr	r2, [sp, #32]
 8004336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004338:	429a      	cmp	r2, r3
 800433a:	bfa8      	it	ge
 800433c:	461a      	movge	r2, r3
 800433e:	2a00      	cmp	r2, #0
 8004340:	4691      	mov	r9, r2
 8004342:	dc38      	bgt.n	80043b6 <_printf_float+0x33e>
 8004344:	2300      	movs	r3, #0
 8004346:	9305      	str	r3, [sp, #20]
 8004348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800434c:	f104 021a 	add.w	r2, r4, #26
 8004350:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004352:	9905      	ldr	r1, [sp, #20]
 8004354:	9304      	str	r3, [sp, #16]
 8004356:	eba3 0309 	sub.w	r3, r3, r9
 800435a:	428b      	cmp	r3, r1
 800435c:	dc33      	bgt.n	80043c6 <_printf_float+0x34e>
 800435e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004362:	429a      	cmp	r2, r3
 8004364:	db3c      	blt.n	80043e0 <_printf_float+0x368>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	07da      	lsls	r2, r3, #31
 800436a:	d439      	bmi.n	80043e0 <_printf_float+0x368>
 800436c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004370:	eba2 0903 	sub.w	r9, r2, r3
 8004374:	9b04      	ldr	r3, [sp, #16]
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	4591      	cmp	r9, r2
 800437a:	bfa8      	it	ge
 800437c:	4691      	movge	r9, r2
 800437e:	f1b9 0f00 	cmp.w	r9, #0
 8004382:	dc35      	bgt.n	80043f0 <_printf_float+0x378>
 8004384:	f04f 0800 	mov.w	r8, #0
 8004388:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800438c:	f104 0a1a 	add.w	sl, r4, #26
 8004390:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	eba3 0309 	sub.w	r3, r3, r9
 800439a:	4543      	cmp	r3, r8
 800439c:	f77f af77 	ble.w	800428e <_printf_float+0x216>
 80043a0:	2301      	movs	r3, #1
 80043a2:	4652      	mov	r2, sl
 80043a4:	4631      	mov	r1, r6
 80043a6:	4628      	mov	r0, r5
 80043a8:	47b8      	blx	r7
 80043aa:	3001      	adds	r0, #1
 80043ac:	f43f aeb0 	beq.w	8004110 <_printf_float+0x98>
 80043b0:	f108 0801 	add.w	r8, r8, #1
 80043b4:	e7ec      	b.n	8004390 <_printf_float+0x318>
 80043b6:	4613      	mov	r3, r2
 80043b8:	4631      	mov	r1, r6
 80043ba:	4642      	mov	r2, r8
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	d1bf      	bne.n	8004344 <_printf_float+0x2cc>
 80043c4:	e6a4      	b.n	8004110 <_printf_float+0x98>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4631      	mov	r1, r6
 80043ca:	4628      	mov	r0, r5
 80043cc:	9204      	str	r2, [sp, #16]
 80043ce:	47b8      	blx	r7
 80043d0:	3001      	adds	r0, #1
 80043d2:	f43f ae9d 	beq.w	8004110 <_printf_float+0x98>
 80043d6:	9b05      	ldr	r3, [sp, #20]
 80043d8:	9a04      	ldr	r2, [sp, #16]
 80043da:	3301      	adds	r3, #1
 80043dc:	9305      	str	r3, [sp, #20]
 80043de:	e7b7      	b.n	8004350 <_printf_float+0x2d8>
 80043e0:	4653      	mov	r3, sl
 80043e2:	465a      	mov	r2, fp
 80043e4:	4631      	mov	r1, r6
 80043e6:	4628      	mov	r0, r5
 80043e8:	47b8      	blx	r7
 80043ea:	3001      	adds	r0, #1
 80043ec:	d1be      	bne.n	800436c <_printf_float+0x2f4>
 80043ee:	e68f      	b.n	8004110 <_printf_float+0x98>
 80043f0:	9a04      	ldr	r2, [sp, #16]
 80043f2:	464b      	mov	r3, r9
 80043f4:	4442      	add	r2, r8
 80043f6:	4631      	mov	r1, r6
 80043f8:	4628      	mov	r0, r5
 80043fa:	47b8      	blx	r7
 80043fc:	3001      	adds	r0, #1
 80043fe:	d1c1      	bne.n	8004384 <_printf_float+0x30c>
 8004400:	e686      	b.n	8004110 <_printf_float+0x98>
 8004402:	9a08      	ldr	r2, [sp, #32]
 8004404:	2a01      	cmp	r2, #1
 8004406:	dc01      	bgt.n	800440c <_printf_float+0x394>
 8004408:	07db      	lsls	r3, r3, #31
 800440a:	d537      	bpl.n	800447c <_printf_float+0x404>
 800440c:	2301      	movs	r3, #1
 800440e:	4642      	mov	r2, r8
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	f43f ae7a 	beq.w	8004110 <_printf_float+0x98>
 800441c:	4653      	mov	r3, sl
 800441e:	465a      	mov	r2, fp
 8004420:	4631      	mov	r1, r6
 8004422:	4628      	mov	r0, r5
 8004424:	47b8      	blx	r7
 8004426:	3001      	adds	r0, #1
 8004428:	f43f ae72 	beq.w	8004110 <_printf_float+0x98>
 800442c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004430:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004438:	9b08      	ldr	r3, [sp, #32]
 800443a:	d01a      	beq.n	8004472 <_printf_float+0x3fa>
 800443c:	3b01      	subs	r3, #1
 800443e:	f108 0201 	add.w	r2, r8, #1
 8004442:	4631      	mov	r1, r6
 8004444:	4628      	mov	r0, r5
 8004446:	47b8      	blx	r7
 8004448:	3001      	adds	r0, #1
 800444a:	d10e      	bne.n	800446a <_printf_float+0x3f2>
 800444c:	e660      	b.n	8004110 <_printf_float+0x98>
 800444e:	2301      	movs	r3, #1
 8004450:	464a      	mov	r2, r9
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	47b8      	blx	r7
 8004458:	3001      	adds	r0, #1
 800445a:	f43f ae59 	beq.w	8004110 <_printf_float+0x98>
 800445e:	f108 0801 	add.w	r8, r8, #1
 8004462:	9b08      	ldr	r3, [sp, #32]
 8004464:	3b01      	subs	r3, #1
 8004466:	4543      	cmp	r3, r8
 8004468:	dcf1      	bgt.n	800444e <_printf_float+0x3d6>
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004470:	e6dd      	b.n	800422e <_printf_float+0x1b6>
 8004472:	f04f 0800 	mov.w	r8, #0
 8004476:	f104 091a 	add.w	r9, r4, #26
 800447a:	e7f2      	b.n	8004462 <_printf_float+0x3ea>
 800447c:	2301      	movs	r3, #1
 800447e:	4642      	mov	r2, r8
 8004480:	e7df      	b.n	8004442 <_printf_float+0x3ca>
 8004482:	2301      	movs	r3, #1
 8004484:	464a      	mov	r2, r9
 8004486:	4631      	mov	r1, r6
 8004488:	4628      	mov	r0, r5
 800448a:	47b8      	blx	r7
 800448c:	3001      	adds	r0, #1
 800448e:	f43f ae3f 	beq.w	8004110 <_printf_float+0x98>
 8004492:	f108 0801 	add.w	r8, r8, #1
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	9909      	ldr	r1, [sp, #36]	; 0x24
 800449a:	1a5b      	subs	r3, r3, r1
 800449c:	4543      	cmp	r3, r8
 800449e:	dcf0      	bgt.n	8004482 <_printf_float+0x40a>
 80044a0:	e6f9      	b.n	8004296 <_printf_float+0x21e>
 80044a2:	f04f 0800 	mov.w	r8, #0
 80044a6:	f104 0919 	add.w	r9, r4, #25
 80044aa:	e7f4      	b.n	8004496 <_printf_float+0x41e>

080044ac <_printf_common>:
 80044ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b0:	4616      	mov	r6, r2
 80044b2:	4699      	mov	r9, r3
 80044b4:	688a      	ldr	r2, [r1, #8]
 80044b6:	690b      	ldr	r3, [r1, #16]
 80044b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044bc:	4293      	cmp	r3, r2
 80044be:	bfb8      	it	lt
 80044c0:	4613      	movlt	r3, r2
 80044c2:	6033      	str	r3, [r6, #0]
 80044c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044c8:	4607      	mov	r7, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	b10a      	cbz	r2, 80044d2 <_printf_common+0x26>
 80044ce:	3301      	adds	r3, #1
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	0699      	lsls	r1, r3, #26
 80044d6:	bf42      	ittt	mi
 80044d8:	6833      	ldrmi	r3, [r6, #0]
 80044da:	3302      	addmi	r3, #2
 80044dc:	6033      	strmi	r3, [r6, #0]
 80044de:	6825      	ldr	r5, [r4, #0]
 80044e0:	f015 0506 	ands.w	r5, r5, #6
 80044e4:	d106      	bne.n	80044f4 <_printf_common+0x48>
 80044e6:	f104 0a19 	add.w	sl, r4, #25
 80044ea:	68e3      	ldr	r3, [r4, #12]
 80044ec:	6832      	ldr	r2, [r6, #0]
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	42ab      	cmp	r3, r5
 80044f2:	dc26      	bgt.n	8004542 <_printf_common+0x96>
 80044f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044f8:	1e13      	subs	r3, r2, #0
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	bf18      	it	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	0692      	lsls	r2, r2, #26
 8004502:	d42b      	bmi.n	800455c <_printf_common+0xb0>
 8004504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004508:	4649      	mov	r1, r9
 800450a:	4638      	mov	r0, r7
 800450c:	47c0      	blx	r8
 800450e:	3001      	adds	r0, #1
 8004510:	d01e      	beq.n	8004550 <_printf_common+0xa4>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	6922      	ldr	r2, [r4, #16]
 8004516:	f003 0306 	and.w	r3, r3, #6
 800451a:	2b04      	cmp	r3, #4
 800451c:	bf02      	ittt	eq
 800451e:	68e5      	ldreq	r5, [r4, #12]
 8004520:	6833      	ldreq	r3, [r6, #0]
 8004522:	1aed      	subeq	r5, r5, r3
 8004524:	68a3      	ldr	r3, [r4, #8]
 8004526:	bf0c      	ite	eq
 8004528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800452c:	2500      	movne	r5, #0
 800452e:	4293      	cmp	r3, r2
 8004530:	bfc4      	itt	gt
 8004532:	1a9b      	subgt	r3, r3, r2
 8004534:	18ed      	addgt	r5, r5, r3
 8004536:	2600      	movs	r6, #0
 8004538:	341a      	adds	r4, #26
 800453a:	42b5      	cmp	r5, r6
 800453c:	d11a      	bne.n	8004574 <_printf_common+0xc8>
 800453e:	2000      	movs	r0, #0
 8004540:	e008      	b.n	8004554 <_printf_common+0xa8>
 8004542:	2301      	movs	r3, #1
 8004544:	4652      	mov	r2, sl
 8004546:	4649      	mov	r1, r9
 8004548:	4638      	mov	r0, r7
 800454a:	47c0      	blx	r8
 800454c:	3001      	adds	r0, #1
 800454e:	d103      	bne.n	8004558 <_printf_common+0xac>
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004558:	3501      	adds	r5, #1
 800455a:	e7c6      	b.n	80044ea <_printf_common+0x3e>
 800455c:	18e1      	adds	r1, r4, r3
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	2030      	movs	r0, #48	; 0x30
 8004562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004566:	4422      	add	r2, r4
 8004568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800456c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004570:	3302      	adds	r3, #2
 8004572:	e7c7      	b.n	8004504 <_printf_common+0x58>
 8004574:	2301      	movs	r3, #1
 8004576:	4622      	mov	r2, r4
 8004578:	4649      	mov	r1, r9
 800457a:	4638      	mov	r0, r7
 800457c:	47c0      	blx	r8
 800457e:	3001      	adds	r0, #1
 8004580:	d0e6      	beq.n	8004550 <_printf_common+0xa4>
 8004582:	3601      	adds	r6, #1
 8004584:	e7d9      	b.n	800453a <_printf_common+0x8e>
	...

08004588 <_printf_i>:
 8004588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800458c:	7e0f      	ldrb	r7, [r1, #24]
 800458e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004590:	2f78      	cmp	r7, #120	; 0x78
 8004592:	4691      	mov	r9, r2
 8004594:	4680      	mov	r8, r0
 8004596:	460c      	mov	r4, r1
 8004598:	469a      	mov	sl, r3
 800459a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800459e:	d807      	bhi.n	80045b0 <_printf_i+0x28>
 80045a0:	2f62      	cmp	r7, #98	; 0x62
 80045a2:	d80a      	bhi.n	80045ba <_printf_i+0x32>
 80045a4:	2f00      	cmp	r7, #0
 80045a6:	f000 80d4 	beq.w	8004752 <_printf_i+0x1ca>
 80045aa:	2f58      	cmp	r7, #88	; 0x58
 80045ac:	f000 80c0 	beq.w	8004730 <_printf_i+0x1a8>
 80045b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045b8:	e03a      	b.n	8004630 <_printf_i+0xa8>
 80045ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045be:	2b15      	cmp	r3, #21
 80045c0:	d8f6      	bhi.n	80045b0 <_printf_i+0x28>
 80045c2:	a101      	add	r1, pc, #4	; (adr r1, 80045c8 <_printf_i+0x40>)
 80045c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045c8:	08004621 	.word	0x08004621
 80045cc:	08004635 	.word	0x08004635
 80045d0:	080045b1 	.word	0x080045b1
 80045d4:	080045b1 	.word	0x080045b1
 80045d8:	080045b1 	.word	0x080045b1
 80045dc:	080045b1 	.word	0x080045b1
 80045e0:	08004635 	.word	0x08004635
 80045e4:	080045b1 	.word	0x080045b1
 80045e8:	080045b1 	.word	0x080045b1
 80045ec:	080045b1 	.word	0x080045b1
 80045f0:	080045b1 	.word	0x080045b1
 80045f4:	08004739 	.word	0x08004739
 80045f8:	08004661 	.word	0x08004661
 80045fc:	080046f3 	.word	0x080046f3
 8004600:	080045b1 	.word	0x080045b1
 8004604:	080045b1 	.word	0x080045b1
 8004608:	0800475b 	.word	0x0800475b
 800460c:	080045b1 	.word	0x080045b1
 8004610:	08004661 	.word	0x08004661
 8004614:	080045b1 	.word	0x080045b1
 8004618:	080045b1 	.word	0x080045b1
 800461c:	080046fb 	.word	0x080046fb
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	602a      	str	r2, [r5, #0]
 8004628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800462c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004630:	2301      	movs	r3, #1
 8004632:	e09f      	b.n	8004774 <_printf_i+0x1ec>
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	0607      	lsls	r7, r0, #24
 800463a:	f103 0104 	add.w	r1, r3, #4
 800463e:	6029      	str	r1, [r5, #0]
 8004640:	d501      	bpl.n	8004646 <_printf_i+0xbe>
 8004642:	681e      	ldr	r6, [r3, #0]
 8004644:	e003      	b.n	800464e <_printf_i+0xc6>
 8004646:	0646      	lsls	r6, r0, #25
 8004648:	d5fb      	bpl.n	8004642 <_printf_i+0xba>
 800464a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800464e:	2e00      	cmp	r6, #0
 8004650:	da03      	bge.n	800465a <_printf_i+0xd2>
 8004652:	232d      	movs	r3, #45	; 0x2d
 8004654:	4276      	negs	r6, r6
 8004656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800465a:	485a      	ldr	r0, [pc, #360]	; (80047c4 <_printf_i+0x23c>)
 800465c:	230a      	movs	r3, #10
 800465e:	e012      	b.n	8004686 <_printf_i+0xfe>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	1d19      	adds	r1, r3, #4
 8004666:	6029      	str	r1, [r5, #0]
 8004668:	0605      	lsls	r5, r0, #24
 800466a:	d501      	bpl.n	8004670 <_printf_i+0xe8>
 800466c:	681e      	ldr	r6, [r3, #0]
 800466e:	e002      	b.n	8004676 <_printf_i+0xee>
 8004670:	0641      	lsls	r1, r0, #25
 8004672:	d5fb      	bpl.n	800466c <_printf_i+0xe4>
 8004674:	881e      	ldrh	r6, [r3, #0]
 8004676:	4853      	ldr	r0, [pc, #332]	; (80047c4 <_printf_i+0x23c>)
 8004678:	2f6f      	cmp	r7, #111	; 0x6f
 800467a:	bf0c      	ite	eq
 800467c:	2308      	moveq	r3, #8
 800467e:	230a      	movne	r3, #10
 8004680:	2100      	movs	r1, #0
 8004682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004686:	6865      	ldr	r5, [r4, #4]
 8004688:	60a5      	str	r5, [r4, #8]
 800468a:	2d00      	cmp	r5, #0
 800468c:	bfa2      	ittt	ge
 800468e:	6821      	ldrge	r1, [r4, #0]
 8004690:	f021 0104 	bicge.w	r1, r1, #4
 8004694:	6021      	strge	r1, [r4, #0]
 8004696:	b90e      	cbnz	r6, 800469c <_printf_i+0x114>
 8004698:	2d00      	cmp	r5, #0
 800469a:	d04b      	beq.n	8004734 <_printf_i+0x1ac>
 800469c:	4615      	mov	r5, r2
 800469e:	fbb6 f1f3 	udiv	r1, r6, r3
 80046a2:	fb03 6711 	mls	r7, r3, r1, r6
 80046a6:	5dc7      	ldrb	r7, [r0, r7]
 80046a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046ac:	4637      	mov	r7, r6
 80046ae:	42bb      	cmp	r3, r7
 80046b0:	460e      	mov	r6, r1
 80046b2:	d9f4      	bls.n	800469e <_printf_i+0x116>
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d10b      	bne.n	80046d0 <_printf_i+0x148>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	07de      	lsls	r6, r3, #31
 80046bc:	d508      	bpl.n	80046d0 <_printf_i+0x148>
 80046be:	6923      	ldr	r3, [r4, #16]
 80046c0:	6861      	ldr	r1, [r4, #4]
 80046c2:	4299      	cmp	r1, r3
 80046c4:	bfde      	ittt	le
 80046c6:	2330      	movle	r3, #48	; 0x30
 80046c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046d0:	1b52      	subs	r2, r2, r5
 80046d2:	6122      	str	r2, [r4, #16]
 80046d4:	f8cd a000 	str.w	sl, [sp]
 80046d8:	464b      	mov	r3, r9
 80046da:	aa03      	add	r2, sp, #12
 80046dc:	4621      	mov	r1, r4
 80046de:	4640      	mov	r0, r8
 80046e0:	f7ff fee4 	bl	80044ac <_printf_common>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d14a      	bne.n	800477e <_printf_i+0x1f6>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	b004      	add	sp, #16
 80046ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	f043 0320 	orr.w	r3, r3, #32
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	4833      	ldr	r0, [pc, #204]	; (80047c8 <_printf_i+0x240>)
 80046fc:	2778      	movs	r7, #120	; 0x78
 80046fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	6829      	ldr	r1, [r5, #0]
 8004706:	061f      	lsls	r7, r3, #24
 8004708:	f851 6b04 	ldr.w	r6, [r1], #4
 800470c:	d402      	bmi.n	8004714 <_printf_i+0x18c>
 800470e:	065f      	lsls	r7, r3, #25
 8004710:	bf48      	it	mi
 8004712:	b2b6      	uxthmi	r6, r6
 8004714:	07df      	lsls	r7, r3, #31
 8004716:	bf48      	it	mi
 8004718:	f043 0320 	orrmi.w	r3, r3, #32
 800471c:	6029      	str	r1, [r5, #0]
 800471e:	bf48      	it	mi
 8004720:	6023      	strmi	r3, [r4, #0]
 8004722:	b91e      	cbnz	r6, 800472c <_printf_i+0x1a4>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	f023 0320 	bic.w	r3, r3, #32
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	2310      	movs	r3, #16
 800472e:	e7a7      	b.n	8004680 <_printf_i+0xf8>
 8004730:	4824      	ldr	r0, [pc, #144]	; (80047c4 <_printf_i+0x23c>)
 8004732:	e7e4      	b.n	80046fe <_printf_i+0x176>
 8004734:	4615      	mov	r5, r2
 8004736:	e7bd      	b.n	80046b4 <_printf_i+0x12c>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	6826      	ldr	r6, [r4, #0]
 800473c:	6961      	ldr	r1, [r4, #20]
 800473e:	1d18      	adds	r0, r3, #4
 8004740:	6028      	str	r0, [r5, #0]
 8004742:	0635      	lsls	r5, r6, #24
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	d501      	bpl.n	800474c <_printf_i+0x1c4>
 8004748:	6019      	str	r1, [r3, #0]
 800474a:	e002      	b.n	8004752 <_printf_i+0x1ca>
 800474c:	0670      	lsls	r0, r6, #25
 800474e:	d5fb      	bpl.n	8004748 <_printf_i+0x1c0>
 8004750:	8019      	strh	r1, [r3, #0]
 8004752:	2300      	movs	r3, #0
 8004754:	6123      	str	r3, [r4, #16]
 8004756:	4615      	mov	r5, r2
 8004758:	e7bc      	b.n	80046d4 <_printf_i+0x14c>
 800475a:	682b      	ldr	r3, [r5, #0]
 800475c:	1d1a      	adds	r2, r3, #4
 800475e:	602a      	str	r2, [r5, #0]
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	6862      	ldr	r2, [r4, #4]
 8004764:	2100      	movs	r1, #0
 8004766:	4628      	mov	r0, r5
 8004768:	f7fb fd6a 	bl	8000240 <memchr>
 800476c:	b108      	cbz	r0, 8004772 <_printf_i+0x1ea>
 800476e:	1b40      	subs	r0, r0, r5
 8004770:	6060      	str	r0, [r4, #4]
 8004772:	6863      	ldr	r3, [r4, #4]
 8004774:	6123      	str	r3, [r4, #16]
 8004776:	2300      	movs	r3, #0
 8004778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800477c:	e7aa      	b.n	80046d4 <_printf_i+0x14c>
 800477e:	6923      	ldr	r3, [r4, #16]
 8004780:	462a      	mov	r2, r5
 8004782:	4649      	mov	r1, r9
 8004784:	4640      	mov	r0, r8
 8004786:	47d0      	blx	sl
 8004788:	3001      	adds	r0, #1
 800478a:	d0ad      	beq.n	80046e8 <_printf_i+0x160>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	079b      	lsls	r3, r3, #30
 8004790:	d413      	bmi.n	80047ba <_printf_i+0x232>
 8004792:	68e0      	ldr	r0, [r4, #12]
 8004794:	9b03      	ldr	r3, [sp, #12]
 8004796:	4298      	cmp	r0, r3
 8004798:	bfb8      	it	lt
 800479a:	4618      	movlt	r0, r3
 800479c:	e7a6      	b.n	80046ec <_printf_i+0x164>
 800479e:	2301      	movs	r3, #1
 80047a0:	4632      	mov	r2, r6
 80047a2:	4649      	mov	r1, r9
 80047a4:	4640      	mov	r0, r8
 80047a6:	47d0      	blx	sl
 80047a8:	3001      	adds	r0, #1
 80047aa:	d09d      	beq.n	80046e8 <_printf_i+0x160>
 80047ac:	3501      	adds	r5, #1
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	9903      	ldr	r1, [sp, #12]
 80047b2:	1a5b      	subs	r3, r3, r1
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	dcf2      	bgt.n	800479e <_printf_i+0x216>
 80047b8:	e7eb      	b.n	8004792 <_printf_i+0x20a>
 80047ba:	2500      	movs	r5, #0
 80047bc:	f104 0619 	add.w	r6, r4, #25
 80047c0:	e7f5      	b.n	80047ae <_printf_i+0x226>
 80047c2:	bf00      	nop
 80047c4:	080067b6 	.word	0x080067b6
 80047c8:	080067c7 	.word	0x080067c7

080047cc <std>:
 80047cc:	2300      	movs	r3, #0
 80047ce:	b510      	push	{r4, lr}
 80047d0:	4604      	mov	r4, r0
 80047d2:	e9c0 3300 	strd	r3, r3, [r0]
 80047d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047da:	6083      	str	r3, [r0, #8]
 80047dc:	8181      	strh	r1, [r0, #12]
 80047de:	6643      	str	r3, [r0, #100]	; 0x64
 80047e0:	81c2      	strh	r2, [r0, #14]
 80047e2:	6183      	str	r3, [r0, #24]
 80047e4:	4619      	mov	r1, r3
 80047e6:	2208      	movs	r2, #8
 80047e8:	305c      	adds	r0, #92	; 0x5c
 80047ea:	f000 f8f4 	bl	80049d6 <memset>
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <std+0x58>)
 80047f0:	6263      	str	r3, [r4, #36]	; 0x24
 80047f2:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <std+0x5c>)
 80047f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <std+0x60>)
 80047f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047fa:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <std+0x64>)
 80047fc:	6323      	str	r3, [r4, #48]	; 0x30
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <std+0x68>)
 8004800:	6224      	str	r4, [r4, #32]
 8004802:	429c      	cmp	r4, r3
 8004804:	d006      	beq.n	8004814 <std+0x48>
 8004806:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800480a:	4294      	cmp	r4, r2
 800480c:	d002      	beq.n	8004814 <std+0x48>
 800480e:	33d0      	adds	r3, #208	; 0xd0
 8004810:	429c      	cmp	r4, r3
 8004812:	d105      	bne.n	8004820 <std+0x54>
 8004814:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800481c:	f000 b958 	b.w	8004ad0 <__retarget_lock_init_recursive>
 8004820:	bd10      	pop	{r4, pc}
 8004822:	bf00      	nop
 8004824:	08004951 	.word	0x08004951
 8004828:	08004973 	.word	0x08004973
 800482c:	080049ab 	.word	0x080049ab
 8004830:	080049cf 	.word	0x080049cf
 8004834:	200003d8 	.word	0x200003d8

08004838 <stdio_exit_handler>:
 8004838:	4a02      	ldr	r2, [pc, #8]	; (8004844 <stdio_exit_handler+0xc>)
 800483a:	4903      	ldr	r1, [pc, #12]	; (8004848 <stdio_exit_handler+0x10>)
 800483c:	4803      	ldr	r0, [pc, #12]	; (800484c <stdio_exit_handler+0x14>)
 800483e:	f000 b869 	b.w	8004914 <_fwalk_sglue>
 8004842:	bf00      	nop
 8004844:	20000048 	.word	0x20000048
 8004848:	080060c5 	.word	0x080060c5
 800484c:	20000054 	.word	0x20000054

08004850 <cleanup_stdio>:
 8004850:	6841      	ldr	r1, [r0, #4]
 8004852:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <cleanup_stdio+0x34>)
 8004854:	4299      	cmp	r1, r3
 8004856:	b510      	push	{r4, lr}
 8004858:	4604      	mov	r4, r0
 800485a:	d001      	beq.n	8004860 <cleanup_stdio+0x10>
 800485c:	f001 fc32 	bl	80060c4 <_fflush_r>
 8004860:	68a1      	ldr	r1, [r4, #8]
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <cleanup_stdio+0x38>)
 8004864:	4299      	cmp	r1, r3
 8004866:	d002      	beq.n	800486e <cleanup_stdio+0x1e>
 8004868:	4620      	mov	r0, r4
 800486a:	f001 fc2b 	bl	80060c4 <_fflush_r>
 800486e:	68e1      	ldr	r1, [r4, #12]
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <cleanup_stdio+0x3c>)
 8004872:	4299      	cmp	r1, r3
 8004874:	d004      	beq.n	8004880 <cleanup_stdio+0x30>
 8004876:	4620      	mov	r0, r4
 8004878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800487c:	f001 bc22 	b.w	80060c4 <_fflush_r>
 8004880:	bd10      	pop	{r4, pc}
 8004882:	bf00      	nop
 8004884:	200003d8 	.word	0x200003d8
 8004888:	20000440 	.word	0x20000440
 800488c:	200004a8 	.word	0x200004a8

08004890 <global_stdio_init.part.0>:
 8004890:	b510      	push	{r4, lr}
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <global_stdio_init.part.0+0x30>)
 8004894:	4c0b      	ldr	r4, [pc, #44]	; (80048c4 <global_stdio_init.part.0+0x34>)
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <global_stdio_init.part.0+0x38>)
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	4620      	mov	r0, r4
 800489c:	2200      	movs	r2, #0
 800489e:	2104      	movs	r1, #4
 80048a0:	f7ff ff94 	bl	80047cc <std>
 80048a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80048a8:	2201      	movs	r2, #1
 80048aa:	2109      	movs	r1, #9
 80048ac:	f7ff ff8e 	bl	80047cc <std>
 80048b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80048b4:	2202      	movs	r2, #2
 80048b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ba:	2112      	movs	r1, #18
 80048bc:	f7ff bf86 	b.w	80047cc <std>
 80048c0:	20000510 	.word	0x20000510
 80048c4:	200003d8 	.word	0x200003d8
 80048c8:	08004839 	.word	0x08004839

080048cc <__sfp_lock_acquire>:
 80048cc:	4801      	ldr	r0, [pc, #4]	; (80048d4 <__sfp_lock_acquire+0x8>)
 80048ce:	f000 b900 	b.w	8004ad2 <__retarget_lock_acquire_recursive>
 80048d2:	bf00      	nop
 80048d4:	20000519 	.word	0x20000519

080048d8 <__sfp_lock_release>:
 80048d8:	4801      	ldr	r0, [pc, #4]	; (80048e0 <__sfp_lock_release+0x8>)
 80048da:	f000 b8fb 	b.w	8004ad4 <__retarget_lock_release_recursive>
 80048de:	bf00      	nop
 80048e0:	20000519 	.word	0x20000519

080048e4 <__sinit>:
 80048e4:	b510      	push	{r4, lr}
 80048e6:	4604      	mov	r4, r0
 80048e8:	f7ff fff0 	bl	80048cc <__sfp_lock_acquire>
 80048ec:	6a23      	ldr	r3, [r4, #32]
 80048ee:	b11b      	cbz	r3, 80048f8 <__sinit+0x14>
 80048f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f4:	f7ff bff0 	b.w	80048d8 <__sfp_lock_release>
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <__sinit+0x28>)
 80048fa:	6223      	str	r3, [r4, #32]
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <__sinit+0x2c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f5      	bne.n	80048f0 <__sinit+0xc>
 8004904:	f7ff ffc4 	bl	8004890 <global_stdio_init.part.0>
 8004908:	e7f2      	b.n	80048f0 <__sinit+0xc>
 800490a:	bf00      	nop
 800490c:	08004851 	.word	0x08004851
 8004910:	20000510 	.word	0x20000510

08004914 <_fwalk_sglue>:
 8004914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004918:	4607      	mov	r7, r0
 800491a:	4688      	mov	r8, r1
 800491c:	4614      	mov	r4, r2
 800491e:	2600      	movs	r6, #0
 8004920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004924:	f1b9 0901 	subs.w	r9, r9, #1
 8004928:	d505      	bpl.n	8004936 <_fwalk_sglue+0x22>
 800492a:	6824      	ldr	r4, [r4, #0]
 800492c:	2c00      	cmp	r4, #0
 800492e:	d1f7      	bne.n	8004920 <_fwalk_sglue+0xc>
 8004930:	4630      	mov	r0, r6
 8004932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d907      	bls.n	800494c <_fwalk_sglue+0x38>
 800493c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004940:	3301      	adds	r3, #1
 8004942:	d003      	beq.n	800494c <_fwalk_sglue+0x38>
 8004944:	4629      	mov	r1, r5
 8004946:	4638      	mov	r0, r7
 8004948:	47c0      	blx	r8
 800494a:	4306      	orrs	r6, r0
 800494c:	3568      	adds	r5, #104	; 0x68
 800494e:	e7e9      	b.n	8004924 <_fwalk_sglue+0x10>

08004950 <__sread>:
 8004950:	b510      	push	{r4, lr}
 8004952:	460c      	mov	r4, r1
 8004954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004958:	f000 f86c 	bl	8004a34 <_read_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	bfab      	itete	ge
 8004960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004962:	89a3      	ldrhlt	r3, [r4, #12]
 8004964:	181b      	addge	r3, r3, r0
 8004966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800496a:	bfac      	ite	ge
 800496c:	6563      	strge	r3, [r4, #84]	; 0x54
 800496e:	81a3      	strhlt	r3, [r4, #12]
 8004970:	bd10      	pop	{r4, pc}

08004972 <__swrite>:
 8004972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004976:	461f      	mov	r7, r3
 8004978:	898b      	ldrh	r3, [r1, #12]
 800497a:	05db      	lsls	r3, r3, #23
 800497c:	4605      	mov	r5, r0
 800497e:	460c      	mov	r4, r1
 8004980:	4616      	mov	r6, r2
 8004982:	d505      	bpl.n	8004990 <__swrite+0x1e>
 8004984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004988:	2302      	movs	r3, #2
 800498a:	2200      	movs	r2, #0
 800498c:	f000 f840 	bl	8004a10 <_lseek_r>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	4632      	mov	r2, r6
 800499e:	463b      	mov	r3, r7
 80049a0:	4628      	mov	r0, r5
 80049a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a6:	f000 b857 	b.w	8004a58 <_write_r>

080049aa <__sseek>:
 80049aa:	b510      	push	{r4, lr}
 80049ac:	460c      	mov	r4, r1
 80049ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b2:	f000 f82d 	bl	8004a10 <_lseek_r>
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	bf15      	itete	ne
 80049bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80049be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049c6:	81a3      	strheq	r3, [r4, #12]
 80049c8:	bf18      	it	ne
 80049ca:	81a3      	strhne	r3, [r4, #12]
 80049cc:	bd10      	pop	{r4, pc}

080049ce <__sclose>:
 80049ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d2:	f000 b80d 	b.w	80049f0 <_close_r>

080049d6 <memset>:
 80049d6:	4402      	add	r2, r0
 80049d8:	4603      	mov	r3, r0
 80049da:	4293      	cmp	r3, r2
 80049dc:	d100      	bne.n	80049e0 <memset+0xa>
 80049de:	4770      	bx	lr
 80049e0:	f803 1b01 	strb.w	r1, [r3], #1
 80049e4:	e7f9      	b.n	80049da <memset+0x4>
	...

080049e8 <_localeconv_r>:
 80049e8:	4800      	ldr	r0, [pc, #0]	; (80049ec <_localeconv_r+0x4>)
 80049ea:	4770      	bx	lr
 80049ec:	20000194 	.word	0x20000194

080049f0 <_close_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4d06      	ldr	r5, [pc, #24]	; (8004a0c <_close_r+0x1c>)
 80049f4:	2300      	movs	r3, #0
 80049f6:	4604      	mov	r4, r0
 80049f8:	4608      	mov	r0, r1
 80049fa:	602b      	str	r3, [r5, #0]
 80049fc:	f7fc fae9 	bl	8000fd2 <_close>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d102      	bne.n	8004a0a <_close_r+0x1a>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b103      	cbz	r3, 8004a0a <_close_r+0x1a>
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	20000514 	.word	0x20000514

08004a10 <_lseek_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4d07      	ldr	r5, [pc, #28]	; (8004a30 <_lseek_r+0x20>)
 8004a14:	4604      	mov	r4, r0
 8004a16:	4608      	mov	r0, r1
 8004a18:	4611      	mov	r1, r2
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	602a      	str	r2, [r5, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f7fc fafe 	bl	8001020 <_lseek>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_lseek_r+0x1e>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_lseek_r+0x1e>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	20000514 	.word	0x20000514

08004a34 <_read_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4d07      	ldr	r5, [pc, #28]	; (8004a54 <_read_r+0x20>)
 8004a38:	4604      	mov	r4, r0
 8004a3a:	4608      	mov	r0, r1
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	2200      	movs	r2, #0
 8004a40:	602a      	str	r2, [r5, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f7fc fa8c 	bl	8000f60 <_read>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d102      	bne.n	8004a52 <_read_r+0x1e>
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	b103      	cbz	r3, 8004a52 <_read_r+0x1e>
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	20000514 	.word	0x20000514

08004a58 <_write_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4d07      	ldr	r5, [pc, #28]	; (8004a78 <_write_r+0x20>)
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	4608      	mov	r0, r1
 8004a60:	4611      	mov	r1, r2
 8004a62:	2200      	movs	r2, #0
 8004a64:	602a      	str	r2, [r5, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f7fc fa97 	bl	8000f9a <_write>
 8004a6c:	1c43      	adds	r3, r0, #1
 8004a6e:	d102      	bne.n	8004a76 <_write_r+0x1e>
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	b103      	cbz	r3, 8004a76 <_write_r+0x1e>
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
 8004a78:	20000514 	.word	0x20000514

08004a7c <__errno>:
 8004a7c:	4b01      	ldr	r3, [pc, #4]	; (8004a84 <__errno+0x8>)
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	200000a0 	.word	0x200000a0

08004a88 <__libc_init_array>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	4d0d      	ldr	r5, [pc, #52]	; (8004ac0 <__libc_init_array+0x38>)
 8004a8c:	4c0d      	ldr	r4, [pc, #52]	; (8004ac4 <__libc_init_array+0x3c>)
 8004a8e:	1b64      	subs	r4, r4, r5
 8004a90:	10a4      	asrs	r4, r4, #2
 8004a92:	2600      	movs	r6, #0
 8004a94:	42a6      	cmp	r6, r4
 8004a96:	d109      	bne.n	8004aac <__libc_init_array+0x24>
 8004a98:	4d0b      	ldr	r5, [pc, #44]	; (8004ac8 <__libc_init_array+0x40>)
 8004a9a:	4c0c      	ldr	r4, [pc, #48]	; (8004acc <__libc_init_array+0x44>)
 8004a9c:	f001 fe66 	bl	800676c <_init>
 8004aa0:	1b64      	subs	r4, r4, r5
 8004aa2:	10a4      	asrs	r4, r4, #2
 8004aa4:	2600      	movs	r6, #0
 8004aa6:	42a6      	cmp	r6, r4
 8004aa8:	d105      	bne.n	8004ab6 <__libc_init_array+0x2e>
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab0:	4798      	blx	r3
 8004ab2:	3601      	adds	r6, #1
 8004ab4:	e7ee      	b.n	8004a94 <__libc_init_array+0xc>
 8004ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aba:	4798      	blx	r3
 8004abc:	3601      	adds	r6, #1
 8004abe:	e7f2      	b.n	8004aa6 <__libc_init_array+0x1e>
 8004ac0:	08006b1c 	.word	0x08006b1c
 8004ac4:	08006b1c 	.word	0x08006b1c
 8004ac8:	08006b1c 	.word	0x08006b1c
 8004acc:	08006b20 	.word	0x08006b20

08004ad0 <__retarget_lock_init_recursive>:
 8004ad0:	4770      	bx	lr

08004ad2 <__retarget_lock_acquire_recursive>:
 8004ad2:	4770      	bx	lr

08004ad4 <__retarget_lock_release_recursive>:
 8004ad4:	4770      	bx	lr

08004ad6 <quorem>:
 8004ad6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ada:	6903      	ldr	r3, [r0, #16]
 8004adc:	690c      	ldr	r4, [r1, #16]
 8004ade:	42a3      	cmp	r3, r4
 8004ae0:	4607      	mov	r7, r0
 8004ae2:	db7e      	blt.n	8004be2 <quorem+0x10c>
 8004ae4:	3c01      	subs	r4, #1
 8004ae6:	f101 0814 	add.w	r8, r1, #20
 8004aea:	f100 0514 	add.w	r5, r0, #20
 8004aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004af8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004afc:	3301      	adds	r3, #1
 8004afe:	429a      	cmp	r2, r3
 8004b00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b08:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b0c:	d331      	bcc.n	8004b72 <quorem+0x9c>
 8004b0e:	f04f 0e00 	mov.w	lr, #0
 8004b12:	4640      	mov	r0, r8
 8004b14:	46ac      	mov	ip, r5
 8004b16:	46f2      	mov	sl, lr
 8004b18:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b1c:	b293      	uxth	r3, r2
 8004b1e:	fb06 e303 	mla	r3, r6, r3, lr
 8004b22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b26:	0c1a      	lsrs	r2, r3, #16
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	ebaa 0303 	sub.w	r3, sl, r3
 8004b2e:	f8dc a000 	ldr.w	sl, [ip]
 8004b32:	fa13 f38a 	uxtah	r3, r3, sl
 8004b36:	fb06 220e 	mla	r2, r6, lr, r2
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	9b00      	ldr	r3, [sp, #0]
 8004b3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b42:	b292      	uxth	r2, r2
 8004b44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b4c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004b50:	4581      	cmp	r9, r0
 8004b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b56:	f84c 3b04 	str.w	r3, [ip], #4
 8004b5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b5e:	d2db      	bcs.n	8004b18 <quorem+0x42>
 8004b60:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b64:	b92b      	cbnz	r3, 8004b72 <quorem+0x9c>
 8004b66:	9b01      	ldr	r3, [sp, #4]
 8004b68:	3b04      	subs	r3, #4
 8004b6a:	429d      	cmp	r5, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	d32c      	bcc.n	8004bca <quorem+0xf4>
 8004b70:	613c      	str	r4, [r7, #16]
 8004b72:	4638      	mov	r0, r7
 8004b74:	f001 f920 	bl	8005db8 <__mcmp>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	db22      	blt.n	8004bc2 <quorem+0xec>
 8004b7c:	3601      	adds	r6, #1
 8004b7e:	4629      	mov	r1, r5
 8004b80:	2000      	movs	r0, #0
 8004b82:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b86:	f8d1 c000 	ldr.w	ip, [r1]
 8004b8a:	b293      	uxth	r3, r2
 8004b8c:	1ac3      	subs	r3, r0, r3
 8004b8e:	0c12      	lsrs	r2, r2, #16
 8004b90:	fa13 f38c 	uxtah	r3, r3, ip
 8004b94:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004b98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ba2:	45c1      	cmp	r9, r8
 8004ba4:	f841 3b04 	str.w	r3, [r1], #4
 8004ba8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004bac:	d2e9      	bcs.n	8004b82 <quorem+0xac>
 8004bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bb6:	b922      	cbnz	r2, 8004bc2 <quorem+0xec>
 8004bb8:	3b04      	subs	r3, #4
 8004bba:	429d      	cmp	r5, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	d30a      	bcc.n	8004bd6 <quorem+0x100>
 8004bc0:	613c      	str	r4, [r7, #16]
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	b003      	add	sp, #12
 8004bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	3b04      	subs	r3, #4
 8004bce:	2a00      	cmp	r2, #0
 8004bd0:	d1ce      	bne.n	8004b70 <quorem+0x9a>
 8004bd2:	3c01      	subs	r4, #1
 8004bd4:	e7c9      	b.n	8004b6a <quorem+0x94>
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	3b04      	subs	r3, #4
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <quorem+0xea>
 8004bde:	3c01      	subs	r4, #1
 8004be0:	e7eb      	b.n	8004bba <quorem+0xe4>
 8004be2:	2000      	movs	r0, #0
 8004be4:	e7ee      	b.n	8004bc4 <quorem+0xee>
	...

08004be8 <_dtoa_r>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	ed2d 8b02 	vpush	{d8}
 8004bf0:	69c5      	ldr	r5, [r0, #28]
 8004bf2:	b091      	sub	sp, #68	; 0x44
 8004bf4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004bf8:	ec59 8b10 	vmov	r8, r9, d0
 8004bfc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004bfe:	9106      	str	r1, [sp, #24]
 8004c00:	4606      	mov	r6, r0
 8004c02:	9208      	str	r2, [sp, #32]
 8004c04:	930c      	str	r3, [sp, #48]	; 0x30
 8004c06:	b975      	cbnz	r5, 8004c26 <_dtoa_r+0x3e>
 8004c08:	2010      	movs	r0, #16
 8004c0a:	f000 fda5 	bl	8005758 <malloc>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	61f0      	str	r0, [r6, #28]
 8004c12:	b920      	cbnz	r0, 8004c1e <_dtoa_r+0x36>
 8004c14:	4ba6      	ldr	r3, [pc, #664]	; (8004eb0 <_dtoa_r+0x2c8>)
 8004c16:	21ef      	movs	r1, #239	; 0xef
 8004c18:	48a6      	ldr	r0, [pc, #664]	; (8004eb4 <_dtoa_r+0x2cc>)
 8004c1a:	f001 fa99 	bl	8006150 <__assert_func>
 8004c1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c22:	6005      	str	r5, [r0, #0]
 8004c24:	60c5      	str	r5, [r0, #12]
 8004c26:	69f3      	ldr	r3, [r6, #28]
 8004c28:	6819      	ldr	r1, [r3, #0]
 8004c2a:	b151      	cbz	r1, 8004c42 <_dtoa_r+0x5a>
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	604a      	str	r2, [r1, #4]
 8004c30:	2301      	movs	r3, #1
 8004c32:	4093      	lsls	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
 8004c36:	4630      	mov	r0, r6
 8004c38:	f000 fe82 	bl	8005940 <_Bfree>
 8004c3c:	69f3      	ldr	r3, [r6, #28]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	f1b9 0300 	subs.w	r3, r9, #0
 8004c46:	bfbb      	ittet	lt
 8004c48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c4c:	9303      	strlt	r3, [sp, #12]
 8004c4e:	2300      	movge	r3, #0
 8004c50:	2201      	movlt	r2, #1
 8004c52:	bfac      	ite	ge
 8004c54:	6023      	strge	r3, [r4, #0]
 8004c56:	6022      	strlt	r2, [r4, #0]
 8004c58:	4b97      	ldr	r3, [pc, #604]	; (8004eb8 <_dtoa_r+0x2d0>)
 8004c5a:	9c03      	ldr	r4, [sp, #12]
 8004c5c:	43a3      	bics	r3, r4
 8004c5e:	d11c      	bne.n	8004c9a <_dtoa_r+0xb2>
 8004c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c62:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004c6c:	ea53 0308 	orrs.w	r3, r3, r8
 8004c70:	f000 84fb 	beq.w	800566a <_dtoa_r+0xa82>
 8004c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c76:	b963      	cbnz	r3, 8004c92 <_dtoa_r+0xaa>
 8004c78:	4b90      	ldr	r3, [pc, #576]	; (8004ebc <_dtoa_r+0x2d4>)
 8004c7a:	e020      	b.n	8004cbe <_dtoa_r+0xd6>
 8004c7c:	4b90      	ldr	r3, [pc, #576]	; (8004ec0 <_dtoa_r+0x2d8>)
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	3308      	adds	r3, #8
 8004c82:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	9801      	ldr	r0, [sp, #4]
 8004c88:	b011      	add	sp, #68	; 0x44
 8004c8a:	ecbd 8b02 	vpop	{d8}
 8004c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c92:	4b8a      	ldr	r3, [pc, #552]	; (8004ebc <_dtoa_r+0x2d4>)
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	3303      	adds	r3, #3
 8004c98:	e7f3      	b.n	8004c82 <_dtoa_r+0x9a>
 8004c9a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004c9e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca6:	d10c      	bne.n	8004cc2 <_dtoa_r+0xda>
 8004ca8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004caa:	2301      	movs	r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 84d7 	beq.w	8005664 <_dtoa_r+0xa7c>
 8004cb6:	4b83      	ldr	r3, [pc, #524]	; (8004ec4 <_dtoa_r+0x2dc>)
 8004cb8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	e7e1      	b.n	8004c86 <_dtoa_r+0x9e>
 8004cc2:	aa0e      	add	r2, sp, #56	; 0x38
 8004cc4:	a90f      	add	r1, sp, #60	; 0x3c
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	eeb0 0b48 	vmov.f64	d0, d8
 8004ccc:	f001 f91a 	bl	8005f04 <__d2b>
 8004cd0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8004cd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d046      	beq.n	8004d6a <_dtoa_r+0x182>
 8004cdc:	eeb0 7b48 	vmov.f64	d7, d8
 8004ce0:	ee18 1a90 	vmov	r1, s17
 8004ce4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004ce8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8004cec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004cf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	ee07 1a90 	vmov	s15, r1
 8004cfa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8004cfe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004e98 <_dtoa_r+0x2b0>
 8004d02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d06:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8004ea0 <_dtoa_r+0x2b8>
 8004d0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004d0e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8004ea8 <_dtoa_r+0x2c0>
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004d1a:	eeb0 7b46 	vmov.f64	d7, d6
 8004d1e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004d22:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004d26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2e:	ee16 ba90 	vmov	fp, s13
 8004d32:	9009      	str	r0, [sp, #36]	; 0x24
 8004d34:	d508      	bpl.n	8004d48 <_dtoa_r+0x160>
 8004d36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004d3a:	eeb4 6b47 	vcmp.f64	d6, d7
 8004d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d42:	bf18      	it	ne
 8004d44:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004d48:	f1bb 0f16 	cmp.w	fp, #22
 8004d4c:	d82b      	bhi.n	8004da6 <_dtoa_r+0x1be>
 8004d4e:	495e      	ldr	r1, [pc, #376]	; (8004ec8 <_dtoa_r+0x2e0>)
 8004d50:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004d54:	ed91 7b00 	vldr	d7, [r1]
 8004d58:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d60:	d501      	bpl.n	8004d66 <_dtoa_r+0x17e>
 8004d62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d66:	2100      	movs	r1, #0
 8004d68:	e01e      	b.n	8004da8 <_dtoa_r+0x1c0>
 8004d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8004d72:	2920      	cmp	r1, #32
 8004d74:	bfc1      	itttt	gt
 8004d76:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8004d7a:	408c      	lslgt	r4, r1
 8004d7c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8004d80:	fa28 f101 	lsrgt.w	r1, r8, r1
 8004d84:	bfd6      	itet	le
 8004d86:	f1c1 0120 	rsble	r1, r1, #32
 8004d8a:	4321      	orrgt	r1, r4
 8004d8c:	fa08 f101 	lslle.w	r1, r8, r1
 8004d90:	ee07 1a90 	vmov	s15, r1
 8004d94:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	ee17 1a90 	vmov	r1, s15
 8004d9e:	2001      	movs	r0, #1
 8004da0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004da4:	e7a7      	b.n	8004cf6 <_dtoa_r+0x10e>
 8004da6:	2101      	movs	r1, #1
 8004da8:	1ad2      	subs	r2, r2, r3
 8004daa:	1e53      	subs	r3, r2, #1
 8004dac:	9305      	str	r3, [sp, #20]
 8004dae:	bf45      	ittet	mi
 8004db0:	f1c2 0301 	rsbmi	r3, r2, #1
 8004db4:	9304      	strmi	r3, [sp, #16]
 8004db6:	2300      	movpl	r3, #0
 8004db8:	2300      	movmi	r3, #0
 8004dba:	bf4c      	ite	mi
 8004dbc:	9305      	strmi	r3, [sp, #20]
 8004dbe:	9304      	strpl	r3, [sp, #16]
 8004dc0:	f1bb 0f00 	cmp.w	fp, #0
 8004dc4:	910b      	str	r1, [sp, #44]	; 0x2c
 8004dc6:	db18      	blt.n	8004dfa <_dtoa_r+0x212>
 8004dc8:	9b05      	ldr	r3, [sp, #20]
 8004dca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004dce:	445b      	add	r3, fp
 8004dd0:	9305      	str	r3, [sp, #20]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9a06      	ldr	r2, [sp, #24]
 8004dd6:	2a09      	cmp	r2, #9
 8004dd8:	d848      	bhi.n	8004e6c <_dtoa_r+0x284>
 8004dda:	2a05      	cmp	r2, #5
 8004ddc:	bfc4      	itt	gt
 8004dde:	3a04      	subgt	r2, #4
 8004de0:	9206      	strgt	r2, [sp, #24]
 8004de2:	9a06      	ldr	r2, [sp, #24]
 8004de4:	f1a2 0202 	sub.w	r2, r2, #2
 8004de8:	bfcc      	ite	gt
 8004dea:	2400      	movgt	r4, #0
 8004dec:	2401      	movle	r4, #1
 8004dee:	2a03      	cmp	r2, #3
 8004df0:	d847      	bhi.n	8004e82 <_dtoa_r+0x29a>
 8004df2:	e8df f002 	tbb	[pc, r2]
 8004df6:	2d0b      	.short	0x2d0b
 8004df8:	392b      	.short	0x392b
 8004dfa:	9b04      	ldr	r3, [sp, #16]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	eba3 030b 	sub.w	r3, r3, fp
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	920a      	str	r2, [sp, #40]	; 0x28
 8004e06:	f1cb 0300 	rsb	r3, fp, #0
 8004e0a:	e7e3      	b.n	8004dd4 <_dtoa_r+0x1ec>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	9207      	str	r2, [sp, #28]
 8004e10:	9a08      	ldr	r2, [sp, #32]
 8004e12:	2a00      	cmp	r2, #0
 8004e14:	dc38      	bgt.n	8004e88 <_dtoa_r+0x2a0>
 8004e16:	f04f 0a01 	mov.w	sl, #1
 8004e1a:	46d1      	mov	r9, sl
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	f8cd a020 	str.w	sl, [sp, #32]
 8004e22:	69f7      	ldr	r7, [r6, #28]
 8004e24:	2100      	movs	r1, #0
 8004e26:	2004      	movs	r0, #4
 8004e28:	f100 0c14 	add.w	ip, r0, #20
 8004e2c:	4594      	cmp	ip, r2
 8004e2e:	d930      	bls.n	8004e92 <_dtoa_r+0x2aa>
 8004e30:	6079      	str	r1, [r7, #4]
 8004e32:	4630      	mov	r0, r6
 8004e34:	930d      	str	r3, [sp, #52]	; 0x34
 8004e36:	f000 fd43 	bl	80058c0 <_Balloc>
 8004e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e3c:	9001      	str	r0, [sp, #4]
 8004e3e:	4602      	mov	r2, r0
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d145      	bne.n	8004ed0 <_dtoa_r+0x2e8>
 8004e44:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <_dtoa_r+0x2e4>)
 8004e46:	f240 11af 	movw	r1, #431	; 0x1af
 8004e4a:	e6e5      	b.n	8004c18 <_dtoa_r+0x30>
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	e7de      	b.n	8004e0e <_dtoa_r+0x226>
 8004e50:	2200      	movs	r2, #0
 8004e52:	9207      	str	r2, [sp, #28]
 8004e54:	9a08      	ldr	r2, [sp, #32]
 8004e56:	eb0b 0a02 	add.w	sl, fp, r2
 8004e5a:	f10a 0901 	add.w	r9, sl, #1
 8004e5e:	464a      	mov	r2, r9
 8004e60:	2a01      	cmp	r2, #1
 8004e62:	bfb8      	it	lt
 8004e64:	2201      	movlt	r2, #1
 8004e66:	e7dc      	b.n	8004e22 <_dtoa_r+0x23a>
 8004e68:	2201      	movs	r2, #1
 8004e6a:	e7f2      	b.n	8004e52 <_dtoa_r+0x26a>
 8004e6c:	2401      	movs	r4, #1
 8004e6e:	2200      	movs	r2, #0
 8004e70:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8004e74:	f04f 3aff 	mov.w	sl, #4294967295
 8004e78:	2100      	movs	r1, #0
 8004e7a:	46d1      	mov	r9, sl
 8004e7c:	2212      	movs	r2, #18
 8004e7e:	9108      	str	r1, [sp, #32]
 8004e80:	e7cf      	b.n	8004e22 <_dtoa_r+0x23a>
 8004e82:	2201      	movs	r2, #1
 8004e84:	9207      	str	r2, [sp, #28]
 8004e86:	e7f5      	b.n	8004e74 <_dtoa_r+0x28c>
 8004e88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004e8c:	46d1      	mov	r9, sl
 8004e8e:	4652      	mov	r2, sl
 8004e90:	e7c7      	b.n	8004e22 <_dtoa_r+0x23a>
 8004e92:	3101      	adds	r1, #1
 8004e94:	0040      	lsls	r0, r0, #1
 8004e96:	e7c7      	b.n	8004e28 <_dtoa_r+0x240>
 8004e98:	636f4361 	.word	0x636f4361
 8004e9c:	3fd287a7 	.word	0x3fd287a7
 8004ea0:	8b60c8b3 	.word	0x8b60c8b3
 8004ea4:	3fc68a28 	.word	0x3fc68a28
 8004ea8:	509f79fb 	.word	0x509f79fb
 8004eac:	3fd34413 	.word	0x3fd34413
 8004eb0:	080067e5 	.word	0x080067e5
 8004eb4:	080067fc 	.word	0x080067fc
 8004eb8:	7ff00000 	.word	0x7ff00000
 8004ebc:	080067e1 	.word	0x080067e1
 8004ec0:	080067d8 	.word	0x080067d8
 8004ec4:	080067b5 	.word	0x080067b5
 8004ec8:	080068e8 	.word	0x080068e8
 8004ecc:	08006854 	.word	0x08006854
 8004ed0:	69f2      	ldr	r2, [r6, #28]
 8004ed2:	9901      	ldr	r1, [sp, #4]
 8004ed4:	6011      	str	r1, [r2, #0]
 8004ed6:	f1b9 0f0e 	cmp.w	r9, #14
 8004eda:	d86c      	bhi.n	8004fb6 <_dtoa_r+0x3ce>
 8004edc:	2c00      	cmp	r4, #0
 8004ede:	d06a      	beq.n	8004fb6 <_dtoa_r+0x3ce>
 8004ee0:	f1bb 0f00 	cmp.w	fp, #0
 8004ee4:	f340 80a0 	ble.w	8005028 <_dtoa_r+0x440>
 8004ee8:	4ac1      	ldr	r2, [pc, #772]	; (80051f0 <_dtoa_r+0x608>)
 8004eea:	f00b 010f 	and.w	r1, fp, #15
 8004eee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004ef2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004ef6:	ed92 7b00 	vldr	d7, [r2]
 8004efa:	ea4f 122b 	mov.w	r2, fp, asr #4
 8004efe:	f000 8087 	beq.w	8005010 <_dtoa_r+0x428>
 8004f02:	49bc      	ldr	r1, [pc, #752]	; (80051f4 <_dtoa_r+0x60c>)
 8004f04:	ed91 6b08 	vldr	d6, [r1, #32]
 8004f08:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8004f0c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004f10:	f002 020f 	and.w	r2, r2, #15
 8004f14:	2103      	movs	r1, #3
 8004f16:	48b7      	ldr	r0, [pc, #732]	; (80051f4 <_dtoa_r+0x60c>)
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	d17b      	bne.n	8005014 <_dtoa_r+0x42c>
 8004f1c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004f20:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004f24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f2e:	2a00      	cmp	r2, #0
 8004f30:	f000 80a0 	beq.w	8005074 <_dtoa_r+0x48c>
 8004f34:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004f38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	f140 8098 	bpl.w	8005074 <_dtoa_r+0x48c>
 8004f44:	f1b9 0f00 	cmp.w	r9, #0
 8004f48:	f000 8094 	beq.w	8005074 <_dtoa_r+0x48c>
 8004f4c:	f1ba 0f00 	cmp.w	sl, #0
 8004f50:	dd2f      	ble.n	8004fb2 <_dtoa_r+0x3ca>
 8004f52:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004f56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004f5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f5e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004f62:	3101      	adds	r1, #1
 8004f64:	4654      	mov	r4, sl
 8004f66:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004f6a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004f6e:	ee07 1a90 	vmov	s15, r1
 8004f72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f76:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004f7a:	ee15 7a90 	vmov	r7, s11
 8004f7e:	ec51 0b15 	vmov	r0, r1, d5
 8004f82:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8004f86:	2c00      	cmp	r4, #0
 8004f88:	d177      	bne.n	800507a <_dtoa_r+0x492>
 8004f8a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004f8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f92:	ec41 0b17 	vmov	d7, r0, r1
 8004f96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9e:	f300 826a 	bgt.w	8005476 <_dtoa_r+0x88e>
 8004fa2:	eeb1 7b47 	vneg.f64	d7, d7
 8004fa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fae:	f100 8260 	bmi.w	8005472 <_dtoa_r+0x88a>
 8004fb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	f2c0 811d 	blt.w	80051f8 <_dtoa_r+0x610>
 8004fbe:	f1bb 0f0e 	cmp.w	fp, #14
 8004fc2:	f300 8119 	bgt.w	80051f8 <_dtoa_r+0x610>
 8004fc6:	4b8a      	ldr	r3, [pc, #552]	; (80051f0 <_dtoa_r+0x608>)
 8004fc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004fcc:	ed93 6b00 	vldr	d6, [r3]
 8004fd0:	9b08      	ldr	r3, [sp, #32]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f280 80b7 	bge.w	8005146 <_dtoa_r+0x55e>
 8004fd8:	f1b9 0f00 	cmp.w	r9, #0
 8004fdc:	f300 80b3 	bgt.w	8005146 <_dtoa_r+0x55e>
 8004fe0:	f040 8246 	bne.w	8005470 <_dtoa_r+0x888>
 8004fe4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004fe8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004fec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ff0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff8:	464c      	mov	r4, r9
 8004ffa:	464f      	mov	r7, r9
 8004ffc:	f280 821c 	bge.w	8005438 <_dtoa_r+0x850>
 8005000:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005004:	2331      	movs	r3, #49	; 0x31
 8005006:	f808 3b01 	strb.w	r3, [r8], #1
 800500a:	f10b 0b01 	add.w	fp, fp, #1
 800500e:	e218      	b.n	8005442 <_dtoa_r+0x85a>
 8005010:	2102      	movs	r1, #2
 8005012:	e780      	b.n	8004f16 <_dtoa_r+0x32e>
 8005014:	07d4      	lsls	r4, r2, #31
 8005016:	d504      	bpl.n	8005022 <_dtoa_r+0x43a>
 8005018:	ed90 6b00 	vldr	d6, [r0]
 800501c:	3101      	adds	r1, #1
 800501e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005022:	1052      	asrs	r2, r2, #1
 8005024:	3008      	adds	r0, #8
 8005026:	e777      	b.n	8004f18 <_dtoa_r+0x330>
 8005028:	d022      	beq.n	8005070 <_dtoa_r+0x488>
 800502a:	f1cb 0200 	rsb	r2, fp, #0
 800502e:	4970      	ldr	r1, [pc, #448]	; (80051f0 <_dtoa_r+0x608>)
 8005030:	f002 000f 	and.w	r0, r2, #15
 8005034:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005038:	ed91 7b00 	vldr	d7, [r1]
 800503c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005040:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005044:	486b      	ldr	r0, [pc, #428]	; (80051f4 <_dtoa_r+0x60c>)
 8005046:	1112      	asrs	r2, r2, #4
 8005048:	2400      	movs	r4, #0
 800504a:	2102      	movs	r1, #2
 800504c:	b92a      	cbnz	r2, 800505a <_dtoa_r+0x472>
 800504e:	2c00      	cmp	r4, #0
 8005050:	f43f af6a 	beq.w	8004f28 <_dtoa_r+0x340>
 8005054:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005058:	e766      	b.n	8004f28 <_dtoa_r+0x340>
 800505a:	07d7      	lsls	r7, r2, #31
 800505c:	d505      	bpl.n	800506a <_dtoa_r+0x482>
 800505e:	ed90 6b00 	vldr	d6, [r0]
 8005062:	3101      	adds	r1, #1
 8005064:	2401      	movs	r4, #1
 8005066:	ee27 7b06 	vmul.f64	d7, d7, d6
 800506a:	1052      	asrs	r2, r2, #1
 800506c:	3008      	adds	r0, #8
 800506e:	e7ed      	b.n	800504c <_dtoa_r+0x464>
 8005070:	2102      	movs	r1, #2
 8005072:	e759      	b.n	8004f28 <_dtoa_r+0x340>
 8005074:	465a      	mov	r2, fp
 8005076:	464c      	mov	r4, r9
 8005078:	e775      	b.n	8004f66 <_dtoa_r+0x37e>
 800507a:	ec41 0b17 	vmov	d7, r0, r1
 800507e:	495c      	ldr	r1, [pc, #368]	; (80051f0 <_dtoa_r+0x608>)
 8005080:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005084:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005088:	9901      	ldr	r1, [sp, #4]
 800508a:	440c      	add	r4, r1
 800508c:	9907      	ldr	r1, [sp, #28]
 800508e:	b351      	cbz	r1, 80050e6 <_dtoa_r+0x4fe>
 8005090:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005094:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005098:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800509c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80050a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80050a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80050a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80050ac:	ee14 1a90 	vmov	r1, s9
 80050b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80050b4:	3130      	adds	r1, #48	; 0x30
 80050b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80050ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c2:	f808 1b01 	strb.w	r1, [r8], #1
 80050c6:	d439      	bmi.n	800513c <_dtoa_r+0x554>
 80050c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80050cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80050d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d4:	d472      	bmi.n	80051bc <_dtoa_r+0x5d4>
 80050d6:	45a0      	cmp	r8, r4
 80050d8:	f43f af6b 	beq.w	8004fb2 <_dtoa_r+0x3ca>
 80050dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80050e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80050e4:	e7e0      	b.n	80050a8 <_dtoa_r+0x4c0>
 80050e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80050ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80050ee:	4620      	mov	r0, r4
 80050f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80050f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80050f8:	ee14 1a90 	vmov	r1, s9
 80050fc:	3130      	adds	r1, #48	; 0x30
 80050fe:	f808 1b01 	strb.w	r1, [r8], #1
 8005102:	45a0      	cmp	r8, r4
 8005104:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005108:	ee36 6b45 	vsub.f64	d6, d6, d5
 800510c:	d118      	bne.n	8005140 <_dtoa_r+0x558>
 800510e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005112:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005116:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511e:	dc4d      	bgt.n	80051bc <_dtoa_r+0x5d4>
 8005120:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005124:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512c:	f57f af41 	bpl.w	8004fb2 <_dtoa_r+0x3ca>
 8005130:	4680      	mov	r8, r0
 8005132:	3801      	subs	r0, #1
 8005134:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005138:	2b30      	cmp	r3, #48	; 0x30
 800513a:	d0f9      	beq.n	8005130 <_dtoa_r+0x548>
 800513c:	4693      	mov	fp, r2
 800513e:	e02a      	b.n	8005196 <_dtoa_r+0x5ae>
 8005140:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005144:	e7d6      	b.n	80050f4 <_dtoa_r+0x50c>
 8005146:	ed9d 7b02 	vldr	d7, [sp, #8]
 800514a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800514e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005152:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005156:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800515a:	ee15 3a10 	vmov	r3, s10
 800515e:	3330      	adds	r3, #48	; 0x30
 8005160:	f808 3b01 	strb.w	r3, [r8], #1
 8005164:	9b01      	ldr	r3, [sp, #4]
 8005166:	eba8 0303 	sub.w	r3, r8, r3
 800516a:	4599      	cmp	r9, r3
 800516c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005170:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005174:	d133      	bne.n	80051de <_dtoa_r+0x5f6>
 8005176:	ee37 7b07 	vadd.f64	d7, d7, d7
 800517a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800517e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005182:	dc1a      	bgt.n	80051ba <_dtoa_r+0x5d2>
 8005184:	eeb4 7b46 	vcmp.f64	d7, d6
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518c:	d103      	bne.n	8005196 <_dtoa_r+0x5ae>
 800518e:	ee15 3a10 	vmov	r3, s10
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d411      	bmi.n	80051ba <_dtoa_r+0x5d2>
 8005196:	4629      	mov	r1, r5
 8005198:	4630      	mov	r0, r6
 800519a:	f000 fbd1 	bl	8005940 <_Bfree>
 800519e:	2300      	movs	r3, #0
 80051a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051a2:	f888 3000 	strb.w	r3, [r8]
 80051a6:	f10b 0301 	add.w	r3, fp, #1
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f43f ad69 	beq.w	8004c86 <_dtoa_r+0x9e>
 80051b4:	f8c3 8000 	str.w	r8, [r3]
 80051b8:	e565      	b.n	8004c86 <_dtoa_r+0x9e>
 80051ba:	465a      	mov	r2, fp
 80051bc:	4643      	mov	r3, r8
 80051be:	4698      	mov	r8, r3
 80051c0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80051c4:	2939      	cmp	r1, #57	; 0x39
 80051c6:	d106      	bne.n	80051d6 <_dtoa_r+0x5ee>
 80051c8:	9901      	ldr	r1, [sp, #4]
 80051ca:	4299      	cmp	r1, r3
 80051cc:	d1f7      	bne.n	80051be <_dtoa_r+0x5d6>
 80051ce:	9801      	ldr	r0, [sp, #4]
 80051d0:	2130      	movs	r1, #48	; 0x30
 80051d2:	3201      	adds	r2, #1
 80051d4:	7001      	strb	r1, [r0, #0]
 80051d6:	7819      	ldrb	r1, [r3, #0]
 80051d8:	3101      	adds	r1, #1
 80051da:	7019      	strb	r1, [r3, #0]
 80051dc:	e7ae      	b.n	800513c <_dtoa_r+0x554>
 80051de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80051e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80051e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ea:	d1b2      	bne.n	8005152 <_dtoa_r+0x56a>
 80051ec:	e7d3      	b.n	8005196 <_dtoa_r+0x5ae>
 80051ee:	bf00      	nop
 80051f0:	080068e8 	.word	0x080068e8
 80051f4:	080068c0 	.word	0x080068c0
 80051f8:	9907      	ldr	r1, [sp, #28]
 80051fa:	2900      	cmp	r1, #0
 80051fc:	f000 80d0 	beq.w	80053a0 <_dtoa_r+0x7b8>
 8005200:	9906      	ldr	r1, [sp, #24]
 8005202:	2901      	cmp	r1, #1
 8005204:	f300 80b4 	bgt.w	8005370 <_dtoa_r+0x788>
 8005208:	9909      	ldr	r1, [sp, #36]	; 0x24
 800520a:	2900      	cmp	r1, #0
 800520c:	f000 80ac 	beq.w	8005368 <_dtoa_r+0x780>
 8005210:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005214:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005218:	461c      	mov	r4, r3
 800521a:	9309      	str	r3, [sp, #36]	; 0x24
 800521c:	9b04      	ldr	r3, [sp, #16]
 800521e:	4413      	add	r3, r2
 8005220:	9304      	str	r3, [sp, #16]
 8005222:	9b05      	ldr	r3, [sp, #20]
 8005224:	2101      	movs	r1, #1
 8005226:	4413      	add	r3, r2
 8005228:	4630      	mov	r0, r6
 800522a:	9305      	str	r3, [sp, #20]
 800522c:	f000 fc3e 	bl	8005aac <__i2b>
 8005230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005232:	4607      	mov	r7, r0
 8005234:	f1b8 0f00 	cmp.w	r8, #0
 8005238:	d00d      	beq.n	8005256 <_dtoa_r+0x66e>
 800523a:	9a05      	ldr	r2, [sp, #20]
 800523c:	2a00      	cmp	r2, #0
 800523e:	dd0a      	ble.n	8005256 <_dtoa_r+0x66e>
 8005240:	4542      	cmp	r2, r8
 8005242:	9904      	ldr	r1, [sp, #16]
 8005244:	bfa8      	it	ge
 8005246:	4642      	movge	r2, r8
 8005248:	1a89      	subs	r1, r1, r2
 800524a:	9104      	str	r1, [sp, #16]
 800524c:	9905      	ldr	r1, [sp, #20]
 800524e:	eba8 0802 	sub.w	r8, r8, r2
 8005252:	1a8a      	subs	r2, r1, r2
 8005254:	9205      	str	r2, [sp, #20]
 8005256:	b303      	cbz	r3, 800529a <_dtoa_r+0x6b2>
 8005258:	9a07      	ldr	r2, [sp, #28]
 800525a:	2a00      	cmp	r2, #0
 800525c:	f000 80a5 	beq.w	80053aa <_dtoa_r+0x7c2>
 8005260:	2c00      	cmp	r4, #0
 8005262:	dd13      	ble.n	800528c <_dtoa_r+0x6a4>
 8005264:	4639      	mov	r1, r7
 8005266:	4622      	mov	r2, r4
 8005268:	4630      	mov	r0, r6
 800526a:	930d      	str	r3, [sp, #52]	; 0x34
 800526c:	f000 fcde 	bl	8005c2c <__pow5mult>
 8005270:	462a      	mov	r2, r5
 8005272:	4601      	mov	r1, r0
 8005274:	4607      	mov	r7, r0
 8005276:	4630      	mov	r0, r6
 8005278:	f000 fc2e 	bl	8005ad8 <__multiply>
 800527c:	4629      	mov	r1, r5
 800527e:	9009      	str	r0, [sp, #36]	; 0x24
 8005280:	4630      	mov	r0, r6
 8005282:	f000 fb5d 	bl	8005940 <_Bfree>
 8005286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800528a:	4615      	mov	r5, r2
 800528c:	1b1a      	subs	r2, r3, r4
 800528e:	d004      	beq.n	800529a <_dtoa_r+0x6b2>
 8005290:	4629      	mov	r1, r5
 8005292:	4630      	mov	r0, r6
 8005294:	f000 fcca 	bl	8005c2c <__pow5mult>
 8005298:	4605      	mov	r5, r0
 800529a:	2101      	movs	r1, #1
 800529c:	4630      	mov	r0, r6
 800529e:	f000 fc05 	bl	8005aac <__i2b>
 80052a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	f340 8081 	ble.w	80053ae <_dtoa_r+0x7c6>
 80052ac:	461a      	mov	r2, r3
 80052ae:	4601      	mov	r1, r0
 80052b0:	4630      	mov	r0, r6
 80052b2:	f000 fcbb 	bl	8005c2c <__pow5mult>
 80052b6:	9b06      	ldr	r3, [sp, #24]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	4604      	mov	r4, r0
 80052bc:	dd7a      	ble.n	80053b4 <_dtoa_r+0x7cc>
 80052be:	2300      	movs	r3, #0
 80052c0:	9309      	str	r3, [sp, #36]	; 0x24
 80052c2:	6922      	ldr	r2, [r4, #16]
 80052c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80052c8:	6910      	ldr	r0, [r2, #16]
 80052ca:	f000 fba1 	bl	8005a10 <__hi0bits>
 80052ce:	f1c0 0020 	rsb	r0, r0, #32
 80052d2:	9b05      	ldr	r3, [sp, #20]
 80052d4:	4418      	add	r0, r3
 80052d6:	f010 001f 	ands.w	r0, r0, #31
 80052da:	f000 8093 	beq.w	8005404 <_dtoa_r+0x81c>
 80052de:	f1c0 0220 	rsb	r2, r0, #32
 80052e2:	2a04      	cmp	r2, #4
 80052e4:	f340 8085 	ble.w	80053f2 <_dtoa_r+0x80a>
 80052e8:	9b04      	ldr	r3, [sp, #16]
 80052ea:	f1c0 001c 	rsb	r0, r0, #28
 80052ee:	4403      	add	r3, r0
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	9b05      	ldr	r3, [sp, #20]
 80052f4:	4480      	add	r8, r0
 80052f6:	4403      	add	r3, r0
 80052f8:	9305      	str	r3, [sp, #20]
 80052fa:	9b04      	ldr	r3, [sp, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	dd05      	ble.n	800530c <_dtoa_r+0x724>
 8005300:	4629      	mov	r1, r5
 8005302:	461a      	mov	r2, r3
 8005304:	4630      	mov	r0, r6
 8005306:	f000 fceb 	bl	8005ce0 <__lshift>
 800530a:	4605      	mov	r5, r0
 800530c:	9b05      	ldr	r3, [sp, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	dd05      	ble.n	800531e <_dtoa_r+0x736>
 8005312:	4621      	mov	r1, r4
 8005314:	461a      	mov	r2, r3
 8005316:	4630      	mov	r0, r6
 8005318:	f000 fce2 	bl	8005ce0 <__lshift>
 800531c:	4604      	mov	r4, r0
 800531e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d071      	beq.n	8005408 <_dtoa_r+0x820>
 8005324:	4621      	mov	r1, r4
 8005326:	4628      	mov	r0, r5
 8005328:	f000 fd46 	bl	8005db8 <__mcmp>
 800532c:	2800      	cmp	r0, #0
 800532e:	da6b      	bge.n	8005408 <_dtoa_r+0x820>
 8005330:	2300      	movs	r3, #0
 8005332:	4629      	mov	r1, r5
 8005334:	220a      	movs	r2, #10
 8005336:	4630      	mov	r0, r6
 8005338:	f000 fb24 	bl	8005984 <__multadd>
 800533c:	9b07      	ldr	r3, [sp, #28]
 800533e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005342:	4605      	mov	r5, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8197 	beq.w	8005678 <_dtoa_r+0xa90>
 800534a:	4639      	mov	r1, r7
 800534c:	2300      	movs	r3, #0
 800534e:	220a      	movs	r2, #10
 8005350:	4630      	mov	r0, r6
 8005352:	f000 fb17 	bl	8005984 <__multadd>
 8005356:	f1ba 0f00 	cmp.w	sl, #0
 800535a:	4607      	mov	r7, r0
 800535c:	f300 8093 	bgt.w	8005486 <_dtoa_r+0x89e>
 8005360:	9b06      	ldr	r3, [sp, #24]
 8005362:	2b02      	cmp	r3, #2
 8005364:	dc57      	bgt.n	8005416 <_dtoa_r+0x82e>
 8005366:	e08e      	b.n	8005486 <_dtoa_r+0x89e>
 8005368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800536a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800536e:	e751      	b.n	8005214 <_dtoa_r+0x62c>
 8005370:	f109 34ff 	add.w	r4, r9, #4294967295
 8005374:	42a3      	cmp	r3, r4
 8005376:	bfbf      	itttt	lt
 8005378:	1ae2      	sublt	r2, r4, r3
 800537a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800537c:	189b      	addlt	r3, r3, r2
 800537e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005380:	bfae      	itee	ge
 8005382:	1b1c      	subge	r4, r3, r4
 8005384:	4623      	movlt	r3, r4
 8005386:	2400      	movlt	r4, #0
 8005388:	f1b9 0f00 	cmp.w	r9, #0
 800538c:	bfb5      	itete	lt
 800538e:	9a04      	ldrlt	r2, [sp, #16]
 8005390:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005394:	eba2 0809 	sublt.w	r8, r2, r9
 8005398:	464a      	movge	r2, r9
 800539a:	bfb8      	it	lt
 800539c:	2200      	movlt	r2, #0
 800539e:	e73c      	b.n	800521a <_dtoa_r+0x632>
 80053a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80053a4:	9f07      	ldr	r7, [sp, #28]
 80053a6:	461c      	mov	r4, r3
 80053a8:	e744      	b.n	8005234 <_dtoa_r+0x64c>
 80053aa:	461a      	mov	r2, r3
 80053ac:	e770      	b.n	8005290 <_dtoa_r+0x6a8>
 80053ae:	9b06      	ldr	r3, [sp, #24]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	dc18      	bgt.n	80053e6 <_dtoa_r+0x7fe>
 80053b4:	9b02      	ldr	r3, [sp, #8]
 80053b6:	b9b3      	cbnz	r3, 80053e6 <_dtoa_r+0x7fe>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80053be:	b9a2      	cbnz	r2, 80053ea <_dtoa_r+0x802>
 80053c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053c4:	0d12      	lsrs	r2, r2, #20
 80053c6:	0512      	lsls	r2, r2, #20
 80053c8:	b18a      	cbz	r2, 80053ee <_dtoa_r+0x806>
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	3301      	adds	r3, #1
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	9b05      	ldr	r3, [sp, #20]
 80053d2:	3301      	adds	r3, #1
 80053d4:	9305      	str	r3, [sp, #20]
 80053d6:	2301      	movs	r3, #1
 80053d8:	9309      	str	r3, [sp, #36]	; 0x24
 80053da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f af70 	bne.w	80052c2 <_dtoa_r+0x6da>
 80053e2:	2001      	movs	r0, #1
 80053e4:	e775      	b.n	80052d2 <_dtoa_r+0x6ea>
 80053e6:	2300      	movs	r3, #0
 80053e8:	e7f6      	b.n	80053d8 <_dtoa_r+0x7f0>
 80053ea:	9b02      	ldr	r3, [sp, #8]
 80053ec:	e7f4      	b.n	80053d8 <_dtoa_r+0x7f0>
 80053ee:	9209      	str	r2, [sp, #36]	; 0x24
 80053f0:	e7f3      	b.n	80053da <_dtoa_r+0x7f2>
 80053f2:	d082      	beq.n	80052fa <_dtoa_r+0x712>
 80053f4:	9b04      	ldr	r3, [sp, #16]
 80053f6:	321c      	adds	r2, #28
 80053f8:	4413      	add	r3, r2
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	9b05      	ldr	r3, [sp, #20]
 80053fe:	4490      	add	r8, r2
 8005400:	4413      	add	r3, r2
 8005402:	e779      	b.n	80052f8 <_dtoa_r+0x710>
 8005404:	4602      	mov	r2, r0
 8005406:	e7f5      	b.n	80053f4 <_dtoa_r+0x80c>
 8005408:	f1b9 0f00 	cmp.w	r9, #0
 800540c:	dc36      	bgt.n	800547c <_dtoa_r+0x894>
 800540e:	9b06      	ldr	r3, [sp, #24]
 8005410:	2b02      	cmp	r3, #2
 8005412:	dd33      	ble.n	800547c <_dtoa_r+0x894>
 8005414:	46ca      	mov	sl, r9
 8005416:	f1ba 0f00 	cmp.w	sl, #0
 800541a:	d10d      	bne.n	8005438 <_dtoa_r+0x850>
 800541c:	4621      	mov	r1, r4
 800541e:	4653      	mov	r3, sl
 8005420:	2205      	movs	r2, #5
 8005422:	4630      	mov	r0, r6
 8005424:	f000 faae 	bl	8005984 <__multadd>
 8005428:	4601      	mov	r1, r0
 800542a:	4604      	mov	r4, r0
 800542c:	4628      	mov	r0, r5
 800542e:	f000 fcc3 	bl	8005db8 <__mcmp>
 8005432:	2800      	cmp	r0, #0
 8005434:	f73f ade4 	bgt.w	8005000 <_dtoa_r+0x418>
 8005438:	9b08      	ldr	r3, [sp, #32]
 800543a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800543e:	ea6f 0b03 	mvn.w	fp, r3
 8005442:	f04f 0900 	mov.w	r9, #0
 8005446:	4621      	mov	r1, r4
 8005448:	4630      	mov	r0, r6
 800544a:	f000 fa79 	bl	8005940 <_Bfree>
 800544e:	2f00      	cmp	r7, #0
 8005450:	f43f aea1 	beq.w	8005196 <_dtoa_r+0x5ae>
 8005454:	f1b9 0f00 	cmp.w	r9, #0
 8005458:	d005      	beq.n	8005466 <_dtoa_r+0x87e>
 800545a:	45b9      	cmp	r9, r7
 800545c:	d003      	beq.n	8005466 <_dtoa_r+0x87e>
 800545e:	4649      	mov	r1, r9
 8005460:	4630      	mov	r0, r6
 8005462:	f000 fa6d 	bl	8005940 <_Bfree>
 8005466:	4639      	mov	r1, r7
 8005468:	4630      	mov	r0, r6
 800546a:	f000 fa69 	bl	8005940 <_Bfree>
 800546e:	e692      	b.n	8005196 <_dtoa_r+0x5ae>
 8005470:	2400      	movs	r4, #0
 8005472:	4627      	mov	r7, r4
 8005474:	e7e0      	b.n	8005438 <_dtoa_r+0x850>
 8005476:	4693      	mov	fp, r2
 8005478:	4627      	mov	r7, r4
 800547a:	e5c1      	b.n	8005000 <_dtoa_r+0x418>
 800547c:	9b07      	ldr	r3, [sp, #28]
 800547e:	46ca      	mov	sl, r9
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8100 	beq.w	8005686 <_dtoa_r+0xa9e>
 8005486:	f1b8 0f00 	cmp.w	r8, #0
 800548a:	dd05      	ble.n	8005498 <_dtoa_r+0x8b0>
 800548c:	4639      	mov	r1, r7
 800548e:	4642      	mov	r2, r8
 8005490:	4630      	mov	r0, r6
 8005492:	f000 fc25 	bl	8005ce0 <__lshift>
 8005496:	4607      	mov	r7, r0
 8005498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549a:	2b00      	cmp	r3, #0
 800549c:	d05d      	beq.n	800555a <_dtoa_r+0x972>
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4630      	mov	r0, r6
 80054a2:	f000 fa0d 	bl	80058c0 <_Balloc>
 80054a6:	4680      	mov	r8, r0
 80054a8:	b928      	cbnz	r0, 80054b6 <_dtoa_r+0x8ce>
 80054aa:	4b82      	ldr	r3, [pc, #520]	; (80056b4 <_dtoa_r+0xacc>)
 80054ac:	4602      	mov	r2, r0
 80054ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80054b2:	f7ff bbb1 	b.w	8004c18 <_dtoa_r+0x30>
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	3202      	adds	r2, #2
 80054ba:	0092      	lsls	r2, r2, #2
 80054bc:	f107 010c 	add.w	r1, r7, #12
 80054c0:	300c      	adds	r0, #12
 80054c2:	f000 fe37 	bl	8006134 <memcpy>
 80054c6:	2201      	movs	r2, #1
 80054c8:	4641      	mov	r1, r8
 80054ca:	4630      	mov	r0, r6
 80054cc:	f000 fc08 	bl	8005ce0 <__lshift>
 80054d0:	9b01      	ldr	r3, [sp, #4]
 80054d2:	3301      	adds	r3, #1
 80054d4:	9304      	str	r3, [sp, #16]
 80054d6:	9b01      	ldr	r3, [sp, #4]
 80054d8:	4453      	add	r3, sl
 80054da:	9308      	str	r3, [sp, #32]
 80054dc:	9b02      	ldr	r3, [sp, #8]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	46b9      	mov	r9, r7
 80054e4:	9307      	str	r3, [sp, #28]
 80054e6:	4607      	mov	r7, r0
 80054e8:	9b04      	ldr	r3, [sp, #16]
 80054ea:	4621      	mov	r1, r4
 80054ec:	3b01      	subs	r3, #1
 80054ee:	4628      	mov	r0, r5
 80054f0:	9302      	str	r3, [sp, #8]
 80054f2:	f7ff faf0 	bl	8004ad6 <quorem>
 80054f6:	4603      	mov	r3, r0
 80054f8:	3330      	adds	r3, #48	; 0x30
 80054fa:	9005      	str	r0, [sp, #20]
 80054fc:	4649      	mov	r1, r9
 80054fe:	4628      	mov	r0, r5
 8005500:	9309      	str	r3, [sp, #36]	; 0x24
 8005502:	f000 fc59 	bl	8005db8 <__mcmp>
 8005506:	463a      	mov	r2, r7
 8005508:	4682      	mov	sl, r0
 800550a:	4621      	mov	r1, r4
 800550c:	4630      	mov	r0, r6
 800550e:	f000 fc6f 	bl	8005df0 <__mdiff>
 8005512:	68c2      	ldr	r2, [r0, #12]
 8005514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005516:	4680      	mov	r8, r0
 8005518:	bb0a      	cbnz	r2, 800555e <_dtoa_r+0x976>
 800551a:	4601      	mov	r1, r0
 800551c:	4628      	mov	r0, r5
 800551e:	f000 fc4b 	bl	8005db8 <__mcmp>
 8005522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005524:	4602      	mov	r2, r0
 8005526:	4641      	mov	r1, r8
 8005528:	4630      	mov	r0, r6
 800552a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800552e:	f000 fa07 	bl	8005940 <_Bfree>
 8005532:	9b06      	ldr	r3, [sp, #24]
 8005534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005536:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800553a:	ea43 0102 	orr.w	r1, r3, r2
 800553e:	9b07      	ldr	r3, [sp, #28]
 8005540:	4319      	orrs	r1, r3
 8005542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005544:	d10d      	bne.n	8005562 <_dtoa_r+0x97a>
 8005546:	2b39      	cmp	r3, #57	; 0x39
 8005548:	d029      	beq.n	800559e <_dtoa_r+0x9b6>
 800554a:	f1ba 0f00 	cmp.w	sl, #0
 800554e:	dd01      	ble.n	8005554 <_dtoa_r+0x96c>
 8005550:	9b05      	ldr	r3, [sp, #20]
 8005552:	3331      	adds	r3, #49	; 0x31
 8005554:	9a02      	ldr	r2, [sp, #8]
 8005556:	7013      	strb	r3, [r2, #0]
 8005558:	e775      	b.n	8005446 <_dtoa_r+0x85e>
 800555a:	4638      	mov	r0, r7
 800555c:	e7b8      	b.n	80054d0 <_dtoa_r+0x8e8>
 800555e:	2201      	movs	r2, #1
 8005560:	e7e1      	b.n	8005526 <_dtoa_r+0x93e>
 8005562:	f1ba 0f00 	cmp.w	sl, #0
 8005566:	db06      	blt.n	8005576 <_dtoa_r+0x98e>
 8005568:	9906      	ldr	r1, [sp, #24]
 800556a:	ea41 0a0a 	orr.w	sl, r1, sl
 800556e:	9907      	ldr	r1, [sp, #28]
 8005570:	ea5a 0a01 	orrs.w	sl, sl, r1
 8005574:	d120      	bne.n	80055b8 <_dtoa_r+0x9d0>
 8005576:	2a00      	cmp	r2, #0
 8005578:	ddec      	ble.n	8005554 <_dtoa_r+0x96c>
 800557a:	4629      	mov	r1, r5
 800557c:	2201      	movs	r2, #1
 800557e:	4630      	mov	r0, r6
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	f000 fbad 	bl	8005ce0 <__lshift>
 8005586:	4621      	mov	r1, r4
 8005588:	4605      	mov	r5, r0
 800558a:	f000 fc15 	bl	8005db8 <__mcmp>
 800558e:	2800      	cmp	r0, #0
 8005590:	9b04      	ldr	r3, [sp, #16]
 8005592:	dc02      	bgt.n	800559a <_dtoa_r+0x9b2>
 8005594:	d1de      	bne.n	8005554 <_dtoa_r+0x96c>
 8005596:	07da      	lsls	r2, r3, #31
 8005598:	d5dc      	bpl.n	8005554 <_dtoa_r+0x96c>
 800559a:	2b39      	cmp	r3, #57	; 0x39
 800559c:	d1d8      	bne.n	8005550 <_dtoa_r+0x968>
 800559e:	9a02      	ldr	r2, [sp, #8]
 80055a0:	2339      	movs	r3, #57	; 0x39
 80055a2:	7013      	strb	r3, [r2, #0]
 80055a4:	4643      	mov	r3, r8
 80055a6:	4698      	mov	r8, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80055ae:	2a39      	cmp	r2, #57	; 0x39
 80055b0:	d051      	beq.n	8005656 <_dtoa_r+0xa6e>
 80055b2:	3201      	adds	r2, #1
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e746      	b.n	8005446 <_dtoa_r+0x85e>
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	dd03      	ble.n	80055c4 <_dtoa_r+0x9dc>
 80055bc:	2b39      	cmp	r3, #57	; 0x39
 80055be:	d0ee      	beq.n	800559e <_dtoa_r+0x9b6>
 80055c0:	3301      	adds	r3, #1
 80055c2:	e7c7      	b.n	8005554 <_dtoa_r+0x96c>
 80055c4:	9a04      	ldr	r2, [sp, #16]
 80055c6:	9908      	ldr	r1, [sp, #32]
 80055c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80055cc:	428a      	cmp	r2, r1
 80055ce:	d02b      	beq.n	8005628 <_dtoa_r+0xa40>
 80055d0:	4629      	mov	r1, r5
 80055d2:	2300      	movs	r3, #0
 80055d4:	220a      	movs	r2, #10
 80055d6:	4630      	mov	r0, r6
 80055d8:	f000 f9d4 	bl	8005984 <__multadd>
 80055dc:	45b9      	cmp	r9, r7
 80055de:	4605      	mov	r5, r0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	f04f 020a 	mov.w	r2, #10
 80055e8:	4649      	mov	r1, r9
 80055ea:	4630      	mov	r0, r6
 80055ec:	d107      	bne.n	80055fe <_dtoa_r+0xa16>
 80055ee:	f000 f9c9 	bl	8005984 <__multadd>
 80055f2:	4681      	mov	r9, r0
 80055f4:	4607      	mov	r7, r0
 80055f6:	9b04      	ldr	r3, [sp, #16]
 80055f8:	3301      	adds	r3, #1
 80055fa:	9304      	str	r3, [sp, #16]
 80055fc:	e774      	b.n	80054e8 <_dtoa_r+0x900>
 80055fe:	f000 f9c1 	bl	8005984 <__multadd>
 8005602:	4639      	mov	r1, r7
 8005604:	4681      	mov	r9, r0
 8005606:	2300      	movs	r3, #0
 8005608:	220a      	movs	r2, #10
 800560a:	4630      	mov	r0, r6
 800560c:	f000 f9ba 	bl	8005984 <__multadd>
 8005610:	4607      	mov	r7, r0
 8005612:	e7f0      	b.n	80055f6 <_dtoa_r+0xa0e>
 8005614:	f1ba 0f00 	cmp.w	sl, #0
 8005618:	9a01      	ldr	r2, [sp, #4]
 800561a:	bfcc      	ite	gt
 800561c:	46d0      	movgt	r8, sl
 800561e:	f04f 0801 	movle.w	r8, #1
 8005622:	4490      	add	r8, r2
 8005624:	f04f 0900 	mov.w	r9, #0
 8005628:	4629      	mov	r1, r5
 800562a:	2201      	movs	r2, #1
 800562c:	4630      	mov	r0, r6
 800562e:	9302      	str	r3, [sp, #8]
 8005630:	f000 fb56 	bl	8005ce0 <__lshift>
 8005634:	4621      	mov	r1, r4
 8005636:	4605      	mov	r5, r0
 8005638:	f000 fbbe 	bl	8005db8 <__mcmp>
 800563c:	2800      	cmp	r0, #0
 800563e:	dcb1      	bgt.n	80055a4 <_dtoa_r+0x9bc>
 8005640:	d102      	bne.n	8005648 <_dtoa_r+0xa60>
 8005642:	9b02      	ldr	r3, [sp, #8]
 8005644:	07db      	lsls	r3, r3, #31
 8005646:	d4ad      	bmi.n	80055a4 <_dtoa_r+0x9bc>
 8005648:	4643      	mov	r3, r8
 800564a:	4698      	mov	r8, r3
 800564c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005650:	2a30      	cmp	r2, #48	; 0x30
 8005652:	d0fa      	beq.n	800564a <_dtoa_r+0xa62>
 8005654:	e6f7      	b.n	8005446 <_dtoa_r+0x85e>
 8005656:	9a01      	ldr	r2, [sp, #4]
 8005658:	429a      	cmp	r2, r3
 800565a:	d1a4      	bne.n	80055a6 <_dtoa_r+0x9be>
 800565c:	f10b 0b01 	add.w	fp, fp, #1
 8005660:	2331      	movs	r3, #49	; 0x31
 8005662:	e778      	b.n	8005556 <_dtoa_r+0x96e>
 8005664:	4b14      	ldr	r3, [pc, #80]	; (80056b8 <_dtoa_r+0xad0>)
 8005666:	f7ff bb2a 	b.w	8004cbe <_dtoa_r+0xd6>
 800566a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800566c:	2b00      	cmp	r3, #0
 800566e:	f47f ab05 	bne.w	8004c7c <_dtoa_r+0x94>
 8005672:	4b12      	ldr	r3, [pc, #72]	; (80056bc <_dtoa_r+0xad4>)
 8005674:	f7ff bb23 	b.w	8004cbe <_dtoa_r+0xd6>
 8005678:	f1ba 0f00 	cmp.w	sl, #0
 800567c:	dc03      	bgt.n	8005686 <_dtoa_r+0xa9e>
 800567e:	9b06      	ldr	r3, [sp, #24]
 8005680:	2b02      	cmp	r3, #2
 8005682:	f73f aec8 	bgt.w	8005416 <_dtoa_r+0x82e>
 8005686:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800568a:	4621      	mov	r1, r4
 800568c:	4628      	mov	r0, r5
 800568e:	f7ff fa22 	bl	8004ad6 <quorem>
 8005692:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005696:	f808 3b01 	strb.w	r3, [r8], #1
 800569a:	9a01      	ldr	r2, [sp, #4]
 800569c:	eba8 0202 	sub.w	r2, r8, r2
 80056a0:	4592      	cmp	sl, r2
 80056a2:	ddb7      	ble.n	8005614 <_dtoa_r+0xa2c>
 80056a4:	4629      	mov	r1, r5
 80056a6:	2300      	movs	r3, #0
 80056a8:	220a      	movs	r2, #10
 80056aa:	4630      	mov	r0, r6
 80056ac:	f000 f96a 	bl	8005984 <__multadd>
 80056b0:	4605      	mov	r5, r0
 80056b2:	e7ea      	b.n	800568a <_dtoa_r+0xaa2>
 80056b4:	08006854 	.word	0x08006854
 80056b8:	080067b4 	.word	0x080067b4
 80056bc:	080067d8 	.word	0x080067d8

080056c0 <_free_r>:
 80056c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056c2:	2900      	cmp	r1, #0
 80056c4:	d044      	beq.n	8005750 <_free_r+0x90>
 80056c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056ca:	9001      	str	r0, [sp, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f1a1 0404 	sub.w	r4, r1, #4
 80056d2:	bfb8      	it	lt
 80056d4:	18e4      	addlt	r4, r4, r3
 80056d6:	f000 f8e7 	bl	80058a8 <__malloc_lock>
 80056da:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <_free_r+0x94>)
 80056dc:	9801      	ldr	r0, [sp, #4]
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	b933      	cbnz	r3, 80056f0 <_free_r+0x30>
 80056e2:	6063      	str	r3, [r4, #4]
 80056e4:	6014      	str	r4, [r2, #0]
 80056e6:	b003      	add	sp, #12
 80056e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056ec:	f000 b8e2 	b.w	80058b4 <__malloc_unlock>
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	d908      	bls.n	8005706 <_free_r+0x46>
 80056f4:	6825      	ldr	r5, [r4, #0]
 80056f6:	1961      	adds	r1, r4, r5
 80056f8:	428b      	cmp	r3, r1
 80056fa:	bf01      	itttt	eq
 80056fc:	6819      	ldreq	r1, [r3, #0]
 80056fe:	685b      	ldreq	r3, [r3, #4]
 8005700:	1949      	addeq	r1, r1, r5
 8005702:	6021      	streq	r1, [r4, #0]
 8005704:	e7ed      	b.n	80056e2 <_free_r+0x22>
 8005706:	461a      	mov	r2, r3
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	b10b      	cbz	r3, 8005710 <_free_r+0x50>
 800570c:	42a3      	cmp	r3, r4
 800570e:	d9fa      	bls.n	8005706 <_free_r+0x46>
 8005710:	6811      	ldr	r1, [r2, #0]
 8005712:	1855      	adds	r5, r2, r1
 8005714:	42a5      	cmp	r5, r4
 8005716:	d10b      	bne.n	8005730 <_free_r+0x70>
 8005718:	6824      	ldr	r4, [r4, #0]
 800571a:	4421      	add	r1, r4
 800571c:	1854      	adds	r4, r2, r1
 800571e:	42a3      	cmp	r3, r4
 8005720:	6011      	str	r1, [r2, #0]
 8005722:	d1e0      	bne.n	80056e6 <_free_r+0x26>
 8005724:	681c      	ldr	r4, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	6053      	str	r3, [r2, #4]
 800572a:	440c      	add	r4, r1
 800572c:	6014      	str	r4, [r2, #0]
 800572e:	e7da      	b.n	80056e6 <_free_r+0x26>
 8005730:	d902      	bls.n	8005738 <_free_r+0x78>
 8005732:	230c      	movs	r3, #12
 8005734:	6003      	str	r3, [r0, #0]
 8005736:	e7d6      	b.n	80056e6 <_free_r+0x26>
 8005738:	6825      	ldr	r5, [r4, #0]
 800573a:	1961      	adds	r1, r4, r5
 800573c:	428b      	cmp	r3, r1
 800573e:	bf04      	itt	eq
 8005740:	6819      	ldreq	r1, [r3, #0]
 8005742:	685b      	ldreq	r3, [r3, #4]
 8005744:	6063      	str	r3, [r4, #4]
 8005746:	bf04      	itt	eq
 8005748:	1949      	addeq	r1, r1, r5
 800574a:	6021      	streq	r1, [r4, #0]
 800574c:	6054      	str	r4, [r2, #4]
 800574e:	e7ca      	b.n	80056e6 <_free_r+0x26>
 8005750:	b003      	add	sp, #12
 8005752:	bd30      	pop	{r4, r5, pc}
 8005754:	2000051c 	.word	0x2000051c

08005758 <malloc>:
 8005758:	4b02      	ldr	r3, [pc, #8]	; (8005764 <malloc+0xc>)
 800575a:	4601      	mov	r1, r0
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	f000 b823 	b.w	80057a8 <_malloc_r>
 8005762:	bf00      	nop
 8005764:	200000a0 	.word	0x200000a0

08005768 <sbrk_aligned>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	4e0e      	ldr	r6, [pc, #56]	; (80057a4 <sbrk_aligned+0x3c>)
 800576c:	460c      	mov	r4, r1
 800576e:	6831      	ldr	r1, [r6, #0]
 8005770:	4605      	mov	r5, r0
 8005772:	b911      	cbnz	r1, 800577a <sbrk_aligned+0x12>
 8005774:	f000 fcce 	bl	8006114 <_sbrk_r>
 8005778:	6030      	str	r0, [r6, #0]
 800577a:	4621      	mov	r1, r4
 800577c:	4628      	mov	r0, r5
 800577e:	f000 fcc9 	bl	8006114 <_sbrk_r>
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	d00a      	beq.n	800579c <sbrk_aligned+0x34>
 8005786:	1cc4      	adds	r4, r0, #3
 8005788:	f024 0403 	bic.w	r4, r4, #3
 800578c:	42a0      	cmp	r0, r4
 800578e:	d007      	beq.n	80057a0 <sbrk_aligned+0x38>
 8005790:	1a21      	subs	r1, r4, r0
 8005792:	4628      	mov	r0, r5
 8005794:	f000 fcbe 	bl	8006114 <_sbrk_r>
 8005798:	3001      	adds	r0, #1
 800579a:	d101      	bne.n	80057a0 <sbrk_aligned+0x38>
 800579c:	f04f 34ff 	mov.w	r4, #4294967295
 80057a0:	4620      	mov	r0, r4
 80057a2:	bd70      	pop	{r4, r5, r6, pc}
 80057a4:	20000520 	.word	0x20000520

080057a8 <_malloc_r>:
 80057a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057ac:	1ccd      	adds	r5, r1, #3
 80057ae:	f025 0503 	bic.w	r5, r5, #3
 80057b2:	3508      	adds	r5, #8
 80057b4:	2d0c      	cmp	r5, #12
 80057b6:	bf38      	it	cc
 80057b8:	250c      	movcc	r5, #12
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	4607      	mov	r7, r0
 80057be:	db01      	blt.n	80057c4 <_malloc_r+0x1c>
 80057c0:	42a9      	cmp	r1, r5
 80057c2:	d905      	bls.n	80057d0 <_malloc_r+0x28>
 80057c4:	230c      	movs	r3, #12
 80057c6:	603b      	str	r3, [r7, #0]
 80057c8:	2600      	movs	r6, #0
 80057ca:	4630      	mov	r0, r6
 80057cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80058a4 <_malloc_r+0xfc>
 80057d4:	f000 f868 	bl	80058a8 <__malloc_lock>
 80057d8:	f8d8 3000 	ldr.w	r3, [r8]
 80057dc:	461c      	mov	r4, r3
 80057de:	bb5c      	cbnz	r4, 8005838 <_malloc_r+0x90>
 80057e0:	4629      	mov	r1, r5
 80057e2:	4638      	mov	r0, r7
 80057e4:	f7ff ffc0 	bl	8005768 <sbrk_aligned>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	4604      	mov	r4, r0
 80057ec:	d155      	bne.n	800589a <_malloc_r+0xf2>
 80057ee:	f8d8 4000 	ldr.w	r4, [r8]
 80057f2:	4626      	mov	r6, r4
 80057f4:	2e00      	cmp	r6, #0
 80057f6:	d145      	bne.n	8005884 <_malloc_r+0xdc>
 80057f8:	2c00      	cmp	r4, #0
 80057fa:	d048      	beq.n	800588e <_malloc_r+0xe6>
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	4631      	mov	r1, r6
 8005800:	4638      	mov	r0, r7
 8005802:	eb04 0903 	add.w	r9, r4, r3
 8005806:	f000 fc85 	bl	8006114 <_sbrk_r>
 800580a:	4581      	cmp	r9, r0
 800580c:	d13f      	bne.n	800588e <_malloc_r+0xe6>
 800580e:	6821      	ldr	r1, [r4, #0]
 8005810:	1a6d      	subs	r5, r5, r1
 8005812:	4629      	mov	r1, r5
 8005814:	4638      	mov	r0, r7
 8005816:	f7ff ffa7 	bl	8005768 <sbrk_aligned>
 800581a:	3001      	adds	r0, #1
 800581c:	d037      	beq.n	800588e <_malloc_r+0xe6>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	442b      	add	r3, r5
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	f8d8 3000 	ldr.w	r3, [r8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d038      	beq.n	800589e <_malloc_r+0xf6>
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	42a2      	cmp	r2, r4
 8005830:	d12b      	bne.n	800588a <_malloc_r+0xe2>
 8005832:	2200      	movs	r2, #0
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	e00f      	b.n	8005858 <_malloc_r+0xb0>
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	1b52      	subs	r2, r2, r5
 800583c:	d41f      	bmi.n	800587e <_malloc_r+0xd6>
 800583e:	2a0b      	cmp	r2, #11
 8005840:	d917      	bls.n	8005872 <_malloc_r+0xca>
 8005842:	1961      	adds	r1, r4, r5
 8005844:	42a3      	cmp	r3, r4
 8005846:	6025      	str	r5, [r4, #0]
 8005848:	bf18      	it	ne
 800584a:	6059      	strne	r1, [r3, #4]
 800584c:	6863      	ldr	r3, [r4, #4]
 800584e:	bf08      	it	eq
 8005850:	f8c8 1000 	streq.w	r1, [r8]
 8005854:	5162      	str	r2, [r4, r5]
 8005856:	604b      	str	r3, [r1, #4]
 8005858:	4638      	mov	r0, r7
 800585a:	f104 060b 	add.w	r6, r4, #11
 800585e:	f000 f829 	bl	80058b4 <__malloc_unlock>
 8005862:	f026 0607 	bic.w	r6, r6, #7
 8005866:	1d23      	adds	r3, r4, #4
 8005868:	1af2      	subs	r2, r6, r3
 800586a:	d0ae      	beq.n	80057ca <_malloc_r+0x22>
 800586c:	1b9b      	subs	r3, r3, r6
 800586e:	50a3      	str	r3, [r4, r2]
 8005870:	e7ab      	b.n	80057ca <_malloc_r+0x22>
 8005872:	42a3      	cmp	r3, r4
 8005874:	6862      	ldr	r2, [r4, #4]
 8005876:	d1dd      	bne.n	8005834 <_malloc_r+0x8c>
 8005878:	f8c8 2000 	str.w	r2, [r8]
 800587c:	e7ec      	b.n	8005858 <_malloc_r+0xb0>
 800587e:	4623      	mov	r3, r4
 8005880:	6864      	ldr	r4, [r4, #4]
 8005882:	e7ac      	b.n	80057de <_malloc_r+0x36>
 8005884:	4634      	mov	r4, r6
 8005886:	6876      	ldr	r6, [r6, #4]
 8005888:	e7b4      	b.n	80057f4 <_malloc_r+0x4c>
 800588a:	4613      	mov	r3, r2
 800588c:	e7cc      	b.n	8005828 <_malloc_r+0x80>
 800588e:	230c      	movs	r3, #12
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4638      	mov	r0, r7
 8005894:	f000 f80e 	bl	80058b4 <__malloc_unlock>
 8005898:	e797      	b.n	80057ca <_malloc_r+0x22>
 800589a:	6025      	str	r5, [r4, #0]
 800589c:	e7dc      	b.n	8005858 <_malloc_r+0xb0>
 800589e:	605b      	str	r3, [r3, #4]
 80058a0:	deff      	udf	#255	; 0xff
 80058a2:	bf00      	nop
 80058a4:	2000051c 	.word	0x2000051c

080058a8 <__malloc_lock>:
 80058a8:	4801      	ldr	r0, [pc, #4]	; (80058b0 <__malloc_lock+0x8>)
 80058aa:	f7ff b912 	b.w	8004ad2 <__retarget_lock_acquire_recursive>
 80058ae:	bf00      	nop
 80058b0:	20000518 	.word	0x20000518

080058b4 <__malloc_unlock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	; (80058bc <__malloc_unlock+0x8>)
 80058b6:	f7ff b90d 	b.w	8004ad4 <__retarget_lock_release_recursive>
 80058ba:	bf00      	nop
 80058bc:	20000518 	.word	0x20000518

080058c0 <_Balloc>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	69c6      	ldr	r6, [r0, #28]
 80058c4:	4604      	mov	r4, r0
 80058c6:	460d      	mov	r5, r1
 80058c8:	b976      	cbnz	r6, 80058e8 <_Balloc+0x28>
 80058ca:	2010      	movs	r0, #16
 80058cc:	f7ff ff44 	bl	8005758 <malloc>
 80058d0:	4602      	mov	r2, r0
 80058d2:	61e0      	str	r0, [r4, #28]
 80058d4:	b920      	cbnz	r0, 80058e0 <_Balloc+0x20>
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <_Balloc+0x78>)
 80058d8:	4818      	ldr	r0, [pc, #96]	; (800593c <_Balloc+0x7c>)
 80058da:	216b      	movs	r1, #107	; 0x6b
 80058dc:	f000 fc38 	bl	8006150 <__assert_func>
 80058e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058e4:	6006      	str	r6, [r0, #0]
 80058e6:	60c6      	str	r6, [r0, #12]
 80058e8:	69e6      	ldr	r6, [r4, #28]
 80058ea:	68f3      	ldr	r3, [r6, #12]
 80058ec:	b183      	cbz	r3, 8005910 <_Balloc+0x50>
 80058ee:	69e3      	ldr	r3, [r4, #28]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058f6:	b9b8      	cbnz	r0, 8005928 <_Balloc+0x68>
 80058f8:	2101      	movs	r1, #1
 80058fa:	fa01 f605 	lsl.w	r6, r1, r5
 80058fe:	1d72      	adds	r2, r6, #5
 8005900:	0092      	lsls	r2, r2, #2
 8005902:	4620      	mov	r0, r4
 8005904:	f000 fc42 	bl	800618c <_calloc_r>
 8005908:	b160      	cbz	r0, 8005924 <_Balloc+0x64>
 800590a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800590e:	e00e      	b.n	800592e <_Balloc+0x6e>
 8005910:	2221      	movs	r2, #33	; 0x21
 8005912:	2104      	movs	r1, #4
 8005914:	4620      	mov	r0, r4
 8005916:	f000 fc39 	bl	800618c <_calloc_r>
 800591a:	69e3      	ldr	r3, [r4, #28]
 800591c:	60f0      	str	r0, [r6, #12]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e4      	bne.n	80058ee <_Balloc+0x2e>
 8005924:	2000      	movs	r0, #0
 8005926:	bd70      	pop	{r4, r5, r6, pc}
 8005928:	6802      	ldr	r2, [r0, #0]
 800592a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800592e:	2300      	movs	r3, #0
 8005930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005934:	e7f7      	b.n	8005926 <_Balloc+0x66>
 8005936:	bf00      	nop
 8005938:	080067e5 	.word	0x080067e5
 800593c:	08006865 	.word	0x08006865

08005940 <_Bfree>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	69c6      	ldr	r6, [r0, #28]
 8005944:	4605      	mov	r5, r0
 8005946:	460c      	mov	r4, r1
 8005948:	b976      	cbnz	r6, 8005968 <_Bfree+0x28>
 800594a:	2010      	movs	r0, #16
 800594c:	f7ff ff04 	bl	8005758 <malloc>
 8005950:	4602      	mov	r2, r0
 8005952:	61e8      	str	r0, [r5, #28]
 8005954:	b920      	cbnz	r0, 8005960 <_Bfree+0x20>
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <_Bfree+0x3c>)
 8005958:	4809      	ldr	r0, [pc, #36]	; (8005980 <_Bfree+0x40>)
 800595a:	218f      	movs	r1, #143	; 0x8f
 800595c:	f000 fbf8 	bl	8006150 <__assert_func>
 8005960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005964:	6006      	str	r6, [r0, #0]
 8005966:	60c6      	str	r6, [r0, #12]
 8005968:	b13c      	cbz	r4, 800597a <_Bfree+0x3a>
 800596a:	69eb      	ldr	r3, [r5, #28]
 800596c:	6862      	ldr	r2, [r4, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005974:	6021      	str	r1, [r4, #0]
 8005976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	080067e5 	.word	0x080067e5
 8005980:	08006865 	.word	0x08006865

08005984 <__multadd>:
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	690d      	ldr	r5, [r1, #16]
 800598a:	4607      	mov	r7, r0
 800598c:	460c      	mov	r4, r1
 800598e:	461e      	mov	r6, r3
 8005990:	f101 0c14 	add.w	ip, r1, #20
 8005994:	2000      	movs	r0, #0
 8005996:	f8dc 3000 	ldr.w	r3, [ip]
 800599a:	b299      	uxth	r1, r3
 800599c:	fb02 6101 	mla	r1, r2, r1, r6
 80059a0:	0c1e      	lsrs	r6, r3, #16
 80059a2:	0c0b      	lsrs	r3, r1, #16
 80059a4:	fb02 3306 	mla	r3, r2, r6, r3
 80059a8:	b289      	uxth	r1, r1
 80059aa:	3001      	adds	r0, #1
 80059ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80059b0:	4285      	cmp	r5, r0
 80059b2:	f84c 1b04 	str.w	r1, [ip], #4
 80059b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059ba:	dcec      	bgt.n	8005996 <__multadd+0x12>
 80059bc:	b30e      	cbz	r6, 8005a02 <__multadd+0x7e>
 80059be:	68a3      	ldr	r3, [r4, #8]
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	dc19      	bgt.n	80059f8 <__multadd+0x74>
 80059c4:	6861      	ldr	r1, [r4, #4]
 80059c6:	4638      	mov	r0, r7
 80059c8:	3101      	adds	r1, #1
 80059ca:	f7ff ff79 	bl	80058c0 <_Balloc>
 80059ce:	4680      	mov	r8, r0
 80059d0:	b928      	cbnz	r0, 80059de <__multadd+0x5a>
 80059d2:	4602      	mov	r2, r0
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <__multadd+0x84>)
 80059d6:	480d      	ldr	r0, [pc, #52]	; (8005a0c <__multadd+0x88>)
 80059d8:	21ba      	movs	r1, #186	; 0xba
 80059da:	f000 fbb9 	bl	8006150 <__assert_func>
 80059de:	6922      	ldr	r2, [r4, #16]
 80059e0:	3202      	adds	r2, #2
 80059e2:	f104 010c 	add.w	r1, r4, #12
 80059e6:	0092      	lsls	r2, r2, #2
 80059e8:	300c      	adds	r0, #12
 80059ea:	f000 fba3 	bl	8006134 <memcpy>
 80059ee:	4621      	mov	r1, r4
 80059f0:	4638      	mov	r0, r7
 80059f2:	f7ff ffa5 	bl	8005940 <_Bfree>
 80059f6:	4644      	mov	r4, r8
 80059f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059fc:	3501      	adds	r5, #1
 80059fe:	615e      	str	r6, [r3, #20]
 8005a00:	6125      	str	r5, [r4, #16]
 8005a02:	4620      	mov	r0, r4
 8005a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a08:	08006854 	.word	0x08006854
 8005a0c:	08006865 	.word	0x08006865

08005a10 <__hi0bits>:
 8005a10:	0c03      	lsrs	r3, r0, #16
 8005a12:	041b      	lsls	r3, r3, #16
 8005a14:	b9d3      	cbnz	r3, 8005a4c <__hi0bits+0x3c>
 8005a16:	0400      	lsls	r0, r0, #16
 8005a18:	2310      	movs	r3, #16
 8005a1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005a1e:	bf04      	itt	eq
 8005a20:	0200      	lsleq	r0, r0, #8
 8005a22:	3308      	addeq	r3, #8
 8005a24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005a28:	bf04      	itt	eq
 8005a2a:	0100      	lsleq	r0, r0, #4
 8005a2c:	3304      	addeq	r3, #4
 8005a2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005a32:	bf04      	itt	eq
 8005a34:	0080      	lsleq	r0, r0, #2
 8005a36:	3302      	addeq	r3, #2
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	db05      	blt.n	8005a48 <__hi0bits+0x38>
 8005a3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a40:	f103 0301 	add.w	r3, r3, #1
 8005a44:	bf08      	it	eq
 8005a46:	2320      	moveq	r3, #32
 8005a48:	4618      	mov	r0, r3
 8005a4a:	4770      	bx	lr
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e7e4      	b.n	8005a1a <__hi0bits+0xa>

08005a50 <__lo0bits>:
 8005a50:	6803      	ldr	r3, [r0, #0]
 8005a52:	f013 0207 	ands.w	r2, r3, #7
 8005a56:	d00c      	beq.n	8005a72 <__lo0bits+0x22>
 8005a58:	07d9      	lsls	r1, r3, #31
 8005a5a:	d422      	bmi.n	8005aa2 <__lo0bits+0x52>
 8005a5c:	079a      	lsls	r2, r3, #30
 8005a5e:	bf49      	itett	mi
 8005a60:	085b      	lsrmi	r3, r3, #1
 8005a62:	089b      	lsrpl	r3, r3, #2
 8005a64:	6003      	strmi	r3, [r0, #0]
 8005a66:	2201      	movmi	r2, #1
 8005a68:	bf5c      	itt	pl
 8005a6a:	6003      	strpl	r3, [r0, #0]
 8005a6c:	2202      	movpl	r2, #2
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4770      	bx	lr
 8005a72:	b299      	uxth	r1, r3
 8005a74:	b909      	cbnz	r1, 8005a7a <__lo0bits+0x2a>
 8005a76:	0c1b      	lsrs	r3, r3, #16
 8005a78:	2210      	movs	r2, #16
 8005a7a:	b2d9      	uxtb	r1, r3
 8005a7c:	b909      	cbnz	r1, 8005a82 <__lo0bits+0x32>
 8005a7e:	3208      	adds	r2, #8
 8005a80:	0a1b      	lsrs	r3, r3, #8
 8005a82:	0719      	lsls	r1, r3, #28
 8005a84:	bf04      	itt	eq
 8005a86:	091b      	lsreq	r3, r3, #4
 8005a88:	3204      	addeq	r2, #4
 8005a8a:	0799      	lsls	r1, r3, #30
 8005a8c:	bf04      	itt	eq
 8005a8e:	089b      	lsreq	r3, r3, #2
 8005a90:	3202      	addeq	r2, #2
 8005a92:	07d9      	lsls	r1, r3, #31
 8005a94:	d403      	bmi.n	8005a9e <__lo0bits+0x4e>
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	f102 0201 	add.w	r2, r2, #1
 8005a9c:	d003      	beq.n	8005aa6 <__lo0bits+0x56>
 8005a9e:	6003      	str	r3, [r0, #0]
 8005aa0:	e7e5      	b.n	8005a6e <__lo0bits+0x1e>
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	e7e3      	b.n	8005a6e <__lo0bits+0x1e>
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	e7e1      	b.n	8005a6e <__lo0bits+0x1e>
	...

08005aac <__i2b>:
 8005aac:	b510      	push	{r4, lr}
 8005aae:	460c      	mov	r4, r1
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	f7ff ff05 	bl	80058c0 <_Balloc>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	b928      	cbnz	r0, 8005ac6 <__i2b+0x1a>
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <__i2b+0x24>)
 8005abc:	4805      	ldr	r0, [pc, #20]	; (8005ad4 <__i2b+0x28>)
 8005abe:	f240 1145 	movw	r1, #325	; 0x145
 8005ac2:	f000 fb45 	bl	8006150 <__assert_func>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	6144      	str	r4, [r0, #20]
 8005aca:	6103      	str	r3, [r0, #16]
 8005acc:	bd10      	pop	{r4, pc}
 8005ace:	bf00      	nop
 8005ad0:	08006854 	.word	0x08006854
 8005ad4:	08006865 	.word	0x08006865

08005ad8 <__multiply>:
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005adc:	4691      	mov	r9, r2
 8005ade:	690a      	ldr	r2, [r1, #16]
 8005ae0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	bfb8      	it	lt
 8005ae8:	460b      	movlt	r3, r1
 8005aea:	460c      	mov	r4, r1
 8005aec:	bfbc      	itt	lt
 8005aee:	464c      	movlt	r4, r9
 8005af0:	4699      	movlt	r9, r3
 8005af2:	6927      	ldr	r7, [r4, #16]
 8005af4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005af8:	68a3      	ldr	r3, [r4, #8]
 8005afa:	6861      	ldr	r1, [r4, #4]
 8005afc:	eb07 060a 	add.w	r6, r7, sl
 8005b00:	42b3      	cmp	r3, r6
 8005b02:	b085      	sub	sp, #20
 8005b04:	bfb8      	it	lt
 8005b06:	3101      	addlt	r1, #1
 8005b08:	f7ff feda 	bl	80058c0 <_Balloc>
 8005b0c:	b930      	cbnz	r0, 8005b1c <__multiply+0x44>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	4b44      	ldr	r3, [pc, #272]	; (8005c24 <__multiply+0x14c>)
 8005b12:	4845      	ldr	r0, [pc, #276]	; (8005c28 <__multiply+0x150>)
 8005b14:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005b18:	f000 fb1a 	bl	8006150 <__assert_func>
 8005b1c:	f100 0514 	add.w	r5, r0, #20
 8005b20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b24:	462b      	mov	r3, r5
 8005b26:	2200      	movs	r2, #0
 8005b28:	4543      	cmp	r3, r8
 8005b2a:	d321      	bcc.n	8005b70 <__multiply+0x98>
 8005b2c:	f104 0314 	add.w	r3, r4, #20
 8005b30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b34:	f109 0314 	add.w	r3, r9, #20
 8005b38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b3c:	9202      	str	r2, [sp, #8]
 8005b3e:	1b3a      	subs	r2, r7, r4
 8005b40:	3a15      	subs	r2, #21
 8005b42:	f022 0203 	bic.w	r2, r2, #3
 8005b46:	3204      	adds	r2, #4
 8005b48:	f104 0115 	add.w	r1, r4, #21
 8005b4c:	428f      	cmp	r7, r1
 8005b4e:	bf38      	it	cc
 8005b50:	2204      	movcc	r2, #4
 8005b52:	9201      	str	r2, [sp, #4]
 8005b54:	9a02      	ldr	r2, [sp, #8]
 8005b56:	9303      	str	r3, [sp, #12]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d80c      	bhi.n	8005b76 <__multiply+0x9e>
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	dd03      	ble.n	8005b68 <__multiply+0x90>
 8005b60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d05b      	beq.n	8005c20 <__multiply+0x148>
 8005b68:	6106      	str	r6, [r0, #16]
 8005b6a:	b005      	add	sp, #20
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	f843 2b04 	str.w	r2, [r3], #4
 8005b74:	e7d8      	b.n	8005b28 <__multiply+0x50>
 8005b76:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b7a:	f1ba 0f00 	cmp.w	sl, #0
 8005b7e:	d024      	beq.n	8005bca <__multiply+0xf2>
 8005b80:	f104 0e14 	add.w	lr, r4, #20
 8005b84:	46a9      	mov	r9, r5
 8005b86:	f04f 0c00 	mov.w	ip, #0
 8005b8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b8e:	f8d9 1000 	ldr.w	r1, [r9]
 8005b92:	fa1f fb82 	uxth.w	fp, r2
 8005b96:	b289      	uxth	r1, r1
 8005b98:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005ba0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ba4:	4461      	add	r1, ip
 8005ba6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005baa:	fb0a c20b 	mla	r2, sl, fp, ip
 8005bae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005bb2:	b289      	uxth	r1, r1
 8005bb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005bb8:	4577      	cmp	r7, lr
 8005bba:	f849 1b04 	str.w	r1, [r9], #4
 8005bbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005bc2:	d8e2      	bhi.n	8005b8a <__multiply+0xb2>
 8005bc4:	9a01      	ldr	r2, [sp, #4]
 8005bc6:	f845 c002 	str.w	ip, [r5, r2]
 8005bca:	9a03      	ldr	r2, [sp, #12]
 8005bcc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	f1b9 0f00 	cmp.w	r9, #0
 8005bd6:	d021      	beq.n	8005c1c <__multiply+0x144>
 8005bd8:	6829      	ldr	r1, [r5, #0]
 8005bda:	f104 0c14 	add.w	ip, r4, #20
 8005bde:	46ae      	mov	lr, r5
 8005be0:	f04f 0a00 	mov.w	sl, #0
 8005be4:	f8bc b000 	ldrh.w	fp, [ip]
 8005be8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005bec:	fb09 220b 	mla	r2, r9, fp, r2
 8005bf0:	4452      	add	r2, sl
 8005bf2:	b289      	uxth	r1, r1
 8005bf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005bf8:	f84e 1b04 	str.w	r1, [lr], #4
 8005bfc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005c00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c04:	f8be 1000 	ldrh.w	r1, [lr]
 8005c08:	fb09 110a 	mla	r1, r9, sl, r1
 8005c0c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005c10:	4567      	cmp	r7, ip
 8005c12:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c16:	d8e5      	bhi.n	8005be4 <__multiply+0x10c>
 8005c18:	9a01      	ldr	r2, [sp, #4]
 8005c1a:	50a9      	str	r1, [r5, r2]
 8005c1c:	3504      	adds	r5, #4
 8005c1e:	e799      	b.n	8005b54 <__multiply+0x7c>
 8005c20:	3e01      	subs	r6, #1
 8005c22:	e79b      	b.n	8005b5c <__multiply+0x84>
 8005c24:	08006854 	.word	0x08006854
 8005c28:	08006865 	.word	0x08006865

08005c2c <__pow5mult>:
 8005c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c30:	4615      	mov	r5, r2
 8005c32:	f012 0203 	ands.w	r2, r2, #3
 8005c36:	4606      	mov	r6, r0
 8005c38:	460f      	mov	r7, r1
 8005c3a:	d007      	beq.n	8005c4c <__pow5mult+0x20>
 8005c3c:	4c25      	ldr	r4, [pc, #148]	; (8005cd4 <__pow5mult+0xa8>)
 8005c3e:	3a01      	subs	r2, #1
 8005c40:	2300      	movs	r3, #0
 8005c42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c46:	f7ff fe9d 	bl	8005984 <__multadd>
 8005c4a:	4607      	mov	r7, r0
 8005c4c:	10ad      	asrs	r5, r5, #2
 8005c4e:	d03d      	beq.n	8005ccc <__pow5mult+0xa0>
 8005c50:	69f4      	ldr	r4, [r6, #28]
 8005c52:	b97c      	cbnz	r4, 8005c74 <__pow5mult+0x48>
 8005c54:	2010      	movs	r0, #16
 8005c56:	f7ff fd7f 	bl	8005758 <malloc>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	61f0      	str	r0, [r6, #28]
 8005c5e:	b928      	cbnz	r0, 8005c6c <__pow5mult+0x40>
 8005c60:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <__pow5mult+0xac>)
 8005c62:	481e      	ldr	r0, [pc, #120]	; (8005cdc <__pow5mult+0xb0>)
 8005c64:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005c68:	f000 fa72 	bl	8006150 <__assert_func>
 8005c6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c70:	6004      	str	r4, [r0, #0]
 8005c72:	60c4      	str	r4, [r0, #12]
 8005c74:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005c78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c7c:	b94c      	cbnz	r4, 8005c92 <__pow5mult+0x66>
 8005c7e:	f240 2171 	movw	r1, #625	; 0x271
 8005c82:	4630      	mov	r0, r6
 8005c84:	f7ff ff12 	bl	8005aac <__i2b>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c8e:	4604      	mov	r4, r0
 8005c90:	6003      	str	r3, [r0, #0]
 8005c92:	f04f 0900 	mov.w	r9, #0
 8005c96:	07eb      	lsls	r3, r5, #31
 8005c98:	d50a      	bpl.n	8005cb0 <__pow5mult+0x84>
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	4622      	mov	r2, r4
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f7ff ff1a 	bl	8005ad8 <__multiply>
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff fe49 	bl	8005940 <_Bfree>
 8005cae:	4647      	mov	r7, r8
 8005cb0:	106d      	asrs	r5, r5, #1
 8005cb2:	d00b      	beq.n	8005ccc <__pow5mult+0xa0>
 8005cb4:	6820      	ldr	r0, [r4, #0]
 8005cb6:	b938      	cbnz	r0, 8005cc8 <__pow5mult+0x9c>
 8005cb8:	4622      	mov	r2, r4
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f7ff ff0b 	bl	8005ad8 <__multiply>
 8005cc2:	6020      	str	r0, [r4, #0]
 8005cc4:	f8c0 9000 	str.w	r9, [r0]
 8005cc8:	4604      	mov	r4, r0
 8005cca:	e7e4      	b.n	8005c96 <__pow5mult+0x6a>
 8005ccc:	4638      	mov	r0, r7
 8005cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd2:	bf00      	nop
 8005cd4:	080069b0 	.word	0x080069b0
 8005cd8:	080067e5 	.word	0x080067e5
 8005cdc:	08006865 	.word	0x08006865

08005ce0 <__lshift>:
 8005ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	6849      	ldr	r1, [r1, #4]
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cee:	68a3      	ldr	r3, [r4, #8]
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	4691      	mov	r9, r2
 8005cf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cf8:	f108 0601 	add.w	r6, r8, #1
 8005cfc:	42b3      	cmp	r3, r6
 8005cfe:	db0b      	blt.n	8005d18 <__lshift+0x38>
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff fddd 	bl	80058c0 <_Balloc>
 8005d06:	4605      	mov	r5, r0
 8005d08:	b948      	cbnz	r0, 8005d1e <__lshift+0x3e>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <__lshift+0xd0>)
 8005d0e:	4829      	ldr	r0, [pc, #164]	; (8005db4 <__lshift+0xd4>)
 8005d10:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005d14:	f000 fa1c 	bl	8006150 <__assert_func>
 8005d18:	3101      	adds	r1, #1
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	e7ee      	b.n	8005cfc <__lshift+0x1c>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f100 0114 	add.w	r1, r0, #20
 8005d24:	f100 0210 	add.w	r2, r0, #16
 8005d28:	4618      	mov	r0, r3
 8005d2a:	4553      	cmp	r3, sl
 8005d2c:	db33      	blt.n	8005d96 <__lshift+0xb6>
 8005d2e:	6920      	ldr	r0, [r4, #16]
 8005d30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d34:	f104 0314 	add.w	r3, r4, #20
 8005d38:	f019 091f 	ands.w	r9, r9, #31
 8005d3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d44:	d02b      	beq.n	8005d9e <__lshift+0xbe>
 8005d46:	f1c9 0e20 	rsb	lr, r9, #32
 8005d4a:	468a      	mov	sl, r1
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	fa00 f009 	lsl.w	r0, r0, r9
 8005d54:	4310      	orrs	r0, r2
 8005d56:	f84a 0b04 	str.w	r0, [sl], #4
 8005d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d5e:	459c      	cmp	ip, r3
 8005d60:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d64:	d8f3      	bhi.n	8005d4e <__lshift+0x6e>
 8005d66:	ebac 0304 	sub.w	r3, ip, r4
 8005d6a:	3b15      	subs	r3, #21
 8005d6c:	f023 0303 	bic.w	r3, r3, #3
 8005d70:	3304      	adds	r3, #4
 8005d72:	f104 0015 	add.w	r0, r4, #21
 8005d76:	4584      	cmp	ip, r0
 8005d78:	bf38      	it	cc
 8005d7a:	2304      	movcc	r3, #4
 8005d7c:	50ca      	str	r2, [r1, r3]
 8005d7e:	b10a      	cbz	r2, 8005d84 <__lshift+0xa4>
 8005d80:	f108 0602 	add.w	r6, r8, #2
 8005d84:	3e01      	subs	r6, #1
 8005d86:	4638      	mov	r0, r7
 8005d88:	612e      	str	r6, [r5, #16]
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	f7ff fdd8 	bl	8005940 <_Bfree>
 8005d90:	4628      	mov	r0, r5
 8005d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d96:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	e7c5      	b.n	8005d2a <__lshift+0x4a>
 8005d9e:	3904      	subs	r1, #4
 8005da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005da8:	459c      	cmp	ip, r3
 8005daa:	d8f9      	bhi.n	8005da0 <__lshift+0xc0>
 8005dac:	e7ea      	b.n	8005d84 <__lshift+0xa4>
 8005dae:	bf00      	nop
 8005db0:	08006854 	.word	0x08006854
 8005db4:	08006865 	.word	0x08006865

08005db8 <__mcmp>:
 8005db8:	b530      	push	{r4, r5, lr}
 8005dba:	6902      	ldr	r2, [r0, #16]
 8005dbc:	690c      	ldr	r4, [r1, #16]
 8005dbe:	1b12      	subs	r2, r2, r4
 8005dc0:	d10e      	bne.n	8005de0 <__mcmp+0x28>
 8005dc2:	f100 0314 	add.w	r3, r0, #20
 8005dc6:	3114      	adds	r1, #20
 8005dc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005dcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005dd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005dd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005dd8:	42a5      	cmp	r5, r4
 8005dda:	d003      	beq.n	8005de4 <__mcmp+0x2c>
 8005ddc:	d305      	bcc.n	8005dea <__mcmp+0x32>
 8005dde:	2201      	movs	r2, #1
 8005de0:	4610      	mov	r0, r2
 8005de2:	bd30      	pop	{r4, r5, pc}
 8005de4:	4283      	cmp	r3, r0
 8005de6:	d3f3      	bcc.n	8005dd0 <__mcmp+0x18>
 8005de8:	e7fa      	b.n	8005de0 <__mcmp+0x28>
 8005dea:	f04f 32ff 	mov.w	r2, #4294967295
 8005dee:	e7f7      	b.n	8005de0 <__mcmp+0x28>

08005df0 <__mdiff>:
 8005df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	460c      	mov	r4, r1
 8005df6:	4606      	mov	r6, r0
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4690      	mov	r8, r2
 8005dfe:	f7ff ffdb 	bl	8005db8 <__mcmp>
 8005e02:	1e05      	subs	r5, r0, #0
 8005e04:	d110      	bne.n	8005e28 <__mdiff+0x38>
 8005e06:	4629      	mov	r1, r5
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f7ff fd59 	bl	80058c0 <_Balloc>
 8005e0e:	b930      	cbnz	r0, 8005e1e <__mdiff+0x2e>
 8005e10:	4b3a      	ldr	r3, [pc, #232]	; (8005efc <__mdiff+0x10c>)
 8005e12:	4602      	mov	r2, r0
 8005e14:	f240 2137 	movw	r1, #567	; 0x237
 8005e18:	4839      	ldr	r0, [pc, #228]	; (8005f00 <__mdiff+0x110>)
 8005e1a:	f000 f999 	bl	8006150 <__assert_func>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e28:	bfa4      	itt	ge
 8005e2a:	4643      	movge	r3, r8
 8005e2c:	46a0      	movge	r8, r4
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005e34:	bfa6      	itte	ge
 8005e36:	461c      	movge	r4, r3
 8005e38:	2500      	movge	r5, #0
 8005e3a:	2501      	movlt	r5, #1
 8005e3c:	f7ff fd40 	bl	80058c0 <_Balloc>
 8005e40:	b920      	cbnz	r0, 8005e4c <__mdiff+0x5c>
 8005e42:	4b2e      	ldr	r3, [pc, #184]	; (8005efc <__mdiff+0x10c>)
 8005e44:	4602      	mov	r2, r0
 8005e46:	f240 2145 	movw	r1, #581	; 0x245
 8005e4a:	e7e5      	b.n	8005e18 <__mdiff+0x28>
 8005e4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e50:	6926      	ldr	r6, [r4, #16]
 8005e52:	60c5      	str	r5, [r0, #12]
 8005e54:	f104 0914 	add.w	r9, r4, #20
 8005e58:	f108 0514 	add.w	r5, r8, #20
 8005e5c:	f100 0e14 	add.w	lr, r0, #20
 8005e60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005e64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e68:	f108 0210 	add.w	r2, r8, #16
 8005e6c:	46f2      	mov	sl, lr
 8005e6e:	2100      	movs	r1, #0
 8005e70:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e78:	fa11 f88b 	uxtah	r8, r1, fp
 8005e7c:	b299      	uxth	r1, r3
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	eba8 0801 	sub.w	r8, r8, r1
 8005e84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e88:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e8c:	fa1f f888 	uxth.w	r8, r8
 8005e90:	1419      	asrs	r1, r3, #16
 8005e92:	454e      	cmp	r6, r9
 8005e94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e98:	f84a 3b04 	str.w	r3, [sl], #4
 8005e9c:	d8e8      	bhi.n	8005e70 <__mdiff+0x80>
 8005e9e:	1b33      	subs	r3, r6, r4
 8005ea0:	3b15      	subs	r3, #21
 8005ea2:	f023 0303 	bic.w	r3, r3, #3
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	3415      	adds	r4, #21
 8005eaa:	42a6      	cmp	r6, r4
 8005eac:	bf38      	it	cc
 8005eae:	2304      	movcc	r3, #4
 8005eb0:	441d      	add	r5, r3
 8005eb2:	4473      	add	r3, lr
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	462e      	mov	r6, r5
 8005eb8:	4566      	cmp	r6, ip
 8005eba:	d30e      	bcc.n	8005eda <__mdiff+0xea>
 8005ebc:	f10c 0203 	add.w	r2, ip, #3
 8005ec0:	1b52      	subs	r2, r2, r5
 8005ec2:	f022 0203 	bic.w	r2, r2, #3
 8005ec6:	3d03      	subs	r5, #3
 8005ec8:	45ac      	cmp	ip, r5
 8005eca:	bf38      	it	cc
 8005ecc:	2200      	movcc	r2, #0
 8005ece:	4413      	add	r3, r2
 8005ed0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005ed4:	b17a      	cbz	r2, 8005ef6 <__mdiff+0x106>
 8005ed6:	6107      	str	r7, [r0, #16]
 8005ed8:	e7a4      	b.n	8005e24 <__mdiff+0x34>
 8005eda:	f856 8b04 	ldr.w	r8, [r6], #4
 8005ede:	fa11 f288 	uxtah	r2, r1, r8
 8005ee2:	1414      	asrs	r4, r2, #16
 8005ee4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ee8:	b292      	uxth	r2, r2
 8005eea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005eee:	f84e 2b04 	str.w	r2, [lr], #4
 8005ef2:	1421      	asrs	r1, r4, #16
 8005ef4:	e7e0      	b.n	8005eb8 <__mdiff+0xc8>
 8005ef6:	3f01      	subs	r7, #1
 8005ef8:	e7ea      	b.n	8005ed0 <__mdiff+0xe0>
 8005efa:	bf00      	nop
 8005efc:	08006854 	.word	0x08006854
 8005f00:	08006865 	.word	0x08006865

08005f04 <__d2b>:
 8005f04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f08:	460f      	mov	r7, r1
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	ec59 8b10 	vmov	r8, r9, d0
 8005f10:	4616      	mov	r6, r2
 8005f12:	f7ff fcd5 	bl	80058c0 <_Balloc>
 8005f16:	4604      	mov	r4, r0
 8005f18:	b930      	cbnz	r0, 8005f28 <__d2b+0x24>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <__d2b+0xac>)
 8005f1e:	4825      	ldr	r0, [pc, #148]	; (8005fb4 <__d2b+0xb0>)
 8005f20:	f240 310f 	movw	r1, #783	; 0x30f
 8005f24:	f000 f914 	bl	8006150 <__assert_func>
 8005f28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f30:	bb2d      	cbnz	r5, 8005f7e <__d2b+0x7a>
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	f1b8 0300 	subs.w	r3, r8, #0
 8005f38:	d026      	beq.n	8005f88 <__d2b+0x84>
 8005f3a:	4668      	mov	r0, sp
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	f7ff fd87 	bl	8005a50 <__lo0bits>
 8005f42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f46:	b1e8      	cbz	r0, 8005f84 <__d2b+0x80>
 8005f48:	f1c0 0320 	rsb	r3, r0, #32
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	430b      	orrs	r3, r1
 8005f52:	40c2      	lsrs	r2, r0
 8005f54:	6163      	str	r3, [r4, #20]
 8005f56:	9201      	str	r2, [sp, #4]
 8005f58:	9b01      	ldr	r3, [sp, #4]
 8005f5a:	61a3      	str	r3, [r4, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf14      	ite	ne
 8005f60:	2202      	movne	r2, #2
 8005f62:	2201      	moveq	r2, #1
 8005f64:	6122      	str	r2, [r4, #16]
 8005f66:	b1bd      	cbz	r5, 8005f98 <__d2b+0x94>
 8005f68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f6c:	4405      	add	r5, r0
 8005f6e:	603d      	str	r5, [r7, #0]
 8005f70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f74:	6030      	str	r0, [r6, #0]
 8005f76:	4620      	mov	r0, r4
 8005f78:	b003      	add	sp, #12
 8005f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f82:	e7d6      	b.n	8005f32 <__d2b+0x2e>
 8005f84:	6161      	str	r1, [r4, #20]
 8005f86:	e7e7      	b.n	8005f58 <__d2b+0x54>
 8005f88:	a801      	add	r0, sp, #4
 8005f8a:	f7ff fd61 	bl	8005a50 <__lo0bits>
 8005f8e:	9b01      	ldr	r3, [sp, #4]
 8005f90:	6163      	str	r3, [r4, #20]
 8005f92:	3020      	adds	r0, #32
 8005f94:	2201      	movs	r2, #1
 8005f96:	e7e5      	b.n	8005f64 <__d2b+0x60>
 8005f98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fa0:	6038      	str	r0, [r7, #0]
 8005fa2:	6918      	ldr	r0, [r3, #16]
 8005fa4:	f7ff fd34 	bl	8005a10 <__hi0bits>
 8005fa8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005fac:	e7e2      	b.n	8005f74 <__d2b+0x70>
 8005fae:	bf00      	nop
 8005fb0:	08006854 	.word	0x08006854
 8005fb4:	08006865 	.word	0x08006865

08005fb8 <__sflush_r>:
 8005fb8:	898a      	ldrh	r2, [r1, #12]
 8005fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	0710      	lsls	r0, r2, #28
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	d458      	bmi.n	8006078 <__sflush_r+0xc0>
 8005fc6:	684b      	ldr	r3, [r1, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dc05      	bgt.n	8005fd8 <__sflush_r+0x20>
 8005fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dc02      	bgt.n	8005fd8 <__sflush_r+0x20>
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fda:	2e00      	cmp	r6, #0
 8005fdc:	d0f9      	beq.n	8005fd2 <__sflush_r+0x1a>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fe4:	682f      	ldr	r7, [r5, #0]
 8005fe6:	6a21      	ldr	r1, [r4, #32]
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	d032      	beq.n	8006052 <__sflush_r+0x9a>
 8005fec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	075a      	lsls	r2, r3, #29
 8005ff2:	d505      	bpl.n	8006000 <__sflush_r+0x48>
 8005ff4:	6863      	ldr	r3, [r4, #4]
 8005ff6:	1ac0      	subs	r0, r0, r3
 8005ff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ffa:	b10b      	cbz	r3, 8006000 <__sflush_r+0x48>
 8005ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ffe:	1ac0      	subs	r0, r0, r3
 8006000:	2300      	movs	r3, #0
 8006002:	4602      	mov	r2, r0
 8006004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006006:	6a21      	ldr	r1, [r4, #32]
 8006008:	4628      	mov	r0, r5
 800600a:	47b0      	blx	r6
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	d106      	bne.n	8006020 <__sflush_r+0x68>
 8006012:	6829      	ldr	r1, [r5, #0]
 8006014:	291d      	cmp	r1, #29
 8006016:	d82b      	bhi.n	8006070 <__sflush_r+0xb8>
 8006018:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <__sflush_r+0x108>)
 800601a:	410a      	asrs	r2, r1
 800601c:	07d6      	lsls	r6, r2, #31
 800601e:	d427      	bmi.n	8006070 <__sflush_r+0xb8>
 8006020:	2200      	movs	r2, #0
 8006022:	6062      	str	r2, [r4, #4]
 8006024:	04d9      	lsls	r1, r3, #19
 8006026:	6922      	ldr	r2, [r4, #16]
 8006028:	6022      	str	r2, [r4, #0]
 800602a:	d504      	bpl.n	8006036 <__sflush_r+0x7e>
 800602c:	1c42      	adds	r2, r0, #1
 800602e:	d101      	bne.n	8006034 <__sflush_r+0x7c>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	b903      	cbnz	r3, 8006036 <__sflush_r+0x7e>
 8006034:	6560      	str	r0, [r4, #84]	; 0x54
 8006036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006038:	602f      	str	r7, [r5, #0]
 800603a:	2900      	cmp	r1, #0
 800603c:	d0c9      	beq.n	8005fd2 <__sflush_r+0x1a>
 800603e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006042:	4299      	cmp	r1, r3
 8006044:	d002      	beq.n	800604c <__sflush_r+0x94>
 8006046:	4628      	mov	r0, r5
 8006048:	f7ff fb3a 	bl	80056c0 <_free_r>
 800604c:	2000      	movs	r0, #0
 800604e:	6360      	str	r0, [r4, #52]	; 0x34
 8006050:	e7c0      	b.n	8005fd4 <__sflush_r+0x1c>
 8006052:	2301      	movs	r3, #1
 8006054:	4628      	mov	r0, r5
 8006056:	47b0      	blx	r6
 8006058:	1c41      	adds	r1, r0, #1
 800605a:	d1c8      	bne.n	8005fee <__sflush_r+0x36>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0c5      	beq.n	8005fee <__sflush_r+0x36>
 8006062:	2b1d      	cmp	r3, #29
 8006064:	d001      	beq.n	800606a <__sflush_r+0xb2>
 8006066:	2b16      	cmp	r3, #22
 8006068:	d101      	bne.n	800606e <__sflush_r+0xb6>
 800606a:	602f      	str	r7, [r5, #0]
 800606c:	e7b1      	b.n	8005fd2 <__sflush_r+0x1a>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	e7ad      	b.n	8005fd4 <__sflush_r+0x1c>
 8006078:	690f      	ldr	r7, [r1, #16]
 800607a:	2f00      	cmp	r7, #0
 800607c:	d0a9      	beq.n	8005fd2 <__sflush_r+0x1a>
 800607e:	0793      	lsls	r3, r2, #30
 8006080:	680e      	ldr	r6, [r1, #0]
 8006082:	bf08      	it	eq
 8006084:	694b      	ldreq	r3, [r1, #20]
 8006086:	600f      	str	r7, [r1, #0]
 8006088:	bf18      	it	ne
 800608a:	2300      	movne	r3, #0
 800608c:	eba6 0807 	sub.w	r8, r6, r7
 8006090:	608b      	str	r3, [r1, #8]
 8006092:	f1b8 0f00 	cmp.w	r8, #0
 8006096:	dd9c      	ble.n	8005fd2 <__sflush_r+0x1a>
 8006098:	6a21      	ldr	r1, [r4, #32]
 800609a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800609c:	4643      	mov	r3, r8
 800609e:	463a      	mov	r2, r7
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b0      	blx	r6
 80060a4:	2800      	cmp	r0, #0
 80060a6:	dc06      	bgt.n	80060b6 <__sflush_r+0xfe>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ae:	81a3      	strh	r3, [r4, #12]
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	e78e      	b.n	8005fd4 <__sflush_r+0x1c>
 80060b6:	4407      	add	r7, r0
 80060b8:	eba8 0800 	sub.w	r8, r8, r0
 80060bc:	e7e9      	b.n	8006092 <__sflush_r+0xda>
 80060be:	bf00      	nop
 80060c0:	dfbffffe 	.word	0xdfbffffe

080060c4 <_fflush_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	690b      	ldr	r3, [r1, #16]
 80060c8:	4605      	mov	r5, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	b913      	cbnz	r3, 80060d4 <_fflush_r+0x10>
 80060ce:	2500      	movs	r5, #0
 80060d0:	4628      	mov	r0, r5
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	b118      	cbz	r0, 80060de <_fflush_r+0x1a>
 80060d6:	6a03      	ldr	r3, [r0, #32]
 80060d8:	b90b      	cbnz	r3, 80060de <_fflush_r+0x1a>
 80060da:	f7fe fc03 	bl	80048e4 <__sinit>
 80060de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f3      	beq.n	80060ce <_fflush_r+0xa>
 80060e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060e8:	07d0      	lsls	r0, r2, #31
 80060ea:	d404      	bmi.n	80060f6 <_fflush_r+0x32>
 80060ec:	0599      	lsls	r1, r3, #22
 80060ee:	d402      	bmi.n	80060f6 <_fflush_r+0x32>
 80060f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f2:	f7fe fcee 	bl	8004ad2 <__retarget_lock_acquire_recursive>
 80060f6:	4628      	mov	r0, r5
 80060f8:	4621      	mov	r1, r4
 80060fa:	f7ff ff5d 	bl	8005fb8 <__sflush_r>
 80060fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006100:	07da      	lsls	r2, r3, #31
 8006102:	4605      	mov	r5, r0
 8006104:	d4e4      	bmi.n	80060d0 <_fflush_r+0xc>
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	059b      	lsls	r3, r3, #22
 800610a:	d4e1      	bmi.n	80060d0 <_fflush_r+0xc>
 800610c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800610e:	f7fe fce1 	bl	8004ad4 <__retarget_lock_release_recursive>
 8006112:	e7dd      	b.n	80060d0 <_fflush_r+0xc>

08006114 <_sbrk_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d06      	ldr	r5, [pc, #24]	; (8006130 <_sbrk_r+0x1c>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	602b      	str	r3, [r5, #0]
 8006120:	f7fa ff8c 	bl	800103c <_sbrk>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_sbrk_r+0x1a>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_sbrk_r+0x1a>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	20000514 	.word	0x20000514

08006134 <memcpy>:
 8006134:	440a      	add	r2, r1
 8006136:	4291      	cmp	r1, r2
 8006138:	f100 33ff 	add.w	r3, r0, #4294967295
 800613c:	d100      	bne.n	8006140 <memcpy+0xc>
 800613e:	4770      	bx	lr
 8006140:	b510      	push	{r4, lr}
 8006142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800614a:	4291      	cmp	r1, r2
 800614c:	d1f9      	bne.n	8006142 <memcpy+0xe>
 800614e:	bd10      	pop	{r4, pc}

08006150 <__assert_func>:
 8006150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006152:	4614      	mov	r4, r2
 8006154:	461a      	mov	r2, r3
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <__assert_func+0x2c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4605      	mov	r5, r0
 800615c:	68d8      	ldr	r0, [r3, #12]
 800615e:	b14c      	cbz	r4, 8006174 <__assert_func+0x24>
 8006160:	4b07      	ldr	r3, [pc, #28]	; (8006180 <__assert_func+0x30>)
 8006162:	9100      	str	r1, [sp, #0]
 8006164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006168:	4906      	ldr	r1, [pc, #24]	; (8006184 <__assert_func+0x34>)
 800616a:	462b      	mov	r3, r5
 800616c:	f000 f844 	bl	80061f8 <fiprintf>
 8006170:	f000 f854 	bl	800621c <abort>
 8006174:	4b04      	ldr	r3, [pc, #16]	; (8006188 <__assert_func+0x38>)
 8006176:	461c      	mov	r4, r3
 8006178:	e7f3      	b.n	8006162 <__assert_func+0x12>
 800617a:	bf00      	nop
 800617c:	200000a0 	.word	0x200000a0
 8006180:	080069c6 	.word	0x080069c6
 8006184:	080069d3 	.word	0x080069d3
 8006188:	08006a01 	.word	0x08006a01

0800618c <_calloc_r>:
 800618c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800618e:	fba1 2402 	umull	r2, r4, r1, r2
 8006192:	b94c      	cbnz	r4, 80061a8 <_calloc_r+0x1c>
 8006194:	4611      	mov	r1, r2
 8006196:	9201      	str	r2, [sp, #4]
 8006198:	f7ff fb06 	bl	80057a8 <_malloc_r>
 800619c:	9a01      	ldr	r2, [sp, #4]
 800619e:	4605      	mov	r5, r0
 80061a0:	b930      	cbnz	r0, 80061b0 <_calloc_r+0x24>
 80061a2:	4628      	mov	r0, r5
 80061a4:	b003      	add	sp, #12
 80061a6:	bd30      	pop	{r4, r5, pc}
 80061a8:	220c      	movs	r2, #12
 80061aa:	6002      	str	r2, [r0, #0]
 80061ac:	2500      	movs	r5, #0
 80061ae:	e7f8      	b.n	80061a2 <_calloc_r+0x16>
 80061b0:	4621      	mov	r1, r4
 80061b2:	f7fe fc10 	bl	80049d6 <memset>
 80061b6:	e7f4      	b.n	80061a2 <_calloc_r+0x16>

080061b8 <__ascii_mbtowc>:
 80061b8:	b082      	sub	sp, #8
 80061ba:	b901      	cbnz	r1, 80061be <__ascii_mbtowc+0x6>
 80061bc:	a901      	add	r1, sp, #4
 80061be:	b142      	cbz	r2, 80061d2 <__ascii_mbtowc+0x1a>
 80061c0:	b14b      	cbz	r3, 80061d6 <__ascii_mbtowc+0x1e>
 80061c2:	7813      	ldrb	r3, [r2, #0]
 80061c4:	600b      	str	r3, [r1, #0]
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	1e10      	subs	r0, r2, #0
 80061ca:	bf18      	it	ne
 80061cc:	2001      	movne	r0, #1
 80061ce:	b002      	add	sp, #8
 80061d0:	4770      	bx	lr
 80061d2:	4610      	mov	r0, r2
 80061d4:	e7fb      	b.n	80061ce <__ascii_mbtowc+0x16>
 80061d6:	f06f 0001 	mvn.w	r0, #1
 80061da:	e7f8      	b.n	80061ce <__ascii_mbtowc+0x16>

080061dc <__ascii_wctomb>:
 80061dc:	b149      	cbz	r1, 80061f2 <__ascii_wctomb+0x16>
 80061de:	2aff      	cmp	r2, #255	; 0xff
 80061e0:	bf85      	ittet	hi
 80061e2:	238a      	movhi	r3, #138	; 0x8a
 80061e4:	6003      	strhi	r3, [r0, #0]
 80061e6:	700a      	strbls	r2, [r1, #0]
 80061e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80061ec:	bf98      	it	ls
 80061ee:	2001      	movls	r0, #1
 80061f0:	4770      	bx	lr
 80061f2:	4608      	mov	r0, r1
 80061f4:	4770      	bx	lr
	...

080061f8 <fiprintf>:
 80061f8:	b40e      	push	{r1, r2, r3}
 80061fa:	b503      	push	{r0, r1, lr}
 80061fc:	4601      	mov	r1, r0
 80061fe:	ab03      	add	r3, sp, #12
 8006200:	4805      	ldr	r0, [pc, #20]	; (8006218 <fiprintf+0x20>)
 8006202:	f853 2b04 	ldr.w	r2, [r3], #4
 8006206:	6800      	ldr	r0, [r0, #0]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	f000 f837 	bl	800627c <_vfiprintf_r>
 800620e:	b002      	add	sp, #8
 8006210:	f85d eb04 	ldr.w	lr, [sp], #4
 8006214:	b003      	add	sp, #12
 8006216:	4770      	bx	lr
 8006218:	200000a0 	.word	0x200000a0

0800621c <abort>:
 800621c:	b508      	push	{r3, lr}
 800621e:	2006      	movs	r0, #6
 8006220:	f000 fa04 	bl	800662c <raise>
 8006224:	2001      	movs	r0, #1
 8006226:	f7fa fe91 	bl	8000f4c <_exit>

0800622a <__sfputc_r>:
 800622a:	6893      	ldr	r3, [r2, #8]
 800622c:	3b01      	subs	r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	b410      	push	{r4}
 8006232:	6093      	str	r3, [r2, #8]
 8006234:	da08      	bge.n	8006248 <__sfputc_r+0x1e>
 8006236:	6994      	ldr	r4, [r2, #24]
 8006238:	42a3      	cmp	r3, r4
 800623a:	db01      	blt.n	8006240 <__sfputc_r+0x16>
 800623c:	290a      	cmp	r1, #10
 800623e:	d103      	bne.n	8006248 <__sfputc_r+0x1e>
 8006240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006244:	f000 b934 	b.w	80064b0 <__swbuf_r>
 8006248:	6813      	ldr	r3, [r2, #0]
 800624a:	1c58      	adds	r0, r3, #1
 800624c:	6010      	str	r0, [r2, #0]
 800624e:	7019      	strb	r1, [r3, #0]
 8006250:	4608      	mov	r0, r1
 8006252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006256:	4770      	bx	lr

08006258 <__sfputs_r>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	4606      	mov	r6, r0
 800625c:	460f      	mov	r7, r1
 800625e:	4614      	mov	r4, r2
 8006260:	18d5      	adds	r5, r2, r3
 8006262:	42ac      	cmp	r4, r5
 8006264:	d101      	bne.n	800626a <__sfputs_r+0x12>
 8006266:	2000      	movs	r0, #0
 8006268:	e007      	b.n	800627a <__sfputs_r+0x22>
 800626a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626e:	463a      	mov	r2, r7
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff ffda 	bl	800622a <__sfputc_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d1f3      	bne.n	8006262 <__sfputs_r+0xa>
 800627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800627c <_vfiprintf_r>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	460d      	mov	r5, r1
 8006282:	b09d      	sub	sp, #116	; 0x74
 8006284:	4614      	mov	r4, r2
 8006286:	4698      	mov	r8, r3
 8006288:	4606      	mov	r6, r0
 800628a:	b118      	cbz	r0, 8006294 <_vfiprintf_r+0x18>
 800628c:	6a03      	ldr	r3, [r0, #32]
 800628e:	b90b      	cbnz	r3, 8006294 <_vfiprintf_r+0x18>
 8006290:	f7fe fb28 	bl	80048e4 <__sinit>
 8006294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006296:	07d9      	lsls	r1, r3, #31
 8006298:	d405      	bmi.n	80062a6 <_vfiprintf_r+0x2a>
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	059a      	lsls	r2, r3, #22
 800629e:	d402      	bmi.n	80062a6 <_vfiprintf_r+0x2a>
 80062a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062a2:	f7fe fc16 	bl	8004ad2 <__retarget_lock_acquire_recursive>
 80062a6:	89ab      	ldrh	r3, [r5, #12]
 80062a8:	071b      	lsls	r3, r3, #28
 80062aa:	d501      	bpl.n	80062b0 <_vfiprintf_r+0x34>
 80062ac:	692b      	ldr	r3, [r5, #16]
 80062ae:	b99b      	cbnz	r3, 80062d8 <_vfiprintf_r+0x5c>
 80062b0:	4629      	mov	r1, r5
 80062b2:	4630      	mov	r0, r6
 80062b4:	f000 f93a 	bl	800652c <__swsetup_r>
 80062b8:	b170      	cbz	r0, 80062d8 <_vfiprintf_r+0x5c>
 80062ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062bc:	07dc      	lsls	r4, r3, #31
 80062be:	d504      	bpl.n	80062ca <_vfiprintf_r+0x4e>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	b01d      	add	sp, #116	; 0x74
 80062c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	0598      	lsls	r0, r3, #22
 80062ce:	d4f7      	bmi.n	80062c0 <_vfiprintf_r+0x44>
 80062d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062d2:	f7fe fbff 	bl	8004ad4 <__retarget_lock_release_recursive>
 80062d6:	e7f3      	b.n	80062c0 <_vfiprintf_r+0x44>
 80062d8:	2300      	movs	r3, #0
 80062da:	9309      	str	r3, [sp, #36]	; 0x24
 80062dc:	2320      	movs	r3, #32
 80062de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80062e6:	2330      	movs	r3, #48	; 0x30
 80062e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800649c <_vfiprintf_r+0x220>
 80062ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062f0:	f04f 0901 	mov.w	r9, #1
 80062f4:	4623      	mov	r3, r4
 80062f6:	469a      	mov	sl, r3
 80062f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062fc:	b10a      	cbz	r2, 8006302 <_vfiprintf_r+0x86>
 80062fe:	2a25      	cmp	r2, #37	; 0x25
 8006300:	d1f9      	bne.n	80062f6 <_vfiprintf_r+0x7a>
 8006302:	ebba 0b04 	subs.w	fp, sl, r4
 8006306:	d00b      	beq.n	8006320 <_vfiprintf_r+0xa4>
 8006308:	465b      	mov	r3, fp
 800630a:	4622      	mov	r2, r4
 800630c:	4629      	mov	r1, r5
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ffa2 	bl	8006258 <__sfputs_r>
 8006314:	3001      	adds	r0, #1
 8006316:	f000 80a9 	beq.w	800646c <_vfiprintf_r+0x1f0>
 800631a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800631c:	445a      	add	r2, fp
 800631e:	9209      	str	r2, [sp, #36]	; 0x24
 8006320:	f89a 3000 	ldrb.w	r3, [sl]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80a1 	beq.w	800646c <_vfiprintf_r+0x1f0>
 800632a:	2300      	movs	r3, #0
 800632c:	f04f 32ff 	mov.w	r2, #4294967295
 8006330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006334:	f10a 0a01 	add.w	sl, sl, #1
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	9307      	str	r3, [sp, #28]
 800633c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006340:	931a      	str	r3, [sp, #104]	; 0x68
 8006342:	4654      	mov	r4, sl
 8006344:	2205      	movs	r2, #5
 8006346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800634a:	4854      	ldr	r0, [pc, #336]	; (800649c <_vfiprintf_r+0x220>)
 800634c:	f7f9 ff78 	bl	8000240 <memchr>
 8006350:	9a04      	ldr	r2, [sp, #16]
 8006352:	b9d8      	cbnz	r0, 800638c <_vfiprintf_r+0x110>
 8006354:	06d1      	lsls	r1, r2, #27
 8006356:	bf44      	itt	mi
 8006358:	2320      	movmi	r3, #32
 800635a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800635e:	0713      	lsls	r3, r2, #28
 8006360:	bf44      	itt	mi
 8006362:	232b      	movmi	r3, #43	; 0x2b
 8006364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006368:	f89a 3000 	ldrb.w	r3, [sl]
 800636c:	2b2a      	cmp	r3, #42	; 0x2a
 800636e:	d015      	beq.n	800639c <_vfiprintf_r+0x120>
 8006370:	9a07      	ldr	r2, [sp, #28]
 8006372:	4654      	mov	r4, sl
 8006374:	2000      	movs	r0, #0
 8006376:	f04f 0c0a 	mov.w	ip, #10
 800637a:	4621      	mov	r1, r4
 800637c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006380:	3b30      	subs	r3, #48	; 0x30
 8006382:	2b09      	cmp	r3, #9
 8006384:	d94d      	bls.n	8006422 <_vfiprintf_r+0x1a6>
 8006386:	b1b0      	cbz	r0, 80063b6 <_vfiprintf_r+0x13a>
 8006388:	9207      	str	r2, [sp, #28]
 800638a:	e014      	b.n	80063b6 <_vfiprintf_r+0x13a>
 800638c:	eba0 0308 	sub.w	r3, r0, r8
 8006390:	fa09 f303 	lsl.w	r3, r9, r3
 8006394:	4313      	orrs	r3, r2
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	46a2      	mov	sl, r4
 800639a:	e7d2      	b.n	8006342 <_vfiprintf_r+0xc6>
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	1d19      	adds	r1, r3, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	9103      	str	r1, [sp, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bfbb      	ittet	lt
 80063a8:	425b      	neglt	r3, r3
 80063aa:	f042 0202 	orrlt.w	r2, r2, #2
 80063ae:	9307      	strge	r3, [sp, #28]
 80063b0:	9307      	strlt	r3, [sp, #28]
 80063b2:	bfb8      	it	lt
 80063b4:	9204      	strlt	r2, [sp, #16]
 80063b6:	7823      	ldrb	r3, [r4, #0]
 80063b8:	2b2e      	cmp	r3, #46	; 0x2e
 80063ba:	d10c      	bne.n	80063d6 <_vfiprintf_r+0x15a>
 80063bc:	7863      	ldrb	r3, [r4, #1]
 80063be:	2b2a      	cmp	r3, #42	; 0x2a
 80063c0:	d134      	bne.n	800642c <_vfiprintf_r+0x1b0>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	1d1a      	adds	r2, r3, #4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	9203      	str	r2, [sp, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bfb8      	it	lt
 80063ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80063d2:	3402      	adds	r4, #2
 80063d4:	9305      	str	r3, [sp, #20]
 80063d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80064ac <_vfiprintf_r+0x230>
 80063da:	7821      	ldrb	r1, [r4, #0]
 80063dc:	2203      	movs	r2, #3
 80063de:	4650      	mov	r0, sl
 80063e0:	f7f9 ff2e 	bl	8000240 <memchr>
 80063e4:	b138      	cbz	r0, 80063f6 <_vfiprintf_r+0x17a>
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	eba0 000a 	sub.w	r0, r0, sl
 80063ec:	2240      	movs	r2, #64	; 0x40
 80063ee:	4082      	lsls	r2, r0
 80063f0:	4313      	orrs	r3, r2
 80063f2:	3401      	adds	r4, #1
 80063f4:	9304      	str	r3, [sp, #16]
 80063f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063fa:	4829      	ldr	r0, [pc, #164]	; (80064a0 <_vfiprintf_r+0x224>)
 80063fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006400:	2206      	movs	r2, #6
 8006402:	f7f9 ff1d 	bl	8000240 <memchr>
 8006406:	2800      	cmp	r0, #0
 8006408:	d03f      	beq.n	800648a <_vfiprintf_r+0x20e>
 800640a:	4b26      	ldr	r3, [pc, #152]	; (80064a4 <_vfiprintf_r+0x228>)
 800640c:	bb1b      	cbnz	r3, 8006456 <_vfiprintf_r+0x1da>
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	3307      	adds	r3, #7
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	3308      	adds	r3, #8
 8006418:	9303      	str	r3, [sp, #12]
 800641a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641c:	443b      	add	r3, r7
 800641e:	9309      	str	r3, [sp, #36]	; 0x24
 8006420:	e768      	b.n	80062f4 <_vfiprintf_r+0x78>
 8006422:	fb0c 3202 	mla	r2, ip, r2, r3
 8006426:	460c      	mov	r4, r1
 8006428:	2001      	movs	r0, #1
 800642a:	e7a6      	b.n	800637a <_vfiprintf_r+0xfe>
 800642c:	2300      	movs	r3, #0
 800642e:	3401      	adds	r4, #1
 8006430:	9305      	str	r3, [sp, #20]
 8006432:	4619      	mov	r1, r3
 8006434:	f04f 0c0a 	mov.w	ip, #10
 8006438:	4620      	mov	r0, r4
 800643a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800643e:	3a30      	subs	r2, #48	; 0x30
 8006440:	2a09      	cmp	r2, #9
 8006442:	d903      	bls.n	800644c <_vfiprintf_r+0x1d0>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0c6      	beq.n	80063d6 <_vfiprintf_r+0x15a>
 8006448:	9105      	str	r1, [sp, #20]
 800644a:	e7c4      	b.n	80063d6 <_vfiprintf_r+0x15a>
 800644c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006450:	4604      	mov	r4, r0
 8006452:	2301      	movs	r3, #1
 8006454:	e7f0      	b.n	8006438 <_vfiprintf_r+0x1bc>
 8006456:	ab03      	add	r3, sp, #12
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	462a      	mov	r2, r5
 800645c:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <_vfiprintf_r+0x22c>)
 800645e:	a904      	add	r1, sp, #16
 8006460:	4630      	mov	r0, r6
 8006462:	f7fd fe09 	bl	8004078 <_printf_float>
 8006466:	4607      	mov	r7, r0
 8006468:	1c78      	adds	r0, r7, #1
 800646a:	d1d6      	bne.n	800641a <_vfiprintf_r+0x19e>
 800646c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800646e:	07d9      	lsls	r1, r3, #31
 8006470:	d405      	bmi.n	800647e <_vfiprintf_r+0x202>
 8006472:	89ab      	ldrh	r3, [r5, #12]
 8006474:	059a      	lsls	r2, r3, #22
 8006476:	d402      	bmi.n	800647e <_vfiprintf_r+0x202>
 8006478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800647a:	f7fe fb2b 	bl	8004ad4 <__retarget_lock_release_recursive>
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	065b      	lsls	r3, r3, #25
 8006482:	f53f af1d 	bmi.w	80062c0 <_vfiprintf_r+0x44>
 8006486:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006488:	e71c      	b.n	80062c4 <_vfiprintf_r+0x48>
 800648a:	ab03      	add	r3, sp, #12
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	462a      	mov	r2, r5
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <_vfiprintf_r+0x22c>)
 8006492:	a904      	add	r1, sp, #16
 8006494:	4630      	mov	r0, r6
 8006496:	f7fe f877 	bl	8004588 <_printf_i>
 800649a:	e7e4      	b.n	8006466 <_vfiprintf_r+0x1ea>
 800649c:	08006b03 	.word	0x08006b03
 80064a0:	08006b0d 	.word	0x08006b0d
 80064a4:	08004079 	.word	0x08004079
 80064a8:	08006259 	.word	0x08006259
 80064ac:	08006b09 	.word	0x08006b09

080064b0 <__swbuf_r>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	460e      	mov	r6, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	4605      	mov	r5, r0
 80064b8:	b118      	cbz	r0, 80064c2 <__swbuf_r+0x12>
 80064ba:	6a03      	ldr	r3, [r0, #32]
 80064bc:	b90b      	cbnz	r3, 80064c2 <__swbuf_r+0x12>
 80064be:	f7fe fa11 	bl	80048e4 <__sinit>
 80064c2:	69a3      	ldr	r3, [r4, #24]
 80064c4:	60a3      	str	r3, [r4, #8]
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	071a      	lsls	r2, r3, #28
 80064ca:	d525      	bpl.n	8006518 <__swbuf_r+0x68>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	b31b      	cbz	r3, 8006518 <__swbuf_r+0x68>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	6922      	ldr	r2, [r4, #16]
 80064d4:	1a98      	subs	r0, r3, r2
 80064d6:	6963      	ldr	r3, [r4, #20]
 80064d8:	b2f6      	uxtb	r6, r6
 80064da:	4283      	cmp	r3, r0
 80064dc:	4637      	mov	r7, r6
 80064de:	dc04      	bgt.n	80064ea <__swbuf_r+0x3a>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4628      	mov	r0, r5
 80064e4:	f7ff fdee 	bl	80060c4 <_fflush_r>
 80064e8:	b9e0      	cbnz	r0, 8006524 <__swbuf_r+0x74>
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	60a3      	str	r3, [r4, #8]
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	6022      	str	r2, [r4, #0]
 80064f6:	701e      	strb	r6, [r3, #0]
 80064f8:	6962      	ldr	r2, [r4, #20]
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d004      	beq.n	800650a <__swbuf_r+0x5a>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	07db      	lsls	r3, r3, #31
 8006504:	d506      	bpl.n	8006514 <__swbuf_r+0x64>
 8006506:	2e0a      	cmp	r6, #10
 8006508:	d104      	bne.n	8006514 <__swbuf_r+0x64>
 800650a:	4621      	mov	r1, r4
 800650c:	4628      	mov	r0, r5
 800650e:	f7ff fdd9 	bl	80060c4 <_fflush_r>
 8006512:	b938      	cbnz	r0, 8006524 <__swbuf_r+0x74>
 8006514:	4638      	mov	r0, r7
 8006516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006518:	4621      	mov	r1, r4
 800651a:	4628      	mov	r0, r5
 800651c:	f000 f806 	bl	800652c <__swsetup_r>
 8006520:	2800      	cmp	r0, #0
 8006522:	d0d5      	beq.n	80064d0 <__swbuf_r+0x20>
 8006524:	f04f 37ff 	mov.w	r7, #4294967295
 8006528:	e7f4      	b.n	8006514 <__swbuf_r+0x64>
	...

0800652c <__swsetup_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4b2a      	ldr	r3, [pc, #168]	; (80065d8 <__swsetup_r+0xac>)
 8006530:	4605      	mov	r5, r0
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	460c      	mov	r4, r1
 8006536:	b118      	cbz	r0, 8006540 <__swsetup_r+0x14>
 8006538:	6a03      	ldr	r3, [r0, #32]
 800653a:	b90b      	cbnz	r3, 8006540 <__swsetup_r+0x14>
 800653c:	f7fe f9d2 	bl	80048e4 <__sinit>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006546:	0718      	lsls	r0, r3, #28
 8006548:	d422      	bmi.n	8006590 <__swsetup_r+0x64>
 800654a:	06d9      	lsls	r1, r3, #27
 800654c:	d407      	bmi.n	800655e <__swsetup_r+0x32>
 800654e:	2309      	movs	r3, #9
 8006550:	602b      	str	r3, [r5, #0]
 8006552:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	e034      	b.n	80065c8 <__swsetup_r+0x9c>
 800655e:	0758      	lsls	r0, r3, #29
 8006560:	d512      	bpl.n	8006588 <__swsetup_r+0x5c>
 8006562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006564:	b141      	cbz	r1, 8006578 <__swsetup_r+0x4c>
 8006566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800656a:	4299      	cmp	r1, r3
 800656c:	d002      	beq.n	8006574 <__swsetup_r+0x48>
 800656e:	4628      	mov	r0, r5
 8006570:	f7ff f8a6 	bl	80056c0 <_free_r>
 8006574:	2300      	movs	r3, #0
 8006576:	6363      	str	r3, [r4, #52]	; 0x34
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	2300      	movs	r3, #0
 8006582:	6063      	str	r3, [r4, #4]
 8006584:	6923      	ldr	r3, [r4, #16]
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f043 0308 	orr.w	r3, r3, #8
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	b94b      	cbnz	r3, 80065a8 <__swsetup_r+0x7c>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800659a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659e:	d003      	beq.n	80065a8 <__swsetup_r+0x7c>
 80065a0:	4621      	mov	r1, r4
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 f884 	bl	80066b0 <__smakebuf_r>
 80065a8:	89a0      	ldrh	r0, [r4, #12]
 80065aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065ae:	f010 0301 	ands.w	r3, r0, #1
 80065b2:	d00a      	beq.n	80065ca <__swsetup_r+0x9e>
 80065b4:	2300      	movs	r3, #0
 80065b6:	60a3      	str	r3, [r4, #8]
 80065b8:	6963      	ldr	r3, [r4, #20]
 80065ba:	425b      	negs	r3, r3
 80065bc:	61a3      	str	r3, [r4, #24]
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	b943      	cbnz	r3, 80065d4 <__swsetup_r+0xa8>
 80065c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065c6:	d1c4      	bne.n	8006552 <__swsetup_r+0x26>
 80065c8:	bd38      	pop	{r3, r4, r5, pc}
 80065ca:	0781      	lsls	r1, r0, #30
 80065cc:	bf58      	it	pl
 80065ce:	6963      	ldrpl	r3, [r4, #20]
 80065d0:	60a3      	str	r3, [r4, #8]
 80065d2:	e7f4      	b.n	80065be <__swsetup_r+0x92>
 80065d4:	2000      	movs	r0, #0
 80065d6:	e7f7      	b.n	80065c8 <__swsetup_r+0x9c>
 80065d8:	200000a0 	.word	0x200000a0

080065dc <_raise_r>:
 80065dc:	291f      	cmp	r1, #31
 80065de:	b538      	push	{r3, r4, r5, lr}
 80065e0:	4604      	mov	r4, r0
 80065e2:	460d      	mov	r5, r1
 80065e4:	d904      	bls.n	80065f0 <_raise_r+0x14>
 80065e6:	2316      	movs	r3, #22
 80065e8:	6003      	str	r3, [r0, #0]
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80065f2:	b112      	cbz	r2, 80065fa <_raise_r+0x1e>
 80065f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065f8:	b94b      	cbnz	r3, 800660e <_raise_r+0x32>
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 f830 	bl	8006660 <_getpid_r>
 8006600:	462a      	mov	r2, r5
 8006602:	4601      	mov	r1, r0
 8006604:	4620      	mov	r0, r4
 8006606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800660a:	f000 b817 	b.w	800663c <_kill_r>
 800660e:	2b01      	cmp	r3, #1
 8006610:	d00a      	beq.n	8006628 <_raise_r+0x4c>
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	d103      	bne.n	800661e <_raise_r+0x42>
 8006616:	2316      	movs	r3, #22
 8006618:	6003      	str	r3, [r0, #0]
 800661a:	2001      	movs	r0, #1
 800661c:	e7e7      	b.n	80065ee <_raise_r+0x12>
 800661e:	2400      	movs	r4, #0
 8006620:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006624:	4628      	mov	r0, r5
 8006626:	4798      	blx	r3
 8006628:	2000      	movs	r0, #0
 800662a:	e7e0      	b.n	80065ee <_raise_r+0x12>

0800662c <raise>:
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <raise+0xc>)
 800662e:	4601      	mov	r1, r0
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	f7ff bfd3 	b.w	80065dc <_raise_r>
 8006636:	bf00      	nop
 8006638:	200000a0 	.word	0x200000a0

0800663c <_kill_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d07      	ldr	r5, [pc, #28]	; (800665c <_kill_r+0x20>)
 8006640:	2300      	movs	r3, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	f7fa fc6f 	bl	8000f2c <_kill>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d102      	bne.n	8006658 <_kill_r+0x1c>
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	b103      	cbz	r3, 8006658 <_kill_r+0x1c>
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	bd38      	pop	{r3, r4, r5, pc}
 800665a:	bf00      	nop
 800665c:	20000514 	.word	0x20000514

08006660 <_getpid_r>:
 8006660:	f7fa bc5c 	b.w	8000f1c <_getpid>

08006664 <__swhatbuf_r>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	460c      	mov	r4, r1
 8006668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666c:	2900      	cmp	r1, #0
 800666e:	b096      	sub	sp, #88	; 0x58
 8006670:	4615      	mov	r5, r2
 8006672:	461e      	mov	r6, r3
 8006674:	da0d      	bge.n	8006692 <__swhatbuf_r+0x2e>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	f013 0f80 	tst.w	r3, #128	; 0x80
 800667c:	f04f 0100 	mov.w	r1, #0
 8006680:	bf0c      	ite	eq
 8006682:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006686:	2340      	movne	r3, #64	; 0x40
 8006688:	2000      	movs	r0, #0
 800668a:	6031      	str	r1, [r6, #0]
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	b016      	add	sp, #88	; 0x58
 8006690:	bd70      	pop	{r4, r5, r6, pc}
 8006692:	466a      	mov	r2, sp
 8006694:	f000 f848 	bl	8006728 <_fstat_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	dbec      	blt.n	8006676 <__swhatbuf_r+0x12>
 800669c:	9901      	ldr	r1, [sp, #4]
 800669e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80066a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80066a6:	4259      	negs	r1, r3
 80066a8:	4159      	adcs	r1, r3
 80066aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ae:	e7eb      	b.n	8006688 <__swhatbuf_r+0x24>

080066b0 <__smakebuf_r>:
 80066b0:	898b      	ldrh	r3, [r1, #12]
 80066b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066b4:	079d      	lsls	r5, r3, #30
 80066b6:	4606      	mov	r6, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	d507      	bpl.n	80066cc <__smakebuf_r+0x1c>
 80066bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	6123      	str	r3, [r4, #16]
 80066c4:	2301      	movs	r3, #1
 80066c6:	6163      	str	r3, [r4, #20]
 80066c8:	b002      	add	sp, #8
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	ab01      	add	r3, sp, #4
 80066ce:	466a      	mov	r2, sp
 80066d0:	f7ff ffc8 	bl	8006664 <__swhatbuf_r>
 80066d4:	9900      	ldr	r1, [sp, #0]
 80066d6:	4605      	mov	r5, r0
 80066d8:	4630      	mov	r0, r6
 80066da:	f7ff f865 	bl	80057a8 <_malloc_r>
 80066de:	b948      	cbnz	r0, 80066f4 <__smakebuf_r+0x44>
 80066e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e4:	059a      	lsls	r2, r3, #22
 80066e6:	d4ef      	bmi.n	80066c8 <__smakebuf_r+0x18>
 80066e8:	f023 0303 	bic.w	r3, r3, #3
 80066ec:	f043 0302 	orr.w	r3, r3, #2
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	e7e3      	b.n	80066bc <__smakebuf_r+0xc>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	6020      	str	r0, [r4, #0]
 80066f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fc:	81a3      	strh	r3, [r4, #12]
 80066fe:	9b00      	ldr	r3, [sp, #0]
 8006700:	6163      	str	r3, [r4, #20]
 8006702:	9b01      	ldr	r3, [sp, #4]
 8006704:	6120      	str	r0, [r4, #16]
 8006706:	b15b      	cbz	r3, 8006720 <__smakebuf_r+0x70>
 8006708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800670c:	4630      	mov	r0, r6
 800670e:	f000 f81d 	bl	800674c <_isatty_r>
 8006712:	b128      	cbz	r0, 8006720 <__smakebuf_r+0x70>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	431d      	orrs	r5, r3
 8006724:	81a5      	strh	r5, [r4, #12]
 8006726:	e7cf      	b.n	80066c8 <__smakebuf_r+0x18>

08006728 <_fstat_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4d07      	ldr	r5, [pc, #28]	; (8006748 <_fstat_r+0x20>)
 800672c:	2300      	movs	r3, #0
 800672e:	4604      	mov	r4, r0
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	f7fa fc58 	bl	8000fea <_fstat>
 800673a:	1c43      	adds	r3, r0, #1
 800673c:	d102      	bne.n	8006744 <_fstat_r+0x1c>
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	b103      	cbz	r3, 8006744 <_fstat_r+0x1c>
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	bd38      	pop	{r3, r4, r5, pc}
 8006746:	bf00      	nop
 8006748:	20000514 	.word	0x20000514

0800674c <_isatty_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d06      	ldr	r5, [pc, #24]	; (8006768 <_isatty_r+0x1c>)
 8006750:	2300      	movs	r3, #0
 8006752:	4604      	mov	r4, r0
 8006754:	4608      	mov	r0, r1
 8006756:	602b      	str	r3, [r5, #0]
 8006758:	f7fa fc57 	bl	800100a <_isatty>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d102      	bne.n	8006766 <_isatty_r+0x1a>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	b103      	cbz	r3, 8006766 <_isatty_r+0x1a>
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	20000514 	.word	0x20000514

0800676c <_init>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr

08006778 <_fini>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr
